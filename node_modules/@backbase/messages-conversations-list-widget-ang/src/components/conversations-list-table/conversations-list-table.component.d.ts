import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { Observable } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { ConversationThread, MessageDraftsGetResponseBody } from '@backbase/messages-v5-http-ang';
import { BaseConversationsListPropertiesService } from '@backbase/messages-common';
import * as i0 from "@angular/core";
export declare class ConversationsListTableComponent implements OnInit, OnDestroy {
    private readonly properties;
    static counter: number;
    /**
     * Array of the conversations
     */
    set conversations(value: ConversationThread[]);
    /**
     * The conversations getter.
     */
    get conversations(): ConversationThread[];
    /**
     * Input stream of reset signals that will trigger selection reset
     */
    reset: Observable<undefined> | undefined;
    /**
     * The stream with the mailbox type.
     */
    set mailboxTypeValue(value: string);
    /**
     * The stream with the customer service title.
     */
    customerServiceTitle$: Observable<string | undefined>;
    /**
     * Emits conversation object on select event
     */
    select: EventEmitter<ConversationThread | MessageDraftsGetResponseBody>;
    /**
     * Emits id of the conversation that should be marked as read/unread
     */
    read: EventEmitter<any>;
    /**
     * Emits id of the conversation that should be removed
     */
    remove: EventEmitter<any>;
    /**
     * EventEmitter to update list of the conversations
     */
    update: EventEmitter<any>;
    /**
     * The unique ID HTML property for each component instance.
     */
    readonly id: string;
    readonly hostRef: this;
    private _conversations;
    private readonly readUnreadStatusTypeDefault;
    private readUnreadStatus;
    private removeId;
    private selectionsGroupForm;
    private readonly unsubscribe;
    /**
     * The flag that toggles between the open and closed state of the confirmation modal for conversation removal.
     */
    removeModalOpened: boolean;
    /**
     * The array containing the IDs of selected conversations.
     */
    selectedIdsArray: string[];
    /**
     * The stream with the flag toggling between the draft and the conversation view.
     */
    isDraftView$: Observable<boolean>;
    private readonly mailboxType$$;
    constructor(properties: BaseConversationsListPropertiesService);
    private doesParentContainDropdown;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * The flag indicating if the conversation is unread.
     */
    get isUnread(): boolean;
    /**
     * The method to update the list of conversations.
     */
    callUpdate(): void;
    /**
     * The method to mark a conversation as selected.
     *
     * @param event Mouse event
     * @param conversation Conversation thread data
     */
    callSelect(event: MouseEvent, conversation: ConversationThread): void;
    /**
     * The method to mark a conversation as read or unread.
     *
     * @param conversationId Conversation id
     * @param conversationStatus Conversation status
     */
    markAsReadUnread(conversationId?: string, conversationStatus?: boolean): void;
    /**
     * The method to open the confirmation modal for removal.
     *
     * @param id Conversation id
     */
    openRemoveModal(id?: string): void;
    /**
     * The method to close the confirmation modal for removal.
     */
    closeRemoveModal(): void;
    /**
     * The method to confirm the remove action and close the modal.
     */
    confirmRemoveModal(): void;
    /**
     * The method to update the selected conversations form.
     *
     * @param ngForm Form object
     */
    manageSelectionForm(ngForm?: NgForm): void;
    /**
     * The method to differentiate conversations by IDs in order to optimize loops performance.
     *
     * @param _index Index
     * @param item Conversation thread
     * @returns Conversation thread id
     */
    trackByFn(_index: number, item: ConversationThread): string;
    private resetForm;
    get mailboxType(): Observable<string>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConversationsListTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ConversationsListTableComponent, "bb-conversations-list-table-ui", never, { "conversations": "conversations"; "reset": "reset"; "mailboxTypeValue": "mailboxType"; "customerServiceTitle$": "customerServiceTitle$"; }, { "select": "select"; "read": "read"; "remove": "remove"; "update": "update"; }, never, never>;
}
export declare class ConversationsListTableCustomizableDirective extends BbTemplate<ConversationsListTableComponent, {
    isDraftView: boolean;
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ConversationsListTableCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ConversationsListTableCustomizableDirective, "[bbConversationsListTableCustomizable]", never, {}, {}, never>;
}
