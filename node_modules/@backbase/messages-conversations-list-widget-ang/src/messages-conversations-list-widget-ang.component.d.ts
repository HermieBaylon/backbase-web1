import { ElementRef, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { MessagesConversationsListWidgetService } from './messages-conversations-list-widget-ang.service';
import { ConversationsData, ConversationsDataExpanded, ConversationsReadRequest, DraftsData, FromParam, MailboxTypeEnum, MessagesConversationsListWidgetContext, ReadUnreadStatusType } from './model';
import { BaseConversationsListPropertiesService, BaseConversationsListWidgetComponent, SharedMethodsService } from '@backbase/messages-common';
import { GetConversationThreadsRequestParams } from '@backbase/messages-v5-http-ang';
import * as i0 from "@angular/core";
export interface MarkReadUnreadStream {
    status: ReadUnreadStatusType;
    changedItems: string[] | null | undefined;
}
export declare class MessagesConversationsListWidgetComponent extends BaseConversationsListWidgetComponent implements OnDestroy, OnInit {
    private readonly messagesService;
    readonly properties: BaseConversationsListPropertiesService;
    readonly shared: SharedMethodsService;
    readonly activatedRoute: ActivatedRoute;
    private readonly element;
    readonly hostRef: this;
    /**
     * Mailbox type property, used for Client widget
     */
    set mailboxTypeValue(value: string);
    /**
     * Quantity of items to show per page/to add per request, used for Client and Employee widget
     */
    set itemsPerPageValue(value: string | number);
    /**
     * Event published when Create message modal widget was closed,
     * used for Client and Employee widget to update list of conversations
     */
    set createMessageClosedEventNameValue(value: string);
    /**
     * Customer service title which should be replaced the name of the sender
     */
    set customerServiceTitleValue(value: string);
    /**
     * The notification for the successful message deletion operation.
     */
    messageDeleteSuccessTpl: TemplateRef<any> | undefined;
    /**
     * The notification for the successful delete operation of multiple messages.
     */
    messageDeleteSuccessMultipleTpl: TemplateRef<any> | undefined;
    /**
     * The notification for the successful deletion of a draft.
     */
    draftDeleteSuccessTpl: TemplateRef<any> | undefined;
    /**
     * The notification for succssful deletion of multiple drafts.
     */
    draftDeleteSuccessMultipleTpl: TemplateRef<any> | undefined;
    /**
     * The loading parameter indicating the starting page for the data to be loaded from.
     */
    readonly from: BehaviorSubject<FromParam>;
    /**
     * The loading flag.
     */
    isLoading: boolean;
    private readonly itemsPerPage$$;
    private readonly mailboxType$$;
    private readonly createMessageClosedEventName$$;
    private readonly customerServiceTitle$$;
    /**
     * The mailbox type enum (`inbox`, `outbox`, `drafts`).
     */
    readonly mailboxTypeEnum: typeof MailboxTypeEnum;
    /**
     * Quantity of items to show per page/to add per request.
     */
    readonly itemsPerPage: Observable<number>;
    /**
     * Mailbox type property, used for Client widget
     */
    readonly mailboxType: Observable<string>;
    /**
     * Customer service title to be displayed as a sender
     */
    readonly customerServiceTitle: Observable<string>;
    /**
     * Event published when Create message modal widget was closed,
     * used for Client and Employee widget to update list of conversations
     */
    readonly createMessageClosedEventName: Observable<string>;
    private readonly conversationsStream;
    private readonly destroyed$;
    private readonly resetSelection;
    private readonly markAsReadUnreadSubject;
    private readonly markAsReadUnreadStream;
    /**
     * The stream with the conversations data.
     */
    conversations: Observable<ConversationsDataExpanded>;
    private readonly firstNewConversationId$;
    constructor(messagesService: MessagesConversationsListWidgetService, properties: BaseConversationsListPropertiesService, shared: SharedMethodsService, activatedRoute: ActivatedRoute, element: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Delete conversations
     *
     * @param ids Conversations id list
     */
    removeConversations(ids: string[]): void;
    /**
     * Get conversations data.
     *
     * @param params Get conversation thread request params
     * @returns Conversations stream
     */
    getConversations(params: GetConversationThreadsRequestParams): Observable<ConversationsData>;
    /**
     * Get drafts data.
     *
     * @param draftData Draft size and position
     * @returns Draft stream
     */
    getDrafts({ size, from }: {
        size: number;
        from: number;
    }): Observable<DraftsData>;
    /**
     * Mark a message as read or unread.
     *
     * @param params Conversation read request
     */
    markAsReadUnread(params: ConversationsReadRequest): void;
    /**
     * Change the starting page for the conversations loading.
     *
     * @param event Starting page params
     */
    setLoadingParams(event: FromParam): void;
    /**
     * The method to change the starting page to the first one.
     */
    updateConversations(): void;
    /**
     * Open the `Compose Message` modal.
     *
     * @param draftId Draft id
     */
    compose(draftId: string): void;
    private deleteConversationsStream;
    private deleteDraftsStream;
    private getData;
    private mergeConversationsData;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessagesConversationsListWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessagesConversationsListWidgetComponent, "bb-messages-conversations-list-widget-ang", never, { "mailboxTypeValue": "mailboxType"; "itemsPerPageValue": "itemsPerPage"; "createMessageClosedEventNameValue": "createMessageClosedEventName"; "customerServiceTitleValue": "customerServiceTitle"; }, {}, never, never>;
}
export declare class MessagesConversationsListCustomizableDirective extends BbTemplate<MessagesConversationsListWidgetComponent, MessagesConversationsListWidgetContext> {
    static ɵfac: i0.ɵɵFactoryDeclaration<MessagesConversationsListCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MessagesConversationsListCustomizableDirective, "[bbMessagesConversationsListCustomizable]", never, {}, {}, never>;
}
