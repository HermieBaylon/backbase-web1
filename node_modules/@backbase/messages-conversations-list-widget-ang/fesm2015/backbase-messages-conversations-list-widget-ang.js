import * as i0 from '@angular/core';
import { Injectable, Inject, Component, Input, Directive, EventEmitter, Output, ViewChild, NgModule } from '@angular/core';
import * as i6 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i10 from '@angular/forms';
import { ControlContainer, NgForm, NgModelGroup, FormsModule } from '@angular/forms';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BbTemplate, TemplateRegistry, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i2 from '@backbase/messages-common';
import { getPropertyValue, BaseConversationsListPropertiesService, BaseConversationsListWidgetComponent, shareReplayOnce, MessagesRequestErrorModule, SharedMethodsModule } from '@backbase/messages-common';
import * as i3 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i1$1 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i4 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i2$1 from '@backbase/ui-ang/checkbox-group';
import { CheckboxGroupModule } from '@backbase/ui-ang/checkbox-group';
import * as i6$2 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i2$2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i6$1 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i5 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i7 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i7$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i5$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i8 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import { tap, map, takeUntil, take, withLatestFrom, switchMap, scan, catchError, pairwise, first, filter, observeOn } from 'rxjs/operators';
import { BehaviorSubject, Subject, of, combineLatest, merge, asyncScheduler } from 'rxjs';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i1 from '@backbase/messages-v5-http-ang';
import * as i3$1 from '@angular/router';

var ReadUnreadStatusType;
(function (ReadUnreadStatusType) {
    ReadUnreadStatusType["READ"] = "READ";
    ReadUnreadStatusType["UNREAD"] = "UNREAD";
})(ReadUnreadStatusType || (ReadUnreadStatusType = {}));
var MailboxTypeEnum;
(function (MailboxTypeEnum) {
    MailboxTypeEnum["inbox"] = "inbox";
    MailboxTypeEnum["outbox"] = "outbox";
    MailboxTypeEnum["drafts"] = "drafts";
})(MailboxTypeEnum || (MailboxTypeEnum = {}));

const DefaultConversationsGetReqParams = {
    direction: 'DESC',
    from: 0,
    size: 10,
    mailboxType: '',
};
const bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
class MessagesConversationsListWidgetService {
    constructor(messagesService, sharedMethodsService, pubSub) {
        this.messagesService = messagesService;
        this.sharedMethodsService = sharedMethodsService;
        this.pubSub = pubSub;
    }
    deleteConversations(ids) {
        return this.messagesService
            .deleteConversationThreads({ ids })
            .pipe(tap(() => this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined)));
    }
    deleteDrafts(ids) {
        return this.messagesService.deleteMessageDrafts({ ids });
    }
    getConversations(params = DefaultConversationsGetReqParams) {
        return this.messagesService
            .getConversationThreads(params, 'response')
            .pipe(map((response) => this.sharedMethodsService.processData(response)));
    }
    getDrafts({ from, size }) {
        return this.messagesService
            .getMessageDrafts({ from, size }, 'response')
            .pipe(map((response) => this.sharedMethodsService.processData(response)));
    }
    markConversationsAsReadUnread(params) {
        return this.messagesService
            .putMarkAsReadUnread({ markAsReadUnreadPutRequestBody: params })
            .pipe(tap(() => this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined)));
    }
}
MessagesConversationsListWidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetService, deps: [{ token: i1.MessagecenterHttpService }, { token: i2.SharedMethodsService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesConversationsListWidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagecenterHttpService }, { type: i2.SharedMethodsService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });

class ConversationsListTableHeadComponent {
    constructor(properties) {
        this.properties = properties;
        this.hostRef = this;
        this.mailboxType$$ = new BehaviorSubject(undefined);
        /**
         * The mailbox type enum (`inbox`, `outbox`, `drafts`).
         */
        this.mailboxTypeEnum = MailboxTypeEnum;
    }
    /**
     * The stream with the mailbox type.
     */
    set mailboxTypeValue(value) {
        this.mailboxType$$.next(value);
    }
    get mailboxType() {
        return getPropertyValue(this.mailboxType$$.asObservable(), this.properties.mailboxType);
    }
}
ConversationsListTableHeadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableHeadComponent, deps: [{ token: i2.BaseConversationsListPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
ConversationsListTableHeadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableHeadComponent, selector: "tr[bb-conversations-list-table-head-ui]", inputs: { mailboxTypeValue: ["mailboxType", "mailboxTypeValue"] }, providers: [BaseConversationsListPropertiesService], ngImport: i0, template: "<ng-container\n  bbConversationsListTableHeadCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    mailboxType: mailboxType | async\n  }\"\n></ng-container>\n\n<ng-template bbConversationsListTableHeadCustomizable let-host let-mailboxType=\"context.mailboxType\">\n  <th scope=\"col\" data-role=\"checkbox-column\">\n    <bb-checkbox-group-ui\n      aria-label=\"Select all conversations\"\n      i18n-aria-label=\"\n        Select all conversations@@messages.messagesConversationsList.messagesTable.checkboxGroupAriaLabel\"\n      ngModelGroup=\"ids\"\n    ></bb-checkbox-group-ui>\n  </th>\n  <th scope=\"col\" data-role=\"importance-column\"></th>\n  <th\n    data-role=\"from-column\"\n    scope=\"col\"\n    i18n=\"\n      From|The name of the table head cell called 'From'@@messages.messagesConversationsList.messagesTable.headerFrom\"\n    *ngIf=\"mailboxType !== host.mailboxTypeEnum.drafts\"\n  >\n    From\n  </th>\n  <th scope=\"col\" data-role=\"attachments-column\"></th>\n  <th\n    data-role=\"subject-column\"\n    scope=\"col\"\n    i18n=\"\n      Subject|The name of the table head cell called\n      'Subject'@@messages.messagesConversationsList.messagesTable.headerSubject\"\n  >\n    Subject\n  </th>\n  <th\n    data-role=\"topic-column\"\n    scope=\"col\"\n    i18n=\"\n      Topic|The name of the table head cell called 'Topic'@@messages.messagesConversationsList.messagesTable.headerTopic\"\n  >\n    Topic\n  </th>\n  <th\n    data-role=\"date-column\"\n    scope=\"col\"\n    i18n=\"\n      Date|The name of the table head cell called 'Date'@@messages.messagesConversationsList.messagesTable.headerDate\"\n  >\n    Date\n  </th>\n  <th data-role=\"dropdown-menu-column\" scope=\"col\"></th>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2$1.CheckboxGroupComponent; }), selector: "bb-checkbox-group-ui" }], directives: [{ type: i0.forwardRef(function () { return ConversationsListTableHeadCustomizableDirective; }), selector: "[bbConversationsListTableHeadCustomizable]" }, { type: i0.forwardRef(function () { return i10.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i10.NgModelGroup; }), selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0.forwardRef(function () { return i6.AsyncPipe; }) }, viewProviders: [{ provide: ControlContainer, useExisting: NgForm }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableHeadComponent, decorators: [{
            type: Component,
            args: [{
                    /* eslint-disable */
                    selector: 'tr[bb-conversations-list-table-head-ui]',
                    /* eslint-enable */
                    templateUrl: './conversations-list-table-head.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
                    providers: [BaseConversationsListPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i2.BaseConversationsListPropertiesService }]; }, propDecorators: { mailboxTypeValue: [{
                type: Input,
                args: ['mailboxType']
            }] } });
class ConversationsListTableHeadCustomizableDirective extends BbTemplate {
}
ConversationsListTableHeadCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableHeadCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConversationsListTableHeadCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableHeadCustomizableDirective, selector: "[bbConversationsListTableHeadCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableHeadCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConversationsListTableHeadCustomizable]',
                }]
        }] });

class ConversationsListTableRowComponent {
    constructor() {
        /**
         * Identifier if it is draft view
         */
        this.isDraftView = false;
        /**
         * Event emitted when this conversation should be marked as read/unread
         */
        this.read = new EventEmitter();
        /**
         * Event emitted when this conversation should be removed
         */
        this.remove = new EventEmitter();
        this.hostRef = this;
        /**
         * The mailbox type enum (inbox, outbox, drafts).
         */
        this.mailboxTypeEnum = MailboxTypeEnum;
    }
    /**
     * The method to toggle the read or unread conversation state.
     */
    toggleRead() {
        this.read.emit();
    }
    /**
     * The method to remove a conversation.
     */
    emitRemove() {
        this.remove.emit();
    }
}
ConversationsListTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConversationsListTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableRowComponent, selector: "tr[bb-conversations-list-table-row-ui]", inputs: { conversation: "conversation", isDraftView: "isDraftView", customerServiceTitle$: "customerServiceTitle$", mailboxType: "mailboxType" }, outputs: { read: "read", remove: "remove" }, providers: [BaseConversationsListPropertiesService], ngImport: i0, template: "<ng-container\n  bbConversationsListTableRowCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    customerServiceTitle: customerServiceTitle$ | async\n  }\"\n></ng-container>\n\n<ng-template bbConversationsListTableRowCustomizable let-host let-customerServiceTitle=\"context.customerServiceTitle\">\n  <td (click)=\"$event.stopPropagation()\" data-role=\"checkbox-cell\">\n    <bb-input-checkbox-ui\n      aria-label=\"Checkbox to select conversation\"\n      i18n-aria-label=\"\n        Checkbox to select conversation@@messages.messagesConversationsList.messagesTable.selectConversationCheckbox\"\n      ngModel\n      [name]=\"host.conversation.id\"\n    ></bb-input-checkbox-ui>\n    <span\n      class=\"sr-only\"\n      i18n=\"Conversation details@@messages.messagesConversationsList.messagesTable.conversation-details\"\n    >\n      Click to open conversation thread, conversation details:\n    </span>\n  </td>\n  <td data-role=\"important-cell\">\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        class=\"bb-stack__item--push-right\"\n        bbTooltip=\"High priority\"\n        i18n-bbTooltip=\"High priority@@messages.messagesConversationsList.messagesTable.highPriorityMessage\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n        *ngIf=\"host.conversation.important\"\n        name=\"error\"\n        color=\"danger\"\n        aria-label=\"High priority\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.highPriorityMessage\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td *ngIf=\"!host.isDraftView\" data-role=\"from-cell\">\n    <span class=\"sr-only\" i18n=\"Messages from@@messages.messagesConversationsList.messagesTable.messagesFrom\"\n      >,From</span\n    >\n    <ng-container [ngSwitch]=\"host.conversation.sender?.id\">\n      <span *ngSwitchCase=\"'customer.service'\">{{ customerServiceTitle }}</span>\n      <span *ngSwitchDefault>{{ host.conversation.sender?.name }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"host.conversation.hasDraft\">\n      <span *ngIf=\"host.conversation.sender?.id\">, </span>\n      <span\n        aria-hidden=\"true\"\n        class=\"text-danger\"\n        i18n=\"Draft@@messages.messagesConversationsList.messagesTable.draftText\"\n        >Draft</span\n      >\n      <span class=\"sr-only\" i18n=\"Contains draft@@messages.messagesConversationsList.messagesTable.containsDraft\"\n        >Contains draft</span\n      >\n    </ng-container>\n  </td>\n  <td data-role=\"has-attachments-cell\">\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        *ngIf=\"host.conversation.hasAttachments\"\n        bbTooltip=\"Contains attachments\"\n        container=\"body\"\n        i18n-bbTooltip=\"\n          Contains attachments|Contains file\n          attachments@@messages.messagesConversationsList.messagesTable.containsFileAttachments\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n        class=\"bb-stack__item--push-right bb-text-support\"\n        name=\"attachment\"\n        aria-label=\"Contains attachments,\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.containsFileAttachments\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td>\n    <ng-container *ngIf=\"host.conversation.subject; else noSubject\">\n      <span class=\"sr-only\" i18n=\"Subject@@messages.messagesConversationsList.messagesTable.subject\">,Subject</span>\n      <span class=\"break-word\" [innerHTML]=\"host.conversation.subject\"></span>\n    </ng-container>\n  </td>\n  <td data-role=\"topic-cell\">\n    <span class=\"sr-only\" i18n=\"Topic@@messages.messagesConversationsList.messagesTable.topic\">,Topic</span>\n    <div class=\"bb-stack\" *ngIf=\"host.conversation.topic && host.conversation.topic.name; else noTopic\">\n      <bb-badge-ui\n        class=\"bb-stack__item\"\n        [text]=\"host.conversation.topic?.name\"\n        [color]=\"host.conversation.topic?.deleted ? 'secondary' : 'primary'\"\n      ></bb-badge-ui>\n      <bb-icon-ui\n        *ngIf=\"host.conversation.topic?.deleted\"\n        name=\"warning\"\n        color=\"warning\"\n        i18n-bbTooltip=\"\n          This topic no longer exists. Contact support for\n          details.@@messages.messagesConversationsList.messagesTable.deletedTopic\"\n        bbTooltip=\"This topic no longer exists. Contact support for details\"\n        aria-label=\"This topic no longer exists. Contact support for details,\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.deletedTopic\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td data-role=\"date-cell\">\n    <span class=\"sr-only\" i18n=\"Date@@messages.messagesConversationsList.messagesTable.date\">,Date</span>\n    <span aria-hidden=\"true\">{{ host.conversation.timestamp | date: 'shortDate' }}</span>\n    <span class=\"sr-only\">{{ host.conversation.timestamp | date: 'mediumDate' }}</span>\n  </td>\n  <td data-role=\"dropdown-cell\" tabindex=\"-1\">\n    <span\n      class=\"sr-only\"\n      i18n=\"Dropdown menu|Dropdown menu button tooltip@@messages.messagesConversationsList.messagesTable.dropdownMenu\"\n      >Dropdown menu</span\n    >\n    <span\n      bbTooltip=\"Dropdown menu\"\n      container=\"body\"\n      tabindex=\"-1\"\n      i18n-bbTooltip=\"@@messages.messagesConversationsList.messagesTable.dropdownMenu\"\n      triggers=\"hover focus\"\n      class=\"bb-d-inline-block\"\n      placement=\"top right\"\n    >\n      <bb-dropdown-menu-ui\n        icon=\"ellipsis-h\"\n        btnColor=\"link\"\n        iconColor=\"dark\"\n        tabindex=\"-1\"\n        buttonSize=\"sm\"\n        iconSize=\"md\"\n        btnCircle=\"true\"\n        [btnCircle]=\"true\"\n        [dropDownButtonLabel]=\"'Dropdown menu for ' + host.conversation.subject\"\n        i18n-dropDownButtonLabel=\"\n          Dropdown menu aria-label@@messages.messagesConversationsList.messagesTable.dropdownMenuAriaLabel\"\n      >\n        <ng-template bbDropdownMenuItem>\n          <a\n            role=\"menuitem\"\n            data-role=\"mark-as-read-unread\"\n            class=\"dropdown-item\"\n            *ngIf=\"!host.isDraftView\"\n            (bbKeyboardClick)=\"host.toggleRead()\"\n          >\n            <ng-container\n              i18n=\"\n                Mark as Read or Unread|Item text in dropdown\n                menu@@messages.messagesConversationsList.messagesTable.markAsReadDropdownItem\"\n            >\n              {host.conversation.read + '', select, true {Mark as unread} false {Mark as read}}\n            </ng-container>\n          </a>\n          <a\n            role=\"menuitem\"\n            data-role=\"delete\"\n            class=\"dropdown-item\"\n            *ngIf=\"host.conversation.deletable || host.isDraftView\"\n            (bbKeyboardClick)=\"host.emitRemove(host.conversation.id)\"\n          >\n            <ng-container\n              i18n=\"\n                Delete|Item text in dropdown menu@@messages.messagesConversationsList.messagesTable.deleteDropdownItem\"\n              >Delete</ng-container\n            >\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </span>\n  </td>\n\n  <ng-template #noSubject>\n    <span class=\"bb-text-support\" i18n=\"No subject@@messages.messagesConversationsList.messagesTable.subjectEmptyState\"\n      >No subject</span\n    >\n  </ng-template>\n\n  <ng-template #noTopic>\n    <span class=\"bb-text-support\" i18n=\"No subject@@messages.messagesConversationsList.messagesTable.topicEmptyState\"\n      >No topic</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0.forwardRef(function () { return i2$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i3.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i0.forwardRef(function () { return i4.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i0.forwardRef(function () { return ConversationsListTableRowCustomizableDirective; }), selector: "[bbConversationsListTableRowCustomizable]" }, { type: i0.forwardRef(function () { return i10.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i10.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i6.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i6.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i6.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i4.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0.forwardRef(function () { return i8.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }], pipes: { "async": i0.forwardRef(function () { return i6.AsyncPipe; }), "date": i0.forwardRef(function () { return i6.DatePipe; }) }, viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableRowComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'tr[bb-conversations-list-table-row-ui]',
                    templateUrl: './conversations-list-table-row.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }],
                    providers: [BaseConversationsListPropertiesService],
                }]
        }], propDecorators: { conversation: [{
                type: Input
            }], isDraftView: [{
                type: Input
            }], customerServiceTitle$: [{
                type: Input
            }], mailboxType: [{
                type: Input
            }], read: [{
                type: Output
            }], remove: [{
                type: Output
            }] } });
class ConversationsListTableRowCustomizableDirective extends BbTemplate {
}
ConversationsListTableRowCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableRowCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConversationsListTableRowCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableRowCustomizableDirective, selector: "[bbConversationsListTableRowCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableRowCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConversationsListTableRowCustomizable]',
                }]
        }] });

class ConversationsListTableComponent {
    constructor(properties) {
        this.properties = properties;
        /**
         * Emits conversation object on select event
         */
        this.select = new EventEmitter();
        /**
         * Emits id of the conversation that should be marked as read/unread
         */
        this.read = new EventEmitter();
        /**
         * Emits id of the conversation that should be removed
         */
        this.remove = new EventEmitter();
        /**
         * EventEmitter to update list of the conversations
         */
        this.update = new EventEmitter();
        /**
         * The unique ID HTML property for each component instance.
         */
        this.id = `conversations-list-table-component-${ConversationsListTableComponent.counter++}`;
        this.hostRef = this;
        this._conversations = [];
        this.readUnreadStatusTypeDefault = ReadUnreadStatusType.READ;
        this.readUnreadStatus = this.readUnreadStatusTypeDefault;
        this.unsubscribe = new Subject();
        /**
         * The flag that toggles between the open and closed state of the confirmation modal for conversation removal.
         */
        this.removeModalOpened = false;
        /**
         * The array containing the IDs of selected conversations.
         */
        this.selectedIdsArray = [];
        /**
         * The stream with the flag toggling between the draft and the conversation view.
         */
        this.isDraftView$ = of(false);
        this.mailboxType$$ = new BehaviorSubject(undefined);
    }
    /**
     * Array of the conversations
     */
    set conversations(value) {
        this._conversations = value;
        this.manageSelectionForm(this.selectionsGroupForm);
    }
    /**
     * The conversations getter.
     */
    get conversations() {
        return this._conversations;
    }
    /**
     * The stream with the mailbox type.
     */
    set mailboxTypeValue(value) {
        this.mailboxType$$.next(value);
    }
    doesParentContainDropdown(node) {
        return !!(node.parentNode && node.parentNode.closest('.dropdown'));
    }
    ngOnInit() {
        if (this.reset) {
            this.reset.pipe(takeUntil(this.unsubscribe)).subscribe(() => this.resetForm());
        }
        this.isDraftView$ = this.mailboxType.pipe(take(1), map(type => type === MailboxTypeEnum.drafts));
    }
    ngOnDestroy() {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    /**
     * The flag indicating if the conversation is unread.
     */
    get isUnread() {
        return this.readUnreadStatus === ReadUnreadStatusType.UNREAD;
    }
    /**
     * The method to update the list of conversations.
     */
    callUpdate() {
        this.resetForm();
        this.update.emit();
    }
    /**
     * The method to mark a conversation as selected.
     *
     * @param event Mouse event
     * @param conversation Conversation thread data
     */
    callSelect(event, conversation) {
        if (this.doesParentContainDropdown(event.target)) {
            return;
        }
        this.select.emit(conversation);
    }
    /**
     * The method to mark a conversation as read or unread.
     *
     * @param conversationId Conversation id
     * @param conversationStatus Conversation status
     */
    markAsReadUnread(conversationId, conversationStatus) {
        const status = conversationStatus === undefined
            ? this.readUnreadStatus
            : conversationStatus
                ? ReadUnreadStatusType.UNREAD
                : ReadUnreadStatusType.READ;
        this.read.emit({
            status,
            ids: conversationId ? [conversationId] : this.selectedIdsArray,
        });
    }
    /**
     * The method to open the confirmation modal for removal.
     *
     * @param id Conversation id
     */
    openRemoveModal(id) {
        this.removeId = id;
        this.removeModalOpened = true;
    }
    /**
     * The method to close the confirmation modal for removal.
     */
    closeRemoveModal() {
        this.removeId = undefined;
        this.removeModalOpened = false;
    }
    /**
     * The method to confirm the remove action and close the modal.
     */
    confirmRemoveModal() {
        this.remove.emit(this.removeId ? [this.removeId] : this.selectedIdsArray);
        this.closeRemoveModal();
    }
    /**
     * The method to update the selected conversations form.
     *
     * @param ngForm Form object
     */
    manageSelectionForm(ngForm) {
        if (ngForm) {
            const ids = ngForm.form.value.ids;
            this.selectionsGroupForm = ngForm;
            this.selectedIdsArray = Object.keys(ids).filter(id => ids[id]);
            if (this.selectedIdsArray.length) {
                const selectedIdsIncludesUnreadConversation = this.conversations.find(conversation => this.selectedIdsArray.includes(conversation.id) && !conversation.read);
                this.readUnreadStatus = selectedIdsIncludesUnreadConversation
                    ? ReadUnreadStatusType.READ
                    : ReadUnreadStatusType.UNREAD;
            }
            else {
                this.readUnreadStatus = ReadUnreadStatusType.READ;
            }
        }
    }
    /**
     * The method to differentiate conversations by IDs in order to optimize loops performance.
     *
     * @param _index Index
     * @param item Conversation thread
     * @returns Conversation thread id
     */
    trackByFn(_index, item) {
        return item.id;
    }
    resetForm() {
        if (this.selectionsGroupForm) {
            this.selectionsGroupForm.reset();
            this.manageSelectionForm(this.selectionsGroupForm);
        }
    }
    get mailboxType() {
        return getPropertyValue(this.mailboxType$$.asObservable(), this.properties.mailboxType);
    }
}
ConversationsListTableComponent.counter = 0;
ConversationsListTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableComponent, deps: [{ token: i2.BaseConversationsListPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
ConversationsListTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableComponent, selector: "bb-conversations-list-table-ui", inputs: { conversations: "conversations", reset: "reset", mailboxTypeValue: ["mailboxType", "mailboxTypeValue"], customerServiceTitle$: "customerServiceTitle$" }, outputs: { select: "select", read: "read", remove: "remove", update: "update" }, providers: [TemplateRegistry, BaseConversationsListPropertiesService], ngImport: i0, template: "<ng-container\n  bbConversationsListTableCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    isDraftView: isDraftView$ | async,\n    mailboxType: mailboxType | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbConversationsListTableCustomizable\n  let-host\n  let-isDraftView=\"context.isDraftView\"\n  let-mailboxType=\"context.mailboxType\"\n>\n  <div\n    class=\"sr-only\"\n    i18n=\"Mailbox tab of selected type is open announcement@@messages.messagesConversationsList.openTabType\"\n  >\n    { mailboxType, select, inbox {inbox} outbox {outbox} drafts {drafts} } tab is open,\n  </div>\n  <div class=\"d-md-none\">\n    <div class=\"bb-button-bar\">\n      <ng-container *ngTemplateOutlet=\"reloadBtn\"></ng-container>\n    </div>\n    <table class=\"table\" role=\"presentation\">\n      <tbody role=\"list\">\n        <tr\n          role=\"listitem\"\n          tabindex=\"0\"\n          data-role=\"conversation-mobile\"\n          *ngFor=\"let conversation of host.conversations\"\n          [ngClass]=\"{ 'table-active': !conversation.read }\"\n          (bbKeyboardClick)=\"host.callSelect($event, conversation)\"\n        >\n          <td>\n            <div\n              class=\"text-truncate text-normal bb-text-semi-bold break-word\"\n              *ngIf=\"conversation.subject; else noSubject\"\n              [innerHTML]=\"conversation.subject\"\n            ></div>\n            <div class=\"text-truncate text-small\" *ngIf=\"conversation.sender\">{{ conversation.sender.name }}</div>\n\n            <ng-template #noSubject>\n              <span\n                class=\"bb-text-support\"\n                i18n=\"No subject@@messages.messagesConversationsList.messagesTableMobile.subjectEmptyState\"\n                >No subject</span\n              >\n            </ng-template>\n          </td>\n          <td>\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item text-small\" [attr.aria-label]=\"conversation.timestamp | date: 'mediumDate'\">\n                <span aria-hidden=\"true\">{{ conversation.timestamp | date: 'shortDate' }}</span>\n              </div>\n              <bb-icon-ui\n                *ngIf=\"conversation.important\"\n                bbTooltip=\"High priority\"\n                i18n-bbTooltip=\"High priority@@messages.messagesConversationsList.messagesTable.importantMessage\"\n                container=\"body\"\n                triggers=\"hover\"\n                placement=\"bottom\"\n                class=\"bb-stack__item\"\n                name=\"error\"\n                color=\"danger\"\n                aria-label=\"High priority\"\n                i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.importantMessage\"\n              ></bb-icon-ui>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div class=\"d-none d-md-block\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item--push-right\">\n        <ng-container *ngIf=\"host.selectedIdsArray.length; else noneSelectedTpl\">\n          <span class=\"bb-stack__item bb-text-support\">\n            <span\n              data-role=\"selected-conversations-counter\"\n              i18n=\"Selected|Selected conversations count@@messages.messagesConversationsList.selected\"\n              [attr.aria-label]=\"host.selectedIdsArray.length + ' Selected'\"\n            >\n              <span aria-hidden=\"true\">{{ host.selectedIdsArray.length + ' Selected' }}</span>\n            </span>\n          </span>\n          <span class=\"bb-stack__item bb-text-support\">|</span>\n          <a\n            data-role=\"clear-selection\"\n            href=\"#\"\n            class=\"bb-stack__item bb-text-semi-bold\"\n            i18n=\"\n              Clear Selection|Clear selection button on the top of the table\n              list@@messages.messagesConversationsList.clearSelectionButton\"\n            (click)=\"\n              $event.preventDefault(); selectionsGroupForm.reset(); host.manageSelectionForm(selectionsGroupForm)\n            \"\n            >Clear Selection</a\n          >\n          <button\n            bbButton\n            color=\"link\"\n            [circle]=\"true\"\n            data-role=\"mark-as-read-unread\"\n            i18n-aria-label=\"\n              Toggle read status@@messages.messagesConversationsList.messagesTableMobile.toggleReadStatusAriaLabel\"\n            aria-label=\"Toggle read status\"\n            i18n-bbTooltip=\"\n              Toggle read status@@messages.messagesConversationsList.messagesTable.ToggleReadStatusTooltipText\"\n            bbTooltip=\"Toggle read status\"\n            container=\"body\"\n            triggers=\"hover\"\n            *ngIf=\"!isDraftView\"\n            (click)=\"host.selectedIdsArray.length && host.markAsReadUnread()\"\n          >\n            <bb-icon-ui *ngIf=\"host.isUnread; else readIconTpl\" class=\"bb-text-support\" name=\"markunread\"> </bb-icon-ui>\n            <ng-template #readIconTpl>\n              <bb-icon-ui class=\"bb-text-support\" name=\"drafts\"></bb-icon-ui>\n            </ng-template>\n          </button>\n\n          <button\n            bbButton\n            color=\"link\"\n            data-role=\"Delete\"\n            circle=\"true\"\n            aria-label=\"Delete\"\n            i18n-aria-label=\"Delete aria-label@@messages.messagesConversationsList.deleteButtonAriaLabel\"\n            i18n=\"Delete|Delete button on the top of the table list@@messages.messagesConversationsList.deleteButton\"\n            bbTooltip=\"Delete\"\n            i18n-bbTooltip=\"\n              Delete|Delete button on the top of the table list\n              tooltip@@messages.messagesConversationsList.deleteTooltip\"\n            container=\"body\"\n            triggers=\"hover\"\n            (click)=\"host.openRemoveModal()\"\n          >\n            <bb-icon-ui class=\"bb-text-support\" name=\"delete\"></bb-icon-ui>\n          </button>\n        </ng-container>\n        <ng-template #noneSelectedTpl>\n          <span\n            aria-live=\"assertive\"\n            class=\"sr-only\"\n            data-role=\"none-selected-conversations-counter\"\n            i18n=\"None selected|None selected conversations count@@messages.messagesConversationsList.noneSelected\"\n          >\n            None selected\n          </span>\n        </ng-template>\n        <ng-container *ngIf=\"!host.selectedIdsArray.length\">\n          <ng-container *ngTemplateOutlet=\"reloadBtn\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n\n    <form #selectionsGroupForm=\"ngForm\">\n      <table class=\"table table-hover\" data-role=\"conversations-list-table\">\n        <caption class=\"sr-only\" i18n=\"Conversations@@messages.messagesConversationsList.conversationsTable\">\n          Conversations\n        </caption>\n        <thead>\n          <tr\n            bb-conversations-list-table-head-ui\n            (change)=\"host.manageSelectionForm(selectionsGroupForm)\"\n            [mailboxType]=\"mailboxType\"\n          ></tr>\n        </thead>\n        <tbody ngModelGroup=\"ids\">\n          <tr\n            [attr.aria-describedby]=\"'bb-cs-' + conversation.id\"\n            bb-conversations-list-table-row-ui\n            tabindex=\"0\"\n            id=\"bb-cs-{{ conversation.id }}\"\n            class=\"bb-messages-conversations-list-item\"\n            data-role=\"conversation\"\n            *ngFor=\"let conversation of host.conversations; trackBy: trackByFn\"\n            [mailboxType]=\"mailboxType\"\n            [conversation]=\"conversation\"\n            [isDraftView]=\"isDraftView\"\n            [customerServiceTitle$]=\"customerServiceTitle$\"\n            [ngClass]=\"{ 'table-active bb-text-semi-bold': conversation.hasOwnProperty('read') && !conversation.read }\"\n            (change)=\"host.manageSelectionForm(selectionsGroupForm)\"\n            (bbKeyboardClick)=\"host.callSelect($event, conversation)\"\n            (remove)=\"host.openRemoveModal(conversation.id)\"\n            (read)=\"host.markAsReadUnread(conversation.id, conversation.read)\"\n          ></tr>\n        </tbody>\n      </table>\n    </form>\n\n    <bb-modal-ui\n      [isOpen]=\"host.removeModalOpened\"\n      (cancel)=\"host.closeRemoveModal()\"\n      aria-describedby=\"messages-list-table-delete-conversation-modal-subtitle\"\n    >\n      <bb-modal-header-ui>\n        <ng-template bbCustomModalHeader>\n          <span\n            class=\"text-large bb-text-semi-bold\"\n            i18n=\"\n              Delete conversation(s)/draft(s)|Header title of the confirmation modal to delete conversation(s) or\n              draft(s)@@messages.messagesConversationsList.messagesDeleteModal.headerTitle\"\n            >Delete {isDraftView + '', select, true {draft(s)} false {conversation(s)}}?</span\n          >\n        </ng-template>\n      </bb-modal-header-ui>\n      <bb-modal-body-ui>\n        <ng-template bbCustomModalBody>\n          <span\n            id=\"messages-list-table-delete-conversation-modal-subtitle\"\n            i18n=\"\n              Are you sure you want to delete the selected conversation(s)?(s)|Body message of the confirmation modal to\n              delete conversation(s)@@messages.messagesConversationsList.messagesDeleteModal.bodyMessage\"\n            >Are you sure you want to delete the selected {isDraftView + '', select, true {draft(s)} false\n            {conversation(s)}}?</span\n          >\n        </ng-template>\n      </bb-modal-body-ui>\n      <bb-modal-footer-ui>\n        <ng-template bbCustomModalFooter>\n          <bb-button-ui\n            color=\"secondary\"\n            i18n=\"\n              Cancel|Cancel button inside the confirmation modal\n              footer@@messages.messagesConversationsList.messagesDeleteModal.cancelButton\"\n            (click)=\"host.closeRemoveModal()\"\n            >Cancel\n          </bb-button-ui>\n          <bb-button-ui\n            color=\"danger\"\n            i18n=\"\n              Delete|Delete button inside the confirmation modal\n              footer@@messages.messagesConversationsList.messagesDeleteModal.deleteButton\"\n            (click)=\"host.confirmRemoveModal()\"\n            >Delete\n          </bb-button-ui>\n        </ng-template>\n      </bb-modal-footer-ui>\n    </bb-modal-ui>\n  </div>\n\n  <ng-template #reloadBtn>\n    <span\n      bbTooltip=\"Refresh\"\n      i18n-bbTooltip=\"Refresh|Refresh button text@@messagesConversationsList.refreshButton\"\n      triggers=\"hover focus\"\n      placement=\"top\"\n      container=\"body\"\n    >\n      <button\n        bbButton\n        color=\"link\"\n        circle=\"true\"\n        data-role=\"refresh\"\n        aria-label=\"Refresh\"\n        i18n-aria-label=\"@@messagesConversationsList.refreshButton\"\n        (click)=\"host.callUpdate()\"\n      >\n        <bb-icon-ui class=\"bb-text-support\" name=\"loading\"></bb-icon-ui>\n      </button>\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return ConversationsListTableHeadComponent; }), selector: "tr[bb-conversations-list-table-head-ui]", inputs: ["mailboxType"] }, { type: i0.forwardRef(function () { return ConversationsListTableRowComponent; }), selector: "tr[bb-conversations-list-table-row-ui]", inputs: ["conversation", "isDraftView", "customerServiceTitle$", "mailboxType"], outputs: ["read", "remove"] }, { type: i0.forwardRef(function () { return i5.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i5.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i5.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i5.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i6$1.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }], directives: [{ type: i0.forwardRef(function () { return ConversationsListTableCustomizableDirective; }), selector: "[bbConversationsListTableCustomizable]" }, { type: i0.forwardRef(function () { return i6.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i6.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i6.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i8.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i6$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i10.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i10.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i10.NgForm; }), selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i10.NgModelGroup; }), selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i0.forwardRef(function () { return i5.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i5.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i5.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i0.forwardRef(function () { return i6.AsyncPipe; }), "date": i0.forwardRef(function () { return i6.DatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-conversations-list-table-ui',
                    providers: [TemplateRegistry, BaseConversationsListPropertiesService],
                    templateUrl: './conversations-list-table.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i2.BaseConversationsListPropertiesService }]; }, propDecorators: { conversations: [{
                type: Input
            }], reset: [{
                type: Input
            }], mailboxTypeValue: [{
                type: Input,
                args: ['mailboxType']
            }], customerServiceTitle$: [{
                type: Input
            }], select: [{
                type: Output
            }], read: [{
                type: Output
            }], remove: [{
                type: Output
            }], update: [{
                type: Output
            }] } });
class ConversationsListTableCustomizableDirective extends BbTemplate {
}
ConversationsListTableCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConversationsListTableCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableCustomizableDirective, selector: "[bbConversationsListTableCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConversationsListTableCustomizable]',
                }]
        }] });

const FirstPage = {
    from: 0,
};
class MessagesConversationsListWidgetComponent extends BaseConversationsListWidgetComponent {
    constructor(messagesService, properties, shared, activatedRoute, element) {
        var _a;
        super(shared, activatedRoute, properties);
        this.messagesService = messagesService;
        this.properties = properties;
        this.shared = shared;
        this.activatedRoute = activatedRoute;
        this.element = element;
        this.hostRef = this;
        /**
         * The loading parameter indicating the starting page for the data to be loaded from.
         */
        this.from = new BehaviorSubject(FirstPage);
        /**
         * The loading flag.
         */
        this.isLoading = false;
        this.itemsPerPage$$ = new BehaviorSubject(undefined);
        this.mailboxType$$ = new BehaviorSubject(undefined);
        this.createMessageClosedEventName$$ = new BehaviorSubject(undefined);
        this.customerServiceTitle$$ = new BehaviorSubject(undefined);
        /**
         * The mailbox type enum (`inbox`, `outbox`, `drafts`).
         */
        this.mailboxTypeEnum = MailboxTypeEnum;
        /**
         * Quantity of items to show per page/to add per request.
         */
        this.itemsPerPage = getPropertyValue(this.itemsPerPage$$, this.properties.itemsPerPage);
        /**
         * Mailbox type property, used for Client widget
         */
        this.mailboxType = getPropertyValue(this.mailboxType$$, this.properties.mailboxType);
        /**
         * Customer service title to be displayed as a sender
         */
        this.customerServiceTitle = getPropertyValue(this.customerServiceTitle$$, this.properties.customerServiceTitle);
        /**
         * Event published when Create message modal widget was closed,
         * used for Client and Employee widget to update list of conversations
         */
        this.createMessageClosedEventName = getPropertyValue(this.createMessageClosedEventName$$.asObservable(), this.properties.createMessageClosedEventName);
        this.conversationsStream = this.from.pipe(withLatestFrom(this.itemsPerPage, this.mailboxType), tap(() => (this.isLoading = true)), switchMap(([from, size, mailboxType]) => this.getData(from, size, mailboxType)), scan((acc, items) => this.mergeConversationsData(acc, items)), tap(() => (this.isLoading = false)));
        this.destroyed$ = new Subject();
        this.resetSelection = new Subject();
        this.markAsReadUnreadSubject = new Subject();
        this.markAsReadUnreadStream = this.markAsReadUnreadSubject.pipe(switchMap(params => this.messagesService.markConversationsAsReadUnread(params).pipe(map(response => ({
            changedItems: response && response.changedItems,
            status: params.status,
        })), catchError(error => this.showErrorNotification(error)))));
        /**
         * The stream with the conversations data.
         */
        this.conversations = combineLatest([
            this.conversationsStream,
            merge(this.markAsReadUnreadStream, of(undefined)).pipe(scan((acc, value) => value && (acc ? Object.assign(Object.assign({}, acc), value) : Object.assign({}, value)))),
        ]).pipe(map(([conversations, mark]) => {
            /* istanbul ignore next */
            if (mark) {
                const flag = mark.status === ReadUnreadStatusType.READ;
                const data = conversations.data.map(conversation => {
                    if (mark.changedItems && mark.changedItems.includes(conversation.id)) {
                        conversation.read = flag;
                    }
                    return conversation;
                });
                return {
                    data: data,
                    params: conversations.params,
                    totalCount: conversations.totalCount,
                };
            }
            return conversations;
        }), shareReplayOnce());
        this.firstNewConversationId$ = (_a = this.conversations) === null || _a === void 0 ? void 0 : _a.pipe(pairwise(), map(([prevConversations, newConversations]) => {
            let firstNewConversation = newConversations.data[prevConversations.data.length];
            if (prevConversations.data.length >= newConversations.data.length) {
                firstNewConversation = newConversations.data[0];
            }
            return firstNewConversation && firstNewConversation.id;
        }));
        this.createMessageClosedEventName
            .pipe(first(), switchMap(eventName => this.shared.eventBusFactory(eventName)), takeUntil(this.unsubscribe$), tap(() => this.updateConversations()))
            .subscribe();
    }
    /**
     * Mailbox type property, used for Client widget
     */
    set mailboxTypeValue(value) {
        this.mailboxType$$.next(value);
    }
    /**
     * Quantity of items to show per page/to add per request, used for Client and Employee widget
     */
    set itemsPerPageValue(value) {
        this.itemsPerPage$$.next(Number(value));
    }
    /**
     * Event published when Create message modal widget was closed,
     * used for Client and Employee widget to update list of conversations
     */
    set createMessageClosedEventNameValue(value) {
        this.createMessageClosedEventName$$.next(value);
    }
    /**
     * Customer service title which should be replaced the name of the sender
     */
    set customerServiceTitleValue(value) {
        this.customerServiceTitle$$.next(value);
    }
    ngOnInit() {
        var _a;
        (_a = this.firstNewConversationId$) === null || _a === void 0 ? void 0 : _a.pipe(filter(Boolean), map(id => `#bb-cs-${id}`), observeOn(asyncScheduler), map(elemId => this.element.nativeElement.querySelector(`${elemId}`)), filter(Boolean), takeUntil(this.destroyed$)).subscribe((elemScrollTo) => {
            elemScrollTo === null || elemScrollTo === void 0 ? void 0 : elemScrollTo.focus();
            elemScrollTo === null || elemScrollTo === void 0 ? void 0 : elemScrollTo.scrollIntoView(false);
        });
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    /**
     * Delete conversations
     *
     * @param ids Conversations id list
     */
    removeConversations(ids) {
        merge(this.deleteConversationsStream(ids), this.deleteDraftsStream(ids))
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(() => {
            this.resetSelection.next();
            this.updateConversations();
        }, error => this.showErrorNotification(error));
    }
    /**
     * Get conversations data.
     *
     * @param params Get conversation thread request params
     * @returns Conversations stream
     */
    getConversations(params) {
        return this.messagesService.getConversations(params).pipe(catchError((error) => {
            this.errorResponse = error;
            return of({ params: FirstPage, data: [], totalCount: 0 });
        }));
    }
    /**
     * Get drafts data.
     *
     * @param draftData Draft size and position
     * @returns Draft stream
     */
    getDrafts({ size, from }) {
        return this.messagesService.getDrafts({ size, from }).pipe(catchError((error) => {
            this.errorResponse = error;
            return of({ params: FirstPage, data: [], totalCount: 0 });
        }));
    }
    /**
     * Mark a message as read or unread.
     *
     * @param params Conversation read request
     */
    markAsReadUnread(params) {
        this.markAsReadUnreadSubject.next(params);
    }
    /**
     * Change the starting page for the conversations loading.
     *
     * @param event Starting page params
     */
    setLoadingParams(event) {
        this.from.next(event);
        this.onPageChange(event.from);
    }
    /**
     * The method to change the starting page to the first one.
     */
    updateConversations() {
        this.from.next(FirstPage);
    }
    /**
     * Open the `Compose Message` modal.
     *
     * @param draftId Draft id
     */
    compose(draftId) {
        this.shared.eventBusPublish('bb.event.messages.create.message.open', { draftId });
    }
    deleteConversationsStream(ids) {
        return this.mailboxType.pipe(filter(mailboxType => mailboxType !== MailboxTypeEnum.drafts), switchMap(() => this.messagesService.deleteConversations(ids)), tap(response => {
            if (response) {
                const messageDeletion = response.deletedItems.length > 1 ? this.messageDeleteSuccessMultipleTpl : this.messageDeleteSuccessTpl;
                this.shared.openNotification(messageDeletion);
            }
        }));
    }
    deleteDraftsStream(ids) {
        return this.mailboxType.pipe(filter(mailboxType => mailboxType === MailboxTypeEnum.drafts), switchMap(() => this.messagesService.deleteDrafts(ids)), tap(response => {
            if (response) {
                const draftDeletion = response.deleted.length > 1 ? this.draftDeleteSuccessMultipleTpl : this.draftDeleteSuccessTpl;
                this.shared.openNotification(draftDeletion);
            }
        }));
    }
    getData(from, size, mailboxType) {
        const result = new Subject();
        if (mailboxType === MailboxTypeEnum.drafts) {
            this.getDrafts(Object.assign(Object.assign({}, from), { size })).subscribe(res => result.next(res));
        }
        else
            this.getConversations(Object.assign(Object.assign({}, from), { size, mailboxType })).subscribe(res => result.next(res));
        return result.pipe(map((response) => (Object.assign({ params: Object.assign(Object.assign({}, from), { size, mailboxType }) }, response))));
    }
    mergeConversationsData(acc, items) {
        return {
            params: acc.params,
            data: items.params.from ? [...acc.data, ...items.data] : items.data,
            totalCount: items.totalCount,
        };
    }
}
MessagesConversationsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetComponent, deps: [{ token: MessagesConversationsListWidgetService }, { token: i2.BaseConversationsListPropertiesService }, { token: i2.SharedMethodsService }, { token: i3$1.ActivatedRoute }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
MessagesConversationsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationsListWidgetComponent, selector: "bb-messages-conversations-list-widget-ang", inputs: { mailboxTypeValue: ["mailboxType", "mailboxTypeValue"], itemsPerPageValue: ["itemsPerPage", "itemsPerPageValue"], createMessageClosedEventNameValue: ["createMessageClosedEventName", "createMessageClosedEventNameValue"], customerServiceTitleValue: ["customerServiceTitle", "customerServiceTitleValue"] }, providers: [BaseConversationsListPropertiesService], viewQueries: [{ propertyName: "messageDeleteSuccessTpl", first: true, predicate: ["messageDeleteSuccess"], descendants: true }, { propertyName: "messageDeleteSuccessMultipleTpl", first: true, predicate: ["messageDeleteSuccessMultiple"], descendants: true }, { propertyName: "draftDeleteSuccessTpl", first: true, predicate: ["draftDeleteSuccess"], descendants: true }, { propertyName: "draftDeleteSuccessMultipleTpl", first: true, predicate: ["draftDeleteSuccessMultiple"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbMessagesConversationsListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    conversations: conversations | async,\n    mailboxType: mailboxType | async,\n    itemsPerPage: itemsPerPage | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbMessagesConversationsListCustomizable\n  let-host\n  let-conversations=\"context.conversations\"\n  let-mailboxType=\"context.mailboxType\"\n  let-itemsPerPage=\"context.itemsPerPage\"\n>\n  <div class=\"bb-messages-conversations-list__container card card-lg\">\n    <ng-container *ngIf=\"conversations?.data; else loadingState\">\n      <ng-container *ngIf=\"!host.errorResponse; else errorState\">\n        <ng-container *ngIf=\"conversations.data.length; else emptyState\">\n          <bb-conversations-list-table-ui\n            [conversations]=\"conversations.data\"\n            [reset]=\"host.resetSelection\"\n            [mailboxType]=\"host.mailboxType | async\"\n            [customerServiceTitle$]=\"host.customerServiceTitle\"\n            (remove)=\"host.removeConversations($event)\"\n            (read)=\"host.markAsReadUnread($event)\"\n            (select)=\"\n              mailboxType === host.mailboxTypeEnum.drafts ? host.openDraft($event) : host.openConversation($event)\n            \"\n            (update)=\"host.updateConversations()\"\n          ></bb-conversations-list-table-ui>\n          <div class=\"p-3 text-center\">\n            <bb-load-button-ui\n              [from]=\"host.from.value.from\"\n              [isLoading]=\"host.isLoading\"\n              [size]=\"itemsPerPage\"\n              [totalCount]=\"conversations.totalCount\"\n              (paramChange)=\"host.setLoadingParams($event)\"\n              data-role=\"load-more-button\"\n              i18n=\"Load more button name@@messages.messagesConversationsList.loadMoreButton\"\n              >Load more</bb-load-button-ui\n            >\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #emptyState>\n    <div class=\"bb-state-container\">\n      <ng-container [ngSwitch]=\"mailboxType\">\n        <ng-container *ngSwitchCase=\"host.mailboxTypeEnum.drafts\">\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.draftsEmptyStateTitle\"\n            title=\"No Drafts\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.draftsEmptyStateSubTitle\"\n            subtitle=\"You don't have any drafts to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.mailboxTypeEnum.outbox\">\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.emptyStateTitle\"\n            title=\"No Sent Messages\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.emptyStateSubtitle\"\n            subtitle=\"You don't have any sent messages to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.simpleEmptyStateTitle\"\n            title=\"No Conversations\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.simpleEmptyStateSubTitle\"\n            subtitle=\"You don't have any conversations to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <bb-messages-request-error [error]=\"host.errorResponse\"></bb-messages-request-error>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui class=\"py-4\" loaderSize=\"md\"></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-template #messageDeleteSuccess>\n  <span\n    i18n=\"\n      Your conversation has been deleted successfully.|Text of successful conversation\n      deletion@@messages.messagesConversationList.messageSuccessDelete\"\n    >Your conversation has been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #messageDeleteSuccessMultiple>\n  <span\n    i18n=\"\n      Your conversations have been deleted successfully.|Text of successful conversations\n      deletion@@messages.messagesConversationList.messageDeleteSuccessMultipleDelete\"\n    >Your conversations have been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #draftDeleteSuccess>\n  <span\n    i18n=\"\n      Your draft has been deleted successfully.|Text of successful draft\n      deletion@@messages.messagesConversationList.draftSuccessDelete\"\n    >Your draft has been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #draftDeleteSuccessMultiple>\n  <span\n    i18n=\"\n      Your draft have been deleted successfully.|Text of successful draft\n      deletion@@messages.messagesConversationList.draftDeleteSuccessMultipleDelete\"\n    >Your drafts have been deleted successfully.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ConversationsListTableComponent; }), selector: "bb-conversations-list-table-ui", inputs: ["conversations", "reset", "mailboxType", "customerServiceTitle$"], outputs: ["select", "read", "remove", "update"] }, { type: i0.forwardRef(function () { return i5$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i6$2.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i2.MessagesRequestErrorComponent; }), selector: "bb-messages-request-error, bb-messages-request-error-ui", inputs: ["error"] }, { type: i0.forwardRef(function () { return i7$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return MessagesConversationsListCustomizableDirective; }), selector: "[bbMessagesConversationsListCustomizable]" }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i6.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i6.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }], pipes: { "async": i0.forwardRef(function () { return i6.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-conversations-list-widget-ang',
                    providers: [BaseConversationsListPropertiesService],
                    templateUrl: './messages-conversations-list-widget-ang.component.html',
                }]
        }], ctorParameters: function () { return [{ type: MessagesConversationsListWidgetService }, { type: i2.BaseConversationsListPropertiesService }, { type: i2.SharedMethodsService }, { type: i3$1.ActivatedRoute }, { type: i0.ElementRef }]; }, propDecorators: { mailboxTypeValue: [{
                type: Input,
                args: ['mailboxType']
            }], itemsPerPageValue: [{
                type: Input,
                args: ['itemsPerPage']
            }], createMessageClosedEventNameValue: [{
                type: Input,
                args: ['createMessageClosedEventName']
            }], customerServiceTitleValue: [{
                type: Input,
                args: ['customerServiceTitle']
            }], messageDeleteSuccessTpl: [{
                type: ViewChild,
                args: ['messageDeleteSuccess']
            }], messageDeleteSuccessMultipleTpl: [{
                type: ViewChild,
                args: ['messageDeleteSuccessMultiple']
            }], draftDeleteSuccessTpl: [{
                type: ViewChild,
                args: ['draftDeleteSuccess']
            }], draftDeleteSuccessMultipleTpl: [{
                type: ViewChild,
                args: ['draftDeleteSuccessMultiple']
            }] } });
class MessagesConversationsListCustomizableDirective extends BbTemplate {
}
MessagesConversationsListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesConversationsListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationsListCustomizableDirective, selector: "[bbMessagesConversationsListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesConversationsListCustomizable]',
                }]
        }] });

const components = [
    MessagesConversationsListWidgetComponent,
    ConversationsListTableComponent,
    ConversationsListTableHeadComponent,
    ConversationsListTableRowComponent,
];
const directives = [
    MessagesConversationsListCustomizableDirective,
    ConversationsListTableCustomizableDirective,
    ConversationsListTableHeadCustomizableDirective,
    ConversationsListTableRowCustomizableDirective,
];
const uiModules = [
    BadgeModule,
    ButtonModule,
    CheckboxGroupModule,
    DropdownMenuModule,
    ModalModule,
    IconModule,
    InputCheckboxModule,
    LoadButtonModule,
    EmptyStateModule,
    LoadingIndicatorModule,
    TooltipModule,
];
const innerModules = [MessagesRequestErrorModule];
class MessagesConversationsListWidgetModule {
}
MessagesConversationsListWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesConversationsListWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetModule, declarations: [MessagesConversationsListWidgetComponent,
        ConversationsListTableComponent,
        ConversationsListTableHeadComponent,
        ConversationsListTableRowComponent, MessagesConversationsListCustomizableDirective,
        ConversationsListTableCustomizableDirective,
        ConversationsListTableHeadCustomizableDirective,
        ConversationsListTableRowCustomizableDirective], imports: [CommonModule, i1$2.BackbaseCoreModule, KeyboardClickModule,
        SharedMethodsModule,
        FormsModule, BadgeModule,
        ButtonModule,
        CheckboxGroupModule,
        DropdownMenuModule,
        ModalModule,
        IconModule,
        InputCheckboxModule,
        LoadButtonModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        TooltipModule, MessagesRequestErrorModule], exports: [MessagesConversationsListWidgetComponent,
        ConversationsListTableComponent,
        ConversationsListTableHeadComponent,
        ConversationsListTableRowComponent, MessagesConversationsListCustomizableDirective,
        ConversationsListTableCustomizableDirective,
        ConversationsListTableHeadCustomizableDirective,
        ConversationsListTableRowCustomizableDirective, BadgeModule,
        ButtonModule,
        CheckboxGroupModule,
        DropdownMenuModule,
        ModalModule,
        IconModule,
        InputCheckboxModule,
        LoadButtonModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        TooltipModule, MessagesRequestErrorModule] });
MessagesConversationsListWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetModule, providers: [MessagesConversationsListWidgetService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { MessagesConversationsListWidgetComponent },
            }),
            KeyboardClickModule,
            SharedMethodsModule,
            FormsModule,
            ...uiModules,
            ...innerModules,
        ], BadgeModule,
        ButtonModule,
        CheckboxGroupModule,
        DropdownMenuModule,
        ModalModule,
        IconModule,
        InputCheckboxModule,
        LoadButtonModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        TooltipModule, MessagesRequestErrorModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { MessagesConversationsListWidgetComponent },
                        }),
                        KeyboardClickModule,
                        SharedMethodsModule,
                        FormsModule,
                        ...uiModules,
                        ...innerModules,
                    ],
                    providers: [MessagesConversationsListWidgetService],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...uiModules, ...innerModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MessagesConversationsListWidgetComponent, MessagesConversationsListWidgetModule, ConversationsListTableComponent as ӨConversationsListTableComponent, ConversationsListTableCustomizableDirective as ӨConversationsListTableCustomizableDirective, ConversationsListTableHeadComponent as ӨConversationsListTableHeadComponent, ConversationsListTableHeadCustomizableDirective as ӨConversationsListTableHeadCustomizableDirective, ConversationsListTableRowComponent as ӨConversationsListTableRowComponent, ConversationsListTableRowCustomizableDirective as ӨConversationsListTableRowCustomizableDirective, MessagesConversationsListCustomizableDirective as ӨMessagesConversationsListCustomizableDirective };
//# sourceMappingURL=backbase-messages-conversations-list-widget-ang.js.map
