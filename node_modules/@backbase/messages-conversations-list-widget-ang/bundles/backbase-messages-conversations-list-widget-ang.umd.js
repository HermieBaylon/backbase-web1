(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@backbase/foundation-ang/core'), require('@backbase/messages-common'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/checkbox-group'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/keyboard-click-directive'), require('rxjs/operators'), require('rxjs'), require('@backbase/foundation-ang/web-sdk'), require('@backbase/messages-v5-http-ang'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@backbase/messages-conversations-list-widget-ang', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@backbase/foundation-ang/core', '@backbase/messages-common', '@backbase/ui-ang/badge', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/checkbox-group', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/icon', '@backbase/ui-ang/button', '@backbase/ui-ang/modal', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/load-button', '@backbase/ui-ang/keyboard-click-directive', 'rxjs/operators', 'rxjs', '@backbase/foundation-ang/web-sdk', '@backbase/messages-v5-http-ang', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["messages-conversations-list-widget-ang"] = {}), global.ng.core, global.ng.common, global.ng.forms, global.i1$1, global.i2, global.i3, global.i1$2, global.i4, global.i2$1, global.i6$2, global.i2$2, global.i6$1, global.i5, global.i7, global.i7$1, global.i5$1, global.i8, global.rxjs.operators, global.rxjs, global.webSdk, global.i1, global.ng.router));
})(this, (function (exports, i0, i6, i10, i1$1, i2, i3, i1$2, i4, i2$1, i6$2, i2$2, i6$1, i5, i7, i7$1, i5$1, i8, operators, rxjs, webSdk, i1, i3$1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ReadUnreadStatusType;
    (function (ReadUnreadStatusType) {
        ReadUnreadStatusType["READ"] = "READ";
        ReadUnreadStatusType["UNREAD"] = "UNREAD";
    })(ReadUnreadStatusType || (ReadUnreadStatusType = {}));
    var MailboxTypeEnum;
    (function (MailboxTypeEnum) {
        MailboxTypeEnum["inbox"] = "inbox";
        MailboxTypeEnum["outbox"] = "outbox";
        MailboxTypeEnum["drafts"] = "drafts";
    })(MailboxTypeEnum || (MailboxTypeEnum = {}));

    var DefaultConversationsGetReqParams = {
        direction: 'DESC',
        from: 0,
        size: 10,
        mailboxType: '',
    };
    var bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
    var MessagesConversationsListWidgetService = /** @class */ (function () {
        function MessagesConversationsListWidgetService(messagesService, sharedMethodsService, pubSub) {
            this.messagesService = messagesService;
            this.sharedMethodsService = sharedMethodsService;
            this.pubSub = pubSub;
        }
        MessagesConversationsListWidgetService.prototype.deleteConversations = function (ids) {
            var _this = this;
            return this.messagesService
                .deleteConversationThreads({ ids: ids })
                .pipe(operators.tap(function () { return _this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined); }));
        };
        MessagesConversationsListWidgetService.prototype.deleteDrafts = function (ids) {
            return this.messagesService.deleteMessageDrafts({ ids: ids });
        };
        MessagesConversationsListWidgetService.prototype.getConversations = function (params) {
            var _this = this;
            if (params === void 0) { params = DefaultConversationsGetReqParams; }
            return this.messagesService
                .getConversationThreads(params, 'response')
                .pipe(operators.map(function (response) { return _this.sharedMethodsService.processData(response); }));
        };
        MessagesConversationsListWidgetService.prototype.getDrafts = function (_a) {
            var _this = this;
            var from = _a.from, size = _a.size;
            return this.messagesService
                .getMessageDrafts({ from: from, size: size }, 'response')
                .pipe(operators.map(function (response) { return _this.sharedMethodsService.processData(response); }));
        };
        MessagesConversationsListWidgetService.prototype.markConversationsAsReadUnread = function (params) {
            var _this = this;
            return this.messagesService
                .putMarkAsReadUnread({ markAsReadUnreadPutRequestBody: params })
                .pipe(operators.tap(function () { return _this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined); }));
        };
        return MessagesConversationsListWidgetService;
    }());
    MessagesConversationsListWidgetService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetService, deps: [{ token: i1__namespace.MessagecenterHttpService }, { token: i2__namespace.SharedMethodsService }, { token: webSdk.PUBSUB }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesConversationsListWidgetService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.MessagecenterHttpService }, { type: i2__namespace.SharedMethodsService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }];
        } });

    var ConversationsListTableHeadComponent = /** @class */ (function () {
        function ConversationsListTableHeadComponent(properties) {
            this.properties = properties;
            this.hostRef = this;
            this.mailboxType$$ = new rxjs.BehaviorSubject(undefined);
            /**
             * The mailbox type enum (`inbox`, `outbox`, `drafts`).
             */
            this.mailboxTypeEnum = MailboxTypeEnum;
        }
        Object.defineProperty(ConversationsListTableHeadComponent.prototype, "mailboxTypeValue", {
            /**
             * The stream with the mailbox type.
             */
            set: function (value) {
                this.mailboxType$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ConversationsListTableHeadComponent.prototype, "mailboxType", {
            get: function () {
                return i2.getPropertyValue(this.mailboxType$$.asObservable(), this.properties.mailboxType);
            },
            enumerable: false,
            configurable: true
        });
        return ConversationsListTableHeadComponent;
    }());
    ConversationsListTableHeadComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableHeadComponent, deps: [{ token: i2__namespace.BaseConversationsListPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConversationsListTableHeadComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableHeadComponent, selector: "tr[bb-conversations-list-table-head-ui]", inputs: { mailboxTypeValue: ["mailboxType", "mailboxTypeValue"] }, providers: [i2.BaseConversationsListPropertiesService], ngImport: i0__namespace, template: "<ng-container\n  bbConversationsListTableHeadCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    mailboxType: mailboxType | async\n  }\"\n></ng-container>\n\n<ng-template bbConversationsListTableHeadCustomizable let-host let-mailboxType=\"context.mailboxType\">\n  <th scope=\"col\" data-role=\"checkbox-column\">\n    <bb-checkbox-group-ui\n      aria-label=\"Select all conversations\"\n      i18n-aria-label=\"\n        Select all conversations@@messages.messagesConversationsList.messagesTable.checkboxGroupAriaLabel\"\n      ngModelGroup=\"ids\"\n    ></bb-checkbox-group-ui>\n  </th>\n  <th scope=\"col\" data-role=\"importance-column\"></th>\n  <th\n    data-role=\"from-column\"\n    scope=\"col\"\n    i18n=\"\n      From|The name of the table head cell called 'From'@@messages.messagesConversationsList.messagesTable.headerFrom\"\n    *ngIf=\"mailboxType !== host.mailboxTypeEnum.drafts\"\n  >\n    From\n  </th>\n  <th scope=\"col\" data-role=\"attachments-column\"></th>\n  <th\n    data-role=\"subject-column\"\n    scope=\"col\"\n    i18n=\"\n      Subject|The name of the table head cell called\n      'Subject'@@messages.messagesConversationsList.messagesTable.headerSubject\"\n  >\n    Subject\n  </th>\n  <th\n    data-role=\"topic-column\"\n    scope=\"col\"\n    i18n=\"\n      Topic|The name of the table head cell called 'Topic'@@messages.messagesConversationsList.messagesTable.headerTopic\"\n  >\n    Topic\n  </th>\n  <th\n    data-role=\"date-column\"\n    scope=\"col\"\n    i18n=\"\n      Date|The name of the table head cell called 'Date'@@messages.messagesConversationsList.messagesTable.headerDate\"\n  >\n    Date\n  </th>\n  <th data-role=\"dropdown-menu-column\" scope=\"col\"></th>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.CheckboxGroupComponent; }), selector: "bb-checkbox-group-ui" }], directives: [{ type: i0__namespace.forwardRef(function () { return ConversationsListTableHeadCustomizableDirective; }), selector: "[bbConversationsListTableHeadCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.NgModelGroup; }), selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i6__namespace.AsyncPipe; }) }, viewProviders: [{ provide: i10.ControlContainer, useExisting: i10.NgForm }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableHeadComponent, decorators: [{
                type: i0.Component,
                args: [{
                        /* eslint-disable */
                        selector: 'tr[bb-conversations-list-table-head-ui]',
                        /* eslint-enable */
                        templateUrl: './conversations-list-table-head.component.html',
                        viewProviders: [{ provide: i10.ControlContainer, useExisting: i10.NgForm }],
                        providers: [i2.BaseConversationsListPropertiesService],
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.BaseConversationsListPropertiesService }]; }, propDecorators: { mailboxTypeValue: [{
                    type: i0.Input,
                    args: ['mailboxType']
                }] } });
    var ConversationsListTableHeadCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConversationsListTableHeadCustomizableDirective, _super);
        function ConversationsListTableHeadCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConversationsListTableHeadCustomizableDirective;
    }(i1$1.BbTemplate));
    ConversationsListTableHeadCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableHeadCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConversationsListTableHeadCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableHeadCustomizableDirective, selector: "[bbConversationsListTableHeadCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableHeadCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConversationsListTableHeadCustomizable]',
                    }]
            }] });

    var ConversationsListTableRowComponent = /** @class */ (function () {
        function ConversationsListTableRowComponent() {
            /**
             * Identifier if it is draft view
             */
            this.isDraftView = false;
            /**
             * Event emitted when this conversation should be marked as read/unread
             */
            this.read = new i0.EventEmitter();
            /**
             * Event emitted when this conversation should be removed
             */
            this.remove = new i0.EventEmitter();
            this.hostRef = this;
            /**
             * The mailbox type enum (inbox, outbox, drafts).
             */
            this.mailboxTypeEnum = MailboxTypeEnum;
        }
        /**
         * The method to toggle the read or unread conversation state.
         */
        ConversationsListTableRowComponent.prototype.toggleRead = function () {
            this.read.emit();
        };
        /**
         * The method to remove a conversation.
         */
        ConversationsListTableRowComponent.prototype.emitRemove = function () {
            this.remove.emit();
        };
        return ConversationsListTableRowComponent;
    }());
    ConversationsListTableRowComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableRowComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConversationsListTableRowComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableRowComponent, selector: "tr[bb-conversations-list-table-row-ui]", inputs: { conversation: "conversation", isDraftView: "isDraftView", customerServiceTitle$: "customerServiceTitle$", mailboxType: "mailboxType" }, outputs: { read: "read", remove: "remove" }, providers: [i2.BaseConversationsListPropertiesService], ngImport: i0__namespace, template: "<ng-container\n  bbConversationsListTableRowCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    customerServiceTitle: customerServiceTitle$ | async\n  }\"\n></ng-container>\n\n<ng-template bbConversationsListTableRowCustomizable let-host let-customerServiceTitle=\"context.customerServiceTitle\">\n  <td (click)=\"$event.stopPropagation()\" data-role=\"checkbox-cell\">\n    <bb-input-checkbox-ui\n      aria-label=\"Checkbox to select conversation\"\n      i18n-aria-label=\"\n        Checkbox to select conversation@@messages.messagesConversationsList.messagesTable.selectConversationCheckbox\"\n      ngModel\n      [name]=\"host.conversation.id\"\n    ></bb-input-checkbox-ui>\n    <span\n      class=\"sr-only\"\n      i18n=\"Conversation details@@messages.messagesConversationsList.messagesTable.conversation-details\"\n    >\n      Click to open conversation thread, conversation details:\n    </span>\n  </td>\n  <td data-role=\"important-cell\">\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        class=\"bb-stack__item--push-right\"\n        bbTooltip=\"High priority\"\n        i18n-bbTooltip=\"High priority@@messages.messagesConversationsList.messagesTable.highPriorityMessage\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n        *ngIf=\"host.conversation.important\"\n        name=\"error\"\n        color=\"danger\"\n        aria-label=\"High priority\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.highPriorityMessage\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td *ngIf=\"!host.isDraftView\" data-role=\"from-cell\">\n    <span class=\"sr-only\" i18n=\"Messages from@@messages.messagesConversationsList.messagesTable.messagesFrom\"\n      >,From</span\n    >\n    <ng-container [ngSwitch]=\"host.conversation.sender?.id\">\n      <span *ngSwitchCase=\"'customer.service'\">{{ customerServiceTitle }}</span>\n      <span *ngSwitchDefault>{{ host.conversation.sender?.name }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"host.conversation.hasDraft\">\n      <span *ngIf=\"host.conversation.sender?.id\">, </span>\n      <span\n        aria-hidden=\"true\"\n        class=\"text-danger\"\n        i18n=\"Draft@@messages.messagesConversationsList.messagesTable.draftText\"\n        >Draft</span\n      >\n      <span class=\"sr-only\" i18n=\"Contains draft@@messages.messagesConversationsList.messagesTable.containsDraft\"\n        >Contains draft</span\n      >\n    </ng-container>\n  </td>\n  <td data-role=\"has-attachments-cell\">\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        *ngIf=\"host.conversation.hasAttachments\"\n        bbTooltip=\"Contains attachments\"\n        container=\"body\"\n        i18n-bbTooltip=\"\n          Contains attachments|Contains file\n          attachments@@messages.messagesConversationsList.messagesTable.containsFileAttachments\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n        class=\"bb-stack__item--push-right bb-text-support\"\n        name=\"attachment\"\n        aria-label=\"Contains attachments,\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.containsFileAttachments\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td>\n    <ng-container *ngIf=\"host.conversation.subject; else noSubject\">\n      <span class=\"sr-only\" i18n=\"Subject@@messages.messagesConversationsList.messagesTable.subject\">,Subject</span>\n      <span class=\"break-word\" [innerHTML]=\"host.conversation.subject\"></span>\n    </ng-container>\n  </td>\n  <td data-role=\"topic-cell\">\n    <span class=\"sr-only\" i18n=\"Topic@@messages.messagesConversationsList.messagesTable.topic\">,Topic</span>\n    <div class=\"bb-stack\" *ngIf=\"host.conversation.topic && host.conversation.topic.name; else noTopic\">\n      <bb-badge-ui\n        class=\"bb-stack__item\"\n        [text]=\"host.conversation.topic?.name\"\n        [color]=\"host.conversation.topic?.deleted ? 'secondary' : 'primary'\"\n      ></bb-badge-ui>\n      <bb-icon-ui\n        *ngIf=\"host.conversation.topic?.deleted\"\n        name=\"warning\"\n        color=\"warning\"\n        i18n-bbTooltip=\"\n          This topic no longer exists. Contact support for\n          details.@@messages.messagesConversationsList.messagesTable.deletedTopic\"\n        bbTooltip=\"This topic no longer exists. Contact support for details\"\n        aria-label=\"This topic no longer exists. Contact support for details,\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.deletedTopic\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td data-role=\"date-cell\">\n    <span class=\"sr-only\" i18n=\"Date@@messages.messagesConversationsList.messagesTable.date\">,Date</span>\n    <span aria-hidden=\"true\">{{ host.conversation.timestamp | date: 'shortDate' }}</span>\n    <span class=\"sr-only\">{{ host.conversation.timestamp | date: 'mediumDate' }}</span>\n  </td>\n  <td data-role=\"dropdown-cell\" tabindex=\"-1\">\n    <span\n      class=\"sr-only\"\n      i18n=\"Dropdown menu|Dropdown menu button tooltip@@messages.messagesConversationsList.messagesTable.dropdownMenu\"\n      >Dropdown menu</span\n    >\n    <span\n      bbTooltip=\"Dropdown menu\"\n      container=\"body\"\n      tabindex=\"-1\"\n      i18n-bbTooltip=\"@@messages.messagesConversationsList.messagesTable.dropdownMenu\"\n      triggers=\"hover focus\"\n      class=\"bb-d-inline-block\"\n      placement=\"top right\"\n    >\n      <bb-dropdown-menu-ui\n        icon=\"ellipsis-h\"\n        btnColor=\"link\"\n        iconColor=\"dark\"\n        tabindex=\"-1\"\n        buttonSize=\"sm\"\n        iconSize=\"md\"\n        btnCircle=\"true\"\n        [btnCircle]=\"true\"\n        [dropDownButtonLabel]=\"'Dropdown menu for ' + host.conversation.subject\"\n        i18n-dropDownButtonLabel=\"\n          Dropdown menu aria-label@@messages.messagesConversationsList.messagesTable.dropdownMenuAriaLabel\"\n      >\n        <ng-template bbDropdownMenuItem>\n          <a\n            role=\"menuitem\"\n            data-role=\"mark-as-read-unread\"\n            class=\"dropdown-item\"\n            *ngIf=\"!host.isDraftView\"\n            (bbKeyboardClick)=\"host.toggleRead()\"\n          >\n            <ng-container\n              i18n=\"\n                Mark as Read or Unread|Item text in dropdown\n                menu@@messages.messagesConversationsList.messagesTable.markAsReadDropdownItem\"\n            >\n              {host.conversation.read + '', select, true {Mark as unread} false {Mark as read}}\n            </ng-container>\n          </a>\n          <a\n            role=\"menuitem\"\n            data-role=\"delete\"\n            class=\"dropdown-item\"\n            *ngIf=\"host.conversation.deletable || host.isDraftView\"\n            (bbKeyboardClick)=\"host.emitRemove(host.conversation.id)\"\n          >\n            <ng-container\n              i18n=\"\n                Delete|Item text in dropdown menu@@messages.messagesConversationsList.messagesTable.deleteDropdownItem\"\n              >Delete</ng-container\n            >\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </span>\n  </td>\n\n  <ng-template #noSubject>\n    <span class=\"bb-text-support\" i18n=\"No subject@@messages.messagesConversationsList.messagesTable.subjectEmptyState\"\n      >No subject</span\n    >\n  </ng-template>\n\n  <ng-template #noTopic>\n    <span class=\"bb-text-support\" i18n=\"No subject@@messages.messagesConversationsList.messagesTable.topicEmptyState\"\n      >No topic</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$1.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConversationsListTableRowCustomizableDirective; }), selector: "[bbConversationsListTableRowCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i6__namespace.AsyncPipe; }), "date": i0__namespace.forwardRef(function () { return i6__namespace.DatePipe; }) }, viewProviders: [{ provide: i10.ControlContainer, useExisting: i10.NgModelGroup }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableRowComponent, decorators: [{
                type: i0.Component,
                args: [{
                        // eslint-disable-next-line @angular-eslint/component-selector
                        selector: 'tr[bb-conversations-list-table-row-ui]',
                        templateUrl: './conversations-list-table-row.component.html',
                        viewProviders: [{ provide: i10.ControlContainer, useExisting: i10.NgModelGroup }],
                        providers: [i2.BaseConversationsListPropertiesService],
                    }]
            }], propDecorators: { conversation: [{
                    type: i0.Input
                }], isDraftView: [{
                    type: i0.Input
                }], customerServiceTitle$: [{
                    type: i0.Input
                }], mailboxType: [{
                    type: i0.Input
                }], read: [{
                    type: i0.Output
                }], remove: [{
                    type: i0.Output
                }] } });
    var ConversationsListTableRowCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConversationsListTableRowCustomizableDirective, _super);
        function ConversationsListTableRowCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConversationsListTableRowCustomizableDirective;
    }(i1$1.BbTemplate));
    ConversationsListTableRowCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableRowCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConversationsListTableRowCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableRowCustomizableDirective, selector: "[bbConversationsListTableRowCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableRowCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConversationsListTableRowCustomizable]',
                    }]
            }] });

    var ConversationsListTableComponent = /** @class */ (function () {
        function ConversationsListTableComponent(properties) {
            this.properties = properties;
            /**
             * Emits conversation object on select event
             */
            this.select = new i0.EventEmitter();
            /**
             * Emits id of the conversation that should be marked as read/unread
             */
            this.read = new i0.EventEmitter();
            /**
             * Emits id of the conversation that should be removed
             */
            this.remove = new i0.EventEmitter();
            /**
             * EventEmitter to update list of the conversations
             */
            this.update = new i0.EventEmitter();
            /**
             * The unique ID HTML property for each component instance.
             */
            this.id = "conversations-list-table-component-" + ConversationsListTableComponent.counter++;
            this.hostRef = this;
            this._conversations = [];
            this.readUnreadStatusTypeDefault = ReadUnreadStatusType.READ;
            this.readUnreadStatus = this.readUnreadStatusTypeDefault;
            this.unsubscribe = new rxjs.Subject();
            /**
             * The flag that toggles between the open and closed state of the confirmation modal for conversation removal.
             */
            this.removeModalOpened = false;
            /**
             * The array containing the IDs of selected conversations.
             */
            this.selectedIdsArray = [];
            /**
             * The stream with the flag toggling between the draft and the conversation view.
             */
            this.isDraftView$ = rxjs.of(false);
            this.mailboxType$$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(ConversationsListTableComponent.prototype, "conversations", {
            /**
             * The conversations getter.
             */
            get: function () {
                return this._conversations;
            },
            /**
             * Array of the conversations
             */
            set: function (value) {
                this._conversations = value;
                this.manageSelectionForm(this.selectionsGroupForm);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ConversationsListTableComponent.prototype, "mailboxTypeValue", {
            /**
             * The stream with the mailbox type.
             */
            set: function (value) {
                this.mailboxType$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        ConversationsListTableComponent.prototype.doesParentContainDropdown = function (node) {
            return !!(node.parentNode && node.parentNode.closest('.dropdown'));
        };
        ConversationsListTableComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.reset) {
                this.reset.pipe(operators.takeUntil(this.unsubscribe)).subscribe(function () { return _this.resetForm(); });
            }
            this.isDraftView$ = this.mailboxType.pipe(operators.take(1), operators.map(function (type) { return type === MailboxTypeEnum.drafts; }));
        };
        ConversationsListTableComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe.next();
            this.unsubscribe.complete();
        };
        Object.defineProperty(ConversationsListTableComponent.prototype, "isUnread", {
            /**
             * The flag indicating if the conversation is unread.
             */
            get: function () {
                return this.readUnreadStatus === ReadUnreadStatusType.UNREAD;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The method to update the list of conversations.
         */
        ConversationsListTableComponent.prototype.callUpdate = function () {
            this.resetForm();
            this.update.emit();
        };
        /**
         * The method to mark a conversation as selected.
         *
         * @param event Mouse event
         * @param conversation Conversation thread data
         */
        ConversationsListTableComponent.prototype.callSelect = function (event, conversation) {
            if (this.doesParentContainDropdown(event.target)) {
                return;
            }
            this.select.emit(conversation);
        };
        /**
         * The method to mark a conversation as read or unread.
         *
         * @param conversationId Conversation id
         * @param conversationStatus Conversation status
         */
        ConversationsListTableComponent.prototype.markAsReadUnread = function (conversationId, conversationStatus) {
            var status = conversationStatus === undefined
                ? this.readUnreadStatus
                : conversationStatus
                    ? ReadUnreadStatusType.UNREAD
                    : ReadUnreadStatusType.READ;
            this.read.emit({
                status: status,
                ids: conversationId ? [conversationId] : this.selectedIdsArray,
            });
        };
        /**
         * The method to open the confirmation modal for removal.
         *
         * @param id Conversation id
         */
        ConversationsListTableComponent.prototype.openRemoveModal = function (id) {
            this.removeId = id;
            this.removeModalOpened = true;
        };
        /**
         * The method to close the confirmation modal for removal.
         */
        ConversationsListTableComponent.prototype.closeRemoveModal = function () {
            this.removeId = undefined;
            this.removeModalOpened = false;
        };
        /**
         * The method to confirm the remove action and close the modal.
         */
        ConversationsListTableComponent.prototype.confirmRemoveModal = function () {
            this.remove.emit(this.removeId ? [this.removeId] : this.selectedIdsArray);
            this.closeRemoveModal();
        };
        /**
         * The method to update the selected conversations form.
         *
         * @param ngForm Form object
         */
        ConversationsListTableComponent.prototype.manageSelectionForm = function (ngForm) {
            var _this = this;
            if (ngForm) {
                var ids_1 = ngForm.form.value.ids;
                this.selectionsGroupForm = ngForm;
                this.selectedIdsArray = Object.keys(ids_1).filter(function (id) { return ids_1[id]; });
                if (this.selectedIdsArray.length) {
                    var selectedIdsIncludesUnreadConversation = this.conversations.find(function (conversation) { return _this.selectedIdsArray.includes(conversation.id) && !conversation.read; });
                    this.readUnreadStatus = selectedIdsIncludesUnreadConversation
                        ? ReadUnreadStatusType.READ
                        : ReadUnreadStatusType.UNREAD;
                }
                else {
                    this.readUnreadStatus = ReadUnreadStatusType.READ;
                }
            }
        };
        /**
         * The method to differentiate conversations by IDs in order to optimize loops performance.
         *
         * @param _index Index
         * @param item Conversation thread
         * @returns Conversation thread id
         */
        ConversationsListTableComponent.prototype.trackByFn = function (_index, item) {
            return item.id;
        };
        ConversationsListTableComponent.prototype.resetForm = function () {
            if (this.selectionsGroupForm) {
                this.selectionsGroupForm.reset();
                this.manageSelectionForm(this.selectionsGroupForm);
            }
        };
        Object.defineProperty(ConversationsListTableComponent.prototype, "mailboxType", {
            get: function () {
                return i2.getPropertyValue(this.mailboxType$$.asObservable(), this.properties.mailboxType);
            },
            enumerable: false,
            configurable: true
        });
        return ConversationsListTableComponent;
    }());
    ConversationsListTableComponent.counter = 0;
    ConversationsListTableComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableComponent, deps: [{ token: i2__namespace.BaseConversationsListPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConversationsListTableComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableComponent, selector: "bb-conversations-list-table-ui", inputs: { conversations: "conversations", reset: "reset", mailboxTypeValue: ["mailboxType", "mailboxTypeValue"], customerServiceTitle$: "customerServiceTitle$" }, outputs: { select: "select", read: "read", remove: "remove", update: "update" }, providers: [i1$1.TemplateRegistry, i2.BaseConversationsListPropertiesService], ngImport: i0__namespace, template: "<ng-container\n  bbConversationsListTableCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    isDraftView: isDraftView$ | async,\n    mailboxType: mailboxType | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbConversationsListTableCustomizable\n  let-host\n  let-isDraftView=\"context.isDraftView\"\n  let-mailboxType=\"context.mailboxType\"\n>\n  <div\n    class=\"sr-only\"\n    i18n=\"Mailbox tab of selected type is open announcement@@messages.messagesConversationsList.openTabType\"\n  >\n    { mailboxType, select, inbox {inbox} outbox {outbox} drafts {drafts} } tab is open,\n  </div>\n  <div class=\"d-md-none\">\n    <div class=\"bb-button-bar\">\n      <ng-container *ngTemplateOutlet=\"reloadBtn\"></ng-container>\n    </div>\n    <table class=\"table\" role=\"presentation\">\n      <tbody role=\"list\">\n        <tr\n          role=\"listitem\"\n          tabindex=\"0\"\n          data-role=\"conversation-mobile\"\n          *ngFor=\"let conversation of host.conversations\"\n          [ngClass]=\"{ 'table-active': !conversation.read }\"\n          (bbKeyboardClick)=\"host.callSelect($event, conversation)\"\n        >\n          <td>\n            <div\n              class=\"text-truncate text-normal bb-text-semi-bold break-word\"\n              *ngIf=\"conversation.subject; else noSubject\"\n              [innerHTML]=\"conversation.subject\"\n            ></div>\n            <div class=\"text-truncate text-small\" *ngIf=\"conversation.sender\">{{ conversation.sender.name }}</div>\n\n            <ng-template #noSubject>\n              <span\n                class=\"bb-text-support\"\n                i18n=\"No subject@@messages.messagesConversationsList.messagesTableMobile.subjectEmptyState\"\n                >No subject</span\n              >\n            </ng-template>\n          </td>\n          <td>\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item text-small\" [attr.aria-label]=\"conversation.timestamp | date: 'mediumDate'\">\n                <span aria-hidden=\"true\">{{ conversation.timestamp | date: 'shortDate' }}</span>\n              </div>\n              <bb-icon-ui\n                *ngIf=\"conversation.important\"\n                bbTooltip=\"High priority\"\n                i18n-bbTooltip=\"High priority@@messages.messagesConversationsList.messagesTable.importantMessage\"\n                container=\"body\"\n                triggers=\"hover\"\n                placement=\"bottom\"\n                class=\"bb-stack__item\"\n                name=\"error\"\n                color=\"danger\"\n                aria-label=\"High priority\"\n                i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.importantMessage\"\n              ></bb-icon-ui>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div class=\"d-none d-md-block\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item--push-right\">\n        <ng-container *ngIf=\"host.selectedIdsArray.length; else noneSelectedTpl\">\n          <span class=\"bb-stack__item bb-text-support\">\n            <span\n              data-role=\"selected-conversations-counter\"\n              i18n=\"Selected|Selected conversations count@@messages.messagesConversationsList.selected\"\n              [attr.aria-label]=\"host.selectedIdsArray.length + ' Selected'\"\n            >\n              <span aria-hidden=\"true\">{{ host.selectedIdsArray.length + ' Selected' }}</span>\n            </span>\n          </span>\n          <span class=\"bb-stack__item bb-text-support\">|</span>\n          <a\n            data-role=\"clear-selection\"\n            href=\"#\"\n            class=\"bb-stack__item bb-text-semi-bold\"\n            i18n=\"\n              Clear Selection|Clear selection button on the top of the table\n              list@@messages.messagesConversationsList.clearSelectionButton\"\n            (click)=\"\n              $event.preventDefault(); selectionsGroupForm.reset(); host.manageSelectionForm(selectionsGroupForm)\n            \"\n            >Clear Selection</a\n          >\n          <button\n            bbButton\n            color=\"link\"\n            [circle]=\"true\"\n            data-role=\"mark-as-read-unread\"\n            i18n-aria-label=\"\n              Toggle read status@@messages.messagesConversationsList.messagesTableMobile.toggleReadStatusAriaLabel\"\n            aria-label=\"Toggle read status\"\n            i18n-bbTooltip=\"\n              Toggle read status@@messages.messagesConversationsList.messagesTable.ToggleReadStatusTooltipText\"\n            bbTooltip=\"Toggle read status\"\n            container=\"body\"\n            triggers=\"hover\"\n            *ngIf=\"!isDraftView\"\n            (click)=\"host.selectedIdsArray.length && host.markAsReadUnread()\"\n          >\n            <bb-icon-ui *ngIf=\"host.isUnread; else readIconTpl\" class=\"bb-text-support\" name=\"markunread\"> </bb-icon-ui>\n            <ng-template #readIconTpl>\n              <bb-icon-ui class=\"bb-text-support\" name=\"drafts\"></bb-icon-ui>\n            </ng-template>\n          </button>\n\n          <button\n            bbButton\n            color=\"link\"\n            data-role=\"Delete\"\n            circle=\"true\"\n            aria-label=\"Delete\"\n            i18n-aria-label=\"Delete aria-label@@messages.messagesConversationsList.deleteButtonAriaLabel\"\n            i18n=\"Delete|Delete button on the top of the table list@@messages.messagesConversationsList.deleteButton\"\n            bbTooltip=\"Delete\"\n            i18n-bbTooltip=\"\n              Delete|Delete button on the top of the table list\n              tooltip@@messages.messagesConversationsList.deleteTooltip\"\n            container=\"body\"\n            triggers=\"hover\"\n            (click)=\"host.openRemoveModal()\"\n          >\n            <bb-icon-ui class=\"bb-text-support\" name=\"delete\"></bb-icon-ui>\n          </button>\n        </ng-container>\n        <ng-template #noneSelectedTpl>\n          <span\n            aria-live=\"assertive\"\n            class=\"sr-only\"\n            data-role=\"none-selected-conversations-counter\"\n            i18n=\"None selected|None selected conversations count@@messages.messagesConversationsList.noneSelected\"\n          >\n            None selected\n          </span>\n        </ng-template>\n        <ng-container *ngIf=\"!host.selectedIdsArray.length\">\n          <ng-container *ngTemplateOutlet=\"reloadBtn\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n\n    <form #selectionsGroupForm=\"ngForm\">\n      <table class=\"table table-hover\" data-role=\"conversations-list-table\">\n        <caption class=\"sr-only\" i18n=\"Conversations@@messages.messagesConversationsList.conversationsTable\">\n          Conversations\n        </caption>\n        <thead>\n          <tr\n            bb-conversations-list-table-head-ui\n            (change)=\"host.manageSelectionForm(selectionsGroupForm)\"\n            [mailboxType]=\"mailboxType\"\n          ></tr>\n        </thead>\n        <tbody ngModelGroup=\"ids\">\n          <tr\n            [attr.aria-describedby]=\"'bb-cs-' + conversation.id\"\n            bb-conversations-list-table-row-ui\n            tabindex=\"0\"\n            id=\"bb-cs-{{ conversation.id }}\"\n            class=\"bb-messages-conversations-list-item\"\n            data-role=\"conversation\"\n            *ngFor=\"let conversation of host.conversations; trackBy: trackByFn\"\n            [mailboxType]=\"mailboxType\"\n            [conversation]=\"conversation\"\n            [isDraftView]=\"isDraftView\"\n            [customerServiceTitle$]=\"customerServiceTitle$\"\n            [ngClass]=\"{ 'table-active bb-text-semi-bold': conversation.hasOwnProperty('read') && !conversation.read }\"\n            (change)=\"host.manageSelectionForm(selectionsGroupForm)\"\n            (bbKeyboardClick)=\"host.callSelect($event, conversation)\"\n            (remove)=\"host.openRemoveModal(conversation.id)\"\n            (read)=\"host.markAsReadUnread(conversation.id, conversation.read)\"\n          ></tr>\n        </tbody>\n      </table>\n    </form>\n\n    <bb-modal-ui\n      [isOpen]=\"host.removeModalOpened\"\n      (cancel)=\"host.closeRemoveModal()\"\n      aria-describedby=\"messages-list-table-delete-conversation-modal-subtitle\"\n    >\n      <bb-modal-header-ui>\n        <ng-template bbCustomModalHeader>\n          <span\n            class=\"text-large bb-text-semi-bold\"\n            i18n=\"\n              Delete conversation(s)/draft(s)|Header title of the confirmation modal to delete conversation(s) or\n              draft(s)@@messages.messagesConversationsList.messagesDeleteModal.headerTitle\"\n            >Delete {isDraftView + '', select, true {draft(s)} false {conversation(s)}}?</span\n          >\n        </ng-template>\n      </bb-modal-header-ui>\n      <bb-modal-body-ui>\n        <ng-template bbCustomModalBody>\n          <span\n            id=\"messages-list-table-delete-conversation-modal-subtitle\"\n            i18n=\"\n              Are you sure you want to delete the selected conversation(s)?(s)|Body message of the confirmation modal to\n              delete conversation(s)@@messages.messagesConversationsList.messagesDeleteModal.bodyMessage\"\n            >Are you sure you want to delete the selected {isDraftView + '', select, true {draft(s)} false\n            {conversation(s)}}?</span\n          >\n        </ng-template>\n      </bb-modal-body-ui>\n      <bb-modal-footer-ui>\n        <ng-template bbCustomModalFooter>\n          <bb-button-ui\n            color=\"secondary\"\n            i18n=\"\n              Cancel|Cancel button inside the confirmation modal\n              footer@@messages.messagesConversationsList.messagesDeleteModal.cancelButton\"\n            (click)=\"host.closeRemoveModal()\"\n            >Cancel\n          </bb-button-ui>\n          <bb-button-ui\n            color=\"danger\"\n            i18n=\"\n              Delete|Delete button inside the confirmation modal\n              footer@@messages.messagesConversationsList.messagesDeleteModal.deleteButton\"\n            (click)=\"host.confirmRemoveModal()\"\n            >Delete\n          </bb-button-ui>\n        </ng-template>\n      </bb-modal-footer-ui>\n    </bb-modal-ui>\n  </div>\n\n  <ng-template #reloadBtn>\n    <span\n      bbTooltip=\"Refresh\"\n      i18n-bbTooltip=\"Refresh|Refresh button text@@messagesConversationsList.refreshButton\"\n      triggers=\"hover focus\"\n      placement=\"top\"\n      container=\"body\"\n    >\n      <button\n        bbButton\n        color=\"link\"\n        circle=\"true\"\n        data-role=\"refresh\"\n        aria-label=\"Refresh\"\n        i18n-aria-label=\"@@messagesConversationsList.refreshButton\"\n        (click)=\"host.callUpdate()\"\n      >\n        <bb-icon-ui class=\"bb-text-support\" name=\"loading\"></bb-icon-ui>\n      </button>\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return ConversationsListTableHeadComponent; }), selector: "tr[bb-conversations-list-table-head-ui]", inputs: ["mailboxType"] }, { type: i0__namespace.forwardRef(function () { return ConversationsListTableRowComponent; }), selector: "tr[bb-conversations-list-table-row-ui]", inputs: ["conversation", "isDraftView", "customerServiceTitle$", "mailboxType"], outputs: ["read", "remove"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConversationsListTableCustomizableDirective; }), selector: "[bbConversationsListTableCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.NgForm; }), selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.NgModelGroup; }), selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i0__namespace.forwardRef(function () { return i6__namespace.AsyncPipe; }), "date": i0__namespace.forwardRef(function () { return i6__namespace.DatePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-conversations-list-table-ui',
                        providers: [i1$1.TemplateRegistry, i2.BaseConversationsListPropertiesService],
                        templateUrl: './conversations-list-table.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.BaseConversationsListPropertiesService }]; }, propDecorators: { conversations: [{
                    type: i0.Input
                }], reset: [{
                    type: i0.Input
                }], mailboxTypeValue: [{
                    type: i0.Input,
                    args: ['mailboxType']
                }], customerServiceTitle$: [{
                    type: i0.Input
                }], select: [{
                    type: i0.Output
                }], read: [{
                    type: i0.Output
                }], remove: [{
                    type: i0.Output
                }], update: [{
                    type: i0.Output
                }] } });
    var ConversationsListTableCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConversationsListTableCustomizableDirective, _super);
        function ConversationsListTableCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConversationsListTableCustomizableDirective;
    }(i1$1.BbTemplate));
    ConversationsListTableCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConversationsListTableCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableCustomizableDirective, selector: "[bbConversationsListTableCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ConversationsListTableCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConversationsListTableCustomizable]',
                    }]
            }] });

    var FirstPage = {
        from: 0,
    };
    var MessagesConversationsListWidgetComponent = /** @class */ (function (_super) {
        __extends(MessagesConversationsListWidgetComponent, _super);
        function MessagesConversationsListWidgetComponent(messagesService, properties, shared, activatedRoute, element) {
            var _this = this;
            var _a;
            _this = _super.call(this, shared, activatedRoute, properties) || this;
            _this.messagesService = messagesService;
            _this.properties = properties;
            _this.shared = shared;
            _this.activatedRoute = activatedRoute;
            _this.element = element;
            _this.hostRef = _this;
            /**
             * The loading parameter indicating the starting page for the data to be loaded from.
             */
            _this.from = new rxjs.BehaviorSubject(FirstPage);
            /**
             * The loading flag.
             */
            _this.isLoading = false;
            _this.itemsPerPage$$ = new rxjs.BehaviorSubject(undefined);
            _this.mailboxType$$ = new rxjs.BehaviorSubject(undefined);
            _this.createMessageClosedEventName$$ = new rxjs.BehaviorSubject(undefined);
            _this.customerServiceTitle$$ = new rxjs.BehaviorSubject(undefined);
            /**
             * The mailbox type enum (`inbox`, `outbox`, `drafts`).
             */
            _this.mailboxTypeEnum = MailboxTypeEnum;
            /**
             * Quantity of items to show per page/to add per request.
             */
            _this.itemsPerPage = i2.getPropertyValue(_this.itemsPerPage$$, _this.properties.itemsPerPage);
            /**
             * Mailbox type property, used for Client widget
             */
            _this.mailboxType = i2.getPropertyValue(_this.mailboxType$$, _this.properties.mailboxType);
            /**
             * Customer service title to be displayed as a sender
             */
            _this.customerServiceTitle = i2.getPropertyValue(_this.customerServiceTitle$$, _this.properties.customerServiceTitle);
            /**
             * Event published when Create message modal widget was closed,
             * used for Client and Employee widget to update list of conversations
             */
            _this.createMessageClosedEventName = i2.getPropertyValue(_this.createMessageClosedEventName$$.asObservable(), _this.properties.createMessageClosedEventName);
            _this.conversationsStream = _this.from.pipe(operators.withLatestFrom(_this.itemsPerPage, _this.mailboxType), operators.tap(function () { return (_this.isLoading = true); }), operators.switchMap(function (_b) {
                var _c = __read(_b, 3), from = _c[0], size = _c[1], mailboxType = _c[2];
                return _this.getData(from, size, mailboxType);
            }), operators.scan(function (acc, items) { return _this.mergeConversationsData(acc, items); }), operators.tap(function () { return (_this.isLoading = false); }));
            _this.destroyed$ = new rxjs.Subject();
            _this.resetSelection = new rxjs.Subject();
            _this.markAsReadUnreadSubject = new rxjs.Subject();
            _this.markAsReadUnreadStream = _this.markAsReadUnreadSubject.pipe(operators.switchMap(function (params) { return _this.messagesService.markConversationsAsReadUnread(params).pipe(operators.map(function (response) { return ({
                changedItems: response && response.changedItems,
                status: params.status,
            }); }), operators.catchError(function (error) { return _this.showErrorNotification(error); })); }));
            /**
             * The stream with the conversations data.
             */
            _this.conversations = rxjs.combineLatest([
                _this.conversationsStream,
                rxjs.merge(_this.markAsReadUnreadStream, rxjs.of(undefined)).pipe(operators.scan(function (acc, value) { return value && (acc ? Object.assign(Object.assign({}, acc), value) : Object.assign({}, value)); })),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), conversations = _c[0], mark = _c[1];
                /* istanbul ignore next */
                if (mark) {
                    var flag_1 = mark.status === ReadUnreadStatusType.READ;
                    var data = conversations.data.map(function (conversation) {
                        if (mark.changedItems && mark.changedItems.includes(conversation.id)) {
                            conversation.read = flag_1;
                        }
                        return conversation;
                    });
                    return {
                        data: data,
                        params: conversations.params,
                        totalCount: conversations.totalCount,
                    };
                }
                return conversations;
            }), i2.shareReplayOnce());
            _this.firstNewConversationId$ = (_a = _this.conversations) === null || _a === void 0 ? void 0 : _a.pipe(operators.pairwise(), operators.map(function (_b) {
                var _c = __read(_b, 2), prevConversations = _c[0], newConversations = _c[1];
                var firstNewConversation = newConversations.data[prevConversations.data.length];
                if (prevConversations.data.length >= newConversations.data.length) {
                    firstNewConversation = newConversations.data[0];
                }
                return firstNewConversation && firstNewConversation.id;
            }));
            _this.createMessageClosedEventName
                .pipe(operators.first(), operators.switchMap(function (eventName) { return _this.shared.eventBusFactory(eventName); }), operators.takeUntil(_this.unsubscribe$), operators.tap(function () { return _this.updateConversations(); }))
                .subscribe();
            return _this;
        }
        Object.defineProperty(MessagesConversationsListWidgetComponent.prototype, "mailboxTypeValue", {
            /**
             * Mailbox type property, used for Client widget
             */
            set: function (value) {
                this.mailboxType$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MessagesConversationsListWidgetComponent.prototype, "itemsPerPageValue", {
            /**
             * Quantity of items to show per page/to add per request, used for Client and Employee widget
             */
            set: function (value) {
                this.itemsPerPage$$.next(Number(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MessagesConversationsListWidgetComponent.prototype, "createMessageClosedEventNameValue", {
            /**
             * Event published when Create message modal widget was closed,
             * used for Client and Employee widget to update list of conversations
             */
            set: function (value) {
                this.createMessageClosedEventName$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MessagesConversationsListWidgetComponent.prototype, "customerServiceTitleValue", {
            /**
             * Customer service title which should be replaced the name of the sender
             */
            set: function (value) {
                this.customerServiceTitle$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        MessagesConversationsListWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            (_a = this.firstNewConversationId$) === null || _a === void 0 ? void 0 : _a.pipe(operators.filter(Boolean), operators.map(function (id) { return "#bb-cs-" + id; }), operators.observeOn(rxjs.asyncScheduler), operators.map(function (elemId) { return _this.element.nativeElement.querySelector("" + elemId); }), operators.filter(Boolean), operators.takeUntil(this.destroyed$)).subscribe(function (elemScrollTo) {
                elemScrollTo === null || elemScrollTo === void 0 ? void 0 : elemScrollTo.focus();
                elemScrollTo === null || elemScrollTo === void 0 ? void 0 : elemScrollTo.scrollIntoView(false);
            });
        };
        MessagesConversationsListWidgetComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        /**
         * Delete conversations
         *
         * @param ids Conversations id list
         */
        MessagesConversationsListWidgetComponent.prototype.removeConversations = function (ids) {
            var _this = this;
            rxjs.merge(this.deleteConversationsStream(ids), this.deleteDraftsStream(ids))
                .pipe(operators.takeUntil(this.unsubscribe$))
                .subscribe(function () {
                _this.resetSelection.next();
                _this.updateConversations();
            }, function (error) { return _this.showErrorNotification(error); });
        };
        /**
         * Get conversations data.
         *
         * @param params Get conversation thread request params
         * @returns Conversations stream
         */
        MessagesConversationsListWidgetComponent.prototype.getConversations = function (params) {
            var _this = this;
            return this.messagesService.getConversations(params).pipe(operators.catchError(function (error) {
                _this.errorResponse = error;
                return rxjs.of({ params: FirstPage, data: [], totalCount: 0 });
            }));
        };
        /**
         * Get drafts data.
         *
         * @param draftData Draft size and position
         * @returns Draft stream
         */
        MessagesConversationsListWidgetComponent.prototype.getDrafts = function (_b) {
            var _this = this;
            var size = _b.size, from = _b.from;
            return this.messagesService.getDrafts({ size: size, from: from }).pipe(operators.catchError(function (error) {
                _this.errorResponse = error;
                return rxjs.of({ params: FirstPage, data: [], totalCount: 0 });
            }));
        };
        /**
         * Mark a message as read or unread.
         *
         * @param params Conversation read request
         */
        MessagesConversationsListWidgetComponent.prototype.markAsReadUnread = function (params) {
            this.markAsReadUnreadSubject.next(params);
        };
        /**
         * Change the starting page for the conversations loading.
         *
         * @param event Starting page params
         */
        MessagesConversationsListWidgetComponent.prototype.setLoadingParams = function (event) {
            this.from.next(event);
            this.onPageChange(event.from);
        };
        /**
         * The method to change the starting page to the first one.
         */
        MessagesConversationsListWidgetComponent.prototype.updateConversations = function () {
            this.from.next(FirstPage);
        };
        /**
         * Open the `Compose Message` modal.
         *
         * @param draftId Draft id
         */
        MessagesConversationsListWidgetComponent.prototype.compose = function (draftId) {
            this.shared.eventBusPublish('bb.event.messages.create.message.open', { draftId: draftId });
        };
        MessagesConversationsListWidgetComponent.prototype.deleteConversationsStream = function (ids) {
            var _this = this;
            return this.mailboxType.pipe(operators.filter(function (mailboxType) { return mailboxType !== MailboxTypeEnum.drafts; }), operators.switchMap(function () { return _this.messagesService.deleteConversations(ids); }), operators.tap(function (response) {
                if (response) {
                    var messageDeletion = response.deletedItems.length > 1 ? _this.messageDeleteSuccessMultipleTpl : _this.messageDeleteSuccessTpl;
                    _this.shared.openNotification(messageDeletion);
                }
            }));
        };
        MessagesConversationsListWidgetComponent.prototype.deleteDraftsStream = function (ids) {
            var _this = this;
            return this.mailboxType.pipe(operators.filter(function (mailboxType) { return mailboxType === MailboxTypeEnum.drafts; }), operators.switchMap(function () { return _this.messagesService.deleteDrafts(ids); }), operators.tap(function (response) {
                if (response) {
                    var draftDeletion = response.deleted.length > 1 ? _this.draftDeleteSuccessMultipleTpl : _this.draftDeleteSuccessTpl;
                    _this.shared.openNotification(draftDeletion);
                }
            }));
        };
        MessagesConversationsListWidgetComponent.prototype.getData = function (from, size, mailboxType) {
            var result = new rxjs.Subject();
            if (mailboxType === MailboxTypeEnum.drafts) {
                this.getDrafts(Object.assign(Object.assign({}, from), { size: size })).subscribe(function (res) { return result.next(res); });
            }
            else
                this.getConversations(Object.assign(Object.assign({}, from), { size: size, mailboxType: mailboxType })).subscribe(function (res) { return result.next(res); });
            return result.pipe(operators.map(function (response) { return (Object.assign({ params: Object.assign(Object.assign({}, from), { size: size, mailboxType: mailboxType }) }, response)); }));
        };
        MessagesConversationsListWidgetComponent.prototype.mergeConversationsData = function (acc, items) {
            return {
                params: acc.params,
                data: items.params.from ? __spreadArray(__spreadArray([], __read(acc.data)), __read(items.data)) : items.data,
                totalCount: items.totalCount,
            };
        };
        return MessagesConversationsListWidgetComponent;
    }(i2.BaseConversationsListWidgetComponent));
    MessagesConversationsListWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetComponent, deps: [{ token: MessagesConversationsListWidgetService }, { token: i2__namespace.BaseConversationsListPropertiesService }, { token: i2__namespace.SharedMethodsService }, { token: i3__namespace$1.ActivatedRoute }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesConversationsListWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationsListWidgetComponent, selector: "bb-messages-conversations-list-widget-ang", inputs: { mailboxTypeValue: ["mailboxType", "mailboxTypeValue"], itemsPerPageValue: ["itemsPerPage", "itemsPerPageValue"], createMessageClosedEventNameValue: ["createMessageClosedEventName", "createMessageClosedEventNameValue"], customerServiceTitleValue: ["customerServiceTitle", "customerServiceTitleValue"] }, providers: [i2.BaseConversationsListPropertiesService], viewQueries: [{ propertyName: "messageDeleteSuccessTpl", first: true, predicate: ["messageDeleteSuccess"], descendants: true }, { propertyName: "messageDeleteSuccessMultipleTpl", first: true, predicate: ["messageDeleteSuccessMultiple"], descendants: true }, { propertyName: "draftDeleteSuccessTpl", first: true, predicate: ["draftDeleteSuccess"], descendants: true }, { propertyName: "draftDeleteSuccessMultipleTpl", first: true, predicate: ["draftDeleteSuccessMultiple"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  bbMessagesConversationsListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    conversations: conversations | async,\n    mailboxType: mailboxType | async,\n    itemsPerPage: itemsPerPage | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbMessagesConversationsListCustomizable\n  let-host\n  let-conversations=\"context.conversations\"\n  let-mailboxType=\"context.mailboxType\"\n  let-itemsPerPage=\"context.itemsPerPage\"\n>\n  <div class=\"bb-messages-conversations-list__container card card-lg\">\n    <ng-container *ngIf=\"conversations?.data; else loadingState\">\n      <ng-container *ngIf=\"!host.errorResponse; else errorState\">\n        <ng-container *ngIf=\"conversations.data.length; else emptyState\">\n          <bb-conversations-list-table-ui\n            [conversations]=\"conversations.data\"\n            [reset]=\"host.resetSelection\"\n            [mailboxType]=\"host.mailboxType | async\"\n            [customerServiceTitle$]=\"host.customerServiceTitle\"\n            (remove)=\"host.removeConversations($event)\"\n            (read)=\"host.markAsReadUnread($event)\"\n            (select)=\"\n              mailboxType === host.mailboxTypeEnum.drafts ? host.openDraft($event) : host.openConversation($event)\n            \"\n            (update)=\"host.updateConversations()\"\n          ></bb-conversations-list-table-ui>\n          <div class=\"p-3 text-center\">\n            <bb-load-button-ui\n              [from]=\"host.from.value.from\"\n              [isLoading]=\"host.isLoading\"\n              [size]=\"itemsPerPage\"\n              [totalCount]=\"conversations.totalCount\"\n              (paramChange)=\"host.setLoadingParams($event)\"\n              data-role=\"load-more-button\"\n              i18n=\"Load more button name@@messages.messagesConversationsList.loadMoreButton\"\n              >Load more</bb-load-button-ui\n            >\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #emptyState>\n    <div class=\"bb-state-container\">\n      <ng-container [ngSwitch]=\"mailboxType\">\n        <ng-container *ngSwitchCase=\"host.mailboxTypeEnum.drafts\">\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.draftsEmptyStateTitle\"\n            title=\"No Drafts\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.draftsEmptyStateSubTitle\"\n            subtitle=\"You don't have any drafts to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.mailboxTypeEnum.outbox\">\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.emptyStateTitle\"\n            title=\"No Sent Messages\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.emptyStateSubtitle\"\n            subtitle=\"You don't have any sent messages to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.simpleEmptyStateTitle\"\n            title=\"No Conversations\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.simpleEmptyStateSubTitle\"\n            subtitle=\"You don't have any conversations to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <bb-messages-request-error [error]=\"host.errorResponse\"></bb-messages-request-error>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui class=\"py-4\" loaderSize=\"md\"></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-template #messageDeleteSuccess>\n  <span\n    i18n=\"\n      Your conversation has been deleted successfully.|Text of successful conversation\n      deletion@@messages.messagesConversationList.messageSuccessDelete\"\n    >Your conversation has been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #messageDeleteSuccessMultiple>\n  <span\n    i18n=\"\n      Your conversations have been deleted successfully.|Text of successful conversations\n      deletion@@messages.messagesConversationList.messageDeleteSuccessMultipleDelete\"\n    >Your conversations have been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #draftDeleteSuccess>\n  <span\n    i18n=\"\n      Your draft has been deleted successfully.|Text of successful draft\n      deletion@@messages.messagesConversationList.draftSuccessDelete\"\n    >Your draft has been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #draftDeleteSuccessMultiple>\n  <span\n    i18n=\"\n      Your draft have been deleted successfully.|Text of successful draft\n      deletion@@messages.messagesConversationList.draftDeleteSuccessMultipleDelete\"\n    >Your drafts have been deleted successfully.</span\n  >\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return ConversationsListTableComponent; }), selector: "bb-conversations-list-table-ui", inputs: ["conversations", "reset", "mailboxType", "customerServiceTitle$"], outputs: ["select", "read", "remove", "update"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$2.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.MessagesRequestErrorComponent; }), selector: "bb-messages-request-error, bb-messages-request-error-ui", inputs: ["error"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return MessagesConversationsListCustomizableDirective; }), selector: "[bbMessagesConversationsListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }], pipes: { "async": i0__namespace.forwardRef(function () { return i6__namespace.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-conversations-list-widget-ang',
                        providers: [i2.BaseConversationsListPropertiesService],
                        templateUrl: './messages-conversations-list-widget-ang.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: MessagesConversationsListWidgetService }, { type: i2__namespace.BaseConversationsListPropertiesService }, { type: i2__namespace.SharedMethodsService }, { type: i3__namespace$1.ActivatedRoute }, { type: i0__namespace.ElementRef }]; }, propDecorators: { mailboxTypeValue: [{
                    type: i0.Input,
                    args: ['mailboxType']
                }], itemsPerPageValue: [{
                    type: i0.Input,
                    args: ['itemsPerPage']
                }], createMessageClosedEventNameValue: [{
                    type: i0.Input,
                    args: ['createMessageClosedEventName']
                }], customerServiceTitleValue: [{
                    type: i0.Input,
                    args: ['customerServiceTitle']
                }], messageDeleteSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['messageDeleteSuccess']
                }], messageDeleteSuccessMultipleTpl: [{
                    type: i0.ViewChild,
                    args: ['messageDeleteSuccessMultiple']
                }], draftDeleteSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['draftDeleteSuccess']
                }], draftDeleteSuccessMultipleTpl: [{
                    type: i0.ViewChild,
                    args: ['draftDeleteSuccessMultiple']
                }] } });
    var MessagesConversationsListCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesConversationsListCustomizableDirective, _super);
        function MessagesConversationsListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesConversationsListCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesConversationsListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesConversationsListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationsListCustomizableDirective, selector: "[bbMessagesConversationsListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesConversationsListCustomizable]',
                    }]
            }] });

    var components = [
        MessagesConversationsListWidgetComponent,
        ConversationsListTableComponent,
        ConversationsListTableHeadComponent,
        ConversationsListTableRowComponent,
    ];
    var directives = [
        MessagesConversationsListCustomizableDirective,
        ConversationsListTableCustomizableDirective,
        ConversationsListTableHeadCustomizableDirective,
        ConversationsListTableRowCustomizableDirective,
    ];
    var uiModules = [
        i3.BadgeModule,
        i6$1.ButtonModule,
        i2$1.CheckboxGroupModule,
        i4.DropdownMenuModule,
        i5.ModalModule,
        i2$2.IconModule,
        i1$2.InputCheckboxModule,
        i5$1.LoadButtonModule,
        i6$2.EmptyStateModule,
        i7$1.LoadingIndicatorModule,
        i7.TooltipModule,
    ];
    var innerModules = [i2.MessagesRequestErrorModule];
    var MessagesConversationsListWidgetModule = /** @class */ (function () {
        function MessagesConversationsListWidgetModule() {
        }
        return MessagesConversationsListWidgetModule;
    }());
    MessagesConversationsListWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesConversationsListWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetModule, declarations: [MessagesConversationsListWidgetComponent,
            ConversationsListTableComponent,
            ConversationsListTableHeadComponent,
            ConversationsListTableRowComponent, MessagesConversationsListCustomizableDirective,
            ConversationsListTableCustomizableDirective,
            ConversationsListTableHeadCustomizableDirective,
            ConversationsListTableRowCustomizableDirective], imports: [i6.CommonModule, i1__namespace$2.BackbaseCoreModule, i8.KeyboardClickModule,
            i2.SharedMethodsModule,
            i10.FormsModule, i3.BadgeModule,
            i6$1.ButtonModule,
            i2$1.CheckboxGroupModule,
            i4.DropdownMenuModule,
            i5.ModalModule,
            i2$2.IconModule,
            i1$2.InputCheckboxModule,
            i5$1.LoadButtonModule,
            i6$2.EmptyStateModule,
            i7$1.LoadingIndicatorModule,
            i7.TooltipModule, i2.MessagesRequestErrorModule], exports: [MessagesConversationsListWidgetComponent,
            ConversationsListTableComponent,
            ConversationsListTableHeadComponent,
            ConversationsListTableRowComponent, MessagesConversationsListCustomizableDirective,
            ConversationsListTableCustomizableDirective,
            ConversationsListTableHeadCustomizableDirective,
            ConversationsListTableRowCustomizableDirective, i3.BadgeModule,
            i6$1.ButtonModule,
            i2$1.CheckboxGroupModule,
            i4.DropdownMenuModule,
            i5.ModalModule,
            i2$2.IconModule,
            i1$2.InputCheckboxModule,
            i5$1.LoadButtonModule,
            i6$2.EmptyStateModule,
            i7$1.LoadingIndicatorModule,
            i7.TooltipModule, i2.MessagesRequestErrorModule] });
    MessagesConversationsListWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetModule, providers: [MessagesConversationsListWidgetService], imports: [__spreadArray(__spreadArray([
                i6.CommonModule,
                i1$1.BackbaseCoreModule.withConfig({
                    classMap: { MessagesConversationsListWidgetComponent: MessagesConversationsListWidgetComponent },
                }),
                i8.KeyboardClickModule,
                i2.SharedMethodsModule,
                i10.FormsModule
            ], __read(uiModules)), __read(innerModules)), i3.BadgeModule,
            i6$1.ButtonModule,
            i2$1.CheckboxGroupModule,
            i4.DropdownMenuModule,
            i5.ModalModule,
            i2$2.IconModule,
            i1$2.InputCheckboxModule,
            i5$1.LoadButtonModule,
            i6$2.EmptyStateModule,
            i7$1.LoadingIndicatorModule,
            i7.TooltipModule, i2.MessagesRequestErrorModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationsListWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([
                            i6.CommonModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                classMap: { MessagesConversationsListWidgetComponent: MessagesConversationsListWidgetComponent },
                            }),
                            i8.KeyboardClickModule,
                            i2.SharedMethodsModule,
                            i10.FormsModule
                        ], __read(uiModules)), __read(innerModules)),
                        providers: [MessagesConversationsListWidgetService],
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(uiModules)), __read(innerModules)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MessagesConversationsListWidgetComponent = MessagesConversationsListWidgetComponent;
    exports.MessagesConversationsListWidgetModule = MessagesConversationsListWidgetModule;
    exports["ӨConversationsListTableComponent"] = ConversationsListTableComponent;
    exports["ӨConversationsListTableCustomizableDirective"] = ConversationsListTableCustomizableDirective;
    exports["ӨConversationsListTableHeadComponent"] = ConversationsListTableHeadComponent;
    exports["ӨConversationsListTableHeadCustomizableDirective"] = ConversationsListTableHeadCustomizableDirective;
    exports["ӨConversationsListTableRowComponent"] = ConversationsListTableRowComponent;
    exports["ӨConversationsListTableRowCustomizableDirective"] = ConversationsListTableRowCustomizableDirective;
    exports["ӨMessagesConversationsListCustomizableDirective"] = MessagesConversationsListCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-messages-conversations-list-widget-ang.umd.js.map
