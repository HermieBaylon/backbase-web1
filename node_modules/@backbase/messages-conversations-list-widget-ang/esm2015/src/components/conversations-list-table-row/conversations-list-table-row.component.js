import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { ControlContainer, NgModelGroup } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { MailboxTypeEnum } from '../../model';
import { BaseConversationsListPropertiesService } from '@backbase/messages-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/input-checkbox";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/badge";
import * as i4 from "@backbase/ui-ang/dropdown-menu";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/tooltip-directive";
import * as i8 from "@backbase/ui-ang/keyboard-click-directive";
export class ConversationsListTableRowComponent {
    constructor() {
        /**
         * Identifier if it is draft view
         */
        this.isDraftView = false;
        /**
         * Event emitted when this conversation should be marked as read/unread
         */
        this.read = new EventEmitter();
        /**
         * Event emitted when this conversation should be removed
         */
        this.remove = new EventEmitter();
        this.hostRef = this;
        /**
         * The mailbox type enum (inbox, outbox, drafts).
         */
        this.mailboxTypeEnum = MailboxTypeEnum;
    }
    /**
     * The method to toggle the read or unread conversation state.
     */
    toggleRead() {
        this.read.emit();
    }
    /**
     * The method to remove a conversation.
     */
    emitRemove() {
        this.remove.emit();
    }
}
ConversationsListTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConversationsListTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableRowComponent, selector: "tr[bb-conversations-list-table-row-ui]", inputs: { conversation: "conversation", isDraftView: "isDraftView", customerServiceTitle$: "customerServiceTitle$", mailboxType: "mailboxType" }, outputs: { read: "read", remove: "remove" }, providers: [BaseConversationsListPropertiesService], ngImport: i0, template: "<ng-container\n  bbConversationsListTableRowCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    customerServiceTitle: customerServiceTitle$ | async\n  }\"\n></ng-container>\n\n<ng-template bbConversationsListTableRowCustomizable let-host let-customerServiceTitle=\"context.customerServiceTitle\">\n  <td (click)=\"$event.stopPropagation()\" data-role=\"checkbox-cell\">\n    <bb-input-checkbox-ui\n      aria-label=\"Checkbox to select conversation\"\n      i18n-aria-label=\"\n        Checkbox to select conversation@@messages.messagesConversationsList.messagesTable.selectConversationCheckbox\"\n      ngModel\n      [name]=\"host.conversation.id\"\n    ></bb-input-checkbox-ui>\n    <span\n      class=\"sr-only\"\n      i18n=\"Conversation details@@messages.messagesConversationsList.messagesTable.conversation-details\"\n    >\n      Click to open conversation thread, conversation details:\n    </span>\n  </td>\n  <td data-role=\"important-cell\">\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        class=\"bb-stack__item--push-right\"\n        bbTooltip=\"High priority\"\n        i18n-bbTooltip=\"High priority@@messages.messagesConversationsList.messagesTable.highPriorityMessage\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n        *ngIf=\"host.conversation.important\"\n        name=\"error\"\n        color=\"danger\"\n        aria-label=\"High priority\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.highPriorityMessage\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td *ngIf=\"!host.isDraftView\" data-role=\"from-cell\">\n    <span class=\"sr-only\" i18n=\"Messages from@@messages.messagesConversationsList.messagesTable.messagesFrom\"\n      >,From</span\n    >\n    <ng-container [ngSwitch]=\"host.conversation.sender?.id\">\n      <span *ngSwitchCase=\"'customer.service'\">{{ customerServiceTitle }}</span>\n      <span *ngSwitchDefault>{{ host.conversation.sender?.name }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"host.conversation.hasDraft\">\n      <span *ngIf=\"host.conversation.sender?.id\">, </span>\n      <span\n        aria-hidden=\"true\"\n        class=\"text-danger\"\n        i18n=\"Draft@@messages.messagesConversationsList.messagesTable.draftText\"\n        >Draft</span\n      >\n      <span class=\"sr-only\" i18n=\"Contains draft@@messages.messagesConversationsList.messagesTable.containsDraft\"\n        >Contains draft</span\n      >\n    </ng-container>\n  </td>\n  <td data-role=\"has-attachments-cell\">\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        *ngIf=\"host.conversation.hasAttachments\"\n        bbTooltip=\"Contains attachments\"\n        container=\"body\"\n        i18n-bbTooltip=\"\n          Contains attachments|Contains file\n          attachments@@messages.messagesConversationsList.messagesTable.containsFileAttachments\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n        class=\"bb-stack__item--push-right bb-text-support\"\n        name=\"attachment\"\n        aria-label=\"Contains attachments,\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.containsFileAttachments\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td>\n    <ng-container *ngIf=\"host.conversation.subject; else noSubject\">\n      <span class=\"sr-only\" i18n=\"Subject@@messages.messagesConversationsList.messagesTable.subject\">,Subject</span>\n      <span class=\"break-word\" [innerHTML]=\"host.conversation.subject\"></span>\n    </ng-container>\n  </td>\n  <td data-role=\"topic-cell\">\n    <span class=\"sr-only\" i18n=\"Topic@@messages.messagesConversationsList.messagesTable.topic\">,Topic</span>\n    <div class=\"bb-stack\" *ngIf=\"host.conversation.topic && host.conversation.topic.name; else noTopic\">\n      <bb-badge-ui\n        class=\"bb-stack__item\"\n        [text]=\"host.conversation.topic?.name\"\n        [color]=\"host.conversation.topic?.deleted ? 'secondary' : 'primary'\"\n      ></bb-badge-ui>\n      <bb-icon-ui\n        *ngIf=\"host.conversation.topic?.deleted\"\n        name=\"warning\"\n        color=\"warning\"\n        i18n-bbTooltip=\"\n          This topic no longer exists. Contact support for\n          details.@@messages.messagesConversationsList.messagesTable.deletedTopic\"\n        bbTooltip=\"This topic no longer exists. Contact support for details\"\n        aria-label=\"This topic no longer exists. Contact support for details,\"\n        i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.deletedTopic\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      ></bb-icon-ui>\n    </div>\n  </td>\n  <td data-role=\"date-cell\">\n    <span class=\"sr-only\" i18n=\"Date@@messages.messagesConversationsList.messagesTable.date\">,Date</span>\n    <span aria-hidden=\"true\">{{ host.conversation.timestamp | date: 'shortDate' }}</span>\n    <span class=\"sr-only\">{{ host.conversation.timestamp | date: 'mediumDate' }}</span>\n  </td>\n  <td data-role=\"dropdown-cell\" tabindex=\"-1\">\n    <span\n      class=\"sr-only\"\n      i18n=\"Dropdown menu|Dropdown menu button tooltip@@messages.messagesConversationsList.messagesTable.dropdownMenu\"\n      >Dropdown menu</span\n    >\n    <span\n      bbTooltip=\"Dropdown menu\"\n      container=\"body\"\n      tabindex=\"-1\"\n      i18n-bbTooltip=\"@@messages.messagesConversationsList.messagesTable.dropdownMenu\"\n      triggers=\"hover focus\"\n      class=\"bb-d-inline-block\"\n      placement=\"top right\"\n    >\n      <bb-dropdown-menu-ui\n        icon=\"ellipsis-h\"\n        btnColor=\"link\"\n        iconColor=\"dark\"\n        tabindex=\"-1\"\n        buttonSize=\"sm\"\n        iconSize=\"md\"\n        btnCircle=\"true\"\n        [btnCircle]=\"true\"\n        [dropDownButtonLabel]=\"'Dropdown menu for ' + host.conversation.subject\"\n        i18n-dropDownButtonLabel=\"\n          Dropdown menu aria-label@@messages.messagesConversationsList.messagesTable.dropdownMenuAriaLabel\"\n      >\n        <ng-template bbDropdownMenuItem>\n          <a\n            role=\"menuitem\"\n            data-role=\"mark-as-read-unread\"\n            class=\"dropdown-item\"\n            *ngIf=\"!host.isDraftView\"\n            (bbKeyboardClick)=\"host.toggleRead()\"\n          >\n            <ng-container\n              i18n=\"\n                Mark as Read or Unread|Item text in dropdown\n                menu@@messages.messagesConversationsList.messagesTable.markAsReadDropdownItem\"\n            >\n              {host.conversation.read + '', select, true {Mark as unread} false {Mark as read}}\n            </ng-container>\n          </a>\n          <a\n            role=\"menuitem\"\n            data-role=\"delete\"\n            class=\"dropdown-item\"\n            *ngIf=\"host.conversation.deletable || host.isDraftView\"\n            (bbKeyboardClick)=\"host.emitRemove(host.conversation.id)\"\n          >\n            <ng-container\n              i18n=\"\n                Delete|Item text in dropdown menu@@messages.messagesConversationsList.messagesTable.deleteDropdownItem\"\n              >Delete</ng-container\n            >\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </span>\n  </td>\n\n  <ng-template #noSubject>\n    <span class=\"bb-text-support\" i18n=\"No subject@@messages.messagesConversationsList.messagesTable.subjectEmptyState\"\n      >No subject</span\n    >\n  </ng-template>\n\n  <ng-template #noTopic>\n    <span class=\"bb-text-support\" i18n=\"No subject@@messages.messagesConversationsList.messagesTable.topicEmptyState\"\n      >No topic</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i3.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i0.forwardRef(function () { return i4.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i0.forwardRef(function () { return ConversationsListTableRowCustomizableDirective; }), selector: "[bbConversationsListTableRowCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i5.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i6.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i6.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i6.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i4.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0.forwardRef(function () { return i8.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }], pipes: { "async": i0.forwardRef(function () { return i6.AsyncPipe; }), "date": i0.forwardRef(function () { return i6.DatePipe; }) }, viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableRowComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'tr[bb-conversations-list-table-row-ui]',
                    templateUrl: './conversations-list-table-row.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }],
                    providers: [BaseConversationsListPropertiesService],
                }]
        }], propDecorators: { conversation: [{
                type: Input
            }], isDraftView: [{
                type: Input
            }], customerServiceTitle$: [{
                type: Input
            }], mailboxType: [{
                type: Input
            }], read: [{
                type: Output
            }], remove: [{
                type: Output
            }] } });
export class ConversationsListTableRowCustomizableDirective extends BbTemplate {
}
ConversationsListTableRowCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableRowCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConversationsListTableRowCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableRowCustomizableDirective, selector: "[bbConversationsListTableRowCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableRowCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConversationsListTableRowCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,