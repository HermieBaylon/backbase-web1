import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { map, take, takeUntil } from 'rxjs/operators';
import { BbTemplate, TemplateRegistry } from '@backbase/foundation-ang/core';
import { MailboxTypeEnum, ReadUnreadStatusType } from '../../model';
import { BaseConversationsListPropertiesService, getPropertyValue } from '@backbase/messages-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-common";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "../conversations-list-table-head/conversations-list-table-head.component";
import * as i4 from "../conversations-list-table-row/conversations-list-table-row.component";
import * as i5 from "@backbase/ui-ang/modal";
import * as i6 from "@backbase/ui-ang/button";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/keyboard-click-directive";
import * as i9 from "@backbase/ui-ang/tooltip-directive";
import * as i10 from "@angular/forms";
export class ConversationsListTableComponent {
    constructor(properties) {
        this.properties = properties;
        /**
         * Emits conversation object on select event
         */
        this.select = new EventEmitter();
        /**
         * Emits id of the conversation that should be marked as read/unread
         */
        this.read = new EventEmitter();
        /**
         * Emits id of the conversation that should be removed
         */
        this.remove = new EventEmitter();
        /**
         * EventEmitter to update list of the conversations
         */
        this.update = new EventEmitter();
        /**
         * The unique ID HTML property for each component instance.
         */
        this.id = `conversations-list-table-component-${ConversationsListTableComponent.counter++}`;
        this.hostRef = this;
        this._conversations = [];
        this.readUnreadStatusTypeDefault = ReadUnreadStatusType.READ;
        this.readUnreadStatus = this.readUnreadStatusTypeDefault;
        this.unsubscribe = new Subject();
        /**
         * The flag that toggles between the open and closed state of the confirmation modal for conversation removal.
         */
        this.removeModalOpened = false;
        /**
         * The array containing the IDs of selected conversations.
         */
        this.selectedIdsArray = [];
        /**
         * The stream with the flag toggling between the draft and the conversation view.
         */
        this.isDraftView$ = of(false);
        this.mailboxType$$ = new BehaviorSubject(undefined);
    }
    /**
     * Array of the conversations
     */
    set conversations(value) {
        this._conversations = value;
        this.manageSelectionForm(this.selectionsGroupForm);
    }
    /**
     * The conversations getter.
     */
    get conversations() {
        return this._conversations;
    }
    /**
     * The stream with the mailbox type.
     */
    set mailboxTypeValue(value) {
        this.mailboxType$$.next(value);
    }
    doesParentContainDropdown(node) {
        return !!(node.parentNode && node.parentNode.closest('.dropdown'));
    }
    ngOnInit() {
        if (this.reset) {
            this.reset.pipe(takeUntil(this.unsubscribe)).subscribe(() => this.resetForm());
        }
        this.isDraftView$ = this.mailboxType.pipe(take(1), map(type => type === MailboxTypeEnum.drafts));
    }
    ngOnDestroy() {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    /**
     * The flag indicating if the conversation is unread.
     */
    get isUnread() {
        return this.readUnreadStatus === ReadUnreadStatusType.UNREAD;
    }
    /**
     * The method to update the list of conversations.
     */
    callUpdate() {
        this.resetForm();
        this.update.emit();
    }
    /**
     * The method to mark a conversation as selected.
     *
     * @param event Mouse event
     * @param conversation Conversation thread data
     */
    callSelect(event, conversation) {
        if (this.doesParentContainDropdown(event.target)) {
            return;
        }
        this.select.emit(conversation);
    }
    /**
     * The method to mark a conversation as read or unread.
     *
     * @param conversationId Conversation id
     * @param conversationStatus Conversation status
     */
    markAsReadUnread(conversationId, conversationStatus) {
        const status = conversationStatus === undefined
            ? this.readUnreadStatus
            : conversationStatus
                ? ReadUnreadStatusType.UNREAD
                : ReadUnreadStatusType.READ;
        this.read.emit({
            status,
            ids: conversationId ? [conversationId] : this.selectedIdsArray,
        });
    }
    /**
     * The method to open the confirmation modal for removal.
     *
     * @param id Conversation id
     */
    openRemoveModal(id) {
        this.removeId = id;
        this.removeModalOpened = true;
    }
    /**
     * The method to close the confirmation modal for removal.
     */
    closeRemoveModal() {
        this.removeId = undefined;
        this.removeModalOpened = false;
    }
    /**
     * The method to confirm the remove action and close the modal.
     */
    confirmRemoveModal() {
        this.remove.emit(this.removeId ? [this.removeId] : this.selectedIdsArray);
        this.closeRemoveModal();
    }
    /**
     * The method to update the selected conversations form.
     *
     * @param ngForm Form object
     */
    manageSelectionForm(ngForm) {
        if (ngForm) {
            const ids = ngForm.form.value.ids;
            this.selectionsGroupForm = ngForm;
            this.selectedIdsArray = Object.keys(ids).filter(id => ids[id]);
            if (this.selectedIdsArray.length) {
                const selectedIdsIncludesUnreadConversation = this.conversations.find(conversation => this.selectedIdsArray.includes(conversation.id) && !conversation.read);
                this.readUnreadStatus = selectedIdsIncludesUnreadConversation
                    ? ReadUnreadStatusType.READ
                    : ReadUnreadStatusType.UNREAD;
            }
            else {
                this.readUnreadStatus = ReadUnreadStatusType.READ;
            }
        }
    }
    /**
     * The method to differentiate conversations by IDs in order to optimize loops performance.
     *
     * @param _index Index
     * @param item Conversation thread
     * @returns Conversation thread id
     */
    trackByFn(_index, item) {
        return item.id;
    }
    resetForm() {
        if (this.selectionsGroupForm) {
            this.selectionsGroupForm.reset();
            this.manageSelectionForm(this.selectionsGroupForm);
        }
    }
    get mailboxType() {
        return getPropertyValue(this.mailboxType$$.asObservable(), this.properties.mailboxType);
    }
}
ConversationsListTableComponent.counter = 0;
ConversationsListTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableComponent, deps: [{ token: i1.BaseConversationsListPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
ConversationsListTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableComponent, selector: "bb-conversations-list-table-ui", inputs: { conversations: "conversations", reset: "reset", mailboxTypeValue: ["mailboxType", "mailboxTypeValue"], customerServiceTitle$: "customerServiceTitle$" }, outputs: { select: "select", read: "read", remove: "remove", update: "update" }, providers: [TemplateRegistry, BaseConversationsListPropertiesService], ngImport: i0, template: "<ng-container\n  bbConversationsListTableCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    isDraftView: isDraftView$ | async,\n    mailboxType: mailboxType | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbConversationsListTableCustomizable\n  let-host\n  let-isDraftView=\"context.isDraftView\"\n  let-mailboxType=\"context.mailboxType\"\n>\n  <div\n    class=\"sr-only\"\n    i18n=\"Mailbox tab of selected type is open announcement@@messages.messagesConversationsList.openTabType\"\n  >\n    { mailboxType, select, inbox {inbox} outbox {outbox} drafts {drafts} } tab is open,\n  </div>\n  <div class=\"d-md-none\">\n    <div class=\"bb-button-bar\">\n      <ng-container *ngTemplateOutlet=\"reloadBtn\"></ng-container>\n    </div>\n    <table class=\"table\" role=\"presentation\">\n      <tbody role=\"list\">\n        <tr\n          role=\"listitem\"\n          tabindex=\"0\"\n          data-role=\"conversation-mobile\"\n          *ngFor=\"let conversation of host.conversations\"\n          [ngClass]=\"{ 'table-active': !conversation.read }\"\n          (bbKeyboardClick)=\"host.callSelect($event, conversation)\"\n        >\n          <td>\n            <div\n              class=\"text-truncate text-normal bb-text-semi-bold break-word\"\n              *ngIf=\"conversation.subject; else noSubject\"\n              [innerHTML]=\"conversation.subject\"\n            ></div>\n            <div class=\"text-truncate text-small\" *ngIf=\"conversation.sender\">{{ conversation.sender.name }}</div>\n\n            <ng-template #noSubject>\n              <span\n                class=\"bb-text-support\"\n                i18n=\"No subject@@messages.messagesConversationsList.messagesTableMobile.subjectEmptyState\"\n                >No subject</span\n              >\n            </ng-template>\n          </td>\n          <td>\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item text-small\" [attr.aria-label]=\"conversation.timestamp | date: 'mediumDate'\">\n                <span aria-hidden=\"true\">{{ conversation.timestamp | date: 'shortDate' }}</span>\n              </div>\n              <bb-icon-ui\n                *ngIf=\"conversation.important\"\n                bbTooltip=\"High priority\"\n                i18n-bbTooltip=\"High priority@@messages.messagesConversationsList.messagesTable.importantMessage\"\n                container=\"body\"\n                triggers=\"hover\"\n                placement=\"bottom\"\n                class=\"bb-stack__item\"\n                name=\"error\"\n                color=\"danger\"\n                aria-label=\"High priority\"\n                i18n-aria-label=\"@@messages.messagesConversationsList.messagesTable.importantMessage\"\n              ></bb-icon-ui>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div class=\"d-none d-md-block\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item--push-right\">\n        <ng-container *ngIf=\"host.selectedIdsArray.length; else noneSelectedTpl\">\n          <span class=\"bb-stack__item bb-text-support\">\n            <span\n              data-role=\"selected-conversations-counter\"\n              i18n=\"Selected|Selected conversations count@@messages.messagesConversationsList.selected\"\n              [attr.aria-label]=\"host.selectedIdsArray.length + ' Selected'\"\n            >\n              <span aria-hidden=\"true\">{{ host.selectedIdsArray.length + ' Selected' }}</span>\n            </span>\n          </span>\n          <span class=\"bb-stack__item bb-text-support\">|</span>\n          <a\n            data-role=\"clear-selection\"\n            href=\"#\"\n            class=\"bb-stack__item bb-text-semi-bold\"\n            i18n=\"\n              Clear Selection|Clear selection button on the top of the table\n              list@@messages.messagesConversationsList.clearSelectionButton\"\n            (click)=\"\n              $event.preventDefault(); selectionsGroupForm.reset(); host.manageSelectionForm(selectionsGroupForm)\n            \"\n            >Clear Selection</a\n          >\n          <button\n            bbButton\n            color=\"link\"\n            [circle]=\"true\"\n            data-role=\"mark-as-read-unread\"\n            i18n-aria-label=\"\n              Toggle read status@@messages.messagesConversationsList.messagesTableMobile.toggleReadStatusAriaLabel\"\n            aria-label=\"Toggle read status\"\n            i18n-bbTooltip=\"\n              Toggle read status@@messages.messagesConversationsList.messagesTable.ToggleReadStatusTooltipText\"\n            bbTooltip=\"Toggle read status\"\n            container=\"body\"\n            triggers=\"hover\"\n            *ngIf=\"!isDraftView\"\n            (click)=\"host.selectedIdsArray.length && host.markAsReadUnread()\"\n          >\n            <bb-icon-ui *ngIf=\"host.isUnread; else readIconTpl\" class=\"bb-text-support\" name=\"markunread\"> </bb-icon-ui>\n            <ng-template #readIconTpl>\n              <bb-icon-ui class=\"bb-text-support\" name=\"drafts\"></bb-icon-ui>\n            </ng-template>\n          </button>\n\n          <button\n            bbButton\n            color=\"link\"\n            data-role=\"Delete\"\n            circle=\"true\"\n            aria-label=\"Delete\"\n            i18n-aria-label=\"Delete aria-label@@messages.messagesConversationsList.deleteButtonAriaLabel\"\n            i18n=\"Delete|Delete button on the top of the table list@@messages.messagesConversationsList.deleteButton\"\n            bbTooltip=\"Delete\"\n            i18n-bbTooltip=\"\n              Delete|Delete button on the top of the table list\n              tooltip@@messages.messagesConversationsList.deleteTooltip\"\n            container=\"body\"\n            triggers=\"hover\"\n            (click)=\"host.openRemoveModal()\"\n          >\n            <bb-icon-ui class=\"bb-text-support\" name=\"delete\"></bb-icon-ui>\n          </button>\n        </ng-container>\n        <ng-template #noneSelectedTpl>\n          <span\n            aria-live=\"assertive\"\n            class=\"sr-only\"\n            data-role=\"none-selected-conversations-counter\"\n            i18n=\"None selected|None selected conversations count@@messages.messagesConversationsList.noneSelected\"\n          >\n            None selected\n          </span>\n        </ng-template>\n        <ng-container *ngIf=\"!host.selectedIdsArray.length\">\n          <ng-container *ngTemplateOutlet=\"reloadBtn\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n\n    <form #selectionsGroupForm=\"ngForm\">\n      <table class=\"table table-hover\" data-role=\"conversations-list-table\">\n        <caption class=\"sr-only\" i18n=\"Conversations@@messages.messagesConversationsList.conversationsTable\">\n          Conversations\n        </caption>\n        <thead>\n          <tr\n            bb-conversations-list-table-head-ui\n            (change)=\"host.manageSelectionForm(selectionsGroupForm)\"\n            [mailboxType]=\"mailboxType\"\n          ></tr>\n        </thead>\n        <tbody ngModelGroup=\"ids\">\n          <tr\n            [attr.aria-describedby]=\"'bb-cs-' + conversation.id\"\n            bb-conversations-list-table-row-ui\n            tabindex=\"0\"\n            id=\"bb-cs-{{ conversation.id }}\"\n            class=\"bb-messages-conversations-list-item\"\n            data-role=\"conversation\"\n            *ngFor=\"let conversation of host.conversations; trackBy: trackByFn\"\n            [mailboxType]=\"mailboxType\"\n            [conversation]=\"conversation\"\n            [isDraftView]=\"isDraftView\"\n            [customerServiceTitle$]=\"customerServiceTitle$\"\n            [ngClass]=\"{ 'table-active bb-text-semi-bold': conversation.hasOwnProperty('read') && !conversation.read }\"\n            (change)=\"host.manageSelectionForm(selectionsGroupForm)\"\n            (bbKeyboardClick)=\"host.callSelect($event, conversation)\"\n            (remove)=\"host.openRemoveModal(conversation.id)\"\n            (read)=\"host.markAsReadUnread(conversation.id, conversation.read)\"\n          ></tr>\n        </tbody>\n      </table>\n    </form>\n\n    <bb-modal-ui\n      [isOpen]=\"host.removeModalOpened\"\n      (cancel)=\"host.closeRemoveModal()\"\n      aria-describedby=\"messages-list-table-delete-conversation-modal-subtitle\"\n    >\n      <bb-modal-header-ui>\n        <ng-template bbCustomModalHeader>\n          <span\n            class=\"text-large bb-text-semi-bold\"\n            i18n=\"\n              Delete conversation(s)/draft(s)|Header title of the confirmation modal to delete conversation(s) or\n              draft(s)@@messages.messagesConversationsList.messagesDeleteModal.headerTitle\"\n            >Delete {isDraftView + '', select, true {draft(s)} false {conversation(s)}}?</span\n          >\n        </ng-template>\n      </bb-modal-header-ui>\n      <bb-modal-body-ui>\n        <ng-template bbCustomModalBody>\n          <span\n            id=\"messages-list-table-delete-conversation-modal-subtitle\"\n            i18n=\"\n              Are you sure you want to delete the selected conversation(s)?(s)|Body message of the confirmation modal to\n              delete conversation(s)@@messages.messagesConversationsList.messagesDeleteModal.bodyMessage\"\n            >Are you sure you want to delete the selected {isDraftView + '', select, true {draft(s)} false\n            {conversation(s)}}?</span\n          >\n        </ng-template>\n      </bb-modal-body-ui>\n      <bb-modal-footer-ui>\n        <ng-template bbCustomModalFooter>\n          <bb-button-ui\n            color=\"secondary\"\n            i18n=\"\n              Cancel|Cancel button inside the confirmation modal\n              footer@@messages.messagesConversationsList.messagesDeleteModal.cancelButton\"\n            (click)=\"host.closeRemoveModal()\"\n            >Cancel\n          </bb-button-ui>\n          <bb-button-ui\n            color=\"danger\"\n            i18n=\"\n              Delete|Delete button inside the confirmation modal\n              footer@@messages.messagesConversationsList.messagesDeleteModal.deleteButton\"\n            (click)=\"host.confirmRemoveModal()\"\n            >Delete\n          </bb-button-ui>\n        </ng-template>\n      </bb-modal-footer-ui>\n    </bb-modal-ui>\n  </div>\n\n  <ng-template #reloadBtn>\n    <span\n      bbTooltip=\"Refresh\"\n      i18n-bbTooltip=\"Refresh|Refresh button text@@messagesConversationsList.refreshButton\"\n      triggers=\"hover focus\"\n      placement=\"top\"\n      container=\"body\"\n    >\n      <button\n        bbButton\n        color=\"link\"\n        circle=\"true\"\n        data-role=\"refresh\"\n        aria-label=\"Refresh\"\n        i18n-aria-label=\"@@messagesConversationsList.refreshButton\"\n        (click)=\"host.callUpdate()\"\n      >\n        <bb-icon-ui class=\"bb-text-support\" name=\"loading\"></bb-icon-ui>\n      </button>\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i3.ConversationsListTableHeadComponent; }), selector: "tr[bb-conversations-list-table-head-ui]", inputs: ["mailboxType"] }, { type: i0.forwardRef(function () { return i4.ConversationsListTableRowComponent; }), selector: "tr[bb-conversations-list-table-row-ui]", inputs: ["conversation", "isDraftView", "customerServiceTitle$", "mailboxType"], outputs: ["read", "remove"] }, { type: i0.forwardRef(function () { return i5.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i5.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i5.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i5.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i6.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }], directives: [{ type: i0.forwardRef(function () { return ConversationsListTableCustomizableDirective; }), selector: "[bbConversationsListTableCustomizable]" }, { type: i0.forwardRef(function () { return i7.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i7.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i7.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i8.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i9.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i6.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i10.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i10.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i10.NgForm; }), selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i10.NgModelGroup; }), selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i0.forwardRef(function () { return i5.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i5.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i5.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i0.forwardRef(function () { return i7.AsyncPipe; }), "date": i0.forwardRef(function () { return i7.DatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-conversations-list-table-ui',
                    providers: [TemplateRegistry, BaseConversationsListPropertiesService],
                    templateUrl: './conversations-list-table.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.BaseConversationsListPropertiesService }]; }, propDecorators: { conversations: [{
                type: Input
            }], reset: [{
                type: Input
            }], mailboxTypeValue: [{
                type: Input,
                args: ['mailboxType']
            }], customerServiceTitle$: [{
                type: Input
            }], select: [{
                type: Output
            }], read: [{
                type: Output
            }], remove: [{
                type: Output
            }], update: [{
                type: Output
            }] } });
export class ConversationsListTableCustomizableDirective extends BbTemplate {
}
ConversationsListTableCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConversationsListTableCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableCustomizableDirective, selector: "[bbConversationsListTableCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConversationsListTableCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,