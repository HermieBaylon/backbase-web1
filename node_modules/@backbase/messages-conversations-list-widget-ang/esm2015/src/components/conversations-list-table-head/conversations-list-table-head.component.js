import { Component, Directive, Input } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { ControlContainer, NgForm } from '@angular/forms';
import { MailboxTypeEnum } from '../../model';
import { BehaviorSubject } from 'rxjs';
import { BaseConversationsListPropertiesService, getPropertyValue } from '@backbase/messages-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-common";
import * as i2 from "@backbase/ui-ang/checkbox-group";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
export class ConversationsListTableHeadComponent {
    constructor(properties) {
        this.properties = properties;
        this.hostRef = this;
        this.mailboxType$$ = new BehaviorSubject(undefined);
        /**
         * The mailbox type enum (`inbox`, `outbox`, `drafts`).
         */
        this.mailboxTypeEnum = MailboxTypeEnum;
    }
    /**
     * The stream with the mailbox type.
     */
    set mailboxTypeValue(value) {
        this.mailboxType$$.next(value);
    }
    get mailboxType() {
        return getPropertyValue(this.mailboxType$$.asObservable(), this.properties.mailboxType);
    }
}
ConversationsListTableHeadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableHeadComponent, deps: [{ token: i1.BaseConversationsListPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
ConversationsListTableHeadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableHeadComponent, selector: "tr[bb-conversations-list-table-head-ui]", inputs: { mailboxTypeValue: ["mailboxType", "mailboxTypeValue"] }, providers: [BaseConversationsListPropertiesService], ngImport: i0, template: "<ng-container\n  bbConversationsListTableHeadCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    mailboxType: mailboxType | async\n  }\"\n></ng-container>\n\n<ng-template bbConversationsListTableHeadCustomizable let-host let-mailboxType=\"context.mailboxType\">\n  <th scope=\"col\" data-role=\"checkbox-column\">\n    <bb-checkbox-group-ui\n      aria-label=\"Select all conversations\"\n      i18n-aria-label=\"\n        Select all conversations@@messages.messagesConversationsList.messagesTable.checkboxGroupAriaLabel\"\n      ngModelGroup=\"ids\"\n    ></bb-checkbox-group-ui>\n  </th>\n  <th scope=\"col\" data-role=\"importance-column\"></th>\n  <th\n    data-role=\"from-column\"\n    scope=\"col\"\n    i18n=\"\n      From|The name of the table head cell called 'From'@@messages.messagesConversationsList.messagesTable.headerFrom\"\n    *ngIf=\"mailboxType !== host.mailboxTypeEnum.drafts\"\n  >\n    From\n  </th>\n  <th scope=\"col\" data-role=\"attachments-column\"></th>\n  <th\n    data-role=\"subject-column\"\n    scope=\"col\"\n    i18n=\"\n      Subject|The name of the table head cell called\n      'Subject'@@messages.messagesConversationsList.messagesTable.headerSubject\"\n  >\n    Subject\n  </th>\n  <th\n    data-role=\"topic-column\"\n    scope=\"col\"\n    i18n=\"\n      Topic|The name of the table head cell called 'Topic'@@messages.messagesConversationsList.messagesTable.headerTopic\"\n  >\n    Topic\n  </th>\n  <th\n    data-role=\"date-column\"\n    scope=\"col\"\n    i18n=\"\n      Date|The name of the table head cell called 'Date'@@messages.messagesConversationsList.messagesTable.headerDate\"\n  >\n    Date\n  </th>\n  <th data-role=\"dropdown-menu-column\" scope=\"col\"></th>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.CheckboxGroupComponent; }), selector: "bb-checkbox-group-ui" }], directives: [{ type: i0.forwardRef(function () { return ConversationsListTableHeadCustomizableDirective; }), selector: "[bbConversationsListTableHeadCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i3.NgModelGroup; }), selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0.forwardRef(function () { return i4.AsyncPipe; }) }, viewProviders: [{ provide: ControlContainer, useExisting: NgForm }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableHeadComponent, decorators: [{
            type: Component,
            args: [{
                    /* eslint-disable */
                    selector: 'tr[bb-conversations-list-table-head-ui]',
                    /* eslint-enable */
                    templateUrl: './conversations-list-table-head.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
                    providers: [BaseConversationsListPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.BaseConversationsListPropertiesService }]; }, propDecorators: { mailboxTypeValue: [{
                type: Input,
                args: ['mailboxType']
            }] } });
export class ConversationsListTableHeadCustomizableDirective extends BbTemplate {
}
ConversationsListTableHeadCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableHeadCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConversationsListTableHeadCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ConversationsListTableHeadCustomizableDirective, selector: "[bbConversationsListTableHeadCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ConversationsListTableHeadCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConversationsListTableHeadCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2F0aW9ucy1saXN0LXRhYmxlLWhlYWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tZXNzYWdlcy1jb252ZXJzYXRpb25zLWxpc3Qtd2lkZ2V0LWFuZy9zcmMvY29tcG9uZW50cy9jb252ZXJzYXRpb25zLWxpc3QtdGFibGUtaGVhZC9jb252ZXJzYXRpb25zLWxpc3QtdGFibGUtaGVhZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNvbnZlcnNhdGlvbnMtbGlzdC13aWRnZXQtYW5nL3NyYy9jb21wb25lbnRzL2NvbnZlcnNhdGlvbnMtbGlzdC10YWJsZS1oZWFkL2NvbnZlcnNhdGlvbnMtbGlzdC10YWJsZS1oZWFkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsc0NBQXNDLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7O0FBVXJHLE1BQU0sT0FBTyxtQ0FBbUM7SUFpQjlDLFlBQTZCLFVBQWtEO1FBQWxELGVBQVUsR0FBVixVQUFVLENBQXdDO1FBVHRFLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFFUCxrQkFBYSxHQUFHLElBQUksZUFBZSxDQUFxQixTQUFTLENBQUMsQ0FBQztRQUVwRjs7V0FFRztRQUNNLG9CQUFlLEdBQUcsZUFBZSxDQUFDO0lBRXVDLENBQUM7SUFoQm5GOztPQUVHO0lBQ0gsSUFBMEIsZ0JBQWdCLENBQUMsS0FBYTtRQUN0RCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBYUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUYsQ0FBQzs7aUlBckJVLG1DQUFtQztxSEFBbkMsbUNBQW1DLHFJQUZuQyxDQUFDLHNDQUFzQyxDQUFDLDBCQ2JyRCw0dERBdURBLHNMRGJhLCtDQUErQyxxbEJBOUIzQyxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQzs0RkFHeEQsbUNBQW1DO2tCQVIvQyxTQUFTO21CQUFDO29CQUNULG9CQUFvQjtvQkFDcEIsUUFBUSxFQUFFLHlDQUF5QztvQkFDbkQsbUJBQW1CO29CQUNuQixXQUFXLEVBQUUsZ0RBQWdEO29CQUM3RCxhQUFhLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUM7b0JBQ25FLFNBQVMsRUFBRSxDQUFDLHNDQUFzQyxDQUFDO2lCQUNwRDs2SEFLMkIsZ0JBQWdCO3NCQUF6QyxLQUFLO3VCQUFDLGFBQWE7O0FBdUJ0QixNQUFNLE9BQU8sK0NBQWdELFNBQVEsVUFHcEU7OzZJQUhZLCtDQUErQztpSUFBL0MsK0NBQStDOzRGQUEvQywrQ0FBK0M7a0JBSDNELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDRDQUE0QztpQkFDdkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJiVGVtcGxhdGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sQ29udGFpbmVyLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYWlsYm94VHlwZUVudW0gfSBmcm9tICcuLi8uLi9tb2RlbCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJhc2VDb252ZXJzYXRpb25zTGlzdFByb3BlcnRpZXNTZXJ2aWNlLCBnZXRQcm9wZXJ0eVZhbHVlIH0gZnJvbSAnQGJhY2tiYXNlL21lc3NhZ2VzLWNvbW1vbic7XG5cbkBDb21wb25lbnQoe1xuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICBzZWxlY3RvcjogJ3RyW2JiLWNvbnZlcnNhdGlvbnMtbGlzdC10YWJsZS1oZWFkLXVpXScsXG4gIC8qIGVzbGludC1lbmFibGUgKi9cbiAgdGVtcGxhdGVVcmw6ICcuL2NvbnZlcnNhdGlvbnMtbGlzdC10YWJsZS1oZWFkLmNvbXBvbmVudC5odG1sJyxcbiAgdmlld1Byb3ZpZGVyczogW3sgcHJvdmlkZTogQ29udHJvbENvbnRhaW5lciwgdXNlRXhpc3Rpbmc6IE5nRm9ybSB9XSxcbiAgcHJvdmlkZXJzOiBbQmFzZUNvbnZlcnNhdGlvbnNMaXN0UHJvcGVydGllc1NlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBDb252ZXJzYXRpb25zTGlzdFRhYmxlSGVhZENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBUaGUgc3RyZWFtIHdpdGggdGhlIG1haWxib3ggdHlwZS5cbiAgICovXG4gIEBJbnB1dCgnbWFpbGJveFR5cGUnKSBzZXQgbWFpbGJveFR5cGVWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tYWlsYm94VHlwZSQkLm5leHQodmFsdWUpO1xuICB9XG5cbiAgcmVhZG9ubHkgaG9zdFJlZiA9IHRoaXM7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBtYWlsYm94VHlwZSQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmcgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cbiAgLyoqXG4gICAqIFRoZSBtYWlsYm94IHR5cGUgZW51bSAoYGluYm94YCwgYG91dGJveGAsIGBkcmFmdHNgKS5cbiAgICovXG4gIHJlYWRvbmx5IG1haWxib3hUeXBlRW51bSA9IE1haWxib3hUeXBlRW51bTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByb3BlcnRpZXM6IEJhc2VDb252ZXJzYXRpb25zTGlzdFByb3BlcnRpZXNTZXJ2aWNlKSB7fVxuXG4gIGdldCBtYWlsYm94VHlwZSgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiBnZXRQcm9wZXJ0eVZhbHVlKHRoaXMubWFpbGJveFR5cGUkJC5hc09ic2VydmFibGUoKSwgdGhpcy5wcm9wZXJ0aWVzLm1haWxib3hUeXBlKTtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJDb252ZXJzYXRpb25zTGlzdFRhYmxlSGVhZEN1c3RvbWl6YWJsZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBDb252ZXJzYXRpb25zTGlzdFRhYmxlSGVhZEN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIENvbnZlcnNhdGlvbnNMaXN0VGFibGVIZWFkQ29tcG9uZW50LFxuICB1bmRlZmluZWRcbj4ge31cbiIsIjxuZy1jb250YWluZXJcbiAgYmJDb252ZXJzYXRpb25zTGlzdFRhYmxlSGVhZEN1c3RvbWl6YWJsZVxuICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgIG1haWxib3hUeXBlOiBtYWlsYm94VHlwZSB8IGFzeW5jXG4gIH1cIlxuPjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgYmJDb252ZXJzYXRpb25zTGlzdFRhYmxlSGVhZEN1c3RvbWl6YWJsZSBsZXQtaG9zdCBsZXQtbWFpbGJveFR5cGU9XCJjb250ZXh0Lm1haWxib3hUeXBlXCI+XG4gIDx0aCBzY29wZT1cImNvbFwiIGRhdGEtcm9sZT1cImNoZWNrYm94LWNvbHVtblwiPlxuICAgIDxiYi1jaGVja2JveC1ncm91cC11aVxuICAgICAgYXJpYS1sYWJlbD1cIlNlbGVjdCBhbGwgY29udmVyc2F0aW9uc1wiXG4gICAgICBpMThuLWFyaWEtbGFiZWw9XCJcbiAgICAgICAgU2VsZWN0IGFsbCBjb252ZXJzYXRpb25zQEBtZXNzYWdlcy5tZXNzYWdlc0NvbnZlcnNhdGlvbnNMaXN0Lm1lc3NhZ2VzVGFibGUuY2hlY2tib3hHcm91cEFyaWFMYWJlbFwiXG4gICAgICBuZ01vZGVsR3JvdXA9XCJpZHNcIlxuICAgID48L2JiLWNoZWNrYm94LWdyb3VwLXVpPlxuICA8L3RoPlxuICA8dGggc2NvcGU9XCJjb2xcIiBkYXRhLXJvbGU9XCJpbXBvcnRhbmNlLWNvbHVtblwiPjwvdGg+XG4gIDx0aFxuICAgIGRhdGEtcm9sZT1cImZyb20tY29sdW1uXCJcbiAgICBzY29wZT1cImNvbFwiXG4gICAgaTE4bj1cIlxuICAgICAgRnJvbXxUaGUgbmFtZSBvZiB0aGUgdGFibGUgaGVhZCBjZWxsIGNhbGxlZCAnRnJvbSdAQG1lc3NhZ2VzLm1lc3NhZ2VzQ29udmVyc2F0aW9uc0xpc3QubWVzc2FnZXNUYWJsZS5oZWFkZXJGcm9tXCJcbiAgICAqbmdJZj1cIm1haWxib3hUeXBlICE9PSBob3N0Lm1haWxib3hUeXBlRW51bS5kcmFmdHNcIlxuICA+XG4gICAgRnJvbVxuICA8L3RoPlxuICA8dGggc2NvcGU9XCJjb2xcIiBkYXRhLXJvbGU9XCJhdHRhY2htZW50cy1jb2x1bW5cIj48L3RoPlxuICA8dGhcbiAgICBkYXRhLXJvbGU9XCJzdWJqZWN0LWNvbHVtblwiXG4gICAgc2NvcGU9XCJjb2xcIlxuICAgIGkxOG49XCJcbiAgICAgIFN1YmplY3R8VGhlIG5hbWUgb2YgdGhlIHRhYmxlIGhlYWQgY2VsbCBjYWxsZWRcbiAgICAgICdTdWJqZWN0J0BAbWVzc2FnZXMubWVzc2FnZXNDb252ZXJzYXRpb25zTGlzdC5tZXNzYWdlc1RhYmxlLmhlYWRlclN1YmplY3RcIlxuICA+XG4gICAgU3ViamVjdFxuICA8L3RoPlxuICA8dGhcbiAgICBkYXRhLXJvbGU9XCJ0b3BpYy1jb2x1bW5cIlxuICAgIHNjb3BlPVwiY29sXCJcbiAgICBpMThuPVwiXG4gICAgICBUb3BpY3xUaGUgbmFtZSBvZiB0aGUgdGFibGUgaGVhZCBjZWxsIGNhbGxlZCAnVG9waWMnQEBtZXNzYWdlcy5tZXNzYWdlc0NvbnZlcnNhdGlvbnNMaXN0Lm1lc3NhZ2VzVGFibGUuaGVhZGVyVG9waWNcIlxuICA+XG4gICAgVG9waWNcbiAgPC90aD5cbiAgPHRoXG4gICAgZGF0YS1yb2xlPVwiZGF0ZS1jb2x1bW5cIlxuICAgIHNjb3BlPVwiY29sXCJcbiAgICBpMThuPVwiXG4gICAgICBEYXRlfFRoZSBuYW1lIG9mIHRoZSB0YWJsZSBoZWFkIGNlbGwgY2FsbGVkICdEYXRlJ0BAbWVzc2FnZXMubWVzc2FnZXNDb252ZXJzYXRpb25zTGlzdC5tZXNzYWdlc1RhYmxlLmhlYWRlckRhdGVcIlxuICA+XG4gICAgRGF0ZVxuICA8L3RoPlxuICA8dGggZGF0YS1yb2xlPVwiZHJvcGRvd24tbWVudS1jb2x1bW5cIiBzY29wZT1cImNvbFwiPjwvdGg+XG48L25nLXRlbXBsYXRlPlxuIl19