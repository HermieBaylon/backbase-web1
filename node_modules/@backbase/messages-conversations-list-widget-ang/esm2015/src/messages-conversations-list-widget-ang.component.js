import { Component, Directive, Input, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { catchError, filter, first, map, observeOn, pairwise, scan, switchMap, takeUntil, tap, withLatestFrom, } from 'rxjs/operators';
import { asyncScheduler, BehaviorSubject, combineLatest, merge, of, Subject } from 'rxjs';
import { MailboxTypeEnum, ReadUnreadStatusType, } from './model';
import { BaseConversationsListPropertiesService, BaseConversationsListWidgetComponent, getPropertyValue, shareReplayOnce, } from '@backbase/messages-common';
import * as i0 from "@angular/core";
import * as i1 from "./messages-conversations-list-widget-ang.service";
import * as i2 from "@backbase/messages-common";
import * as i3 from "@angular/router";
import * as i4 from "./components/conversations-list-table/conversations-list-table.component";
import * as i5 from "@backbase/ui-ang/load-button";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "@angular/common";
const FirstPage = {
    from: 0,
};
export class MessagesConversationsListWidgetComponent extends BaseConversationsListWidgetComponent {
    constructor(messagesService, properties, shared, activatedRoute, element) {
        var _a;
        super(shared, activatedRoute, properties);
        this.messagesService = messagesService;
        this.properties = properties;
        this.shared = shared;
        this.activatedRoute = activatedRoute;
        this.element = element;
        this.hostRef = this;
        /**
         * The loading parameter indicating the starting page for the data to be loaded from.
         */
        this.from = new BehaviorSubject(FirstPage);
        /**
         * The loading flag.
         */
        this.isLoading = false;
        this.itemsPerPage$$ = new BehaviorSubject(undefined);
        this.mailboxType$$ = new BehaviorSubject(undefined);
        this.createMessageClosedEventName$$ = new BehaviorSubject(undefined);
        this.customerServiceTitle$$ = new BehaviorSubject(undefined);
        /**
         * The mailbox type enum (`inbox`, `outbox`, `drafts`).
         */
        this.mailboxTypeEnum = MailboxTypeEnum;
        /**
         * Quantity of items to show per page/to add per request.
         */
        this.itemsPerPage = getPropertyValue(this.itemsPerPage$$, this.properties.itemsPerPage);
        /**
         * Mailbox type property, used for Client widget
         */
        this.mailboxType = getPropertyValue(this.mailboxType$$, this.properties.mailboxType);
        /**
         * Customer service title to be displayed as a sender
         */
        this.customerServiceTitle = getPropertyValue(this.customerServiceTitle$$, this.properties.customerServiceTitle);
        /**
         * Event published when Create message modal widget was closed,
         * used for Client and Employee widget to update list of conversations
         */
        this.createMessageClosedEventName = getPropertyValue(this.createMessageClosedEventName$$.asObservable(), this.properties.createMessageClosedEventName);
        this.conversationsStream = this.from.pipe(withLatestFrom(this.itemsPerPage, this.mailboxType), tap(() => (this.isLoading = true)), switchMap(([from, size, mailboxType]) => this.getData(from, size, mailboxType)), scan((acc, items) => this.mergeConversationsData(acc, items)), tap(() => (this.isLoading = false)));
        this.destroyed$ = new Subject();
        this.resetSelection = new Subject();
        this.markAsReadUnreadSubject = new Subject();
        this.markAsReadUnreadStream = this.markAsReadUnreadSubject.pipe(switchMap(params => this.messagesService.markConversationsAsReadUnread(params).pipe(map(response => ({
            changedItems: response && response.changedItems,
            status: params.status,
        })), catchError(error => this.showErrorNotification(error)))));
        /**
         * The stream with the conversations data.
         */
        this.conversations = combineLatest([
            this.conversationsStream,
            merge(this.markAsReadUnreadStream, of(undefined)).pipe(scan((acc, value) => value && (acc ? Object.assign(Object.assign({}, acc), value) : Object.assign({}, value)))),
        ]).pipe(map(([conversations, mark]) => {
            /* istanbul ignore next */
            if (mark) {
                const flag = mark.status === ReadUnreadStatusType.READ;
                const data = conversations.data.map(conversation => {
                    if (mark.changedItems && mark.changedItems.includes(conversation.id)) {
                        conversation.read = flag;
                    }
                    return conversation;
                });
                return {
                    data: data,
                    params: conversations.params,
                    totalCount: conversations.totalCount,
                };
            }
            return conversations;
        }), shareReplayOnce());
        this.firstNewConversationId$ = (_a = this.conversations) === null || _a === void 0 ? void 0 : _a.pipe(pairwise(), map(([prevConversations, newConversations]) => {
            let firstNewConversation = newConversations.data[prevConversations.data.length];
            if (prevConversations.data.length >= newConversations.data.length) {
                firstNewConversation = newConversations.data[0];
            }
            return firstNewConversation && firstNewConversation.id;
        }));
        this.createMessageClosedEventName
            .pipe(first(), switchMap(eventName => this.shared.eventBusFactory(eventName)), takeUntil(this.unsubscribe$), tap(() => this.updateConversations()))
            .subscribe();
    }
    /**
     * Mailbox type property, used for Client widget
     */
    set mailboxTypeValue(value) {
        this.mailboxType$$.next(value);
    }
    /**
     * Quantity of items to show per page/to add per request, used for Client and Employee widget
     */
    set itemsPerPageValue(value) {
        this.itemsPerPage$$.next(Number(value));
    }
    /**
     * Event published when Create message modal widget was closed,
     * used for Client and Employee widget to update list of conversations
     */
    set createMessageClosedEventNameValue(value) {
        this.createMessageClosedEventName$$.next(value);
    }
    /**
     * Customer service title which should be replaced the name of the sender
     */
    set customerServiceTitleValue(value) {
        this.customerServiceTitle$$.next(value);
    }
    ngOnInit() {
        var _a;
        (_a = this.firstNewConversationId$) === null || _a === void 0 ? void 0 : _a.pipe(filter(Boolean), map(id => `#bb-cs-${id}`), observeOn(asyncScheduler), map(elemId => this.element.nativeElement.querySelector(`${elemId}`)), filter(Boolean), takeUntil(this.destroyed$)).subscribe((elemScrollTo) => {
            elemScrollTo === null || elemScrollTo === void 0 ? void 0 : elemScrollTo.focus();
            elemScrollTo === null || elemScrollTo === void 0 ? void 0 : elemScrollTo.scrollIntoView(false);
        });
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    /**
     * Delete conversations
     *
     * @param ids Conversations id list
     */
    removeConversations(ids) {
        merge(this.deleteConversationsStream(ids), this.deleteDraftsStream(ids))
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(() => {
            this.resetSelection.next();
            this.updateConversations();
        }, error => this.showErrorNotification(error));
    }
    /**
     * Get conversations data.
     *
     * @param params Get conversation thread request params
     * @returns Conversations stream
     */
    getConversations(params) {
        return this.messagesService.getConversations(params).pipe(catchError((error) => {
            this.errorResponse = error;
            return of({ params: FirstPage, data: [], totalCount: 0 });
        }));
    }
    /**
     * Get drafts data.
     *
     * @param draftData Draft size and position
     * @returns Draft stream
     */
    getDrafts({ size, from }) {
        return this.messagesService.getDrafts({ size, from }).pipe(catchError((error) => {
            this.errorResponse = error;
            return of({ params: FirstPage, data: [], totalCount: 0 });
        }));
    }
    /**
     * Mark a message as read or unread.
     *
     * @param params Conversation read request
     */
    markAsReadUnread(params) {
        this.markAsReadUnreadSubject.next(params);
    }
    /**
     * Change the starting page for the conversations loading.
     *
     * @param event Starting page params
     */
    setLoadingParams(event) {
        this.from.next(event);
        this.onPageChange(event.from);
    }
    /**
     * The method to change the starting page to the first one.
     */
    updateConversations() {
        this.from.next(FirstPage);
    }
    /**
     * Open the `Compose Message` modal.
     *
     * @param draftId Draft id
     */
    compose(draftId) {
        this.shared.eventBusPublish('bb.event.messages.create.message.open', { draftId });
    }
    deleteConversationsStream(ids) {
        return this.mailboxType.pipe(filter(mailboxType => mailboxType !== MailboxTypeEnum.drafts), switchMap(() => this.messagesService.deleteConversations(ids)), tap(response => {
            if (response) {
                const messageDeletion = response.deletedItems.length > 1 ? this.messageDeleteSuccessMultipleTpl : this.messageDeleteSuccessTpl;
                this.shared.openNotification(messageDeletion);
            }
        }));
    }
    deleteDraftsStream(ids) {
        return this.mailboxType.pipe(filter(mailboxType => mailboxType === MailboxTypeEnum.drafts), switchMap(() => this.messagesService.deleteDrafts(ids)), tap(response => {
            if (response) {
                const draftDeletion = response.deleted.length > 1 ? this.draftDeleteSuccessMultipleTpl : this.draftDeleteSuccessTpl;
                this.shared.openNotification(draftDeletion);
            }
        }));
    }
    getData(from, size, mailboxType) {
        const result = new Subject();
        if (mailboxType === MailboxTypeEnum.drafts) {
            this.getDrafts(Object.assign(Object.assign({}, from), { size })).subscribe(res => result.next(res));
        }
        else
            this.getConversations(Object.assign(Object.assign({}, from), { size, mailboxType })).subscribe(res => result.next(res));
        return result.pipe(map((response) => (Object.assign({ params: Object.assign(Object.assign({}, from), { size, mailboxType }) }, response))));
    }
    mergeConversationsData(acc, items) {
        return {
            params: acc.params,
            data: items.params.from ? [...acc.data, ...items.data] : items.data,
            totalCount: items.totalCount,
        };
    }
}
MessagesConversationsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetComponent, deps: [{ token: i1.MessagesConversationsListWidgetService }, { token: i2.BaseConversationsListPropertiesService }, { token: i2.SharedMethodsService }, { token: i3.ActivatedRoute }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
MessagesConversationsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationsListWidgetComponent, selector: "bb-messages-conversations-list-widget-ang", inputs: { mailboxTypeValue: ["mailboxType", "mailboxTypeValue"], itemsPerPageValue: ["itemsPerPage", "itemsPerPageValue"], createMessageClosedEventNameValue: ["createMessageClosedEventName", "createMessageClosedEventNameValue"], customerServiceTitleValue: ["customerServiceTitle", "customerServiceTitleValue"] }, providers: [BaseConversationsListPropertiesService], viewQueries: [{ propertyName: "messageDeleteSuccessTpl", first: true, predicate: ["messageDeleteSuccess"], descendants: true }, { propertyName: "messageDeleteSuccessMultipleTpl", first: true, predicate: ["messageDeleteSuccessMultiple"], descendants: true }, { propertyName: "draftDeleteSuccessTpl", first: true, predicate: ["draftDeleteSuccess"], descendants: true }, { propertyName: "draftDeleteSuccessMultipleTpl", first: true, predicate: ["draftDeleteSuccessMultiple"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbMessagesConversationsListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    conversations: conversations | async,\n    mailboxType: mailboxType | async,\n    itemsPerPage: itemsPerPage | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbMessagesConversationsListCustomizable\n  let-host\n  let-conversations=\"context.conversations\"\n  let-mailboxType=\"context.mailboxType\"\n  let-itemsPerPage=\"context.itemsPerPage\"\n>\n  <div class=\"bb-messages-conversations-list__container card card-lg\">\n    <ng-container *ngIf=\"conversations?.data; else loadingState\">\n      <ng-container *ngIf=\"!host.errorResponse; else errorState\">\n        <ng-container *ngIf=\"conversations.data.length; else emptyState\">\n          <bb-conversations-list-table-ui\n            [conversations]=\"conversations.data\"\n            [reset]=\"host.resetSelection\"\n            [mailboxType]=\"host.mailboxType | async\"\n            [customerServiceTitle$]=\"host.customerServiceTitle\"\n            (remove)=\"host.removeConversations($event)\"\n            (read)=\"host.markAsReadUnread($event)\"\n            (select)=\"\n              mailboxType === host.mailboxTypeEnum.drafts ? host.openDraft($event) : host.openConversation($event)\n            \"\n            (update)=\"host.updateConversations()\"\n          ></bb-conversations-list-table-ui>\n          <div class=\"p-3 text-center\">\n            <bb-load-button-ui\n              [from]=\"host.from.value.from\"\n              [isLoading]=\"host.isLoading\"\n              [size]=\"itemsPerPage\"\n              [totalCount]=\"conversations.totalCount\"\n              (paramChange)=\"host.setLoadingParams($event)\"\n              data-role=\"load-more-button\"\n              i18n=\"Load more button name@@messages.messagesConversationsList.loadMoreButton\"\n              >Load more</bb-load-button-ui\n            >\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #emptyState>\n    <div class=\"bb-state-container\">\n      <ng-container [ngSwitch]=\"mailboxType\">\n        <ng-container *ngSwitchCase=\"host.mailboxTypeEnum.drafts\">\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.draftsEmptyStateTitle\"\n            title=\"No Drafts\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.draftsEmptyStateSubTitle\"\n            subtitle=\"You don't have any drafts to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.mailboxTypeEnum.outbox\">\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.emptyStateTitle\"\n            title=\"No Sent Messages\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.emptyStateSubtitle\"\n            subtitle=\"You don't have any sent messages to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          <bb-empty-state-ui\n            i18n-title=\"Empty state title@@messages.messagesConversationsList.simpleEmptyStateTitle\"\n            title=\"No Conversations\"\n            i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationsList.simpleEmptyStateSubTitle\"\n            subtitle=\"You don't have any conversations to be displayed.\"\n            iconModifier=\"email\"\n            iconColor=\"muted\"\n          ></bb-empty-state-ui>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <bb-messages-request-error [error]=\"host.errorResponse\"></bb-messages-request-error>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui class=\"py-4\" loaderSize=\"md\"></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-template #messageDeleteSuccess>\n  <span\n    i18n=\"\n      Your conversation has been deleted successfully.|Text of successful conversation\n      deletion@@messages.messagesConversationList.messageSuccessDelete\"\n    >Your conversation has been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #messageDeleteSuccessMultiple>\n  <span\n    i18n=\"\n      Your conversations have been deleted successfully.|Text of successful conversations\n      deletion@@messages.messagesConversationList.messageDeleteSuccessMultipleDelete\"\n    >Your conversations have been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #draftDeleteSuccess>\n  <span\n    i18n=\"\n      Your draft has been deleted successfully.|Text of successful draft\n      deletion@@messages.messagesConversationList.draftSuccessDelete\"\n    >Your draft has been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #draftDeleteSuccessMultiple>\n  <span\n    i18n=\"\n      Your draft have been deleted successfully.|Text of successful draft\n      deletion@@messages.messagesConversationList.draftDeleteSuccessMultipleDelete\"\n    >Your drafts have been deleted successfully.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.ConversationsListTableComponent; }), selector: "bb-conversations-list-table-ui", inputs: ["conversations", "reset", "mailboxType", "customerServiceTitle$"], outputs: ["select", "read", "remove", "update"] }, { type: i0.forwardRef(function () { return i5.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i6.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i2.MessagesRequestErrorComponent; }), selector: "bb-messages-request-error, bb-messages-request-error-ui", inputs: ["error"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return MessagesConversationsListCustomizableDirective; }), selector: "[bbMessagesConversationsListCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i8.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i8.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }], pipes: { "async": i0.forwardRef(function () { return i8.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-conversations-list-widget-ang',
                    providers: [BaseConversationsListPropertiesService],
                    templateUrl: './messages-conversations-list-widget-ang.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.MessagesConversationsListWidgetService }, { type: i2.BaseConversationsListPropertiesService }, { type: i2.SharedMethodsService }, { type: i3.ActivatedRoute }, { type: i0.ElementRef }]; }, propDecorators: { mailboxTypeValue: [{
                type: Input,
                args: ['mailboxType']
            }], itemsPerPageValue: [{
                type: Input,
                args: ['itemsPerPage']
            }], createMessageClosedEventNameValue: [{
                type: Input,
                args: ['createMessageClosedEventName']
            }], customerServiceTitleValue: [{
                type: Input,
                args: ['customerServiceTitle']
            }], messageDeleteSuccessTpl: [{
                type: ViewChild,
                args: ['messageDeleteSuccess']
            }], messageDeleteSuccessMultipleTpl: [{
                type: ViewChild,
                args: ['messageDeleteSuccessMultiple']
            }], draftDeleteSuccessTpl: [{
                type: ViewChild,
                args: ['draftDeleteSuccess']
            }], draftDeleteSuccessMultipleTpl: [{
                type: ViewChild,
                args: ['draftDeleteSuccessMultiple']
            }] } });
export class MessagesConversationsListCustomizableDirective extends BbTemplate {
}
MessagesConversationsListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesConversationsListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationsListCustomizableDirective, selector: "[bbMessagesConversationsListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesConversationsListCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,