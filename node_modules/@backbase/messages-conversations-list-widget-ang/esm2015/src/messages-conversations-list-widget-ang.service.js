import { Inject, Injectable } from '@angular/core';
import { map, tap } from 'rxjs/operators';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-v5-http-ang";
import * as i2 from "@backbase/messages-common";
const DefaultConversationsGetReqParams = {
    direction: 'DESC',
    from: 0,
    size: 10,
    mailboxType: '',
};
const bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
export class MessagesConversationsListWidgetService {
    constructor(messagesService, sharedMethodsService, pubSub) {
        this.messagesService = messagesService;
        this.sharedMethodsService = sharedMethodsService;
        this.pubSub = pubSub;
    }
    deleteConversations(ids) {
        return this.messagesService
            .deleteConversationThreads({ ids })
            .pipe(tap(() => this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined)));
    }
    deleteDrafts(ids) {
        return this.messagesService.deleteMessageDrafts({ ids });
    }
    getConversations(params = DefaultConversationsGetReqParams) {
        return this.messagesService
            .getConversationThreads(params, 'response')
            .pipe(map((response) => this.sharedMethodsService.processData(response)));
    }
    getDrafts({ from, size }) {
        return this.messagesService
            .getMessageDrafts({ from, size }, 'response')
            .pipe(map((response) => this.sharedMethodsService.processData(response)));
    }
    markConversationsAsReadUnread(params) {
        return this.messagesService
            .putMarkAsReadUnread({ markAsReadUnreadPutRequestBody: params })
            .pipe(tap(() => this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined)));
    }
}
MessagesConversationsListWidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetService, deps: [{ token: i1.MessagecenterHttpService }, { token: i2.SharedMethodsService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesConversationsListWidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationsListWidgetService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagecenterHttpService }, { type: i2.SharedMethodsService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMtY29udmVyc2F0aW9ucy1saXN0LXdpZGdldC1hbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbWVzc2FnZXMtY29udmVyc2F0aW9ucy1saXN0LXdpZGdldC1hbmcvc3JjL21lc3NhZ2VzLWNvbnZlcnNhdGlvbnMtbGlzdC13aWRnZXQtYW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHbkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsTUFBTSxFQUFVLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFlbEUsTUFBTSxnQ0FBZ0MsR0FBd0M7SUFDNUUsU0FBUyxFQUFFLE1BQU07SUFDakIsSUFBSSxFQUFFLENBQUM7SUFDUCxJQUFJLEVBQUUsRUFBRTtJQUNSLFdBQVcsRUFBRSxFQUFFO0NBQ2hCLENBQUM7QUFDRixNQUFNLG9DQUFvQyxHQUFHLDJDQUEyQyxDQUFDO0FBR3pGLE1BQU0sT0FBTyxzQ0FBc0M7SUFDakQsWUFDbUIsZUFBeUMsRUFDekMsb0JBQTBDLEVBQzFCLE1BQWM7UUFGOUIsb0JBQWUsR0FBZixlQUFlLENBQTBCO1FBQ3pDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUM5QyxDQUFDO0lBRUosbUJBQW1CLENBQUMsR0FBYTtRQUMvQixPQUFPLElBQUksQ0FBQyxlQUFlO2FBQ3hCLHlCQUF5QixDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7YUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxvQ0FBb0MsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVELFlBQVksQ0FBQyxHQUFhO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELGdCQUFnQixDQUNkLFNBQThDLGdDQUFnQztRQUU5RSxPQUFPLElBQUksQ0FBQyxlQUFlO2FBQ3hCLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUM7YUFDMUMsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLFFBQTRDLEVBQUUsRUFBRSxDQUNuRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUF1QixRQUFRLENBQUMsQ0FDdEUsQ0FDRixDQUFDO0lBQ04sQ0FBQztJQUVELFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQWlDO1FBQ3JELE9BQU8sSUFBSSxDQUFDLGVBQWU7YUFDeEIsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsVUFBVSxDQUFDO2FBQzVDLElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxRQUFzRCxFQUFFLEVBQUUsQ0FDN0QsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBaUMsUUFBUSxDQUFDLENBQ2hGLENBQ0YsQ0FBQztJQUNOLENBQUM7SUFFRCw2QkFBNkIsQ0FDM0IsTUFBc0M7UUFFdEMsT0FBTyxJQUFJLENBQUMsZUFBZTthQUN4QixtQkFBbUIsQ0FBQyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sRUFBRSxDQUFDO2FBQy9ELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0NBQW9DLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7O29JQTdDVSxzQ0FBc0MsOEZBSXZDLE1BQU07d0lBSkwsc0NBQXNDOzRGQUF0QyxzQ0FBc0M7a0JBRGxELFVBQVU7OzBCQUtOLE1BQU07MkJBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQVUJTVUIsIFB1YnN1YiB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy93ZWItc2RrJztcbmltcG9ydCB7IFNoYXJlZE1ldGhvZHNTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL21lc3NhZ2VzLWNvbW1vbic7XG5pbXBvcnQge1xuICBHZXRDb252ZXJzYXRpb25UaHJlYWRzUmVxdWVzdFBhcmFtcyxcbiAgR2V0TWVzc2FnZURyYWZ0c1JlcXVlc3RQYXJhbXMsXG4gIE1lc3NhZ2VjZW50ZXJIdHRwU2VydmljZSxcbiAgQ29udmVyc2F0aW9uVGhyZWFkLFxuICBDb252ZXJzYXRpb25UaHJlYWRzRGVsZXRlUmVzcG9uc2VCb2R5LFxuICBEZWxldGVEcmFmdHNSZXNwb25zZUJvZHksXG4gIE1hcmtBc1JlYWRVbnJlYWRQdXRSZXF1ZXN0Qm9keSxcbiAgTWFya0FzUmVhZFVucmVhZFB1dFJlc3BvbnNlQm9keSxcbiAgTWVzc2FnZURyYWZ0c0dldFJlc3BvbnNlQm9keSxcbn0gZnJvbSAnQGJhY2tiYXNlL21lc3NhZ2VzLXY1LWh0dHAtYW5nJztcbmltcG9ydCB7IENvbnZlcnNhdGlvbnNEYXRhLCBEcmFmdHNEYXRhIH0gZnJvbSAnLi9tb2RlbCc7XG5cbmNvbnN0IERlZmF1bHRDb252ZXJzYXRpb25zR2V0UmVxUGFyYW1zOiBHZXRDb252ZXJzYXRpb25UaHJlYWRzUmVxdWVzdFBhcmFtcyA9IHtcbiAgZGlyZWN0aW9uOiAnREVTQycsXG4gIGZyb206IDAsXG4gIHNpemU6IDEwLFxuICBtYWlsYm94VHlwZTogJycsXG59O1xuY29uc3QgYmJFdmVudFVucmVhZENvbnZlcnNhdGlvbkNvdW50VXBkYXRlID0gJ2JiLmV2ZW50LnVucmVhZC1jb252ZXJzYXRpb24tY291bnQudXBkYXRlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzQ29udmVyc2F0aW9uc0xpc3RXaWRnZXRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZXNzYWdlc1NlcnZpY2U6IE1lc3NhZ2VjZW50ZXJIdHRwU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNoYXJlZE1ldGhvZHNTZXJ2aWNlOiBTaGFyZWRNZXRob2RzU2VydmljZSxcbiAgICBASW5qZWN0KFBVQlNVQikgcHJpdmF0ZSByZWFkb25seSBwdWJTdWI6IFB1YnN1YixcbiAgKSB7fVxuXG4gIGRlbGV0ZUNvbnZlcnNhdGlvbnMoaWRzOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8Q29udmVyc2F0aW9uVGhyZWFkc0RlbGV0ZVJlc3BvbnNlQm9keSB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1NlcnZpY2VcbiAgICAgIC5kZWxldGVDb252ZXJzYXRpb25UaHJlYWRzKHsgaWRzIH0pXG4gICAgICAucGlwZSh0YXAoKCkgPT4gdGhpcy5wdWJTdWIucHVibGlzaChiYkV2ZW50VW5yZWFkQ29udmVyc2F0aW9uQ291bnRVcGRhdGUsIHVuZGVmaW5lZCkpKTtcbiAgfVxuXG4gIGRlbGV0ZURyYWZ0cyhpZHM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxEZWxldGVEcmFmdHNSZXNwb25zZUJvZHkgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXNTZXJ2aWNlLmRlbGV0ZU1lc3NhZ2VEcmFmdHMoeyBpZHMgfSk7XG4gIH1cblxuICBnZXRDb252ZXJzYXRpb25zKFxuICAgIHBhcmFtczogR2V0Q29udmVyc2F0aW9uVGhyZWFkc1JlcXVlc3RQYXJhbXMgPSBEZWZhdWx0Q29udmVyc2F0aW9uc0dldFJlcVBhcmFtcyxcbiAgKTogT2JzZXJ2YWJsZTxDb252ZXJzYXRpb25zRGF0YT4ge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzU2VydmljZVxuICAgICAgLmdldENvbnZlcnNhdGlvblRocmVhZHMocGFyYW1zLCAncmVzcG9uc2UnKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCgocmVzcG9uc2U6IEh0dHBSZXNwb25zZTxDb252ZXJzYXRpb25UaHJlYWRbXT4pID0+XG4gICAgICAgICAgdGhpcy5zaGFyZWRNZXRob2RzU2VydmljZS5wcm9jZXNzRGF0YTxDb252ZXJzYXRpb25UaHJlYWRbXT4ocmVzcG9uc2UpLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgfVxuXG4gIGdldERyYWZ0cyh7IGZyb20sIHNpemUgfTogR2V0TWVzc2FnZURyYWZ0c1JlcXVlc3RQYXJhbXMpOiBPYnNlcnZhYmxlPERyYWZ0c0RhdGE+IHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1NlcnZpY2VcbiAgICAgIC5nZXRNZXNzYWdlRHJhZnRzKHsgZnJvbSwgc2l6ZSB9LCAncmVzcG9uc2UnKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCgocmVzcG9uc2U6IEh0dHBSZXNwb25zZTxNZXNzYWdlRHJhZnRzR2V0UmVzcG9uc2VCb2R5W10+KSA9PlxuICAgICAgICAgIHRoaXMuc2hhcmVkTWV0aG9kc1NlcnZpY2UucHJvY2Vzc0RhdGE8TWVzc2FnZURyYWZ0c0dldFJlc3BvbnNlQm9keVtdPihyZXNwb25zZSksXG4gICAgICAgICksXG4gICAgICApO1xuICB9XG5cbiAgbWFya0NvbnZlcnNhdGlvbnNBc1JlYWRVbnJlYWQoXG4gICAgcGFyYW1zOiBNYXJrQXNSZWFkVW5yZWFkUHV0UmVxdWVzdEJvZHksXG4gICk6IE9ic2VydmFibGU8TWFya0FzUmVhZFVucmVhZFB1dFJlc3BvbnNlQm9keSB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1NlcnZpY2VcbiAgICAgIC5wdXRNYXJrQXNSZWFkVW5yZWFkKHsgbWFya0FzUmVhZFVucmVhZFB1dFJlcXVlc3RCb2R5OiBwYXJhbXMgfSlcbiAgICAgIC5waXBlKHRhcCgoKSA9PiB0aGlzLnB1YlN1Yi5wdWJsaXNoKGJiRXZlbnRVbnJlYWRDb252ZXJzYXRpb25Db3VudFVwZGF0ZSwgdW5kZWZpbmVkKSkpO1xuICB9XG59XG4iXX0=