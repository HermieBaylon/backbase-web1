import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const MarketStatusEnum = {
    Open: 'Open',
    Close: 'Close'
};

const OrderStatusEnum = {
    Draft: 'Draft',
    Discarded: 'Discarded',
    Sent: 'Sent',
    Failed: 'Failed',
    Pending: 'Pending',
    Filled: 'Filled',
    Rejected: 'Rejected',
    Canceled: 'Canceled',
    PartiallyFilled: 'Partially Filled',
    PendingCancel: 'Pending Cancel'
};

const OrderTypeEnum = {
    MarketOrder: 'Market Order',
    LimitOrder: 'Limit Order'
};

const PriceTypeEnum = {
    Opening: 'Opening',
    Closing: 'Closing',
    High: 'High',
    Low: 'Low'
};

const TradeDirectionEnum = {
    Buy: 'Buy',
    Sell: 'Sell'
};

const PORTFOLIO_TRADING_BASE_PATH = new InjectionToken('PORTFOLIO_TRADING_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PortfolioTradingConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PortfolioTradingConfiguration');

class PortfolioTradingApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PortfolioTradingApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PortfolioTradingApiModule,
            providers: [{ provide: PortfolioTradingConfiguration, useFactory: configurationFactory }]
        };
    }
}
PortfolioTradingApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioTradingApiModule, deps: [{ token: PortfolioTradingApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PortfolioTradingConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PortfolioTradingApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioTradingApiModule });
PortfolioTradingApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioTradingApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioTradingApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PortfolioTradingApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PortfolioTradingConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class TradeOrdersService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/api/v1';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PortfolioTradingConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    cancelOrder(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cancelOrder.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/trading/orders/${encodeURIComponent(String(_id))}/cancel`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    cancelOrderUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cancelOrder.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/orders/${encodeURIComponent(String(_id))}/cancel`;
    }
    getInstrumentOrderList(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstrumentOrderList.');
        }
        const _cursor = requestParameters["cursor"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/orders`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getInstrumentOrderListUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstrumentOrderList.');
        }
        const _cursor = requestParameters["cursor"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/orders${queryString ? `?${queryString}` : ''}`;
    }
    getOrder(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOrder.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/orders/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOrderUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOrder.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/orders/${encodeURIComponent(String(_id))}`;
    }
    getOrderList(requestParameters, observe = 'body', reportProgress = false, options) {
        const _search = requestParameters["search"];
        const _cursor = requestParameters["cursor"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_search !== undefined && _search !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/orders`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOrderListUrl(requestParameters) {
        const _search = requestParameters["search"];
        const _cursor = requestParameters["cursor"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_search !== undefined && _search !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/trading/orders${queryString ? `?${queryString}` : ''}`;
    }
    initOrder(requestParameters, observe = 'body', reportProgress = false, options) {
        const _orderPostRequestBody = requestParameters["orderPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/trading/orders`, _orderPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    initOrderUrl(requestParameters) {
        const _orderPostRequestBody = requestParameters["orderPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v1/trading/orders`;
    }
    placeOrder(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling placeOrder.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/trading/orders/${encodeURIComponent(String(_id))}/place`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    placeOrderUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling placeOrder.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/orders/${encodeURIComponent(String(_id))}/place`;
    }
    statusOrder(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling statusOrder.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/orders/${encodeURIComponent(String(_id))}/status`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    statusOrderUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling statusOrder.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/orders/${encodeURIComponent(String(_id))}/status`;
    }
}
TradeOrdersService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradeOrdersService, deps: [{ token: i1.HttpClient }, { token: PORTFOLIO_TRADING_BASE_PATH, optional: true }, { token: PortfolioTradingConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TradeOrdersService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradeOrdersService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradeOrdersService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PORTFOLIO_TRADING_BASE_PATH]
                }] }, { type: PortfolioTradingConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const TradeOrdersServiceCancelOrderMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/cancel",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Pending Cancel"
                }
            },
            {
                status: 200,
                body: {
                    "id": "id",
                    "rejectionReason": "rejectionReason"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradeOrdersServiceGetInstrumentOrderListMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/orders",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "cursor": "55bbeace-274e-22ec-5487-0242ac130001",
                    "hasMoreItems": true,
                    "orders": [{
                            "id": "55bbeace-274e-22ec-5487-0242ac130003",
                            "date": "2021-09-07T12:00:00.000Z",
                            "type": "Market Order",
                            "tradeDirection": "Sell",
                            "status": "Rejected",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "quantity": 10.5,
                            "totalValue": {
                                "value": 13160.6,
                                "currency": "USD"
                            }
                        }, {
                            "id": "25bbeace-274e-22ec-5487-0242ac130003",
                            "date": "2021-09-07T12:00:00.000Z",
                            "type": "Market Order",
                            "tradeDirection": "Buy",
                            "status": "Filled",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "totalValue": {
                                "value": 13095.1,
                                "currency": "USD"
                            },
                            "quantity": 10.5
                        }, {
                            "id": "55bbeace-274e-22ec-5487-0242ac130004",
                            "date": "2022-02-15T12:00:00.000Z",
                            "type": "Limit Order",
                            "tradeDirection": "Buy",
                            "status": "Partially Filled",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "totalValue": {
                                "value": 13095.1,
                                "currency": "USD"
                            },
                            "quantity": 10
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradeOrdersServiceGetOrderMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/orders/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "date": "2021-09-07T12:00:00.000Z",
                    "type": "Market Order",
                    "tradeDirection": "Buy",
                    "status": "Filled",
                    "instrument": {
                        "id": "24aaeace-274e-22ec-5487-0242ac130003",
                        "name": "Apple",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/24aaeace-274e-22ec-5487-0242ac130003/icons"
                    },
                    "portfolio": {
                        "id": "66bbeace-274e-55ec-5487-0242ac130008",
                        "name": "Trading portfolio 2",
                        "iban": "NL79RABO5373380477",
                        "alias": "My second portfolio to trade"
                    },
                    "value": {
                        "value": 13095.1,
                        "currency": "USD"
                    },
                    "quantity": 10.5,
                    "totalValue": {
                        "value": 13160.6,
                        "currency": "USD"
                    },
                    "commissionFee": {
                        "value": 65.5,
                        "currency": "USD"
                    },
                    "transactionId": "817c6362-0fee-11ec-82a8-0242ac130003"
                }
            },
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "date": "2021-09-07T12:00:00.000Z",
                    "type": "Market Order",
                    "tradeDirection": "Buy",
                    "status": "Rejected",
                    "instrument": {
                        "id": "68bbeace-423e-11ec-9621-0242ac130002",
                        "name": "Apple",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                    },
                    "portfolio": {
                        "id": "72ba1654-274e-11ec-9621-0242ac130002",
                        "name": "Trading portfolio 2",
                        "iban": "NL79RABO5373380477",
                        "alias": "My second portfolio to trade"
                    },
                    "value": {
                        "value": 13095.1,
                        "currency": "USD"
                    },
                    "quantity": 10.5,
                    "totalValue": {
                        "value": 13160.6,
                        "currency": "USD"
                    },
                    "commissionFee": {
                        "value": 65.5,
                        "currency": "USD"
                    },
                    "rejectedReason": "some reason"
                }
            },
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130004",
                    "date": "2021-02-15T12:00:00.000Z",
                    "type": "Limit Order",
                    "tradeDirection": "Buy",
                    "status": "Partially Filled",
                    "instrument": {
                        "id": "24aaeace-274e-22ec-5487-0242ac130003",
                        "name": "Apple",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/24aaeace-274e-22ec-5487-0242ac130003/icons"
                    },
                    "portfolio": {
                        "id": "66bbeace-274e-55ec-5487-0242ac130008",
                        "name": "Trading portfolio 2",
                        "iban": "NL79RABO5373380477",
                        "alias": "My second portfolio to trade"
                    },
                    "value": {
                        "value": 13095.1,
                        "currency": "USD"
                    },
                    "quantity": 10.5,
                    "totalValue": {
                        "value": 13160.6,
                        "currency": "USD"
                    },
                    "commissionFee": {
                        "value": 65.5,
                        "currency": "USD"
                    },
                    "partiallyQuantity": 5,
                    "limitPrice": {
                        "value": 1015.0,
                        "currency": "USD"
                    },
                    "partiallyOrderDetails": [{
                            "quantity": 2,
                            "value": {
                                "value": 2201.16,
                                "currency": "USD"
                            },
                            "totalValue": {
                                "value": 2211.56,
                                "currency": "USD"
                            },
                            "commissionFee": {
                                "value": 10.5,
                                "currency": "USD"
                            },
                            "instrumentPrice": {
                                "value": 1010.58,
                                "currency": "USD"
                            },
                            "date": "2022-02-14T12:00:00.000Z"
                        }, {
                            "quantity": 3,
                            "value": {
                                "value": 3037.74,
                                "currency": "USD"
                            },
                            "totalValue": {
                                "value": 3050.24,
                                "currency": "USD"
                            },
                            "commissionFee": {
                                "value": 12.5,
                                "currency": "USD"
                            },
                            "instrumentPrice": {
                                "value": 1012.58,
                                "currency": "USD"
                            },
                            "date": "2022-02-14T15:00:00.000Z"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradeOrdersServiceGetOrderListMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/orders",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "cursor": "55bbeace-274e-22ec-5487-0242ac130001",
                    "hasMoreItems": true,
                    "orders": [{
                            "id": "55bbeace-274e-22ec-5487-0242ac130003",
                            "date": "2021-09-07T12:00:00.000Z",
                            "type": "Market Order",
                            "tradeDirection": "Sell",
                            "status": "Rejected",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "quantity": 10.5,
                            "totalValue": {
                                "value": 13160.6,
                                "currency": "USD"
                            }
                        }, {
                            "id": "25bbeace-274e-22ec-5487-0242ac130003",
                            "date": "2021-09-07T12:00:00.000Z",
                            "type": "Market Order",
                            "tradeDirection": "Buy",
                            "status": "Filled",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "totalValue": {
                                "value": 13095.1,
                                "currency": "USD"
                            },
                            "quantity": 10.5
                        }, {
                            "id": "55bbeace-274e-22ec-5487-0242ac130004",
                            "date": "2022-02-15T12:00:00.000Z",
                            "type": "Limit Order",
                            "tradeDirection": "Buy",
                            "status": "Partially Filled",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "totalValue": {
                                "value": 13095.1,
                                "currency": "USD"
                            },
                            "quantity": 10
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "cursor": "cursor",
                    "orders": [{
                            "date": "2000-01-23T04:56:07.000+00:00",
                            "totalValue": {
                                "amount": 0.8008281904610115,
                                "currency": "currency"
                            },
                            "quantity": 0.8008281904610115,
                            "instrument": {
                                "ticker": "ticker",
                                "price": {
                                    "amount": 0.8008281904610115,
                                    "currency": "currency"
                                },
                                "name": "name",
                                "exchange": "exchange",
                                "id": "id",
                                "iconUrl": "iconUrl"
                            },
                            "id": "id"
                        }, {
                            "date": "2000-01-23T04:56:07.000+00:00",
                            "totalValue": {
                                "amount": 0.8008281904610115,
                                "currency": "currency"
                            },
                            "quantity": 0.8008281904610115,
                            "instrument": {
                                "ticker": "ticker",
                                "price": {
                                    "amount": 0.8008281904610115,
                                    "currency": "currency"
                                },
                                "name": "name",
                                "exchange": "exchange",
                                "id": "id",
                                "iconUrl": "iconUrl"
                            },
                            "id": "id"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradeOrdersServiceInitOrderMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/orders",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "type": "Market Order",
                    "tradeDirection": "Buy",
                    "status": "Draft",
                    "instrument": {
                        "id": "24aaeace-274e-22ec-5487-0242ac130003",
                        "name": "Apple",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                    },
                    "portfolio": {
                        "id": "66bbeace-274e-55ec-5487-0242ac130008",
                        "name": "Trading portfolio 2",
                        "alias": "My second portfolio to trade",
                        "availableBalance": {
                            "value": 6174.9,
                            "currency": "EUR"
                        }
                    },
                    "value": {
                        "value": 13095.1,
                        "currency": "USD"
                    },
                    "quantity": 10.5,
                    "totalValue": {
                        "value": 13160.6,
                        "currency": "USD"
                    },
                    "commissionFee": {
                        "value": 65.5,
                        "currency": "USD"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradeOrdersServicePlaceOrderMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/place",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Pending"
                }
            },
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Rejected",
                    "rejectionReason": "rejectionReason"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradeOrdersServiceStatusOrderMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/status",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Pending"
                }
            },
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Rejected",
                    "rejectionReason": "rejectionReason"
                }
            },
            {
                status: 200,
                body: {
                    "id": "id",
                    "rejectionReason": "rejectionReason"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradeOrdersServiceMocksProvider = createMocks([
    {
        urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/cancel",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Pending Cancel"
                }
            },
            {
                status: 200,
                body: {
                    "id": "id",
                    "rejectionReason": "rejectionReason"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/orders",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "cursor": "55bbeace-274e-22ec-5487-0242ac130001",
                    "hasMoreItems": true,
                    "orders": [{
                            "id": "55bbeace-274e-22ec-5487-0242ac130003",
                            "date": "2021-09-07T12:00:00.000Z",
                            "type": "Market Order",
                            "tradeDirection": "Sell",
                            "status": "Rejected",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "quantity": 10.5,
                            "totalValue": {
                                "value": 13160.6,
                                "currency": "USD"
                            }
                        }, {
                            "id": "25bbeace-274e-22ec-5487-0242ac130003",
                            "date": "2021-09-07T12:00:00.000Z",
                            "type": "Market Order",
                            "tradeDirection": "Buy",
                            "status": "Filled",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "totalValue": {
                                "value": 13095.1,
                                "currency": "USD"
                            },
                            "quantity": 10.5
                        }, {
                            "id": "55bbeace-274e-22ec-5487-0242ac130004",
                            "date": "2022-02-15T12:00:00.000Z",
                            "type": "Limit Order",
                            "tradeDirection": "Buy",
                            "status": "Partially Filled",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "totalValue": {
                                "value": 13095.1,
                                "currency": "USD"
                            },
                            "quantity": 10
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/orders/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "date": "2021-09-07T12:00:00.000Z",
                    "type": "Market Order",
                    "tradeDirection": "Buy",
                    "status": "Filled",
                    "instrument": {
                        "id": "24aaeace-274e-22ec-5487-0242ac130003",
                        "name": "Apple",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/24aaeace-274e-22ec-5487-0242ac130003/icons"
                    },
                    "portfolio": {
                        "id": "66bbeace-274e-55ec-5487-0242ac130008",
                        "name": "Trading portfolio 2",
                        "iban": "NL79RABO5373380477",
                        "alias": "My second portfolio to trade"
                    },
                    "value": {
                        "value": 13095.1,
                        "currency": "USD"
                    },
                    "quantity": 10.5,
                    "totalValue": {
                        "value": 13160.6,
                        "currency": "USD"
                    },
                    "commissionFee": {
                        "value": 65.5,
                        "currency": "USD"
                    },
                    "transactionId": "817c6362-0fee-11ec-82a8-0242ac130003"
                }
            },
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "date": "2021-09-07T12:00:00.000Z",
                    "type": "Market Order",
                    "tradeDirection": "Buy",
                    "status": "Rejected",
                    "instrument": {
                        "id": "68bbeace-423e-11ec-9621-0242ac130002",
                        "name": "Apple",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                    },
                    "portfolio": {
                        "id": "72ba1654-274e-11ec-9621-0242ac130002",
                        "name": "Trading portfolio 2",
                        "iban": "NL79RABO5373380477",
                        "alias": "My second portfolio to trade"
                    },
                    "value": {
                        "value": 13095.1,
                        "currency": "USD"
                    },
                    "quantity": 10.5,
                    "totalValue": {
                        "value": 13160.6,
                        "currency": "USD"
                    },
                    "commissionFee": {
                        "value": 65.5,
                        "currency": "USD"
                    },
                    "rejectedReason": "some reason"
                }
            },
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130004",
                    "date": "2021-02-15T12:00:00.000Z",
                    "type": "Limit Order",
                    "tradeDirection": "Buy",
                    "status": "Partially Filled",
                    "instrument": {
                        "id": "24aaeace-274e-22ec-5487-0242ac130003",
                        "name": "Apple",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/24aaeace-274e-22ec-5487-0242ac130003/icons"
                    },
                    "portfolio": {
                        "id": "66bbeace-274e-55ec-5487-0242ac130008",
                        "name": "Trading portfolio 2",
                        "iban": "NL79RABO5373380477",
                        "alias": "My second portfolio to trade"
                    },
                    "value": {
                        "value": 13095.1,
                        "currency": "USD"
                    },
                    "quantity": 10.5,
                    "totalValue": {
                        "value": 13160.6,
                        "currency": "USD"
                    },
                    "commissionFee": {
                        "value": 65.5,
                        "currency": "USD"
                    },
                    "partiallyQuantity": 5,
                    "limitPrice": {
                        "value": 1015.0,
                        "currency": "USD"
                    },
                    "partiallyOrderDetails": [{
                            "quantity": 2,
                            "value": {
                                "value": 2201.16,
                                "currency": "USD"
                            },
                            "totalValue": {
                                "value": 2211.56,
                                "currency": "USD"
                            },
                            "commissionFee": {
                                "value": 10.5,
                                "currency": "USD"
                            },
                            "instrumentPrice": {
                                "value": 1010.58,
                                "currency": "USD"
                            },
                            "date": "2022-02-14T12:00:00.000Z"
                        }, {
                            "quantity": 3,
                            "value": {
                                "value": 3037.74,
                                "currency": "USD"
                            },
                            "totalValue": {
                                "value": 3050.24,
                                "currency": "USD"
                            },
                            "commissionFee": {
                                "value": 12.5,
                                "currency": "USD"
                            },
                            "instrumentPrice": {
                                "value": 1012.58,
                                "currency": "USD"
                            },
                            "date": "2022-02-14T15:00:00.000Z"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/orders",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "cursor": "55bbeace-274e-22ec-5487-0242ac130001",
                    "hasMoreItems": true,
                    "orders": [{
                            "id": "55bbeace-274e-22ec-5487-0242ac130003",
                            "date": "2021-09-07T12:00:00.000Z",
                            "type": "Market Order",
                            "tradeDirection": "Sell",
                            "status": "Rejected",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "quantity": 10.5,
                            "totalValue": {
                                "value": 13160.6,
                                "currency": "USD"
                            }
                        }, {
                            "id": "25bbeace-274e-22ec-5487-0242ac130003",
                            "date": "2021-09-07T12:00:00.000Z",
                            "type": "Market Order",
                            "tradeDirection": "Buy",
                            "status": "Filled",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "totalValue": {
                                "value": 13095.1,
                                "currency": "USD"
                            },
                            "quantity": 10.5
                        }, {
                            "id": "55bbeace-274e-22ec-5487-0242ac130004",
                            "date": "2022-02-15T12:00:00.000Z",
                            "type": "Limit Order",
                            "tradeDirection": "Buy",
                            "status": "Partially Filled",
                            "instrument": {
                                "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 1247.15,
                                    "currency": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                            },
                            "totalValue": {
                                "value": 13095.1,
                                "currency": "USD"
                            },
                            "quantity": 10
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "cursor": "cursor",
                    "orders": [{
                            "date": "2000-01-23T04:56:07.000+00:00",
                            "totalValue": {
                                "amount": 0.8008281904610115,
                                "currency": "currency"
                            },
                            "quantity": 0.8008281904610115,
                            "instrument": {
                                "ticker": "ticker",
                                "price": {
                                    "amount": 0.8008281904610115,
                                    "currency": "currency"
                                },
                                "name": "name",
                                "exchange": "exchange",
                                "id": "id",
                                "iconUrl": "iconUrl"
                            },
                            "id": "id"
                        }, {
                            "date": "2000-01-23T04:56:07.000+00:00",
                            "totalValue": {
                                "amount": 0.8008281904610115,
                                "currency": "currency"
                            },
                            "quantity": 0.8008281904610115,
                            "instrument": {
                                "ticker": "ticker",
                                "price": {
                                    "amount": 0.8008281904610115,
                                    "currency": "currency"
                                },
                                "name": "name",
                                "exchange": "exchange",
                                "id": "id",
                                "iconUrl": "iconUrl"
                            },
                            "id": "id"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/orders",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "type": "Market Order",
                    "tradeDirection": "Buy",
                    "status": "Draft",
                    "instrument": {
                        "id": "24aaeace-274e-22ec-5487-0242ac130003",
                        "name": "Apple",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                    },
                    "portfolio": {
                        "id": "66bbeace-274e-55ec-5487-0242ac130008",
                        "name": "Trading portfolio 2",
                        "alias": "My second portfolio to trade",
                        "availableBalance": {
                            "value": 6174.9,
                            "currency": "EUR"
                        }
                    },
                    "value": {
                        "value": 13095.1,
                        "currency": "USD"
                    },
                    "quantity": 10.5,
                    "totalValue": {
                        "value": 13160.6,
                        "currency": "USD"
                    },
                    "commissionFee": {
                        "value": 65.5,
                        "currency": "USD"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/place",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Pending"
                }
            },
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Rejected",
                    "rejectionReason": "rejectionReason"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/status",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Pending"
                }
            },
            {
                status: 200,
                body: {
                    "id": "55bbeace-274e-22ec-5487-0242ac130003",
                    "status": "Rejected",
                    "rejectionReason": "rejectionReason"
                }
            },
            {
                status: 200,
                body: {
                    "id": "id",
                    "rejectionReason": "rejectionReason"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class TradingInstrumentsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/api/v1';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PortfolioTradingConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    addToFavorites(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addToFavorites.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/favorite`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addToFavoritesUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addToFavorites.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/favorite`;
    }
    getInstrument(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstrument.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getInstrumentUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstrument.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}`;
    }
    getInstrumentHistoryPrices(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstrumentHistoryPrices.');
        }
        const _fromDate = requestParameters["fromDate"];
        if (_fromDate === null || _fromDate === undefined) {
            throw new Error('Required parameter fromDate was null or undefined when calling getInstrumentHistoryPrices.');
        }
        const _toDate = requestParameters["toDate"];
        if (_toDate === null || _toDate === undefined) {
            throw new Error('Required parameter toDate was null or undefined when calling getInstrumentHistoryPrices.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/history-prices`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getInstrumentHistoryPricesUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInstrumentHistoryPrices.');
        }
        const _fromDate = requestParameters["fromDate"];
        if (_fromDate === null || _fromDate === undefined) {
            throw new Error('Required parameter fromDate was null or undefined when calling getInstrumentHistoryPrices.');
        }
        const _toDate = requestParameters["toDate"];
        if (_toDate === null || _toDate === undefined) {
            throw new Error('Required parameter toDate was null or undefined when calling getInstrumentHistoryPrices.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/history-prices${queryString ? `?${queryString}` : ''}`;
    }
    getInstruments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _search = requestParameters["search"];
        const _cursor = requestParameters["cursor"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _isFavorite = requestParameters["isFavorite"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_search !== undefined && _search !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_isFavorite !== undefined && _isFavorite !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _isFavorite, 'isFavorite');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/instruments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getInstrumentsUrl(requestParameters) {
        const _search = requestParameters["search"];
        const _cursor = requestParameters["cursor"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _isFavorite = requestParameters["isFavorite"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_search !== undefined && _search !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_isFavorite !== undefined && _isFavorite !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _isFavorite, 'isFavorite');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/trading/instruments${queryString ? `?${queryString}` : ''}`;
    }
    getPortfoliosByInstrument(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPortfoliosByInstrument.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/portfolios`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPortfoliosByInstrumentUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPortfoliosByInstrument.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/portfolios`;
    }
    gutInstrumentIcon(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gutInstrumentIcon.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'image/png',
                'image/jpeg',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/icons`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    gutInstrumentIconUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gutInstrumentIcon.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/icons`;
    }
    removeFromFavorites(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling removeFromFavorites.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/favorite`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    removeFromFavoritesUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling removeFromFavorites.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/instruments/${encodeURIComponent(String(_id))}/favorite`;
    }
}
TradingInstrumentsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradingInstrumentsService, deps: [{ token: i1.HttpClient }, { token: PORTFOLIO_TRADING_BASE_PATH, optional: true }, { token: PortfolioTradingConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TradingInstrumentsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradingInstrumentsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradingInstrumentsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PORTFOLIO_TRADING_BASE_PATH]
                }] }, { type: PortfolioTradingConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const TradingInstrumentsServiceAddToFavoritesMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/favorite",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingInstrumentsServiceGetInstrumentMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                    "name": "Apple",
                    "favorite": true,
                    "country": "USA",
                    "ticker": "AAPL",
                    "exchange": "NASDAQ",
                    "assetClassName": "Equity",
                    "subAssetClassName": "Tech Sector",
                    "code": "US0378331005",
                    "price": {
                        "value": 1247.15,
                        "currency": "USD"
                    },
                    "buyPrice": {
                        "value": 1247.15,
                        "currency": "USD"
                    },
                    "sellPrice": {
                        "value": 1249.15,
                        "currency": "USD"
                    },
                    "pricePerformance": 7.81,
                    "pricePerformanceAbs": {
                        "amount": 1.48,
                        "currencyCode": "USD"
                    },
                    "canBuy": true,
                    "canSell": false,
                    "about": {
                        "about": "about",
                        "address": "address",
                        "phoneNumber": "phoneNumber",
                        "link": "link"
                    },
                    "holdings": {
                        "totalHoldings": {
                            "quantity": 100.8,
                            "valuation": {
                                "amount": 1245.45,
                                "currency": "USD"
                            },
                            "buyPrice": {
                                "amount": 4245.45,
                                "currency": "USD"
                            },
                            "transactionsNumber": 111,
                            "unrealizedPL": {
                                "amount": 245.45,
                                "currency": "USD"
                            }
                        },
                        "holdingsPerPortfolio": [{
                                "portfolio": {
                                    "id": "68bbeace-274e-11ec-9621-0242ac130002",
                                    "name": "Trading portfolio",
                                    "iban": "NL79RABO5373380466",
                                    "alias": "My portfolio to trade"
                                },
                                "holdings": {
                                    "quantity": 40.8,
                                    "valuation": {
                                        "amount": 245.0,
                                        "currency": "USD"
                                    },
                                    "transactionsNumber": 89,
                                    "unrealizedPL": {
                                        "amount": 245.45,
                                        "currency": "USD"
                                    }
                                }
                            }, {
                                "portfolio": {
                                    "id": "72ba1654-274e-11ec-9621-0242ac130002",
                                    "name": "Trading portfolio 2",
                                    "iban": "NL79RABO5373380477",
                                    "alias": "My second portfolio to trade"
                                },
                                "holdings": {
                                    "quantity": 60.8,
                                    "valuation": {
                                        "amount": 1000.45,
                                        "currency": "USD"
                                    },
                                    "transactionsNumber": 22,
                                    "unrealizedPL": {
                                        "amount": 245.45,
                                        "currency": "USD"
                                    }
                                }
                            }]
                    },
                    "keyStatistics": {
                        "exchangeRate": 1.21,
                        "changeInNetAssetValue": 7.81,
                        "fundStatus": "open-ended fund",
                        "totalAssets": 134.3,
                        "trailingTwelveMonthsYield": 1.4,
                        "oneYearReturn": 68.97,
                        "effectiveDuration": 4.51,
                        "portfolioAssetsAllocation": "Equity",
                        "turnover": 30,
                        "creditRating": "AAA",
                        "priceToEarningsRatio": 37.59,
                        "estPriceToEarningsRatio": 31.06,
                        "priceToEarningsToGrowthRatio": 3.09,
                        "sharesOutstanding": 17.002,
                        "priceToBookRatio": 32.07,
                        "earningsPerShare": 1.39,
                        "dividendYield": 0.66,
                        "lastDividendReported": 0.2,
                        "nextEarningsAnnouncement": "2021-01-26",
                        "coupon": 5.63,
                        "maturity": "2028-01-04",
                        "yieldToMaturity": 0,
                        "duration": 7.63,
                        "couponFrequency": "annually",
                        "unrealizedPLPct": 4.14,
                        "unrealizedPL": 4.14,
                        "accruedInterestOnBond": 4.14,
                        "additionalKeyStatistics": {
                            "purchasePrice": "118.34",
                            "totalAssets": "50",
                            "coupon": "false"
                        }
                    },
                    "additions": {
                        "someKey": "someValue"
                    },
                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingInstrumentsServiceGetInstrumentHistoryPricesMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/history-prices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "chartData": [{
                            "date": "2020-01-01",
                            "price": {
                                "amount": 125.01,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-02-01",
                            "price": {
                                "amount": 129.04,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-03-01",
                            "price": {
                                "amount": 134.18,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-04-01",
                            "price": {
                                "amount": 131.4,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-05-01",
                            "price": {
                                "amount": 120.88,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-06-01",
                            "price": {
                                "amount": 112.82,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-07-01",
                            "price": {
                                "amount": 115.54,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-08-01",
                            "price": {
                                "amount": 110.34,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-09-01",
                            "price": {
                                "amount": 106.84,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-10-01",
                            "price": {
                                "amount": 108.22,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-11-01",
                            "price": {
                                "amount": 116.5,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-12-01",
                            "price": {
                                "amount": 114.97,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-01-01",
                            "price": {
                                "amount": 124.4,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-02-01",
                            "price": {
                                "amount": 120.71,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-03-01",
                            "price": {
                                "amount": 116.6,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-04-01",
                            "price": {
                                "amount": 111.2,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-05-01",
                            "price": {
                                "amount": 115.32,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-06-01",
                            "price": {
                                "amount": 108.77,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-07-01",
                            "price": {
                                "amount": 114.95,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-08-01",
                            "price": {
                                "amount": 119.03,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-09-01",
                            "price": {
                                "amount": 118.69,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-10-01",
                            "price": {
                                "amount": 116.32,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-11-01",
                            "price": {
                                "amount": 115.97,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-12-01",
                            "price": {
                                "amount": 119.49,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-01-01",
                            "price": {
                                "amount": 118.64,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-02-01",
                            "price": {
                                "amount": 113.85,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-03-01",
                            "price": {
                                "amount": 115.17,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-04-01",
                            "price": {
                                "amount": 116.03,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-05-01",
                            "price": {
                                "amount": 116.59,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-06-01",
                            "price": {
                                "amount": 119.05,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-07-01",
                            "price": {
                                "amount": 122.72,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-08-01",
                            "price": {
                                "amount": 123.08,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-09-01",
                            "price": {
                                "amount": 122.94,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-10-01",
                            "price": {
                                "amount": 122.25,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-11-01",
                            "price": {
                                "amount": 123.75,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-12-01",
                            "price": {
                                "amount": 124.3,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingInstrumentsServiceGetInstrumentsMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/instruments",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "instruments": [{
                            "id": "117c6345-0fee-11ec-82a8-0242ac130003",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 147.15,
                                "currency": "USD"
                            },
                            "pricePerformance": 7.81,
                            "pricePerformanceAbs": {
                                "amount": 1.48,
                                "currencyCode": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/117c6345-0fee-11ec-82a8-0242ac130003/icons"
                        }, {
                            "id": "17bbeace-274e-22ec-9621-0242ac130003",
                            "name": "Tesla",
                            "instrumentNameLong": "Tesla",
                            "ticker": "TSLA",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 127.15,
                                "currency": "USD"
                            },
                            "pricePerformance": 6.81,
                            "pricePerformanceAbs": {
                                "amount": 1.32,
                                "currencyCode": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/17bbeace-274e-22ec-9621-0242ac130003/icons"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingInstrumentsServiceGetPortfoliosByInstrumentMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/portfolios",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "portfolios": [{
                            "name": "Trading portfolio",
                            "alias": "My portfolio to trade",
                            "portfolioId": "68bbeace-274e-11ec-9621-0242ac130002",
                            "availableBalance": {
                                "value": 5068.3,
                                "currency": "USD"
                            },
                            "iban": "NL79RABO5373380466",
                            "canSell": true
                        }, {
                            "name": "Trading portfolio 2",
                            "alias": "My second portfolio to trade",
                            "portfolioId": "72ba1654-274e-11ec-9621-0242ac130002",
                            "availableBalance": {
                                "value": 6174.9,
                                "currency": "USD"
                            },
                            "iban": "NL79RABO5373380477",
                            "canSell": false
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingInstrumentsServiceGutInstrumentIconMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/icons",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingInstrumentsServiceRemoveFromFavoritesMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/favorite",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingInstrumentsServiceMocksProvider = createMocks([
    {
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/favorite",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                    "name": "Apple",
                    "favorite": true,
                    "country": "USA",
                    "ticker": "AAPL",
                    "exchange": "NASDAQ",
                    "assetClassName": "Equity",
                    "subAssetClassName": "Tech Sector",
                    "code": "US0378331005",
                    "price": {
                        "value": 1247.15,
                        "currency": "USD"
                    },
                    "buyPrice": {
                        "value": 1247.15,
                        "currency": "USD"
                    },
                    "sellPrice": {
                        "value": 1249.15,
                        "currency": "USD"
                    },
                    "pricePerformance": 7.81,
                    "pricePerformanceAbs": {
                        "amount": 1.48,
                        "currencyCode": "USD"
                    },
                    "canBuy": true,
                    "canSell": false,
                    "about": {
                        "about": "about",
                        "address": "address",
                        "phoneNumber": "phoneNumber",
                        "link": "link"
                    },
                    "holdings": {
                        "totalHoldings": {
                            "quantity": 100.8,
                            "valuation": {
                                "amount": 1245.45,
                                "currency": "USD"
                            },
                            "buyPrice": {
                                "amount": 4245.45,
                                "currency": "USD"
                            },
                            "transactionsNumber": 111,
                            "unrealizedPL": {
                                "amount": 245.45,
                                "currency": "USD"
                            }
                        },
                        "holdingsPerPortfolio": [{
                                "portfolio": {
                                    "id": "68bbeace-274e-11ec-9621-0242ac130002",
                                    "name": "Trading portfolio",
                                    "iban": "NL79RABO5373380466",
                                    "alias": "My portfolio to trade"
                                },
                                "holdings": {
                                    "quantity": 40.8,
                                    "valuation": {
                                        "amount": 245.0,
                                        "currency": "USD"
                                    },
                                    "transactionsNumber": 89,
                                    "unrealizedPL": {
                                        "amount": 245.45,
                                        "currency": "USD"
                                    }
                                }
                            }, {
                                "portfolio": {
                                    "id": "72ba1654-274e-11ec-9621-0242ac130002",
                                    "name": "Trading portfolio 2",
                                    "iban": "NL79RABO5373380477",
                                    "alias": "My second portfolio to trade"
                                },
                                "holdings": {
                                    "quantity": 60.8,
                                    "valuation": {
                                        "amount": 1000.45,
                                        "currency": "USD"
                                    },
                                    "transactionsNumber": 22,
                                    "unrealizedPL": {
                                        "amount": 245.45,
                                        "currency": "USD"
                                    }
                                }
                            }]
                    },
                    "keyStatistics": {
                        "exchangeRate": 1.21,
                        "changeInNetAssetValue": 7.81,
                        "fundStatus": "open-ended fund",
                        "totalAssets": 134.3,
                        "trailingTwelveMonthsYield": 1.4,
                        "oneYearReturn": 68.97,
                        "effectiveDuration": 4.51,
                        "portfolioAssetsAllocation": "Equity",
                        "turnover": 30,
                        "creditRating": "AAA",
                        "priceToEarningsRatio": 37.59,
                        "estPriceToEarningsRatio": 31.06,
                        "priceToEarningsToGrowthRatio": 3.09,
                        "sharesOutstanding": 17.002,
                        "priceToBookRatio": 32.07,
                        "earningsPerShare": 1.39,
                        "dividendYield": 0.66,
                        "lastDividendReported": 0.2,
                        "nextEarningsAnnouncement": "2021-01-26",
                        "coupon": 5.63,
                        "maturity": "2028-01-04",
                        "yieldToMaturity": 0,
                        "duration": 7.63,
                        "couponFrequency": "annually",
                        "unrealizedPLPct": 4.14,
                        "unrealizedPL": 4.14,
                        "accruedInterestOnBond": 4.14,
                        "additionalKeyStatistics": {
                            "purchasePrice": "118.34",
                            "totalAssets": "50",
                            "coupon": "false"
                        }
                    },
                    "additions": {
                        "someKey": "someValue"
                    },
                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/history-prices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "chartData": [{
                            "date": "2020-01-01",
                            "price": {
                                "amount": 125.01,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-02-01",
                            "price": {
                                "amount": 129.04,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-03-01",
                            "price": {
                                "amount": 134.18,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-04-01",
                            "price": {
                                "amount": 131.4,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-05-01",
                            "price": {
                                "amount": 120.88,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-06-01",
                            "price": {
                                "amount": 112.82,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-07-01",
                            "price": {
                                "amount": 115.54,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-08-01",
                            "price": {
                                "amount": 110.34,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-09-01",
                            "price": {
                                "amount": 106.84,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-10-01",
                            "price": {
                                "amount": 108.22,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-11-01",
                            "price": {
                                "amount": 116.5,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2020-12-01",
                            "price": {
                                "amount": 114.97,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-01-01",
                            "price": {
                                "amount": 124.4,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-02-01",
                            "price": {
                                "amount": 120.71,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-03-01",
                            "price": {
                                "amount": 116.6,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-04-01",
                            "price": {
                                "amount": 111.2,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-05-01",
                            "price": {
                                "amount": 115.32,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-06-01",
                            "price": {
                                "amount": 108.77,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-07-01",
                            "price": {
                                "amount": 114.95,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-08-01",
                            "price": {
                                "amount": 119.03,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-09-01",
                            "price": {
                                "amount": 118.69,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-10-01",
                            "price": {
                                "amount": 116.32,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-11-01",
                            "price": {
                                "amount": 115.97,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2021-12-01",
                            "price": {
                                "amount": 119.49,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-01-01",
                            "price": {
                                "amount": 118.64,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-02-01",
                            "price": {
                                "amount": 113.85,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-03-01",
                            "price": {
                                "amount": 115.17,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-04-01",
                            "price": {
                                "amount": 116.03,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-05-01",
                            "price": {
                                "amount": 116.59,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-06-01",
                            "price": {
                                "amount": 119.05,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-07-01",
                            "price": {
                                "amount": 122.72,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-08-01",
                            "price": {
                                "amount": 123.08,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-09-01",
                            "price": {
                                "amount": 122.94,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-10-01",
                            "price": {
                                "amount": 122.25,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-11-01",
                            "price": {
                                "amount": 123.75,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }, {
                            "date": "2022-12-01",
                            "price": {
                                "amount": 124.3,
                                "currency": "USD"
                            },
                            "type": "Closing"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/instruments",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "instruments": [{
                            "id": "117c6345-0fee-11ec-82a8-0242ac130003",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 147.15,
                                "currency": "USD"
                            },
                            "pricePerformance": 7.81,
                            "pricePerformanceAbs": {
                                "amount": 1.48,
                                "currencyCode": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/117c6345-0fee-11ec-82a8-0242ac130003/icons"
                        }, {
                            "id": "17bbeace-274e-22ec-9621-0242ac130003",
                            "name": "Tesla",
                            "instrumentNameLong": "Tesla",
                            "ticker": "TSLA",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 127.15,
                                "currency": "USD"
                            },
                            "pricePerformance": 6.81,
                            "pricePerformanceAbs": {
                                "amount": 1.32,
                                "currencyCode": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/17bbeace-274e-22ec-9621-0242ac130003/icons"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/portfolios",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "portfolios": [{
                            "name": "Trading portfolio",
                            "alias": "My portfolio to trade",
                            "portfolioId": "68bbeace-274e-11ec-9621-0242ac130002",
                            "availableBalance": {
                                "value": 5068.3,
                                "currency": "USD"
                            },
                            "iban": "NL79RABO5373380466",
                            "canSell": true
                        }, {
                            "name": "Trading portfolio 2",
                            "alias": "My second portfolio to trade",
                            "portfolioId": "72ba1654-274e-11ec-9621-0242ac130002",
                            "availableBalance": {
                                "value": 6174.9,
                                "currency": "USD"
                            },
                            "iban": "NL79RABO5373380477",
                            "canSell": false
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/icons",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/favorite",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class TradingMarketsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/api/v1';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PortfolioTradingConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getMarket(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMarket.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/markets/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMarketUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMarket.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/markets/${encodeURIComponent(String(_id))}`;
    }
    getMarkets(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/markets`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMarketsUrl() {
        return `${this.configuration.basePath}/client-api/v1/trading/markets`;
    }
    gutMarketIcon(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gutMarketIcon.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'image/png',
                'image/jpeg',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/trading/markets/${encodeURIComponent(String(_id))}/icons`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    gutMarketIconUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gutMarketIcon.');
        }
        return `${this.configuration.basePath}/client-api/v1/trading/markets/${encodeURIComponent(String(_id))}/icons`;
    }
}
TradingMarketsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradingMarketsService, deps: [{ token: i1.HttpClient }, { token: PORTFOLIO_TRADING_BASE_PATH, optional: true }, { token: PortfolioTradingConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TradingMarketsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradingMarketsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TradingMarketsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PORTFOLIO_TRADING_BASE_PATH]
                }] }, { type: PortfolioTradingConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const TradingMarketsServiceGetMarketMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/markets/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "faa4c056-357b-11ec-8d3d-0242ac130003",
                    "name": "NASDAQ",
                    "status": "Open",
                    "iconUrl": "/client-api/v1/trading/markets/faa4c056-357b-11ec-8d3d-0242ac130003/icons"
                }
            },
            {
                status: 200,
                body: {
                    "name": "name",
                    "id": "id",
                    "iconUrl": "iconUrl"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingMarketsServiceGetMarketsMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/markets",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "faa4c056-357b-11ec-8d3d-0242ac130003",
                        "name": "NASDAQ",
                        "status": "Open",
                        "iconUrl": "/client-api/v1/trading/markets/faa4c056-357b-11ec-8d3d-0242ac130003/icons"
                    }, {
                        "id": "94b7c6fc-357c-11ec-8d3d-0242ac130003",
                        "name": "NYSE",
                        "status": "Close",
                        "iconUrl": "/client-api/v1/trading/markets/94b7c6fc-357c-11ec-8d3d-0242ac130003/icons"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingMarketsServiceGutMarketIconMocksProvider = createMocks([{
        urlPattern: "/api/v1/client-api/v1/trading/markets/{id}/icons",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const TradingMarketsServiceMocksProvider = createMocks([
    {
        urlPattern: "/api/v1/client-api/v1/trading/markets/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "faa4c056-357b-11ec-8d3d-0242ac130003",
                    "name": "NASDAQ",
                    "status": "Open",
                    "iconUrl": "/client-api/v1/trading/markets/faa4c056-357b-11ec-8d3d-0242ac130003/icons"
                }
            },
            {
                status: 200,
                body: {
                    "name": "name",
                    "id": "id",
                    "iconUrl": "iconUrl"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/markets",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "faa4c056-357b-11ec-8d3d-0242ac130003",
                        "name": "NASDAQ",
                        "status": "Open",
                        "iconUrl": "/client-api/v1/trading/markets/faa4c056-357b-11ec-8d3d-0242ac130003/icons"
                    }, {
                        "id": "94b7c6fc-357c-11ec-8d3d-0242ac130003",
                        "name": "NYSE",
                        "status": "Close",
                        "iconUrl": "/client-api/v1/trading/markets/94b7c6fc-357c-11ec-8d3d-0242ac130003/icons"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/v1/client-api/v1/trading/markets/{id}/icons",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, MarketStatusEnum, OrderStatusEnum, OrderTypeEnum, PORTFOLIO_TRADING_BASE_PATH, PortfolioTradingApiModule, PortfolioTradingConfiguration, PriceTypeEnum, TradeDirectionEnum, TradeOrdersService, TradeOrdersServiceCancelOrderMocksProvider, TradeOrdersServiceGetInstrumentOrderListMocksProvider, TradeOrdersServiceGetOrderListMocksProvider, TradeOrdersServiceGetOrderMocksProvider, TradeOrdersServiceInitOrderMocksProvider, TradeOrdersServiceMocksProvider, TradeOrdersServicePlaceOrderMocksProvider, TradeOrdersServiceStatusOrderMocksProvider, TradingInstrumentsService, TradingInstrumentsServiceAddToFavoritesMocksProvider, TradingInstrumentsServiceGetInstrumentHistoryPricesMocksProvider, TradingInstrumentsServiceGetInstrumentMocksProvider, TradingInstrumentsServiceGetInstrumentsMocksProvider, TradingInstrumentsServiceGetPortfoliosByInstrumentMocksProvider, TradingInstrumentsServiceGutInstrumentIconMocksProvider, TradingInstrumentsServiceMocksProvider, TradingInstrumentsServiceRemoveFromFavoritesMocksProvider, TradingMarketsService, TradingMarketsServiceGetMarketMocksProvider, TradingMarketsServiceGetMarketsMocksProvider, TradingMarketsServiceGutMarketIconMocksProvider, TradingMarketsServiceMocksProvider };
//# sourceMappingURL=backbase-portfolio-trading-http-ang.js.map
