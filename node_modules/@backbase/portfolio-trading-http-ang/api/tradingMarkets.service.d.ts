import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { MarketGetResponseBody } from '../model/models';
import { MarketsGetResponseBody } from '../model/models';
import { PortfolioTradingConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetMarketRequestParams {
    ["id"]: string;
}
export interface GutMarketIconRequestParams {
    ["id"]: string;
}
export declare class TradingMarketsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PortfolioTradingConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PortfolioTradingConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getMarket(requestParameters: GetMarketRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MarketGetResponseBody>;
    getMarket(requestParameters: GetMarketRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MarketGetResponseBody>>;
    getMarket(requestParameters: GetMarketRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MarketGetResponseBody>>;
    getMarketUrl(requestParameters: GetMarketRequestParams): string;
    getMarkets(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MarketsGetResponseBody>;
    getMarkets(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MarketsGetResponseBody>>;
    getMarkets(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MarketsGetResponseBody>>;
    getMarketsUrl(): string;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<Blob>;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<HttpResponse<Blob>>;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<HttpEvent<Blob>>;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<Blob>;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<HttpResponse<Blob>>;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<HttpEvent<Blob>>;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    gutMarketIcon(requestParameters: GutMarketIconRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    gutMarketIconUrl(requestParameters: GutMarketIconRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TradingMarketsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TradingMarketsService>;
}
