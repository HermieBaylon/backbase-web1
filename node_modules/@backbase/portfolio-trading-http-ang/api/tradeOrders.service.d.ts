import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrderGetResponseBody } from '../model/models';
import { OrderPostRequestBody } from '../model/models';
import { OrderPostResponseBody } from '../model/models';
import { OrderStatusResponseBody } from '../model/models';
import { OrdersGetResponseBody } from '../model/models';
import { PortfolioTradingConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CancelOrderRequestParams {
    ["id"]: string;
}
export interface GetInstrumentOrderListRequestParams {
    ["id"]: string;
    ["cursor"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetOrderRequestParams {
    ["id"]: string;
}
export interface GetOrderListRequestParams {
    ["search"]?: string;
    ["cursor"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface InitOrderRequestParams {
    ["orderPostRequestBody"]?: OrderPostRequestBody;
}
export interface PlaceOrderRequestParams {
    ["id"]: string;
}
export interface StatusOrderRequestParams {
    ["id"]: string;
}
export declare class TradeOrdersService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PortfolioTradingConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PortfolioTradingConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    cancelOrder(requestParameters: CancelOrderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<OrderStatusResponseBody>;
    cancelOrder(requestParameters: CancelOrderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<OrderStatusResponseBody>>;
    cancelOrder(requestParameters: CancelOrderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<OrderStatusResponseBody>>;
    cancelOrderUrl(requestParameters: CancelOrderRequestParams): string;
    getInstrumentOrderList(requestParameters: GetInstrumentOrderListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<OrdersGetResponseBody>;
    getInstrumentOrderList(requestParameters: GetInstrumentOrderListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<OrdersGetResponseBody>>;
    getInstrumentOrderList(requestParameters: GetInstrumentOrderListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<OrdersGetResponseBody>>;
    getInstrumentOrderListUrl(requestParameters: GetInstrumentOrderListRequestParams): string;
    getOrder(requestParameters: GetOrderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<OrderGetResponseBody>;
    getOrder(requestParameters: GetOrderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<OrderGetResponseBody>>;
    getOrder(requestParameters: GetOrderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<OrderGetResponseBody>>;
    getOrderUrl(requestParameters: GetOrderRequestParams): string;
    getOrderList(requestParameters: GetOrderListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<OrdersGetResponseBody>;
    getOrderList(requestParameters: GetOrderListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<OrdersGetResponseBody>>;
    getOrderList(requestParameters: GetOrderListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<OrdersGetResponseBody>>;
    getOrderListUrl(requestParameters: GetOrderListRequestParams): string;
    initOrder(requestParameters: InitOrderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<OrderPostResponseBody>;
    initOrder(requestParameters: InitOrderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<OrderPostResponseBody>>;
    initOrder(requestParameters: InitOrderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<OrderPostResponseBody>>;
    initOrderUrl(requestParameters: InitOrderRequestParams): string;
    placeOrder(requestParameters: PlaceOrderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<OrderStatusResponseBody>;
    placeOrder(requestParameters: PlaceOrderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<OrderStatusResponseBody>>;
    placeOrder(requestParameters: PlaceOrderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<OrderStatusResponseBody>>;
    placeOrderUrl(requestParameters: PlaceOrderRequestParams): string;
    statusOrder(requestParameters: StatusOrderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<OrderStatusResponseBody>;
    statusOrder(requestParameters: StatusOrderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<OrderStatusResponseBody>>;
    statusOrder(requestParameters: StatusOrderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<OrderStatusResponseBody>>;
    statusOrderUrl(requestParameters: StatusOrderRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TradeOrdersService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TradeOrdersService>;
}
