import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { InstrumentGetResponseBody } from '../model/models';
import { InstrumentViewChartDataGet } from '../model/models';
import { InstrumentsGetResponseBody } from '../model/models';
import { PortfoliosGetResponseBody } from '../model/models';
import { PortfolioTradingConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface AddToFavoritesRequestParams {
    ["id"]: string;
}
export interface GetInstrumentRequestParams {
    ["id"]: string;
}
export interface GetInstrumentHistoryPricesRequestParams {
    ["id"]: string;
    ["fromDate"]: string;
    ["toDate"]: string;
}
export interface GetInstrumentsRequestParams {
    ["search"]?: string;
    ["cursor"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["isFavorite"]?: boolean;
}
export interface GetPortfoliosByInstrumentRequestParams {
    ["id"]: string;
}
export interface GutInstrumentIconRequestParams {
    ["id"]: string;
}
export interface RemoveFromFavoritesRequestParams {
    ["id"]: string;
}
export declare class TradingInstrumentsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PortfolioTradingConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PortfolioTradingConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    addToFavorites(requestParameters: AddToFavoritesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    addToFavorites(requestParameters: AddToFavoritesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    addToFavorites(requestParameters: AddToFavoritesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    addToFavoritesUrl(requestParameters: AddToFavoritesRequestParams): string;
    getInstrument(requestParameters: GetInstrumentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<InstrumentGetResponseBody>;
    getInstrument(requestParameters: GetInstrumentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<InstrumentGetResponseBody>>;
    getInstrument(requestParameters: GetInstrumentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<InstrumentGetResponseBody>>;
    getInstrumentUrl(requestParameters: GetInstrumentRequestParams): string;
    getInstrumentHistoryPrices(requestParameters: GetInstrumentHistoryPricesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<InstrumentViewChartDataGet>;
    getInstrumentHistoryPrices(requestParameters: GetInstrumentHistoryPricesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<InstrumentViewChartDataGet>>;
    getInstrumentHistoryPrices(requestParameters: GetInstrumentHistoryPricesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<InstrumentViewChartDataGet>>;
    getInstrumentHistoryPricesUrl(requestParameters: GetInstrumentHistoryPricesRequestParams): string;
    getInstruments(requestParameters: GetInstrumentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<InstrumentsGetResponseBody>;
    getInstruments(requestParameters: GetInstrumentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<InstrumentsGetResponseBody>>;
    getInstruments(requestParameters: GetInstrumentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<InstrumentsGetResponseBody>>;
    getInstrumentsUrl(requestParameters: GetInstrumentsRequestParams): string;
    getPortfoliosByInstrument(requestParameters: GetPortfoliosByInstrumentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PortfoliosGetResponseBody>;
    getPortfoliosByInstrument(requestParameters: GetPortfoliosByInstrumentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PortfoliosGetResponseBody>>;
    getPortfoliosByInstrument(requestParameters: GetPortfoliosByInstrumentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PortfoliosGetResponseBody>>;
    getPortfoliosByInstrumentUrl(requestParameters: GetPortfoliosByInstrumentRequestParams): string;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<Blob>;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<HttpResponse<Blob>>;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<HttpEvent<Blob>>;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<Blob>;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<HttpResponse<Blob>>;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<HttpEvent<Blob>>;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    gutInstrumentIcon(requestParameters: GutInstrumentIconRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    gutInstrumentIconUrl(requestParameters: GutInstrumentIconRequestParams): string;
    removeFromFavorites(requestParameters: RemoveFromFavoritesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    removeFromFavorites(requestParameters: RemoveFromFavoritesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    removeFromFavorites(requestParameters: RemoveFromFavoritesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    removeFromFavoritesUrl(requestParameters: RemoveFromFavoritesRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TradingInstrumentsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TradingInstrumentsService>;
}
