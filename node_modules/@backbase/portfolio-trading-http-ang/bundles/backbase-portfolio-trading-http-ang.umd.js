(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/portfolio-trading-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["portfolio-trading-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var MarketStatusEnum = {
        Open: 'Open',
        Close: 'Close'
    };

    var OrderStatusEnum = {
        Draft: 'Draft',
        Discarded: 'Discarded',
        Sent: 'Sent',
        Failed: 'Failed',
        Pending: 'Pending',
        Filled: 'Filled',
        Rejected: 'Rejected',
        Canceled: 'Canceled',
        PartiallyFilled: 'Partially Filled',
        PendingCancel: 'Pending Cancel'
    };

    var OrderTypeEnum = {
        MarketOrder: 'Market Order',
        LimitOrder: 'Limit Order'
    };

    var PriceTypeEnum = {
        Opening: 'Opening',
        Closing: 'Closing',
        High: 'High',
        Low: 'Low'
    };

    var TradeDirectionEnum = {
        Buy: 'Buy',
        Sell: 'Sell'
    };

    var PORTFOLIO_TRADING_BASE_PATH = new i0.InjectionToken('PORTFOLIO_TRADING_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var PortfolioTradingConfiguration = /** @class */ (function () {
        function PortfolioTradingConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        PortfolioTradingConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        PortfolioTradingConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        PortfolioTradingConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        PortfolioTradingConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return PortfolioTradingConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module PortfolioTradingConfiguration');

    var PortfolioTradingApiModule = /** @class */ (function () {
        function PortfolioTradingApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('PortfolioTradingApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        PortfolioTradingApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: PortfolioTradingApiModule,
                providers: [{ provide: PortfolioTradingConfiguration, useFactory: configurationFactory }]
            };
        };
        return PortfolioTradingApiModule;
    }());
    PortfolioTradingApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PortfolioTradingApiModule, deps: [{ token: PortfolioTradingApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: PortfolioTradingConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PortfolioTradingApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PortfolioTradingApiModule });
    PortfolioTradingApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PortfolioTradingApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PortfolioTradingApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: PortfolioTradingApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: PortfolioTradingConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var TradeOrdersService = /** @class */ (function () {
        function TradeOrdersService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/api/v1';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PortfolioTradingConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        TradeOrdersService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        TradeOrdersService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        TradeOrdersService.prototype.cancelOrder = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling cancelOrder.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/trading/orders/" + encodeURIComponent(String(_id)) + "/cancel", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradeOrdersService.prototype.cancelOrderUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling cancelOrder.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/orders/" + encodeURIComponent(String(_id)) + "/cancel";
        };
        TradeOrdersService.prototype.getInstrumentOrderList = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getInstrumentOrderList.');
            }
            var _cursor = requestParameters["cursor"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/orders", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradeOrdersService.prototype.getInstrumentOrderListUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getInstrumentOrderList.');
            }
            var _cursor = requestParameters["cursor"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/orders" + (queryString ? "?" + queryString : '');
        };
        TradeOrdersService.prototype.getOrder = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getOrder.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/orders/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradeOrdersService.prototype.getOrderUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getOrder.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/orders/" + encodeURIComponent(String(_id));
        };
        TradeOrdersService.prototype.getOrderList = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _search = requestParameters["search"];
            var _cursor = requestParameters["cursor"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_search !== undefined && _search !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/orders", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradeOrdersService.prototype.getOrderListUrl = function (requestParameters) {
            var _search = requestParameters["search"];
            var _cursor = requestParameters["cursor"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_search !== undefined && _search !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/trading/orders" + (queryString ? "?" + queryString : '');
        };
        TradeOrdersService.prototype.initOrder = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _orderPostRequestBody = requestParameters["orderPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/trading/orders", _orderPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradeOrdersService.prototype.initOrderUrl = function (requestParameters) {
            var _orderPostRequestBody = requestParameters["orderPostRequestBody"];
            return this.configuration.basePath + "/client-api/v1/trading/orders";
        };
        TradeOrdersService.prototype.placeOrder = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling placeOrder.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/trading/orders/" + encodeURIComponent(String(_id)) + "/place", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradeOrdersService.prototype.placeOrderUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling placeOrder.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/orders/" + encodeURIComponent(String(_id)) + "/place";
        };
        TradeOrdersService.prototype.statusOrder = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling statusOrder.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/orders/" + encodeURIComponent(String(_id)) + "/status", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradeOrdersService.prototype.statusOrderUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling statusOrder.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/orders/" + encodeURIComponent(String(_id)) + "/status";
        };
        return TradeOrdersService;
    }());
    TradeOrdersService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradeOrdersService, deps: [{ token: i1__namespace.HttpClient }, { token: PORTFOLIO_TRADING_BASE_PATH, optional: true }, { token: PortfolioTradingConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TradeOrdersService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradeOrdersService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradeOrdersService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PORTFOLIO_TRADING_BASE_PATH]
                        }] }, { type: PortfolioTradingConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var TradeOrdersServiceCancelOrderMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/cancel",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Pending Cancel"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "id",
                        "rejectionReason": "rejectionReason"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradeOrdersServiceGetInstrumentOrderListMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/orders",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "cursor": "55bbeace-274e-22ec-5487-0242ac130001",
                        "hasMoreItems": true,
                        "orders": [{
                                "id": "55bbeace-274e-22ec-5487-0242ac130003",
                                "date": "2021-09-07T12:00:00.000Z",
                                "type": "Market Order",
                                "tradeDirection": "Sell",
                                "status": "Rejected",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "quantity": 10.5,
                                "totalValue": {
                                    "value": 13160.6,
                                    "currency": "USD"
                                }
                            }, {
                                "id": "25bbeace-274e-22ec-5487-0242ac130003",
                                "date": "2021-09-07T12:00:00.000Z",
                                "type": "Market Order",
                                "tradeDirection": "Buy",
                                "status": "Filled",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "totalValue": {
                                    "value": 13095.1,
                                    "currency": "USD"
                                },
                                "quantity": 10.5
                            }, {
                                "id": "55bbeace-274e-22ec-5487-0242ac130004",
                                "date": "2022-02-15T12:00:00.000Z",
                                "type": "Limit Order",
                                "tradeDirection": "Buy",
                                "status": "Partially Filled",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "totalValue": {
                                    "value": 13095.1,
                                    "currency": "USD"
                                },
                                "quantity": 10
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradeOrdersServiceGetOrderMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/orders/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "date": "2021-09-07T12:00:00.000Z",
                        "type": "Market Order",
                        "tradeDirection": "Buy",
                        "status": "Filled",
                        "instrument": {
                            "id": "24aaeace-274e-22ec-5487-0242ac130003",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 1247.15,
                                "currency": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/24aaeace-274e-22ec-5487-0242ac130003/icons"
                        },
                        "portfolio": {
                            "id": "66bbeace-274e-55ec-5487-0242ac130008",
                            "name": "Trading portfolio 2",
                            "iban": "NL79RABO5373380477",
                            "alias": "My second portfolio to trade"
                        },
                        "value": {
                            "value": 13095.1,
                            "currency": "USD"
                        },
                        "quantity": 10.5,
                        "totalValue": {
                            "value": 13160.6,
                            "currency": "USD"
                        },
                        "commissionFee": {
                            "value": 65.5,
                            "currency": "USD"
                        },
                        "transactionId": "817c6362-0fee-11ec-82a8-0242ac130003"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "date": "2021-09-07T12:00:00.000Z",
                        "type": "Market Order",
                        "tradeDirection": "Buy",
                        "status": "Rejected",
                        "instrument": {
                            "id": "68bbeace-423e-11ec-9621-0242ac130002",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 1247.15,
                                "currency": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                        },
                        "portfolio": {
                            "id": "72ba1654-274e-11ec-9621-0242ac130002",
                            "name": "Trading portfolio 2",
                            "iban": "NL79RABO5373380477",
                            "alias": "My second portfolio to trade"
                        },
                        "value": {
                            "value": 13095.1,
                            "currency": "USD"
                        },
                        "quantity": 10.5,
                        "totalValue": {
                            "value": 13160.6,
                            "currency": "USD"
                        },
                        "commissionFee": {
                            "value": 65.5,
                            "currency": "USD"
                        },
                        "rejectedReason": "some reason"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130004",
                        "date": "2021-02-15T12:00:00.000Z",
                        "type": "Limit Order",
                        "tradeDirection": "Buy",
                        "status": "Partially Filled",
                        "instrument": {
                            "id": "24aaeace-274e-22ec-5487-0242ac130003",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 1247.15,
                                "currency": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/24aaeace-274e-22ec-5487-0242ac130003/icons"
                        },
                        "portfolio": {
                            "id": "66bbeace-274e-55ec-5487-0242ac130008",
                            "name": "Trading portfolio 2",
                            "iban": "NL79RABO5373380477",
                            "alias": "My second portfolio to trade"
                        },
                        "value": {
                            "value": 13095.1,
                            "currency": "USD"
                        },
                        "quantity": 10.5,
                        "totalValue": {
                            "value": 13160.6,
                            "currency": "USD"
                        },
                        "commissionFee": {
                            "value": 65.5,
                            "currency": "USD"
                        },
                        "partiallyQuantity": 5,
                        "limitPrice": {
                            "value": 1015.0,
                            "currency": "USD"
                        },
                        "partiallyOrderDetails": [{
                                "quantity": 2,
                                "value": {
                                    "value": 2201.16,
                                    "currency": "USD"
                                },
                                "totalValue": {
                                    "value": 2211.56,
                                    "currency": "USD"
                                },
                                "commissionFee": {
                                    "value": 10.5,
                                    "currency": "USD"
                                },
                                "instrumentPrice": {
                                    "value": 1010.58,
                                    "currency": "USD"
                                },
                                "date": "2022-02-14T12:00:00.000Z"
                            }, {
                                "quantity": 3,
                                "value": {
                                    "value": 3037.74,
                                    "currency": "USD"
                                },
                                "totalValue": {
                                    "value": 3050.24,
                                    "currency": "USD"
                                },
                                "commissionFee": {
                                    "value": 12.5,
                                    "currency": "USD"
                                },
                                "instrumentPrice": {
                                    "value": 1012.58,
                                    "currency": "USD"
                                },
                                "date": "2022-02-14T15:00:00.000Z"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradeOrdersServiceGetOrderListMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/orders",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "cursor": "55bbeace-274e-22ec-5487-0242ac130001",
                        "hasMoreItems": true,
                        "orders": [{
                                "id": "55bbeace-274e-22ec-5487-0242ac130003",
                                "date": "2021-09-07T12:00:00.000Z",
                                "type": "Market Order",
                                "tradeDirection": "Sell",
                                "status": "Rejected",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "quantity": 10.5,
                                "totalValue": {
                                    "value": 13160.6,
                                    "currency": "USD"
                                }
                            }, {
                                "id": "25bbeace-274e-22ec-5487-0242ac130003",
                                "date": "2021-09-07T12:00:00.000Z",
                                "type": "Market Order",
                                "tradeDirection": "Buy",
                                "status": "Filled",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "totalValue": {
                                    "value": 13095.1,
                                    "currency": "USD"
                                },
                                "quantity": 10.5
                            }, {
                                "id": "55bbeace-274e-22ec-5487-0242ac130004",
                                "date": "2022-02-15T12:00:00.000Z",
                                "type": "Limit Order",
                                "tradeDirection": "Buy",
                                "status": "Partially Filled",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "totalValue": {
                                    "value": 13095.1,
                                    "currency": "USD"
                                },
                                "quantity": 10
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "cursor": "cursor",
                        "orders": [{
                                "date": "2000-01-23T04:56:07.000+00:00",
                                "totalValue": {
                                    "amount": 0.8008281904610115,
                                    "currency": "currency"
                                },
                                "quantity": 0.8008281904610115,
                                "instrument": {
                                    "ticker": "ticker",
                                    "price": {
                                        "amount": 0.8008281904610115,
                                        "currency": "currency"
                                    },
                                    "name": "name",
                                    "exchange": "exchange",
                                    "id": "id",
                                    "iconUrl": "iconUrl"
                                },
                                "id": "id"
                            }, {
                                "date": "2000-01-23T04:56:07.000+00:00",
                                "totalValue": {
                                    "amount": 0.8008281904610115,
                                    "currency": "currency"
                                },
                                "quantity": 0.8008281904610115,
                                "instrument": {
                                    "ticker": "ticker",
                                    "price": {
                                        "amount": 0.8008281904610115,
                                        "currency": "currency"
                                    },
                                    "name": "name",
                                    "exchange": "exchange",
                                    "id": "id",
                                    "iconUrl": "iconUrl"
                                },
                                "id": "id"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradeOrdersServiceInitOrderMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/orders",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "type": "Market Order",
                        "tradeDirection": "Buy",
                        "status": "Draft",
                        "instrument": {
                            "id": "24aaeace-274e-22ec-5487-0242ac130003",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 1247.15,
                                "currency": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                        },
                        "portfolio": {
                            "id": "66bbeace-274e-55ec-5487-0242ac130008",
                            "name": "Trading portfolio 2",
                            "alias": "My second portfolio to trade",
                            "availableBalance": {
                                "value": 6174.9,
                                "currency": "EUR"
                            }
                        },
                        "value": {
                            "value": 13095.1,
                            "currency": "USD"
                        },
                        "quantity": 10.5,
                        "totalValue": {
                            "value": 13160.6,
                            "currency": "USD"
                        },
                        "commissionFee": {
                            "value": 65.5,
                            "currency": "USD"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradeOrdersServicePlaceOrderMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/place",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Pending"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Rejected",
                        "rejectionReason": "rejectionReason"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradeOrdersServiceStatusOrderMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/status",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Pending"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Rejected",
                        "rejectionReason": "rejectionReason"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "id",
                        "rejectionReason": "rejectionReason"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradeOrdersServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/cancel",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Pending Cancel"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "id",
                        "rejectionReason": "rejectionReason"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/orders",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "cursor": "55bbeace-274e-22ec-5487-0242ac130001",
                        "hasMoreItems": true,
                        "orders": [{
                                "id": "55bbeace-274e-22ec-5487-0242ac130003",
                                "date": "2021-09-07T12:00:00.000Z",
                                "type": "Market Order",
                                "tradeDirection": "Sell",
                                "status": "Rejected",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "quantity": 10.5,
                                "totalValue": {
                                    "value": 13160.6,
                                    "currency": "USD"
                                }
                            }, {
                                "id": "25bbeace-274e-22ec-5487-0242ac130003",
                                "date": "2021-09-07T12:00:00.000Z",
                                "type": "Market Order",
                                "tradeDirection": "Buy",
                                "status": "Filled",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "totalValue": {
                                    "value": 13095.1,
                                    "currency": "USD"
                                },
                                "quantity": 10.5
                            }, {
                                "id": "55bbeace-274e-22ec-5487-0242ac130004",
                                "date": "2022-02-15T12:00:00.000Z",
                                "type": "Limit Order",
                                "tradeDirection": "Buy",
                                "status": "Partially Filled",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "totalValue": {
                                    "value": 13095.1,
                                    "currency": "USD"
                                },
                                "quantity": 10
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/orders/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "date": "2021-09-07T12:00:00.000Z",
                        "type": "Market Order",
                        "tradeDirection": "Buy",
                        "status": "Filled",
                        "instrument": {
                            "id": "24aaeace-274e-22ec-5487-0242ac130003",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 1247.15,
                                "currency": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/24aaeace-274e-22ec-5487-0242ac130003/icons"
                        },
                        "portfolio": {
                            "id": "66bbeace-274e-55ec-5487-0242ac130008",
                            "name": "Trading portfolio 2",
                            "iban": "NL79RABO5373380477",
                            "alias": "My second portfolio to trade"
                        },
                        "value": {
                            "value": 13095.1,
                            "currency": "USD"
                        },
                        "quantity": 10.5,
                        "totalValue": {
                            "value": 13160.6,
                            "currency": "USD"
                        },
                        "commissionFee": {
                            "value": 65.5,
                            "currency": "USD"
                        },
                        "transactionId": "817c6362-0fee-11ec-82a8-0242ac130003"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "date": "2021-09-07T12:00:00.000Z",
                        "type": "Market Order",
                        "tradeDirection": "Buy",
                        "status": "Rejected",
                        "instrument": {
                            "id": "68bbeace-423e-11ec-9621-0242ac130002",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 1247.15,
                                "currency": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                        },
                        "portfolio": {
                            "id": "72ba1654-274e-11ec-9621-0242ac130002",
                            "name": "Trading portfolio 2",
                            "iban": "NL79RABO5373380477",
                            "alias": "My second portfolio to trade"
                        },
                        "value": {
                            "value": 13095.1,
                            "currency": "USD"
                        },
                        "quantity": 10.5,
                        "totalValue": {
                            "value": 13160.6,
                            "currency": "USD"
                        },
                        "commissionFee": {
                            "value": 65.5,
                            "currency": "USD"
                        },
                        "rejectedReason": "some reason"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130004",
                        "date": "2021-02-15T12:00:00.000Z",
                        "type": "Limit Order",
                        "tradeDirection": "Buy",
                        "status": "Partially Filled",
                        "instrument": {
                            "id": "24aaeace-274e-22ec-5487-0242ac130003",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 1247.15,
                                "currency": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/24aaeace-274e-22ec-5487-0242ac130003/icons"
                        },
                        "portfolio": {
                            "id": "66bbeace-274e-55ec-5487-0242ac130008",
                            "name": "Trading portfolio 2",
                            "iban": "NL79RABO5373380477",
                            "alias": "My second portfolio to trade"
                        },
                        "value": {
                            "value": 13095.1,
                            "currency": "USD"
                        },
                        "quantity": 10.5,
                        "totalValue": {
                            "value": 13160.6,
                            "currency": "USD"
                        },
                        "commissionFee": {
                            "value": 65.5,
                            "currency": "USD"
                        },
                        "partiallyQuantity": 5,
                        "limitPrice": {
                            "value": 1015.0,
                            "currency": "USD"
                        },
                        "partiallyOrderDetails": [{
                                "quantity": 2,
                                "value": {
                                    "value": 2201.16,
                                    "currency": "USD"
                                },
                                "totalValue": {
                                    "value": 2211.56,
                                    "currency": "USD"
                                },
                                "commissionFee": {
                                    "value": 10.5,
                                    "currency": "USD"
                                },
                                "instrumentPrice": {
                                    "value": 1010.58,
                                    "currency": "USD"
                                },
                                "date": "2022-02-14T12:00:00.000Z"
                            }, {
                                "quantity": 3,
                                "value": {
                                    "value": 3037.74,
                                    "currency": "USD"
                                },
                                "totalValue": {
                                    "value": 3050.24,
                                    "currency": "USD"
                                },
                                "commissionFee": {
                                    "value": 12.5,
                                    "currency": "USD"
                                },
                                "instrumentPrice": {
                                    "value": 1012.58,
                                    "currency": "USD"
                                },
                                "date": "2022-02-14T15:00:00.000Z"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/orders",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "cursor": "55bbeace-274e-22ec-5487-0242ac130001",
                        "hasMoreItems": true,
                        "orders": [{
                                "id": "55bbeace-274e-22ec-5487-0242ac130003",
                                "date": "2021-09-07T12:00:00.000Z",
                                "type": "Market Order",
                                "tradeDirection": "Sell",
                                "status": "Rejected",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "quantity": 10.5,
                                "totalValue": {
                                    "value": 13160.6,
                                    "currency": "USD"
                                }
                            }, {
                                "id": "25bbeace-274e-22ec-5487-0242ac130003",
                                "date": "2021-09-07T12:00:00.000Z",
                                "type": "Market Order",
                                "tradeDirection": "Buy",
                                "status": "Filled",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "totalValue": {
                                    "value": 13095.1,
                                    "currency": "USD"
                                },
                                "quantity": 10.5
                            }, {
                                "id": "55bbeace-274e-22ec-5487-0242ac130004",
                                "date": "2022-02-15T12:00:00.000Z",
                                "type": "Limit Order",
                                "tradeDirection": "Buy",
                                "status": "Partially Filled",
                                "instrument": {
                                    "id": "68bbeace-423e-11ec-9621-0242ac130002",
                                    "name": "Apple",
                                    "ticker": "AAPL",
                                    "exchange": "NASDAQ",
                                    "price": {
                                        "value": 1247.15,
                                        "currency": "USD"
                                    },
                                    "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                                },
                                "totalValue": {
                                    "value": 13095.1,
                                    "currency": "USD"
                                },
                                "quantity": 10
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "cursor": "cursor",
                        "orders": [{
                                "date": "2000-01-23T04:56:07.000+00:00",
                                "totalValue": {
                                    "amount": 0.8008281904610115,
                                    "currency": "currency"
                                },
                                "quantity": 0.8008281904610115,
                                "instrument": {
                                    "ticker": "ticker",
                                    "price": {
                                        "amount": 0.8008281904610115,
                                        "currency": "currency"
                                    },
                                    "name": "name",
                                    "exchange": "exchange",
                                    "id": "id",
                                    "iconUrl": "iconUrl"
                                },
                                "id": "id"
                            }, {
                                "date": "2000-01-23T04:56:07.000+00:00",
                                "totalValue": {
                                    "amount": 0.8008281904610115,
                                    "currency": "currency"
                                },
                                "quantity": 0.8008281904610115,
                                "instrument": {
                                    "ticker": "ticker",
                                    "price": {
                                        "amount": 0.8008281904610115,
                                        "currency": "currency"
                                    },
                                    "name": "name",
                                    "exchange": "exchange",
                                    "id": "id",
                                    "iconUrl": "iconUrl"
                                },
                                "id": "id"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/orders",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "type": "Market Order",
                        "tradeDirection": "Buy",
                        "status": "Draft",
                        "instrument": {
                            "id": "24aaeace-274e-22ec-5487-0242ac130003",
                            "name": "Apple",
                            "ticker": "AAPL",
                            "exchange": "NASDAQ",
                            "price": {
                                "value": 1247.15,
                                "currency": "USD"
                            },
                            "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                        },
                        "portfolio": {
                            "id": "66bbeace-274e-55ec-5487-0242ac130008",
                            "name": "Trading portfolio 2",
                            "alias": "My second portfolio to trade",
                            "availableBalance": {
                                "value": 6174.9,
                                "currency": "EUR"
                            }
                        },
                        "value": {
                            "value": 13095.1,
                            "currency": "USD"
                        },
                        "quantity": 10.5,
                        "totalValue": {
                            "value": 13160.6,
                            "currency": "USD"
                        },
                        "commissionFee": {
                            "value": 65.5,
                            "currency": "USD"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/place",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Pending"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Rejected",
                        "rejectionReason": "rejectionReason"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/orders/{id}/status",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Pending"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "55bbeace-274e-22ec-5487-0242ac130003",
                        "status": "Rejected",
                        "rejectionReason": "rejectionReason"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "id",
                        "rejectionReason": "rejectionReason"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var TradingInstrumentsService = /** @class */ (function () {
        function TradingInstrumentsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/api/v1';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PortfolioTradingConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        TradingInstrumentsService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        TradingInstrumentsService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        TradingInstrumentsService.prototype.addToFavorites = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling addToFavorites.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/favorite", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingInstrumentsService.prototype.addToFavoritesUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling addToFavorites.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/favorite";
        };
        TradingInstrumentsService.prototype.getInstrument = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getInstrument.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingInstrumentsService.prototype.getInstrumentUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getInstrument.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id));
        };
        TradingInstrumentsService.prototype.getInstrumentHistoryPrices = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getInstrumentHistoryPrices.');
            }
            var _fromDate = requestParameters["fromDate"];
            if (_fromDate === null || _fromDate === undefined) {
                throw new Error('Required parameter fromDate was null or undefined when calling getInstrumentHistoryPrices.');
            }
            var _toDate = requestParameters["toDate"];
            if (_toDate === null || _toDate === undefined) {
                throw new Error('Required parameter toDate was null or undefined when calling getInstrumentHistoryPrices.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_fromDate !== undefined && _fromDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
            }
            if (_toDate !== undefined && _toDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/history-prices", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingInstrumentsService.prototype.getInstrumentHistoryPricesUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getInstrumentHistoryPrices.');
            }
            var _fromDate = requestParameters["fromDate"];
            if (_fromDate === null || _fromDate === undefined) {
                throw new Error('Required parameter fromDate was null or undefined when calling getInstrumentHistoryPrices.');
            }
            var _toDate = requestParameters["toDate"];
            if (_toDate === null || _toDate === undefined) {
                throw new Error('Required parameter toDate was null or undefined when calling getInstrumentHistoryPrices.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_fromDate !== undefined && _fromDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
            }
            if (_toDate !== undefined && _toDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/history-prices" + (queryString ? "?" + queryString : '');
        };
        TradingInstrumentsService.prototype.getInstruments = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _search = requestParameters["search"];
            var _cursor = requestParameters["cursor"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _isFavorite = requestParameters["isFavorite"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_search !== undefined && _search !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_isFavorite !== undefined && _isFavorite !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _isFavorite, 'isFavorite');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/instruments", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingInstrumentsService.prototype.getInstrumentsUrl = function (requestParameters) {
            var _search = requestParameters["search"];
            var _cursor = requestParameters["cursor"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _isFavorite = requestParameters["isFavorite"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_search !== undefined && _search !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_isFavorite !== undefined && _isFavorite !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _isFavorite, 'isFavorite');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/trading/instruments" + (queryString ? "?" + queryString : '');
        };
        TradingInstrumentsService.prototype.getPortfoliosByInstrument = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getPortfoliosByInstrument.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/portfolios", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingInstrumentsService.prototype.getPortfoliosByInstrumentUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getPortfoliosByInstrument.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/portfolios";
        };
        TradingInstrumentsService.prototype.gutInstrumentIcon = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling gutInstrumentIcon.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'image/png',
                    'image/jpeg',
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/icons", {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingInstrumentsService.prototype.gutInstrumentIconUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling gutInstrumentIcon.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/icons";
        };
        TradingInstrumentsService.prototype.removeFromFavorites = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling removeFromFavorites.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/favorite", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingInstrumentsService.prototype.removeFromFavoritesUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling removeFromFavorites.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/instruments/" + encodeURIComponent(String(_id)) + "/favorite";
        };
        return TradingInstrumentsService;
    }());
    TradingInstrumentsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradingInstrumentsService, deps: [{ token: i1__namespace.HttpClient }, { token: PORTFOLIO_TRADING_BASE_PATH, optional: true }, { token: PortfolioTradingConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TradingInstrumentsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradingInstrumentsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradingInstrumentsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PORTFOLIO_TRADING_BASE_PATH]
                        }] }, { type: PortfolioTradingConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var TradingInstrumentsServiceAddToFavoritesMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/favorite",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingInstrumentsServiceGetInstrumentMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "68bbeace-423e-11ec-9621-0242ac130002",
                        "name": "Apple",
                        "favorite": true,
                        "country": "USA",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "assetClassName": "Equity",
                        "subAssetClassName": "Tech Sector",
                        "code": "US0378331005",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "buyPrice": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "sellPrice": {
                            "value": 1249.15,
                            "currency": "USD"
                        },
                        "pricePerformance": 7.81,
                        "pricePerformanceAbs": {
                            "amount": 1.48,
                            "currencyCode": "USD"
                        },
                        "canBuy": true,
                        "canSell": false,
                        "about": {
                            "about": "about",
                            "address": "address",
                            "phoneNumber": "phoneNumber",
                            "link": "link"
                        },
                        "holdings": {
                            "totalHoldings": {
                                "quantity": 100.8,
                                "valuation": {
                                    "amount": 1245.45,
                                    "currency": "USD"
                                },
                                "buyPrice": {
                                    "amount": 4245.45,
                                    "currency": "USD"
                                },
                                "transactionsNumber": 111,
                                "unrealizedPL": {
                                    "amount": 245.45,
                                    "currency": "USD"
                                }
                            },
                            "holdingsPerPortfolio": [{
                                    "portfolio": {
                                        "id": "68bbeace-274e-11ec-9621-0242ac130002",
                                        "name": "Trading portfolio",
                                        "iban": "NL79RABO5373380466",
                                        "alias": "My portfolio to trade"
                                    },
                                    "holdings": {
                                        "quantity": 40.8,
                                        "valuation": {
                                            "amount": 245.0,
                                            "currency": "USD"
                                        },
                                        "transactionsNumber": 89,
                                        "unrealizedPL": {
                                            "amount": 245.45,
                                            "currency": "USD"
                                        }
                                    }
                                }, {
                                    "portfolio": {
                                        "id": "72ba1654-274e-11ec-9621-0242ac130002",
                                        "name": "Trading portfolio 2",
                                        "iban": "NL79RABO5373380477",
                                        "alias": "My second portfolio to trade"
                                    },
                                    "holdings": {
                                        "quantity": 60.8,
                                        "valuation": {
                                            "amount": 1000.45,
                                            "currency": "USD"
                                        },
                                        "transactionsNumber": 22,
                                        "unrealizedPL": {
                                            "amount": 245.45,
                                            "currency": "USD"
                                        }
                                    }
                                }]
                        },
                        "keyStatistics": {
                            "exchangeRate": 1.21,
                            "changeInNetAssetValue": 7.81,
                            "fundStatus": "open-ended fund",
                            "totalAssets": 134.3,
                            "trailingTwelveMonthsYield": 1.4,
                            "oneYearReturn": 68.97,
                            "effectiveDuration": 4.51,
                            "portfolioAssetsAllocation": "Equity",
                            "turnover": 30,
                            "creditRating": "AAA",
                            "priceToEarningsRatio": 37.59,
                            "estPriceToEarningsRatio": 31.06,
                            "priceToEarningsToGrowthRatio": 3.09,
                            "sharesOutstanding": 17.002,
                            "priceToBookRatio": 32.07,
                            "earningsPerShare": 1.39,
                            "dividendYield": 0.66,
                            "lastDividendReported": 0.2,
                            "nextEarningsAnnouncement": "2021-01-26",
                            "coupon": 5.63,
                            "maturity": "2028-01-04",
                            "yieldToMaturity": 0,
                            "duration": 7.63,
                            "couponFrequency": "annually",
                            "unrealizedPLPct": 4.14,
                            "unrealizedPL": 4.14,
                            "accruedInterestOnBond": 4.14,
                            "additionalKeyStatistics": {
                                "purchasePrice": "118.34",
                                "totalAssets": "50",
                                "coupon": "false"
                            }
                        },
                        "additions": {
                            "someKey": "someValue"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingInstrumentsServiceGetInstrumentHistoryPricesMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/history-prices",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "chartData": [{
                                "date": "2020-01-01",
                                "price": {
                                    "amount": 125.01,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-02-01",
                                "price": {
                                    "amount": 129.04,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-03-01",
                                "price": {
                                    "amount": 134.18,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-04-01",
                                "price": {
                                    "amount": 131.4,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-05-01",
                                "price": {
                                    "amount": 120.88,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-06-01",
                                "price": {
                                    "amount": 112.82,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-07-01",
                                "price": {
                                    "amount": 115.54,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-08-01",
                                "price": {
                                    "amount": 110.34,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-09-01",
                                "price": {
                                    "amount": 106.84,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-10-01",
                                "price": {
                                    "amount": 108.22,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-11-01",
                                "price": {
                                    "amount": 116.5,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-12-01",
                                "price": {
                                    "amount": 114.97,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-01-01",
                                "price": {
                                    "amount": 124.4,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-02-01",
                                "price": {
                                    "amount": 120.71,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-03-01",
                                "price": {
                                    "amount": 116.6,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-04-01",
                                "price": {
                                    "amount": 111.2,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-05-01",
                                "price": {
                                    "amount": 115.32,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-06-01",
                                "price": {
                                    "amount": 108.77,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-07-01",
                                "price": {
                                    "amount": 114.95,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-08-01",
                                "price": {
                                    "amount": 119.03,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-09-01",
                                "price": {
                                    "amount": 118.69,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-10-01",
                                "price": {
                                    "amount": 116.32,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-11-01",
                                "price": {
                                    "amount": 115.97,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-12-01",
                                "price": {
                                    "amount": 119.49,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-01-01",
                                "price": {
                                    "amount": 118.64,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-02-01",
                                "price": {
                                    "amount": 113.85,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-03-01",
                                "price": {
                                    "amount": 115.17,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-04-01",
                                "price": {
                                    "amount": 116.03,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-05-01",
                                "price": {
                                    "amount": 116.59,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-06-01",
                                "price": {
                                    "amount": 119.05,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-07-01",
                                "price": {
                                    "amount": 122.72,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-08-01",
                                "price": {
                                    "amount": 123.08,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-09-01",
                                "price": {
                                    "amount": 122.94,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-10-01",
                                "price": {
                                    "amount": 122.25,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-11-01",
                                "price": {
                                    "amount": 123.75,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-12-01",
                                "price": {
                                    "amount": 124.3,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingInstrumentsServiceGetInstrumentsMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/instruments",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "instruments": [{
                                "id": "117c6345-0fee-11ec-82a8-0242ac130003",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 147.15,
                                    "currency": "USD"
                                },
                                "pricePerformance": 7.81,
                                "pricePerformanceAbs": {
                                    "amount": 1.48,
                                    "currencyCode": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/117c6345-0fee-11ec-82a8-0242ac130003/icons"
                            }, {
                                "id": "17bbeace-274e-22ec-9621-0242ac130003",
                                "name": "Tesla",
                                "instrumentNameLong": "Tesla",
                                "ticker": "TSLA",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 127.15,
                                    "currency": "USD"
                                },
                                "pricePerformance": 6.81,
                                "pricePerformanceAbs": {
                                    "amount": 1.32,
                                    "currencyCode": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/17bbeace-274e-22ec-9621-0242ac130003/icons"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingInstrumentsServiceGetPortfoliosByInstrumentMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/portfolios",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "portfolios": [{
                                "name": "Trading portfolio",
                                "alias": "My portfolio to trade",
                                "portfolioId": "68bbeace-274e-11ec-9621-0242ac130002",
                                "availableBalance": {
                                    "value": 5068.3,
                                    "currency": "USD"
                                },
                                "iban": "NL79RABO5373380466",
                                "canSell": true
                            }, {
                                "name": "Trading portfolio 2",
                                "alias": "My second portfolio to trade",
                                "portfolioId": "72ba1654-274e-11ec-9621-0242ac130002",
                                "availableBalance": {
                                    "value": 6174.9,
                                    "currency": "USD"
                                },
                                "iban": "NL79RABO5373380477",
                                "canSell": false
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingInstrumentsServiceGutInstrumentIconMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/icons",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingInstrumentsServiceRemoveFromFavoritesMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/favorite",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingInstrumentsServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/favorite",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "68bbeace-423e-11ec-9621-0242ac130002",
                        "name": "Apple",
                        "favorite": true,
                        "country": "USA",
                        "ticker": "AAPL",
                        "exchange": "NASDAQ",
                        "assetClassName": "Equity",
                        "subAssetClassName": "Tech Sector",
                        "code": "US0378331005",
                        "price": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "buyPrice": {
                            "value": 1247.15,
                            "currency": "USD"
                        },
                        "sellPrice": {
                            "value": 1249.15,
                            "currency": "USD"
                        },
                        "pricePerformance": 7.81,
                        "pricePerformanceAbs": {
                            "amount": 1.48,
                            "currencyCode": "USD"
                        },
                        "canBuy": true,
                        "canSell": false,
                        "about": {
                            "about": "about",
                            "address": "address",
                            "phoneNumber": "phoneNumber",
                            "link": "link"
                        },
                        "holdings": {
                            "totalHoldings": {
                                "quantity": 100.8,
                                "valuation": {
                                    "amount": 1245.45,
                                    "currency": "USD"
                                },
                                "buyPrice": {
                                    "amount": 4245.45,
                                    "currency": "USD"
                                },
                                "transactionsNumber": 111,
                                "unrealizedPL": {
                                    "amount": 245.45,
                                    "currency": "USD"
                                }
                            },
                            "holdingsPerPortfolio": [{
                                    "portfolio": {
                                        "id": "68bbeace-274e-11ec-9621-0242ac130002",
                                        "name": "Trading portfolio",
                                        "iban": "NL79RABO5373380466",
                                        "alias": "My portfolio to trade"
                                    },
                                    "holdings": {
                                        "quantity": 40.8,
                                        "valuation": {
                                            "amount": 245.0,
                                            "currency": "USD"
                                        },
                                        "transactionsNumber": 89,
                                        "unrealizedPL": {
                                            "amount": 245.45,
                                            "currency": "USD"
                                        }
                                    }
                                }, {
                                    "portfolio": {
                                        "id": "72ba1654-274e-11ec-9621-0242ac130002",
                                        "name": "Trading portfolio 2",
                                        "iban": "NL79RABO5373380477",
                                        "alias": "My second portfolio to trade"
                                    },
                                    "holdings": {
                                        "quantity": 60.8,
                                        "valuation": {
                                            "amount": 1000.45,
                                            "currency": "USD"
                                        },
                                        "transactionsNumber": 22,
                                        "unrealizedPL": {
                                            "amount": 245.45,
                                            "currency": "USD"
                                        }
                                    }
                                }]
                        },
                        "keyStatistics": {
                            "exchangeRate": 1.21,
                            "changeInNetAssetValue": 7.81,
                            "fundStatus": "open-ended fund",
                            "totalAssets": 134.3,
                            "trailingTwelveMonthsYield": 1.4,
                            "oneYearReturn": 68.97,
                            "effectiveDuration": 4.51,
                            "portfolioAssetsAllocation": "Equity",
                            "turnover": 30,
                            "creditRating": "AAA",
                            "priceToEarningsRatio": 37.59,
                            "estPriceToEarningsRatio": 31.06,
                            "priceToEarningsToGrowthRatio": 3.09,
                            "sharesOutstanding": 17.002,
                            "priceToBookRatio": 32.07,
                            "earningsPerShare": 1.39,
                            "dividendYield": 0.66,
                            "lastDividendReported": 0.2,
                            "nextEarningsAnnouncement": "2021-01-26",
                            "coupon": 5.63,
                            "maturity": "2028-01-04",
                            "yieldToMaturity": 0,
                            "duration": 7.63,
                            "couponFrequency": "annually",
                            "unrealizedPLPct": 4.14,
                            "unrealizedPL": 4.14,
                            "accruedInterestOnBond": 4.14,
                            "additionalKeyStatistics": {
                                "purchasePrice": "118.34",
                                "totalAssets": "50",
                                "coupon": "false"
                            }
                        },
                        "additions": {
                            "someKey": "someValue"
                        },
                        "iconUrl": "/client-api/v1/trading/instruments/68bbeace-423e-11ec-9621-0242ac130002/icons"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/history-prices",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "chartData": [{
                                "date": "2020-01-01",
                                "price": {
                                    "amount": 125.01,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-02-01",
                                "price": {
                                    "amount": 129.04,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-03-01",
                                "price": {
                                    "amount": 134.18,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-04-01",
                                "price": {
                                    "amount": 131.4,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-05-01",
                                "price": {
                                    "amount": 120.88,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-06-01",
                                "price": {
                                    "amount": 112.82,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-07-01",
                                "price": {
                                    "amount": 115.54,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-08-01",
                                "price": {
                                    "amount": 110.34,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-09-01",
                                "price": {
                                    "amount": 106.84,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-10-01",
                                "price": {
                                    "amount": 108.22,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-11-01",
                                "price": {
                                    "amount": 116.5,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2020-12-01",
                                "price": {
                                    "amount": 114.97,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-01-01",
                                "price": {
                                    "amount": 124.4,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-02-01",
                                "price": {
                                    "amount": 120.71,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-03-01",
                                "price": {
                                    "amount": 116.6,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-04-01",
                                "price": {
                                    "amount": 111.2,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-05-01",
                                "price": {
                                    "amount": 115.32,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-06-01",
                                "price": {
                                    "amount": 108.77,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-07-01",
                                "price": {
                                    "amount": 114.95,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-08-01",
                                "price": {
                                    "amount": 119.03,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-09-01",
                                "price": {
                                    "amount": 118.69,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-10-01",
                                "price": {
                                    "amount": 116.32,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-11-01",
                                "price": {
                                    "amount": 115.97,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2021-12-01",
                                "price": {
                                    "amount": 119.49,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-01-01",
                                "price": {
                                    "amount": 118.64,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-02-01",
                                "price": {
                                    "amount": 113.85,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-03-01",
                                "price": {
                                    "amount": 115.17,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-04-01",
                                "price": {
                                    "amount": 116.03,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-05-01",
                                "price": {
                                    "amount": 116.59,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-06-01",
                                "price": {
                                    "amount": 119.05,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-07-01",
                                "price": {
                                    "amount": 122.72,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-08-01",
                                "price": {
                                    "amount": 123.08,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-09-01",
                                "price": {
                                    "amount": 122.94,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-10-01",
                                "price": {
                                    "amount": 122.25,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-11-01",
                                "price": {
                                    "amount": 123.75,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }, {
                                "date": "2022-12-01",
                                "price": {
                                    "amount": 124.3,
                                    "currency": "USD"
                                },
                                "type": "Closing"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/instruments",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "instruments": [{
                                "id": "117c6345-0fee-11ec-82a8-0242ac130003",
                                "name": "Apple",
                                "ticker": "AAPL",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 147.15,
                                    "currency": "USD"
                                },
                                "pricePerformance": 7.81,
                                "pricePerformanceAbs": {
                                    "amount": 1.48,
                                    "currencyCode": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/117c6345-0fee-11ec-82a8-0242ac130003/icons"
                            }, {
                                "id": "17bbeace-274e-22ec-9621-0242ac130003",
                                "name": "Tesla",
                                "instrumentNameLong": "Tesla",
                                "ticker": "TSLA",
                                "exchange": "NASDAQ",
                                "price": {
                                    "value": 127.15,
                                    "currency": "USD"
                                },
                                "pricePerformance": 6.81,
                                "pricePerformanceAbs": {
                                    "amount": 1.32,
                                    "currencyCode": "USD"
                                },
                                "iconUrl": "/client-api/v1/trading/instruments/17bbeace-274e-22ec-9621-0242ac130003/icons"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/portfolios",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "portfolios": [{
                                "name": "Trading portfolio",
                                "alias": "My portfolio to trade",
                                "portfolioId": "68bbeace-274e-11ec-9621-0242ac130002",
                                "availableBalance": {
                                    "value": 5068.3,
                                    "currency": "USD"
                                },
                                "iban": "NL79RABO5373380466",
                                "canSell": true
                            }, {
                                "name": "Trading portfolio 2",
                                "alias": "My second portfolio to trade",
                                "portfolioId": "72ba1654-274e-11ec-9621-0242ac130002",
                                "availableBalance": {
                                    "value": 6174.9,
                                    "currency": "USD"
                                },
                                "iban": "NL79RABO5373380477",
                                "canSell": false
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/icons",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/instruments/{id}/favorite",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var TradingMarketsService = /** @class */ (function () {
        function TradingMarketsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/api/v1';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PortfolioTradingConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        TradingMarketsService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        TradingMarketsService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        TradingMarketsService.prototype.getMarket = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getMarket.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/markets/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingMarketsService.prototype.getMarketUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getMarket.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/markets/" + encodeURIComponent(String(_id));
        };
        TradingMarketsService.prototype.getMarkets = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/markets", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingMarketsService.prototype.getMarketsUrl = function () {
            return this.configuration.basePath + "/client-api/v1/trading/markets";
        };
        TradingMarketsService.prototype.gutMarketIcon = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling gutMarketIcon.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'image/png',
                    'image/jpeg',
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/trading/markets/" + encodeURIComponent(String(_id)) + "/icons", {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TradingMarketsService.prototype.gutMarketIconUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling gutMarketIcon.');
            }
            return this.configuration.basePath + "/client-api/v1/trading/markets/" + encodeURIComponent(String(_id)) + "/icons";
        };
        return TradingMarketsService;
    }());
    TradingMarketsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradingMarketsService, deps: [{ token: i1__namespace.HttpClient }, { token: PORTFOLIO_TRADING_BASE_PATH, optional: true }, { token: PortfolioTradingConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TradingMarketsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradingMarketsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TradingMarketsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PORTFOLIO_TRADING_BASE_PATH]
                        }] }, { type: PortfolioTradingConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var TradingMarketsServiceGetMarketMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/markets/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "faa4c056-357b-11ec-8d3d-0242ac130003",
                        "name": "NASDAQ",
                        "status": "Open",
                        "iconUrl": "/client-api/v1/trading/markets/faa4c056-357b-11ec-8d3d-0242ac130003/icons"
                    }
                },
                {
                    status: 200,
                    body: {
                        "name": "name",
                        "id": "id",
                        "iconUrl": "iconUrl"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingMarketsServiceGetMarketsMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/markets",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "faa4c056-357b-11ec-8d3d-0242ac130003",
                            "name": "NASDAQ",
                            "status": "Open",
                            "iconUrl": "/client-api/v1/trading/markets/faa4c056-357b-11ec-8d3d-0242ac130003/icons"
                        }, {
                            "id": "94b7c6fc-357c-11ec-8d3d-0242ac130003",
                            "name": "NYSE",
                            "status": "Close",
                            "iconUrl": "/client-api/v1/trading/markets/94b7c6fc-357c-11ec-8d3d-0242ac130003/icons"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingMarketsServiceGutMarketIconMocksProvider = i2.createMocks([{
            urlPattern: "/api/v1/client-api/v1/trading/markets/{id}/icons",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var TradingMarketsServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/api/v1/client-api/v1/trading/markets/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "faa4c056-357b-11ec-8d3d-0242ac130003",
                        "name": "NASDAQ",
                        "status": "Open",
                        "iconUrl": "/client-api/v1/trading/markets/faa4c056-357b-11ec-8d3d-0242ac130003/icons"
                    }
                },
                {
                    status: 200,
                    body: {
                        "name": "name",
                        "id": "id",
                        "iconUrl": "iconUrl"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/markets",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "faa4c056-357b-11ec-8d3d-0242ac130003",
                            "name": "NASDAQ",
                            "status": "Open",
                            "iconUrl": "/client-api/v1/trading/markets/faa4c056-357b-11ec-8d3d-0242ac130003/icons"
                        }, {
                            "id": "94b7c6fc-357c-11ec-8d3d-0242ac130003",
                            "name": "NYSE",
                            "status": "Close",
                            "iconUrl": "/client-api/v1/trading/markets/94b7c6fc-357c-11ec-8d3d-0242ac130003/icons"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/v1/client-api/v1/trading/markets/{id}/icons",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.MarketStatusEnum = MarketStatusEnum;
    exports.OrderStatusEnum = OrderStatusEnum;
    exports.OrderTypeEnum = OrderTypeEnum;
    exports.PORTFOLIO_TRADING_BASE_PATH = PORTFOLIO_TRADING_BASE_PATH;
    exports.PortfolioTradingApiModule = PortfolioTradingApiModule;
    exports.PortfolioTradingConfiguration = PortfolioTradingConfiguration;
    exports.PriceTypeEnum = PriceTypeEnum;
    exports.TradeDirectionEnum = TradeDirectionEnum;
    exports.TradeOrdersService = TradeOrdersService;
    exports.TradeOrdersServiceCancelOrderMocksProvider = TradeOrdersServiceCancelOrderMocksProvider;
    exports.TradeOrdersServiceGetInstrumentOrderListMocksProvider = TradeOrdersServiceGetInstrumentOrderListMocksProvider;
    exports.TradeOrdersServiceGetOrderListMocksProvider = TradeOrdersServiceGetOrderListMocksProvider;
    exports.TradeOrdersServiceGetOrderMocksProvider = TradeOrdersServiceGetOrderMocksProvider;
    exports.TradeOrdersServiceInitOrderMocksProvider = TradeOrdersServiceInitOrderMocksProvider;
    exports.TradeOrdersServiceMocksProvider = TradeOrdersServiceMocksProvider;
    exports.TradeOrdersServicePlaceOrderMocksProvider = TradeOrdersServicePlaceOrderMocksProvider;
    exports.TradeOrdersServiceStatusOrderMocksProvider = TradeOrdersServiceStatusOrderMocksProvider;
    exports.TradingInstrumentsService = TradingInstrumentsService;
    exports.TradingInstrumentsServiceAddToFavoritesMocksProvider = TradingInstrumentsServiceAddToFavoritesMocksProvider;
    exports.TradingInstrumentsServiceGetInstrumentHistoryPricesMocksProvider = TradingInstrumentsServiceGetInstrumentHistoryPricesMocksProvider;
    exports.TradingInstrumentsServiceGetInstrumentMocksProvider = TradingInstrumentsServiceGetInstrumentMocksProvider;
    exports.TradingInstrumentsServiceGetInstrumentsMocksProvider = TradingInstrumentsServiceGetInstrumentsMocksProvider;
    exports.TradingInstrumentsServiceGetPortfoliosByInstrumentMocksProvider = TradingInstrumentsServiceGetPortfoliosByInstrumentMocksProvider;
    exports.TradingInstrumentsServiceGutInstrumentIconMocksProvider = TradingInstrumentsServiceGutInstrumentIconMocksProvider;
    exports.TradingInstrumentsServiceMocksProvider = TradingInstrumentsServiceMocksProvider;
    exports.TradingInstrumentsServiceRemoveFromFavoritesMocksProvider = TradingInstrumentsServiceRemoveFromFavoritesMocksProvider;
    exports.TradingMarketsService = TradingMarketsService;
    exports.TradingMarketsServiceGetMarketMocksProvider = TradingMarketsServiceGetMarketMocksProvider;
    exports.TradingMarketsServiceGetMarketsMocksProvider = TradingMarketsServiceGetMarketsMocksProvider;
    exports.TradingMarketsServiceGutMarketIconMocksProvider = TradingMarketsServiceGutMarketIconMocksProvider;
    exports.TradingMarketsServiceMocksProvider = TradingMarketsServiceMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-portfolio-trading-http-ang.umd.js.map
