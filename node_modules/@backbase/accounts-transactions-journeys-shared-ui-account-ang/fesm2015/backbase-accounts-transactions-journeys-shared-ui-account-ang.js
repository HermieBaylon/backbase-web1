import * as i0 from '@angular/core';
import { Pipe, NgModule, Component, ChangeDetectionStrategy, Input, EventEmitter, Output } from '@angular/core';
import * as i7 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i12 from '@backbase/product-summary-common-ang';
import { hasExternalInfo, ValidationModule, ProductSummaryCommon, DatePipeModule, FormatPipeModule } from '@backbase/product-summary-common-ang';
import * as i3 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i13 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i4 from '@backbase/ui-ang/payment-card';
import { PaymentCardModule } from '@backbase/ui-ang/payment-card';
import * as i8 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i2 from '@backbase/product-summary-ui';
import { ProductNumberModule, ArrangementStateIndicatorModule } from '@backbase/product-summary-ui';
import * as i10 from '@backbase/accounts-transactions-journeys-shared-ui-transform-ang';
import { GetDecimalsCountModule, GetValuePipeModule, ToArrayPipeModule, ToNumberPipeModule } from '@backbase/accounts-transactions-journeys-shared-ui-transform-ang';
import * as i1 from '@backbase/ui-ang/icon';

/**
 * Transforms data to payment-card info
 */
class ToPaymentCardDataPipe {
    transform(debitCard) {
        return {
            number: (debitCard === null || debitCard === void 0 ? void 0 : debitCard.number) || '',
            expirationDate: (debitCard === null || debitCard === void 0 ? void 0 : debitCard.expiryDate) ? new Date(debitCard.expiryDate) : undefined,
            name: '',
            vendor: '',
            cardName: '',
        };
    }
}
/** @nocollapse */ ToPaymentCardDataPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToPaymentCardDataPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ ToPaymentCardDataPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToPaymentCardDataPipe, name: "bbToPaymentCardData" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToPaymentCardDataPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'bbToPaymentCardData' }]
        }] });

const pipes$2 = [ToPaymentCardDataPipe];
class ToPaymentCardDataPipeModule {
}
/** @nocollapse */ ToPaymentCardDataPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToPaymentCardDataPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ToPaymentCardDataPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToPaymentCardDataPipeModule, declarations: [ToPaymentCardDataPipe], imports: [CommonModule], exports: [ToPaymentCardDataPipe] });
/** @nocollapse */ ToPaymentCardDataPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToPaymentCardDataPipeModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToPaymentCardDataPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [...pipes$2],
                    exports: [...pipes$2],
                }]
        }] });

/**
 * Verifies if account has external info
 */
class HasExternalInfoPipe {
    transform(account) {
        return account ? hasExternalInfo(account) : false;
    }
}
/** @nocollapse */ HasExternalInfoPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasExternalInfoPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ HasExternalInfoPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasExternalInfoPipe, name: "bbHasExternalInfo" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasExternalInfoPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bbHasExternalInfo',
                }]
        }] });

const pipes$1 = [HasExternalInfoPipe];
class HasExternalInfoPipeModule {
}
/** @nocollapse */ HasExternalInfoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasExternalInfoPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ HasExternalInfoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasExternalInfoPipeModule, declarations: [HasExternalInfoPipe], imports: [CommonModule], exports: [HasExternalInfoPipe] });
/** @nocollapse */ HasExternalInfoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasExternalInfoPipeModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasExternalInfoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [...pipes$1],
                    exports: [...pipes$1],
                }]
        }] });

/**
 * Casts a property to a given type
 * {{ property | bbCastAccountProperty:propertyType }}
 */
class CastAccountPropertyPipe {
    transform(property, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars
    castType) {
        return property;
    }
}
/** @nocollapse */ CastAccountPropertyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CastAccountPropertyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ CastAccountPropertyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CastAccountPropertyPipe, name: "bbCastAccountProperty" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CastAccountPropertyPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'bbCastAccountProperty' }]
        }] });

const pipes = [CastAccountPropertyPipe];
class CastAccountPropertyPipeModule {
}
/** @nocollapse */ CastAccountPropertyPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CastAccountPropertyPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ CastAccountPropertyPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CastAccountPropertyPipeModule, declarations: [CastAccountPropertyPipe], imports: [CommonModule], exports: [CastAccountPropertyPipe] });
/** @nocollapse */ CastAccountPropertyPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CastAccountPropertyPipeModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CastAccountPropertyPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [...pipes],
                    exports: [...pipes],
                }]
        }] });

class AccountInfoFrequencyComponent {
    constructor() {
        this.localisationByUnit = {
            day: $localize `:@@accounts-transactions-journeys.account-frequency.day:day(s)`,
            week: $localize `:@@accounts-transactions-journeys.account-frequency.week:week(s)`,
            month: $localize `:@@accounts-transactions-journeys.account-frequency.month:month(s)`,
            year: $localize `:@@accounts-transactions-journeys.account-frequency.year:year(s)`,
        };
    }
    get unitLabel() {
        switch (this.unit) {
            case 'D':
                return this.localisationByUnit.day;
            case 'W':
                return this.localisationByUnit.week;
            case 'M':
                return this.localisationByUnit.month;
            case 'Y':
                return this.localisationByUnit.year;
            default:
                return '';
        }
    }
}
/** @nocollapse */ AccountInfoFrequencyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoFrequencyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountInfoFrequencyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInfoFrequencyComponent, selector: "bb-account-info-frequency", inputs: { value: "value", unit: "unit" }, ngImport: i0, template: "<span *ngIf=\"value | bbIsDefined\" data-role=\"account-info-frequency\">\n  {{ value }}\n  {{ unitLabel }}\n</span>\n", directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "bbIsDefined": i12.IsDefinedPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoFrequencyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-info-frequency',
                    templateUrl: './account-info-frequency.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { value: [{
                type: Input
            }], unit: [{
                type: Input
            }] } });

const pipeModules$3 = [ValidationModule];
const components$2 = [AccountInfoFrequencyComponent];
class AccountInfoFrequencyModule {
}
/** @nocollapse */ AccountInfoFrequencyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoFrequencyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccountInfoFrequencyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoFrequencyModule, declarations: [AccountInfoFrequencyComponent], imports: [CommonModule, ValidationModule], exports: [AccountInfoFrequencyComponent, ValidationModule] });
/** @nocollapse */ AccountInfoFrequencyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoFrequencyModule, imports: [[CommonModule, ...pipeModules$3], ValidationModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoFrequencyModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...pipeModules$3],
                    declarations: [...components$2],
                    exports: [...components$2, ...pipeModules$3],
                }]
        }] });

/**
 * Account info property type
 */
var AccountInfoPropertyType;
(function (AccountInfoPropertyType) {
    AccountInfoPropertyType["ACCOUNT_NUMBER"] = "ACCOUNT_NUMBER";
    AccountInfoPropertyType["ACCOUNT_STATE"] = "ACCOUNT_STATE";
    AccountInfoPropertyType["AMOUNT"] = "AMOUNT";
    AccountInfoPropertyType["DATE"] = "DATE";
    AccountInfoPropertyType["DEBIT_CARDS"] = "DEBIT_CARDS";
    AccountInfoPropertyType["FREQUENCY"] = "FREQUENCY";
    AccountInfoPropertyType["NUMBER"] = "NUMBER";
    AccountInfoPropertyType["PERCENT"] = "PERCENT";
    AccountInfoPropertyType["RENEWAL_STATUS"] = "RENEWAL_STATUS";
    AccountInfoPropertyType["TEXT"] = "TEXT";
    AccountInfoPropertyType["UPDATE_TIME"] = "UPDATE_TIME";
})(AccountInfoPropertyType || (AccountInfoPropertyType = {}));

class AccountInfoRenewalStatusComponent {
    constructor() {
        this.isRenewalAllowed = false;
    }
}
/** @nocollapse */ AccountInfoRenewalStatusComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoRenewalStatusComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountInfoRenewalStatusComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInfoRenewalStatusComponent, selector: "bb-account-info-renewal-status", inputs: { isRenewalAllowed: "isRenewalAllowed" }, ngImport: i0, template: "<ng-container *ngIf=\"isRenewalAllowed; else noAutomaticRenewal\">\n  <span\n    data-role=\"account-info-renewal-status\"\n    i18n=\"Automatic Renewal@@product.details.term.deposit.label.autoRenewalIndicator.yes\"\n  >\n    Automatic Renewal\n  </span>\n</ng-container>\n\n<ng-template #noAutomaticRenewal>\n  <span\n    data-role=\"account-info-renewal-status\"\n    i18n=\"No Automatic Renewal@@product.details.term.deposit.label.autoRenewalIndicator.no\"\n  >\n    No Automatic Renewal\n  </span>\n</ng-template>\n", directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoRenewalStatusComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-info-renewal-status',
                    templateUrl: './account-info-renewal-status.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isRenewalAllowed: [{
                type: Input
            }] } });

class AccountInfoPropertyComponent {
    constructor() {
        this.currencyFormat = 'code';
        this.dateFormat = 'longDate';
        this.isMaskable = false;
        this.isMasked = false;
        this.masked = new EventEmitter();
        this.propertyType = AccountInfoPropertyType;
    }
}
/** @nocollapse */ AccountInfoPropertyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoPropertyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountInfoPropertyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInfoPropertyComponent, selector: "bb-account-info-property", inputs: { account: "account", property: "property", currencyFormat: "currencyFormat", dateFormat: "dateFormat", isMaskable: "isMaskable", isMasked: "isMasked" }, outputs: { masked: "masked" }, ngImport: i0, template: "<div\n  class=\"bb-account-details-item bb-stack__item bb-stack__item--fill\"\n  [attr.data-role]=\"'account-info-property-' + property?.key\"\n>\n  <div\n    *ngIf=\"property?.label\"\n    class=\"bb-block bb-block--sm bb-stack bb-stack--density-sm\"\n    [attr.data-role]=\"'account-info-property-' + property?.key + '-label'\"\n  >\n    <span class=\"bb-stack__item bb-text-bold\">\n      {{ property?.label }}\n    </span>\n    <bb-icon-ui\n      *ngIf=\"property?.tooltip\"\n      class=\"bb-stack__item bb-text-support\"\n      data-role=\"toggle-tooltip-icon\"\n      tabindex=\"0\"\n      name=\"info\"\n      size=\"sm\"\n      aria-label=\"Toggle tooltip for {{ property?.label }}\"\n      i18n-aria-label=\"Toggle tooltip icon aria label@@product-summary.account-details-property.tooltip-icon.aria-label\"\n      [bbTooltip]=\"property?.tooltip\"\n      triggers=\"focus hover\"\n    ></bb-icon-ui>\n  </div>\n\n  <div [attr.data-role]=\"'account-info-property-' + property?.key + '-value'\">\n    <ng-container [ngSwitch]=\"property?.type\">\n      <ng-container *ngSwitchCase=\"propertyType.ACCOUNT_NUMBER\">\n        <ng-container *ngTemplateOutlet=\"accountNumberValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.ACCOUNT_STATE\">\n        <ng-container *ngTemplateOutlet=\"accountStateValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.AMOUNT\">\n        <ng-container *ngTemplateOutlet=\"amountOrPercentValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.DATE\">\n        <ng-container *ngTemplateOutlet=\"dateValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.DEBIT_CARDS\">\n        <ng-container *ngTemplateOutlet=\"debitCardsValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.FREQUENCY\">\n        <ng-container *ngTemplateOutlet=\"termValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.NUMBER\">\n        <ng-container *ngTemplateOutlet=\"numberOrPercentValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.PERCENT\">\n        <ng-container *ngTemplateOutlet=\"percentValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.RENEWAL_STATUS\">\n        <ng-container *ngTemplateOutlet=\"renewalStatus\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.TEXT\">\n        <ng-container *ngTemplateOutlet=\"textValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.UPDATE_TIME\">\n        <ng-container *ngTemplateOutlet=\"updateTimeValue\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #accountNumberValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.ACCOUNT_NUMBER as valueProperty\">\n    <span aria-live=\"assertive\">\n      <bb-product-number\n        [type]=\"valueProperty.numberType\"\n        [number]=\"account | bbGetValue: valueProperty.key\"\n        [unmaskable]=\"isMaskable && !valueProperty.hideMaskIndicator && !(account | bbHasExternalInfo)\"\n        [masked]=\"isMasked\"\n        (unmask)=\"masked.emit(false)\"\n        (mask)=\"masked.emit(true)\"\n      ></bb-product-number>\n    </span>\n  </ng-container>\n</ng-template>\n\n<ng-template #accountStateValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.ACCOUNT_STATE as valueProperty\">\n    <bb-arrangement-state-indicator\n      *ngIf=\"account | bbGetValue: valueProperty.key as state\"\n      [state]=\"state\"\n      [showIcon]=\"valueProperty.showIcon || false\"\n      [showActive]=\"true\"\n    ></bb-arrangement-state-indicator>\n  </ng-container>\n</ng-template>\n\n<ng-template #amountOrPercentValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.AMOUNT as valueProperty\">\n    <ng-container *ngIf=\"account | bbGetValue: valueProperty.key | bbIsPercentValue; else amountValue\">\n      <ng-container *ngTemplateOutlet=\"percentValue\"></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #amountValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.AMOUNT as valueProperty\">\n    <bb-amount-ui\n      *ngIf=\"account | bbGetValue: valueProperty.key as amount\"\n      [amount]=\"amount\"\n      [currency]=\"valueProperty.currency || account?.currency || ''\"\n      [mapCurrency]=\"(valueProperty.currencyFormat || currencyFormat) === 'symbol'\"\n    ></bb-amount-ui>\n  </ng-container>\n</ng-template>\n\n<ng-template #dateValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.DATE as valueProperty\">\n    {{ account | bbGetValue: valueProperty.key | bbDate: valueProperty.dateFormat || dateFormat }}\n  </ng-container>\n</ng-template>\n\n<ng-template #debitCardsValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.DEBIT_CARDS as valueProperty\">\n    <div class=\"bb-stack bb-stack--density-xl bb-stack--wrap\">\n      <bb-payment-card-ui\n        class=\"bb-stack__item bb-block bb-block--md\"\n        *ngFor=\"let debitCardData of account | bbGetValue: valueProperty.key | bbToArray\"\n        [paymentCard]=\"debitCardData | bbToPaymentCardData\"\n        [paymentCardNumberFormat]=\"'cardNumber' | bbProductNumberFormat\"\n      ></bb-payment-card-ui>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #termValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.FREQUENCY as valueProperty\">\n    <bb-account-info-frequency\n      [value]=\"account | bbGetValue: valueProperty.key\"\n      [unit]=\"account | bbGetValue: valueProperty.unitKey\"\n    ></bb-account-info-frequency>\n  </ng-container>\n</ng-template>\n\n<ng-template #numberOrPercentValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.NUMBER as valueProperty\">\n    <ng-container *ngIf=\"account | bbGetValue: valueProperty.key | bbIsPercentValue; else numberValue\">\n      <ng-container *ngTemplateOutlet=\"percentValue\"></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #numberValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.NUMBER as valueProperty\">\n    <bb-amount-ui\n      *ngIf=\"account | bbGetValue: valueProperty.key | bbToNumber as amount\"\n      [amount]=\"amount\"\n      [decimalPlaces]=\"valueProperty.decimalPlaces\"\n    ></bb-amount-ui>\n  </ng-container>\n</ng-template>\n\n<ng-template #percentValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.PERCENT as valueProperty\">\n    <bb-amount-ui\n      *ngIf=\"account | bbGetValue: valueProperty.key | bbToNumber as amount\"\n      [amount]=\"amount\"\n      [showPercent]=\"true\"\n    ></bb-amount-ui>\n  </ng-container>\n</ng-template>\n\n<ng-template #renewalStatus>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.RENEWAL_STATUS as valueProperty\">\n    <bb-account-info-renewal-status\n      [isRenewalAllowed]=\"(account | bbGetValue: valueProperty.key) || false\"\n    ></bb-account-info-renewal-status>\n  </ng-container>\n</ng-template>\n\n<ng-template #textValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.TEXT as valueProperty\">\n    {{ account | bbGetValue: valueProperty.key }}\n  </ng-container>\n</ng-template>\n\n<ng-template #updateTimeValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.UPDATE_TIME as valueProperty\">\n    {{ (account | bbGetValue: valueProperty.key) || '' | bbDateUpdatedAgo: valueProperty.dateFormat || dateFormat }}\n  </ng-container>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.ProductNumberComponent, selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }, { type: i2.ArrangementStateIndicatorComponent, selector: "bb-arrangement-state-indicator", inputs: ["state", "showActive", "showIcon", "hideStateTextForMobile"] }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i4.PaymentCardComponent, selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }, { type: AccountInfoFrequencyComponent, selector: "bb-account-info-frequency", inputs: ["value", "unit"] }, { type: AccountInfoRenewalStatusComponent, selector: "bb-account-info-renewal-status", inputs: ["isRenewalAllowed"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i7.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i7.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "bbCastAccountProperty": CastAccountPropertyPipe, "bbGetValue": i10.GetValuePipe, "bbHasExternalInfo": HasExternalInfoPipe, "bbIsPercentValue": i12.IsPercentValue, "bbDate": i13.BbDatePipe, "bbToPaymentCardData": ToPaymentCardDataPipe, "bbProductNumberFormat": i12.ProductNumberFormatPipe, "bbToArray": i10.ToArrayPipe, "bbToNumber": i10.ToNumberPipe, "bbDateUpdatedAgo": i12.DateUpdatedAgoPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoPropertyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-info-property',
                    templateUrl: './account-info-property.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { account: [{
                type: Input
            }], property: [{
                type: Input
            }], currencyFormat: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], isMaskable: [{
                type: Input
            }], isMasked: [{
                type: Input
            }], masked: [{
                type: Output
            }] } });

const pipeModules$2 = [ValidationModule];
const sharedModules$1 = [ProductSummaryCommon];
const components$1 = [AccountInfoRenewalStatusComponent];
class AccountInfoRenewalStatusModule {
}
/** @nocollapse */ AccountInfoRenewalStatusModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoRenewalStatusModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccountInfoRenewalStatusModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoRenewalStatusModule, declarations: [AccountInfoRenewalStatusComponent], imports: [CommonModule, ProductSummaryCommon, ValidationModule], exports: [ProductSummaryCommon, AccountInfoRenewalStatusComponent, ValidationModule] });
/** @nocollapse */ AccountInfoRenewalStatusModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoRenewalStatusModule, imports: [[CommonModule, ...sharedModules$1, ...pipeModules$2], ProductSummaryCommon, ValidationModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoRenewalStatusModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...sharedModules$1, ...pipeModules$2],
                    declarations: [...components$1],
                    exports: [...sharedModules$1, ...components$1, ...pipeModules$2],
                }]
        }] });

const uiModules$1 = [
    AccountInfoFrequencyModule,
    AmountModule,
    ProductNumberModule,
    ArrangementStateIndicatorModule,
    TooltipModule,
    BbDatePipeModule,
    DatePipeModule,
    PaymentCardModule,
    AccountInfoRenewalStatusModule,
];
const pipeModules$1 = [
    CastAccountPropertyPipeModule,
    GetDecimalsCountModule,
    GetValuePipeModule,
    HasExternalInfoPipeModule,
    ToArrayPipeModule,
    ToPaymentCardDataPipeModule,
    ToNumberPipeModule,
];
const sharedModules = [ProductSummaryCommon, ValidationModule, FormatPipeModule];
const components = [AccountInfoPropertyComponent];
class AccountInfoPropertyModule {
}
/** @nocollapse */ AccountInfoPropertyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoPropertyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccountInfoPropertyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoPropertyModule, declarations: [AccountInfoPropertyComponent], imports: [CommonModule, AccountInfoFrequencyModule,
        AmountModule,
        ProductNumberModule,
        ArrangementStateIndicatorModule,
        TooltipModule,
        BbDatePipeModule,
        DatePipeModule,
        PaymentCardModule,
        AccountInfoRenewalStatusModule, ProductSummaryCommon, ValidationModule, FormatPipeModule, CastAccountPropertyPipeModule,
        GetDecimalsCountModule,
        GetValuePipeModule,
        HasExternalInfoPipeModule,
        ToArrayPipeModule,
        ToPaymentCardDataPipeModule,
        ToNumberPipeModule], exports: [AccountInfoFrequencyModule,
        AmountModule,
        ProductNumberModule,
        ArrangementStateIndicatorModule,
        TooltipModule,
        BbDatePipeModule,
        DatePipeModule,
        PaymentCardModule,
        AccountInfoRenewalStatusModule, ProductSummaryCommon, ValidationModule, FormatPipeModule, AccountInfoPropertyComponent, CastAccountPropertyPipeModule,
        GetDecimalsCountModule,
        GetValuePipeModule,
        HasExternalInfoPipeModule,
        ToArrayPipeModule,
        ToPaymentCardDataPipeModule,
        ToNumberPipeModule] });
/** @nocollapse */ AccountInfoPropertyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoPropertyModule, imports: [[CommonModule, ...uiModules$1, ...sharedModules, ...pipeModules$1], AccountInfoFrequencyModule,
        AmountModule,
        ProductNumberModule,
        ArrangementStateIndicatorModule,
        TooltipModule,
        BbDatePipeModule,
        DatePipeModule,
        PaymentCardModule,
        AccountInfoRenewalStatusModule, ProductSummaryCommon, ValidationModule, FormatPipeModule, CastAccountPropertyPipeModule,
        GetDecimalsCountModule,
        GetValuePipeModule,
        HasExternalInfoPipeModule,
        ToArrayPipeModule,
        ToPaymentCardDataPipeModule,
        ToNumberPipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoPropertyModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$1, ...sharedModules, ...pipeModules$1],
                    declarations: [...components],
                    exports: [...uiModules$1, ...sharedModules, ...components, ...pipeModules$1],
                }]
        }] });

const pipeModules = [ToPaymentCardDataPipeModule, HasExternalInfoPipeModule, CastAccountPropertyPipeModule];
const uiModules = [AccountInfoPropertyModule, AccountInfoFrequencyModule];
class SharedUiAccountModule {
}
/** @nocollapse */ SharedUiAccountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SharedUiAccountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ SharedUiAccountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SharedUiAccountModule, imports: [CommonModule, ToPaymentCardDataPipeModule, HasExternalInfoPipeModule, CastAccountPropertyPipeModule, AccountInfoPropertyModule, AccountInfoFrequencyModule], exports: [ToPaymentCardDataPipeModule, HasExternalInfoPipeModule, CastAccountPropertyPipeModule, AccountInfoPropertyModule, AccountInfoFrequencyModule] });
/** @nocollapse */ SharedUiAccountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SharedUiAccountModule, imports: [[CommonModule, ...pipeModules, ...uiModules], ToPaymentCardDataPipeModule, HasExternalInfoPipeModule, CastAccountPropertyPipeModule, AccountInfoPropertyModule, AccountInfoFrequencyModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SharedUiAccountModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...pipeModules, ...uiModules],
                    exports: [...pipeModules, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccountInfoFrequencyComponent, AccountInfoFrequencyModule, AccountInfoPropertyComponent, AccountInfoPropertyModule, AccountInfoPropertyType, AccountInfoRenewalStatusComponent, AccountInfoRenewalStatusModule, CastAccountPropertyPipe, CastAccountPropertyPipeModule, HasExternalInfoPipe, HasExternalInfoPipeModule, SharedUiAccountModule, ToPaymentCardDataPipe, ToPaymentCardDataPipeModule };
//# sourceMappingURL=backbase-accounts-transactions-journeys-shared-ui-account-ang.js.map
