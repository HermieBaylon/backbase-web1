import { PipeTransform } from '@angular/core';
import { AccountInfoProperty, AccountInfoPropertyAccountNumber, AccountInfoPropertyAccountState, AccountInfoPropertyAmount, AccountInfoPropertyDate, AccountInfoPropertyDebitCards, AccountInfoPropertyFrequency, AccountInfoPropertyNumber, AccountInfoPropertyPercent, AccountInfoPropertyRenewalStatus, AccountInfoPropertyText, AccountInfoPropertyType, AccountInfoPropertyUpdateTime } from '../../models/account-info-property';
import * as i0 from "@angular/core";
/**
 * Account info cast type
 */
export declare type AccountInfoPropertyCastType<T extends AccountInfoPropertyType> = T extends AccountInfoPropertyType.ACCOUNT_NUMBER ? AccountInfoPropertyAccountNumber : T extends AccountInfoPropertyType.ACCOUNT_STATE ? AccountInfoPropertyAccountState : T extends AccountInfoPropertyType.AMOUNT ? AccountInfoPropertyAmount : T extends AccountInfoPropertyType.DATE ? AccountInfoPropertyDate : T extends AccountInfoPropertyType.DEBIT_CARDS ? AccountInfoPropertyDebitCards : T extends AccountInfoPropertyType.FREQUENCY ? AccountInfoPropertyFrequency : T extends AccountInfoPropertyType.NUMBER ? AccountInfoPropertyNumber : T extends AccountInfoPropertyType.PERCENT ? AccountInfoPropertyPercent : T extends AccountInfoPropertyType.RENEWAL_STATUS ? AccountInfoPropertyRenewalStatus : T extends AccountInfoPropertyType.TEXT ? AccountInfoPropertyText : T extends AccountInfoPropertyType.UPDATE_TIME ? AccountInfoPropertyUpdateTime : never;
/**
 * Casts a property to a given type
 * {{ property | bbCastAccountProperty:propertyType }}
 */
export declare class CastAccountPropertyPipe implements PipeTransform {
    transform<T extends AccountInfoPropertyType>(property: AccountInfoProperty | undefined, castType: T): AccountInfoPropertyCastType<T> | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<CastAccountPropertyPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<CastAccountPropertyPipe, "bbCastAccountProperty">;
}
