import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { AccountInfoPropertyType } from '../../models/account-info-property';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/product-summary-ui";
import * as i3 from "@backbase/ui-ang/amount";
import * as i4 from "@backbase/ui-ang/payment-card";
import * as i5 from "../account-info-frequency/account-info-frequency.component";
import * as i6 from "../account-info-renewal-status/account-info-renewal-status.component";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/tooltip-directive";
import * as i9 from "../../pipes/cast-account-property/cast-account-property.pipe";
import * as i10 from "@backbase/accounts-transactions-journeys-shared-ui-transform-ang";
import * as i11 from "../../pipes/has-external-info/has-external-info.pipe";
import * as i12 from "@backbase/product-summary-common-ang";
import * as i13 from "@backbase/ui-ang/date-pipe";
import * as i14 from "../../pipes/to-payment-card-data/to-payment-card-data.pipe";
export class AccountInfoPropertyComponent {
    constructor() {
        this.currencyFormat = 'code';
        this.dateFormat = 'longDate';
        this.isMaskable = false;
        this.isMasked = false;
        this.masked = new EventEmitter();
        this.propertyType = AccountInfoPropertyType;
    }
}
/** @nocollapse */ AccountInfoPropertyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoPropertyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountInfoPropertyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInfoPropertyComponent, selector: "bb-account-info-property", inputs: { account: "account", property: "property", currencyFormat: "currencyFormat", dateFormat: "dateFormat", isMaskable: "isMaskable", isMasked: "isMasked" }, outputs: { masked: "masked" }, ngImport: i0, template: "<div\n  class=\"bb-account-details-item bb-stack__item bb-stack__item--fill\"\n  [attr.data-role]=\"'account-info-property-' + property?.key\"\n>\n  <div\n    *ngIf=\"property?.label\"\n    class=\"bb-block bb-block--sm bb-stack bb-stack--density-sm\"\n    [attr.data-role]=\"'account-info-property-' + property?.key + '-label'\"\n  >\n    <span class=\"bb-stack__item bb-text-bold\">\n      {{ property?.label }}\n    </span>\n    <bb-icon-ui\n      *ngIf=\"property?.tooltip\"\n      class=\"bb-stack__item bb-text-support\"\n      data-role=\"toggle-tooltip-icon\"\n      tabindex=\"0\"\n      name=\"info\"\n      size=\"sm\"\n      aria-label=\"Toggle tooltip for {{ property?.label }}\"\n      i18n-aria-label=\"Toggle tooltip icon aria label@@product-summary.account-details-property.tooltip-icon.aria-label\"\n      [bbTooltip]=\"property?.tooltip\"\n      triggers=\"focus hover\"\n    ></bb-icon-ui>\n  </div>\n\n  <div [attr.data-role]=\"'account-info-property-' + property?.key + '-value'\">\n    <ng-container [ngSwitch]=\"property?.type\">\n      <ng-container *ngSwitchCase=\"propertyType.ACCOUNT_NUMBER\">\n        <ng-container *ngTemplateOutlet=\"accountNumberValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.ACCOUNT_STATE\">\n        <ng-container *ngTemplateOutlet=\"accountStateValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.AMOUNT\">\n        <ng-container *ngTemplateOutlet=\"amountOrPercentValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.DATE\">\n        <ng-container *ngTemplateOutlet=\"dateValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.DEBIT_CARDS\">\n        <ng-container *ngTemplateOutlet=\"debitCardsValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.FREQUENCY\">\n        <ng-container *ngTemplateOutlet=\"termValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.NUMBER\">\n        <ng-container *ngTemplateOutlet=\"numberOrPercentValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.PERCENT\">\n        <ng-container *ngTemplateOutlet=\"percentValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.RENEWAL_STATUS\">\n        <ng-container *ngTemplateOutlet=\"renewalStatus\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.TEXT\">\n        <ng-container *ngTemplateOutlet=\"textValue\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"propertyType.UPDATE_TIME\">\n        <ng-container *ngTemplateOutlet=\"updateTimeValue\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #accountNumberValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.ACCOUNT_NUMBER as valueProperty\">\n    <span aria-live=\"assertive\">\n      <bb-product-number\n        [type]=\"valueProperty.numberType\"\n        [number]=\"account | bbGetValue: valueProperty.key\"\n        [unmaskable]=\"isMaskable && !valueProperty.hideMaskIndicator && !(account | bbHasExternalInfo)\"\n        [masked]=\"isMasked\"\n        (unmask)=\"masked.emit(false)\"\n        (mask)=\"masked.emit(true)\"\n      ></bb-product-number>\n    </span>\n  </ng-container>\n</ng-template>\n\n<ng-template #accountStateValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.ACCOUNT_STATE as valueProperty\">\n    <bb-arrangement-state-indicator\n      *ngIf=\"account | bbGetValue: valueProperty.key as state\"\n      [state]=\"state\"\n      [showIcon]=\"valueProperty.showIcon || false\"\n      [showActive]=\"true\"\n    ></bb-arrangement-state-indicator>\n  </ng-container>\n</ng-template>\n\n<ng-template #amountOrPercentValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.AMOUNT as valueProperty\">\n    <ng-container *ngIf=\"account | bbGetValue: valueProperty.key | bbIsPercentValue; else amountValue\">\n      <ng-container *ngTemplateOutlet=\"percentValue\"></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #amountValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.AMOUNT as valueProperty\">\n    <bb-amount-ui\n      *ngIf=\"account | bbGetValue: valueProperty.key as amount\"\n      [amount]=\"amount\"\n      [currency]=\"valueProperty.currency || account?.currency || ''\"\n      [mapCurrency]=\"(valueProperty.currencyFormat || currencyFormat) === 'symbol'\"\n    ></bb-amount-ui>\n  </ng-container>\n</ng-template>\n\n<ng-template #dateValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.DATE as valueProperty\">\n    {{ account | bbGetValue: valueProperty.key | bbDate: valueProperty.dateFormat || dateFormat }}\n  </ng-container>\n</ng-template>\n\n<ng-template #debitCardsValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.DEBIT_CARDS as valueProperty\">\n    <div class=\"bb-stack bb-stack--density-xl bb-stack--wrap\">\n      <bb-payment-card-ui\n        class=\"bb-stack__item bb-block bb-block--md\"\n        *ngFor=\"let debitCardData of account | bbGetValue: valueProperty.key | bbToArray\"\n        [paymentCard]=\"debitCardData | bbToPaymentCardData\"\n        [paymentCardNumberFormat]=\"'cardNumber' | bbProductNumberFormat\"\n      ></bb-payment-card-ui>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #termValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.FREQUENCY as valueProperty\">\n    <bb-account-info-frequency\n      [value]=\"account | bbGetValue: valueProperty.key\"\n      [unit]=\"account | bbGetValue: valueProperty.unitKey\"\n    ></bb-account-info-frequency>\n  </ng-container>\n</ng-template>\n\n<ng-template #numberOrPercentValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.NUMBER as valueProperty\">\n    <ng-container *ngIf=\"account | bbGetValue: valueProperty.key | bbIsPercentValue; else numberValue\">\n      <ng-container *ngTemplateOutlet=\"percentValue\"></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #numberValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.NUMBER as valueProperty\">\n    <bb-amount-ui\n      *ngIf=\"account | bbGetValue: valueProperty.key | bbToNumber as amount\"\n      [amount]=\"amount\"\n      [decimalPlaces]=\"valueProperty.decimalPlaces\"\n    ></bb-amount-ui>\n  </ng-container>\n</ng-template>\n\n<ng-template #percentValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.PERCENT as valueProperty\">\n    <bb-amount-ui\n      *ngIf=\"account | bbGetValue: valueProperty.key | bbToNumber as amount\"\n      [amount]=\"amount\"\n      [showPercent]=\"true\"\n    ></bb-amount-ui>\n  </ng-container>\n</ng-template>\n\n<ng-template #renewalStatus>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.RENEWAL_STATUS as valueProperty\">\n    <bb-account-info-renewal-status\n      [isRenewalAllowed]=\"(account | bbGetValue: valueProperty.key) || false\"\n    ></bb-account-info-renewal-status>\n  </ng-container>\n</ng-template>\n\n<ng-template #textValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.TEXT as valueProperty\">\n    {{ account | bbGetValue: valueProperty.key }}\n  </ng-container>\n</ng-template>\n\n<ng-template #updateTimeValue>\n  <ng-container *ngIf=\"property | bbCastAccountProperty: propertyType.UPDATE_TIME as valueProperty\">\n    {{ (account | bbGetValue: valueProperty.key) || '' | bbDateUpdatedAgo: valueProperty.dateFormat || dateFormat }}\n  </ng-container>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.ProductNumberComponent, selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }, { type: i2.ArrangementStateIndicatorComponent, selector: "bb-arrangement-state-indicator", inputs: ["state", "showActive", "showIcon", "hideStateTextForMobile"] }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i4.PaymentCardComponent, selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }, { type: i5.AccountInfoFrequencyComponent, selector: "bb-account-info-frequency", inputs: ["value", "unit"] }, { type: i6.AccountInfoRenewalStatusComponent, selector: "bb-account-info-renewal-status", inputs: ["isRenewalAllowed"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i7.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i7.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "bbCastAccountProperty": i9.CastAccountPropertyPipe, "bbGetValue": i10.GetValuePipe, "bbHasExternalInfo": i11.HasExternalInfoPipe, "bbIsPercentValue": i12.IsPercentValue, "bbDate": i13.BbDatePipe, "bbToPaymentCardData": i14.ToPaymentCardDataPipe, "bbProductNumberFormat": i12.ProductNumberFormatPipe, "bbToArray": i10.ToArrayPipe, "bbToNumber": i10.ToNumberPipe, "bbDateUpdatedAgo": i12.DateUpdatedAgoPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoPropertyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-info-property',
                    templateUrl: './account-info-property.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { account: [{
                type: Input
            }], property: [{
                type: Input
            }], currencyFormat: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], isMaskable: [{
                type: Input
            }], isMasked: [{
                type: Input
            }], masked: [{
                type: Output
            }] } });
//# sourceMappingURL=account-info-property.component.js.map