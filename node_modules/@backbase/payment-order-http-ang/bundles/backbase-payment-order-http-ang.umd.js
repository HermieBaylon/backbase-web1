(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/payment-order-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payment-order-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ApprovalStatus = {
        PENDING: 'PENDING',
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED'
    };

    exports.BreachInfo = void 0;
    (function (BreachInfo) {
        BreachInfo.BreachTypeEnum = {
            THRESHOLD: 'THRESHOLD',
            CONSUMPTION: 'CONSUMPTION'
        };
        BreachInfo.BreachedLimitTypeEnum = {
            PERIODIC: 'PERIODIC',
            TRANSACTIONAL: 'TRANSACTIONAL'
        };
    })(exports.BreachInfo || (exports.BreachInfo = {}));

    exports.BulkPaymentOrdersApprovalPutResponseStatus = void 0;
    (function (BulkPaymentOrdersApprovalPutResponseStatus) {
        BulkPaymentOrdersApprovalPutResponseStatus.CodeEnum = {
            OK: 'OK',
            ERROR: 'ERROR'
        };
    })(exports.BulkPaymentOrdersApprovalPutResponseStatus || (exports.BulkPaymentOrdersApprovalPutResponseStatus = {}));

    var ChargeBearer = {
        OUR: 'OUR',
        BEN: 'BEN',
        SHA: 'SHA'
    };

    exports.ExchangeRateInformation = void 0;
    (function (ExchangeRateInformation) {
        ExchangeRateInformation.RateTypeEnum = {
            ACTUAL: 'ACTUAL',
            INDICATIVE: 'INDICATIVE',
            AGREED: 'AGREED'
        };
    })(exports.ExchangeRateInformation || (exports.ExchangeRateInformation = {}));

    var InstructionPriority = {
        NORM: 'NORM',
        HIGH: 'HIGH'
    };

    var InvolvedPartyRole = {
        CREDITOR: 'CREDITOR',
        DEBTOR: 'DEBTOR'
    };

    var LogicalOperator = {
        OR: 'OR'
    };

    var PaymentAction = {
        APPROVE: 'APPROVE',
        FINALAPPROVE: 'FINAL_APPROVE',
        REJECT: 'REJECT',
        CANCEL: 'CANCEL',
        DELETE: 'DELETE',
        EDIT: 'EDIT'
    };

    var PaymentMode = {
        SINGLE: 'SINGLE',
        RECURRING: 'RECURRING'
    };

    exports.PaymentOrderProgressStatusGet = void 0;
    (function (PaymentOrderProgressStatusGet) {
        PaymentOrderProgressStatusGet.ProgressStatusEnum = {
            CONFIRMATIONPENDING: 'CONFIRMATION_PENDING',
            USERDECLINED: 'USER_DECLINED',
            SYSTEMDECLINED: 'SYSTEM_DECLINED',
            PENDINGAPPROVAL: 'PENDING_APPROVAL',
            SENDING: 'SENDING',
            ACCEPTED: 'ACCEPTED',
            REJECTED: 'REJECTED',
            PROCESSED: 'PROCESSED',
            NOPROGRESS: 'NO_PROGRESS'
        };
    })(exports.PaymentOrderProgressStatusGet || (exports.PaymentOrderProgressStatusGet = {}));

    var RecordStatus = {
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED'
    };

    exports.RemittanceInformation = void 0;
    (function (RemittanceInformation) {
        RemittanceInformation.TypeEnum = {
            STRUCTURED: 'STRUCTURED',
            UNSTRUCTURED: 'UNSTRUCTURED'
        };
    })(exports.RemittanceInformation || (exports.RemittanceInformation = {}));

    exports.Schedule = void 0;
    (function (Schedule) {
        Schedule.NonWorkingDayExecutionStrategyEnum = {
            BEFORE: 'BEFORE',
            AFTER: 'AFTER',
            NONE: 'NONE'
        };
        Schedule.TransferFrequencyEnum = {
            ONCE: 'ONCE',
            DAILY: 'DAILY',
            WEEKLY: 'WEEKLY',
            BIWEEKLY: 'BIWEEKLY',
            MONTHLY: 'MONTHLY',
            QUARTERLY: 'QUARTERLY',
            YEARLY: 'YEARLY'
        };
        Schedule.EveryEnum = {
            _1: '1',
            _2: '2'
        };
    })(exports.Schedule || (exports.Schedule = {}));

    var SchemeNames = {
        IBAN: 'IBAN',
        BBAN: 'BBAN',
        ID: 'ID',
        EXTERNALID: 'EXTERNAL_ID',
        EMAIL: 'EMAIL',
        MOBILE: 'MOBILE'
    };

    var Status = {
        DRAFT: 'DRAFT',
        ENTERED: 'ENTERED',
        READY: 'READY',
        ACCEPTED: 'ACCEPTED',
        PROCESSED: 'PROCESSED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED',
        CANCELLATIONPENDING: 'CANCELLATION_PENDING',
        CONFIRMATIONPENDING: 'CONFIRMATION_PENDING',
        CONFIRMATIONDECLINED: 'CONFIRMATION_DECLINED',
        REPLACED: 'REPLACED'
    };

    var PAYMENT_ORDER_BASE_PATH = new i0.InjectionToken('PAYMENT_ORDER_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var PaymentOrderConfiguration = /** @class */ (function () {
        function PaymentOrderConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        PaymentOrderConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        PaymentOrderConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        PaymentOrderConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        PaymentOrderConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return PaymentOrderConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module PaymentOrderConfiguration');

    var PaymentOrderApiModule = /** @class */ (function () {
        function PaymentOrderApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('PaymentOrderApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        PaymentOrderApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: PaymentOrderApiModule,
                providers: [{ provide: PaymentOrderConfiguration, useFactory: configurationFactory }]
            };
        };
        return PaymentOrderApiModule;
    }());
    PaymentOrderApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderApiModule, deps: [{ token: PaymentOrderApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: PaymentOrderConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentOrderApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderApiModule });
    PaymentOrderApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: PaymentOrderApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: PaymentOrderConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var PaymentOrdersHttpService = /** @class */ (function () {
        function PaymentOrdersHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentOrderConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PaymentOrdersHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PaymentOrdersHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PaymentOrdersHttpService.prototype.deletePaymentOrderById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling deletePaymentOrderById.');
            }
            var _version = requestParameters["version"];
            if (_version === null || _version === undefined) {
                throw new Error('Required parameter version was null or undefined when calling deletePaymentOrderById.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_version !== undefined && _version !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _version, 'version');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.deletePaymentOrderByIdUrl = function (requestParameters) {
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling deletePaymentOrderById.');
            }
            var _version = requestParameters["version"];
            if (_version === null || _version === undefined) {
                throw new Error('Required parameter version was null or undefined when calling deletePaymentOrderById.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_version !== undefined && _version !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _version, 'version');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + (queryString ? "?" + queryString : '');
        };
        PaymentOrdersHttpService.prototype.getApprovablePaymentOrders = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/payment-orders/approvals", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.getApprovablePaymentOrdersUrl = function (requestParameters) {
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/payment-orders/approvals" + (queryString ? "?" + queryString : '');
        };
        PaymentOrdersHttpService.prototype.getCurrencies = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/payment-orders/currencies", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.getCurrenciesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/payment-orders/currencies";
        };
        PaymentOrdersHttpService.prototype.getPaymentOrderById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling getPaymentOrderById.');
            }
            var _userId = requestParameters["userId"];
            var _saId = requestParameters["saId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_saId !== undefined && _saId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _saId, 'saId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.getPaymentOrderByIdUrl = function (requestParameters) {
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling getPaymentOrderById.');
            }
            var _userId = requestParameters["userId"];
            var _saId = requestParameters["saId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_saId !== undefined && _saId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _saId, 'saId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + (queryString ? "?" + queryString : '');
        };
        PaymentOrdersHttpService.prototype.getPaymentOrderExport = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling getPaymentOrderExport.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/pdf',
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + "/export", {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.getPaymentOrderExportUrl = function (requestParameters) {
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling getPaymentOrderExport.');
            }
            return this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + "/export";
        };
        PaymentOrdersHttpService.prototype.getPaymentOrders = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _status = requestParameters["status"];
            var _paymentTypeGroup = requestParameters["paymentTypeGroup"];
            var _createdByMe = requestParameters["createdByMe"];
            var _userId = requestParameters["userId"];
            var _saId = requestParameters["saId"];
            var _originatorArrangementId = requestParameters["originatorArrangementId"];
            var _query = requestParameters["query"];
            var _amountFrom = requestParameters["amountFrom"];
            var _amountTo = requestParameters["amountTo"];
            var _executionDate = requestParameters["executionDate"];
            var _executionDateFrom = requestParameters["executionDateFrom"];
            var _executionDateTo = requestParameters["executionDateTo"];
            var _nextExecutionDate = requestParameters["nextExecutionDate"];
            var _nextExecutionDateFrom = requestParameters["nextExecutionDateFrom"];
            var _nextExecutionDateTo = requestParameters["nextExecutionDateTo"];
            var _paymentMode = requestParameters["paymentMode"];
            var _paymentSetupId = requestParameters["paymentSetupId"];
            var _transferFrequency = requestParameters["transferFrequency"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_paymentTypeGroup !== undefined && _paymentTypeGroup !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _paymentTypeGroup, 'paymentTypeGroup');
            }
            if (_createdByMe !== undefined && _createdByMe !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _createdByMe, 'createdByMe');
            }
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_saId !== undefined && _saId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _saId, 'saId');
            }
            if (_originatorArrangementId !== undefined && _originatorArrangementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _originatorArrangementId, 'originatorArrangementId');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_amountFrom !== undefined && _amountFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
            }
            if (_amountTo !== undefined && _amountTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
            }
            if (_executionDate !== undefined && _executionDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
            }
            if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
            }
            if (_executionDateTo !== undefined && _executionDateTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
            }
            if (_nextExecutionDate !== undefined && _nextExecutionDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDate, 'nextExecutionDate');
            }
            if (_nextExecutionDateFrom !== undefined && _nextExecutionDateFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateFrom, 'nextExecutionDateFrom');
            }
            if (_nextExecutionDateTo !== undefined && _nextExecutionDateTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateTo, 'nextExecutionDateTo');
            }
            if (_paymentMode !== undefined && _paymentMode !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _paymentMode, 'paymentMode');
            }
            if (_paymentSetupId !== undefined && _paymentSetupId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _paymentSetupId, 'paymentSetupId');
            }
            if (_transferFrequency !== undefined && _transferFrequency !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _transferFrequency, 'transferFrequency');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/payment-orders", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.getPaymentOrdersUrl = function (requestParameters) {
            var _this = this;
            var _status = requestParameters["status"];
            var _paymentTypeGroup = requestParameters["paymentTypeGroup"];
            var _createdByMe = requestParameters["createdByMe"];
            var _userId = requestParameters["userId"];
            var _saId = requestParameters["saId"];
            var _originatorArrangementId = requestParameters["originatorArrangementId"];
            var _query = requestParameters["query"];
            var _amountFrom = requestParameters["amountFrom"];
            var _amountTo = requestParameters["amountTo"];
            var _executionDate = requestParameters["executionDate"];
            var _executionDateFrom = requestParameters["executionDateFrom"];
            var _executionDateTo = requestParameters["executionDateTo"];
            var _nextExecutionDate = requestParameters["nextExecutionDate"];
            var _nextExecutionDateFrom = requestParameters["nextExecutionDateFrom"];
            var _nextExecutionDateTo = requestParameters["nextExecutionDateTo"];
            var _paymentMode = requestParameters["paymentMode"];
            var _paymentSetupId = requestParameters["paymentSetupId"];
            var _transferFrequency = requestParameters["transferFrequency"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_paymentTypeGroup !== undefined && _paymentTypeGroup !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _paymentTypeGroup, 'paymentTypeGroup');
            }
            if (_createdByMe !== undefined && _createdByMe !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _createdByMe, 'createdByMe');
            }
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_saId !== undefined && _saId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _saId, 'saId');
            }
            if (_originatorArrangementId !== undefined && _originatorArrangementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _originatorArrangementId, 'originatorArrangementId');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_amountFrom !== undefined && _amountFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
            }
            if (_amountTo !== undefined && _amountTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
            }
            if (_executionDate !== undefined && _executionDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
            }
            if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
            }
            if (_executionDateTo !== undefined && _executionDateTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
            }
            if (_nextExecutionDate !== undefined && _nextExecutionDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDate, 'nextExecutionDate');
            }
            if (_nextExecutionDateFrom !== undefined && _nextExecutionDateFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateFrom, 'nextExecutionDateFrom');
            }
            if (_nextExecutionDateTo !== undefined && _nextExecutionDateTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateTo, 'nextExecutionDateTo');
            }
            if (_paymentMode !== undefined && _paymentMode !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _paymentMode, 'paymentMode');
            }
            if (_paymentSetupId !== undefined && _paymentSetupId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _paymentSetupId, 'paymentSetupId');
            }
            if (_transferFrequency !== undefined && _transferFrequency !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _transferFrequency, 'transferFrequency');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/payment-orders" + (queryString ? "?" + queryString : '');
        };
        PaymentOrdersHttpService.prototype.getProgressStatusByPaymentOrderId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling getProgressStatusByPaymentOrderId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + "/progress-status", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.getProgressStatusByPaymentOrderIdUrl = function (requestParameters) {
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling getProgressStatusByPaymentOrderId.');
            }
            return this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + "/progress-status";
        };
        PaymentOrdersHttpService.prototype.getRate = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _currencyFrom = requestParameters["currencyFrom"];
            if (_currencyFrom === null || _currencyFrom === undefined) {
                throw new Error('Required parameter currencyFrom was null or undefined when calling getRate.');
            }
            var _currencyTo = requestParameters["currencyTo"];
            if (_currencyTo === null || _currencyTo === undefined) {
                throw new Error('Required parameter currencyTo was null or undefined when calling getRate.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_currencyFrom !== undefined && _currencyFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _currencyFrom, 'currencyFrom');
            }
            if (_currencyTo !== undefined && _currencyTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _currencyTo, 'currencyTo');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/payment-orders/rate", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.getRateUrl = function (requestParameters) {
            var _currencyFrom = requestParameters["currencyFrom"];
            if (_currencyFrom === null || _currencyFrom === undefined) {
                throw new Error('Required parameter currencyFrom was null or undefined when calling getRate.');
            }
            var _currencyTo = requestParameters["currencyTo"];
            if (_currencyTo === null || _currencyTo === undefined) {
                throw new Error('Required parameter currencyTo was null or undefined when calling getRate.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_currencyFrom !== undefined && _currencyFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _currencyFrom, 'currencyFrom');
            }
            if (_currencyTo !== undefined && _currencyTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _currencyTo, 'currencyTo');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/payment-orders/rate" + (queryString ? "?" + queryString : '');
        };
        PaymentOrdersHttpService.prototype.postCancelByPaymentOrderId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling postCancelByPaymentOrderId.');
            }
            var _paymentOrderCancelPostRequest = requestParameters["paymentOrderCancelPostRequest"];
            if (_paymentOrderCancelPostRequest === null || _paymentOrderCancelPostRequest === undefined) {
                throw new Error('Required parameter paymentOrderCancelPostRequest was null or undefined when calling postCancelByPaymentOrderId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + "/cancel", _paymentOrderCancelPostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.postCancelByPaymentOrderIdUrl = function (requestParameters) {
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling postCancelByPaymentOrderId.');
            }
            var _paymentOrderCancelPostRequest = requestParameters["paymentOrderCancelPostRequest"];
            if (_paymentOrderCancelPostRequest === null || _paymentOrderCancelPostRequest === undefined) {
                throw new Error('Required parameter paymentOrderCancelPostRequest was null or undefined when calling postCancelByPaymentOrderId.');
            }
            return this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + "/cancel";
        };
        PaymentOrdersHttpService.prototype.postPaymentOrders = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrdersPost = requestParameters["paymentOrdersPost"];
            if (_paymentOrdersPost === null || _paymentOrdersPost === undefined) {
                throw new Error('Required parameter paymentOrdersPost was null or undefined when calling postPaymentOrders.');
            }
            var _xMFA = requestParameters["xMFA"];
            var headers = this.defaultHeaders;
            if (_xMFA !== undefined && _xMFA !== null) {
                headers = headers.set('X-MFA', String(_xMFA));
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/payment-orders", _paymentOrdersPost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.postPaymentOrdersUrl = function (requestParameters) {
            var _paymentOrdersPost = requestParameters["paymentOrdersPost"];
            if (_paymentOrdersPost === null || _paymentOrdersPost === undefined) {
                throw new Error('Required parameter paymentOrdersPost was null or undefined when calling postPaymentOrders.');
            }
            var _xMFA = requestParameters["xMFA"];
            return this.configuration.basePath + "/client-api/v2/payment-orders";
        };
        PaymentOrdersHttpService.prototype.postValidate = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrdersValidatePost = requestParameters["paymentOrdersValidatePost"];
            if (_paymentOrdersValidatePost === null || _paymentOrdersValidatePost === undefined) {
                throw new Error('Required parameter paymentOrdersValidatePost was null or undefined when calling postValidate.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/payment-orders/validate", _paymentOrdersValidatePost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.postValidateUrl = function (requestParameters) {
            var _paymentOrdersValidatePost = requestParameters["paymentOrdersValidatePost"];
            if (_paymentOrdersValidatePost === null || _paymentOrdersValidatePost === undefined) {
                throw new Error('Required parameter paymentOrdersValidatePost was null or undefined when calling postValidate.');
            }
            return this.configuration.basePath + "/client-api/v2/payment-orders/validate";
        };
        PaymentOrdersHttpService.prototype.putApprovalsByPaymentOrderId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling putApprovalsByPaymentOrderId.');
            }
            var _paymentOrderApprovalPutRequest = requestParameters["paymentOrderApprovalPutRequest"];
            if (_paymentOrderApprovalPutRequest === null || _paymentOrderApprovalPutRequest === undefined) {
                throw new Error('Required parameter paymentOrderApprovalPutRequest was null or undefined when calling putApprovalsByPaymentOrderId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + "/approvals", _paymentOrderApprovalPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.putApprovalsByPaymentOrderIdUrl = function (requestParameters) {
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling putApprovalsByPaymentOrderId.');
            }
            var _paymentOrderApprovalPutRequest = requestParameters["paymentOrderApprovalPutRequest"];
            if (_paymentOrderApprovalPutRequest === null || _paymentOrderApprovalPutRequest === undefined) {
                throw new Error('Required parameter paymentOrderApprovalPutRequest was null or undefined when calling putApprovalsByPaymentOrderId.');
            }
            return this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)) + "/approvals";
        };
        PaymentOrdersHttpService.prototype.putBulkApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _bulkPaymentOrdersApprovalPutRequest = requestParameters["bulkPaymentOrdersApprovalPutRequest"];
            if (_bulkPaymentOrdersApprovalPutRequest === null || _bulkPaymentOrdersApprovalPutRequest === undefined) {
                throw new Error('Required parameter bulkPaymentOrdersApprovalPutRequest was null or undefined when calling putBulkApprovals.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/payment-orders/bulk-approvals", _bulkPaymentOrdersApprovalPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.putBulkApprovalsUrl = function (requestParameters) {
            var _bulkPaymentOrdersApprovalPutRequest = requestParameters["bulkPaymentOrdersApprovalPutRequest"];
            if (_bulkPaymentOrdersApprovalPutRequest === null || _bulkPaymentOrdersApprovalPutRequest === undefined) {
                throw new Error('Required parameter bulkPaymentOrdersApprovalPutRequest was null or undefined when calling putBulkApprovals.');
            }
            return this.configuration.basePath + "/client-api/v2/payment-orders/bulk-approvals";
        };
        PaymentOrdersHttpService.prototype.putPaymentOrderById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling putPaymentOrderById.');
            }
            var _paymentOrderPut = requestParameters["paymentOrderPut"];
            if (_paymentOrderPut === null || _paymentOrderPut === undefined) {
                throw new Error('Required parameter paymentOrderPut was null or undefined when calling putPaymentOrderById.');
            }
            var _xMFA = requestParameters["xMFA"];
            var headers = this.defaultHeaders;
            if (_xMFA !== undefined && _xMFA !== null) {
                headers = headers.set('X-MFA', String(_xMFA));
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId)), _paymentOrderPut, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOrdersHttpService.prototype.putPaymentOrderByIdUrl = function (requestParameters) {
            var _paymentOrderId = requestParameters["paymentOrderId"];
            if (_paymentOrderId === null || _paymentOrderId === undefined) {
                throw new Error('Required parameter paymentOrderId was null or undefined when calling putPaymentOrderById.');
            }
            var _paymentOrderPut = requestParameters["paymentOrderPut"];
            if (_paymentOrderPut === null || _paymentOrderPut === undefined) {
                throw new Error('Required parameter paymentOrderPut was null or undefined when calling putPaymentOrderById.');
            }
            var _xMFA = requestParameters["xMFA"];
            return this.configuration.basePath + "/client-api/v2/payment-orders/" + encodeURIComponent(String(_paymentOrderId));
        };
        return PaymentOrdersHttpService;
    }());
    PaymentOrdersHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrdersHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_ORDER_BASE_PATH, optional: true }, { token: PaymentOrderConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentOrdersHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrdersHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrdersHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_ORDER_BASE_PATH]
                        }] }, { type: PaymentOrderConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PaymentOrdersHttpServiceDeletePaymentOrderByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServiceGetApprovablePaymentOrdersMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "name": "Smith Bonus Savings",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                                "identification": {
                                    "identification": "NL81TRIO0212471066",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Smith Bonus Savings",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "MR1300020001010000123456753",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "counterparty": {
                                    "name": "John Smith"
                                }
                            },
                            "actions": ["APPROVE", "FINAL_APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": true,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true,
                                "export": false
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 1
                        }, {
                            "id": "06db9298-189b-11e8-accf-0ed5f89f718b",
                            "approvalId": "11863018-189b-11e8-accf-0ed5f89f718b",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "name": "John Doe",
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "0260-0959-3",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "John Doe",
                                "postalAddress": {
                                    "addressLine1": "228 Park Ave S",
                                    "town": "New York"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-08-12",
                            "paymentMode": "RECURRING",
                            "paymentType": "US_FOREIGN_WIRE",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2017-09-12",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "endToEndIdentification": "TRNSCT REF 1234567890",
                                "instructedAmount": {
                                    "amount": "104.66",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "NL91 ABNA 0417 1643 00",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Brown",
                                    "postalAddress": {
                                        "addressLine1": "2589 Peaceful Lane",
                                        "postCode": "44128",
                                        "town": "Warrensville Heights",
                                        "country": "US"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Unstructured content"
                                },
                                "counterpartyBank": {
                                    "bankBranchCode": "082000549",
                                    "name": "Morgan Chase",
                                    "postalAddress": {
                                        "addressLine1": "4789 Vernon Street",
                                        "postCode": "92028",
                                        "town": "Fallbrook",
                                        "country": "US"
                                    }
                                },
                                "correspondentBank": {
                                    "bankBranchCode": "122105155",
                                    "name": "Bank of America"
                                },
                                "intermediaryBank": {
                                    "bic": "DABAIE2D",
                                    "bankBranchCode": "102000021",
                                    "name": "SNSB"
                                },
                                "messageToBank": "My us international wire payment explanation.",
                                "targetCurrency": "EUR"
                            },
                            "actions": ["APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true,
                                "export": false
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 42
                        }, {
                            "id": "fa088818-623a-4260-bc46-1ff678de8dae",
                            "approvalId": "8605dc85-726c-4795-9b55-ff698ad2d1e4",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "name": "Mr John Usmith",
                                "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                                "identification": {
                                    "identification": "00400440116243",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr John Usmith",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, New York"
                                }
                            },
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "INTERNAL",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "accountType": "SAVINGS",
                                    "identification": {
                                        "identification": "3242342348899",
                                        "schemeName": "BBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "John Doe"
                                }
                            },
                            "actions": ["APPROVE", "REJECT", "EDIT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": true,
                                "create": true,
                                "export": false
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 1
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServiceGetCurrenciesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/currencies",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "code": "EUR"
                        }, {
                            "code": "USD"
                        }, {
                            "code": "GBP"
                        }, {
                            "code": "ISK"
                        }, {
                            "code": "KWD"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServiceGetPaymentOrderByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "actions": ["EDIT"],
                        "permissibleActions": {
                            "approve": false,
                            "finalApprove": false,
                            "reject": false,
                            "cancel": false,
                            "delete": false,
                            "edit": true,
                            "create": true,
                            "export": true
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "contextualInformation": {
                            "externalUserId": "b3e4692d-6772-4fb2-9446-132435465768",
                            "internalUserId": "b3e4692d-6772-4fb2-9446-374857684932",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "legalEntityId": "27263171-94d5-4d82-975c-61d8c41644d0",
                            "origin": "actions"
                        },
                        "originatorAccountCurrency": "EUR",
                        "version": 1
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2021-07-01",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "actions": ["EDIT"],
                        "permissibleActions": {
                            "approve": false,
                            "finalApprove": false,
                            "reject": false,
                            "cancel": false,
                            "delete": false,
                            "edit": true,
                            "create": true,
                            "export": true
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "contextualInformation": {
                            "externalUserId": "b3e4692d-6772-4fb2-9446-132435465768",
                            "internalUserId": "b3e4692d-6772-4fb2-9446-374857684932",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "legalEntityId": "27263171-94d5-4d82-975c-61d8c41644d0",
                            "origin": "actions"
                        },
                        "originatorAccountCurrency": "EUR",
                        "edited": true,
                        "editedPaymentOrder": {
                            "id": "df341c28-6714-11e7-907b-a6006ad3asa0",
                            "approvalId": "49dad7ab-604b-407a-ba47-a61ad93df4ce",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2021-07-01",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "6000",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "actions": ["EDIT"],
                            "permissibleActions": {
                                "approve": false,
                                "finalApprove": false,
                                "reject": false,
                                "cancel": false,
                                "delete": false,
                                "edit": true,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T15:33:13.452Z",
                            "contextualInformation": {
                                "externalUserId": "b3e4692d-6772-4fb2-9446-132435465768",
                                "internalUserId": "b3e4692d-6772-4fb2-9446-374857684932",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "legalEntityId": "27263171-94d5-4d82-975c-61d8c41644d0",
                                "origin": "actions"
                            },
                            "originatorAccountCurrency": "EUR",
                            "edited": false,
                            "version": 1
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-07-22",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "version": 1,
                        "actions": [],
                        "createdBy": "U00243",
                        "createdAt": "2018-07-22T13:44:02Z",
                        "originatorAccountCurrency": "EUR",
                        "approvalDetails": {
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "b3e4692d-6772-4fb2-9446-bebebebebebe",
                            "externalUserId": "davyJones88",
                            "userFullName": "Davy Jones",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "dataAccessItemId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "resource": "Payments",
                            "function": "SEPA_CREDIT_TRANSFER",
                            "status": "PENDING",
                            "createdAt": "2018-07-22T13:44:02Z",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "b3e4692d-6772-4fb2-9446-babababababa",
                                    "externalUserId": "flying-dutchman",
                                    "userFullName": "Jack Sparrow",
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "status": "APPROVED",
                                    "createdAt": "2018-07-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "items": [{
                                        "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "numberOfApprovals": 1
                                    }]
                            },
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-07-22",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "version": 1,
                        "actions": [],
                        "createdBy": "U00243",
                        "createdAt": "2018-07-22T13:44:02Z",
                        "originatorAccountCurrency": "EUR",
                        "approvalDetails": {
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "b3e4692d-6772-4fb2-9446-bebebebebebe",
                            "externalUserId": "davyJones88",
                            "userFullName": "Davy Jones",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "dataAccessItemId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "resource": "Payments",
                            "function": "SEPA_CREDIT_TRANSFER",
                            "status": "PENDING",
                            "createdAt": "2018-07-22T13:44:02Z",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "b3e4692d-6772-4fb2-9446-babababababa",
                                    "externalUserId": "flying-dutchman",
                                    "userFullName": "Jack Sparrow",
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "status": "APPROVED",
                                    "createdAt": "2018-07-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "8ac202da-273b-4d2b-8aa6-c12f9d9fa736",
                                "name": "Or policy",
                                "description": "A policy that requires A OR B approvals",
                                "logicalItems": [{
                                        "rank": 1,
                                        "operator": "OR",
                                        "items": [{
                                                "approvalType": {
                                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                                    "name": "A",
                                                    "description": "Or A approval",
                                                    "rank": 100
                                                },
                                                "numberOfApprovals": 1
                                            }, {
                                                "approvalType": {
                                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                                    "name": "B",
                                                    "description": "Or B approval",
                                                    "rank": 101
                                                },
                                                "numberOfApprovals": 1
                                            }]
                                    }]
                            },
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "identification": {
                                "identification": "8a48e08c60daa5940160dac699050088",
                                "schemeName": "ID"
                            }
                        },
                        "requestedExecutionDate": "2021-02-15",
                        "paymentType": "INTERNATIONAL_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "100",
                                "currencyCode": "INR"
                            },
                            "counterparty": {
                                "name": "John Doe"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "counterpartyBank": {
                                "bankBranchCode": "IDIA000A001",
                                "bic": "IBKLINBBXXR",
                                "name": "IDBA BANK",
                                "postalAddress": {
                                    "addressLine1": "FINANCIAL PLAZA INDIA",
                                    "country": "IN"
                                }
                            },
                            "correspondentBank": {
                                "bankBranchCode": "011000015",
                                "name": "FEDERAL RESERVE BANK"
                            },
                            "intermediaryBank": {
                                "bankBranchCode": "122105155",
                                "name": "SNSB2886803298"
                            },
                            "messageToBank": "My international payment explanation.",
                            "chargeBearer": "SHA",
                            "exchangeRateInformation": {
                                "currencyCode": "INR",
                                "rate": "89.00",
                                "rateType": "AGREED",
                                "contractIdentification": "/tbill/2018/T102993"
                            },
                            "transferFee": {
                                "amount": "15",
                                "currencyCode": "EUR"
                            },
                            "purposeOfPayment": {
                                "code": "P1004",
                                "description": "Legal services"
                            }
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServiceGetPaymentOrderExportMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}/export",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServiceGetPaymentOrdersMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                                "identification": {
                                    "identification": "NL81TRIO0212471066",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Smith Bonus Savings",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                }
                            },
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "MR1300020001010000123456753",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "counterparty": {
                                    "name": "John Smith"
                                }
                            },
                            "actions": ["APPROVE", "FINAL_APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": true,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": true,
                            "version": 1
                        }, {
                            "id": "0d0b6350-0ff9-11e8-b642-0ed5f89f718b",
                            "approvalId": "518bbd4a-0ff9-11e8-b642-0ed5f89f718b",
                            "status": "PROCESSED",
                            "bankStatus": "FINISHED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL18INGB0664923638",
                                    "schemeName": "IBAN"
                                },
                                "name": "Credit Account"
                            },
                            "originator": {
                                "name": "Random Account",
                                "postalAddress": {
                                    "country": "NL"
                                }
                            },
                            "batchBooking": true,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2018-08-11",
                            "paymentMode": "RECURRING",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2018-08-15",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "100.00",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "NO9386011117947",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Yellow"
                                },
                                "remittanceInformation": {
                                    "type": "STRUCTURED",
                                    "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                                }
                            },
                            "actions": ["EDIT"],
                            "permissibleActions": {
                                "approve": false,
                                "finalApprove": false,
                                "reject": false,
                                "cancel": false,
                                "delete": false,
                                "edit": true,
                                "create": true,
                                "export": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }, {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "c383c69f-38bf-4e3e-ad3f-5f58cf971bb1",
                            "status": "REJECTED",
                            "bankStatus": "ACCOUNT_BLOCKED",
                            "reasonCode": "AB01",
                            "reasonText": "Account blocked",
                            "errorDescription": "Blocked by bank.",
                            "originatorAccount": {
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                                "identification": {
                                    "identification": "FR188388353832IH3CAWFYXAA36",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr and Mrs J. Smith"
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2018-07-16",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "LT121000011101001000",
                                        "schemeName": "IBAN"
                                    },
                                    "name": "ABN Amro"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }, {
                            "id": "7d34215a-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "ae01c614-d473-48d6-af7d-f516292b39cb",
                            "status": "ACCEPTED",
                            "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                            "reasonCode": "AC01",
                            "reasonText": "Accepted by bank",
                            "originatorAccount": {
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                                "identification": {
                                    "identification": "NL81TRIO0212471066",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Smith Bonus Savings"
                            },
                            "batchBooking": false,
                            "requestedExecutionDate": "2018-07-23",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "LI21088100002324013AA",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Delivery Service"
                                }
                            },
                            "actions": ["APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 1
                        }, {
                            "id": "7d342c15-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "ae01a624-d473-48d6-af7d-f516292b39cb",
                            "status": "ACCEPTED",
                            "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                            "reasonCode": "AC01",
                            "reasonText": "Accepted by bank",
                            "originatorAccount": {
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                                "identification": {
                                    "identification": "FR188388353832IH3CAWFYXAA36",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr and Mrs J. Smith"
                            },
                            "batchBooking": false,
                            "requestedExecutionDate": "2018-06-12",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "99.99",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "MR1300020001010000123456753",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "counterparty": {
                                    "name": "John Smith"
                                }
                            },
                            "actions": ["APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }, {
                            "id": "7d341a2a-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "264b69e4-3df0-49c1-8cda-e2bb437461e8",
                            "status": "ACCEPTED",
                            "bankStatus": "FINISHED",
                            "originatorAccount": {
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                                "identification": {
                                    "identification": "FR188388353832IH3CAWFYXAA36",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr and Mrs J. Smith"
                            },
                            "batchBooking": true,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2018-08-11",
                            "paymentMode": "RECURRING",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2018-08-15",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "133.33",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "NO9386011117947",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Yellow"
                                },
                                "remittanceInformation": {
                                    "type": "STRUCTURED",
                                    "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                                }
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 9312
                        }, {
                            "id": "5cea81b2-0ff9-11e8-b642-0ed5f89f718b",
                            "approvalId": "61624e82-0ff9-11e8-b642-0ed5f89f718b",
                            "status": "ACCEPTED",
                            "bankStatus": "FINISHED",
                            "originatorAccount": {
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                                "identification": {
                                    "identification": "NL81TRIO0212471066",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Smith Bonus Savings",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                }
                            },
                            "batchBooking": true,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2018-08-11",
                            "paymentMode": "RECURRING",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2018-08-15",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "166.66",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "HU42117730161111101800000000",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Brown"
                                },
                                "remittanceInformation": {
                                    "type": "STRUCTURED",
                                    "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                                }
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 42,
                            "edited": false,
                            "originatingAccountCurrency": "EUR"
                        }, {
                            "id": "06db9298-189b-11e8-accf-0ed5f89f718b",
                            "approvalId": "11863018-189b-11e8-accf-0ed5f89f718b",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "0260-0959-3",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "John Doe",
                                "postalAddress": {
                                    "addressLine1": "228 Park Ave S",
                                    "town": "New York"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-08-12",
                            "paymentMode": "RECURRING",
                            "paymentType": "US_FOREIGN_WIRE",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2017-09-12",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "endToEndIdentification": "TRNSCT REF 1234567890",
                                "instructedAmount": {
                                    "amount": "104.66",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "NL91 ABNA 0417 1643 00",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Brown",
                                    "postalAddress": {
                                        "addressLine1": "2589 Peaceful Lane",
                                        "postCode": "44128",
                                        "town": "Warrensville Heights",
                                        "country": "US"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Unstructured content"
                                },
                                "counterpartyBank": {
                                    "bankBranchCode": "082000549",
                                    "name": "Morgan Chase",
                                    "postalAddress": {
                                        "addressLine1": "4789 Vernon Street",
                                        "postCode": "92028",
                                        "town": "Fallbrook",
                                        "country": "US"
                                    }
                                },
                                "correspondentBank": {
                                    "bankBranchCode": "122105155",
                                    "name": "Bank of America"
                                },
                                "intermediaryBank": {
                                    "bic": "DABAIE2D",
                                    "bankBranchCode": "102000021",
                                    "name": "SNSB"
                                },
                                "messageToBank": "My us international wire payment explanation.",
                                "targetCurrency": "EUR"
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 42
                        }, {
                            "id": "fa088818-623a-4260-bc46-1ff678de8dae",
                            "approvalId": "8605dc85-726c-4795-9b55-ff698ad2d1e4",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                                "identification": {
                                    "identification": "00400440116243",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr John Usmith",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, New York"
                                }
                            },
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "INTERNAL",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "accountType": "SAVINGS",
                                    "identification": {
                                        "identification": "3242342348899",
                                        "schemeName": "BBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "John Doe"
                                }
                            },
                            "actions": ["APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }, {
                            "id": "f58a410e-469c-41f1-8c51-21b6d24bd3c1",
                            "approvalId": "7527c230-01a7-41b8-a021-dc29aca98fe3",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                                "identification": {
                                    "identification": "00400440116243",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr John Usmith",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Los Angeles"
                                }
                            },
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "INTERNAL",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "134",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "accountType": "CHECKING",
                                    "identification": {
                                        "identification": "3242342123899",
                                        "schemeName": "BBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "Dan Brown"
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt`"
                                }
                            },
                            "actions": ["APPROVE", "REJECT", "EDIT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": true,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                            "status": "ACCEPTED",
                            "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                            "reasonCode": "AC01",
                            "reasonText": "Accepted by bank",
                            "originatorAccount": {
                                "identification": {
                                    "identification": "8a48e08c60daa5940160dac699050088",
                                    "schemeName": "ID"
                                }
                            },
                            "requestedExecutionDate": "2021-02-15",
                            "paymentType": "INTERNATIONAL_TRANSFER",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "29.99",
                                    "currencyCode": "INR"
                                },
                                "counterparty": {
                                    "name": "John Doe"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "counterpartyBank": {
                                    "bankBranchCode": "IDIA000A001",
                                    "bic": "IBKLINBBXXR",
                                    "name": "IDBA BANK IN",
                                    "postalAddress": {
                                        "addressLine1": "FINANCIAL PLAZA INDIA",
                                        "country": "IN"
                                    }
                                },
                                "correspondentBank": {
                                    "bankBranchCode": "011000015",
                                    "name": "FEDERAL RESERVE BANK"
                                },
                                "intermediaryBank": {
                                    "bankBranchCode": "122105155",
                                    "name": "SNSB2886803298"
                                },
                                "messageToBank": "My international payment explanation.",
                                "chargeBearer": "SHA",
                                "exchangeRateInformation": {
                                    "currencyCode": "INR",
                                    "rate": "89.00",
                                    "rateType": "AGREED",
                                    "contractIdentification": "/tbill/2018/T102993"
                                },
                                "transferFee": {
                                    "amount": "0.29",
                                    "currencyCode": "EUR"
                                },
                                "purposeOfPayment": {
                                    "code": "P1004"
                                }
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Payment type group invalid. Must be one of [credit, debit]"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServiceGetProgressStatusByPaymentOrderIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}/progress-status",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "progressStatus": "CONFIRMATION_PENDING"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServiceGetRateMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/rate",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "rate": 1.07
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServicePostCancelByPaymentOrderIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}/cancel",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "accepted": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServicePostPaymentOrdersMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "exportAllowed": true
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Limits has been breached, check the report for more details",
                        "payment": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-07-16",
                            "transferTransactionInformation": {
                                "name": "Jack Jackson",
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9",
                                        "zipcode": "1018LL",
                                        "city": "Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "version": 0
                        },
                        "checkTime": "2017-01-31T12:12:12Z",
                        "breachReport": [{
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "user-BBID": "oleksii",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Payments approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic payments"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-03-31T23:59:59Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }]
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServicePostValidateMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/validate",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Credit Account",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "isIntraLegalEntityPaymentOrder": false,
                        "canApprove": false,
                        "finalApprover": false,
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Credit Account",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CT_ILE",
                        "isIntraLegalEntityPaymentOrder": true,
                        "canApprove": false,
                        "finalApprover": false,
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Credit Account",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "isIntraLegalEntityPaymentOrder": false,
                        "canApprove": true,
                        "finalApprover": false,
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Credit Account",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "isIntraLegalEntityPaymentOrder": false,
                        "canApprove": true,
                        "finalApprover": true,
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServicePutApprovalsByPaymentOrderIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}/approvals",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "approvalStatus": "approvalStatus",
                        "reasonText": "reasonText",
                        "nextExecutionDate": "2000-01-23",
                        "errorDescription": "errorDescription",
                        "additions": {
                            "key": "additions"
                        },
                        "exportAllowed": true,
                        "bankStatus": "bankStatus",
                        "paymentSetupId": "paymentSetupId",
                        "transferFee": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "exchangeRateInformation": {
                            "rateType": "ACTUAL",
                            "contractIdentification": "contractIdentification",
                            "additions": {
                                "key": "additions"
                            },
                            "rate": "rate",
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "reasonCode": "reasonCode",
                        "paymentSubmissionId": "paymentSubmissionId"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Limits has been breached, check the report for more details",
                        "payment": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-07-16",
                            "transferTransactionInformation": {
                                "name": "Jack Jackson",
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9",
                                        "zipcode": "1018LL",
                                        "city": "Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "version": 0
                        },
                        "checkTime": "2017-01-31T12:12:12Z",
                        "breachReport": [{
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "user-BBID": "oleksii",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Payments approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic payments"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-03-31T23:59:59Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }]
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "challenges": [{
                                "challengeType": "reauth",
                                "acrValues": "txn-signature-silver txn-signature-gold",
                                "scope": "confirmation:3ea92d30-f460-4dde-b40a-e83a2f266a3a"
                            }],
                        "data": {
                            "approvalId": "9E2F9AC5-DD09-40C0-805E-147B0C565901",
                            "approvalRecordId": "DEDFDF28-690E-4B83-8BAF-C8ABF31EF70B",
                            "confirmationType": "approve-payment",
                            "paymentOrderId": "a3a2e499-bd58-4077-9991-19b2559f4796",
                            "amount": "12.95",
                            "currency": "EUR",
                            "counterpartyAccount": "NL06ABNA9691012820",
                            "counterpartyName": "Jouk"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServicePutBulkApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/bulk-approvals",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "APPROVED",
                        "paymentOrders": [{
                                "paymentOrderId": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                                "paymentOrder": {
                                    "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                                    "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                                    "status": "ENTERED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "0260-0959-3",
                                            "schemeName": "BBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "228 Park Ave S",
                                            "town": "New York"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "US_FOREIGN_WIRE",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith",
                                            "postalAddress": {
                                                "addressLine1": "2589 Peaceful Lane",
                                                "postCode": "44128",
                                                "town": "Warrensville Heights",
                                                "country": "US"
                                            }
                                        },
                                        "remittanceInformation": {
                                            "type": "UNSTRUCTURED",
                                            "content": "Unstructured content"
                                        },
                                        "counterpartyBank": {
                                            "bankBranchCode": "082000549",
                                            "name": "Morgan Chase",
                                            "postalAddress": {
                                                "addressLine1": "4789 Vernon Street",
                                                "postCode": "92028",
                                                "town": "Fallbrook",
                                                "country": "US"
                                            }
                                        },
                                        "correspondentBank": {
                                            "bankBranchCode": "122105155",
                                            "name": "Bank of America"
                                        },
                                        "intermediaryBank": {
                                            "bic": "DABAIE2D",
                                            "bankBranchCode": "102000021",
                                            "name": "SNSB"
                                        },
                                        "messageToBank": "My us international wire payment explanation.",
                                        "targetCurrency": "EUR"
                                    },
                                    "actions": ["APPROVE"],
                                    "permissibleActions": {
                                        "approve": true,
                                        "finalApprove": false,
                                        "reject": false,
                                        "cancel": false,
                                        "delete": false,
                                        "edit": false,
                                        "create": true,
                                        "export": false
                                    },
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "approvalStatus": "PENDING",
                                "status": {
                                    "code": "OK"
                                }
                            }, {
                                "paymentOrderId": "d2ff7c65-24ae-430f-92b9-c7ca5b143081",
                                "paymentOrder": {
                                    "id": "d2ff7c65-24ae-430f-92b9-c7ca5b143081",
                                    "approvalId": "2d9367dc-8af1-411d-81f6-9e28c46dd189",
                                    "status": "REJECTED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "NL81TRIO0212471066",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "SEPA_CREDIT_TRANSFER",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith"
                                        }
                                    },
                                    "actions": [],
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "approvalStatus": "REJECTED",
                                "status": {
                                    "code": "ERROR",
                                    "message": "Not allowed to update this approval, status is final",
                                    "errors": [{
                                            "message": "Not allowed to update this approval, status is final",
                                            "key": "paymentorder.api.Approval.NotAllowed",
                                            "context": {
                                                "status": "REJECTED"
                                            }
                                        }]
                                }
                            }, {
                                "paymentOrderId": "9a20be2b-b8f3-45dc-a625-55635235de4c",
                                "status": {
                                    "code": "ERROR",
                                    "message": "Payment not found",
                                    "errors": [{
                                            "message": "Payment not found",
                                            "key": "paymentorder.api.PaymentOrder.NotFound"
                                        }]
                                }
                            }, {
                                "paymentOrderId": "c7653c55-ee9b-4f65-96db-cbda76efd3ae",
                                "paymentOrder": {
                                    "id": "c7653c55-ee9b-4f65-96db-cbda76efd3ae",
                                    "approvalId": "fe383f48-df2e-4b17-a0d2-3443b2e3738c",
                                    "status": "ENTERED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "NL81TRIO0212471066",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "SEPA_CREDIT_TRANSFER",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith"
                                        }
                                    },
                                    "actions": [],
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "status": {
                                    "code": "ERROR",
                                    "message": "Approval not found",
                                    "errors": [{
                                            "message": "Approval not found",
                                            "key": "paymentorder.api.Approval.NotFound"
                                        }]
                                }
                            }],
                        "successCount": 1,
                        "failCount": 3
                    }
                },
                {
                    status: 200,
                    body: {
                        "approvalStatus": "APPROVED",
                        "paymentOrders": [{
                                "paymentOrderId": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                                "paymentOrder": {
                                    "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                                    "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                                    "status": "ENTERED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "0260-0959-3",
                                            "schemeName": "BBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "228 Park Ave S",
                                            "town": "New York"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "US_FOREIGN_WIRE",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith",
                                            "postalAddress": {
                                                "addressLine1": "2589 Peaceful Lane",
                                                "postCode": "44128",
                                                "town": "Warrensville Heights",
                                                "country": "US"
                                            }
                                        },
                                        "remittanceInformation": {
                                            "type": "UNSTRUCTURED",
                                            "content": "Unstructured content"
                                        },
                                        "counterpartyBank": {
                                            "bankBranchCode": "082000549",
                                            "name": "Morgan Chase",
                                            "postalAddress": {
                                                "addressLine1": "4789 Vernon Street",
                                                "postCode": "92028",
                                                "town": "Fallbrook",
                                                "country": "US"
                                            }
                                        },
                                        "correspondentBank": {
                                            "bankBranchCode": "122105155",
                                            "name": "Bank of America"
                                        },
                                        "intermediaryBank": {
                                            "bic": "DABAIE2D",
                                            "bankBranchCode": "102000021",
                                            "name": "SNSB"
                                        },
                                        "messageToBank": "My us international wire payment explanation.",
                                        "targetCurrency": "EUR"
                                    },
                                    "actions": ["APPROVE"],
                                    "permissibleActions": {
                                        "approve": true,
                                        "finalApprove": false,
                                        "reject": false,
                                        "cancel": false,
                                        "delete": false,
                                        "edit": false,
                                        "create": true,
                                        "export": false
                                    },
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "approvalStatus": "PENDING",
                                "status": {
                                    "code": "OK"
                                }
                            }, {
                                "paymentOrderId": "d2ff7c65-24ae-430f-92b9-c7ca5b143081",
                                "paymentOrder": {
                                    "id": "d2ff7c65-24ae-430f-92b9-c7ca5b143081",
                                    "approvalId": "2d9367dc-8af1-411d-81f6-9e28c46dd189",
                                    "status": "REJECTED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "NL81TRIO0212471066",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "SEPA_CREDIT_TRANSFER",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith"
                                        }
                                    },
                                    "actions": [],
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "approvalStatus": "REJECTED",
                                "status": {
                                    "code": "ERROR",
                                    "message": "Not allowed to update this approval, status is final",
                                    "errors": [{
                                            "message": "Not allowed to update this approval, status is final",
                                            "key": "paymentorder.api.Approval.NotAllowed",
                                            "context": {
                                                "status": "REJECTED"
                                            }
                                        }]
                                }
                            }, {
                                "paymentOrderId": "9a20be2b-b8f3-45dc-a625-55635235de4c",
                                "status": {
                                    "code": "ERROR",
                                    "message": "Payment not found",
                                    "errors": [{
                                            "message": "Payment not found",
                                            "key": "paymentorder.api.PaymentOrder.NotFound"
                                        }]
                                }
                            }, {
                                "paymentOrderId": "c7653c55-ee9b-4f65-96db-cbda76efd3ae",
                                "paymentOrder": {
                                    "id": "c7653c55-ee9b-4f65-96db-cbda76efd3ae",
                                    "approvalId": "fe383f48-df2e-4b17-a0d2-3443b2e3738c",
                                    "status": "ENTERED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "NL81TRIO0212471066",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "SEPA_CREDIT_TRANSFER",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith"
                                        }
                                    },
                                    "actions": [],
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "status": {
                                    "code": "ERROR",
                                    "message": "Limits has been breached, check report for details"
                                },
                                "breachReport": [{
                                        "breachInfo": [{
                                                "breachType": "THRESHOLD",
                                                "breachedLimitType": "PERIODIC",
                                                "currentConsumption": "999.00",
                                                "currentThreshold": "1000.00",
                                                "timeframe": {
                                                    "period": "DAILY",
                                                    "startTime": "2017-05-12T00:00:00.000Z",
                                                    "endTime": "2017-05-12T23:59:59.999Z"
                                                }
                                            }]
                                    }]
                            }],
                        "successCount": 1,
                        "failCount": 3
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServicePutPaymentOrderByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 200,
                    body: {
                        "approvalStatus": "approvalStatus",
                        "reasonText": "reasonText",
                        "nextExecutionDate": "2000-01-23",
                        "errorDescription": "errorDescription",
                        "additions": {
                            "key": "additions"
                        },
                        "exportAllowed": true,
                        "bankStatus": "bankStatus",
                        "paymentSetupId": "paymentSetupId",
                        "transferFee": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "exchangeRateInformation": {
                            "rateType": "ACTUAL",
                            "contractIdentification": "contractIdentification",
                            "additions": {
                                "key": "additions"
                            },
                            "rate": "rate",
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "reasonCode": "reasonCode",
                        "paymentSubmissionId": "paymentSubmissionId"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 201,
                    body: {
                        "approvalStatus": "approvalStatus",
                        "reasonText": "reasonText",
                        "nextExecutionDate": "2000-01-23",
                        "errorDescription": "errorDescription",
                        "additions": {
                            "key": "additions"
                        },
                        "exportAllowed": true,
                        "bankStatus": "bankStatus",
                        "paymentSetupId": "paymentSetupId",
                        "transferFee": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "exchangeRateInformation": {
                            "rateType": "ACTUAL",
                            "contractIdentification": "contractIdentification",
                            "additions": {
                                "key": "additions"
                            },
                            "rate": "rate",
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "reasonCode": "reasonCode",
                        "paymentSubmissionId": "paymentSubmissionId"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "approvalStatus": "approvalStatus",
                        "reasonText": "reasonText",
                        "nextExecutionDate": "2000-01-23",
                        "errorDescription": "errorDescription",
                        "additions": {
                            "key": "additions"
                        },
                        "exportAllowed": true,
                        "bankStatus": "bankStatus",
                        "paymentSetupId": "paymentSetupId",
                        "transferFee": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "exchangeRateInformation": {
                            "rateType": "ACTUAL",
                            "contractIdentification": "contractIdentification",
                            "additions": {
                                "key": "additions"
                            },
                            "rate": "rate",
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "reasonCode": "reasonCode",
                        "paymentSubmissionId": "paymentSubmissionId"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Limits has been breached, check the report for more details",
                        "payment": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-07-16",
                            "transferTransactionInformation": {
                                "name": "Jack Jackson",
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9",
                                        "zipcode": "1018LL",
                                        "city": "Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "version": 0
                        },
                        "checkTime": "2017-01-31T12:12:12Z",
                        "breachReport": [{
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "user-BBID": "oleksii",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Payments approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic payments"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-03-31T23:59:59Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }]
                            }]
                    }
                },
            ]
        }]);
    var PaymentOrdersHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "name": "Smith Bonus Savings",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                                "identification": {
                                    "identification": "NL81TRIO0212471066",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Smith Bonus Savings",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "MR1300020001010000123456753",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "counterparty": {
                                    "name": "John Smith"
                                }
                            },
                            "actions": ["APPROVE", "FINAL_APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": true,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true,
                                "export": false
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 1
                        }, {
                            "id": "06db9298-189b-11e8-accf-0ed5f89f718b",
                            "approvalId": "11863018-189b-11e8-accf-0ed5f89f718b",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "name": "John Doe",
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "0260-0959-3",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "John Doe",
                                "postalAddress": {
                                    "addressLine1": "228 Park Ave S",
                                    "town": "New York"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-08-12",
                            "paymentMode": "RECURRING",
                            "paymentType": "US_FOREIGN_WIRE",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2017-09-12",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "endToEndIdentification": "TRNSCT REF 1234567890",
                                "instructedAmount": {
                                    "amount": "104.66",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "NL91 ABNA 0417 1643 00",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Brown",
                                    "postalAddress": {
                                        "addressLine1": "2589 Peaceful Lane",
                                        "postCode": "44128",
                                        "town": "Warrensville Heights",
                                        "country": "US"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Unstructured content"
                                },
                                "counterpartyBank": {
                                    "bankBranchCode": "082000549",
                                    "name": "Morgan Chase",
                                    "postalAddress": {
                                        "addressLine1": "4789 Vernon Street",
                                        "postCode": "92028",
                                        "town": "Fallbrook",
                                        "country": "US"
                                    }
                                },
                                "correspondentBank": {
                                    "bankBranchCode": "122105155",
                                    "name": "Bank of America"
                                },
                                "intermediaryBank": {
                                    "bic": "DABAIE2D",
                                    "bankBranchCode": "102000021",
                                    "name": "SNSB"
                                },
                                "messageToBank": "My us international wire payment explanation.",
                                "targetCurrency": "EUR"
                            },
                            "actions": ["APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true,
                                "export": false
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 42
                        }, {
                            "id": "fa088818-623a-4260-bc46-1ff678de8dae",
                            "approvalId": "8605dc85-726c-4795-9b55-ff698ad2d1e4",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "name": "Mr John Usmith",
                                "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                                "identification": {
                                    "identification": "00400440116243",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr John Usmith",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, New York"
                                }
                            },
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "INTERNAL",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "accountType": "SAVINGS",
                                    "identification": {
                                        "identification": "3242342348899",
                                        "schemeName": "BBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "John Doe"
                                }
                            },
                            "actions": ["APPROVE", "REJECT", "EDIT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": true,
                                "create": true,
                                "export": false
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 1
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/currencies",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "code": "EUR"
                        }, {
                            "code": "USD"
                        }, {
                            "code": "GBP"
                        }, {
                            "code": "ISK"
                        }, {
                            "code": "KWD"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "actions": ["EDIT"],
                        "permissibleActions": {
                            "approve": false,
                            "finalApprove": false,
                            "reject": false,
                            "cancel": false,
                            "delete": false,
                            "edit": true,
                            "create": true,
                            "export": true
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "contextualInformation": {
                            "externalUserId": "b3e4692d-6772-4fb2-9446-132435465768",
                            "internalUserId": "b3e4692d-6772-4fb2-9446-374857684932",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "legalEntityId": "27263171-94d5-4d82-975c-61d8c41644d0",
                            "origin": "actions"
                        },
                        "originatorAccountCurrency": "EUR",
                        "version": 1
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2021-07-01",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "actions": ["EDIT"],
                        "permissibleActions": {
                            "approve": false,
                            "finalApprove": false,
                            "reject": false,
                            "cancel": false,
                            "delete": false,
                            "edit": true,
                            "create": true,
                            "export": true
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "contextualInformation": {
                            "externalUserId": "b3e4692d-6772-4fb2-9446-132435465768",
                            "internalUserId": "b3e4692d-6772-4fb2-9446-374857684932",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "legalEntityId": "27263171-94d5-4d82-975c-61d8c41644d0",
                            "origin": "actions"
                        },
                        "originatorAccountCurrency": "EUR",
                        "edited": true,
                        "editedPaymentOrder": {
                            "id": "df341c28-6714-11e7-907b-a6006ad3asa0",
                            "approvalId": "49dad7ab-604b-407a-ba47-a61ad93df4ce",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2021-07-01",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "6000",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "actions": ["EDIT"],
                            "permissibleActions": {
                                "approve": false,
                                "finalApprove": false,
                                "reject": false,
                                "cancel": false,
                                "delete": false,
                                "edit": true,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T15:33:13.452Z",
                            "contextualInformation": {
                                "externalUserId": "b3e4692d-6772-4fb2-9446-132435465768",
                                "internalUserId": "b3e4692d-6772-4fb2-9446-374857684932",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "legalEntityId": "27263171-94d5-4d82-975c-61d8c41644d0",
                                "origin": "actions"
                            },
                            "originatorAccountCurrency": "EUR",
                            "edited": false,
                            "version": 1
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-07-22",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "version": 1,
                        "actions": [],
                        "createdBy": "U00243",
                        "createdAt": "2018-07-22T13:44:02Z",
                        "originatorAccountCurrency": "EUR",
                        "approvalDetails": {
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "b3e4692d-6772-4fb2-9446-bebebebebebe",
                            "externalUserId": "davyJones88",
                            "userFullName": "Davy Jones",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "dataAccessItemId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "resource": "Payments",
                            "function": "SEPA_CREDIT_TRANSFER",
                            "status": "PENDING",
                            "createdAt": "2018-07-22T13:44:02Z",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "b3e4692d-6772-4fb2-9446-babababababa",
                                    "externalUserId": "flying-dutchman",
                                    "userFullName": "Jack Sparrow",
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "status": "APPROVED",
                                    "createdAt": "2018-07-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "items": [{
                                        "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "numberOfApprovals": 1
                                    }]
                            },
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-07-22",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "version": 1,
                        "actions": [],
                        "createdBy": "U00243",
                        "createdAt": "2018-07-22T13:44:02Z",
                        "originatorAccountCurrency": "EUR",
                        "approvalDetails": {
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "b3e4692d-6772-4fb2-9446-bebebebebebe",
                            "externalUserId": "davyJones88",
                            "userFullName": "Davy Jones",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "dataAccessItemId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "resource": "Payments",
                            "function": "SEPA_CREDIT_TRANSFER",
                            "status": "PENDING",
                            "createdAt": "2018-07-22T13:44:02Z",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "b3e4692d-6772-4fb2-9446-babababababa",
                                    "externalUserId": "flying-dutchman",
                                    "userFullName": "Jack Sparrow",
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "status": "APPROVED",
                                    "createdAt": "2018-07-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "8ac202da-273b-4d2b-8aa6-c12f9d9fa736",
                                "name": "Or policy",
                                "description": "A policy that requires A OR B approvals",
                                "logicalItems": [{
                                        "rank": 1,
                                        "operator": "OR",
                                        "items": [{
                                                "approvalType": {
                                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                                    "name": "A",
                                                    "description": "Or A approval",
                                                    "rank": 100
                                                },
                                                "numberOfApprovals": 1
                                            }, {
                                                "approvalType": {
                                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                                    "name": "B",
                                                    "description": "Or B approval",
                                                    "rank": 101
                                                },
                                                "numberOfApprovals": 1
                                            }]
                                    }]
                            },
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "identification": {
                                "identification": "8a48e08c60daa5940160dac699050088",
                                "schemeName": "ID"
                            }
                        },
                        "requestedExecutionDate": "2021-02-15",
                        "paymentType": "INTERNATIONAL_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "100",
                                "currencyCode": "INR"
                            },
                            "counterparty": {
                                "name": "John Doe"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "counterpartyBank": {
                                "bankBranchCode": "IDIA000A001",
                                "bic": "IBKLINBBXXR",
                                "name": "IDBA BANK",
                                "postalAddress": {
                                    "addressLine1": "FINANCIAL PLAZA INDIA",
                                    "country": "IN"
                                }
                            },
                            "correspondentBank": {
                                "bankBranchCode": "011000015",
                                "name": "FEDERAL RESERVE BANK"
                            },
                            "intermediaryBank": {
                                "bankBranchCode": "122105155",
                                "name": "SNSB2886803298"
                            },
                            "messageToBank": "My international payment explanation.",
                            "chargeBearer": "SHA",
                            "exchangeRateInformation": {
                                "currencyCode": "INR",
                                "rate": "89.00",
                                "rateType": "AGREED",
                                "contractIdentification": "/tbill/2018/T102993"
                            },
                            "transferFee": {
                                "amount": "15",
                                "currencyCode": "EUR"
                            },
                            "purposeOfPayment": {
                                "code": "P1004",
                                "description": "Legal services"
                            }
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}/export",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                                "identification": {
                                    "identification": "NL81TRIO0212471066",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Smith Bonus Savings",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                }
                            },
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "MR1300020001010000123456753",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "counterparty": {
                                    "name": "John Smith"
                                }
                            },
                            "actions": ["APPROVE", "FINAL_APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": true,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": true,
                            "version": 1
                        }, {
                            "id": "0d0b6350-0ff9-11e8-b642-0ed5f89f718b",
                            "approvalId": "518bbd4a-0ff9-11e8-b642-0ed5f89f718b",
                            "status": "PROCESSED",
                            "bankStatus": "FINISHED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL18INGB0664923638",
                                    "schemeName": "IBAN"
                                },
                                "name": "Credit Account"
                            },
                            "originator": {
                                "name": "Random Account",
                                "postalAddress": {
                                    "country": "NL"
                                }
                            },
                            "batchBooking": true,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2018-08-11",
                            "paymentMode": "RECURRING",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2018-08-15",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "100.00",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "NO9386011117947",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Yellow"
                                },
                                "remittanceInformation": {
                                    "type": "STRUCTURED",
                                    "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                                }
                            },
                            "actions": ["EDIT"],
                            "permissibleActions": {
                                "approve": false,
                                "finalApprove": false,
                                "reject": false,
                                "cancel": false,
                                "delete": false,
                                "edit": true,
                                "create": true,
                                "export": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }, {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "c383c69f-38bf-4e3e-ad3f-5f58cf971bb1",
                            "status": "REJECTED",
                            "bankStatus": "ACCOUNT_BLOCKED",
                            "reasonCode": "AB01",
                            "reasonText": "Account blocked",
                            "errorDescription": "Blocked by bank.",
                            "originatorAccount": {
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                                "identification": {
                                    "identification": "FR188388353832IH3CAWFYXAA36",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr and Mrs J. Smith"
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2018-07-16",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "LT121000011101001000",
                                        "schemeName": "IBAN"
                                    },
                                    "name": "ABN Amro"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }, {
                            "id": "7d34215a-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "ae01c614-d473-48d6-af7d-f516292b39cb",
                            "status": "ACCEPTED",
                            "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                            "reasonCode": "AC01",
                            "reasonText": "Accepted by bank",
                            "originatorAccount": {
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                                "identification": {
                                    "identification": "NL81TRIO0212471066",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Smith Bonus Savings"
                            },
                            "batchBooking": false,
                            "requestedExecutionDate": "2018-07-23",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "LI21088100002324013AA",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Delivery Service"
                                }
                            },
                            "actions": ["APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 1
                        }, {
                            "id": "7d342c15-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "ae01a624-d473-48d6-af7d-f516292b39cb",
                            "status": "ACCEPTED",
                            "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                            "reasonCode": "AC01",
                            "reasonText": "Accepted by bank",
                            "originatorAccount": {
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                                "identification": {
                                    "identification": "FR188388353832IH3CAWFYXAA36",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr and Mrs J. Smith"
                            },
                            "batchBooking": false,
                            "requestedExecutionDate": "2018-06-12",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "99.99",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "MR1300020001010000123456753",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "counterparty": {
                                    "name": "John Smith"
                                }
                            },
                            "actions": ["APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }, {
                            "id": "7d341a2a-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "264b69e4-3df0-49c1-8cda-e2bb437461e8",
                            "status": "ACCEPTED",
                            "bankStatus": "FINISHED",
                            "originatorAccount": {
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                                "identification": {
                                    "identification": "FR188388353832IH3CAWFYXAA36",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr and Mrs J. Smith"
                            },
                            "batchBooking": true,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2018-08-11",
                            "paymentMode": "RECURRING",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2018-08-15",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "133.33",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "NO9386011117947",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Yellow"
                                },
                                "remittanceInformation": {
                                    "type": "STRUCTURED",
                                    "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                                }
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 9312
                        }, {
                            "id": "5cea81b2-0ff9-11e8-b642-0ed5f89f718b",
                            "approvalId": "61624e82-0ff9-11e8-b642-0ed5f89f718b",
                            "status": "ACCEPTED",
                            "bankStatus": "FINISHED",
                            "originatorAccount": {
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                                "identification": {
                                    "identification": "NL81TRIO0212471066",
                                    "schemeName": "IBAN"
                                }
                            },
                            "originator": {
                                "name": "Smith Bonus Savings",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                }
                            },
                            "batchBooking": true,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2018-08-11",
                            "paymentMode": "RECURRING",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2018-08-15",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "166.66",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "HU42117730161111101800000000",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Brown"
                                },
                                "remittanceInformation": {
                                    "type": "STRUCTURED",
                                    "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                                }
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "version": 42,
                            "edited": false,
                            "originatingAccountCurrency": "EUR"
                        }, {
                            "id": "06db9298-189b-11e8-accf-0ed5f89f718b",
                            "approvalId": "11863018-189b-11e8-accf-0ed5f89f718b",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "0260-0959-3",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "John Doe",
                                "postalAddress": {
                                    "addressLine1": "228 Park Ave S",
                                    "town": "New York"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-08-12",
                            "paymentMode": "RECURRING",
                            "paymentType": "US_FOREIGN_WIRE",
                            "schedule": {
                                "transferFrequency": "MONTHLY",
                                "on": 1,
                                "startDate": "2017-08-12",
                                "every": "1",
                                "nextExecutionDate": "2017-09-12",
                                "endDate": "2018-05-12"
                            },
                            "transferTransactionInformation": {
                                "endToEndIdentification": "TRNSCT REF 1234567890",
                                "instructedAmount": {
                                    "amount": "104.66",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "NL91 ABNA 0417 1643 00",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "counterparty": {
                                    "name": "Jack Brown",
                                    "postalAddress": {
                                        "addressLine1": "2589 Peaceful Lane",
                                        "postCode": "44128",
                                        "town": "Warrensville Heights",
                                        "country": "US"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Unstructured content"
                                },
                                "counterpartyBank": {
                                    "bankBranchCode": "082000549",
                                    "name": "Morgan Chase",
                                    "postalAddress": {
                                        "addressLine1": "4789 Vernon Street",
                                        "postCode": "92028",
                                        "town": "Fallbrook",
                                        "country": "US"
                                    }
                                },
                                "correspondentBank": {
                                    "bankBranchCode": "122105155",
                                    "name": "Bank of America"
                                },
                                "intermediaryBank": {
                                    "bic": "DABAIE2D",
                                    "bankBranchCode": "102000021",
                                    "name": "SNSB"
                                },
                                "messageToBank": "My us international wire payment explanation.",
                                "targetCurrency": "EUR"
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 42
                        }, {
                            "id": "fa088818-623a-4260-bc46-1ff678de8dae",
                            "approvalId": "8605dc85-726c-4795-9b55-ff698ad2d1e4",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                                "identification": {
                                    "identification": "00400440116243",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr John Usmith",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, New York"
                                }
                            },
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "INTERNAL",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "749.99",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "accountType": "SAVINGS",
                                    "identification": {
                                        "identification": "3242342348899",
                                        "schemeName": "BBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "John Doe"
                                }
                            },
                            "actions": ["APPROVE", "REJECT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": false,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }, {
                            "id": "f58a410e-469c-41f1-8c51-21b6d24bd3c1",
                            "approvalId": "7527c230-01a7-41b8-a021-dc29aca98fe3",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                                "identification": {
                                    "identification": "00400440116243",
                                    "schemeName": "BBAN"
                                }
                            },
                            "originator": {
                                "name": "Mr John Usmith",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Los Angeles"
                                }
                            },
                            "instructionPriority": "HIGH",
                            "requestedExecutionDate": "2018-08-16",
                            "paymentMode": "SINGLE",
                            "paymentType": "INTERNAL",
                            "transferTransactionInformation": {
                                "endToEndIdentification": "Some reference",
                                "instructedAmount": {
                                    "amount": "134",
                                    "currencyCode": "USD"
                                },
                                "counterpartyAccount": {
                                    "accountType": "CHECKING",
                                    "identification": {
                                        "identification": "3242342123899",
                                        "schemeName": "BBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "Dan Brown"
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt`"
                                }
                            },
                            "actions": ["APPROVE", "REJECT", "EDIT"],
                            "permissibleActions": {
                                "approve": true,
                                "finalApprove": false,
                                "reject": true,
                                "cancel": false,
                                "delete": false,
                                "edit": true,
                                "create": true
                            },
                            "createdBy": "U00243",
                            "createdAt": "2017-05-12T14:33:13.452Z",
                            "edited": false,
                            "version": 1
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                            "status": "ACCEPTED",
                            "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                            "reasonCode": "AC01",
                            "reasonText": "Accepted by bank",
                            "originatorAccount": {
                                "identification": {
                                    "identification": "8a48e08c60daa5940160dac699050088",
                                    "schemeName": "ID"
                                }
                            },
                            "requestedExecutionDate": "2021-02-15",
                            "paymentType": "INTERNATIONAL_TRANSFER",
                            "transferTransactionInformation": {
                                "instructedAmount": {
                                    "amount": "29.99",
                                    "currencyCode": "INR"
                                },
                                "counterparty": {
                                    "name": "John Doe"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "counterpartyBank": {
                                    "bankBranchCode": "IDIA000A001",
                                    "bic": "IBKLINBBXXR",
                                    "name": "IDBA BANK IN",
                                    "postalAddress": {
                                        "addressLine1": "FINANCIAL PLAZA INDIA",
                                        "country": "IN"
                                    }
                                },
                                "correspondentBank": {
                                    "bankBranchCode": "011000015",
                                    "name": "FEDERAL RESERVE BANK"
                                },
                                "intermediaryBank": {
                                    "bankBranchCode": "122105155",
                                    "name": "SNSB2886803298"
                                },
                                "messageToBank": "My international payment explanation.",
                                "chargeBearer": "SHA",
                                "exchangeRateInformation": {
                                    "currencyCode": "INR",
                                    "rate": "89.00",
                                    "rateType": "AGREED",
                                    "contractIdentification": "/tbill/2018/T102993"
                                },
                                "transferFee": {
                                    "amount": "0.29",
                                    "currencyCode": "EUR"
                                },
                                "purposeOfPayment": {
                                    "code": "P1004"
                                }
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Payment type group invalid. Must be one of [credit, debit]"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}/progress-status",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "progressStatus": "CONFIRMATION_PENDING"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/rate",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "rate": 1.07
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}/cancel",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "accepted": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "exportAllowed": true
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Limits has been breached, check the report for more details",
                        "payment": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-07-16",
                            "transferTransactionInformation": {
                                "name": "Jack Jackson",
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9",
                                        "zipcode": "1018LL",
                                        "city": "Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "version": 0
                        },
                        "checkTime": "2017-01-31T12:12:12Z",
                        "breachReport": [{
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "user-BBID": "oleksii",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Payments approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic payments"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-03-31T23:59:59Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }]
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/validate",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Credit Account",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "isIntraLegalEntityPaymentOrder": false,
                        "canApprove": false,
                        "finalApprover": false,
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Credit Account",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CT_ILE",
                        "isIntraLegalEntityPaymentOrder": true,
                        "canApprove": false,
                        "finalApprover": false,
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Credit Account",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "isIntraLegalEntityPaymentOrder": false,
                        "canApprove": true,
                        "finalApprover": false,
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL53RABO0309349755",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Credit Account",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "isIntraLegalEntityPaymentOrder": false,
                        "canApprove": true,
                        "finalApprover": true,
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "FR708933019952AUNHQNQ0KZ",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}/approvals",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "approvalStatus": "approvalStatus",
                        "reasonText": "reasonText",
                        "nextExecutionDate": "2000-01-23",
                        "errorDescription": "errorDescription",
                        "additions": {
                            "key": "additions"
                        },
                        "exportAllowed": true,
                        "bankStatus": "bankStatus",
                        "paymentSetupId": "paymentSetupId",
                        "transferFee": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "exchangeRateInformation": {
                            "rateType": "ACTUAL",
                            "contractIdentification": "contractIdentification",
                            "additions": {
                                "key": "additions"
                            },
                            "rate": "rate",
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "reasonCode": "reasonCode",
                        "paymentSubmissionId": "paymentSubmissionId"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Limits has been breached, check the report for more details",
                        "payment": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-07-16",
                            "transferTransactionInformation": {
                                "name": "Jack Jackson",
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9",
                                        "zipcode": "1018LL",
                                        "city": "Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "version": 0
                        },
                        "checkTime": "2017-01-31T12:12:12Z",
                        "breachReport": [{
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "user-BBID": "oleksii",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Payments approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic payments"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-03-31T23:59:59Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }]
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "challenges": [{
                                "challengeType": "reauth",
                                "acrValues": "txn-signature-silver txn-signature-gold",
                                "scope": "confirmation:3ea92d30-f460-4dde-b40a-e83a2f266a3a"
                            }],
                        "data": {
                            "approvalId": "9E2F9AC5-DD09-40C0-805E-147B0C565901",
                            "approvalRecordId": "DEDFDF28-690E-4B83-8BAF-C8ABF31EF70B",
                            "confirmationType": "approve-payment",
                            "paymentOrderId": "a3a2e499-bd58-4077-9991-19b2559f4796",
                            "amount": "12.95",
                            "currency": "EUR",
                            "counterpartyAccount": "NL06ABNA9691012820",
                            "counterpartyName": "Jouk"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/bulk-approvals",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "APPROVED",
                        "paymentOrders": [{
                                "paymentOrderId": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                                "paymentOrder": {
                                    "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                                    "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                                    "status": "ENTERED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "0260-0959-3",
                                            "schemeName": "BBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "228 Park Ave S",
                                            "town": "New York"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "US_FOREIGN_WIRE",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith",
                                            "postalAddress": {
                                                "addressLine1": "2589 Peaceful Lane",
                                                "postCode": "44128",
                                                "town": "Warrensville Heights",
                                                "country": "US"
                                            }
                                        },
                                        "remittanceInformation": {
                                            "type": "UNSTRUCTURED",
                                            "content": "Unstructured content"
                                        },
                                        "counterpartyBank": {
                                            "bankBranchCode": "082000549",
                                            "name": "Morgan Chase",
                                            "postalAddress": {
                                                "addressLine1": "4789 Vernon Street",
                                                "postCode": "92028",
                                                "town": "Fallbrook",
                                                "country": "US"
                                            }
                                        },
                                        "correspondentBank": {
                                            "bankBranchCode": "122105155",
                                            "name": "Bank of America"
                                        },
                                        "intermediaryBank": {
                                            "bic": "DABAIE2D",
                                            "bankBranchCode": "102000021",
                                            "name": "SNSB"
                                        },
                                        "messageToBank": "My us international wire payment explanation.",
                                        "targetCurrency": "EUR"
                                    },
                                    "actions": ["APPROVE"],
                                    "permissibleActions": {
                                        "approve": true,
                                        "finalApprove": false,
                                        "reject": false,
                                        "cancel": false,
                                        "delete": false,
                                        "edit": false,
                                        "create": true,
                                        "export": false
                                    },
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "approvalStatus": "PENDING",
                                "status": {
                                    "code": "OK"
                                }
                            }, {
                                "paymentOrderId": "d2ff7c65-24ae-430f-92b9-c7ca5b143081",
                                "paymentOrder": {
                                    "id": "d2ff7c65-24ae-430f-92b9-c7ca5b143081",
                                    "approvalId": "2d9367dc-8af1-411d-81f6-9e28c46dd189",
                                    "status": "REJECTED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "NL81TRIO0212471066",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "SEPA_CREDIT_TRANSFER",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith"
                                        }
                                    },
                                    "actions": [],
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "approvalStatus": "REJECTED",
                                "status": {
                                    "code": "ERROR",
                                    "message": "Not allowed to update this approval, status is final",
                                    "errors": [{
                                            "message": "Not allowed to update this approval, status is final",
                                            "key": "paymentorder.api.Approval.NotAllowed",
                                            "context": {
                                                "status": "REJECTED"
                                            }
                                        }]
                                }
                            }, {
                                "paymentOrderId": "9a20be2b-b8f3-45dc-a625-55635235de4c",
                                "status": {
                                    "code": "ERROR",
                                    "message": "Payment not found",
                                    "errors": [{
                                            "message": "Payment not found",
                                            "key": "paymentorder.api.PaymentOrder.NotFound"
                                        }]
                                }
                            }, {
                                "paymentOrderId": "c7653c55-ee9b-4f65-96db-cbda76efd3ae",
                                "paymentOrder": {
                                    "id": "c7653c55-ee9b-4f65-96db-cbda76efd3ae",
                                    "approvalId": "fe383f48-df2e-4b17-a0d2-3443b2e3738c",
                                    "status": "ENTERED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "NL81TRIO0212471066",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "SEPA_CREDIT_TRANSFER",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith"
                                        }
                                    },
                                    "actions": [],
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "status": {
                                    "code": "ERROR",
                                    "message": "Approval not found",
                                    "errors": [{
                                            "message": "Approval not found",
                                            "key": "paymentorder.api.Approval.NotFound"
                                        }]
                                }
                            }],
                        "successCount": 1,
                        "failCount": 3
                    }
                },
                {
                    status: 200,
                    body: {
                        "approvalStatus": "APPROVED",
                        "paymentOrders": [{
                                "paymentOrderId": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                                "paymentOrder": {
                                    "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                                    "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                                    "status": "ENTERED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "0260-0959-3",
                                            "schemeName": "BBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "228 Park Ave S",
                                            "town": "New York"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "US_FOREIGN_WIRE",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith",
                                            "postalAddress": {
                                                "addressLine1": "2589 Peaceful Lane",
                                                "postCode": "44128",
                                                "town": "Warrensville Heights",
                                                "country": "US"
                                            }
                                        },
                                        "remittanceInformation": {
                                            "type": "UNSTRUCTURED",
                                            "content": "Unstructured content"
                                        },
                                        "counterpartyBank": {
                                            "bankBranchCode": "082000549",
                                            "name": "Morgan Chase",
                                            "postalAddress": {
                                                "addressLine1": "4789 Vernon Street",
                                                "postCode": "92028",
                                                "town": "Fallbrook",
                                                "country": "US"
                                            }
                                        },
                                        "correspondentBank": {
                                            "bankBranchCode": "122105155",
                                            "name": "Bank of America"
                                        },
                                        "intermediaryBank": {
                                            "bic": "DABAIE2D",
                                            "bankBranchCode": "102000021",
                                            "name": "SNSB"
                                        },
                                        "messageToBank": "My us international wire payment explanation.",
                                        "targetCurrency": "EUR"
                                    },
                                    "actions": ["APPROVE"],
                                    "permissibleActions": {
                                        "approve": true,
                                        "finalApprove": false,
                                        "reject": false,
                                        "cancel": false,
                                        "delete": false,
                                        "edit": false,
                                        "create": true,
                                        "export": false
                                    },
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "approvalStatus": "PENDING",
                                "status": {
                                    "code": "OK"
                                }
                            }, {
                                "paymentOrderId": "d2ff7c65-24ae-430f-92b9-c7ca5b143081",
                                "paymentOrder": {
                                    "id": "d2ff7c65-24ae-430f-92b9-c7ca5b143081",
                                    "approvalId": "2d9367dc-8af1-411d-81f6-9e28c46dd189",
                                    "status": "REJECTED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "NL81TRIO0212471066",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "SEPA_CREDIT_TRANSFER",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith"
                                        }
                                    },
                                    "actions": [],
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "approvalStatus": "REJECTED",
                                "status": {
                                    "code": "ERROR",
                                    "message": "Not allowed to update this approval, status is final",
                                    "errors": [{
                                            "message": "Not allowed to update this approval, status is final",
                                            "key": "paymentorder.api.Approval.NotAllowed",
                                            "context": {
                                                "status": "REJECTED"
                                            }
                                        }]
                                }
                            }, {
                                "paymentOrderId": "9a20be2b-b8f3-45dc-a625-55635235de4c",
                                "status": {
                                    "code": "ERROR",
                                    "message": "Payment not found",
                                    "errors": [{
                                            "message": "Payment not found",
                                            "key": "paymentorder.api.PaymentOrder.NotFound"
                                        }]
                                }
                            }, {
                                "paymentOrderId": "c7653c55-ee9b-4f65-96db-cbda76efd3ae",
                                "paymentOrder": {
                                    "id": "c7653c55-ee9b-4f65-96db-cbda76efd3ae",
                                    "approvalId": "fe383f48-df2e-4b17-a0d2-3443b2e3738c",
                                    "status": "ENTERED",
                                    "originatorAccount": {
                                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                        "externalArrangementId": "729190421493794513132",
                                        "identification": {
                                            "identification": "NL81TRIO0212471066",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "originator": {
                                        "name": "Smith Bonus Savings",
                                        "postalAddress": {
                                            "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                                        }
                                    },
                                    "instructionPriority": "HIGH",
                                    "requestedExecutionDate": "2017-08-16",
                                    "paymentMode": "SINGLE",
                                    "paymentType": "SEPA_CREDIT_TRANSFER",
                                    "transferTransactionInformation": {
                                        "endToEndIdentification": "Some reference",
                                        "instructedAmount": {
                                            "amount": "749.99",
                                            "currencyCode": "EUR"
                                        },
                                        "counterpartyAccount": {
                                            "identification": {
                                                "identification": "MR1300020001010000123456753",
                                                "schemeName": "IBAN"
                                            },
                                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                            "externalArrangementId": "9669274787995385962"
                                        },
                                        "counterparty": {
                                            "name": "John Smith"
                                        }
                                    },
                                    "actions": [],
                                    "createdBy": "U00243",
                                    "createdAt": "2017-05-12T14:33:13.452Z",
                                    "version": 2
                                },
                                "status": {
                                    "code": "ERROR",
                                    "message": "Limits has been breached, check report for details"
                                },
                                "breachReport": [{
                                        "breachInfo": [{
                                                "breachType": "THRESHOLD",
                                                "breachedLimitType": "PERIODIC",
                                                "currentConsumption": "999.00",
                                                "currentThreshold": "1000.00",
                                                "timeframe": {
                                                    "period": "DAILY",
                                                    "startTime": "2017-05-12T00:00:00.000Z",
                                                    "endTime": "2017-05-12T23:59:59.999Z"
                                                }
                                            }]
                                    }]
                            }],
                        "successCount": 1,
                        "failCount": 3
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/payment-orders/{paymentOrderId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 200,
                    body: {
                        "approvalStatus": "approvalStatus",
                        "reasonText": "reasonText",
                        "nextExecutionDate": "2000-01-23",
                        "errorDescription": "errorDescription",
                        "additions": {
                            "key": "additions"
                        },
                        "exportAllowed": true,
                        "bankStatus": "bankStatus",
                        "paymentSetupId": "paymentSetupId",
                        "transferFee": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "exchangeRateInformation": {
                            "rateType": "ACTUAL",
                            "contractIdentification": "contractIdentification",
                            "additions": {
                                "key": "additions"
                            },
                            "rate": "rate",
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "reasonCode": "reasonCode",
                        "paymentSubmissionId": "paymentSubmissionId"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 201,
                    body: {
                        "approvalStatus": "approvalStatus",
                        "reasonText": "reasonText",
                        "nextExecutionDate": "2000-01-23",
                        "errorDescription": "errorDescription",
                        "additions": {
                            "key": "additions"
                        },
                        "exportAllowed": true,
                        "bankStatus": "bankStatus",
                        "paymentSetupId": "paymentSetupId",
                        "transferFee": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "exchangeRateInformation": {
                            "rateType": "ACTUAL",
                            "contractIdentification": "contractIdentification",
                            "additions": {
                                "key": "additions"
                            },
                            "rate": "rate",
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "reasonCode": "reasonCode",
                        "paymentSubmissionId": "paymentSubmissionId"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "af2599ef-759a-4b78-8e67-4949055a532b",
                        "status": "ENTERED",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 202,
                    body: {
                        "approvalStatus": "approvalStatus",
                        "reasonText": "reasonText",
                        "nextExecutionDate": "2000-01-23",
                        "errorDescription": "errorDescription",
                        "additions": {
                            "key": "additions"
                        },
                        "exportAllowed": true,
                        "bankStatus": "bankStatus",
                        "paymentSetupId": "paymentSetupId",
                        "transferFee": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "exchangeRateInformation": {
                            "rateType": "ACTUAL",
                            "contractIdentification": "contractIdentification",
                            "additions": {
                                "key": "additions"
                            },
                            "rate": "rate",
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "reasonCode": "reasonCode",
                        "paymentSubmissionId": "paymentSubmissionId"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Limits has been breached, check the report for more details",
                        "payment": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "status": "ENTERED",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2017-07-16",
                            "transferTransactionInformation": {
                                "name": "Jack Jackson",
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                                },
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9",
                                        "zipcode": "1018LL",
                                        "city": "Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "remittanceInformation": {
                                    "type": "UNSTRUCTURED",
                                    "content": "Return a debt"
                                }
                            },
                            "version": 0
                        },
                        "checkTime": "2017-01-31T12:12:12Z",
                        "breachReport": [{
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "user-BBID": "oleksii",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Payments approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic payments"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00Z",
                                            "endTime": "2017-01-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2017-01-01T00:00:00Z",
                                            "endTime": "2017-03-31T23:59:59Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }]
                            }]
                    }
                },
            ]
        },
    ]);

    exports.ApprovalStatus = ApprovalStatus;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.ChargeBearer = ChargeBearer;
    exports.InstructionPriority = InstructionPriority;
    exports.InvolvedPartyRole = InvolvedPartyRole;
    exports.LogicalOperator = LogicalOperator;
    exports.PAYMENT_ORDER_BASE_PATH = PAYMENT_ORDER_BASE_PATH;
    exports.PaymentAction = PaymentAction;
    exports.PaymentMode = PaymentMode;
    exports.PaymentOrderApiModule = PaymentOrderApiModule;
    exports.PaymentOrderConfiguration = PaymentOrderConfiguration;
    exports.PaymentOrdersHttpService = PaymentOrdersHttpService;
    exports.PaymentOrdersHttpServiceDeletePaymentOrderByIdMocksProvider = PaymentOrdersHttpServiceDeletePaymentOrderByIdMocksProvider;
    exports.PaymentOrdersHttpServiceGetApprovablePaymentOrdersMocksProvider = PaymentOrdersHttpServiceGetApprovablePaymentOrdersMocksProvider;
    exports.PaymentOrdersHttpServiceGetCurrenciesMocksProvider = PaymentOrdersHttpServiceGetCurrenciesMocksProvider;
    exports.PaymentOrdersHttpServiceGetPaymentOrderByIdMocksProvider = PaymentOrdersHttpServiceGetPaymentOrderByIdMocksProvider;
    exports.PaymentOrdersHttpServiceGetPaymentOrderExportMocksProvider = PaymentOrdersHttpServiceGetPaymentOrderExportMocksProvider;
    exports.PaymentOrdersHttpServiceGetPaymentOrdersMocksProvider = PaymentOrdersHttpServiceGetPaymentOrdersMocksProvider;
    exports.PaymentOrdersHttpServiceGetProgressStatusByPaymentOrderIdMocksProvider = PaymentOrdersHttpServiceGetProgressStatusByPaymentOrderIdMocksProvider;
    exports.PaymentOrdersHttpServiceGetRateMocksProvider = PaymentOrdersHttpServiceGetRateMocksProvider;
    exports.PaymentOrdersHttpServiceMocksProvider = PaymentOrdersHttpServiceMocksProvider;
    exports.PaymentOrdersHttpServicePostCancelByPaymentOrderIdMocksProvider = PaymentOrdersHttpServicePostCancelByPaymentOrderIdMocksProvider;
    exports.PaymentOrdersHttpServicePostPaymentOrdersMocksProvider = PaymentOrdersHttpServicePostPaymentOrdersMocksProvider;
    exports.PaymentOrdersHttpServicePostValidateMocksProvider = PaymentOrdersHttpServicePostValidateMocksProvider;
    exports.PaymentOrdersHttpServicePutApprovalsByPaymentOrderIdMocksProvider = PaymentOrdersHttpServicePutApprovalsByPaymentOrderIdMocksProvider;
    exports.PaymentOrdersHttpServicePutBulkApprovalsMocksProvider = PaymentOrdersHttpServicePutBulkApprovalsMocksProvider;
    exports.PaymentOrdersHttpServicePutPaymentOrderByIdMocksProvider = PaymentOrdersHttpServicePutPaymentOrderByIdMocksProvider;
    exports.RecordStatus = RecordStatus;
    exports.SchemeNames = SchemeNames;
    exports.Status = Status;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payment-order-http-ang.umd.js.map
