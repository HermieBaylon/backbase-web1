import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BulkPaymentOrdersApprovalPutRequest } from '../model/models';
import { BulkPaymentOrdersApprovalPutResponse } from '../model/models';
import { CurrenciesGetResponseBody } from '../model/models';
import { IdentifiedPaymentOrder } from '../model/models';
import { PaymentOrderApprovalPutRequest } from '../model/models';
import { PaymentOrderCancelPostRequest } from '../model/models';
import { PaymentOrderCancelPostResponse } from '../model/models';
import { PaymentOrderGetResponse } from '../model/models';
import { PaymentOrderProgressStatusGet } from '../model/models';
import { PaymentOrderPut } from '../model/models';
import { PaymentOrdersPost } from '../model/models';
import { PaymentOrdersPostResponse } from '../model/models';
import { PaymentOrdersValidatePost } from '../model/models';
import { PaymentOrdersValidatePostResponse } from '../model/models';
import { RateGet } from '../model/models';
import { PaymentOrderConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeletePaymentOrderByIdRequestParams {
    ["paymentOrderId"]: string;
    ["version"]: number;
}
export interface GetApprovablePaymentOrdersRequestParams {
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface GetPaymentOrderByIdRequestParams {
    ["paymentOrderId"]: string;
    ["userId"]?: string;
    ["saId"]?: string;
}
export interface GetPaymentOrderExportRequestParams {
    ["paymentOrderId"]: string;
}
export interface GetPaymentOrdersRequestParams {
    ["status"]?: Array<'ENTERED' | 'READY' | 'ACCEPTED' | 'PROCESSED' | 'REJECTED' | 'CANCELLED' | 'CANCELLATION_PENDING'>;
    ["paymentTypeGroup"]?: string;
    ["createdByMe"]?: boolean;
    ["userId"]?: string;
    ["saId"]?: string;
    ["originatorArrangementId"]?: string;
    ["query"]?: string;
    ["amountFrom"]?: number;
    ["amountTo"]?: number;
    ["executionDate"]?: string;
    ["executionDateFrom"]?: string;
    ["executionDateTo"]?: string;
    ["nextExecutionDate"]?: string;
    ["nextExecutionDateFrom"]?: string;
    ["nextExecutionDateTo"]?: string;
    ["paymentMode"]?: 'SINGLE' | 'RECURRING';
    ["paymentSetupId"]?: string;
    ["transferFrequency"]?: 'ONCE' | 'DAILY' | 'WEEKLY' | 'BIWEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY';
    ["from"]?: number;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
}
export interface GetProgressStatusByPaymentOrderIdRequestParams {
    ["paymentOrderId"]: string;
}
export interface GetRateRequestParams {
    ["currencyFrom"]: string;
    ["currencyTo"]: string;
}
export interface PostCancelByPaymentOrderIdRequestParams {
    ["paymentOrderId"]: string;
    ["paymentOrderCancelPostRequest"]: PaymentOrderCancelPostRequest;
}
export interface PostPaymentOrdersRequestParams {
    ["paymentOrdersPost"]: PaymentOrdersPost;
    ["xMFA"]?: string;
}
export interface PostValidateRequestParams {
    ["paymentOrdersValidatePost"]: PaymentOrdersValidatePost;
}
export interface PutApprovalsByPaymentOrderIdRequestParams {
    ["paymentOrderId"]: string;
    ["paymentOrderApprovalPutRequest"]: PaymentOrderApprovalPutRequest;
}
export interface PutBulkApprovalsRequestParams {
    ["bulkPaymentOrdersApprovalPutRequest"]: BulkPaymentOrdersApprovalPutRequest;
}
export interface PutPaymentOrderByIdRequestParams {
    ["paymentOrderId"]: string;
    ["paymentOrderPut"]: PaymentOrderPut;
    ["xMFA"]?: string;
}
export declare class PaymentOrdersHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentOrderConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentOrderConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deletePaymentOrderById(requestParameters: DeletePaymentOrderByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deletePaymentOrderById(requestParameters: DeletePaymentOrderByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deletePaymentOrderById(requestParameters: DeletePaymentOrderByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deletePaymentOrderByIdUrl(requestParameters: DeletePaymentOrderByIdRequestParams): string;
    getApprovablePaymentOrders(requestParameters: GetApprovablePaymentOrdersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<IdentifiedPaymentOrder>>;
    getApprovablePaymentOrders(requestParameters: GetApprovablePaymentOrdersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<IdentifiedPaymentOrder>>>;
    getApprovablePaymentOrders(requestParameters: GetApprovablePaymentOrdersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<IdentifiedPaymentOrder>>>;
    getApprovablePaymentOrdersUrl(requestParameters: GetApprovablePaymentOrdersRequestParams): string;
    getCurrencies(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<CurrenciesGetResponseBody>>;
    getCurrencies(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<CurrenciesGetResponseBody>>>;
    getCurrencies(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<CurrenciesGetResponseBody>>>;
    getCurrenciesUrl(): string;
    getPaymentOrderById(requestParameters: GetPaymentOrderByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOrderGetResponse>;
    getPaymentOrderById(requestParameters: GetPaymentOrderByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOrderGetResponse>>;
    getPaymentOrderById(requestParameters: GetPaymentOrderByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOrderGetResponse>>;
    getPaymentOrderByIdUrl(requestParameters: GetPaymentOrderByIdRequestParams): string;
    getPaymentOrderExport(requestParameters: GetPaymentOrderExportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<Blob>;
    getPaymentOrderExport(requestParameters: GetPaymentOrderExportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpResponse<Blob>>;
    getPaymentOrderExport(requestParameters: GetPaymentOrderExportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpEvent<Blob>>;
    getPaymentOrderExport(requestParameters: GetPaymentOrderExportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    getPaymentOrderExport(requestParameters: GetPaymentOrderExportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    getPaymentOrderExport(requestParameters: GetPaymentOrderExportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    getPaymentOrderExportUrl(requestParameters: GetPaymentOrderExportRequestParams): string;
    getPaymentOrders(requestParameters: GetPaymentOrdersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<IdentifiedPaymentOrder>>;
    getPaymentOrders(requestParameters: GetPaymentOrdersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<IdentifiedPaymentOrder>>>;
    getPaymentOrders(requestParameters: GetPaymentOrdersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<IdentifiedPaymentOrder>>>;
    getPaymentOrdersUrl(requestParameters: GetPaymentOrdersRequestParams): string;
    getProgressStatusByPaymentOrderId(requestParameters: GetProgressStatusByPaymentOrderIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOrderProgressStatusGet>;
    getProgressStatusByPaymentOrderId(requestParameters: GetProgressStatusByPaymentOrderIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOrderProgressStatusGet>>;
    getProgressStatusByPaymentOrderId(requestParameters: GetProgressStatusByPaymentOrderIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOrderProgressStatusGet>>;
    getProgressStatusByPaymentOrderIdUrl(requestParameters: GetProgressStatusByPaymentOrderIdRequestParams): string;
    getRate(requestParameters: GetRateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<RateGet>;
    getRate(requestParameters: GetRateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<RateGet>>;
    getRate(requestParameters: GetRateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<RateGet>>;
    getRateUrl(requestParameters: GetRateRequestParams): string;
    postCancelByPaymentOrderId(requestParameters: PostCancelByPaymentOrderIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOrderCancelPostResponse>;
    postCancelByPaymentOrderId(requestParameters: PostCancelByPaymentOrderIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOrderCancelPostResponse>>;
    postCancelByPaymentOrderId(requestParameters: PostCancelByPaymentOrderIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOrderCancelPostResponse>>;
    postCancelByPaymentOrderIdUrl(requestParameters: PostCancelByPaymentOrderIdRequestParams): string;
    postPaymentOrders(requestParameters: PostPaymentOrdersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOrdersPostResponse>;
    postPaymentOrders(requestParameters: PostPaymentOrdersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOrdersPostResponse>>;
    postPaymentOrders(requestParameters: PostPaymentOrdersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOrdersPostResponse>>;
    postPaymentOrdersUrl(requestParameters: PostPaymentOrdersRequestParams): string;
    postValidate(requestParameters: PostValidateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOrdersValidatePostResponse>;
    postValidate(requestParameters: PostValidateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOrdersValidatePostResponse>>;
    postValidate(requestParameters: PostValidateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOrdersValidatePostResponse>>;
    postValidateUrl(requestParameters: PostValidateRequestParams): string;
    putApprovalsByPaymentOrderId(requestParameters: PutApprovalsByPaymentOrderIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOrdersPostResponse>;
    putApprovalsByPaymentOrderId(requestParameters: PutApprovalsByPaymentOrderIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOrdersPostResponse>>;
    putApprovalsByPaymentOrderId(requestParameters: PutApprovalsByPaymentOrderIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOrdersPostResponse>>;
    putApprovalsByPaymentOrderIdUrl(requestParameters: PutApprovalsByPaymentOrderIdRequestParams): string;
    putBulkApprovals(requestParameters: PutBulkApprovalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BulkPaymentOrdersApprovalPutResponse>;
    putBulkApprovals(requestParameters: PutBulkApprovalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BulkPaymentOrdersApprovalPutResponse>>;
    putBulkApprovals(requestParameters: PutBulkApprovalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BulkPaymentOrdersApprovalPutResponse>>;
    putBulkApprovalsUrl(requestParameters: PutBulkApprovalsRequestParams): string;
    putPaymentOrderById(requestParameters: PutPaymentOrderByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOrdersPostResponse>;
    putPaymentOrderById(requestParameters: PutPaymentOrderByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOrdersPostResponse>>;
    putPaymentOrderById(requestParameters: PutPaymentOrderByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOrdersPostResponse>>;
    putPaymentOrderByIdUrl(requestParameters: PutPaymentOrderByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentOrdersHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentOrdersHttpService>;
}
