export var Schedule;
(function (Schedule) {
    Schedule.NonWorkingDayExecutionStrategyEnum = {
        BEFORE: 'BEFORE',
        AFTER: 'AFTER',
        NONE: 'NONE'
    };
    Schedule.TransferFrequencyEnum = {
        ONCE: 'ONCE',
        DAILY: 'DAILY',
        WEEKLY: 'WEEKLY',
        BIWEEKLY: 'BIWEEKLY',
        MONTHLY: 'MONTHLY',
        QUARTERLY: 'QUARTERLY',
        YEARLY: 'YEARLY'
    };
    Schedule.EveryEnum = {
        _1: '1',
        _2: '2'
    };
})(Schedule || (Schedule = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9tb2RlbC9zY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1REEsTUFBTSxLQUFXLFFBQVEsQ0FzQnhCO0FBdEJELFdBQWlCLFFBQVE7SUFFUiwyQ0FBa0MsR0FBRztRQUM5QyxNQUFNLEVBQUUsUUFBOEM7UUFDdEQsS0FBSyxFQUFFLE9BQTZDO1FBQ3BELElBQUksRUFBRSxNQUE0QztLQUNyRCxDQUFDO0lBRVcsOEJBQXFCLEdBQUc7UUFDakMsSUFBSSxFQUFFLE1BQStCO1FBQ3JDLEtBQUssRUFBRSxPQUFnQztRQUN2QyxNQUFNLEVBQUUsUUFBaUM7UUFDekMsUUFBUSxFQUFFLFVBQW1DO1FBQzdDLE9BQU8sRUFBRSxTQUFrQztRQUMzQyxTQUFTLEVBQUUsV0FBb0M7UUFDL0MsTUFBTSxFQUFFLFFBQWlDO0tBQzVDLENBQUM7SUFFVyxrQkFBUyxHQUFHO1FBQ3JCLEVBQUUsRUFBRSxHQUFnQjtRQUNwQixFQUFFLEVBQUUsR0FBZ0I7S0FDdkIsQ0FBQztBQUNOLENBQUMsRUF0QmdCLFFBQVEsS0FBUixRQUFRLFFBc0J4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGF5bWVudCBvcmRlcnMgY2xpZW50XG4gKiBNYW5hZ2UgcGF5bWVudCBvcmRlcnMgYW5kIHN0YW5kaW5nIG9yZGVycy5cbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMi4xMC4xXG4gKiBcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL2dpdGh1Yi5jb20vQmFja2Jhc2UvYmFja2Jhc2Utb3BlbmFwaS10b29scykuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vQmFja2Jhc2UvYmFja2Jhc2Utb3BlbmFwaS10b29sc1xuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG5cblxuXG4vKipcbiAqIFNjaGVkdWxlIGZvciByZWN1cnJpbmcgdHJhbnNmZXIuIE1hbmRhdG9yeSBpZiBwYXltZW50TW9kZSBpcyBSRUNVUlJJTkdcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTY2hlZHVsZSB7IFxuICAgIC8qKlxuICAgICAqIFN0cmF0ZWd5IGZvciBleGVjdXRpbmcgcGF5bWVudHMgb24gbm9uLXdvcmtpbmcgZGF5c1xuICAgICAqL1xuICAgIFtcIm5vbldvcmtpbmdEYXlFeGVjdXRpb25TdHJhdGVneVwiXT86IFNjaGVkdWxlLk5vbldvcmtpbmdEYXlFeGVjdXRpb25TdHJhdGVneUVudW07XG4gICAgLyoqXG4gICAgICogRGVub3RlcyBob3cgZnJlcXVlbnRseSB0aGUgdHJhbnNmZXIgc2hvdWxkIGJlIG1hZGVcbiAgICAgKi9cbiAgICBbXCJ0cmFuc2ZlckZyZXF1ZW5jeVwiXTogU2NoZWR1bGUuVHJhbnNmZXJGcmVxdWVuY3lFbnVtO1xuICAgIC8qKlxuICAgICAqIERlbm90ZXMgZGF5IG9uIHdoaWNoIHRyYW5zZmVyIHNob3VsZCBiZSBleGVjdXRlZC4gRm9yIFdFRUtMWSB0cmFuc2ZlckZyZXF1ZW5jeSBpdCB3aWxsIGJlIDEuLjcgaW5kaWNhdGluZyB3ZWVrZGF5LiBGb3IgQklXRUVLTFkgaXQgd2lsbCBiZSAxLi4xNCBpbmRpY2F0aW5nIHRoZSBkYXkgb2YgdGhlIHR3byB3ZWVrIHBlcmlvZC4gRm9yIE1PTlRITFkgaXQgd2lsbCBiZSAxLi4zMSBpbmRpY2F0aW5nIGRheSBvZiBtb250aC4gRm9yIFlFQVJMWSBpdCB3aWxsIGJlIDEuLjEyIGluZGljYXRpbmcgbW9udGggb2YgdGhlIHllYXIuXG4gICAgICovXG4gICAgW1wib25cIl06IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRvIHN0YXJ0IGV4ZWN1dGluZyB0aGUgc2NoZWR1bGUuIEZpcnN0IHRyYW5zZmVyIHdpbGwgYmUgZXhlY3V0ZWQgb24gZmlyc3QgY2FsY3VsYXRlZCBkYXRlIGJ5IHNjaGVkdWxlIGFmdGVyIHRoaXMgZGF0ZS5cbiAgICAgKi9cbiAgICBbXCJzdGFydERhdGVcIl06IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBXaGVuIHRvIHN0b3AgdHJhbnNmZXJzLiBUcmFuc2ZlcnMgd2lsbCBub3QgYmUgZXhlY3V0ZWQgYWZ0ZXIgdGhpcyBkYXRlLiBPbmx5IG9uZSBvZiBlbmREYXRlIGFuZCByZXBlYXQgaXMgcG9zc2libGUuIElmIG5laXRoZXIgcmVwZWF0IG5vciBlbmREYXRlIGlzIHByb3ZpZGVkIHRyYW5zZmVyIHdpbGwgYmUgZXhlY3V0ZWQgdW50aWwgY2FuY2VsZWRcbiAgICAgKi9cbiAgICBbXCJlbmREYXRlXCJdPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiB0cmFuc2ZlciB0byBiZSBleGVjdXRlZC4gT25seSBvbmUgb2YgZW5kRGF0ZSBhbmQgcmVwZWF0IGlzIHBvc3NpYmxlLiBJZiBuZWl0aGVyIHJlcGVhdCBub3IgZW5kRGF0ZSBpcyBwcm92aWRlZCB0cmFuc2ZlciB3aWxsIGJlIGV4ZWN1dGVkIHVudGlsIGNhbmNlbGVkXG4gICAgICovXG4gICAgW1wicmVwZWF0XCJdPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBza2lwIGludGVydmFsIG9mIHRyYW5zZmVyLiAxIHdvdWxkIG1lYW4gZXhlY3V0ZSBldmVyeSB0aW1lLCAyIC0gZXZlcnkgb3RoZXIgdGltZVxuICAgICAqL1xuICAgIFtcImV2ZXJ5XCJdOiBTY2hlZHVsZS5FdmVyeUVudW07XG4gICAgLyoqXG4gICAgICogRGF0ZSB3aGVuIHRoZSBuZXh0IHBheW1lbnQgd2lsbCBiZSBleGVjdXRlZCwgdGFraW5nIGluIGNvbnNpZGVyYXRpb24gYmFuayBob2xpZGF5cyBhbmQgY3V0LW9mZiB0aW1lcy4gSXQgd2lsbCBiZSBvbmx5IHJldHJpZXZlZCB3aGVuIGdldHRpbmcgcGF5bWVudHMsIGl0IHdpbGwgYmUgZGlzbWlzc2VkIHdoZW4gY3JlYXRpbmcgb3IgdXBkYXRpbmcuXG4gICAgICovXG4gICAgW1wibmV4dEV4ZWN1dGlvbkRhdGVcIl0/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWRkaXRpb25hbCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgW1wiYWRkaXRpb25zXCJdPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH07XG59XG5leHBvcnQgbmFtZXNwYWNlIFNjaGVkdWxlIHtcbiAgICBleHBvcnQgdHlwZSBOb25Xb3JraW5nRGF5RXhlY3V0aW9uU3RyYXRlZ3lFbnVtID0gJ0JFRk9SRScgfCAnQUZURVInIHwgJ05PTkUnO1xuICAgIGV4cG9ydCBjb25zdCBOb25Xb3JraW5nRGF5RXhlY3V0aW9uU3RyYXRlZ3lFbnVtID0ge1xuICAgICAgICBCRUZPUkU6ICdCRUZPUkUnIGFzIE5vbldvcmtpbmdEYXlFeGVjdXRpb25TdHJhdGVneUVudW0sXG4gICAgICAgIEFGVEVSOiAnQUZURVInIGFzIE5vbldvcmtpbmdEYXlFeGVjdXRpb25TdHJhdGVneUVudW0sXG4gICAgICAgIE5PTkU6ICdOT05FJyBhcyBOb25Xb3JraW5nRGF5RXhlY3V0aW9uU3RyYXRlZ3lFbnVtXG4gICAgfTtcbiAgICBleHBvcnQgdHlwZSBUcmFuc2ZlckZyZXF1ZW5jeUVudW0gPSAnT05DRScgfCAnREFJTFknIHwgJ1dFRUtMWScgfCAnQklXRUVLTFknIHwgJ01PTlRITFknIHwgJ1FVQVJURVJMWScgfCAnWUVBUkxZJztcbiAgICBleHBvcnQgY29uc3QgVHJhbnNmZXJGcmVxdWVuY3lFbnVtID0ge1xuICAgICAgICBPTkNFOiAnT05DRScgYXMgVHJhbnNmZXJGcmVxdWVuY3lFbnVtLFxuICAgICAgICBEQUlMWTogJ0RBSUxZJyBhcyBUcmFuc2ZlckZyZXF1ZW5jeUVudW0sXG4gICAgICAgIFdFRUtMWTogJ1dFRUtMWScgYXMgVHJhbnNmZXJGcmVxdWVuY3lFbnVtLFxuICAgICAgICBCSVdFRUtMWTogJ0JJV0VFS0xZJyBhcyBUcmFuc2ZlckZyZXF1ZW5jeUVudW0sXG4gICAgICAgIE1PTlRITFk6ICdNT05USExZJyBhcyBUcmFuc2ZlckZyZXF1ZW5jeUVudW0sXG4gICAgICAgIFFVQVJURVJMWTogJ1FVQVJURVJMWScgYXMgVHJhbnNmZXJGcmVxdWVuY3lFbnVtLFxuICAgICAgICBZRUFSTFk6ICdZRUFSTFknIGFzIFRyYW5zZmVyRnJlcXVlbmN5RW51bVxuICAgIH07XG4gICAgZXhwb3J0IHR5cGUgRXZlcnlFbnVtID0gJzEnIHwgJzInO1xuICAgIGV4cG9ydCBjb25zdCBFdmVyeUVudW0gPSB7XG4gICAgICAgIF8xOiAnMScgYXMgRXZlcnlFbnVtLFxuICAgICAgICBfMjogJzInIGFzIEV2ZXJ5RW51bVxuICAgIH07XG59XG5cblxuIl19