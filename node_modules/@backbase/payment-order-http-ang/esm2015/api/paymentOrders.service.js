import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { PAYMENT_ORDER_BASE_PATH } from '../variables';
import { PaymentOrderConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class PaymentOrdersHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentOrderConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deletePaymentOrderById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling deletePaymentOrderById.');
        }
        const _version = requestParameters["version"];
        if (_version === null || _version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deletePaymentOrderById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_version !== undefined && _version !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _version, 'version');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePaymentOrderByIdUrl(requestParameters) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling deletePaymentOrderById.');
        }
        const _version = requestParameters["version"];
        if (_version === null || _version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deletePaymentOrderById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_version !== undefined && _version !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _version, 'version');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}${queryString ? `?${queryString}` : ''}`;
    }
    getApprovablePaymentOrders(requestParameters, observe = 'body', reportProgress = false, options) {
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-orders/approvals`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovablePaymentOrdersUrl(requestParameters) {
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/payment-orders/approvals${queryString ? `?${queryString}` : ''}`;
    }
    getCurrencies(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-orders/currencies`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCurrenciesUrl() {
        return `${this.configuration.basePath}/client-api/v2/payment-orders/currencies`;
    }
    getPaymentOrderById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling getPaymentOrderById.');
        }
        const _userId = requestParameters["userId"];
        const _saId = requestParameters["saId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_saId !== undefined && _saId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _saId, 'saId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentOrderByIdUrl(requestParameters) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling getPaymentOrderById.');
        }
        const _userId = requestParameters["userId"];
        const _saId = requestParameters["saId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_saId !== undefined && _saId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _saId, 'saId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}${queryString ? `?${queryString}` : ''}`;
    }
    getPaymentOrderExport(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling getPaymentOrderExport.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/pdf',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}/export`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentOrderExportUrl(requestParameters) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling getPaymentOrderExport.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}/export`;
    }
    getPaymentOrders(requestParameters, observe = 'body', reportProgress = false, options) {
        const _status = requestParameters["status"];
        const _paymentTypeGroup = requestParameters["paymentTypeGroup"];
        const _createdByMe = requestParameters["createdByMe"];
        const _userId = requestParameters["userId"];
        const _saId = requestParameters["saId"];
        const _originatorArrangementId = requestParameters["originatorArrangementId"];
        const _query = requestParameters["query"];
        const _amountFrom = requestParameters["amountFrom"];
        const _amountTo = requestParameters["amountTo"];
        const _executionDate = requestParameters["executionDate"];
        const _executionDateFrom = requestParameters["executionDateFrom"];
        const _executionDateTo = requestParameters["executionDateTo"];
        const _nextExecutionDate = requestParameters["nextExecutionDate"];
        const _nextExecutionDateFrom = requestParameters["nextExecutionDateFrom"];
        const _nextExecutionDateTo = requestParameters["nextExecutionDateTo"];
        const _paymentMode = requestParameters["paymentMode"];
        const _paymentSetupId = requestParameters["paymentSetupId"];
        const _transferFrequency = requestParameters["transferFrequency"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_paymentTypeGroup !== undefined && _paymentTypeGroup !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentTypeGroup, 'paymentTypeGroup');
        }
        if (_createdByMe !== undefined && _createdByMe !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _createdByMe, 'createdByMe');
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_saId !== undefined && _saId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _saId, 'saId');
        }
        if (_originatorArrangementId !== undefined && _originatorArrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _originatorArrangementId, 'originatorArrangementId');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_amountFrom !== undefined && _amountFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
        }
        if (_amountTo !== undefined && _amountTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
        }
        if (_executionDate !== undefined && _executionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
        }
        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
        }
        if (_executionDateTo !== undefined && _executionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
        }
        if (_nextExecutionDate !== undefined && _nextExecutionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDate, 'nextExecutionDate');
        }
        if (_nextExecutionDateFrom !== undefined && _nextExecutionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateFrom, 'nextExecutionDateFrom');
        }
        if (_nextExecutionDateTo !== undefined && _nextExecutionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateTo, 'nextExecutionDateTo');
        }
        if (_paymentMode !== undefined && _paymentMode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentMode, 'paymentMode');
        }
        if (_paymentSetupId !== undefined && _paymentSetupId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentSetupId, 'paymentSetupId');
        }
        if (_transferFrequency !== undefined && _transferFrequency !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _transferFrequency, 'transferFrequency');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-orders`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentOrdersUrl(requestParameters) {
        const _status = requestParameters["status"];
        const _paymentTypeGroup = requestParameters["paymentTypeGroup"];
        const _createdByMe = requestParameters["createdByMe"];
        const _userId = requestParameters["userId"];
        const _saId = requestParameters["saId"];
        const _originatorArrangementId = requestParameters["originatorArrangementId"];
        const _query = requestParameters["query"];
        const _amountFrom = requestParameters["amountFrom"];
        const _amountTo = requestParameters["amountTo"];
        const _executionDate = requestParameters["executionDate"];
        const _executionDateFrom = requestParameters["executionDateFrom"];
        const _executionDateTo = requestParameters["executionDateTo"];
        const _nextExecutionDate = requestParameters["nextExecutionDate"];
        const _nextExecutionDateFrom = requestParameters["nextExecutionDateFrom"];
        const _nextExecutionDateTo = requestParameters["nextExecutionDateTo"];
        const _paymentMode = requestParameters["paymentMode"];
        const _paymentSetupId = requestParameters["paymentSetupId"];
        const _transferFrequency = requestParameters["transferFrequency"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_paymentTypeGroup !== undefined && _paymentTypeGroup !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentTypeGroup, 'paymentTypeGroup');
        }
        if (_createdByMe !== undefined && _createdByMe !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _createdByMe, 'createdByMe');
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_saId !== undefined && _saId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _saId, 'saId');
        }
        if (_originatorArrangementId !== undefined && _originatorArrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _originatorArrangementId, 'originatorArrangementId');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_amountFrom !== undefined && _amountFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
        }
        if (_amountTo !== undefined && _amountTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
        }
        if (_executionDate !== undefined && _executionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
        }
        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
        }
        if (_executionDateTo !== undefined && _executionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
        }
        if (_nextExecutionDate !== undefined && _nextExecutionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDate, 'nextExecutionDate');
        }
        if (_nextExecutionDateFrom !== undefined && _nextExecutionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateFrom, 'nextExecutionDateFrom');
        }
        if (_nextExecutionDateTo !== undefined && _nextExecutionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateTo, 'nextExecutionDateTo');
        }
        if (_paymentMode !== undefined && _paymentMode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentMode, 'paymentMode');
        }
        if (_paymentSetupId !== undefined && _paymentSetupId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentSetupId, 'paymentSetupId');
        }
        if (_transferFrequency !== undefined && _transferFrequency !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _transferFrequency, 'transferFrequency');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/payment-orders${queryString ? `?${queryString}` : ''}`;
    }
    getProgressStatusByPaymentOrderId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling getProgressStatusByPaymentOrderId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}/progress-status`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getProgressStatusByPaymentOrderIdUrl(requestParameters) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling getProgressStatusByPaymentOrderId.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}/progress-status`;
    }
    getRate(requestParameters, observe = 'body', reportProgress = false, options) {
        const _currencyFrom = requestParameters["currencyFrom"];
        if (_currencyFrom === null || _currencyFrom === undefined) {
            throw new Error('Required parameter currencyFrom was null or undefined when calling getRate.');
        }
        const _currencyTo = requestParameters["currencyTo"];
        if (_currencyTo === null || _currencyTo === undefined) {
            throw new Error('Required parameter currencyTo was null or undefined when calling getRate.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_currencyFrom !== undefined && _currencyFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currencyFrom, 'currencyFrom');
        }
        if (_currencyTo !== undefined && _currencyTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currencyTo, 'currencyTo');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-orders/rate`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getRateUrl(requestParameters) {
        const _currencyFrom = requestParameters["currencyFrom"];
        if (_currencyFrom === null || _currencyFrom === undefined) {
            throw new Error('Required parameter currencyFrom was null or undefined when calling getRate.');
        }
        const _currencyTo = requestParameters["currencyTo"];
        if (_currencyTo === null || _currencyTo === undefined) {
            throw new Error('Required parameter currencyTo was null or undefined when calling getRate.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_currencyFrom !== undefined && _currencyFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currencyFrom, 'currencyFrom');
        }
        if (_currencyTo !== undefined && _currencyTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currencyTo, 'currencyTo');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/payment-orders/rate${queryString ? `?${queryString}` : ''}`;
    }
    postCancelByPaymentOrderId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling postCancelByPaymentOrderId.');
        }
        const _paymentOrderCancelPostRequest = requestParameters["paymentOrderCancelPostRequest"];
        if (_paymentOrderCancelPostRequest === null || _paymentOrderCancelPostRequest === undefined) {
            throw new Error('Required parameter paymentOrderCancelPostRequest was null or undefined when calling postCancelByPaymentOrderId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}/cancel`, _paymentOrderCancelPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postCancelByPaymentOrderIdUrl(requestParameters) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling postCancelByPaymentOrderId.');
        }
        const _paymentOrderCancelPostRequest = requestParameters["paymentOrderCancelPostRequest"];
        if (_paymentOrderCancelPostRequest === null || _paymentOrderCancelPostRequest === undefined) {
            throw new Error('Required parameter paymentOrderCancelPostRequest was null or undefined when calling postCancelByPaymentOrderId.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}/cancel`;
    }
    postPaymentOrders(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrdersPost = requestParameters["paymentOrdersPost"];
        if (_paymentOrdersPost === null || _paymentOrdersPost === undefined) {
            throw new Error('Required parameter paymentOrdersPost was null or undefined when calling postPaymentOrders.');
        }
        const _xMFA = requestParameters["xMFA"];
        let headers = this.defaultHeaders;
        if (_xMFA !== undefined && _xMFA !== null) {
            headers = headers.set('X-MFA', String(_xMFA));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-orders`, _paymentOrdersPost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postPaymentOrdersUrl(requestParameters) {
        const _paymentOrdersPost = requestParameters["paymentOrdersPost"];
        if (_paymentOrdersPost === null || _paymentOrdersPost === undefined) {
            throw new Error('Required parameter paymentOrdersPost was null or undefined when calling postPaymentOrders.');
        }
        const _xMFA = requestParameters["xMFA"];
        return `${this.configuration.basePath}/client-api/v2/payment-orders`;
    }
    postValidate(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrdersValidatePost = requestParameters["paymentOrdersValidatePost"];
        if (_paymentOrdersValidatePost === null || _paymentOrdersValidatePost === undefined) {
            throw new Error('Required parameter paymentOrdersValidatePost was null or undefined when calling postValidate.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-orders/validate`, _paymentOrdersValidatePost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postValidateUrl(requestParameters) {
        const _paymentOrdersValidatePost = requestParameters["paymentOrdersValidatePost"];
        if (_paymentOrdersValidatePost === null || _paymentOrdersValidatePost === undefined) {
            throw new Error('Required parameter paymentOrdersValidatePost was null or undefined when calling postValidate.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-orders/validate`;
    }
    putApprovalsByPaymentOrderId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling putApprovalsByPaymentOrderId.');
        }
        const _paymentOrderApprovalPutRequest = requestParameters["paymentOrderApprovalPutRequest"];
        if (_paymentOrderApprovalPutRequest === null || _paymentOrderApprovalPutRequest === undefined) {
            throw new Error('Required parameter paymentOrderApprovalPutRequest was null or undefined when calling putApprovalsByPaymentOrderId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}/approvals`, _paymentOrderApprovalPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putApprovalsByPaymentOrderIdUrl(requestParameters) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling putApprovalsByPaymentOrderId.');
        }
        const _paymentOrderApprovalPutRequest = requestParameters["paymentOrderApprovalPutRequest"];
        if (_paymentOrderApprovalPutRequest === null || _paymentOrderApprovalPutRequest === undefined) {
            throw new Error('Required parameter paymentOrderApprovalPutRequest was null or undefined when calling putApprovalsByPaymentOrderId.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}/approvals`;
    }
    putBulkApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _bulkPaymentOrdersApprovalPutRequest = requestParameters["bulkPaymentOrdersApprovalPutRequest"];
        if (_bulkPaymentOrdersApprovalPutRequest === null || _bulkPaymentOrdersApprovalPutRequest === undefined) {
            throw new Error('Required parameter bulkPaymentOrdersApprovalPutRequest was null or undefined when calling putBulkApprovals.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/payment-orders/bulk-approvals`, _bulkPaymentOrdersApprovalPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBulkApprovalsUrl(requestParameters) {
        const _bulkPaymentOrdersApprovalPutRequest = requestParameters["bulkPaymentOrdersApprovalPutRequest"];
        if (_bulkPaymentOrdersApprovalPutRequest === null || _bulkPaymentOrdersApprovalPutRequest === undefined) {
            throw new Error('Required parameter bulkPaymentOrdersApprovalPutRequest was null or undefined when calling putBulkApprovals.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-orders/bulk-approvals`;
    }
    putPaymentOrderById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling putPaymentOrderById.');
        }
        const _paymentOrderPut = requestParameters["paymentOrderPut"];
        if (_paymentOrderPut === null || _paymentOrderPut === undefined) {
            throw new Error('Required parameter paymentOrderPut was null or undefined when calling putPaymentOrderById.');
        }
        const _xMFA = requestParameters["xMFA"];
        let headers = this.defaultHeaders;
        if (_xMFA !== undefined && _xMFA !== null) {
            headers = headers.set('X-MFA', String(_xMFA));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}`, _paymentOrderPut, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putPaymentOrderByIdUrl(requestParameters) {
        const _paymentOrderId = requestParameters["paymentOrderId"];
        if (_paymentOrderId === null || _paymentOrderId === undefined) {
            throw new Error('Required parameter paymentOrderId was null or undefined when calling putPaymentOrderById.');
        }
        const _paymentOrderPut = requestParameters["paymentOrderPut"];
        if (_paymentOrderPut === null || _paymentOrderPut === undefined) {
            throw new Error('Required parameter paymentOrderPut was null or undefined when calling putPaymentOrderById.');
        }
        const _xMFA = requestParameters["xMFA"];
        return `${this.configuration.basePath}/client-api/v2/payment-orders/${encodeURIComponent(String(_paymentOrderId))}`;
    }
}
PaymentOrdersHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrdersHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_BASE_PATH, optional: true }, { token: i2.PaymentOrderConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentOrdersHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrdersHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrdersHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_ORDER_BASE_PATH]
                }] }, { type: i2.PaymentOrderConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,