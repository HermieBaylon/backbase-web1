import { EventEmitter, OnDestroy } from '@angular/core';
import { AssetsService } from '@backbase/foundation-ang/core';
import { Observable } from 'rxjs';
import { AuthorizedUser, AuthorizedUsersList, LevelUIConfigHeader, SafeTypeArray } from '../../../common/model/authorized-users.model';
import { AuthorizedUsersError } from '../../../common/model/authorized-users-error.model';
import { UserDataService } from '../../../common/services/user-data.service';
import { UsersUIService } from '../../../common/services/users-ui.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
export declare type AuthorizedUserListActions = 'pause' | 'remove' | undefined;
export declare class AuthorizedUsersListWrapperComponent implements OnDestroy {
    private readonly assetsService;
    private readonly userDataService;
    private readonly usersUIService;
    private readonly notificationService;
    private refreshAuthorizedUsers;
    private authorizedUsersListSubject;
    private isLoading;
    levelsConfig: Array<LevelUIConfigHeader<SafeTypeArray>> | undefined;
    actionName: AuthorizedUserListActions;
    authorizedUsersList: Observable<AuthorizedUsersList>;
    showLoadingIndicator: Observable<boolean>;
    selectedUser: EventEmitter<string | undefined>;
    /**
     * Error message in case something unexpected occurs.
     */
    error: AuthorizedUsersError | undefined;
    currentUser: AuthorizedUser | undefined;
    private readonly getURIFromAssetID;
    private readonly resolveAsset;
    private handleLoadingError;
    private handleOperationsError;
    private retrieveAuthorizedUsers;
    private pushNotification;
    get imageEmptyStateUrl(): Observable<string>;
    goToAuthorizedUser(): void;
    editPermissions(user: AuthorizedUser): void;
    setCurrentUser(user?: AuthorizedUser, actionName?: AuthorizedUserListActions): void;
    setLoadingIndicator(value: boolean): void;
    removeUser(user: AuthorizedUser | undefined): void;
    updateUserStatus(user: AuthorizedUser | undefined): void;
    refreshList(): void;
    ngOnDestroy(): void;
    constructor(assetsService: AssetsService, userDataService: UserDataService, usersUIService: UsersUIService, notificationService: NotificationService);
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthorizedUsersListWrapperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AuthorizedUsersListWrapperComponent, "bb-authorized-users-list-wrapper", never, {}, { "selectedUser": "selectedUser"; }, never, never>;
}
