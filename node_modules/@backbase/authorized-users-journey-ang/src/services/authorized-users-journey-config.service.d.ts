import { InjectionToken } from '@angular/core';
import { LevelsConfig, SafeTypeArray } from '../common/model/authorized-users.model';
import * as i0 from "@angular/core";
export declare const AuthorizedUsersJourneyConfigurationToken: InjectionToken<AuthorizedUsersJourneyConfiguration<SafeTypeArray, SafeTypeArray>>;
export declare enum FullAccessGranularity {
    PER_ACCOUNT = "individual-control",
    SAME_FOR_ALL_ACCOUNTS = "all-at-once"
}
export interface AuthorizedUsersJourneyConfiguration<T extends SafeTypeArray, S extends {
    [k in keyof T]: any;
}> {
    fullAccess: FullAccessGranularity;
    levelsConfig: LevelsConfig<T, S>;
}
export declare class AuthorizedUsersJourneyConfigService {
    private _config;
    constructor(config: AuthorizedUsersJourneyConfiguration<SafeTypeArray, SafeTypeArray>);
    get defaults(): AuthorizedUsersJourneyConfiguration<SafeTypeArray, SafeTypeArray>;
    /**
     * Full access permission. Defines how the account owner can set access permissions: for all accounts at once, or for each account individually.
     */
    get fullAccess(): FullAccessGranularity;
    /**
     * Custom UI configuration for the permission levels and their permission sets.
     * For more details check https://community.backbase.com/documentation/Retail-Banking/latest/authorized_user_create_reference#create_authorized_users_configuration
     */
    get levelsConfig(): LevelsConfig<SafeTypeArray, SafeTypeArray>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthorizedUsersJourneyConfigService, [{ optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthorizedUsersJourneyConfigService>;
}
