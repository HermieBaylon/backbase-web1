import { GetAuthorizedUserItem, PostAuthorizedUser, PutAuthorizedUserPermissions } from '@backbase/data-ang/authorized-users';
import { AccountList } from './account-list.model';
import { Account } from './account.model';
export interface BaseAuthorizedUser {
    id?: string;
    said: string;
    firstName: string;
    lastName: string;
    email: string;
    mobileNumber: string;
    username: string;
    status?: AuthorizedUserStatus;
    additions?: {
        [key: string]: any;
    };
}
export interface AuthorizedUser extends BaseAuthorizedUser {
    permissions: Array<AuthorizedPermission>;
}
export interface RawAuthorizedUser extends BaseAuthorizedUser {
    permissions: Array<RawAuthorizedPermission>;
}
export interface AuthorizedUsersList {
    items: AuthorizedUser[];
}
export interface AuthorizedPermission {
    account: Account;
    level?: AuthorizedPermissionLevel;
}
export interface RawAuthorizedPermission {
    accountId?: string;
    level?: AuthorizedPermissionLevel;
}
export declare enum AuthorizedPermissionLevel {
    VIEW_ONLY = "viewOnly",
    MONEY_MOVEMENT = "moneyMovement",
    FULL_ACCESS = "fullAccess"
}
export declare enum AuthorizedUserStatus {
    PAUSED = "PAUSED",
    AWAITING_REGISTRATION = "AWAITING_REGISTRATION",
    ACTIVE = "ACTIVE"
}
export declare type PartialAuthorizedUsers = Partial<AuthorizedUser>;
export declare type SafeTypeArray = readonly [] | readonly any[];
export interface LevelsMappingConfig {
    fromStringToPermissionLevel(value: string): AuthorizedPermissionLevel;
    fromPermissionLevelToString(value: AuthorizedPermissionLevel | undefined): string;
}
export interface LevelUIConfig<T> {
    icon: string;
    title: string;
    permissionsAssigned: T;
}
export interface LevelUIConfigHeader<T> extends LevelUIConfig<T> {
    level: AuthorizedPermissionLevel;
    validate(): boolean;
}
export interface LevelsUIConfig<T> {
    levels: [LevelUIConfig<T>, LevelUIConfig<T>, LevelUIConfig<T>];
}
export interface PermissionUIConfig<T> {
    permissions: T;
}
export interface LevelsConfig<T extends SafeTypeArray, S extends {
    [k in keyof T]: any;
}> {
    mappings?: LevelsMappingConfig;
    uiConfig?: LevelsUIConfig<T> & PermissionUIConfig<S>;
}
export declare namespace AuthorizedUsersList {
    function buildHttpResponse(levelMappignConfig: LevelsMappingConfig): (response: Array<GetAuthorizedUserItem>) => RawAuthorizedUser[];
    function mapData(authorizedUsers: RawAuthorizedUser[], accounts: AccountList): AuthorizedUsersList;
}
export declare namespace AuthorizedUser {
    function buildHttpRequest(levelMappignConfig: LevelsMappingConfig): {
        post(user: PartialAuthorizedUsers): PostAuthorizedUser;
        put(permissions: AuthorizedPermission[]): PutAuthorizedUserPermissions;
    };
}
