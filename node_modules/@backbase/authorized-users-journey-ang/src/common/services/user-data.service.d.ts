import { AuthorizedUserService } from '@backbase/data-ang/authorized-users';
import { AuthorizedPermission, AuthorizedUsersList, PartialAuthorizedUsers } from '../model/authorized-users.model';
import { Observable } from 'rxjs';
import { ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { AccountList } from '../model/account-list.model';
import { ServiceAgreementHttpService, Status } from '@backbase/data-ang/accesscontrol';
import { UsersUIService } from './users-ui.service';
import * as i0 from "@angular/core";
export declare class UserDataService {
    private readonly accessGroupDataHttpService;
    private readonly userDataHttpService;
    private readonly productSummaryDataHttpService;
    private readonly usersUIService;
    private accounts;
    private authorizedUsersList;
    private readonly statusMapping;
    setStatusForServiceAgreements(userSaid: string, status: Status): Observable<void>;
    updateAuthorizedUserStatus(id: string, status: Status): Observable<any>;
    addAuthorizedUser(user: PartialAuthorizedUsers): Observable<void>;
    retrieveAuthorizedUser(): Observable<AuthorizedUsersList>;
    getAllArrangements(): Observable<AccountList>;
    updateAuthorizedUser(id: string, permissions: AuthorizedPermission[]): Observable<void>;
    removeAuthorizedUser(id: string): Observable<any>;
    constructor(accessGroupDataHttpService: ServiceAgreementHttpService, userDataHttpService: AuthorizedUserService, productSummaryDataHttpService: ProductSummaryHttpService, usersUIService: UsersUIService);
    static ɵfac: i0.ɵɵFactoryDeclaration<UserDataService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserDataService>;
}
