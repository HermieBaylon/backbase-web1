import { EventEmitter, OnInit } from '@angular/core';
import { AuthorizedUser, LevelUIConfigHeader, PartialAuthorizedUsers, PermissionUIConfig } from '../../../common/model/authorized-users.model';
import * as i0 from "@angular/core";
export declare abstract class BaseAuthorizedUsersCreateStep implements OnInit {
    next: EventEmitter<Partial<AuthorizedUser>>;
    back: EventEmitter<void>;
    saveOnly: EventEmitter<Partial<AuthorizedUser>>;
    cancel: EventEmitter<void>;
    authorizedUser: PartialAuthorizedUsers;
    isFirstStep: boolean;
    enableAccountLevelFullAccessPermission: boolean | undefined;
    levelsConfig: Array<LevelUIConfigHeader<boolean[]>> | undefined;
    permissionsConfig: PermissionUIConfig<string[]> | undefined;
    goNext(authorizedUser?: PartialAuthorizedUsers): void;
    goBack(): void;
    saveChanges(authorizedUser?: PartialAuthorizedUsers): void;
    abort(): void;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseAuthorizedUsersCreateStep, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BaseAuthorizedUsersCreateStep, never, never, { "authorizedUser": "authorizedUser"; "isFirstStep": "isFirstStep"; "enableAccountLevelFullAccessPermission": "enableAccountLevelFullAccessPermission"; "levelsConfig": "levelsConfig"; "permissionsConfig": "permissionsConfig"; }, { "next": "next"; "back": "back"; "saveOnly": "saveOnly"; "cancel": "cancel"; }, never>;
}
