import { EventEmitter, OnInit, ChangeDetectorRef } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { AssetsService } from '@backbase/foundation-ang/core';
import { AccountList } from '../common/model/account-list.model';
import { LevelUIConfigHeader, PartialAuthorizedUsers, PermissionUIConfig, SafeTypeArray } from '../common/model/authorized-users.model';
import { UserDataService } from '../common/services/user-data.service';
import { UsersUIService } from '../common/services/users-ui.service';
import * as i0 from "@angular/core";
interface LoadingData {
    accounts: AccountList;
    termsAndConditions: string;
}
export declare enum AuthorizedUserPermissionControlType {
    INDIVIDUAL_CONTROL = "individual-control",
    ALL_AT_ONCE = "all-at-once"
}
export declare class AuthorizedUsersCreateWrapperComponent implements OnInit {
    private readonly userService;
    private readonly usersUIService;
    private readonly assetsService;
    private readonly cd;
    currentStep: number;
    isAborting: boolean;
    succeedStatus: string;
    isFailure: boolean;
    isSaving: boolean;
    levelsConfig: Array<LevelUIConfigHeader<SafeTypeArray>> | undefined;
    permissionsConfig: PermissionUIConfig<SafeTypeArray> | undefined;
    loadingData: Observable<LoadingData> | undefined;
    selectedUser: string | undefined;
    set enableAccountLevelFullAccessPermissionValue(value: string);
    showAuthorizedUsers: EventEmitter<void>;
    private termsConditionsContent;
    private accounts;
    private currentUserStore;
    private changesStore;
    private selectedEditUserStore;
    authorizedUser: Observable<PartialAuthorizedUsers>;
    enableAccountLevelFullAccessPermissionSubject: BehaviorSubject<string | undefined>;
    private readonly getURIFromSvgAssetID;
    private readonly resolveSvgAsset;
    get imageSucceedUrl(): Observable<string>;
    get editMode(): boolean;
    goToAuthorizedUsersList: () => void;
    private setCurrentUserValue;
    private goToStep;
    private getAllAccounts;
    private handleAccountError;
    private handleUserError;
    next(authorizedUser: PartialAuthorizedUsers): void;
    back(): void;
    saveOnly(authorizedUser: PartialAuthorizedUsers): void;
    setAbortingDialog(value: boolean): void;
    setSucceedDialogStatus(value: string): void;
    finish(authorizedUser: PartialAuthorizedUsers): void;
    ngOnInit(): void;
    get enableAccountLevelFullAccessPermission(): Observable<boolean | undefined>;
    constructor(userService: UserDataService, usersUIService: UsersUIService, assetsService: AssetsService, cd: ChangeDetectorRef);
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthorizedUsersCreateWrapperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AuthorizedUsersCreateWrapperComponent, "bb-authorized-users-create-wrapper", never, { "selectedUser": "selectedUser"; "enableAccountLevelFullAccessPermissionValue": "enableAccountLevelFullAccessPermission"; }, { "showAuthorizedUsers": "showAuthorizedUsers"; }, never, never>;
}
export {};
