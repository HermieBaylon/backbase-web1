import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Directive, HostListener, EventEmitter, Component, Input, Output, InjectionToken, Injectable, Inject, Optional, NgModule, ChangeDetectionStrategy } from '@angular/core';
import * as i1$8 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i3$4 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i1$5 from '@angular/forms';
import { Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import * as i1$6 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i3$2 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i2$3 from '@backbase/ui-ang/checkbox-group';
import { CheckboxGroupModule } from '@backbase/ui-ang/checkbox-group';
import * as i14 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i3$3 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i4$1 from '@backbase/ui-ang/input-email';
import { InputEmailModule } from '@backbase/ui-ang/input-email';
import * as i5 from '@backbase/ui-ang/input-phone';
import { InputPhoneModule } from '@backbase/ui-ang/input-phone';
import * as i2$2 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i3$1 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i6 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i13 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i1$7 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i4 from '@backbase/ui-ang/payment-card-number-pipe';
import { PaymentCardNumberModule } from '@backbase/ui-ang/payment-card-number-pipe';
import * as i1$4 from '@backbase/ui-ang/stepper';
import { StepperModule } from '@backbase/ui-ang/stepper';
import * as i2$4 from '@backbase/ui-ang/switch';
import { SwitchModule } from '@backbase/ui-ang/switch';
import { TableModule } from '@backbase/ui-ang/table';
import { __rest } from 'tslib';
import { of, combineLatest, Subscription, BehaviorSubject, ReplaySubject, merge } from 'rxjs';
import { first, switchMap, catchError, map, mergeMap, tap } from 'rxjs/operators';
import * as i1$3 from '@backbase/data-ang/accesscontrol';
import { Status } from '@backbase/data-ang/accesscontrol';
import * as i2$1 from '@backbase/data-ang/authorized-users';
import * as i3 from '@backbase/data-ang/arrangements';
import * as i1$1 from '@angular/common/http';
import * as i4$2 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i1$9 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i2$5 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i7 from '@ng-bootstrap/ng-bootstrap';
import { NgbCollapseModule } from '@ng-bootstrap/ng-bootstrap';
import * as i9 from '@backbase/ui-ang/phone-number-format-pipe';
import { PhoneNumberModule } from '@backbase/ui-ang/phone-number-format-pipe';

var AuthorizedPermissionLevel;
(function (AuthorizedPermissionLevel) {
    AuthorizedPermissionLevel["VIEW_ONLY"] = "viewOnly";
    AuthorizedPermissionLevel["MONEY_MOVEMENT"] = "moneyMovement";
    AuthorizedPermissionLevel["FULL_ACCESS"] = "fullAccess";
})(AuthorizedPermissionLevel || (AuthorizedPermissionLevel = {}));
var AuthorizedUserStatus;
(function (AuthorizedUserStatus) {
    AuthorizedUserStatus["PAUSED"] = "PAUSED";
    AuthorizedUserStatus["AWAITING_REGISTRATION"] = "AWAITING_REGISTRATION";
    AuthorizedUserStatus["ACTIVE"] = "ACTIVE";
})(AuthorizedUserStatus || (AuthorizedUserStatus = {}));
var AuthorizedUsersList;
(function (AuthorizedUsersList) {
    function buildHttpResponse(levelMappignConfig) {
        return (response) => {
            if (response) {
                const data = Array.isArray(response) ? response : [response];
                return data.map((_a) => {
                    var { id, said, firstName, lastName, email, mobileNumber, username, status, permissions } = _a, others = __rest(_a, ["id", "said", "firstName", "lastName", "email", "mobileNumber", "username", "status", "permissions"]);
                    return Object.assign({ id,
                        said,
                        firstName,
                        lastName,
                        email,
                        mobileNumber,
                        username, status: status, permissions: permissions.map((_a) => {
                            var { accountId, level } = _a, otherPermissionsProps = __rest(_a, ["accountId", "level"]);
                            return (Object.assign({ accountId, level: levelMappignConfig.fromStringToPermissionLevel(level || '') }, otherPermissionsProps));
                        }) }, others);
                });
            }
            return [];
        };
    }
    AuthorizedUsersList.buildHttpResponse = buildHttpResponse;
    function mapData(authorizedUsers, accounts) {
        const items = authorizedUsers.map((authorizedUser) => {
            const { permissions } = authorizedUser, others = __rest(authorizedUser, ["permissions"]);
            return Object.assign({ permissions: setAccountToPermissions(permissions, accounts) }, others);
        });
        return {
            items,
        };
    }
    AuthorizedUsersList.mapData = mapData;
    function setAccountToPermissions(permissions, accounts) {
        return permissions
            .map((permission) => {
            const { accountId } = permission, others = __rest(permission, ["accountId"]);
            return Object.assign({ account: accounts.items.find((account) => account.id === accountId) }, others);
        })
            .filter((permission) => !!permission.account);
    }
})(AuthorizedUsersList || (AuthorizedUsersList = {}));
var AuthorizedUser;
(function (AuthorizedUser) {
    function buildHttpRequest(levelMappignConfig) {
        const formatAuthorizedPermission = (_a) => {
            var { account, level } = _a, othersPropsPermissions = __rest(_a, ["account", "level"]);
            return (Object.assign({ accountId: account.id, level: levelMappignConfig.fromPermissionLevelToString(level) }, othersPropsPermissions));
        };
        return {
            post(user) {
                const { email = '', firstName = '', lastName = '', mobileNumber = '', permissions = [] } = user, others = __rest(user, ["email", "firstName", "lastName", "mobileNumber", "permissions"]);
                return Object.assign({ email,
                    firstName,
                    lastName,
                    mobileNumber, permissions: permissions.map(formatAuthorizedPermission) }, others);
            },
            put(permissions) {
                return {
                    permissions: permissions.map(formatAuthorizedPermission),
                };
            },
        };
    }
    AuthorizedUser.buildHttpRequest = buildHttpRequest;
})(AuthorizedUser || (AuthorizedUser = {}));

const DEFAULT_ACCOUNT_NUMBER_FORMAT = {
    length: 9,
    maskRange: [0, length - 4],
    segments: 0,
};
const SERVICE_AGREEMENT_DISABLED = 'DISABLED';
const SERVICE_AGREEMENT_ENABLED = 'ENABLED';
const DEFAULT_UI_LEVELS_CONFIG = {
    levels: [
        { icon: 'visibility', title: $localize `View Only`, permissionsAssigned: [true, true, false, false, false] },
        { icon: 'attach-money', title: $localize `Money Movement`, permissionsAssigned: [true, true, true, false, false] },
        { icon: 'vpn-key', title: $localize `Full Access`, permissionsAssigned: [true, true, true, true, true] },
    ],
};
const DEFAULT_UI_PERMISSIONS_CONFIG = {
    permissions: [
        $localize `Balances, Transactions and Statements`,
        $localize `Cashflow and Spending Analysis`,
        $localize `Transfers and Bill Payments`,
        $localize `Check Deposits`,
        $localize `Other User Features`,
    ],
};

class AuthorizedUsersAccessibilityKeyboardDirective {
    constructor(element) {
        this.element = element;
        element.nativeElement.tabIndex = 0;
    }
    // eslint-disable-next-line
    eventListener(event) {
        this.element.nativeElement.click(event);
    }
}
AuthorizedUsersAccessibilityKeyboardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersAccessibilityKeyboardDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
AuthorizedUsersAccessibilityKeyboardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]", host: { listeners: { "keydown.enter": "eventListener($event)", "keydown.space": "eventListener($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersAccessibilityKeyboardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAuthorizedUsersAccessibilityKeyboard]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { eventListener: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

class AuthorizedUsersPermissionsLevelsTableComponent {
    constructor() {
        this.isEditing = false;
        this.updateAccount = new EventEmitter();
        this.productNumberFormat = DEFAULT_ACCOUNT_NUMBER_FORMAT;
        this.authorizedPermissionLevel = AuthorizedPermissionLevel;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.sortKeepOriginalOrder = (..._) => {
            return 0;
        };
    }
    changeAccountLevel(account, newLevel) {
        this.updateAccount.emit(Object.assign(Object.assign({}, account), { level: newLevel }));
    }
    useEditableCell(level) {
        const isFullAccessField = level === this.authorizedPermissionLevel.FULL_ACCESS;
        const isFullAccesEditable = isFullAccessField && this.enableAccountLevelFullAccessPermission;
        return isFullAccesEditable || !isFullAccessField;
    }
}
AuthorizedUsersPermissionsLevelsTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsLevelsTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersPermissionsLevelsTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersPermissionsLevelsTableComponent, selector: "bb-authorized-users-permissions-levels-table", inputs: { selectedAccounts: "selectedAccounts", isEditing: "isEditing", enableAccountLevelFullAccessPermission: "enableAccountLevelFullAccessPermission", levelsConfig: "levelsConfig" }, outputs: { updateAccount: "updateAccount" }, ngImport: i0, template: "<table class=\"table table-striped bb-authorized-users-common-permission-table\">\n  <caption class=\"sr-only\" i18n=\"Permission Management|Table Caption@@authorized-users.common.permissions-table.caption\">\n    Permission Management\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">\n        <strong>\n          <span i18n=\"Accounts and Permissions title@@authorized-users.common.permissions-table.column-1.title\">\n            Accounts and Permissions\n          </span>\n        </strong>\n      </th>\n      <th scope=\"col\" class=\"text-center\" *ngFor=\"let levelConfig of levelsConfig\">\n        <strong class=\"bb-inline-stack\">\n          <bb-icon-ui [name]=\"levelConfig.icon\" size=\"sm\" class=\"bb-inline-stack__item\"></bb-icon-ui>\n          <span class=\"bb-inline-stack__item\">\n            {{levelConfig.title}}\n          </span>\n        </strong>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <ng-container *ngFor=\"let selectedAccount of selectedAccounts\">\n      <tr>\n        <td>\n          <div>\n            {{ selectedAccount.account.name }}\n          </div>\n          <div *ngIf=\"selectedAccount.account.displayNumber\" class=\"bb-text-support\">\n            {{ selectedAccount.account.displayNumber.slice(selectedAccount.account.displayNumber.length-9, selectedAccount.account.displayNumber.length) | paymentCardNumber: productNumberFormat }}\n          </div>\n        </td>\n        <ng-container *ngIf=\"isEditing then editMode; else viewMode\"></ng-container>\n      </tr>\n      \n      <ng-template #editMode>\n        <ng-container *ngFor=\"let permissionLevel of authorizedPermissionLevel | keyvalue : sortKeepOriginalOrder\">\n          <td class=\"text-center\">\n            <ng-container *ngIf=\"useEditableCell(permissionLevel.value); then editableTemplate; else mutedTemplate\"></ng-container>\n            \n            <ng-template #editableTemplate>\n              <bb-icon-ui\n                bbAuthorizedUsersAccessibilityKeyboard\n                [attr.data-role]=\"'user-permissions-edit-table-' + permissionLevel.value + (selectedAccount.level === permissionLevel.value ? '-checked' : '-unchecked')\"\n                [name]=\"selectedAccount.level === permissionLevel.value ? 'radio-button-checked' : 'radio-button-unchecked'\"\n                [color]=\"selectedAccount.level === permissionLevel.value ? 'primary' : 'inactive'\"\n                (click)=\"changeAccountLevel(selectedAccount, permissionLevel.value)\"\n                [attr.aria-checked]=\"selectedAccount.level === permissionLevel.value\"\n              ></bb-icon-ui>\n            </ng-template>\n\n            <ng-template #mutedTemplate>\n              <bb-icon-ui name=\"remove\" color=\"muted\" data-role=\"user-permissions-edit-table-fullAccess-muted\"></bb-icon-ui>\n              <span\n                class=\"sr-only\" \n                i18n=\"Full access can only be assigned to all accounts at once, individual account-level full access permission cannot be assigned | ScreenReader text@@authorized-users.common.permissions-table.view-mode.non-editable\"\n              >\n                Full access can only be assigned to all accounts at once, individual account-level full access permission cannot be assigned.\n              </span>\n            </ng-template>\n          </td>\n        </ng-container>\n      </ng-template>\n      \n      <ng-template #viewMode>\n        <ng-container *ngFor=\"let permissionLevel of authorizedPermissionLevel | keyvalue : sortKeepOriginalOrder\">\n          <td class=\"text-center\">\n            <bb-icon-ui\n              [name]=\"selectedAccount.level === permissionLevel.value ? 'check' : 'remove'\"\n              [color]=\"selectedAccount.level === permissionLevel.value ? 'success' : 'muted'\"\n              [attr.data-role]=\"'user-permissions-view-table-' + permissionLevel.value + (selectedAccount.level === permissionLevel.value ? '-checked' : '-unchecked')\"\n            ></bb-icon-ui>\n            <span\n              *ngIf=\"selectedAccount.level === permissionLevel.value\"\n              class=\"sr-only\" \n              i18n=\"Checked | ScreenReader text@@authorized-users.common.permissions-table.view-mode.checked\"\n            >\n              Checked\n            </span>\n            <span\n              *ngIf=\"!selectedAccount.level === permissionLevel.value\"\n              class=\"sr-only\" \n              i18n=\"Unchecked | ScreenReader text@@authorized-users.common.permissions-table.view-mode.unchecked\"\n            >\n              Unchecked\n            </span>\n          </td>\n        </ng-container>\n      </ng-template>\n      \n    </ng-container>\n  </tbody>\n</table>", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }], pipes: { "paymentCardNumber": i4.PaymentCardNumberPipe, "keyvalue": i2.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsLevelsTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-permissions-levels-table',
                    templateUrl: './permissions-table.component.html',
                }]
        }], propDecorators: { selectedAccounts: [{
                type: Input
            }], isEditing: [{
                type: Input
            }], enableAccountLevelFullAccessPermission: [{
                type: Input
            }], levelsConfig: [{
                type: Input
            }], updateAccount: [{
                type: Output
            }] } });

var AccountList;
(function (AccountList) {
    function fromHttpResponse(response) {
        return {
            items: response.map((item) => ({
                id: item.id,
                name: item.name,
                alias: item.bankAlias,
                IBAN: item.IBAN,
                BBAN: item.BBAN,
                number: item.number,
                currency: item.currency,
                displayNumber: item.IBAN || item.BBAN || item.number,
            })),
        };
    }
    AccountList.fromHttpResponse = fromHttpResponse;
})(AccountList || (AccountList = {}));

var ServiceAgreementRequest;
(function (ServiceAgreementRequest) {
    function toHttpRequest(state) {
        return {
            state,
        };
    }
    ServiceAgreementRequest.toHttpRequest = toHttpRequest;
    function fromHttpResponse(response) {
        return response.body;
    }
    ServiceAgreementRequest.fromHttpResponse = fromHttpResponse;
})(ServiceAgreementRequest || (ServiceAgreementRequest = {}));

class LevelsMappingConfigImplementation {
    fromStringToPermissionLevel(value) {
        if (value.toLocaleLowerCase() === 'view only') {
            return AuthorizedPermissionLevel.VIEW_ONLY;
        }
        else if (value.toLocaleLowerCase() === 'money movement') {
            return AuthorizedPermissionLevel.MONEY_MOVEMENT;
        }
        else if (value.toLocaleLowerCase() === 'full access') {
            return AuthorizedPermissionLevel.FULL_ACCESS;
        }
        else {
            return AuthorizedPermissionLevel.VIEW_ONLY;
        }
    }
    fromPermissionLevelToString(value) {
        switch (value) {
            case AuthorizedPermissionLevel.VIEW_ONLY:
                return 'View Only';
            case AuthorizedPermissionLevel.MONEY_MOVEMENT:
                return 'Money Movement';
            case AuthorizedPermissionLevel.FULL_ACCESS:
                return 'Full Access';
            default:
                return 'View Only';
        }
    }
}

const levelsMappingConfigToken = new InjectionToken('level injection token');
class UsersUIService {
    constructor(
    // eslint-disable-next-line
    levelsConfig, http, assetsService) {
        var _a, _b, _c, _d, _e;
        this.levelsConfig = levelsConfig;
        this.http = http;
        this.assetsService = assetsService;
        this.authorizedPermissionLevel = [
            AuthorizedPermissionLevel.VIEW_ONLY,
            AuthorizedPermissionLevel.MONEY_MOVEMENT,
            AuthorizedPermissionLevel.FULL_ACCESS,
        ];
        this.getURIFromTxtAssetID = (assetId) => `${assetId}.txt`;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.resolveTxtAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-authorized-users-journey-ang',
            getURIFromAssetID: this.getURIFromTxtAssetID,
        });
        this.fetchFile = (fileLocation) => {
            return this.http.get(fileLocation, { responseType: 'text' });
        };
        this.statusMapping = ((_a = this === null || this === void 0 ? void 0 : this.levelsConfig) === null || _a === void 0 ? void 0 : _a.mappings)
            ? this.levelsConfig.mappings
            : new LevelsMappingConfigImplementation();
        const mapLevels = (value, index) => (Object.assign(Object.assign({}, value), { level: this.authorizedPermissionLevel[index], validate() {
                return this.level !== AuthorizedPermissionLevel.FULL_ACCESS;
            } }));
        this.uiLevelsConfig = ((_c = (_b = this === null || this === void 0 ? void 0 : this.levelsConfig) === null || _b === void 0 ? void 0 : _b.uiConfig) === null || _c === void 0 ? void 0 : _c.levels)
            ? this.levelsConfig.uiConfig.levels.map(mapLevels)
            : DEFAULT_UI_LEVELS_CONFIG.levels.map(mapLevels);
        this.uiPermissionsConfig = ((_e = (_d = this === null || this === void 0 ? void 0 : this.levelsConfig) === null || _d === void 0 ? void 0 : _d.uiConfig) === null || _e === void 0 ? void 0 : _e.permissions)
            ? { permissions: this.levelsConfig.uiConfig.permissions }
            : DEFAULT_UI_PERMISSIONS_CONFIG;
    }
    get uiLevelsConfigValue() {
        return this.uiLevelsConfig;
    }
    get uiPermissionsConfigValue() {
        return this.uiPermissionsConfig;
    }
    get statusMappingValue() {
        return this.statusMapping;
    }
    get termsConditionsUrl() {
        return this.resolveTxtAsset('terms-and-conditions');
    }
    termsConditionsContent() {
        return this.termsConditionsUrl.pipe(first(), switchMap(this.fetchFile), catchError(() => {
            console.warn('No terms and conditions file was found');
            return of('');
        }));
    }
}
UsersUIService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UsersUIService, deps: [{ token: levelsMappingConfigToken, optional: true }, { token: i1$1.HttpClient }, { token: i1$2.AssetsService }], target: i0.ɵɵFactoryTarget.Injectable });
UsersUIService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UsersUIService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UsersUIService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [levelsMappingConfigToken]
                }, {
                    type: Optional
                }] }, { type: i1$1.HttpClient }, { type: i1$2.AssetsService }]; } });

class UserDataService {
    constructor(accessGroupDataHttpService, userDataHttpService, productSummaryDataHttpService, usersUIService) {
        this.accessGroupDataHttpService = accessGroupDataHttpService;
        this.userDataHttpService = userDataHttpService;
        this.productSummaryDataHttpService = productSummaryDataHttpService;
        this.usersUIService = usersUIService;
        this.statusMapping = this.usersUIService.statusMappingValue;
        this.accounts = this.productSummaryDataHttpService
            .getArrangementsByBusinessFunction({
            businessFunction: 'Product Summary',
            resourceName: 'Product Summary',
            privilege: 'view',
            size: 1000000,
        })
            .pipe(map(AccountList.fromHttpResponse));
        this.authorizedUsersList = this.userDataHttpService
            .getAuthorizedUsers()
            .pipe(map(AuthorizedUsersList.buildHttpResponse(this.statusMapping)));
    }
    setStatusForServiceAgreements(userSaid, status) {
        return this.accessGroupDataHttpService.putServiceAgreementState({
            serviceAgreementId: userSaid,
            serviceAgreementStatePut: ServiceAgreementRequest.toHttpRequest(status),
        });
    }
    updateAuthorizedUserStatus(id, status) {
        return this.userDataHttpService.updateStatusForAuthorizedUser({
            authorizedUserId: id,
            updateAuthorizedUserStatus: { enabled: status === Status.ENABLED },
        });
    }
    addAuthorizedUser(user) {
        return this.userDataHttpService.createAuthorizedUser({
            postAuthorizedUser: AuthorizedUser.buildHttpRequest(this.statusMapping).post(user),
        });
    }
    retrieveAuthorizedUser() {
        return combineLatest([this.authorizedUsersList, this.accounts]).pipe(map(([authorizedUsers, accounts]) => AuthorizedUsersList.mapData(authorizedUsers, accounts)));
    }
    getAllArrangements() {
        return this.accounts;
    }
    updateAuthorizedUser(id, permissions) {
        return this.userDataHttpService.updatePermissionsForAuthorizedUser({
            authorizedUserId: id,
            putAuthorizedUserPermissions: AuthorizedUser.buildHttpRequest(this.statusMapping).put(permissions),
        });
    }
    removeAuthorizedUser(id) {
        return this.userDataHttpService.deleteAuthorizedUser({
            authorizedUserId: id,
        });
    }
}
UserDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserDataService, deps: [{ token: i1$3.ServiceAgreementHttpService }, { token: i2$1.AuthorizedUserService }, { token: i3.ProductSummaryHttpService }, { token: UsersUIService }], target: i0.ɵɵFactoryTarget.Injectable });
UserDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.ServiceAgreementHttpService }, { type: i2$1.AuthorizedUserService }, { type: i3.ProductSummaryHttpService }, { type: UsersUIService }]; } });

const modules$2 = [IconModule, TableModule, PaymentCardNumberModule];
const declarations = [AuthorizedUsersPermissionsLevelsTableComponent, AuthorizedUsersAccessibilityKeyboardDirective];
class AuthorizedUsersCommonModule {
}
AuthorizedUsersCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AuthorizedUsersCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCommonModule, declarations: [AuthorizedUsersPermissionsLevelsTableComponent, AuthorizedUsersAccessibilityKeyboardDirective], imports: [CommonModule, IconModule, TableModule, PaymentCardNumberModule], exports: [IconModule, TableModule, PaymentCardNumberModule, AuthorizedUsersPermissionsLevelsTableComponent, AuthorizedUsersAccessibilityKeyboardDirective] });
AuthorizedUsersCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCommonModule, providers: [UserDataService, UsersUIService], imports: [[CommonModule, ...modules$2], IconModule, TableModule, PaymentCardNumberModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...modules$2],
                    providers: [UserDataService, UsersUIService],
                    declarations: [...declarations],
                    exports: [...modules$2, ...declarations],
                }]
        }] });

class AuthorizedUsersStepperComponent {
    constructor() {
        this.currentStep = 1;
    }
}
AuthorizedUsersStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersStepperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersStepperComponent, selector: "bb-authorized-users-stepper", inputs: { currentStep: "currentStep" }, ngImport: i0, template: "<bb-stepper-ui>\n  <bb-stepper-step-ui \n    label=\"User details\"\n    class=\"bb-stack__item\"\n    i18n-label=\"User details@@authorized-users.create.stepper.header.step1\"\n    [isChecked]=\"currentStep > 1\"\n    [isActive]=\"currentStep >= 1\"\n    ariaLabel=\"Step 1 out of 4\"\n    i18n-ariaLabel=\"Step 1 out of 4@@authorized-users.create.stepper.aria.label.step1\"\n  >\n  </bb-stepper-step-ui>\n  <bb-stepper-step-ui \n    class=\"bb-stack__item\" \n    label=\"Accounts\"\n    i18n-label=\"Accounts@@authorized-users.create.stepper.header.step2\"\n    [isChecked]=\"currentStep > 2\"\n    [isActive]=\"currentStep >= 2\" \n    ariaLabel=\"Step 2 out of 4\"\n    i18n-ariaLabel=\"Step 2 out of 4@@authorized-users.create.stepper.aria.label.step2\"\n  >\n  </bb-stepper-step-ui>\n  <bb-stepper-step-ui \n    class=\"bb-stack__item\" \n    label=\"Permissions\" \n    i18n-label=\"Permissions@@authorized-users.create.stepper.header.step3\"\n    [isActive]=\"currentStep >= 3\" \n    [isChecked]=\"currentStep > 3\"\n    ariaLabel=\"Step 3 out of 4\"\n    i18n-ariaLabel=\"Step 3 out of 4@@authorized-users.create.stepper.aria.label.step3\"\n  >\n  </bb-stepper-step-ui>\n  <bb-stepper-step-ui \n    class=\"bb-stack__item\" \n    label=\"Confirmation\" \n    i18n-label=\"Confirmation@@authorized-users.create.stepper.header.step4\"\n    [isActive]=\"currentStep >= 4\" \n    ariaLabel=\"Step 4 out of 4\"\n    i18n-ariaLabel=\"Step 3 out of 4@@authorized-users.create.stepper.aria.label.step4\"\n  >\n  </bb-stepper-step-ui>\n</bb-stepper-ui>", components: [{ type: i1$4.StepperComponent, selector: "bb-stepper-ui", outputs: ["select"] }, { type: i1$4.StepperStepComponent, selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersStepperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-stepper',
                    templateUrl: 'authorized-users-stepper.component.html',
                }]
        }], propDecorators: { currentStep: [{
                type: Input
            }] } });

class AuthorizedUserEditStepperComponent {
    constructor() {
        this.currentStep = 1;
    }
}
AuthorizedUserEditStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserEditStepperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUserEditStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUserEditStepperComponent, selector: "bb-authorized-users-edit-stepper", inputs: { currentStep: "currentStep" }, ngImport: i0, template: "<div class=\"bb-authorized-users-stepper\">\n  <bb-stepper-ui class=\"col-8\">\n    <bb-stepper-step-ui \n      class=\"bb-stack__item\"\n      label=\"Accounts\"\n      i18n-label=\"Accounts@@authorized-users.edit.stepper.header.step1\"\n      [isChecked]=\"currentStep > 1\"\n      [isActive]=\"currentStep >= 1\"\n      ariaLabel=\"Step 1 out of 3\"\n      i18n-ariaLabel=\"Step 1 out of 3@@authorized-users.edit.stepper.aria.label.step1\"\n    >\n    </bb-stepper-step-ui>\n    <bb-stepper-step-ui \n      class=\"bb-stack__item\" \n      label=\"Permissions\" \n      i18n-label=\"Permissions@@authorized-users.edit.stepper.header.step2\"\n      [isChecked]=\"currentStep > 2\"\n      [isActive]=\"currentStep >= 2\" \n      ariaLabel=\"Step 2 out of 3\"\n      i18n-ariaLabel=\"Step 2 out of 3@@authorized-users.edit.stepper.aria.label.step2\"\n    >\n    </bb-stepper-step-ui>\n    <bb-stepper-step-ui \n      class=\"bb-stack__item\" \n      label=\"Confirmation\"\n      i18n-label=\"Permissions@@authorized-users.edit.stepper.header.step3\"\n      [isActive]=\"currentStep >= 3\" \n      [isChecked]=\"currentStep > 3\"\n      ariaLabel=\"Step 3 out of 3\"\n      i18n-ariaLabel=\"Step 3 out of 3@@authorized-users.edit.stepper.aria.label.step3\"\n    >\n    </bb-stepper-step-ui>\n  </bb-stepper-ui>\n</div>", components: [{ type: i1$4.StepperComponent, selector: "bb-stepper-ui", outputs: ["select"] }, { type: i1$4.StepperStepComponent, selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserEditStepperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-edit-stepper',
                    templateUrl: 'authorized-users-edit-stepper.component.html',
                }]
        }], propDecorators: { currentStep: [{
                type: Input
            }] } });

class AuthorizedUsersCreateContainerComponent {
    constructor() {
        this.nextStep = 1;
    }
    nextStepIndex() {
        return this.nextStep++;
    }
}
AuthorizedUsersCreateContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersCreateContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersCreateContainerComponent, selector: "bb-authorized-users-create-container", ngImport: i0, template: "<div class=\"card\">\n  <div class=\"card-body modal-body\">\n    <ng-content></ng-content>\n  </div>\n</div>" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-create-container',
                    templateUrl: 'authorized-users-create-container.component.html',
                }]
        }] });

// eslint-disable-next-line
class BaseAuthorizedUsersCreateStep {
    constructor() {
        this.next = new EventEmitter();
        this.back = new EventEmitter();
        this.saveOnly = new EventEmitter();
        this.cancel = new EventEmitter();
        this.isFirstStep = false;
    }
    goNext(authorizedUser) {
        this.next.emit(authorizedUser);
    }
    goBack() {
        this.back.emit();
    }
    saveChanges(authorizedUser) {
        this.saveOnly.emit(authorizedUser);
    }
    abort() {
        this.cancel.emit();
    }
    ngOnInit() {
        if (!this.authorizedUser) {
            throw new Error(`"authorizedUser" input is required in "${this.constructor.name}"`);
        }
    }
}
BaseAuthorizedUsersCreateStep.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseAuthorizedUsersCreateStep, deps: [], target: i0.ɵɵFactoryTarget.Directive });
BaseAuthorizedUsersCreateStep.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BaseAuthorizedUsersCreateStep, inputs: { authorizedUser: "authorizedUser", isFirstStep: "isFirstStep", enableAccountLevelFullAccessPermission: "enableAccountLevelFullAccessPermission", levelsConfig: "levelsConfig", permissionsConfig: "permissionsConfig" }, outputs: { next: "next", back: "back", saveOnly: "saveOnly", cancel: "cancel" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseAuthorizedUsersCreateStep, decorators: [{
            type: Directive
        }], propDecorators: { next: [{
                type: Output
            }], back: [{
                type: Output
            }], saveOnly: [{
                type: Output
            }], cancel: [{
                type: Output
            }], authorizedUser: [{
                type: Input
            }], isFirstStep: [{
                type: Input
            }], enableAccountLevelFullAccessPermission: [{
                type: Input
            }], levelsConfig: [{
                type: Input
            }], permissionsConfig: [{
                type: Input
            }] } });

class AuthorizedUsersUserDetailsComponent extends BaseAuthorizedUsersCreateStep {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.suscription$ = new Subscription();
        this.validateEmailMatch = () => {
            const emailField = this.formGetter('email', 'emailGroup');
            const confirmationEmailField = this.formGetter('confirmationEmail', 'emailGroup');
            // eslint-disable-next-line no-null/no-null
            return (emailField === null || emailField === void 0 ? void 0 : emailField.value) !== (confirmationEmailField === null || confirmationEmailField === void 0 ? void 0 : confirmationEmailField.value) ? { validateMailConfirmation: true } : null;
        };
    }
    ngOnInit() {
        var _a;
        super.ngOnInit();
        this.userDetailsForm = this.formBuilder.group({
            firstName: [this.authorizedUser.firstName, Validators.required],
            lastName: [this.authorizedUser.lastName, Validators.required],
            emailGroup: this.formBuilder.group({
                email: [this.authorizedUser.email, Validators.compose([Validators.required, Validators.email])],
                confirmationEmail: [this.authorizedUser.email, Validators.compose([Validators.required, Validators.email])],
            }),
            mobileNumber: [this.authorizedUser.mobileNumber, Validators.required],
        });
        this.suscription$.add((_a = this.formGetter('emailGroup')) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(() => {
            const confirmationEmailControl = this.formGetter('confirmationEmail', 'emailGroup');
            if (confirmationEmailControl) {
                confirmationEmailControl.setValidators([Validators.required, Validators.email, this.validateEmailMatch]);
                confirmationEmailControl.updateValueAndValidity({ emitEvent: false });
            }
        }));
    }
    isFieldValid(fieldName, fieldGroup) {
        const controlField = this.formGetter(fieldName, fieldGroup);
        return !!controlField && (controlField.valid || controlField.untouched);
    }
    save() {
        var _a, _b;
        if ((_a = this.userDetailsForm) === null || _a === void 0 ? void 0 : _a.valid) {
            this.goNext(this.formatAuthorizedUserValue());
        }
        else {
            (_b = this.userDetailsForm) === null || _b === void 0 ? void 0 : _b.markAllAsTouched();
        }
    }
    formatAuthorizedUserValue() {
        const { firstName, lastName, emailGroup: { email }, mobileNumber, } = this.userDetailsForm.value;
        return { firstName, lastName, email, mobileNumber };
    }
    formGetter(fieldName, fieldGroup) {
        var _a, _b, _c;
        const controlField = !!fieldGroup
            ? (_b = (_a = this.userDetailsForm) === null || _a === void 0 ? void 0 : _a.get(fieldGroup)) === null || _b === void 0 ? void 0 : _b.get(fieldName)
            : (_c = this.userDetailsForm) === null || _c === void 0 ? void 0 : _c.get(fieldName);
        return controlField;
    }
    ngOnDestroy() {
        this.suscription$.unsubscribe();
    }
}
AuthorizedUsersUserDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersUserDetailsComponent, deps: [{ token: i1$5.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersUserDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersUserDetailsComponent, selector: "bb-authorized-users-user-details", usesInheritance: true, ngImport: i0, template: "<form [formGroup]=\"userDetailsForm\" (submit)=\"save()\">\n  <div class=\"bb-block bb-block--lg\" bbAuthorizedUsersAccessibilityKeyboard>\n    <h2 \n      data-role=\"user-details-header\"\n      i18n=\"user creation details header@@authorized.users.createUser.header\"\n    >\n      Who would you like to give access to?\n    </h2>\n  </div>\n\n  <div class=\"bb-block\">\n    <div class=\"row\">\n      <div class=\"col-12 col-sm-6 form-group\">\n        <bb-input-text-ui\n          formControlName=\"firstName\"\n          data-role=\"user-details-first-name\"\n          label=\"First Name\"\n          i18n-label=\"user creation details first name@@authorized.users.createUser.label.firstName\"\n          maxLength=\"256\"\n        ></bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('firstName')\">\n          <span \n            data-role=\"user-details-first-name-validation-msg\"\n            i18n=\"user creation first name required error message@@authorized.users.createUser.errorMessage.required.firstName\">\n            First name is required\n          </span>\n        </bb-input-validation-message-ui>  \n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12 col-sm-6 form-group\">\n        <bb-input-text-ui\n          formControlName=\"lastName\"\n          data-role=\"user-details-last-name\"\n          label=\"Last Name\"\n          i18n-label=\"user creation details last name@@authorized.users.createUser.label.lastName\"\n          maxLength=\"256\"\n        ></bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('lastName')\">\n          <span \n            data-role=\"user-details-last-name-validation-msg\"\n            i18n=\"user creation last name required error message@@authorized.users.createUser.errorMessage.required.lastName\">\n            Last name is required\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n    <ng-container formGroupName=\"emailGroup\">\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6 form-group\">\n          <bb-input-email-ui\n            formControlName=\"email\"\n            data-role=\"user-details-email\"\n            label=\"Email\"\n            i18n-label=\"user creation details email@@authorized.users.createUser.label.email\"\n            required=\"true\"\n          ></bb-input-email-ui>\n          <ng-container *ngIf=\"isFieldValid('email', 'emailGroup')\">\n            <span \n              class=\"bb-text-support text-small\" \n              i18n=\"user creation confirmation support text@@authorized.users.createUser.info.emailConfirmation\"\n            >\n            We will send a confirmation to their email address.\n            </span> \n          </ng-container>\n          <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('email', 'emailGroup')\" data-role=\"user-details-email-validation-msg\">\n            <ng-container *ngFor=\"let error of formGetter('email', 'emailGroup')?.errors | keyvalue; first as first\">\n                <ng-container *ngIf=\"first\" [ngSwitch]=\"error.key\">\n                  <span\n                    *ngSwitchCase=\"'required'\"\n                    i18n=\"user creation email required error message@@authorized.users.createUser.errorMessage.required.email\"\n                  >\n                    Email address is required\n                  </span>\n                  <span\n                    *ngSwitchCase=\"'email'\"\n                    i18n=\"invalid email format@@authorized.users.createUser.errorMessage.format.confirmationEmail\"\n                  >\n                  Invalid email format\n                  </span>\n                </ng-container>\n              </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6 form-group\">\n          <bb-input-email-ui\n            formControlName=\"confirmationEmail\"\n            data-role=\"user-details-confirmation-email\"\n            label=\"Confirm Email\"\n            i18n-label=\"user creation details confirm email@@authorized.users.createUser.label.confirmationEmail\"\n            required=\"true\"\n          ></bb-input-email-ui>\n          <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('confirmationEmail', 'emailGroup')\" data-role=\"user-details-confirmation-email-validation-msg\">\n            <ng-container *ngFor=\"let error of formGetter('confirmationEmail', 'emailGroup')?.errors | keyvalue; first as first\">\n              <ng-container *ngIf=\"first\" [ngSwitch]=\"error.key\">\n                <span\n                  *ngSwitchCase=\"'required'\"\n                  i18n=\"confirm email address is required@@authorized.users.createUser.errorMessage.required.confirmationEmail\"\n                >\n                  Confirm email address is required\n                </span>\n                <span\n                  *ngSwitchCase=\"'email'\"\n                  i18n=\"invalid email format@@authorized.users.createUser.errorMessage.format.confirmationEmail\"\n                >\n                Invalid email format\n                </span>\n                <span\n                  *ngSwitchCase=\"'validateMailConfirmation'\"\n                  i18n=\"email addresses do not match@@authorized.users.createUser.errorMessage.match.confirmationEmail\"\n                >\n                Email addresses do not match\n                </span>\n              </ng-container>\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </ng-container>\n\n    <div class=\"row\">\n      <div class=\"col-12 col-sm-6 form-group\">\n        <bb-input-phone-ui\n          formControlName=\"mobileNumber\"\n          data-role=\"user-details-phone-number\"\n          label=\"Phone Number\"\n          i18n-label=\"user creation details phone number@@authorized.users.createUser.label.phoneNumber\"\n          required=\"true\"\n        ></bb-input-phone-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('mobileNumber')\">\n          <span \n            data-role=\"user-details-phone-number-validation-msg\"\n            i18n=\"user creation phone number required error message@@authorized.users.createUser.errorMessage.required.phoneNumber\">\n            Phone number is required\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      data-role=\"user-details-continue-button\"\n      i18n=\"Continue button text@@authorized-users.create.details.continue.button\"\n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >Continue</button>\n    <button \n      bbButton \n      data-role=\"user-details-cancel-button\"\n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel button text@@authorized-users.create.details.cancel.button\"\n      (click)=\"abort()\"\n    >Cancel</button>\n  </div>\n</form>\n", components: [{ type: i2$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4$1.InputEmailComponent, selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }, { type: i5.InputPhoneComponent, selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }], directives: [{ type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$5.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1$5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "keyvalue": i2.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersUserDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-user-details',
                    templateUrl: 'authorized-users-user-details.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$5.FormBuilder }]; } });

class AuthorizedUsersAccountsComponent extends BaseAuthorizedUsersCreateStep {
    constructor() {
        super(...arguments);
        this.model = {};
        this.productNumberFormat = DEFAULT_ACCOUNT_NUMBER_FORMAT;
        this.showError = false;
    }
    save() {
        if (this.hasAccounts()) {
            this.goNext({ permissions: this.cleanPermissions(this.createAuthorizedPermission()) });
        }
        else {
            this.showError = true;
        }
    }
    closeError() {
        this.showError = false;
    }
    cleanPermissions(permissions) {
        const fullAccessPermissions = permissions.filter((permission) => permission.level === AuthorizedPermissionLevel.FULL_ACCESS);
        if (fullAccessPermissions.length > 0 && fullAccessPermissions.length !== this.accounts.length) {
            return permissions.map((permission) => (Object.assign(Object.assign({}, permission), { level: AuthorizedPermissionLevel.VIEW_ONLY })));
        }
        else {
            return [...permissions];
        }
    }
    createAuthorizedPermission() {
        // Every member of the model has the account id as a key
        return Object.keys(this.model)
            .filter((accountId) => !!this.model[accountId])
            .map((accountId) => ({
            account: this.accounts.find((account) => account.id === accountId),
            level: this.setLevelToPermissionByAccount(accountId),
        }));
    }
    setLevelToPermissionByAccount(account) {
        if (this.authorizedUser.permissions) {
            const permission = this.authorizedUser.permissions.find((item) => item.account.id === account);
            return (permission === null || permission === void 0 ? void 0 : permission.level) ? permission.level : AuthorizedPermissionLevel.VIEW_ONLY;
        }
        else {
            return AuthorizedPermissionLevel.VIEW_ONLY;
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.setPresetPermissions(this.authorizedUser.permissions);
    }
    setPresetPermissions(permissions = []) {
        permissions.forEach((data) => {
            this.model[data.account.id] = true;
        });
    }
    hasAccounts() {
        return Object.keys(this.model).reduce((prev, curr) => (this.model[curr] ? prev + 1 : prev), 0) > 0;
    }
}
AuthorizedUsersAccountsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersAccountsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersAccountsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersAccountsComponent, selector: "bb-authorized-users-accounts", inputs: { accounts: "accounts" }, usesInheritance: true, ngImport: i0, template: "<form \n  #authorizedUsersAccountForm=\"ngForm\" \n  (ngSubmit)=\"save()\" \n  data-role=\"user-accounts-form\"\n>\n  <div class=\"bb-block bb-block--xl\" bbAuthorizedUsersAccessibilityKeyboard>\n    <h2 \n      data-role=\"user-accounts-header\"\n      i18n=\"user accounts selection header@@authorized.users.accounts.header\"\n    >\n      Which accounts will they have access to?\n    </h2>\n    <p \n      class=\"bb-text-support text-small\" \n      data-role=\"user-accounts-subHeader\"\n      i18n=\"user accounts selection subHeader@@authorized.users.accounts.subHeader\"\n    >\n      You will be able to specify permissions for each account in the next step.\n    </p>\n  </div>\n  <bb-alert-ui \n    *ngIf=\"showError\" \n    data-role=\"user-accounts-error-message\"\n    title=\"You need to select at least one account in order to continue\"\n    i18n-title=\"Account Failed Notification|Message for a notification displayed when no accounts are selected@@authorized-users.create.accounts.notification.error\"\n    [dismissible]=\"true\"\n    (closed)=\"closeError()\"\n  ></bb-alert-ui>\n  <ul \n    ngModelGroup=\"list\" \n    class=\"bb-list\"\n  >\n    <li class=\"bb-block bb-block--lg\">\n      <bb-checkbox-group-ui \n        label=\"Select all my accounts\"\n        data-role=\"user-accounts-select-all\"\n      ></bb-checkbox-group-ui>\n    </li>\n    <li *ngFor=\"let item of accounts\" class=\"bb-block bb-block--lg\" data-role=\"user-accounts-list\">\n      <bb-input-checkbox-ui\n        name=\"{{item.id}}\"\n        [(ngModel)]=\"model[item.id]\"\n        data-role=\"user-accounts-account-checkbox\"\n      >\n        <span class=\"bb-stack__item--spacing-sm highlight\" data-role=\"user-accounts-account-name\">{{item.name}}</span>\n        <span *ngIf=\"item.displayNumber\" class=\"bb-text-support\" data-role=\"user-accounts-account-number\">\n          {{ item.displayNumber.slice(item.displayNumber.length-9, item.displayNumber.length) | paymentCardNumber: productNumberFormat }}\n        </span>\n      </bb-input-checkbox-ui>\n    </li>\n  </ul>\n\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      data-role=\"user-accounts-continue-button\"\n      i18n=\"Continue button text@@authorized-users.create.accounts.continue.button\"\n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >Continue</button>\n    <button \n      bbButton \n      data-role=\"user-accounts-back-button\"\n      class=\"bb-button-bar__button\"\n      i18n=\"Back button text@@authorized-users.create.accounts.back.button\"\n      color=\"secondary\" \n      *ngIf=\"!isFirstStep\"\n      (click)=\"goBack()\"\n    >Back</button>\n    <button \n      bbButton \n      data-role=\"user-accounts-cancel-button\"\n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel button text@@authorized-users.accounts.create.cancel.button\"\n      (click)=\"abort()\"\n    >Cancel</button>\n  </div>\n</form>\n", components: [{ type: i1$6.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2$3.CheckboxGroupComponent, selector: "bb-checkbox-group-ui" }, { type: i3$3.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$5.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "paymentCardNumber": i4.PaymentCardNumberPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersAccountsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-accounts',
                    templateUrl: 'authorized-users-accounts.component.html',
                }]
        }], propDecorators: { accounts: [{
                type: Input
            }] } });

class AuthorizedUsersPermissionsCardComponent {
    constructor() {
        this.icon = '';
        this.title = '';
        this.disabled = false;
        this.permissions = [];
    }
    ngOnInit() {
        if (this.permissionsAssigned && this.permissionsConfig) {
            const permissionsAssigned = this.permissionsAssigned;
            this.permissions = this.permissionsConfig.map((name, index) => ({ name, value: permissionsAssigned[index] }));
        }
    }
}
AuthorizedUsersPermissionsCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersPermissionsCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersPermissionsCardComponent, selector: "bb-authorized-users-permissions-card", inputs: { icon: "icon", title: "title", name: "name", currentName: "currentName", permissionsConfig: "permissionsConfig", permissionsAssigned: "permissionsAssigned", disabled: "disabled" }, ngImport: i0, template: "<div \n  class=\"bb-authorized-users-permission-card card card-sm\"\n  [ngClass]=\"{\n    'bb-authorized-users-permission-card--selected': name===currentName,\n    'bb-authorized-users-permission-card--disabled': disabled\n  }\"\n>\n  <div class=\"card-body\" bbAuthorizedUsersAccessibilityKeyboard>\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <span class=\"bb-authorized-user-permission-card__radio\">\n          <bb-icon-ui \n            [name]=\"name===currentName?'radio-button-checked':'radio-button-unchecked'\"\n            [color]=\"name===currentName?'primary':'inactive'\"\n          ></bb-icon-ui>\n        </span>\n      </div>\n    </div>\n    <div class=\"bb-text-align-center\">\n      <bb-icon-ui [name]=\"icon\"></bb-icon-ui>\n    </div>\n    <div class=\"bb-block bb-block--md bb-highlight bb-text-align-center\">\n      {{title}}\n    </div> \n    \n\n    <ul class=\"bb-list\">\n      <li class=\"bb-stack bb-block bb-block--md\" *ngFor=\"let permission of permissions\">\n        <bb-icon-ui \n          class=\"bb-stack__item\" \n          [color]=\"permission.value?'success':'danger'\" \n          size=\"sm\" \n          [name]=\"permission.value?'check':'clear'\" \n          aria-label=\"include: \"\n          i18n-aria-label=\"include: @@uthorized.users.permissions.card.include\"\n        ></bb-icon-ui>\n        <span class=\"bb-text-support bb-subheader bb-subheader--regular\">{{permission.name}}</span>\n      </li>\n    </ul>\n  </div>\n</div>\n<div \n  data-role=\"user-permissions-card-disclaimer\"\n  class=\"bb-authorized-users-permission-card__disclaimer text-small text-center\" \n  *ngIf=\"name===currentName\"\n  i18n=\"authorized users disclaimer@@authorized-users.create.permissions.card.disclaimer\"\n>\n  Applied to all Selected Accounts\n</div>", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-permissions-card',
                    templateUrl: 'authorized-users-permissions-card.component.html',
                }]
        }], propDecorators: { icon: [{
                type: Input
            }], title: [{
                type: Input
            }], name: [{
                type: Input
            }], currentName: [{
                type: Input
            }], permissionsConfig: [{
                type: Input
            }], permissionsAssigned: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });

class AuthorizedUsersPermissionsComponent extends BaseAuthorizedUsersCreateStep {
    constructor() {
        super(...arguments);
        this.authorizedPermissionLevel = AuthorizedPermissionLevel;
        this._isCustomPermission = false;
    }
    get isCustomPermission() {
        return this._isCustomPermission;
    }
    set isCustomPermission(value) {
        this._isCustomPermission = value;
        this.generalLevel = undefined;
    }
    applyLevelToAccounts(generalLevel) {
        var _a;
        const permissions = (_a = this.authorizedUser.permissions) === null || _a === void 0 ? void 0 : _a.map((permission) => (Object.assign(Object.assign({}, permission), { level: generalLevel || AuthorizedPermissionLevel.VIEW_ONLY })));
        return Object.assign(Object.assign({}, this.authorizedUser), { permissions });
    }
    applyLevelToAccount(permission) {
        const permissions = [...(this.authorizedUser.permissions || [])];
        const index = permissions.findIndex((item) => item.account.id === permission.account.id);
        if (index !== -1) {
            permissions[index] = permission;
        }
        return Object.assign(Object.assign({}, this.authorizedUser), { permissions });
    }
    areTheSameLevel() {
        var _a, _b, _c, _d, _e;
        const level = ((_a = this.authorizedUser) === null || _a === void 0 ? void 0 : _a.permissions) && this.authorizedUser.permissions[0].level;
        const count = ((_c = (_b = this.authorizedUser) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.reduce((prev, curr) => (level === curr.level ? prev + 1 : prev), 0)) || -1;
        return count === ((_e = (_d = this.authorizedUser) === null || _d === void 0 ? void 0 : _d.permissions) === null || _e === void 0 ? void 0 : _e.length);
    }
    setGeneralLevel(level) {
        if (!this.isCustomPermission) {
            this.generalLevel = level;
            this.saveChanges(this.applyLevelToAccounts(this.generalLevel));
        }
    }
    apply() {
        this.goNext(this.authorizedUser);
    }
    updateAccount(permission) {
        this.saveChanges(this.applyLevelToAccount(permission));
    }
    disableCard(level) {
        var _a, _b, _c, _d;
        if (!((_a = this.authorizedUser) === null || _a === void 0 ? void 0 : _a.permissions)) {
            return false;
        }
        const allAccountsSelected = ((_c = (_b = this.authorizedUser) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.length) === ((_d = this.accounts) === null || _d === void 0 ? void 0 : _d.length);
        return !allAccountsSelected && !level.validate();
    }
    togglePermissionMode() {
        if (this.isCustomPermission && this.levelsConfig) {
            this.saveChanges(this.applyLevelToAccounts(this.levelsConfig[0].level));
        }
        else if (this.levelsConfig) {
            this.setGeneralLevel(this.levelsConfig[0].level);
        }
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.areTheSameLevel()) {
            this.generalLevel = this.authorizedUser.permissions && this.authorizedUser.permissions[0].level;
        }
        else {
            this.isCustomPermission = true;
        }
    }
}
AuthorizedUsersPermissionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersPermissionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersPermissionsComponent, selector: "bb-authorized-users-permissions", inputs: { accounts: "accounts" }, usesInheritance: true, ngImport: i0, template: "<form #authorizedUsersPermissionsForm=\"ngForm\" data-role=\"user-permissions-form\">\n  <div class=\"bb-block bb-block--lg\" bbAuthorizedUsersAccessibilityKeyboard>\n    <h2 \n      data-role=\"user-permissions-header\"\n      i18n=\"user permissions selection header@@authorized.users.permissions.header\"\n    >\n      What permissions do you want to give?\n    </h2>\n    <p \n      class=\"bb-text-support text-small\" \n      data-role=\"user-permissions-subHeader\"\n      i18n=\"user permissions selection subHeader@@authorized.users.permissions.subHeader\"\n    >\n      Choose one permission for all selected accounts or different permissions for each account.\n    </p>\n  </div>\n\n  <div class=\"row bb-block bb-block--xl\">\n    <bb-authorized-users-permissions-card\n      *ngFor=\"let permissionLevel of levelsConfig\"\n      class=\"col-lg-4 bb-block bb-block--md-md-down\"\n      [title]=\"permissionLevel.title\"\n      [icon]=\"permissionLevel.icon\"\n      [name]=\"permissionLevel.level\"\n      [currentName]=\"generalLevel\"\n      [disabled]=\"disableCard(permissionLevel)\"\n      [permissionsConfig]=\"permissionsConfig?.permissions\"\n      [permissionsAssigned]=\"permissionLevel.permissionsAssigned\"\n      (click)=\"!disableCard(permissionLevel) && setGeneralLevel(permissionLevel.level)\"\n    >\n    </bb-authorized-users-permissions-card>\n  </div>\n\n  <div class=\"bb-stack bb-block bb-block--xl\">\n    <div class=\"bb-stack__item bb-stack__item--spacing-sm bb-stack__item--align-top\">\n      <bb-switch-ui\n        name=\"customPermissions\"\n        data-role=\"user-permissions-switch\"\n        aria-label=\"Choose different permissions for each account\"\n        [(ngModel)]=\"isCustomPermission\"\n        (click)=\"togglePermissionMode()\"\n      ></bb-switch-ui>\n    </div>\n    <div class=\"bb-stack__item\">\n      <label \n        class=\"bb-switch__label\" \n        data-role=\"user-permissions-switch-label\"\n      >\n        Choose different permissions for each account\n      </label>\n      <div\n        *ngIf=\"!enableAccountLevelFullAccessPermission\"\n        class=\"bb-text-support text-small\"\n        data-role=\"user-permissions-switch-description\"\n        i18n=\"Different permission selection subTitle@@authorized.users.different.permission.subTtitle\"\n      >\n        Keep in mind that you can only give Full Access permissions to all accounts at once.\n    </div>\n   </div>\n  </div>\n\n  <bb-authorized-users-permissions-levels-table\n    *ngIf=\"isCustomPermission\"\n    [isEditing]=\"true\"\n    [enableAccountLevelFullAccessPermission]=\"enableAccountLevelFullAccessPermission\"\n    [selectedAccounts]=\"authorizedUser.permissions\"\n    [levelsConfig]=\"levelsConfig\"\n    (updateAccount)=\"updateAccount($event)\"\n    data-role=\"user-permissions-table\"\n  ></bb-authorized-users-permissions-levels-table>\n\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      data-role=\"user-permissions-continue-button\"\n      i18n=\"Continue button text@@authorized-users.create.permissions.continue.button\"\n      class=\"bb-button-bar__button\" \n      (click)=\"apply()\"\n    >Continue</button>\n    <button \n      bbButton \n      data-role=\"user-permissions-back-button\"\n      class=\"bb-button-bar__button\"\n      i18n=\"Back button text@@authorized-users.create.permissions.back.button\"\n      color=\"secondary\" \n      (click)=\"goBack()\"\n    >Back</button>\n    <button \n      bbButton \n      data-role=\"user-permissions-cancel-button\"\n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel button text@@authorized-users.create.permissions.cancel.button\"\n      (click)=\"abort()\"\n    >Cancel</button>\n  </div>\n</form>", components: [{ type: AuthorizedUsersPermissionsCardComponent, selector: "bb-authorized-users-permissions-card", inputs: ["icon", "title", "name", "currentName", "permissionsConfig", "permissionsAssigned", "disabled"] }, { type: i2$4.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: AuthorizedUsersPermissionsLevelsTableComponent, selector: "bb-authorized-users-permissions-levels-table", inputs: ["selectedAccounts", "isEditing", "enableAccountLevelFullAccessPermission", "levelsConfig"], outputs: ["updateAccount"] }], directives: [{ type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-permissions',
                    templateUrl: 'authorized-users-permissions.component.html',
                }]
        }], propDecorators: { accounts: [{
                type: Input
            }] } });

class AuthorizedUsersConfirmationComponent extends BaseAuthorizedUsersCreateStep {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.showError = false;
        this.isSaving = false;
        this.showErrorChange = new EventEmitter();
        this.confirmationDetailsForm = this.formBuilder.group({
            termsCB: [false, Validators.requiredTrue],
        });
    }
    saveUser() {
        if (this.confirmationDetailsForm.valid) {
            this.goNext(this.authorizedUser);
        }
        else {
            this.confirmationDetailsForm.markAllAsTouched();
        }
    }
    closeError() {
        this.showErrorChange.emit(false);
    }
    getControl(fieldName) {
        return this.confirmationDetailsForm.get(fieldName);
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
}
AuthorizedUsersConfirmationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersConfirmationComponent, deps: [{ token: i1$5.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersConfirmationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersConfirmationComponent, selector: "bb-authorized-users-confirmation", inputs: { showError: "showError", isSaving: "isSaving", termsConditions: "termsConditions" }, outputs: { showErrorChange: "showErrorChange" }, usesInheritance: true, ngImport: i0, template: "<form \n  [formGroup]=\"confirmationDetailsForm\" \n  data-role=\"user-confirmation-form\"\n>\n  <div class=\"bb-block bb-block--lg\" bbAuthorizedUsersAccessibilityKeyboard>\n    <h2\n      class=\"bb-block bb-block--lg\" \n      data-role=\"user-confirmation-header\"\n      i18n=\"Please review and confirm the authorized user information@@authorized-users.create.confirmation.heading-1\"\n    >\n      Please review and confirm the authorized user information.\n    </h2>\n    <bb-alert-ui \n      *ngIf=\"showError\" \n      data-role=\"user-confirmation-error-message\"\n      title=\"Something Went Wrong\"\n      i18n-title=\"Confirmation Failed Notification|Title for a notification displayed when confirmation user is failed@@authorized-users.create.confirmation.notification.error.title\"\n      message=\"We failed to confirm this authorized user, please try again later.\"\n      i18n-message=\"Confirmation Failed Notification Message|Message for a notification displayed when confirmation user is failed@@authorized-users.create.confirmation.notification.error.message\"\n      [dismissible]=\"true\"\n      (closed)=\"closeError()\"\n    ></bb-alert-ui>\n    <h3 class=\"bb-block bb-block--sm\" data-role=\"user-confirmation-fullName\">\n      {{authorizedUser.firstName + ' ' + authorizedUser.lastName}}\n    </h3>\n    <div class=\"bb-block bb-block--sm\" data-role=\"user-confirmation-email\">{{authorizedUser.email}}</div>\n    <div class=\"bb-block bb-block--sm\" data-role=\"user-confirmation-phone-number\">{{authorizedUser.mobileNumber}}</div>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <bb-authorized-users-permissions-levels-table \n      [selectedAccounts]=\"authorizedUser.permissions\"\n      [levelsConfig]=\"levelsConfig\"\n      data-role=\"user-confirmation-permissions-table\"\n    ></bb-authorized-users-permissions-levels-table>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <div \n      class=\"bb-block bb-block--md bb-highlight\" \n      data-role=\"user-confirmation-terms-header\"\n      i18n=\"Terms and conditions@@authorized-users.create.confirmation.tos.title\"\n    >\n      Terms and Conditions\n    </div>\n\n    <div class=\"bb-authorized-users-terms bb-block bb-block--md\" bbAuthorizedUsersAccessibilityKeyboard>\n      <ng-container *ngTemplateOutlet=\"termsAndConditions\"></ng-container>\n    </div>\n\n    <bb-input-checkbox-ui\n      formControlName=\"termsCB\"\n      [id]=\"'confirmationTosCheckbox'\"\n      data-role=\"user-confirmation-terms-checkbox\"\n      label=\"I have read and accept the terms and conditions.\"\n      i18n-label=\"I have read and accept the terms and conditions.@@authorized-users.create.confirmation.tos.label\"\n      class=\"bb-stack__item\"\n    ></bb-input-checkbox-ui>\n\n    <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('termsCB')\">\n      <span \n        *ngIf=\"hasError('termsCB', 'required')\" \n        data-role=\"user-confirmation-terms-validation-msg\"\n        i18n=\"You are required to accept terms and conditions@@authorized-users.create.confirmation.tos.error-label.required\"\n      >\n        You are required to accept terms and conditions\n      </span>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <bb-load-button-ui\n        color=\"primary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"user-confirmation-confirm-button\"\n        [isLoading]=\"isSaving\"\n        (click)=\"!isSaving && saveUser()\"\n        i18n=\"Confirm button text@@authorized-users.create.confirmation.confirm.button\"\n      >Confirm</bb-load-button-ui>\n    <button \n      bbButton \n      data-role=\"user-confirmation-back-button\"\n      class=\"bb-button-bar__button\"\n      i18n=\"Back button text@@authorized-users.create.confirmation.back.button\"\n      color=\"secondary\" \n      (click)=\"goBack()\"\n    >Back</button>\n    <button \n      bbButton \n      data-role=\"user-confirmation-cancel-button\"\n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel button text@@authorized-users.create.confirmation.cancel.button\"\n      (click)=\"abort()\"\n    >Cancel</button>\n  </div>\n</form>\n\n<ng-template #termsAndConditions>\n  <div\n    i18n=\"Terms and Conditions Text|Text for authorized users terms and conditions@@authorized-users.create.confirmation.tos.text\"\n    data-role=\"user-confirmation-terms-text\"\n    [innerHTML]=\"termsConditions\"\n  >\n  </div>\n</ng-template>", components: [{ type: i1$6.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: AuthorizedUsersPermissionsLevelsTableComponent, selector: "bb-authorized-users-permissions-levels-table", inputs: ["selectedAccounts", "isEditing", "enableAccountLevelFullAccessPermission", "levelsConfig"], outputs: ["updateAccount"] }, { type: i3$3.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i3$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersConfirmationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-confirmation',
                    templateUrl: 'authorized-users-confirmation.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$5.FormBuilder }]; }, propDecorators: { showError: [{
                type: Input
            }], isSaving: [{
                type: Input
            }], termsConditions: [{
                type: Input
            }], showErrorChange: [{
                type: Output
            }] } });

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class AuthorizedUsersBaseDialogComponent {
    constructor() {
        this.dialogOpen = false;
        this.confirm = new EventEmitter();
        this.closed = new EventEmitter();
        this.onClose = () => {
            this.closed.emit();
        };
    }
    onConfirm() {
        this.confirm.emit();
    }
}
AuthorizedUsersBaseDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersBaseDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
AuthorizedUsersBaseDialogComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersBaseDialogComponent, inputs: { dialogOpen: "dialogOpen" }, outputs: { confirm: "confirm", closed: "closed" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersBaseDialogComponent, decorators: [{
            type: Directive
        }], propDecorators: { dialogOpen: [{
                type: Input
            }], confirm: [{
                type: Output
            }], closed: [{
                type: Output
            }] } });

class AuthorizedUsersConfirmationCompleteComponent extends AuthorizedUsersBaseDialogComponent {
    constructor() {
        super(...arguments);
        /**
         * success status
         */
        this.succeedStatus = '';
        /**
         * unique time to reload animated svg everytime
         */
        this.timestamp = new Date().getTime();
    }
}
AuthorizedUsersConfirmationCompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersConfirmationCompleteComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersConfirmationCompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersConfirmationCompleteComponent, selector: "bb-authorized-users-confirmation-complete", inputs: { authorizedUser: "authorizedUser", successImg: "successImg", succeedStatus: "succeedStatus" }, usesInheritance: true, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"dialogOpen\" (cancel)=\"onClose()\" data-role=\"complete-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <button \n            bbButton \n            data-role=\"complete-modal-close-button\" \n            color=\"unstyled\" \n            (click)=\"onClose()\"\n            aria-label=\"close confirmation complete modal\"\n            i18-aria-label=\"Close confirmation complete|Button for close confirmation complete@@authorized.users.confirmation.complete.closed.button\"\n          >\n            <bb-icon-ui color=\"muted\" name=\"clear\" size=\"lg\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-text-align-center bb-block\">\n        <img\n          src=\"{{ successImg + '?' + timestamp }}\"\n          alt=\"Confirmation succeeded\"\n          i18n-alt=\"Confirmation succeeded|Image for Confirmation succeeded@@authorized.users.confirmation.complete.confirmation-succeeded\"\n          data-role=\"confirmation-success-anim\"\n          class=\"img-fluid\"\n          data-role=\"complete-modal-image\"\n        />\n        <!-- Create confirmation -->\n        <ng-container *ngIf=\"succeedStatus==='create'\">\n          <h2\n            class=\"bb-text-bold\"\n            data-role=\"complete-create-modal-header\"\n            i18n=\"New authorized user!@@authorized.users.confirmation.create.complete.header\"\n          >\n            New authorized user!\n          </h2>\n          <span class=\"bb-text-support text-small\" data-role=\"complete-create-modal-subHeader\">\n            <span>{{authorizedUser?.firstName + ' ' + authorizedUser?.lastName + ' ' }}</span>\n            <span i18n=\"Success confirmation|Text for success confirmation@@authorized.users.confirmation.create.complete.success-message\">\n              will receive an email with a link to complete the registration process.\n            </span>\n          </span>\n        </ng-container>\n        <!-- Edit confirmation -->\n        <ng-container *ngIf=\"succeedStatus==='edit'\">\n          <h2\n            class=\"bb-text-bold\"\n            data-role=\"complete-edit-modal-header\"\n            i18n=\"New authorized user!@@authorized.users.confirmation.edit.complete.header\"\n          >\n            User permissions updated!\n          </h2>\n          <span class=\"bb-text-support text-small\" data-role=\"complete-edit-modal-subHeader\">\n            <span>{{authorizedUser?.firstName + ' ' + authorizedUser?.lastName + ' ' }}</span>\n            <span i18n=\"Success confirmation|Text for success confirmation@@authorized.users.confirmation.edit.complete.success-message\">\n              permissions were edited successfully.\n            </span>\n          </span>\n        </ng-container>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar bb-button-bar--center\">\n        <button\n          bbButton\n          data-role=\"complete-modal-gotIt-button\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          (click)=\"onConfirm()\"\n          i18n=\"Got it button|confirmation Done@@authorized.users.confirmation.complete.button.confirmation-done\"\n        >\n          Got it!\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>", components: [{ type: i1$7.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$7.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$7.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$7.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$7.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$7.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$7.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersConfirmationCompleteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-confirmation-complete',
                    templateUrl: 'authorized-users-confirmation-complete.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { authorizedUser: [{
                type: Input
            }], successImg: [{
                type: Input
            }], succeedStatus: [{
                type: Input
            }] } });

class AuthorizedUsersCancelCreationComponent extends AuthorizedUsersBaseDialogComponent {
}
AuthorizedUsersCancelCreationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCancelCreationComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersCancelCreationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersCancelCreationComponent, selector: "bb-authorized-users-cancel-creation", usesInheritance: true, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"dialogOpen\" (cancel)=\"onClose()\" data-role=\"cancel-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <h2 \n        data-role=\"cancel-modal-header\"\n        i18n=\"Discard authorized user@@authorized-users.cancel.modal.header\"\n      >\n        Discard New Authorized User?\n      </h2>\n      <div>\n        <button \n          bbButton  \n          data-role=\"cancel-modal-close-button\" \n          color=\"unstyled\" \n          (click)=\"onClose()\"\n          aria-label=\"Close Creation Modal\"\n          i18-aria-label=\"Close Create User|Button for close creation of authorized user@@authorized-users.cancel.modal.closed.button\"\n        >\n          <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span \n        data-role=\"cancel-modal-subHeader\"\n        i18n=\"Delete confirmation text@@authorized-users.cancel.modal.body\"\n      >\n        All entered information for this authorized user will be permanently lost.\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <button bbButton data-role=\"cancel-modal-keep-button\" (click)=\"onClose()\" color=\"link\">\n        <span i18n=\"Keep button text@@authorized-users.messages.createMessage.composeMessageModal.keepCreating.button\">\n          Keep It\n        </span>\n      </button>\n      <button bbButton data-role=\"cancel-modal-discard-button\" (click)=\"onConfirm()\" color=\"danger\">\n        <span i18n=\"Discard button text@@authorized-users.messages.createMessage.composeMessageModal.discardButton\">\n          Discard Authorized User\n        </span>\n      </button>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$7.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$7.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$7.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$7.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$7.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$7.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$7.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCancelCreationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-cancel-creation',
                    templateUrl: 'authorized-users-cancel-creation.component.html',
                }]
        }] });

class AuthorizedUserStepHandlerDirective {
    constructor(templateRef, viewContainerRef, parent) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.parent = parent;
        this._currentStep = 0;
    }
    showOrHideStep() {
        if (this._currentStep === this.step) {
            this.viewContainerRef.createEmbeddedView(this.templateRef);
        }
        else {
            this.viewContainerRef.clear();
        }
    }
    set currentStep(value) {
        this._currentStep = value;
        this.showOrHideStep();
    }
    ngOnInit() {
        this.step = this._currentStep > 0 ? this.parent.nextStepIndex() : undefined;
        this.showOrHideStep();
    }
}
AuthorizedUserStepHandlerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserStepHandlerDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: AuthorizedUsersCreateContainerComponent }], target: i0.ɵɵFactoryTarget.Directive });
AuthorizedUserStepHandlerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUserStepHandlerDirective, selector: "[bbAuthorizedUsersStepHandler]", inputs: { currentStep: ["bbAuthorizedUsersStepHandler", "currentStep"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserStepHandlerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAuthorizedUsersStepHandler]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: AuthorizedUsersCreateContainerComponent }]; }, propDecorators: { currentStep: [{
                type: Input,
                args: ['bbAuthorizedUsersStepHandler']
            }] } });

var AuthorizedUserPermissionControlType;
(function (AuthorizedUserPermissionControlType) {
    AuthorizedUserPermissionControlType["INDIVIDUAL_CONTROL"] = "individual-control";
    AuthorizedUserPermissionControlType["ALL_AT_ONCE"] = "all-at-once";
})(AuthorizedUserPermissionControlType || (AuthorizedUserPermissionControlType = {}));
class AuthorizedUsersCreateWrapperComponent {
    constructor(userService, usersUIService, assetsService, cd) {
        this.userService = userService;
        this.usersUIService = usersUIService;
        this.assetsService = assetsService;
        this.cd = cd;
        this.currentStep = 1;
        this.isAborting = false;
        this.succeedStatus = '';
        this.isFailure = false;
        this.isSaving = false;
        this.showAuthorizedUsers = new EventEmitter();
        this.currentUserStore = new BehaviorSubject({});
        this.changesStore = new BehaviorSubject({});
        this.selectedEditUserStore = new ReplaySubject();
        this.authorizedUser = this.currentUserStore.asObservable();
        this.enableAccountLevelFullAccessPermissionSubject = new BehaviorSubject(undefined);
        this.getURIFromSvgAssetID = (assetId) => `${assetId}.svg`;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.resolveSvgAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-authorized-users-journey-ang',
            getURIFromAssetID: this.getURIFromSvgAssetID,
        });
        this.goToAuthorizedUsersList = () => {
            this.showAuthorizedUsers.emit();
        };
        this.levelsConfig = this.usersUIService.uiLevelsConfigValue;
        this.permissionsConfig = this.usersUIService.uiPermissionsConfigValue;
        merge(this.changesStore, this.selectedEditUserStore).subscribe(this.currentUserStore);
    }
    set enableAccountLevelFullAccessPermissionValue(value) {
        this.enableAccountLevelFullAccessPermissionSubject.next(value);
    }
    get imageSucceedUrl() {
        return this.resolveSvgAsset('succeed');
    }
    get editMode() {
        return this.selectedUser !== undefined;
    }
    setCurrentUserValue(value) {
        this.changesStore.next(Object.assign(Object.assign({}, this.currentUserStore.value), value));
    }
    goToStep(value) {
        this.currentStep = value;
    }
    getAllAccounts() {
        return this.userService.getAllArrangements().pipe(catchError(this.handleAccountError));
    }
    handleAccountError() {
        return of({ items: [] });
    }
    handleUserError() {
        return of({ items: [] });
    }
    next(authorizedUser) {
        this.setCurrentUserValue(authorizedUser);
        this.goToStep(this.currentStep + 1);
    }
    back() {
        this.goToStep(this.currentStep - 1);
    }
    saveOnly(authorizedUser) {
        this.setCurrentUserValue(authorizedUser);
    }
    setAbortingDialog(value) {
        this.isAborting = value;
    }
    setSucceedDialogStatus(value) {
        this.succeedStatus = value;
    }
    finish(authorizedUser) {
        this.isSaving = true;
        const onCreateSuccess = () => {
            this.setSucceedDialogStatus('create');
            this.isSaving = false;
            this.cd.markForCheck();
        };
        const onEditSuccess = () => {
            this.setSucceedDialogStatus('edit');
            this.isSaving = false;
            this.cd.markForCheck();
        };
        const onError = () => {
            this.isFailure = true;
            this.isSaving = false;
            this.cd.markForCheck();
        };
        if (this.editMode) {
            this.userService
                .updateAuthorizedUser(this.selectedUser, authorizedUser.permissions)
                .subscribe(onEditSuccess, onError);
        }
        else {
            this.userService.addAuthorizedUser(authorizedUser).subscribe(onCreateSuccess, onError);
        }
    }
    ngOnInit() {
        if (this.editMode) {
            this.userService
                .retrieveAuthorizedUser()
                .pipe(catchError(this.handleUserError), map((data) => data.items.find((item) => item.id === this.selectedUser)))
                .subscribe(this.selectedEditUserStore);
            this.accounts = this.selectedEditUserStore.pipe(switchMap((data) => (data ? this.getAllAccounts() : this.handleAccountError())));
        }
        else {
            this.accounts = this.getAllAccounts();
        }
        this.termsConditionsContent = this.usersUIService.termsConditionsContent();
        this.loadingData = combineLatest([this.accounts, this.termsConditionsContent]).pipe(map(([accounts, termsAndConditions]) => ({
            accounts,
            termsAndConditions,
        })));
    }
    get enableAccountLevelFullAccessPermission() {
        return this.enableAccountLevelFullAccessPermissionSubject.asObservable().pipe(map((data) => {
            return data === AuthorizedUserPermissionControlType.INDIVIDUAL_CONTROL;
        }));
    }
}
AuthorizedUsersCreateWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateWrapperComponent, deps: [{ token: UserDataService }, { token: UsersUIService }, { token: i1$2.AssetsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersCreateWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersCreateWrapperComponent, selector: "bb-authorized-users-create-wrapper", inputs: { selectedUser: "selectedUser", enableAccountLevelFullAccessPermissionValue: ["enableAccountLevelFullAccessPermission", "enableAccountLevelFullAccessPermissionValue"] }, outputs: { showAuthorizedUsers: "showAuthorizedUsers" }, ngImport: i0, template: "<ng-container *ngIf=\"loadingData | async as data; else loadingState\">\n  <ng-container *ngIf=\"data.accounts?.items?.length > 0 && data.termsAndConditions; else errorState\">\n    <div class=\"bb-block bb-block--lg\">\n      <div class=\"row bb-stack bb-stack--center\">\n        <ng-container *ngIf=\"!editMode; else editModeStepper\">\n          <bb-authorized-users-stepper\n            class= \"col-12 col-md-10 col-lg-8\"\n            [currentStep]=\"currentStep\"\n          ></bb-authorized-users-stepper>\n        </ng-container>\n      </div>\n    </div>\n    \n    <ng-template #editModeStepper>\n      <bb-authorized-users-edit-stepper \n        class= \"col-12 col-md-10\"\n        [currentStep]=\"currentStep\"\n      ></bb-authorized-users-edit-stepper>\n    </ng-template>\n    \n    <bb-authorized-users-create-container>\n      <bb-authorized-users-user-details \n        *bbAuthorizedUsersStepHandler=\"!editMode ? currentStep : -1\"\n        [authorizedUser]=\"authorizedUser | async\"\n        [isFirstStep]=\"true\"\n        (next)=\"next($event)\"\n        (back)=\"back()\"\n        (cancel)=\"setAbortingDialog(true)\"\n      ></bb-authorized-users-user-details>\n      <bb-authorized-users-accounts \n        *bbAuthorizedUsersStepHandler=\"currentStep\" \n        [authorizedUser]=\"authorizedUser | async\"\n        [accounts]=\"data.accounts.items\"\n        [isFirstStep]=\"editMode\"\n        (next)=\"next($event)\"\n        (back)=\"back()\"\n        (saveOnly)=\"saveOnly($event)\"\n        (cancel)=\"setAbortingDialog(true)\"\n      ></bb-authorized-users-accounts>\n      <bb-authorized-users-permissions \n        *bbAuthorizedUsersStepHandler=\"currentStep\"\n        [authorizedUser]=\"authorizedUser | async\"\n        [enableAccountLevelFullAccessPermission]=\"enableAccountLevelFullAccessPermission | async\"\n        [accounts]=\"data.accounts.items\"\n        [levelsConfig]=\"levelsConfig\"\n        [permissionsConfig]=\"permissionsConfig\"\n        (next)=\"next($event)\"\n        (back)=\"back()\"\n        (saveOnly)=\"saveOnly($event)\"\n        (cancel)=\"setAbortingDialog(true)\"\n      ></bb-authorized-users-permissions>\n      <bb-authorized-users-confirmation \n        *bbAuthorizedUsersStepHandler=\"currentStep\"\n        [authorizedUser]=\"authorizedUser | async\"\n        [termsConditions]=\"data.termsAndConditions\"\n        [levelsConfig]=\"levelsConfig\"\n        [isSaving]=\"isSaving\"\n        [(showError)]=\"isFailure\"\n        (next)=\"finish($event)\"\n        (back)=\"back()\"\n        (cancel)=\"setAbortingDialog(true)\"\n      ></bb-authorized-users-confirmation>\n    </bb-authorized-users-create-container>\n  </ng-container>\n</ng-container>\n\n<bb-authorized-users-confirmation-complete\n  *ngIf=\"succeedStatus\"\n  [dialogOpen]=\"succeedStatus\"\n  [succeedStatus]=\"succeedStatus\"\n  [authorizedUser]=\"authorizedUser | async\"\n  [successImg]=\"imageSucceedUrl | async\"\n  (confirm)=\"goToAuthorizedUsersList()\"\n  (closed)=\"goToAuthorizedUsersList()\"\n></bb-authorized-users-confirmation-complete>\n\n<bb-authorized-users-cancel-creation\n  [dialogOpen]=\"isAborting\"\n  (confirm)=\"goToAuthorizedUsersList()\"\n  (closed)=\"setAbortingDialog(false)\"\n></bb-authorized-users-cancel-creation>\n\n<ng-template #loadingState>\n  <div class=\"card\">\n    <bb-loading-indicator-ui \n      loaderSize=\"lg\" \n      text=\"Loading...\"\n      i18n-text=\"Loading|Text for the loading indicator@@authorized.users.create.loading.indicator.text\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        iconModifier=\"error-outline\"\n        iconColor=\"dark\"\n        title=\"Something went wrong\"\n        i18n-title=\"Error state title@@authorized.users.create.errorState.title\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Error state message@@authorized.users.create.errorState.message\"\n      ></bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>", components: [{ type: AuthorizedUsersStepperComponent, selector: "bb-authorized-users-stepper", inputs: ["currentStep"] }, { type: AuthorizedUserEditStepperComponent, selector: "bb-authorized-users-edit-stepper", inputs: ["currentStep"] }, { type: AuthorizedUsersCreateContainerComponent, selector: "bb-authorized-users-create-container" }, { type: AuthorizedUsersUserDetailsComponent, selector: "bb-authorized-users-user-details" }, { type: AuthorizedUsersAccountsComponent, selector: "bb-authorized-users-accounts", inputs: ["accounts"] }, { type: AuthorizedUsersPermissionsComponent, selector: "bb-authorized-users-permissions", inputs: ["accounts"] }, { type: AuthorizedUsersConfirmationComponent, selector: "bb-authorized-users-confirmation", inputs: ["showError", "isSaving", "termsConditions"], outputs: ["showErrorChange"] }, { type: AuthorizedUsersConfirmationCompleteComponent, selector: "bb-authorized-users-confirmation-complete", inputs: ["authorizedUser", "successImg", "succeedStatus"] }, { type: AuthorizedUsersCancelCreationComponent, selector: "bb-authorized-users-cancel-creation" }, { type: i13.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i14.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: AuthorizedUserStepHandlerDirective, selector: "[bbAuthorizedUsersStepHandler]", inputs: ["bbAuthorizedUsersStepHandler"] }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-create-wrapper',
                    templateUrl: 'authorized-users-create-wrapper.component.html',
                }]
        }], ctorParameters: function () { return [{ type: UserDataService }, { type: UsersUIService }, { type: i1$2.AssetsService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { selectedUser: [{
                type: Input
            }], enableAccountLevelFullAccessPermissionValue: [{
                type: Input,
                args: ['enableAccountLevelFullAccessPermission']
            }], showAuthorizedUsers: [{
                type: Output
            }] } });

const modules$1 = [
    StepperModule,
    ButtonModule,
    IconModule,
    SwitchModule,
    CheckboxGroupModule,
    InputCheckboxModule,
    PaymentCardNumberModule,
    InputPhoneModule,
    InputEmailModule,
    InputTextModule,
    ReactiveFormsModule,
    FormsModule,
    InputValidationMessageModule,
    InputCheckboxModule,
    ModalModule,
    AlertModule,
    LoadingIndicatorModule,
    LoadButtonModule,
    EmptyStateModule,
    AuthorizedUsersCommonModule,
];
const components$1 = [
    AuthorizedUsersCreateWrapperComponent,
    AuthorizedUsersStepperComponent,
    AuthorizedUsersConfirmationComponent,
    AuthorizedUsersAccountsComponent,
    AuthorizedUsersCreateContainerComponent,
    AuthorizedUsersPermissionsComponent,
    AuthorizedUsersUserDetailsComponent,
    AuthorizedUsersPermissionsCardComponent,
    AuthorizedUsersCancelCreationComponent,
    AuthorizedUserEditStepperComponent,
    AuthorizedUserStepHandlerDirective,
    AuthorizedUsersConfirmationCompleteComponent,
];
class AuthorizedUsersCreateModule {
}
AuthorizedUsersCreateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AuthorizedUsersCreateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateModule, declarations: [AuthorizedUsersCreateWrapperComponent,
        AuthorizedUsersStepperComponent,
        AuthorizedUsersConfirmationComponent,
        AuthorizedUsersAccountsComponent,
        AuthorizedUsersCreateContainerComponent,
        AuthorizedUsersPermissionsComponent,
        AuthorizedUsersUserDetailsComponent,
        AuthorizedUsersPermissionsCardComponent,
        AuthorizedUsersCancelCreationComponent,
        AuthorizedUserEditStepperComponent,
        AuthorizedUserStepHandlerDirective,
        AuthorizedUsersConfirmationCompleteComponent], imports: [CommonModule,
        FormsModule,
        ReactiveFormsModule, StepperModule,
        ButtonModule,
        IconModule,
        SwitchModule,
        CheckboxGroupModule,
        InputCheckboxModule,
        PaymentCardNumberModule,
        InputPhoneModule,
        InputEmailModule,
        InputTextModule,
        ReactiveFormsModule,
        FormsModule,
        InputValidationMessageModule,
        InputCheckboxModule,
        ModalModule,
        AlertModule,
        LoadingIndicatorModule,
        LoadButtonModule,
        EmptyStateModule,
        AuthorizedUsersCommonModule, i1$2.BackbaseCoreModule], exports: [AuthorizedUsersCreateWrapperComponent,
        AuthorizedUsersStepperComponent,
        AuthorizedUsersConfirmationComponent,
        AuthorizedUsersAccountsComponent,
        AuthorizedUsersCreateContainerComponent,
        AuthorizedUsersPermissionsComponent,
        AuthorizedUsersUserDetailsComponent,
        AuthorizedUsersPermissionsCardComponent,
        AuthorizedUsersCancelCreationComponent,
        AuthorizedUserEditStepperComponent,
        AuthorizedUserStepHandlerDirective,
        AuthorizedUsersConfirmationCompleteComponent, StepperModule,
        ButtonModule,
        IconModule,
        SwitchModule,
        CheckboxGroupModule,
        InputCheckboxModule,
        PaymentCardNumberModule,
        InputPhoneModule,
        InputEmailModule,
        InputTextModule,
        ReactiveFormsModule,
        FormsModule,
        InputValidationMessageModule,
        InputCheckboxModule,
        ModalModule,
        AlertModule,
        LoadingIndicatorModule,
        LoadButtonModule,
        EmptyStateModule,
        AuthorizedUsersCommonModule] });
AuthorizedUsersCreateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateModule, imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            ...modules$1,
            BackbaseCoreModule.withConfig({
                classMap: { AuthorizedUsersCreateWrapperComponent },
            }),
        ], StepperModule,
        ButtonModule,
        IconModule,
        SwitchModule,
        CheckboxGroupModule,
        InputCheckboxModule,
        PaymentCardNumberModule,
        InputPhoneModule,
        InputEmailModule,
        InputTextModule,
        ReactiveFormsModule,
        FormsModule,
        InputValidationMessageModule,
        InputCheckboxModule,
        ModalModule,
        AlertModule,
        LoadingIndicatorModule,
        LoadButtonModule,
        EmptyStateModule,
        AuthorizedUsersCommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components$1],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        ...modules$1,
                        BackbaseCoreModule.withConfig({
                            classMap: { AuthorizedUsersCreateWrapperComponent },
                        }),
                    ],
                    exports: [...components$1, ...modules$1],
                }]
        }] });

class AuthorizedUsersJourneyComponent {
}
AuthorizedUsersJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersJourneyComponent, selector: "bb-authorized-users-journey", ngImport: i0, template: '<router-outlet></router-outlet>', isInline: true, directives: [{ type: i1$8.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-journey',
                    template: '<router-outlet></router-outlet>',
                }]
        }] });

const getMessageFromResponse = (error) => {
    const responseBody = error.error;
    if (responseBody && responseBody.errors && responseBody.errors[0] && responseBody.errors[0].message) {
        return responseBody.errors[0].message;
    }
    else {
        return undefined;
    }
};
/**
 * Parse an HttpErrorResponse and return a AuthorizedUsersError object that can be used to display a
 * user-friendly error message.
 */
const parseError = (errorResponse) => {
    if (errorResponse.error instanceof ErrorEvent) {
        // Client-side or network error.
        return {
            message: 'An unexpected error occurred',
        };
    }
    else {
        switch (errorResponse.status) {
            case 400:
                return {
                    message: getMessageFromResponse(errorResponse) || 'Error 400',
                };
            case 401:
                return {
                    message: 'Error 401',
                };
            case 403:
                return {
                    message: 'Error 403',
                };
            case 404:
                return {
                    message: 'Error 404',
                };
            default:
                return {
                    message: 'An unexpected error occurred',
                };
        }
    }
};

class AuthorizedUsersListStatusBadgeComponent {
    constructor() {
        this.authorizedUserStatus = AuthorizedUserStatus;
    }
}
AuthorizedUsersListStatusBadgeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListStatusBadgeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersListStatusBadgeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersListStatusBadgeComponent, selector: "bb-authorized-users-list-status-badge", inputs: { authorizedUsersStatus: "authorizedUsersStatus" }, ngImport: i0, template: "<div class=\"bb-stack bb-block bb-block--md\" >\n  <ng-container *ngIf=\"authorizedUsersStatus === authorizedUserStatus.ACTIVE\">\n    <bb-badge-ui\n      text=\"Active\"\n      i18n-text=\"Active Label|Text for the active label@@authorized.users.status.active\"\n      color=\"success\"\n    ></bb-badge-ui>\n  </ng-container>\n\n  <ng-container *ngIf=\"authorizedUsersStatus === authorizedUserStatus.AWAITING_REGISTRATION\">\n    <bb-badge-ui\n      text=\"Awaiting Registration\"\n      i18n-text=\"Awaiting Registration Label|Text for the scheduled label@@authorized.users.status.awating\"\n      color=\"info\"\n    ></bb-badge-ui>\n  </ng-container>\n\n  <ng-container *ngIf=\"authorizedUsersStatus === authorizedUserStatus.PAUSED\">\n    <bb-badge-ui\n      text=\"Paused\"\n      i18n-text=\"Paused Label|Text for the expired label@@authorized.users.status.paused\"\n      color=\"warning\"\n    ></bb-badge-ui>\n  </ng-container>\n</div>", components: [{ type: i1$9.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListStatusBadgeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-list-status-badge',
                    templateUrl: './authorized-users-list-status-badge.component.html',
                }]
        }], propDecorators: { authorizedUsersStatus: [{
                type: Input
            }] } });

class AuthorizedUsersListItemComponent {
    constructor() {
        this.edit = new EventEmitter();
        this.remove = new EventEmitter();
        this.paused = new EventEmitter();
        this.resumed = new EventEmitter();
        this.authorizedUserStatus = AuthorizedUserStatus;
        this.arePermissionsOpen = false;
        this.isUserActionsEnabled = false;
    }
    togglePermissionsVisibility() {
        this.arePermissionsOpen = !this.arePermissionsOpen;
    }
    editPermissions() {
        this.edit.emit(this.authorizedUsersItem);
    }
    removeUser() {
        this.remove.emit(this.authorizedUsersItem);
    }
    pauseUser() {
        this.paused.emit(this.authorizedUsersItem);
    }
    resumeUser() {
        this.resumed.emit(this.authorizedUsersItem);
    }
}
AuthorizedUsersListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersListItemComponent, selector: "bb-authorized-users-list-item", inputs: { authorizedUsersItem: "authorizedUsersItem", levelsConfig: "levelsConfig" }, outputs: { edit: "edit", remove: "remove", paused: "paused", resumed: "resumed" }, ngImport: i0, template: "<div class=\"card card-lg\">\n  <div class=\"card-body\" bbAuthorizedUsersAccessibilityKeyboard>\n    <div class=\"bb-stack bb-stack--density-sm\">\n      <div class=\"bb-stack__item\">\n        <p data-role=\"user-fullName\" class=\"bb-heading-3\">\n          {{authorizedUsersItem?.firstName + ' ' + authorizedUsersItem?.lastName}}\n        </p>\n      </div>\n\n      <div class=\"bb-stack__item\" data-role=\"user-status-badge\">\n        <bb-authorized-users-list-status-badge\n          [authorizedUsersStatus]=\"authorizedUsersItem?.status\"\n        ></bb-authorized-users-list-status-badge>\n      </div>\n\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <bb-dropdown-menu-ui\n          icon=\"ellipsis-h\"\n          btnColor=\"link-dark\"\n          btnCircle=\"true\"\n          container=\"body\"\n          position=\"bottom-right\"\n          data-role=\"options-dropdown\"\n          aria-label=\"Options\"\n          i18n-aria-label=\"Options button|Authorized user options button tooltip@@authorized.users.options.label\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <a\n              bbAuthorizedUsersAccessibilityKeyboard\n              rel=\"noopener\"\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"edit-item\"\n              target=\"_blank\"\n              (click)=\"editPermissions()\"\n            >\n              <span class=\"bb-inline-stack\">\n                <bb-icon-ui class=\"bb-inline-stack__item\" name=\"edit\" size=\"md\"></bb-icon-ui>\n                <span \n                  class=\"bb-inline-stack__item\"  \n                  i18n=\"Edit User Permissions|Label for edit authorized user permissions action@@authorized.users.edit\"\n                >\n                  Edit User Permissions\n                </span>\n              </span>\n            </a>\n            <ng-container *ngIf=\"authorizedUsersItem?.status!==authorizedUserStatus.PAUSED; else resumeAuthorizedUserOption\">\n              <a\n                bbAuthorizedUsersAccessibilityKeyboard\n                rel=\"noopener\"\n                role=\"menuitem\"\n                class=\"dropdown-item\"\n                data-role=\"pause-item\"\n                target=\"_blank\"\n                (click)=\"pauseUser()\"\n              >\n                <span class=\"bb-inline-stack\">\n                  <bb-icon-ui class=\"bb-inline-stack__item\" name=\"pause\" size=\"md\"></bb-icon-ui>\n                  <span \n                    class=\"bb-inline-stack__item\" \n                    i18n=\"Pause Permissions|Label for pause authorized user permissions action@@authorized.users.paused\"\n                  >\n                    Pause Permissions\n                  </span>\n                </span>\n              </a>\n            </ng-container>\n            <ng-template #resumeAuthorizedUserOption>\n              <a\n                bbAuthorizedUsersAccessibilityKeyboard\n                rel=\"noopener\"\n                role=\"menuitem\"\n                class=\"dropdown-item\"\n                data-role=\"resume-item\"\n                target=\"_blank\"\n                (click)=\"resumeUser()\"\n              >\n                <span class=\"bb-inline-stack\">\n                  <bb-icon-ui class=\"bb-inline-stack__item\" name=\"update\" size=\"md\"></bb-icon-ui>\n                  <span \n                    class=\"bb-inline-stack__item\" \n                    i18n=\"Resume Permissions|Label for resume authorized user permissions action@@authorized.users.resumed\"\n                  >\n                    Resume Permissions\n                  </span>\n                </span>\n              </a>\n            </ng-template>\n            <a\n              bbAuthorizedUsersAccessibilityKeyboard\n              rel=\"noopener\"\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"remove-item\"\n              target=\"_blank\"\n              (click)=\"removeUser()\"\n            >\n              <span class=\"bb-inline-stack\">\n                <bb-icon-ui class=\"bb-inline-stack__item\" name=\"delete\" size=\"md\" color=\"danger\"></bb-icon-ui>\n                <span \n                  class=\"bb-inline-stack__item bb-text-danger\" \n                  i18n=\"Remove Authorized User|Label for remove authorized user action@@authorized.users.remove\"\n                >\n                  Remove Authorized User\n                </span>\n              </span>\n            </a>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n\n    <div class=\"bb-block bb-block--sm\">\n      <div \n        class=\"bb-block bb-block--xs bb-text-support text-small\" \n        data-role=\"user-email\"\n      >\n        {{authorizedUsersItem?.email}} \n      </div>\n      <div \n        class=\"bb-text-support text-small\" \n        data-role=\"user-phone-number\"\n      > \n        {{authorizedUsersItem?.mobileNumber | phoneNumber: 'US'}} \n      </div>\n    </div>\n    \n    <div [ngbCollapse]=\"!arePermissionsOpen\" bbAuthorizedUsersAccessibilityKeyboard>\n      <div class=\"bb-block bb-block--xs\" data-role=\"user-username\" *ngIf=\"authorizedUsersItem?.username\"> \n        <span \n          class=\"bb-text-bold text-small\"\n          i18n='Authorized users list username header@@authorized.users.list.username.header'\n        >\n          Username: \n        </span>\n        <span class=\"bb-text-support text-small\">{{authorizedUsersItem?.username}}</span>\n      </div>\n      <div class=\"bb-block bb-block--md\" data-role=\"user-permissions-table\">\n        <bb-authorized-users-permissions-levels-table \n          [selectedAccounts]=\"authorizedUsersItem?.permissions\"\n          [levelsConfig]=\"levelsConfig\"\n        ></bb-authorized-users-permissions-levels-table>\n      </div>\n    </div>\n\n    <div>\n      <button bbButton data-role=\"permissions-button\" buttonSize=\"sm\" color=\"link-text\" (click)=\"togglePermissionsVisibility()\">\n        <bb-icon-ui [name]=\"arePermissionsOpen ? 'toggle-up' : 'toggle-down'\" size=\"md\"></bb-icon-ui>\n        <span \n          i18n='Hide user permissions button@@authorized.users.list.hide.button' \n          *ngIf=\"arePermissionsOpen\"\n        >\n          Hide User Permissions\n        </span>\n        <span \n          i18n='See user permissions button@@authorized.users.list.seeMore.button' \n          *ngIf=\"!arePermissionsOpen\"\n        >\n          See User Permissions\n        </span>\n      </button>\n    </div>\n  </div>\n</div>\n", components: [{ type: AuthorizedUsersListStatusBadgeComponent, selector: "bb-authorized-users-list-status-badge", inputs: ["authorizedUsersStatus"] }, { type: i2$5.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: AuthorizedUsersPermissionsLevelsTableComponent, selector: "bb-authorized-users-permissions-levels-table", inputs: ["selectedAccounts", "isEditing", "enableAccountLevelFullAccessPermission", "levelsConfig"], outputs: ["updateAccount"] }], directives: [{ type: AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i2$5.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "phoneNumber": i9.PhoneNumberPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-list-item',
                    templateUrl: `./authorized-users-list-item.component.html`,
                }]
        }], propDecorators: { authorizedUsersItem: [{
                type: Input
            }], levelsConfig: [{
                type: Input
            }], edit: [{
                type: Output
            }], remove: [{
                type: Output
            }], paused: [{
                type: Output
            }], resumed: [{
                type: Output
            }] } });

class AuthorizedUsersListComponent {
    constructor() {
        this.edit = new EventEmitter();
        this.remove = new EventEmitter();
        this.paused = new EventEmitter();
        this.resumed = new EventEmitter();
        this.createAuthorizedUser = new EventEmitter();
    }
    goToAuthorizedUser() {
        this.createAuthorizedUser.emit();
    }
    editPermissions(user) {
        this.edit.emit(user);
    }
    removeUser(user) {
        this.remove.emit(user);
    }
    pauseUser(user) {
        this.paused.emit(user);
    }
    resumeUser(user) {
        this.resumed.emit(user);
    }
}
AuthorizedUsersListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersListComponent, selector: "bb-authorized-users-list", inputs: { authorizedUsersList: "authorizedUsersList", levelsConfig: "levelsConfig" }, outputs: { edit: "edit", remove: "remove", paused: "paused", resumed: "resumed", createAuthorizedUser: "createAuthorizedUser" }, ngImport: i0, template: "<div class=\"bb-block bb-block--lg bb-text-align-right\">\n  <button bbButton data-role=\"add-button\" color=\"primary\" (click)=\"goToAuthorizedUser()\">\n    <bb-icon-ui name=\"add\"></bb-icon-ui> \n    <span i18n=\"Add new authorized user button@@authorized.users.add.button\">\n      Add Authorized User\n    </span>\n  </button>\n</div>\n<div class=\"bb-list\">\n  <div class=\"bb-list__item--no-separator\" *ngFor=\"let authorizedUsersItem of authorizedUsersList\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-authorized-users-list-item\n        [authorizedUsersItem]=\"authorizedUsersItem\"\n        [levelsConfig]=\"levelsConfig\"\n        (edit)=\"editPermissions($event)\"\n        (remove)=\"removeUser($event)\"\n        (paused)=\"pauseUser($event)\"\n        (resumed)=\"resumeUser($event)\"\n      ></bb-authorized-users-list-item>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: AuthorizedUsersListItemComponent, selector: "bb-authorized-users-list-item", inputs: ["authorizedUsersItem", "levelsConfig"], outputs: ["edit", "remove", "paused", "resumed"] }], directives: [{ type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-list',
                    templateUrl: `./authorized-users-list.component.html`,
                }]
        }], propDecorators: { authorizedUsersList: [{
                type: Input
            }], levelsConfig: [{
                type: Input
            }], edit: [{
                type: Output
            }], remove: [{
                type: Output
            }], paused: [{
                type: Output
            }], resumed: [{
                type: Output
            }], createAuthorizedUser: [{
                type: Output
            }] } });

class AuthorizedUsersEmptyListComponent {
    constructor() {
        /**
         * Empty state image url.
         */
        this.imageUrl = '';
        this.createAuthorizedUser = new EventEmitter();
    }
    goToAuthorizedUser() {
        this.createAuthorizedUser.emit();
    }
}
AuthorizedUsersEmptyListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersEmptyListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersEmptyListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersEmptyListComponent, selector: "bb-authorized-users-empty-list", inputs: { imageUrl: "imageUrl" }, outputs: { createAuthorizedUser: "createAuthorizedUser" }, ngImport: i0, template: "<div class=\"card\">\n  <div class=\"card-body bb-text-align-center\">\n    <div class=\"bb-block bb-block--lg\">\n      <img \n        class=\"img-fluid\" \n        *ngIf=\"!!imageUrl\" \n        [src]=\"imageUrl\"\n        alt=\"empty-state-image\"\n      />\n    </div>\n    <h2 \n      class=\"bb-block bb-block--sm\"\n      data-role=\"empty-state-message\"\n      i18n=\"authorized users empty state header@@authorized.users.empty.state.header\"\n    >\n      Authorize access to your accounts\n    </h2>\n    <div class=\"bb-block bb-block--lg\">\n      <p \n        class=\"bb-text-support text-small\"\n        data-role=\"empty-state-description\"\n        i18n=\"authorized users empty state description@authorized.users.empty.state.description\"\n      >\n        Adding an authorized user allows you to give limited or full access to your accounts or financial products.\n      </p>\n    </div>\n  \n    <div>\n      <button bbButton data-role=\"add-button\" color=\"primary\" (click)=\"goToAuthorizedUser()\">\n        <bb-icon-ui name=\"add\"></bb-icon-ui> \n        <span i18n=\"Add new authorized user button@@authorized.users.add.button\">Add Authorized User</span>\n      </button>\n    </div>\n  </div>\n</div>", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersEmptyListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-empty-list',
                    templateUrl: `./authorized-users-empty-list.component.html`,
                }]
        }], propDecorators: { imageUrl: [{
                type: Input
            }], createAuthorizedUser: [{
                type: Output
            }] } });

class AuthorizedUsersListConfirmationRemoveUserDialogComponent extends AuthorizedUsersBaseDialogComponent {
}
AuthorizedUsersListConfirmationRemoveUserDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListConfirmationRemoveUserDialogComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersListConfirmationRemoveUserDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersListConfirmationRemoveUserDialogComponent, selector: "bb-authorized-user-list-remove-user-confirmation-dialog", usesInheritance: true, ngImport: i0, template: "<!-- Remove authorized user confirmation model  -->\n<bb-modal-ui [isOpen]=\"dialogOpen\" (cancel)=\"onClose()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <h2 \n        data-role=\"remove-modal-title\" \n        i18n=\"Remove authorized user@@authorized.users.removeUser.modal.header\"\n      >\n        Remove Authorized User?\n      </h2>\n      <div>\n        <button \n          bbButton \n          color=\"unstyled\" \n          (click)=\"onClose()\"\n          aria-label=\"close removal confirmation modal dialog\"\n          i18-aria-label=\"Close removal confirmation modal dialog|Button for close removal confirmation modal dialog@@authorized.users.removeUser.modal.closed.button\"\n        >\n          <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span data-role=\"remove-modal-message\" i18n=\"Remove confirmation text@@authorized.users.removeUser.modal.body\">\n        All entered information and their corresponding permissions will be permanently removed.\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <button bbButton (click)=\"onClose()\" color=\"link\" data-role=\"keep-button\">\n        <span i18n=\"Keep it button text@@authorized.users.removeUser.notNow.button\">\n          Keep It\n        </span>\n      </button>\n      <button bbButton (click)=\"onConfirm()\" color=\"danger\" data-role=\"remove-button\">\n        <span i18n=\"Remove authorized user button text@@authorized.users.removeUser.remove.button\">\n          Remove Authorized User\n        </span>\n      </button>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$7.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$7.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$7.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$7.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$7.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$7.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$7.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListConfirmationRemoveUserDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-user-list-remove-user-confirmation-dialog',
                    templateUrl: 'authorized-users-list-confirmation-remove-user-dialog.component.html',
                }]
        }] });

class AuthorizedUserListConfirmationPauseUserDialogComponent extends AuthorizedUsersBaseDialogComponent {
}
AuthorizedUserListConfirmationPauseUserDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserListConfirmationPauseUserDialogComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUserListConfirmationPauseUserDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUserListConfirmationPauseUserDialogComponent, selector: "bb-authorized-user-list-confirmation-pause-user-dialog", usesInheritance: true, ngImport: i0, template: "<!-- Pause authorized user confirmation model  -->\n<bb-modal-ui [isOpen]=\"dialogOpen\" (cancel)=\"onClose()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <h2 \n        data-role=\"pause-modal-title\" \n        i18n=\"Pause user permissions@@authorized.users.pauseUserPermissions.modal.header\"\n      >\n        Pause user permissions?\n      </h2>\n      <div>\n        <button \n          bbButton \n          color=\"unstyled\" \n          (click)=\"onClose()\"\n          aria-label=\"close pause permissions confirmation modal dialog\"\n          i18-aria-label=\"Close pause permissions confirmation modal dialog|Button for close pause permissions confirmation modal dialog@@authorized.users.pauseUserPermissions.modal.cancel.button\"\n        >\n          <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span data-role=\"pause-modal-message\" i18n=\"Pause confirmation text@@authorized.users.pauseUserPermissions.modal.body\">\n        Their account permissions will be paused indefinetely until you resume them.\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <button bbButton (click)=\"onClose()\" color=\"link\" data-role=\"not-now-button\">\n        <span i18n=\"Not now button text@@authorized.users.pauseUserPermissions.modal.notNow.button\">\n          Not now\n        </span>\n      </button>\n      <button bbButton (click)=\"onConfirm()\" color=\"primary\" data-role=\"pause-button\">\n        <span i18n=\"Pause permissions button text@@authorized.users.pauseUserPermissions.modal.paused.button\">\n          Pause permissions\n        </span>\n      </button>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>", components: [{ type: i1$7.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$7.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$7.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$7.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$7.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$7.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$7.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserListConfirmationPauseUserDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-user-list-confirmation-pause-user-dialog',
                    templateUrl: 'authorized-user-list-confirmation-pause-user-dialog.component.html',
                }]
        }] });

class AuthorizedUsersListWrapperComponent {
    constructor(assetsService, userDataService, usersUIService, notificationService) {
        this.assetsService = assetsService;
        this.userDataService = userDataService;
        this.usersUIService = usersUIService;
        this.notificationService = notificationService;
        this.refreshAuthorizedUsers = new BehaviorSubject(true);
        this.authorizedUsersListSubject = new BehaviorSubject({ items: [] });
        this.isLoading = new BehaviorSubject(true);
        this.authorizedUsersList = this.authorizedUsersListSubject.asObservable();
        this.showLoadingIndicator = this.isLoading.asObservable();
        this.selectedUser = new EventEmitter();
        this.getURIFromAssetID = (assetId) => `${assetId}-img.svg`;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-authorized-users-journey-ang',
            getURIFromAssetID: this.getURIFromAssetID,
        });
        this.handleLoadingError = (error) => {
            this.error = parseError(error);
            return of({ items: [] });
        };
        this.handleOperationsError = () => {
            this.setLoadingIndicator(false);
            this.pushNotification($localize `Something went wrong`, $localize `Please try again later.`, 'error');
        };
        this.refreshAuthorizedUsers
            .pipe(mergeMap(() => this.retrieveAuthorizedUsers()))
            .subscribe(this.authorizedUsersListSubject);
        this.levelsConfig = this.usersUIService.uiLevelsConfigValue;
    }
    retrieveAuthorizedUsers() {
        return this.userDataService.retrieveAuthorizedUser().pipe(catchError(this.handleLoadingError), tap(() => {
            this.setLoadingIndicator(false);
        }));
    }
    pushNotification(header, message, modifier) {
        this.notificationService.showNotification({
            header,
            message,
            modifier,
            dismissible: true,
            ttl: 5000,
        });
    }
    get imageEmptyStateUrl() {
        return this.resolveAsset('authorized-users-empty-state');
    }
    goToAuthorizedUser() {
        this.selectedUser.emit();
    }
    editPermissions(user) {
        this.selectedUser.emit(user.id);
    }
    setCurrentUser(user, actionName) {
        this.currentUser = user;
        this.actionName = actionName;
    }
    setLoadingIndicator(value) {
        this.isLoading.next(value);
    }
    removeUser(user) {
        const success = () => {
            this.pushNotification($localize `Authorized user removed`, $localize `Their permissions are permanently removed.`, 'success');
            this.refreshList();
        };
        if (user && user.id) {
            this.setLoadingIndicator(true);
            this.currentUser = undefined;
            this.userDataService.removeAuthorizedUser(user.id).subscribe(success, this.handleOperationsError);
        }
    }
    updateUserStatus(user) {
        const success = () => {
            if (user.status !== AuthorizedUserStatus.PAUSED) {
                this.pushNotification($localize `Authorized user paused`, $localize `You can resume their permissions at any time.`, 'success');
            }
            else {
                this.pushNotification($localize `User permissions resumed`, $localize `Their permissions are now active again.`, 'success');
            }
            this.refreshList();
        };
        if (user && user.id) {
            this.setLoadingIndicator(true);
            this.currentUser = undefined;
            this.userDataService
                .updateAuthorizedUserStatus(user.id, user.status !== AuthorizedUserStatus.PAUSED ? SERVICE_AGREEMENT_DISABLED : SERVICE_AGREEMENT_ENABLED)
                .subscribe(success, this.handleOperationsError);
        }
    }
    refreshList() {
        this.refreshAuthorizedUsers.next(true);
    }
    ngOnDestroy() {
        this.refreshAuthorizedUsers.complete();
        this.authorizedUsersListSubject.complete();
        this.isLoading.complete();
    }
}
AuthorizedUsersListWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListWrapperComponent, deps: [{ token: i1$2.AssetsService }, { token: UserDataService }, { token: UsersUIService }, { token: i4$2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersListWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersListWrapperComponent, selector: "bb-authorized-users-list-wrapper", outputs: { selectedUser: "selectedUser" }, ngImport: i0, template: "<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"authorizedUsersList | async as list\">\n    <ng-container *ngIf=\"(showLoadingIndicator | async) === false; else loadingState\">\n      <ng-container *ngIf=\"list.items.length; else emptyState\">\n        <bb-authorized-users-list\n          [authorizedUsersList]=\"list.items\"\n          [levelsConfig]=\"levelsConfig\"\n          (edit)=\"editPermissions($event)\"\n          (remove)=\"setCurrentUser($event, 'remove')\"\n          (paused)=\"setCurrentUser($event, 'pause')\"\n          (resumed)=\"updateUserStatus($event)\"\n          (createAuthorizedUser)=\"goToAuthorizedUser()\"\n        ></bb-authorized-users-list>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <bb-authorized-users-empty-list\n    [imageUrl]=\"imageEmptyStateUrl | async\"\n    (createAuthorizedUser)=\"goToAuthorizedUser()\"\n  ></bb-authorized-users-empty-list>\n</ng-template>\n\n<ng-template #loadingState>\n  <div class=\"card\">\n    <bb-loading-indicator-ui \n      loaderSize=\"lg\" \n      text=\"Loading...\"\n      i18n-text=\"Loading|Text for the loading indicator@@authorized.users.loading.indicator.text\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        iconModifier=\"error-outline\"\n        iconColor=\"dark\"\n        title=\"Something Went Wrong\"\n        i18n-title=\"Error state title@@authorized.users.errorState.title\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Error state message@@authorized.users.errorState.message\"\n      ></bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button \n          bbButton \n          color=\"primary\" \n          i18n=\"Reload button text@@authorized-users.errorState.reload.button\"\n        >\n          Reload\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<bb-authorized-user-list-remove-user-confirmation-dialog\n  [dialogOpen]=\"!!currentUser && actionName === 'remove'\"\n  (confirm)=\"removeUser(currentUser)\"\n  (closed)=\"setCurrentUser()\"\n></bb-authorized-user-list-remove-user-confirmation-dialog>\n\n<bb-authorized-user-list-confirmation-pause-user-dialog\n  [dialogOpen]=\"!!currentUser && actionName === 'pause'\"\n  (confirm)=\"updateUserStatus(currentUser)\"\n  (closed)=\"setCurrentUser()\"\n></bb-authorized-user-list-confirmation-pause-user-dialog>\n", components: [{ type: AuthorizedUsersListComponent, selector: "bb-authorized-users-list", inputs: ["authorizedUsersList", "levelsConfig"], outputs: ["edit", "remove", "paused", "resumed", "createAuthorizedUser"] }, { type: AuthorizedUsersEmptyListComponent, selector: "bb-authorized-users-empty-list", inputs: ["imageUrl"], outputs: ["createAuthorizedUser"] }, { type: i13.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i14.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: AuthorizedUsersListConfirmationRemoveUserDialogComponent, selector: "bb-authorized-user-list-remove-user-confirmation-dialog" }, { type: AuthorizedUserListConfirmationPauseUserDialogComponent, selector: "bb-authorized-user-list-confirmation-pause-user-dialog" }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-list-wrapper',
                    templateUrl: `authorized-users-list-wrapper.component.html`,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.AssetsService }, { type: UserDataService }, { type: UsersUIService }, { type: i4$2.NotificationService }]; }, propDecorators: { selectedUser: [{
                type: Output
            }] } });

const components = [
    AuthorizedUsersListWrapperComponent,
    AuthorizedUsersEmptyListComponent,
    AuthorizedUsersListComponent,
    AuthorizedUsersListItemComponent,
    AuthorizedUsersListStatusBadgeComponent,
    AuthorizedUsersListConfirmationRemoveUserDialogComponent,
    AuthorizedUserListConfirmationPauseUserDialogComponent,
];
const modules = [
    ButtonModule,
    IconModule,
    PhoneNumberModule,
    LoadingIndicatorModule,
    EmptyStateModule,
    NgbCollapseModule,
    DropdownMenuModule,
    ModalModule,
    BadgeModule,
    NotificationModule,
    AuthorizedUsersCommonModule,
];
class AuthorizedUsersListModule {
}
AuthorizedUsersListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AuthorizedUsersListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListModule, declarations: [AuthorizedUsersListWrapperComponent,
        AuthorizedUsersEmptyListComponent,
        AuthorizedUsersListComponent,
        AuthorizedUsersListItemComponent,
        AuthorizedUsersListStatusBadgeComponent,
        AuthorizedUsersListConfirmationRemoveUserDialogComponent,
        AuthorizedUserListConfirmationPauseUserDialogComponent], imports: [CommonModule, i1$2.BackbaseCoreModule, ButtonModule,
        IconModule,
        PhoneNumberModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        NgbCollapseModule,
        DropdownMenuModule,
        ModalModule,
        BadgeModule,
        NotificationModule,
        AuthorizedUsersCommonModule], exports: [ButtonModule,
        IconModule,
        PhoneNumberModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        NgbCollapseModule,
        DropdownMenuModule,
        ModalModule,
        BadgeModule,
        NotificationModule,
        AuthorizedUsersCommonModule, AuthorizedUsersListWrapperComponent,
        AuthorizedUsersEmptyListComponent,
        AuthorizedUsersListComponent,
        AuthorizedUsersListItemComponent,
        AuthorizedUsersListStatusBadgeComponent,
        AuthorizedUsersListConfirmationRemoveUserDialogComponent,
        AuthorizedUserListConfirmationPauseUserDialogComponent] });
AuthorizedUsersListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListModule, imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { AuthorizedUsersListWrapperComponent },
            }),
            ...modules,
        ], ButtonModule,
        IconModule,
        PhoneNumberModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        NgbCollapseModule,
        DropdownMenuModule,
        ModalModule,
        BadgeModule,
        NotificationModule,
        AuthorizedUsersCommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { AuthorizedUsersListWrapperComponent },
                        }),
                        ...modules,
                    ],
                    exports: [...modules, ...components],
                }]
        }] });

const AuthorizedUsersJourneyConfigurationToken = new InjectionToken('AuthorizedUsersJourneyConfiguration injection token');
var FullAccessGranularity;
(function (FullAccessGranularity) {
    FullAccessGranularity["PER_ACCOUNT"] = "individual-control";
    FullAccessGranularity["SAME_FOR_ALL_ACCOUNTS"] = "all-at-once";
})(FullAccessGranularity || (FullAccessGranularity = {}));
const configDefaults = {
    fullAccess: FullAccessGranularity.SAME_FOR_ALL_ACCOUNTS,
    levelsConfig: {
        mappings: new LevelsMappingConfigImplementation(),
        uiConfig: Object.assign(Object.assign({}, DEFAULT_UI_LEVELS_CONFIG), DEFAULT_UI_PERMISSIONS_CONFIG),
    },
};
class AuthorizedUsersJourneyConfigService {
    constructor(config) {
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
    }
    get defaults() {
        return configDefaults;
    }
    /**
     * Full access permission. Defines how the account owner can set access permissions: for all accounts at once, or for each account individually.
     */
    get fullAccess() {
        return this._config.fullAccess;
    }
    /**
     * Custom UI configuration for the permission levels and their permission sets.
     * For more details check https://community.backbase.com/documentation/Retail-Banking/latest/authorized_user_create_reference#create_authorized_users_configuration
     */
    get levelsConfig() {
        return this._config.levelsConfig;
    }
}
AuthorizedUsersJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyConfigService, deps: [{ token: AuthorizedUsersJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AuthorizedUsersJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AuthorizedUsersJourneyConfigurationToken]
                }] }]; } });

class AuthorizedUserCreateViewComponent {
    constructor(config, router, route) {
        this.config = config;
        this.router = router;
        this.route = route;
        this.selectedUser = this.route.params.pipe(map((params) => params['selectedUser']));
    }
    onClose() {
        this.router.navigate(['../list'], { relativeTo: this.route });
    }
}
AuthorizedUserCreateViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserCreateViewComponent, deps: [{ token: AuthorizedUsersJourneyConfigService }, { token: i1$8.Router }, { token: i1$8.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUserCreateViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUserCreateViewComponent, selector: "bb-authorized-user-create-view", ngImport: i0, template: `
    <bb-header-ui
      headingType="h1"
      headingClasses="bb-heading-widget__heading px-0 pb-5"
      heading="Authorized User"
      i18n-heading="
        Authorized User|Heading for the Create Authorized User View@@authorized-users.journey.create.heading.text"
    ></bb-header-ui>
    <bb-authorized-users-create-wrapper
      [selectedUser]="(selectedUser | async) || undefined"
      [enableAccountLevelFullAccessPermission]="config.fullAccess"
      (showAuthorizedUsers)="onClose()"
    ></bb-authorized-users-create-wrapper>
  `, isInline: true, components: [{ type: i3$4.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: AuthorizedUsersCreateWrapperComponent, selector: "bb-authorized-users-create-wrapper", inputs: ["selectedUser", "enableAccountLevelFullAccessPermission"], outputs: ["showAuthorizedUsers"] }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserCreateViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-user-create-view',
                    template: `
    <bb-header-ui
      headingType="h1"
      headingClasses="bb-heading-widget__heading px-0 pb-5"
      heading="Authorized User"
      i18n-heading="
        Authorized User|Heading for the Create Authorized User View@@authorized-users.journey.create.heading.text"
    ></bb-header-ui>
    <bb-authorized-users-create-wrapper
      [selectedUser]="(selectedUser | async) || undefined"
      [enableAccountLevelFullAccessPermission]="config.fullAccess"
      (showAuthorizedUsers)="onClose()"
    ></bb-authorized-users-create-wrapper>
  `,
                }]
        }], ctorParameters: function () { return [{ type: AuthorizedUsersJourneyConfigService }, { type: i1$8.Router }, { type: i1$8.ActivatedRoute }]; } });

class AuthorizedUsersListViewComponent {
    constructor(router, route) {
        this.router = router;
        this.route = route;
    }
    onUserSelected(id) {
        this.router.navigate(['../create', id ? { selectedUser: id } : {}], { relativeTo: this.route });
    }
}
AuthorizedUsersListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListViewComponent, deps: [{ token: i1$8.Router }, { token: i1$8.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersListViewComponent, selector: "bb-authorized-users-list-view", ngImport: i0, template: `
    <bb-header-ui
      headingType="h1"
      headingClasses="bb-heading-widget__heading px-0 pb-5"
      heading="Authorized Users"
      i18n-heading="
        Authorized Users|Heading for the Authorized Users List View@@authorized-users.journey.list.heading.text"
    ></bb-header-ui>
    <bb-authorized-users-list-wrapper (selectedUser)="onUserSelected($event)"></bb-authorized-users-list-wrapper>
  `, isInline: true, components: [{ type: i3$4.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: AuthorizedUsersListWrapperComponent, selector: "bb-authorized-users-list-wrapper", outputs: ["selectedUser"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-list-view',
                    template: `
    <bb-header-ui
      headingType="h1"
      headingClasses="bb-heading-widget__heading px-0 pb-5"
      heading="Authorized Users"
      i18n-heading="
        Authorized Users|Heading for the Authorized Users List View@@authorized-users.journey.list.heading.text"
    ></bb-header-ui>
    <bb-authorized-users-list-wrapper (selectedUser)="onUserSelected($event)"></bb-authorized-users-list-wrapper>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1$8.Router }, { type: i1$8.ActivatedRoute }]; } });

const defaultRoute = {
    path: '',
    component: AuthorizedUsersJourneyComponent,
    children: [
        {
            path: '',
            redirectTo: 'list',
            pathMatch: 'full',
        },
        {
            path: 'list',
            data: { title: 'Authorized users' },
            component: AuthorizedUsersListViewComponent,
        },
        {
            path: 'create',
            data: { title: 'Add authorized user' },
            component: AuthorizedUserCreateViewComponent,
        },
    ],
};
function getLevelsConfig(config) {
    return config.levelsConfig;
}
class AuthorizedUsersJourneyModule {
    static forRoot(data = { route: defaultRoute }) {
        return {
            ngModule: AuthorizedUsersJourneyModule,
            providers: [
                provideRoutes([data.route]),
                {
                    provide: levelsMappingConfigToken,
                    useFactory: getLevelsConfig,
                    deps: [AuthorizedUsersJourneyConfigService],
                },
            ],
        };
    }
}
AuthorizedUsersJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AuthorizedUsersJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyModule, declarations: [AuthorizedUsersJourneyComponent, AuthorizedUsersListViewComponent, AuthorizedUserCreateViewComponent], imports: [CommonModule, i1$2.BackbaseCoreModule, i1$8.RouterModule, HeaderModule,
        AuthorizedUsersListModule,
        AuthorizedUsersCreateModule] });
AuthorizedUsersJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyModule, providers: [AuthorizedUsersJourneyConfigService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { AuthorizedUsersJourneyComponent },
            }),
            RouterModule.forChild([]),
            HeaderModule,
            AuthorizedUsersListModule,
            AuthorizedUsersCreateModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AuthorizedUsersJourneyComponent, AuthorizedUsersListViewComponent, AuthorizedUserCreateViewComponent],
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { AuthorizedUsersJourneyComponent },
                        }),
                        RouterModule.forChild([]),
                        HeaderModule,
                        AuthorizedUsersListModule,
                        AuthorizedUsersCreateModule,
                    ],
                    providers: [AuthorizedUsersJourneyConfigService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AuthorizedUserCreateViewComponent, AuthorizedUsersJourneyConfigService, AuthorizedUsersJourneyConfigurationToken, AuthorizedUsersJourneyModule, AuthorizedUsersListViewComponent, DEFAULT_UI_LEVELS_CONFIG, DEFAULT_UI_PERMISSIONS_CONFIG, FullAccessGranularity, LevelsMappingConfigImplementation };
//# sourceMappingURL=backbase-authorized-users-journey-ang.js.map
