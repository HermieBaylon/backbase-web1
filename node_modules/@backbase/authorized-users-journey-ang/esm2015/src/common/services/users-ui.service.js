import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { DEFAULT_UI_LEVELS_CONFIG, DEFAULT_UI_PERMISSIONS_CONFIG } from '../constants';
import { AuthorizedPermissionLevel, } from '../model/authorized-users.model';
import { LevelsMappingConfigImplementation } from './default-level-mapping-config.service';
import { first, switchMap, catchError } from 'rxjs/operators';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@backbase/foundation-ang/core";
export const levelsMappingConfigToken = new InjectionToken('level injection token');
export class UsersUIService {
    constructor(
    // eslint-disable-next-line
    levelsConfig, http, assetsService) {
        var _a, _b, _c, _d, _e;
        this.levelsConfig = levelsConfig;
        this.http = http;
        this.assetsService = assetsService;
        this.authorizedPermissionLevel = [
            AuthorizedPermissionLevel.VIEW_ONLY,
            AuthorizedPermissionLevel.MONEY_MOVEMENT,
            AuthorizedPermissionLevel.FULL_ACCESS,
        ];
        this.getURIFromTxtAssetID = (assetId) => `${assetId}.txt`;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.resolveTxtAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-authorized-users-journey-ang',
            getURIFromAssetID: this.getURIFromTxtAssetID,
        });
        this.fetchFile = (fileLocation) => {
            return this.http.get(fileLocation, { responseType: 'text' });
        };
        this.statusMapping = ((_a = this === null || this === void 0 ? void 0 : this.levelsConfig) === null || _a === void 0 ? void 0 : _a.mappings)
            ? this.levelsConfig.mappings
            : new LevelsMappingConfigImplementation();
        const mapLevels = (value, index) => (Object.assign(Object.assign({}, value), { level: this.authorizedPermissionLevel[index], validate() {
                return this.level !== AuthorizedPermissionLevel.FULL_ACCESS;
            } }));
        this.uiLevelsConfig = ((_c = (_b = this === null || this === void 0 ? void 0 : this.levelsConfig) === null || _b === void 0 ? void 0 : _b.uiConfig) === null || _c === void 0 ? void 0 : _c.levels)
            ? this.levelsConfig.uiConfig.levels.map(mapLevels)
            : DEFAULT_UI_LEVELS_CONFIG.levels.map(mapLevels);
        this.uiPermissionsConfig = ((_e = (_d = this === null || this === void 0 ? void 0 : this.levelsConfig) === null || _d === void 0 ? void 0 : _d.uiConfig) === null || _e === void 0 ? void 0 : _e.permissions)
            ? { permissions: this.levelsConfig.uiConfig.permissions }
            : DEFAULT_UI_PERMISSIONS_CONFIG;
    }
    get uiLevelsConfigValue() {
        return this.uiLevelsConfig;
    }
    get uiPermissionsConfigValue() {
        return this.uiPermissionsConfig;
    }
    get statusMappingValue() {
        return this.statusMapping;
    }
    get termsConditionsUrl() {
        return this.resolveTxtAsset('terms-and-conditions');
    }
    termsConditionsContent() {
        return this.termsConditionsUrl.pipe(first(), switchMap(this.fetchFile), catchError(() => {
            console.warn('No terms and conditions file was found');
            return of('');
        }));
    }
}
UsersUIService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UsersUIService, deps: [{ token: levelsMappingConfigToken, optional: true }, { token: i1.HttpClient }, { token: i2.AssetsService }], target: i0.ɵɵFactoryTarget.Injectable });
UsersUIService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UsersUIService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UsersUIService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [levelsMappingConfigToken]
                }, {
                    type: Optional
                }] }, { type: i1.HttpClient }, { type: i2.AssetsService }]; } });
//# sourceMappingURL=data:application/json;base64,