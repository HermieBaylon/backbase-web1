import { Injectable } from '@angular/core';
import { AuthorizedUser, AuthorizedUsersList, } from '../model/authorized-users.model';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { AccountList } from '../model/account-list.model';
import { ServiceAgreementRequest } from '../model/service-agreement.model';
import { Status } from '@backbase/data-ang/accesscontrol';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/accesscontrol";
import * as i2 from "@backbase/data-ang/authorized-users";
import * as i3 from "@backbase/data-ang/arrangements";
import * as i4 from "./users-ui.service";
export class UserDataService {
    constructor(accessGroupDataHttpService, userDataHttpService, productSummaryDataHttpService, usersUIService) {
        this.accessGroupDataHttpService = accessGroupDataHttpService;
        this.userDataHttpService = userDataHttpService;
        this.productSummaryDataHttpService = productSummaryDataHttpService;
        this.usersUIService = usersUIService;
        this.statusMapping = this.usersUIService.statusMappingValue;
        this.accounts = this.productSummaryDataHttpService
            .getArrangementsByBusinessFunction({
            businessFunction: 'Product Summary',
            resourceName: 'Product Summary',
            privilege: 'view',
            size: 1000000,
        })
            .pipe(map(AccountList.fromHttpResponse));
        this.authorizedUsersList = this.userDataHttpService
            .getAuthorizedUsers()
            .pipe(map(AuthorizedUsersList.buildHttpResponse(this.statusMapping)));
    }
    setStatusForServiceAgreements(userSaid, status) {
        return this.accessGroupDataHttpService.putServiceAgreementState({
            serviceAgreementId: userSaid,
            serviceAgreementStatePut: ServiceAgreementRequest.toHttpRequest(status),
        });
    }
    updateAuthorizedUserStatus(id, status) {
        return this.userDataHttpService.updateStatusForAuthorizedUser({
            authorizedUserId: id,
            updateAuthorizedUserStatus: { enabled: status === Status.ENABLED },
        });
    }
    addAuthorizedUser(user) {
        return this.userDataHttpService.createAuthorizedUser({
            postAuthorizedUser: AuthorizedUser.buildHttpRequest(this.statusMapping).post(user),
        });
    }
    retrieveAuthorizedUser() {
        return combineLatest([this.authorizedUsersList, this.accounts]).pipe(map(([authorizedUsers, accounts]) => AuthorizedUsersList.mapData(authorizedUsers, accounts)));
    }
    getAllArrangements() {
        return this.accounts;
    }
    updateAuthorizedUser(id, permissions) {
        return this.userDataHttpService.updatePermissionsForAuthorizedUser({
            authorizedUserId: id,
            putAuthorizedUserPermissions: AuthorizedUser.buildHttpRequest(this.statusMapping).put(permissions),
        });
    }
    removeAuthorizedUser(id) {
        return this.userDataHttpService.deleteAuthorizedUser({
            authorizedUserId: id,
        });
    }
}
UserDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserDataService, deps: [{ token: i1.ServiceAgreementHttpService }, { token: i2.AuthorizedUserService }, { token: i3.ProductSummaryHttpService }, { token: i4.UsersUIService }], target: i0.ɵɵFactoryTarget.Injectable });
UserDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ServiceAgreementHttpService }, { type: i2.AuthorizedUserService }, { type: i3.ProductSummaryHttpService }, { type: i4.UsersUIService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2F1dGhvcml6ZWQtdXNlcnMtam91cm5leS9zcmMvY29tbW9uL3NlcnZpY2VzL3VzZXItZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUVMLGNBQWMsRUFDZCxtQkFBbUIsR0FJcEIsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDM0UsT0FBTyxFQUErQixNQUFNLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7O0FBSXZGLE1BQU0sT0FBTyxlQUFlO0lBZ0QxQixZQUNtQiwwQkFBdUQsRUFDdkQsbUJBQTBDLEVBQzFDLDZCQUF3RCxFQUN4RCxjQUE4QjtRQUg5QiwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTZCO1FBQ3ZELHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBdUI7UUFDMUMsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUEyQjtRQUN4RCxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFFL0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDO1FBQzVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLDZCQUE2QjthQUMvQyxpQ0FBaUMsQ0FBQztZQUNqQyxnQkFBZ0IsRUFBRSxpQkFBaUI7WUFDbkMsWUFBWSxFQUFFLGlCQUFpQjtZQUMvQixTQUFTLEVBQUUsTUFBTTtZQUNqQixJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUI7YUFDaEQsa0JBQWtCLEVBQUU7YUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUE5REQsNkJBQTZCLENBQUMsUUFBZ0IsRUFBRSxNQUFjO1FBQzVELE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLHdCQUF3QixDQUFDO1lBQzlELGtCQUFrQixFQUFFLFFBQVE7WUFDNUIsd0JBQXdCLEVBQUUsdUJBQXVCLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztTQUN4RSxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsMEJBQTBCLENBQUMsRUFBVSxFQUFFLE1BQWM7UUFDbkQsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsNkJBQTZCLENBQUM7WUFDNUQsZ0JBQWdCLEVBQUUsRUFBRTtZQUNwQiwwQkFBMEIsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRTtTQUNuRSxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsSUFBNEI7UUFDNUMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLENBQUM7WUFDbkQsa0JBQWtCLEVBQUUsY0FBYyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3BGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxzQkFBc0I7UUFDcEIsT0FBTyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNsRSxHQUFHLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUM3RixDQUFDO0lBQ0osQ0FBQztJQUVELGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELG9CQUFvQixDQUFDLEVBQVUsRUFBRSxXQUFtQztRQUNsRSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxrQ0FBa0MsQ0FBQztZQUNqRSxnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BCLDRCQUE0QixFQUFFLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztTQUNwRyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsb0JBQW9CLENBQUMsRUFBVTtRQUM3QixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxvQkFBb0IsQ0FBQztZQUNuRCxnQkFBZ0IsRUFBRSxFQUFFO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7OzZHQTlDVSxlQUFlO2lIQUFmLGVBQWU7NEZBQWYsZUFBZTtrQkFEM0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dGhvcml6ZWRVc2VyU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9hdXRob3JpemVkLXVzZXJzJztcbmltcG9ydCB7XG4gIEF1dGhvcml6ZWRQZXJtaXNzaW9uLFxuICBBdXRob3JpemVkVXNlcixcbiAgQXV0aG9yaXplZFVzZXJzTGlzdCxcbiAgTGV2ZWxzTWFwcGluZ0NvbmZpZyxcbiAgUGFydGlhbEF1dGhvcml6ZWRVc2VycyxcbiAgUmF3QXV0aG9yaXplZFVzZXIsXG59IGZyb20gJy4uL21vZGVsL2F1dGhvcml6ZWQtdXNlcnMubW9kZWwnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUHJvZHVjdFN1bW1hcnlIdHRwU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9hcnJhbmdlbWVudHMnO1xuaW1wb3J0IHsgQWNjb3VudExpc3QgfSBmcm9tICcuLi9tb2RlbC9hY2NvdW50LWxpc3QubW9kZWwnO1xuaW1wb3J0IHsgU2VydmljZUFncmVlbWVudFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbC9zZXJ2aWNlLWFncmVlbWVudC5tb2RlbCc7XG5pbXBvcnQgeyBTZXJ2aWNlQWdyZWVtZW50SHR0cFNlcnZpY2UsIFN0YXR1cyB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9hY2Nlc3Njb250cm9sJztcbmltcG9ydCB7IFVzZXJzVUlTZXJ2aWNlIH0gZnJvbSAnLi91c2Vycy11aS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFVzZXJEYXRhU2VydmljZSB7XG4gIHByaXZhdGUgYWNjb3VudHM6IE9ic2VydmFibGU8QWNjb3VudExpc3Q+O1xuICBwcml2YXRlIGF1dGhvcml6ZWRVc2Vyc0xpc3Q6IE9ic2VydmFibGU8UmF3QXV0aG9yaXplZFVzZXJbXT47XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhdHVzTWFwcGluZzogTGV2ZWxzTWFwcGluZ0NvbmZpZztcblxuICBzZXRTdGF0dXNGb3JTZXJ2aWNlQWdyZWVtZW50cyh1c2VyU2FpZDogc3RyaW5nLCBzdGF0dXM6IFN0YXR1cyk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmFjY2Vzc0dyb3VwRGF0YUh0dHBTZXJ2aWNlLnB1dFNlcnZpY2VBZ3JlZW1lbnRTdGF0ZSh7XG4gICAgICBzZXJ2aWNlQWdyZWVtZW50SWQ6IHVzZXJTYWlkLFxuICAgICAgc2VydmljZUFncmVlbWVudFN0YXRlUHV0OiBTZXJ2aWNlQWdyZWVtZW50UmVxdWVzdC50b0h0dHBSZXF1ZXN0KHN0YXR1cyksXG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVBdXRob3JpemVkVXNlclN0YXR1cyhpZDogc3RyaW5nLCBzdGF0dXM6IFN0YXR1cykge1xuICAgIHJldHVybiB0aGlzLnVzZXJEYXRhSHR0cFNlcnZpY2UudXBkYXRlU3RhdHVzRm9yQXV0aG9yaXplZFVzZXIoe1xuICAgICAgYXV0aG9yaXplZFVzZXJJZDogaWQsXG4gICAgICB1cGRhdGVBdXRob3JpemVkVXNlclN0YXR1czogeyBlbmFibGVkOiBzdGF0dXMgPT09IFN0YXR1cy5FTkFCTEVEIH0sXG4gICAgfSk7XG4gIH1cblxuICBhZGRBdXRob3JpemVkVXNlcih1c2VyOiBQYXJ0aWFsQXV0aG9yaXplZFVzZXJzKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlckRhdGFIdHRwU2VydmljZS5jcmVhdGVBdXRob3JpemVkVXNlcih7XG4gICAgICBwb3N0QXV0aG9yaXplZFVzZXI6IEF1dGhvcml6ZWRVc2VyLmJ1aWxkSHR0cFJlcXVlc3QodGhpcy5zdGF0dXNNYXBwaW5nISkucG9zdCh1c2VyKSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHJpZXZlQXV0aG9yaXplZFVzZXIoKTogT2JzZXJ2YWJsZTxBdXRob3JpemVkVXNlcnNMaXN0PiB7XG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW3RoaXMuYXV0aG9yaXplZFVzZXJzTGlzdCwgdGhpcy5hY2NvdW50c10pLnBpcGUoXG4gICAgICBtYXAoKFthdXRob3JpemVkVXNlcnMsIGFjY291bnRzXSkgPT4gQXV0aG9yaXplZFVzZXJzTGlzdC5tYXBEYXRhKGF1dGhvcml6ZWRVc2VycywgYWNjb3VudHMpKSxcbiAgICApO1xuICB9XG5cbiAgZ2V0QWxsQXJyYW5nZW1lbnRzKCk6IE9ic2VydmFibGU8QWNjb3VudExpc3Q+IHtcbiAgICByZXR1cm4gdGhpcy5hY2NvdW50cztcbiAgfVxuXG4gIHVwZGF0ZUF1dGhvcml6ZWRVc2VyKGlkOiBzdHJpbmcsIHBlcm1pc3Npb25zOiBBdXRob3JpemVkUGVybWlzc2lvbltdKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlckRhdGFIdHRwU2VydmljZS51cGRhdGVQZXJtaXNzaW9uc0ZvckF1dGhvcml6ZWRVc2VyKHtcbiAgICAgIGF1dGhvcml6ZWRVc2VySWQ6IGlkLFxuICAgICAgcHV0QXV0aG9yaXplZFVzZXJQZXJtaXNzaW9uczogQXV0aG9yaXplZFVzZXIuYnVpbGRIdHRwUmVxdWVzdCh0aGlzLnN0YXR1c01hcHBpbmchKS5wdXQocGVybWlzc2lvbnMpLFxuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlQXV0aG9yaXplZFVzZXIoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMudXNlckRhdGFIdHRwU2VydmljZS5kZWxldGVBdXRob3JpemVkVXNlcih7XG4gICAgICBhdXRob3JpemVkVXNlcklkOiBpZCxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYWNjZXNzR3JvdXBEYXRhSHR0cFNlcnZpY2U6IFNlcnZpY2VBZ3JlZW1lbnRIdHRwU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHVzZXJEYXRhSHR0cFNlcnZpY2U6IEF1dGhvcml6ZWRVc2VyU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb2R1Y3RTdW1tYXJ5RGF0YUh0dHBTZXJ2aWNlOiBQcm9kdWN0U3VtbWFyeUh0dHBTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgdXNlcnNVSVNlcnZpY2U6IFVzZXJzVUlTZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLnN0YXR1c01hcHBpbmcgPSB0aGlzLnVzZXJzVUlTZXJ2aWNlLnN0YXR1c01hcHBpbmdWYWx1ZTtcbiAgICB0aGlzLmFjY291bnRzID0gdGhpcy5wcm9kdWN0U3VtbWFyeURhdGFIdHRwU2VydmljZVxuICAgICAgLmdldEFycmFuZ2VtZW50c0J5QnVzaW5lc3NGdW5jdGlvbih7XG4gICAgICAgIGJ1c2luZXNzRnVuY3Rpb246ICdQcm9kdWN0IFN1bW1hcnknLFxuICAgICAgICByZXNvdXJjZU5hbWU6ICdQcm9kdWN0IFN1bW1hcnknLFxuICAgICAgICBwcml2aWxlZ2U6ICd2aWV3JyxcbiAgICAgICAgc2l6ZTogMTAwMDAwMCxcbiAgICAgIH0pXG4gICAgICAucGlwZShtYXAoQWNjb3VudExpc3QuZnJvbUh0dHBSZXNwb25zZSkpO1xuXG4gICAgdGhpcy5hdXRob3JpemVkVXNlcnNMaXN0ID0gdGhpcy51c2VyRGF0YUh0dHBTZXJ2aWNlXG4gICAgICAuZ2V0QXV0aG9yaXplZFVzZXJzKClcbiAgICAgIC5waXBlKG1hcChBdXRob3JpemVkVXNlcnNMaXN0LmJ1aWxkSHR0cFJlc3BvbnNlKHRoaXMuc3RhdHVzTWFwcGluZykpKTtcbiAgfVxufVxuIl19