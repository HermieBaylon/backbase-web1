import { __rest } from "tslib";
export var AuthorizedPermissionLevel;
(function (AuthorizedPermissionLevel) {
    AuthorizedPermissionLevel["VIEW_ONLY"] = "viewOnly";
    AuthorizedPermissionLevel["MONEY_MOVEMENT"] = "moneyMovement";
    AuthorizedPermissionLevel["FULL_ACCESS"] = "fullAccess";
})(AuthorizedPermissionLevel || (AuthorizedPermissionLevel = {}));
export var AuthorizedUserStatus;
(function (AuthorizedUserStatus) {
    AuthorizedUserStatus["PAUSED"] = "PAUSED";
    AuthorizedUserStatus["AWAITING_REGISTRATION"] = "AWAITING_REGISTRATION";
    AuthorizedUserStatus["ACTIVE"] = "ACTIVE";
})(AuthorizedUserStatus || (AuthorizedUserStatus = {}));
export var AuthorizedUsersList;
(function (AuthorizedUsersList) {
    function buildHttpResponse(levelMappignConfig) {
        return (response) => {
            if (response) {
                const data = Array.isArray(response) ? response : [response];
                return data.map((_a) => {
                    var { id, said, firstName, lastName, email, mobileNumber, username, status, permissions } = _a, others = __rest(_a, ["id", "said", "firstName", "lastName", "email", "mobileNumber", "username", "status", "permissions"]);
                    return Object.assign({ id,
                        said,
                        firstName,
                        lastName,
                        email,
                        mobileNumber,
                        username, status: status, permissions: permissions.map((_a) => {
                            var { accountId, level } = _a, otherPermissionsProps = __rest(_a, ["accountId", "level"]);
                            return (Object.assign({ accountId, level: levelMappignConfig.fromStringToPermissionLevel(level || '') }, otherPermissionsProps));
                        }) }, others);
                });
            }
            return [];
        };
    }
    AuthorizedUsersList.buildHttpResponse = buildHttpResponse;
    function mapData(authorizedUsers, accounts) {
        const items = authorizedUsers.map((authorizedUser) => {
            const { permissions } = authorizedUser, others = __rest(authorizedUser, ["permissions"]);
            return Object.assign({ permissions: setAccountToPermissions(permissions, accounts) }, others);
        });
        return {
            items,
        };
    }
    AuthorizedUsersList.mapData = mapData;
    function setAccountToPermissions(permissions, accounts) {
        return permissions
            .map((permission) => {
            const { accountId } = permission, others = __rest(permission, ["accountId"]);
            return Object.assign({ account: accounts.items.find((account) => account.id === accountId) }, others);
        })
            .filter((permission) => !!permission.account);
    }
})(AuthorizedUsersList || (AuthorizedUsersList = {}));
export var AuthorizedUser;
(function (AuthorizedUser) {
    function buildHttpRequest(levelMappignConfig) {
        const formatAuthorizedPermission = (_a) => {
            var { account, level } = _a, othersPropsPermissions = __rest(_a, ["account", "level"]);
            return (Object.assign({ accountId: account.id, level: levelMappignConfig.fromPermissionLevelToString(level) }, othersPropsPermissions));
        };
        return {
            post(user) {
                const { email = '', firstName = '', lastName = '', mobileNumber = '', permissions = [] } = user, others = __rest(user, ["email", "firstName", "lastName", "mobileNumber", "permissions"]);
                return Object.assign({ email,
                    firstName,
                    lastName,
                    mobileNumber, permissions: permissions.map(formatAuthorizedPermission) }, others);
            },
            put(permissions) {
                return {
                    permissions: permissions.map(formatAuthorizedPermission),
                };
            },
        };
    }
    AuthorizedUser.buildHttpRequest = buildHttpRequest;
})(AuthorizedUser || (AuthorizedUser = {}));
//# sourceMappingURL=data:application/json;base64,