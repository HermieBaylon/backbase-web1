import { Component, Input, Output, EventEmitter } from '@angular/core';
import { AuthorizedPermissionLevel, } from '../../model/authorized-users.model';
import { DEFAULT_ACCOUNT_NUMBER_FORMAT } from '../../constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@angular/common";
import * as i3 from "../../utils/accessibility-keyboard.directive";
import * as i4 from "@backbase/ui-ang/payment-card-number-pipe";
export class AuthorizedUsersPermissionsLevelsTableComponent {
    constructor() {
        this.isEditing = false;
        this.updateAccount = new EventEmitter();
        this.productNumberFormat = DEFAULT_ACCOUNT_NUMBER_FORMAT;
        this.authorizedPermissionLevel = AuthorizedPermissionLevel;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.sortKeepOriginalOrder = (..._) => {
            return 0;
        };
    }
    changeAccountLevel(account, newLevel) {
        this.updateAccount.emit(Object.assign(Object.assign({}, account), { level: newLevel }));
    }
    useEditableCell(level) {
        const isFullAccessField = level === this.authorizedPermissionLevel.FULL_ACCESS;
        const isFullAccesEditable = isFullAccessField && this.enableAccountLevelFullAccessPermission;
        return isFullAccesEditable || !isFullAccessField;
    }
}
AuthorizedUsersPermissionsLevelsTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsLevelsTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersPermissionsLevelsTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersPermissionsLevelsTableComponent, selector: "bb-authorized-users-permissions-levels-table", inputs: { selectedAccounts: "selectedAccounts", isEditing: "isEditing", enableAccountLevelFullAccessPermission: "enableAccountLevelFullAccessPermission", levelsConfig: "levelsConfig" }, outputs: { updateAccount: "updateAccount" }, ngImport: i0, template: "<table class=\"table table-striped bb-authorized-users-common-permission-table\">\n  <caption class=\"sr-only\" i18n=\"Permission Management|Table Caption@@authorized-users.common.permissions-table.caption\">\n    Permission Management\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">\n        <strong>\n          <span i18n=\"Accounts and Permissions title@@authorized-users.common.permissions-table.column-1.title\">\n            Accounts and Permissions\n          </span>\n        </strong>\n      </th>\n      <th scope=\"col\" class=\"text-center\" *ngFor=\"let levelConfig of levelsConfig\">\n        <strong class=\"bb-inline-stack\">\n          <bb-icon-ui [name]=\"levelConfig.icon\" size=\"sm\" class=\"bb-inline-stack__item\"></bb-icon-ui>\n          <span class=\"bb-inline-stack__item\">\n            {{levelConfig.title}}\n          </span>\n        </strong>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <ng-container *ngFor=\"let selectedAccount of selectedAccounts\">\n      <tr>\n        <td>\n          <div>\n            {{ selectedAccount.account.name }}\n          </div>\n          <div *ngIf=\"selectedAccount.account.displayNumber\" class=\"bb-text-support\">\n            {{ selectedAccount.account.displayNumber.slice(selectedAccount.account.displayNumber.length-9, selectedAccount.account.displayNumber.length) | paymentCardNumber: productNumberFormat }}\n          </div>\n        </td>\n        <ng-container *ngIf=\"isEditing then editMode; else viewMode\"></ng-container>\n      </tr>\n      \n      <ng-template #editMode>\n        <ng-container *ngFor=\"let permissionLevel of authorizedPermissionLevel | keyvalue : sortKeepOriginalOrder\">\n          <td class=\"text-center\">\n            <ng-container *ngIf=\"useEditableCell(permissionLevel.value); then editableTemplate; else mutedTemplate\"></ng-container>\n            \n            <ng-template #editableTemplate>\n              <bb-icon-ui\n                bbAuthorizedUsersAccessibilityKeyboard\n                [attr.data-role]=\"'user-permissions-edit-table-' + permissionLevel.value + (selectedAccount.level === permissionLevel.value ? '-checked' : '-unchecked')\"\n                [name]=\"selectedAccount.level === permissionLevel.value ? 'radio-button-checked' : 'radio-button-unchecked'\"\n                [color]=\"selectedAccount.level === permissionLevel.value ? 'primary' : 'inactive'\"\n                (click)=\"changeAccountLevel(selectedAccount, permissionLevel.value)\"\n                [attr.aria-checked]=\"selectedAccount.level === permissionLevel.value\"\n              ></bb-icon-ui>\n            </ng-template>\n\n            <ng-template #mutedTemplate>\n              <bb-icon-ui name=\"remove\" color=\"muted\" data-role=\"user-permissions-edit-table-fullAccess-muted\"></bb-icon-ui>\n              <span\n                class=\"sr-only\" \n                i18n=\"Full access can only be assigned to all accounts at once, individual account-level full access permission cannot be assigned | ScreenReader text@@authorized-users.common.permissions-table.view-mode.non-editable\"\n              >\n                Full access can only be assigned to all accounts at once, individual account-level full access permission cannot be assigned.\n              </span>\n            </ng-template>\n          </td>\n        </ng-container>\n      </ng-template>\n      \n      <ng-template #viewMode>\n        <ng-container *ngFor=\"let permissionLevel of authorizedPermissionLevel | keyvalue : sortKeepOriginalOrder\">\n          <td class=\"text-center\">\n            <bb-icon-ui\n              [name]=\"selectedAccount.level === permissionLevel.value ? 'check' : 'remove'\"\n              [color]=\"selectedAccount.level === permissionLevel.value ? 'success' : 'muted'\"\n              [attr.data-role]=\"'user-permissions-view-table-' + permissionLevel.value + (selectedAccount.level === permissionLevel.value ? '-checked' : '-unchecked')\"\n            ></bb-icon-ui>\n            <span\n              *ngIf=\"selectedAccount.level === permissionLevel.value\"\n              class=\"sr-only\" \n              i18n=\"Checked | ScreenReader text@@authorized-users.common.permissions-table.view-mode.checked\"\n            >\n              Checked\n            </span>\n            <span\n              *ngIf=\"!selectedAccount.level === permissionLevel.value\"\n              class=\"sr-only\" \n              i18n=\"Unchecked | ScreenReader text@@authorized-users.common.permissions-table.view-mode.unchecked\"\n            >\n              Unchecked\n            </span>\n          </td>\n        </ng-container>\n      </ng-template>\n      \n    </ng-container>\n  </tbody>\n</table>", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }], pipes: { "paymentCardNumber": i4.PaymentCardNumberPipe, "keyvalue": i2.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsLevelsTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-permissions-levels-table',
                    templateUrl: './permissions-table.component.html',
                }]
        }], propDecorators: { selectedAccounts: [{
                type: Input
            }], isEditing: [{
                type: Input
            }], enableAccountLevelFullAccessPermission: [{
                type: Input
            }], levelsConfig: [{
                type: Input
            }], updateAccount: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,