import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { provideRoutes, RouterModule } from '@angular/router';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { HeaderModule } from '@backbase/ui-ang/header';
import { AuthorizedUsersCreateModule } from './authorized-users-create/authorized-users-create.module';
import { AuthorizedUsersJourneyComponent } from './authorized-users-journey.component';
import { AuthorizedUsersListModule } from './authorized-users-list/authorized-users-list.module';
import { levelsMappingConfigToken } from './common/services/users-ui.service';
import { AuthorizedUsersJourneyConfigService } from './services/authorized-users-journey-config.service';
import { AuthorizedUserCreateViewComponent } from './views/authorized-user-create.component';
import { AuthorizedUsersListViewComponent } from './views/authorized-users-list.component';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "@angular/router";
export const defaultRoute = {
    path: '',
    component: AuthorizedUsersJourneyComponent,
    children: [
        {
            path: '',
            redirectTo: 'list',
            pathMatch: 'full',
        },
        {
            path: 'list',
            data: { title: 'Authorized users' },
            component: AuthorizedUsersListViewComponent,
        },
        {
            path: 'create',
            data: { title: 'Add authorized user' },
            component: AuthorizedUserCreateViewComponent,
        },
    ],
};
export function getLevelsConfig(config) {
    return config.levelsConfig;
}
export class AuthorizedUsersJourneyModule {
    static forRoot(data = { route: defaultRoute }) {
        return {
            ngModule: AuthorizedUsersJourneyModule,
            providers: [
                provideRoutes([data.route]),
                {
                    provide: levelsMappingConfigToken,
                    useFactory: getLevelsConfig,
                    deps: [AuthorizedUsersJourneyConfigService],
                },
            ],
        };
    }
}
AuthorizedUsersJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AuthorizedUsersJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyModule, declarations: [AuthorizedUsersJourneyComponent, AuthorizedUsersListViewComponent, AuthorizedUserCreateViewComponent], imports: [CommonModule, i1.BackbaseCoreModule, i2.RouterModule, HeaderModule,
        AuthorizedUsersListModule,
        AuthorizedUsersCreateModule] });
AuthorizedUsersJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyModule, providers: [AuthorizedUsersJourneyConfigService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { AuthorizedUsersJourneyComponent },
            }),
            RouterModule.forChild([]),
            HeaderModule,
            AuthorizedUsersListModule,
            AuthorizedUsersCreateModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AuthorizedUsersJourneyComponent, AuthorizedUsersListViewComponent, AuthorizedUserCreateViewComponent],
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { AuthorizedUsersJourneyComponent },
                        }),
                        RouterModule.forChild([]),
                        HeaderModule,
                        AuthorizedUsersListModule,
                        AuthorizedUsersCreateModule,
                    ],
                    providers: [AuthorizedUsersJourneyConfigService],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXplZC11c2Vycy1qb3VybmV5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvYXV0aG9yaXplZC11c2Vycy1qb3VybmV5L3NyYy9hdXRob3JpemVkLXVzZXJzLWpvdXJuZXkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFTLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNqRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUN6RyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM3RixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQzs7OztBQUUzRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQVU7SUFDakMsSUFBSSxFQUFFLEVBQUU7SUFDUixTQUFTLEVBQUUsK0JBQStCO0lBQzFDLFFBQVEsRUFBRTtRQUNSO1lBQ0UsSUFBSSxFQUFFLEVBQUU7WUFDUixVQUFVLEVBQUUsTUFBTTtZQUNsQixTQUFTLEVBQUUsTUFBTTtTQUNsQjtRQUNEO1lBQ0UsSUFBSSxFQUFFLE1BQU07WUFDWixJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7WUFDbkMsU0FBUyxFQUFFLGdDQUFnQztTQUM1QztRQUNEO1lBQ0UsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUscUJBQXFCLEVBQUU7WUFDdEMsU0FBUyxFQUFFLGlDQUFpQztTQUM3QztLQUNGO0NBQ0YsQ0FBQztBQUVGLE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBMkM7SUFDekUsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDO0FBQzdCLENBQUM7QUFnQkQsTUFBTSxPQUFPLDRCQUE0QjtJQUN2QyxNQUFNLENBQUMsT0FBTyxDQUNaLE9BQTZDLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRTtRQUVwRSxPQUFPO1lBQ0wsUUFBUSxFQUFFLDRCQUE0QjtZQUN0QyxTQUFTLEVBQUU7Z0JBQ1QsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMzQjtvQkFDRSxPQUFPLEVBQUUsd0JBQXdCO29CQUNqQyxVQUFVLEVBQUUsZUFBZTtvQkFDM0IsSUFBSSxFQUFFLENBQUMsbUNBQW1DLENBQUM7aUJBQzVDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7MEhBZlUsNEJBQTRCOzJIQUE1Qiw0QkFBNEIsaUJBYnhCLCtCQUErQixFQUFFLGdDQUFnQyxFQUFFLGlDQUFpQyxhQUVqSCxZQUFZLDBDQUtaLFlBQVk7UUFDWix5QkFBeUI7UUFDekIsMkJBQTJCOzJIQUlsQiw0QkFBNEIsYUFGNUIsQ0FBQyxtQ0FBbUMsQ0FBQyxZQVZ2QztZQUNQLFlBQVk7WUFDWixrQkFBa0IsQ0FBQyxVQUFVLENBQUM7Z0JBQzVCLFFBQVEsRUFBRSxFQUFFLCtCQUErQixFQUFFO2FBQzlDLENBQUM7WUFDRixZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUN6QixZQUFZO1lBQ1oseUJBQXlCO1lBQ3pCLDJCQUEyQjtTQUM1Qjs0RkFHVSw0QkFBNEI7a0JBZHhDLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsK0JBQStCLEVBQUUsZ0NBQWdDLEVBQUUsaUNBQWlDLENBQUM7b0JBQ3BILE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLGtCQUFrQixDQUFDLFVBQVUsQ0FBQzs0QkFDNUIsUUFBUSxFQUFFLEVBQUUsK0JBQStCLEVBQUU7eUJBQzlDLENBQUM7d0JBQ0YsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7d0JBQ3pCLFlBQVk7d0JBQ1oseUJBQXlCO3dCQUN6QiwyQkFBMkI7cUJBQzVCO29CQUNELFNBQVMsRUFBRSxDQUFDLG1DQUFtQyxDQUFDO2lCQUNqRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgcHJvdmlkZVJvdXRlcywgUm91dGUsIFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCYWNrYmFzZUNvcmVNb2R1bGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBIZWFkZXJNb2R1bGUgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL2hlYWRlcic7XG5pbXBvcnQgeyBBdXRob3JpemVkVXNlcnNDcmVhdGVNb2R1bGUgfSBmcm9tICcuL2F1dGhvcml6ZWQtdXNlcnMtY3JlYXRlL2F1dGhvcml6ZWQtdXNlcnMtY3JlYXRlLm1vZHVsZSc7XG5pbXBvcnQgeyBBdXRob3JpemVkVXNlcnNKb3VybmV5Q29tcG9uZW50IH0gZnJvbSAnLi9hdXRob3JpemVkLXVzZXJzLWpvdXJuZXkuY29tcG9uZW50JztcbmltcG9ydCB7IEF1dGhvcml6ZWRVc2Vyc0xpc3RNb2R1bGUgfSBmcm9tICcuL2F1dGhvcml6ZWQtdXNlcnMtbGlzdC9hdXRob3JpemVkLXVzZXJzLWxpc3QubW9kdWxlJztcbmltcG9ydCB7IGxldmVsc01hcHBpbmdDb25maWdUb2tlbiB9IGZyb20gJy4vY29tbW9uL3NlcnZpY2VzL3VzZXJzLXVpLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXV0aG9yaXplZFVzZXJzSm91cm5leUNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2F1dGhvcml6ZWQtdXNlcnMtam91cm5leS1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBBdXRob3JpemVkVXNlckNyZWF0ZVZpZXdDb21wb25lbnQgfSBmcm9tICcuL3ZpZXdzL2F1dGhvcml6ZWQtdXNlci1jcmVhdGUuY29tcG9uZW50JztcbmltcG9ydCB7IEF1dGhvcml6ZWRVc2Vyc0xpc3RWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi92aWV3cy9hdXRob3JpemVkLXVzZXJzLWxpc3QuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRSb3V0ZTogUm91dGUgPSB7XG4gIHBhdGg6ICcnLFxuICBjb21wb25lbnQ6IEF1dGhvcml6ZWRVc2Vyc0pvdXJuZXlDb21wb25lbnQsXG4gIGNoaWxkcmVuOiBbXG4gICAge1xuICAgICAgcGF0aDogJycsXG4gICAgICByZWRpcmVjdFRvOiAnbGlzdCcsXG4gICAgICBwYXRoTWF0Y2g6ICdmdWxsJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIHBhdGg6ICdsaXN0JyxcbiAgICAgIGRhdGE6IHsgdGl0bGU6ICdBdXRob3JpemVkIHVzZXJzJyB9LFxuICAgICAgY29tcG9uZW50OiBBdXRob3JpemVkVXNlcnNMaXN0Vmlld0NvbXBvbmVudCxcbiAgICB9LFxuICAgIHtcbiAgICAgIHBhdGg6ICdjcmVhdGUnLFxuICAgICAgZGF0YTogeyB0aXRsZTogJ0FkZCBhdXRob3JpemVkIHVzZXInIH0sXG4gICAgICBjb21wb25lbnQ6IEF1dGhvcml6ZWRVc2VyQ3JlYXRlVmlld0NvbXBvbmVudCxcbiAgICB9LFxuICBdLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldExldmVsc0NvbmZpZyhjb25maWc6IEF1dGhvcml6ZWRVc2Vyc0pvdXJuZXlDb25maWdTZXJ2aWNlKSB7XG4gIHJldHVybiBjb25maWcubGV2ZWxzQ29uZmlnO1xufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtBdXRob3JpemVkVXNlcnNKb3VybmV5Q29tcG9uZW50LCBBdXRob3JpemVkVXNlcnNMaXN0Vmlld0NvbXBvbmVudCwgQXV0aG9yaXplZFVzZXJDcmVhdGVWaWV3Q29tcG9uZW50XSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBCYWNrYmFzZUNvcmVNb2R1bGUud2l0aENvbmZpZyh7XG4gICAgICBjbGFzc01hcDogeyBBdXRob3JpemVkVXNlcnNKb3VybmV5Q29tcG9uZW50IH0sXG4gICAgfSksXG4gICAgUm91dGVyTW9kdWxlLmZvckNoaWxkKFtdKSxcbiAgICBIZWFkZXJNb2R1bGUsXG4gICAgQXV0aG9yaXplZFVzZXJzTGlzdE1vZHVsZSxcbiAgICBBdXRob3JpemVkVXNlcnNDcmVhdGVNb2R1bGUsXG4gIF0sXG4gIHByb3ZpZGVyczogW0F1dGhvcml6ZWRVc2Vyc0pvdXJuZXlDb25maWdTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgQXV0aG9yaXplZFVzZXJzSm91cm5leU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KFxuICAgIGRhdGE6IHsgcm91dGU6IFJvdXRlOyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHsgcm91dGU6IGRlZmF1bHRSb3V0ZSB9LFxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEF1dGhvcml6ZWRVc2Vyc0pvdXJuZXlNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEF1dGhvcml6ZWRVc2Vyc0pvdXJuZXlNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgcHJvdmlkZVJvdXRlcyhbZGF0YS5yb3V0ZV0pLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogbGV2ZWxzTWFwcGluZ0NvbmZpZ1Rva2VuLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGdldExldmVsc0NvbmZpZyxcbiAgICAgICAgICBkZXBzOiBbQXV0aG9yaXplZFVzZXJzSm91cm5leUNvbmZpZ1NlcnZpY2VdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=