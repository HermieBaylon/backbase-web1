import { Component, Output, EventEmitter, Input } from '@angular/core';
import { BehaviorSubject, ReplaySubject, merge, of, combineLatest } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../common/services/user-data.service";
import * as i2 from "../common/services/users-ui.service";
import * as i3 from "@backbase/foundation-ang/core";
import * as i4 from "./components/authorized-users-stepper/authorized-users-stepper.component";
import * as i5 from "./components/authorized-users-stepper/authorized-users-edit-stepper.component";
import * as i6 from "./components/authorized-users-create-container/authorized-users-create-container.component";
import * as i7 from "./components/authorized-users-user-details/authorized-users-user-details.component";
import * as i8 from "./components/authorized-users-accounts/authorized-users-accounts.component";
import * as i9 from "./components/authorized-users-permissions/authorized-users-permissions.component";
import * as i10 from "./components/authorized-users-confirmation/authorized-users-confirmation.component";
import * as i11 from "./components/authorized-users-confirmation-complete/authorized-users-confirmation-complete.component";
import * as i12 from "./components/authorized-users-cancel-creation/authorized-users-cancel-creation.component";
import * as i13 from "@backbase/ui-ang/loading-indicator";
import * as i14 from "@backbase/ui-ang/empty-state";
import * as i15 from "@angular/common";
import * as i16 from "./components/authorized-users-create-common/authorized-users-step-handler.directive";
export var AuthorizedUserPermissionControlType;
(function (AuthorizedUserPermissionControlType) {
    AuthorizedUserPermissionControlType["INDIVIDUAL_CONTROL"] = "individual-control";
    AuthorizedUserPermissionControlType["ALL_AT_ONCE"] = "all-at-once";
})(AuthorizedUserPermissionControlType || (AuthorizedUserPermissionControlType = {}));
export class AuthorizedUsersCreateWrapperComponent {
    constructor(userService, usersUIService, assetsService, cd) {
        this.userService = userService;
        this.usersUIService = usersUIService;
        this.assetsService = assetsService;
        this.cd = cd;
        this.currentStep = 1;
        this.isAborting = false;
        this.succeedStatus = '';
        this.isFailure = false;
        this.isSaving = false;
        this.showAuthorizedUsers = new EventEmitter();
        this.currentUserStore = new BehaviorSubject({});
        this.changesStore = new BehaviorSubject({});
        this.selectedEditUserStore = new ReplaySubject();
        this.authorizedUser = this.currentUserStore.asObservable();
        this.enableAccountLevelFullAccessPermissionSubject = new BehaviorSubject(undefined);
        this.getURIFromSvgAssetID = (assetId) => `${assetId}.svg`;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.resolveSvgAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-authorized-users-journey-ang',
            getURIFromAssetID: this.getURIFromSvgAssetID,
        });
        this.goToAuthorizedUsersList = () => {
            this.showAuthorizedUsers.emit();
        };
        this.levelsConfig = this.usersUIService.uiLevelsConfigValue;
        this.permissionsConfig = this.usersUIService.uiPermissionsConfigValue;
        merge(this.changesStore, this.selectedEditUserStore).subscribe(this.currentUserStore);
    }
    set enableAccountLevelFullAccessPermissionValue(value) {
        this.enableAccountLevelFullAccessPermissionSubject.next(value);
    }
    get imageSucceedUrl() {
        return this.resolveSvgAsset('succeed');
    }
    get editMode() {
        return this.selectedUser !== undefined;
    }
    setCurrentUserValue(value) {
        this.changesStore.next(Object.assign(Object.assign({}, this.currentUserStore.value), value));
    }
    goToStep(value) {
        this.currentStep = value;
    }
    getAllAccounts() {
        return this.userService.getAllArrangements().pipe(catchError(this.handleAccountError));
    }
    handleAccountError() {
        return of({ items: [] });
    }
    handleUserError() {
        return of({ items: [] });
    }
    next(authorizedUser) {
        this.setCurrentUserValue(authorizedUser);
        this.goToStep(this.currentStep + 1);
    }
    back() {
        this.goToStep(this.currentStep - 1);
    }
    saveOnly(authorizedUser) {
        this.setCurrentUserValue(authorizedUser);
    }
    setAbortingDialog(value) {
        this.isAborting = value;
    }
    setSucceedDialogStatus(value) {
        this.succeedStatus = value;
    }
    finish(authorizedUser) {
        this.isSaving = true;
        const onCreateSuccess = () => {
            this.setSucceedDialogStatus('create');
            this.isSaving = false;
            this.cd.markForCheck();
        };
        const onEditSuccess = () => {
            this.setSucceedDialogStatus('edit');
            this.isSaving = false;
            this.cd.markForCheck();
        };
        const onError = () => {
            this.isFailure = true;
            this.isSaving = false;
            this.cd.markForCheck();
        };
        if (this.editMode) {
            this.userService
                .updateAuthorizedUser(this.selectedUser, authorizedUser.permissions)
                .subscribe(onEditSuccess, onError);
        }
        else {
            this.userService.addAuthorizedUser(authorizedUser).subscribe(onCreateSuccess, onError);
        }
    }
    ngOnInit() {
        if (this.editMode) {
            this.userService
                .retrieveAuthorizedUser()
                .pipe(catchError(this.handleUserError), map((data) => data.items.find((item) => item.id === this.selectedUser)))
                .subscribe(this.selectedEditUserStore);
            this.accounts = this.selectedEditUserStore.pipe(switchMap((data) => (data ? this.getAllAccounts() : this.handleAccountError())));
        }
        else {
            this.accounts = this.getAllAccounts();
        }
        this.termsConditionsContent = this.usersUIService.termsConditionsContent();
        this.loadingData = combineLatest([this.accounts, this.termsConditionsContent]).pipe(map(([accounts, termsAndConditions]) => ({
            accounts,
            termsAndConditions,
        })));
    }
    get enableAccountLevelFullAccessPermission() {
        return this.enableAccountLevelFullAccessPermissionSubject.asObservable().pipe(map((data) => {
            return data === AuthorizedUserPermissionControlType.INDIVIDUAL_CONTROL;
        }));
    }
}
AuthorizedUsersCreateWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateWrapperComponent, deps: [{ token: i1.UserDataService }, { token: i2.UsersUIService }, { token: i3.AssetsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersCreateWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersCreateWrapperComponent, selector: "bb-authorized-users-create-wrapper", inputs: { selectedUser: "selectedUser", enableAccountLevelFullAccessPermissionValue: ["enableAccountLevelFullAccessPermission", "enableAccountLevelFullAccessPermissionValue"] }, outputs: { showAuthorizedUsers: "showAuthorizedUsers" }, ngImport: i0, template: "<ng-container *ngIf=\"loadingData | async as data; else loadingState\">\n  <ng-container *ngIf=\"data.accounts?.items?.length > 0 && data.termsAndConditions; else errorState\">\n    <div class=\"bb-block bb-block--lg\">\n      <div class=\"row bb-stack bb-stack--center\">\n        <ng-container *ngIf=\"!editMode; else editModeStepper\">\n          <bb-authorized-users-stepper\n            class= \"col-12 col-md-10 col-lg-8\"\n            [currentStep]=\"currentStep\"\n          ></bb-authorized-users-stepper>\n        </ng-container>\n      </div>\n    </div>\n    \n    <ng-template #editModeStepper>\n      <bb-authorized-users-edit-stepper \n        class= \"col-12 col-md-10\"\n        [currentStep]=\"currentStep\"\n      ></bb-authorized-users-edit-stepper>\n    </ng-template>\n    \n    <bb-authorized-users-create-container>\n      <bb-authorized-users-user-details \n        *bbAuthorizedUsersStepHandler=\"!editMode ? currentStep : -1\"\n        [authorizedUser]=\"authorizedUser | async\"\n        [isFirstStep]=\"true\"\n        (next)=\"next($event)\"\n        (back)=\"back()\"\n        (cancel)=\"setAbortingDialog(true)\"\n      ></bb-authorized-users-user-details>\n      <bb-authorized-users-accounts \n        *bbAuthorizedUsersStepHandler=\"currentStep\" \n        [authorizedUser]=\"authorizedUser | async\"\n        [accounts]=\"data.accounts.items\"\n        [isFirstStep]=\"editMode\"\n        (next)=\"next($event)\"\n        (back)=\"back()\"\n        (saveOnly)=\"saveOnly($event)\"\n        (cancel)=\"setAbortingDialog(true)\"\n      ></bb-authorized-users-accounts>\n      <bb-authorized-users-permissions \n        *bbAuthorizedUsersStepHandler=\"currentStep\"\n        [authorizedUser]=\"authorizedUser | async\"\n        [enableAccountLevelFullAccessPermission]=\"enableAccountLevelFullAccessPermission | async\"\n        [accounts]=\"data.accounts.items\"\n        [levelsConfig]=\"levelsConfig\"\n        [permissionsConfig]=\"permissionsConfig\"\n        (next)=\"next($event)\"\n        (back)=\"back()\"\n        (saveOnly)=\"saveOnly($event)\"\n        (cancel)=\"setAbortingDialog(true)\"\n      ></bb-authorized-users-permissions>\n      <bb-authorized-users-confirmation \n        *bbAuthorizedUsersStepHandler=\"currentStep\"\n        [authorizedUser]=\"authorizedUser | async\"\n        [termsConditions]=\"data.termsAndConditions\"\n        [levelsConfig]=\"levelsConfig\"\n        [isSaving]=\"isSaving\"\n        [(showError)]=\"isFailure\"\n        (next)=\"finish($event)\"\n        (back)=\"back()\"\n        (cancel)=\"setAbortingDialog(true)\"\n      ></bb-authorized-users-confirmation>\n    </bb-authorized-users-create-container>\n  </ng-container>\n</ng-container>\n\n<bb-authorized-users-confirmation-complete\n  *ngIf=\"succeedStatus\"\n  [dialogOpen]=\"succeedStatus\"\n  [succeedStatus]=\"succeedStatus\"\n  [authorizedUser]=\"authorizedUser | async\"\n  [successImg]=\"imageSucceedUrl | async\"\n  (confirm)=\"goToAuthorizedUsersList()\"\n  (closed)=\"goToAuthorizedUsersList()\"\n></bb-authorized-users-confirmation-complete>\n\n<bb-authorized-users-cancel-creation\n  [dialogOpen]=\"isAborting\"\n  (confirm)=\"goToAuthorizedUsersList()\"\n  (closed)=\"setAbortingDialog(false)\"\n></bb-authorized-users-cancel-creation>\n\n<ng-template #loadingState>\n  <div class=\"card\">\n    <bb-loading-indicator-ui \n      loaderSize=\"lg\" \n      text=\"Loading...\"\n      i18n-text=\"Loading|Text for the loading indicator@@authorized.users.create.loading.indicator.text\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        iconModifier=\"error-outline\"\n        iconColor=\"dark\"\n        title=\"Something went wrong\"\n        i18n-title=\"Error state title@@authorized.users.create.errorState.title\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Error state message@@authorized.users.create.errorState.message\"\n      ></bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i4.AuthorizedUsersStepperComponent, selector: "bb-authorized-users-stepper", inputs: ["currentStep"] }, { type: i5.AuthorizedUserEditStepperComponent, selector: "bb-authorized-users-edit-stepper", inputs: ["currentStep"] }, { type: i6.AuthorizedUsersCreateContainerComponent, selector: "bb-authorized-users-create-container" }, { type: i7.AuthorizedUsersUserDetailsComponent, selector: "bb-authorized-users-user-details" }, { type: i8.AuthorizedUsersAccountsComponent, selector: "bb-authorized-users-accounts", inputs: ["accounts"] }, { type: i9.AuthorizedUsersPermissionsComponent, selector: "bb-authorized-users-permissions", inputs: ["accounts"] }, { type: i10.AuthorizedUsersConfirmationComponent, selector: "bb-authorized-users-confirmation", inputs: ["showError", "isSaving", "termsConditions"], outputs: ["showErrorChange"] }, { type: i11.AuthorizedUsersConfirmationCompleteComponent, selector: "bb-authorized-users-confirmation-complete", inputs: ["authorizedUser", "successImg", "succeedStatus"] }, { type: i12.AuthorizedUsersCancelCreationComponent, selector: "bb-authorized-users-cancel-creation" }, { type: i13.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i14.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i16.AuthorizedUserStepHandlerDirective, selector: "[bbAuthorizedUsersStepHandler]", inputs: ["bbAuthorizedUsersStepHandler"] }], pipes: { "async": i15.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersCreateWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-create-wrapper',
                    templateUrl: 'authorized-users-create-wrapper.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.UserDataService }, { type: i2.UsersUIService }, { type: i3.AssetsService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { selectedUser: [{
                type: Input
            }], enableAccountLevelFullAccessPermissionValue: [{
                type: Input,
                args: ['enableAccountLevelFullAccessPermission']
            }], showAuthorizedUsers: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,