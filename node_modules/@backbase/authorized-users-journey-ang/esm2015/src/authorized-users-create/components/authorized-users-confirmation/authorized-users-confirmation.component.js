import { Component, Input, Output, EventEmitter } from '@angular/core';
import { BaseAuthorizedUsersCreateStep } from '../authorized-users-create-common/base-authorized-users-create-step';
import { Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/alert";
import * as i3 from "../../../common/components/permissions-table/permissions-table.component";
import * as i4 from "@backbase/ui-ang/input-checkbox";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@backbase/ui-ang/load-button";
import * as i7 from "../../../common/utils/accessibility-keyboard.directive";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
export class AuthorizedUsersConfirmationComponent extends BaseAuthorizedUsersCreateStep {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.showError = false;
        this.isSaving = false;
        this.showErrorChange = new EventEmitter();
        this.confirmationDetailsForm = this.formBuilder.group({
            termsCB: [false, Validators.requiredTrue],
        });
    }
    saveUser() {
        if (this.confirmationDetailsForm.valid) {
            this.goNext(this.authorizedUser);
        }
        else {
            this.confirmationDetailsForm.markAllAsTouched();
        }
    }
    closeError() {
        this.showErrorChange.emit(false);
    }
    getControl(fieldName) {
        return this.confirmationDetailsForm.get(fieldName);
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
}
AuthorizedUsersConfirmationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersConfirmationComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersConfirmationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersConfirmationComponent, selector: "bb-authorized-users-confirmation", inputs: { showError: "showError", isSaving: "isSaving", termsConditions: "termsConditions" }, outputs: { showErrorChange: "showErrorChange" }, usesInheritance: true, ngImport: i0, template: "<form \n  [formGroup]=\"confirmationDetailsForm\" \n  data-role=\"user-confirmation-form\"\n>\n  <div class=\"bb-block bb-block--lg\" bbAuthorizedUsersAccessibilityKeyboard>\n    <h2\n      class=\"bb-block bb-block--lg\" \n      data-role=\"user-confirmation-header\"\n      i18n=\"Please review and confirm the authorized user information@@authorized-users.create.confirmation.heading-1\"\n    >\n      Please review and confirm the authorized user information.\n    </h2>\n    <bb-alert-ui \n      *ngIf=\"showError\" \n      data-role=\"user-confirmation-error-message\"\n      title=\"Something Went Wrong\"\n      i18n-title=\"Confirmation Failed Notification|Title for a notification displayed when confirmation user is failed@@authorized-users.create.confirmation.notification.error.title\"\n      message=\"We failed to confirm this authorized user, please try again later.\"\n      i18n-message=\"Confirmation Failed Notification Message|Message for a notification displayed when confirmation user is failed@@authorized-users.create.confirmation.notification.error.message\"\n      [dismissible]=\"true\"\n      (closed)=\"closeError()\"\n    ></bb-alert-ui>\n    <h3 class=\"bb-block bb-block--sm\" data-role=\"user-confirmation-fullName\">\n      {{authorizedUser.firstName + ' ' + authorizedUser.lastName}}\n    </h3>\n    <div class=\"bb-block bb-block--sm\" data-role=\"user-confirmation-email\">{{authorizedUser.email}}</div>\n    <div class=\"bb-block bb-block--sm\" data-role=\"user-confirmation-phone-number\">{{authorizedUser.mobileNumber}}</div>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <bb-authorized-users-permissions-levels-table \n      [selectedAccounts]=\"authorizedUser.permissions\"\n      [levelsConfig]=\"levelsConfig\"\n      data-role=\"user-confirmation-permissions-table\"\n    ></bb-authorized-users-permissions-levels-table>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <div \n      class=\"bb-block bb-block--md bb-highlight\" \n      data-role=\"user-confirmation-terms-header\"\n      i18n=\"Terms and conditions@@authorized-users.create.confirmation.tos.title\"\n    >\n      Terms and Conditions\n    </div>\n\n    <div class=\"bb-authorized-users-terms bb-block bb-block--md\" bbAuthorizedUsersAccessibilityKeyboard>\n      <ng-container *ngTemplateOutlet=\"termsAndConditions\"></ng-container>\n    </div>\n\n    <bb-input-checkbox-ui\n      formControlName=\"termsCB\"\n      [id]=\"'confirmationTosCheckbox'\"\n      data-role=\"user-confirmation-terms-checkbox\"\n      label=\"I have read and accept the terms and conditions.\"\n      i18n-label=\"I have read and accept the terms and conditions.@@authorized-users.create.confirmation.tos.label\"\n      class=\"bb-stack__item\"\n    ></bb-input-checkbox-ui>\n\n    <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('termsCB')\">\n      <span \n        *ngIf=\"hasError('termsCB', 'required')\" \n        data-role=\"user-confirmation-terms-validation-msg\"\n        i18n=\"You are required to accept terms and conditions@@authorized-users.create.confirmation.tos.error-label.required\"\n      >\n        You are required to accept terms and conditions\n      </span>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <bb-load-button-ui\n        color=\"primary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"user-confirmation-confirm-button\"\n        [isLoading]=\"isSaving\"\n        (click)=\"!isSaving && saveUser()\"\n        i18n=\"Confirm button text@@authorized-users.create.confirmation.confirm.button\"\n      >Confirm</bb-load-button-ui>\n    <button \n      bbButton \n      data-role=\"user-confirmation-back-button\"\n      class=\"bb-button-bar__button\"\n      i18n=\"Back button text@@authorized-users.create.confirmation.back.button\"\n      color=\"secondary\" \n      (click)=\"goBack()\"\n    >Back</button>\n    <button \n      bbButton \n      data-role=\"user-confirmation-cancel-button\"\n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel button text@@authorized-users.create.confirmation.cancel.button\"\n      (click)=\"abort()\"\n    >Cancel</button>\n  </div>\n</form>\n\n<ng-template #termsAndConditions>\n  <div\n    i18n=\"Terms and Conditions Text|Text for authorized users terms and conditions@@authorized-users.create.confirmation.tos.text\"\n    data-role=\"user-confirmation-terms-text\"\n    [innerHTML]=\"termsConditions\"\n  >\n  </div>\n</ng-template>", components: [{ type: i2.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i3.AuthorizedUsersPermissionsLevelsTableComponent, selector: "bb-authorized-users-permissions-levels-table", inputs: ["selectedAccounts", "isEditing", "enableAccountLevelFullAccessPermission", "levelsConfig"], outputs: ["updateAccount"] }, { type: i4.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersConfirmationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-confirmation',
                    templateUrl: 'authorized-users-confirmation.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { showError: [{
                type: Input
            }], isSaving: [{
                type: Input
            }], termsConditions: [{
                type: Input
            }], showErrorChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,