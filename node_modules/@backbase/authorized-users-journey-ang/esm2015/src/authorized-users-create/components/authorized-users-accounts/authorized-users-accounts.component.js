import { Component, Input } from '@angular/core';
import { DEFAULT_ACCOUNT_NUMBER_FORMAT } from '../../../common/constants';
import { AuthorizedPermissionLevel } from '../../../common/model/authorized-users.model';
import { BaseAuthorizedUsersCreateStep } from '../authorized-users-create-common/base-authorized-users-create-step';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/alert";
import * as i2 from "@backbase/ui-ang/checkbox-group";
import * as i3 from "@backbase/ui-ang/input-checkbox";
import * as i4 from "@angular/forms";
import * as i5 from "../../../common/utils/accessibility-keyboard.directive";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@backbase/ui-ang/payment-card-number-pipe";
export class AuthorizedUsersAccountsComponent extends BaseAuthorizedUsersCreateStep {
    constructor() {
        super(...arguments);
        this.model = {};
        this.productNumberFormat = DEFAULT_ACCOUNT_NUMBER_FORMAT;
        this.showError = false;
    }
    save() {
        if (this.hasAccounts()) {
            this.goNext({ permissions: this.cleanPermissions(this.createAuthorizedPermission()) });
        }
        else {
            this.showError = true;
        }
    }
    closeError() {
        this.showError = false;
    }
    cleanPermissions(permissions) {
        const fullAccessPermissions = permissions.filter((permission) => permission.level === AuthorizedPermissionLevel.FULL_ACCESS);
        if (fullAccessPermissions.length > 0 && fullAccessPermissions.length !== this.accounts.length) {
            return permissions.map((permission) => (Object.assign(Object.assign({}, permission), { level: AuthorizedPermissionLevel.VIEW_ONLY })));
        }
        else {
            return [...permissions];
        }
    }
    createAuthorizedPermission() {
        // Every member of the model has the account id as a key
        return Object.keys(this.model)
            .filter((accountId) => !!this.model[accountId])
            .map((accountId) => ({
            account: this.accounts.find((account) => account.id === accountId),
            level: this.setLevelToPermissionByAccount(accountId),
        }));
    }
    setLevelToPermissionByAccount(account) {
        if (this.authorizedUser.permissions) {
            const permission = this.authorizedUser.permissions.find((item) => item.account.id === account);
            return (permission === null || permission === void 0 ? void 0 : permission.level) ? permission.level : AuthorizedPermissionLevel.VIEW_ONLY;
        }
        else {
            return AuthorizedPermissionLevel.VIEW_ONLY;
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.setPresetPermissions(this.authorizedUser.permissions);
    }
    setPresetPermissions(permissions = []) {
        permissions.forEach((data) => {
            this.model[data.account.id] = true;
        });
    }
    hasAccounts() {
        return Object.keys(this.model).reduce((prev, curr) => (this.model[curr] ? prev + 1 : prev), 0) > 0;
    }
}
AuthorizedUsersAccountsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersAccountsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersAccountsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersAccountsComponent, selector: "bb-authorized-users-accounts", inputs: { accounts: "accounts" }, usesInheritance: true, ngImport: i0, template: "<form \n  #authorizedUsersAccountForm=\"ngForm\" \n  (ngSubmit)=\"save()\" \n  data-role=\"user-accounts-form\"\n>\n  <div class=\"bb-block bb-block--xl\" bbAuthorizedUsersAccessibilityKeyboard>\n    <h2 \n      data-role=\"user-accounts-header\"\n      i18n=\"user accounts selection header@@authorized.users.accounts.header\"\n    >\n      Which accounts will they have access to?\n    </h2>\n    <p \n      class=\"bb-text-support text-small\" \n      data-role=\"user-accounts-subHeader\"\n      i18n=\"user accounts selection subHeader@@authorized.users.accounts.subHeader\"\n    >\n      You will be able to specify permissions for each account in the next step.\n    </p>\n  </div>\n  <bb-alert-ui \n    *ngIf=\"showError\" \n    data-role=\"user-accounts-error-message\"\n    title=\"You need to select at least one account in order to continue\"\n    i18n-title=\"Account Failed Notification|Message for a notification displayed when no accounts are selected@@authorized-users.create.accounts.notification.error\"\n    [dismissible]=\"true\"\n    (closed)=\"closeError()\"\n  ></bb-alert-ui>\n  <ul \n    ngModelGroup=\"list\" \n    class=\"bb-list\"\n  >\n    <li class=\"bb-block bb-block--lg\">\n      <bb-checkbox-group-ui \n        label=\"Select all my accounts\"\n        data-role=\"user-accounts-select-all\"\n      ></bb-checkbox-group-ui>\n    </li>\n    <li *ngFor=\"let item of accounts\" class=\"bb-block bb-block--lg\" data-role=\"user-accounts-list\">\n      <bb-input-checkbox-ui\n        name=\"{{item.id}}\"\n        [(ngModel)]=\"model[item.id]\"\n        data-role=\"user-accounts-account-checkbox\"\n      >\n        <span class=\"bb-stack__item--spacing-sm highlight\" data-role=\"user-accounts-account-name\">{{item.name}}</span>\n        <span *ngIf=\"item.displayNumber\" class=\"bb-text-support\" data-role=\"user-accounts-account-number\">\n          {{ item.displayNumber.slice(item.displayNumber.length-9, item.displayNumber.length) | paymentCardNumber: productNumberFormat }}\n        </span>\n      </bb-input-checkbox-ui>\n    </li>\n  </ul>\n\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      data-role=\"user-accounts-continue-button\"\n      i18n=\"Continue button text@@authorized-users.create.accounts.continue.button\"\n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >Continue</button>\n    <button \n      bbButton \n      data-role=\"user-accounts-back-button\"\n      class=\"bb-button-bar__button\"\n      i18n=\"Back button text@@authorized-users.create.accounts.back.button\"\n      color=\"secondary\" \n      *ngIf=\"!isFirstStep\"\n      (click)=\"goBack()\"\n    >Back</button>\n    <button \n      bbButton \n      data-role=\"user-accounts-cancel-button\"\n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel button text@@authorized-users.accounts.create.cancel.button\"\n      (click)=\"abort()\"\n    >Cancel</button>\n  </div>\n</form>\n", components: [{ type: i1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2.CheckboxGroupComponent, selector: "bb-checkbox-group-ui" }, { type: i3.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "paymentCardNumber": i8.PaymentCardNumberPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersAccountsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-accounts',
                    templateUrl: 'authorized-users-accounts.component.html',
                }]
        }], propDecorators: { accounts: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,