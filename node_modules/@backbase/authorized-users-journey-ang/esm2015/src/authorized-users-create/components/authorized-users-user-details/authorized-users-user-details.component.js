import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { BaseAuthorizedUsersCreateStep } from '../authorized-users-create-common/base-authorized-users-create-step';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-text";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@backbase/ui-ang/input-email";
import * as i5 from "@backbase/ui-ang/input-phone";
import * as i6 from "../../../common/utils/accessibility-keyboard.directive";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/button";
export class AuthorizedUsersUserDetailsComponent extends BaseAuthorizedUsersCreateStep {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.suscription$ = new Subscription();
        this.validateEmailMatch = () => {
            const emailField = this.formGetter('email', 'emailGroup');
            const confirmationEmailField = this.formGetter('confirmationEmail', 'emailGroup');
            // eslint-disable-next-line no-null/no-null
            return (emailField === null || emailField === void 0 ? void 0 : emailField.value) !== (confirmationEmailField === null || confirmationEmailField === void 0 ? void 0 : confirmationEmailField.value) ? { validateMailConfirmation: true } : null;
        };
    }
    ngOnInit() {
        var _a;
        super.ngOnInit();
        this.userDetailsForm = this.formBuilder.group({
            firstName: [this.authorizedUser.firstName, Validators.required],
            lastName: [this.authorizedUser.lastName, Validators.required],
            emailGroup: this.formBuilder.group({
                email: [this.authorizedUser.email, Validators.compose([Validators.required, Validators.email])],
                confirmationEmail: [this.authorizedUser.email, Validators.compose([Validators.required, Validators.email])],
            }),
            mobileNumber: [this.authorizedUser.mobileNumber, Validators.required],
        });
        this.suscription$.add((_a = this.formGetter('emailGroup')) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(() => {
            const confirmationEmailControl = this.formGetter('confirmationEmail', 'emailGroup');
            if (confirmationEmailControl) {
                confirmationEmailControl.setValidators([Validators.required, Validators.email, this.validateEmailMatch]);
                confirmationEmailControl.updateValueAndValidity({ emitEvent: false });
            }
        }));
    }
    isFieldValid(fieldName, fieldGroup) {
        const controlField = this.formGetter(fieldName, fieldGroup);
        return !!controlField && (controlField.valid || controlField.untouched);
    }
    save() {
        var _a, _b;
        if ((_a = this.userDetailsForm) === null || _a === void 0 ? void 0 : _a.valid) {
            this.goNext(this.formatAuthorizedUserValue());
        }
        else {
            (_b = this.userDetailsForm) === null || _b === void 0 ? void 0 : _b.markAllAsTouched();
        }
    }
    formatAuthorizedUserValue() {
        const { firstName, lastName, emailGroup: { email }, mobileNumber, } = this.userDetailsForm.value;
        return { firstName, lastName, email, mobileNumber };
    }
    formGetter(fieldName, fieldGroup) {
        var _a, _b, _c;
        const controlField = !!fieldGroup
            ? (_b = (_a = this.userDetailsForm) === null || _a === void 0 ? void 0 : _a.get(fieldGroup)) === null || _b === void 0 ? void 0 : _b.get(fieldName)
            : (_c = this.userDetailsForm) === null || _c === void 0 ? void 0 : _c.get(fieldName);
        return controlField;
    }
    ngOnDestroy() {
        this.suscription$.unsubscribe();
    }
}
AuthorizedUsersUserDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersUserDetailsComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersUserDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersUserDetailsComponent, selector: "bb-authorized-users-user-details", usesInheritance: true, ngImport: i0, template: "<form [formGroup]=\"userDetailsForm\" (submit)=\"save()\">\n  <div class=\"bb-block bb-block--lg\" bbAuthorizedUsersAccessibilityKeyboard>\n    <h2 \n      data-role=\"user-details-header\"\n      i18n=\"user creation details header@@authorized.users.createUser.header\"\n    >\n      Who would you like to give access to?\n    </h2>\n  </div>\n\n  <div class=\"bb-block\">\n    <div class=\"row\">\n      <div class=\"col-12 col-sm-6 form-group\">\n        <bb-input-text-ui\n          formControlName=\"firstName\"\n          data-role=\"user-details-first-name\"\n          label=\"First Name\"\n          i18n-label=\"user creation details first name@@authorized.users.createUser.label.firstName\"\n          maxLength=\"256\"\n        ></bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('firstName')\">\n          <span \n            data-role=\"user-details-first-name-validation-msg\"\n            i18n=\"user creation first name required error message@@authorized.users.createUser.errorMessage.required.firstName\">\n            First name is required\n          </span>\n        </bb-input-validation-message-ui>  \n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12 col-sm-6 form-group\">\n        <bb-input-text-ui\n          formControlName=\"lastName\"\n          data-role=\"user-details-last-name\"\n          label=\"Last Name\"\n          i18n-label=\"user creation details last name@@authorized.users.createUser.label.lastName\"\n          maxLength=\"256\"\n        ></bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('lastName')\">\n          <span \n            data-role=\"user-details-last-name-validation-msg\"\n            i18n=\"user creation last name required error message@@authorized.users.createUser.errorMessage.required.lastName\">\n            Last name is required\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n    <ng-container formGroupName=\"emailGroup\">\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6 form-group\">\n          <bb-input-email-ui\n            formControlName=\"email\"\n            data-role=\"user-details-email\"\n            label=\"Email\"\n            i18n-label=\"user creation details email@@authorized.users.createUser.label.email\"\n            required=\"true\"\n          ></bb-input-email-ui>\n          <ng-container *ngIf=\"isFieldValid('email', 'emailGroup')\">\n            <span \n              class=\"bb-text-support text-small\" \n              i18n=\"user creation confirmation support text@@authorized.users.createUser.info.emailConfirmation\"\n            >\n            We will send a confirmation to their email address.\n            </span> \n          </ng-container>\n          <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('email', 'emailGroup')\" data-role=\"user-details-email-validation-msg\">\n            <ng-container *ngFor=\"let error of formGetter('email', 'emailGroup')?.errors | keyvalue; first as first\">\n                <ng-container *ngIf=\"first\" [ngSwitch]=\"error.key\">\n                  <span\n                    *ngSwitchCase=\"'required'\"\n                    i18n=\"user creation email required error message@@authorized.users.createUser.errorMessage.required.email\"\n                  >\n                    Email address is required\n                  </span>\n                  <span\n                    *ngSwitchCase=\"'email'\"\n                    i18n=\"invalid email format@@authorized.users.createUser.errorMessage.format.confirmationEmail\"\n                  >\n                  Invalid email format\n                  </span>\n                </ng-container>\n              </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6 form-group\">\n          <bb-input-email-ui\n            formControlName=\"confirmationEmail\"\n            data-role=\"user-details-confirmation-email\"\n            label=\"Confirm Email\"\n            i18n-label=\"user creation details confirm email@@authorized.users.createUser.label.confirmationEmail\"\n            required=\"true\"\n          ></bb-input-email-ui>\n          <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('confirmationEmail', 'emailGroup')\" data-role=\"user-details-confirmation-email-validation-msg\">\n            <ng-container *ngFor=\"let error of formGetter('confirmationEmail', 'emailGroup')?.errors | keyvalue; first as first\">\n              <ng-container *ngIf=\"first\" [ngSwitch]=\"error.key\">\n                <span\n                  *ngSwitchCase=\"'required'\"\n                  i18n=\"confirm email address is required@@authorized.users.createUser.errorMessage.required.confirmationEmail\"\n                >\n                  Confirm email address is required\n                </span>\n                <span\n                  *ngSwitchCase=\"'email'\"\n                  i18n=\"invalid email format@@authorized.users.createUser.errorMessage.format.confirmationEmail\"\n                >\n                Invalid email format\n                </span>\n                <span\n                  *ngSwitchCase=\"'validateMailConfirmation'\"\n                  i18n=\"email addresses do not match@@authorized.users.createUser.errorMessage.match.confirmationEmail\"\n                >\n                Email addresses do not match\n                </span>\n              </ng-container>\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </ng-container>\n\n    <div class=\"row\">\n      <div class=\"col-12 col-sm-6 form-group\">\n        <bb-input-phone-ui\n          formControlName=\"mobileNumber\"\n          data-role=\"user-details-phone-number\"\n          label=\"Phone Number\"\n          i18n-label=\"user creation details phone number@@authorized.users.createUser.label.phoneNumber\"\n          required=\"true\"\n        ></bb-input-phone-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('mobileNumber')\">\n          <span \n            data-role=\"user-details-phone-number-validation-msg\"\n            i18n=\"user creation phone number required error message@@authorized.users.createUser.errorMessage.required.phoneNumber\">\n            Phone number is required\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      data-role=\"user-details-continue-button\"\n      i18n=\"Continue button text@@authorized-users.create.details.continue.button\"\n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >Continue</button>\n    <button \n      bbButton \n      data-role=\"user-details-cancel-button\"\n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel button text@@authorized-users.create.details.cancel.button\"\n      (click)=\"abort()\"\n    >Cancel</button>\n  </div>\n</form>\n", components: [{ type: i2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.InputEmailComponent, selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }, { type: i5.InputPhoneComponent, selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i7.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "keyvalue": i7.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersUserDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-user-details',
                    templateUrl: 'authorized-users-user-details.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,