import { Component, Input } from '@angular/core';
import { AuthorizedPermissionLevel, } from '../../../common/model/authorized-users.model';
import { BaseAuthorizedUsersCreateStep } from '../authorized-users-create-common/base-authorized-users-create-step';
import * as i0 from "@angular/core";
import * as i1 from "./authorized-users-permissions-card.component";
import * as i2 from "@backbase/ui-ang/switch";
import * as i3 from "../../../common/components/permissions-table/permissions-table.component";
import * as i4 from "@angular/forms";
import * as i5 from "../../../common/utils/accessibility-keyboard.directive";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
export class AuthorizedUsersPermissionsComponent extends BaseAuthorizedUsersCreateStep {
    constructor() {
        super(...arguments);
        this.authorizedPermissionLevel = AuthorizedPermissionLevel;
        this._isCustomPermission = false;
    }
    get isCustomPermission() {
        return this._isCustomPermission;
    }
    set isCustomPermission(value) {
        this._isCustomPermission = value;
        this.generalLevel = undefined;
    }
    applyLevelToAccounts(generalLevel) {
        var _a;
        const permissions = (_a = this.authorizedUser.permissions) === null || _a === void 0 ? void 0 : _a.map((permission) => (Object.assign(Object.assign({}, permission), { level: generalLevel || AuthorizedPermissionLevel.VIEW_ONLY })));
        return Object.assign(Object.assign({}, this.authorizedUser), { permissions });
    }
    applyLevelToAccount(permission) {
        const permissions = [...(this.authorizedUser.permissions || [])];
        const index = permissions.findIndex((item) => item.account.id === permission.account.id);
        if (index !== -1) {
            permissions[index] = permission;
        }
        return Object.assign(Object.assign({}, this.authorizedUser), { permissions });
    }
    areTheSameLevel() {
        var _a, _b, _c, _d, _e;
        const level = ((_a = this.authorizedUser) === null || _a === void 0 ? void 0 : _a.permissions) && this.authorizedUser.permissions[0].level;
        const count = ((_c = (_b = this.authorizedUser) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.reduce((prev, curr) => (level === curr.level ? prev + 1 : prev), 0)) || -1;
        return count === ((_e = (_d = this.authorizedUser) === null || _d === void 0 ? void 0 : _d.permissions) === null || _e === void 0 ? void 0 : _e.length);
    }
    setGeneralLevel(level) {
        if (!this.isCustomPermission) {
            this.generalLevel = level;
            this.saveChanges(this.applyLevelToAccounts(this.generalLevel));
        }
    }
    apply() {
        this.goNext(this.authorizedUser);
    }
    updateAccount(permission) {
        this.saveChanges(this.applyLevelToAccount(permission));
    }
    disableCard(level) {
        var _a, _b, _c, _d;
        if (!((_a = this.authorizedUser) === null || _a === void 0 ? void 0 : _a.permissions)) {
            return false;
        }
        const allAccountsSelected = ((_c = (_b = this.authorizedUser) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.length) === ((_d = this.accounts) === null || _d === void 0 ? void 0 : _d.length);
        return !allAccountsSelected && !level.validate();
    }
    togglePermissionMode() {
        if (this.isCustomPermission && this.levelsConfig) {
            this.saveChanges(this.applyLevelToAccounts(this.levelsConfig[0].level));
        }
        else if (this.levelsConfig) {
            this.setGeneralLevel(this.levelsConfig[0].level);
        }
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.areTheSameLevel()) {
            this.generalLevel = this.authorizedUser.permissions && this.authorizedUser.permissions[0].level;
        }
        else {
            this.isCustomPermission = true;
        }
    }
}
AuthorizedUsersPermissionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersPermissionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersPermissionsComponent, selector: "bb-authorized-users-permissions", inputs: { accounts: "accounts" }, usesInheritance: true, ngImport: i0, template: "<form #authorizedUsersPermissionsForm=\"ngForm\" data-role=\"user-permissions-form\">\n  <div class=\"bb-block bb-block--lg\" bbAuthorizedUsersAccessibilityKeyboard>\n    <h2 \n      data-role=\"user-permissions-header\"\n      i18n=\"user permissions selection header@@authorized.users.permissions.header\"\n    >\n      What permissions do you want to give?\n    </h2>\n    <p \n      class=\"bb-text-support text-small\" \n      data-role=\"user-permissions-subHeader\"\n      i18n=\"user permissions selection subHeader@@authorized.users.permissions.subHeader\"\n    >\n      Choose one permission for all selected accounts or different permissions for each account.\n    </p>\n  </div>\n\n  <div class=\"row bb-block bb-block--xl\">\n    <bb-authorized-users-permissions-card\n      *ngFor=\"let permissionLevel of levelsConfig\"\n      class=\"col-lg-4 bb-block bb-block--md-md-down\"\n      [title]=\"permissionLevel.title\"\n      [icon]=\"permissionLevel.icon\"\n      [name]=\"permissionLevel.level\"\n      [currentName]=\"generalLevel\"\n      [disabled]=\"disableCard(permissionLevel)\"\n      [permissionsConfig]=\"permissionsConfig?.permissions\"\n      [permissionsAssigned]=\"permissionLevel.permissionsAssigned\"\n      (click)=\"!disableCard(permissionLevel) && setGeneralLevel(permissionLevel.level)\"\n    >\n    </bb-authorized-users-permissions-card>\n  </div>\n\n  <div class=\"bb-stack bb-block bb-block--xl\">\n    <div class=\"bb-stack__item bb-stack__item--spacing-sm bb-stack__item--align-top\">\n      <bb-switch-ui\n        name=\"customPermissions\"\n        data-role=\"user-permissions-switch\"\n        aria-label=\"Choose different permissions for each account\"\n        [(ngModel)]=\"isCustomPermission\"\n        (click)=\"togglePermissionMode()\"\n      ></bb-switch-ui>\n    </div>\n    <div class=\"bb-stack__item\">\n      <label \n        class=\"bb-switch__label\" \n        data-role=\"user-permissions-switch-label\"\n      >\n        Choose different permissions for each account\n      </label>\n      <div\n        *ngIf=\"!enableAccountLevelFullAccessPermission\"\n        class=\"bb-text-support text-small\"\n        data-role=\"user-permissions-switch-description\"\n        i18n=\"Different permission selection subTitle@@authorized.users.different.permission.subTtitle\"\n      >\n        Keep in mind that you can only give Full Access permissions to all accounts at once.\n    </div>\n   </div>\n  </div>\n\n  <bb-authorized-users-permissions-levels-table\n    *ngIf=\"isCustomPermission\"\n    [isEditing]=\"true\"\n    [enableAccountLevelFullAccessPermission]=\"enableAccountLevelFullAccessPermission\"\n    [selectedAccounts]=\"authorizedUser.permissions\"\n    [levelsConfig]=\"levelsConfig\"\n    (updateAccount)=\"updateAccount($event)\"\n    data-role=\"user-permissions-table\"\n  ></bb-authorized-users-permissions-levels-table>\n\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      data-role=\"user-permissions-continue-button\"\n      i18n=\"Continue button text@@authorized-users.create.permissions.continue.button\"\n      class=\"bb-button-bar__button\" \n      (click)=\"apply()\"\n    >Continue</button>\n    <button \n      bbButton \n      data-role=\"user-permissions-back-button\"\n      class=\"bb-button-bar__button\"\n      i18n=\"Back button text@@authorized-users.create.permissions.back.button\"\n      color=\"secondary\" \n      (click)=\"goBack()\"\n    >Back</button>\n    <button \n      bbButton \n      data-role=\"user-permissions-cancel-button\"\n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel button text@@authorized-users.create.permissions.cancel.button\"\n      (click)=\"abort()\"\n    >Cancel</button>\n  </div>\n</form>", components: [{ type: i1.AuthorizedUsersPermissionsCardComponent, selector: "bb-authorized-users-permissions-card", inputs: ["icon", "title", "name", "currentName", "permissionsConfig", "permissionsAssigned", "disabled"] }, { type: i2.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i3.AuthorizedUsersPermissionsLevelsTableComponent, selector: "bb-authorized-users-permissions-levels-table", inputs: ["selectedAccounts", "isEditing", "enableAccountLevelFullAccessPermission", "levelsConfig"], outputs: ["updateAccount"] }], directives: [{ type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.AuthorizedUsersAccessibilityKeyboardDirective, selector: "[bbAuthorizedUsersAccessibilityKeyboard]" }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersPermissionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-permissions',
                    templateUrl: 'authorized-users-permissions.component.html',
                }]
        }], propDecorators: { accounts: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,