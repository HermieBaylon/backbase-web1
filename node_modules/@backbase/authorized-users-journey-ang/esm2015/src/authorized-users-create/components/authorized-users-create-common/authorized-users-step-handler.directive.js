import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../authorized-users-create-container/authorized-users-create-container.component";
export class AuthorizedUserStepHandlerDirective {
    constructor(templateRef, viewContainerRef, parent) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.parent = parent;
        this._currentStep = 0;
    }
    showOrHideStep() {
        if (this._currentStep === this.step) {
            this.viewContainerRef.createEmbeddedView(this.templateRef);
        }
        else {
            this.viewContainerRef.clear();
        }
    }
    set currentStep(value) {
        this._currentStep = value;
        this.showOrHideStep();
    }
    ngOnInit() {
        this.step = this._currentStep > 0 ? this.parent.nextStepIndex() : undefined;
        this.showOrHideStep();
    }
}
AuthorizedUserStepHandlerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserStepHandlerDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.AuthorizedUsersCreateContainerComponent }], target: i0.ɵɵFactoryTarget.Directive });
AuthorizedUserStepHandlerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUserStepHandlerDirective, selector: "[bbAuthorizedUsersStepHandler]", inputs: { currentStep: ["bbAuthorizedUsersStepHandler", "currentStep"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUserStepHandlerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAuthorizedUsersStepHandler]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.AuthorizedUsersCreateContainerComponent }]; }, propDecorators: { currentStep: [{
                type: Input,
                args: ['bbAuthorizedUsersStepHandler']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXplZC11c2Vycy1zdGVwLWhhbmRsZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hdXRob3JpemVkLXVzZXJzLWpvdXJuZXkvc3JjL2F1dGhvcml6ZWQtdXNlcnMtY3JlYXRlL2NvbXBvbmVudHMvYXV0aG9yaXplZC11c2Vycy1jcmVhdGUtY29tbW9uL2F1dGhvcml6ZWQtdXNlcnMtc3RlcC1oYW5kbGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBeUMsTUFBTSxlQUFlLENBQUM7OztBQU94RixNQUFNLE9BQU8sa0NBQWtDO0lBcUI3QyxZQUNVLFdBQXVELEVBQ3ZELGdCQUFrQyxFQUNsQyxNQUErQztRQUYvQyxnQkFBVyxHQUFYLFdBQVcsQ0FBNEM7UUFDdkQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxXQUFNLEdBQU4sTUFBTSxDQUF5QztRQXRCakQsaUJBQVksR0FBRyxDQUFDLENBQUM7SUF1QnRCLENBQUM7SUF0QkksY0FBYztRQUNwQixJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRTtZQUNuQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzVEO2FBQU07WUFDTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBRUQsSUFBMkMsV0FBVyxDQUFDLEtBQWE7UUFDbEUsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQzVFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDOztnSUFuQlUsa0NBQWtDO29IQUFsQyxrQ0FBa0M7NEZBQWxDLGtDQUFrQztrQkFIOUMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO2lCQUMzQzt1TEFZNEMsV0FBVztzQkFBckQsS0FBSzt1QkFBQyw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdXRob3JpemVkVXNlcnNDcmVhdGVDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuLi9hdXRob3JpemVkLXVzZXJzLWNyZWF0ZS1jb250YWluZXIvYXV0aG9yaXplZC11c2Vycy1jcmVhdGUtY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCYXNlQXV0aG9yaXplZFVzZXJzQ3JlYXRlU3RlcCB9IGZyb20gJy4vYmFzZS1hdXRob3JpemVkLXVzZXJzLWNyZWF0ZS1zdGVwJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiQXV0aG9yaXplZFVzZXJzU3RlcEhhbmRsZXJdJyxcbn0pXG5leHBvcnQgY2xhc3MgQXV0aG9yaXplZFVzZXJTdGVwSGFuZGxlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgc3RlcDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9jdXJyZW50U3RlcCA9IDA7XG4gIHByaXZhdGUgc2hvd09ySGlkZVN0ZXAoKSB7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRTdGVwID09PSB0aGlzLnN0ZXApIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgnYmJBdXRob3JpemVkVXNlcnNTdGVwSGFuZGxlcicpIHNldCBjdXJyZW50U3RlcCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fY3VycmVudFN0ZXAgPSB2YWx1ZTtcbiAgICB0aGlzLnNob3dPckhpZGVTdGVwKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN0ZXAgPSB0aGlzLl9jdXJyZW50U3RlcCA+IDAgPyB0aGlzLnBhcmVudC5uZXh0U3RlcEluZGV4KCkgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5zaG93T3JIaWRlU3RlcCgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8QmFzZUF1dGhvcml6ZWRVc2Vyc0NyZWF0ZVN0ZXA+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHBhcmVudDogQXV0aG9yaXplZFVzZXJzQ3JlYXRlQ29udGFpbmVyQ29tcG9uZW50LFxuICApIHt9XG59XG4iXX0=