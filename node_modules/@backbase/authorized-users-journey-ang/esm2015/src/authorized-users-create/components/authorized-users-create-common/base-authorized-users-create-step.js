import { Output, EventEmitter, Input, Directive } from '@angular/core';
import * as i0 from "@angular/core";
// eslint-disable-next-line
export class BaseAuthorizedUsersCreateStep {
    constructor() {
        this.next = new EventEmitter();
        this.back = new EventEmitter();
        this.saveOnly = new EventEmitter();
        this.cancel = new EventEmitter();
        this.isFirstStep = false;
    }
    goNext(authorizedUser) {
        this.next.emit(authorizedUser);
    }
    goBack() {
        this.back.emit();
    }
    saveChanges(authorizedUser) {
        this.saveOnly.emit(authorizedUser);
    }
    abort() {
        this.cancel.emit();
    }
    ngOnInit() {
        if (!this.authorizedUser) {
            throw new Error(`"authorizedUser" input is required in "${this.constructor.name}"`);
        }
    }
}
BaseAuthorizedUsersCreateStep.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseAuthorizedUsersCreateStep, deps: [], target: i0.ɵɵFactoryTarget.Directive });
BaseAuthorizedUsersCreateStep.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BaseAuthorizedUsersCreateStep, inputs: { authorizedUser: "authorizedUser", isFirstStep: "isFirstStep", enableAccountLevelFullAccessPermission: "enableAccountLevelFullAccessPermission", levelsConfig: "levelsConfig", permissionsConfig: "permissionsConfig" }, outputs: { next: "next", back: "back", saveOnly: "saveOnly", cancel: "cancel" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseAuthorizedUsersCreateStep, decorators: [{
            type: Directive
        }], propDecorators: { next: [{
                type: Output
            }], back: [{
                type: Output
            }], saveOnly: [{
                type: Output
            }], cancel: [{
                type: Output
            }], authorizedUser: [{
                type: Input
            }], isFirstStep: [{
                type: Input
            }], enableAccountLevelFullAccessPermission: [{
                type: Input
            }], levelsConfig: [{
                type: Input
            }], permissionsConfig: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1hdXRob3JpemVkLXVzZXJzLWNyZWF0ZS1zdGVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hdXRob3JpemVkLXVzZXJzLWpvdXJuZXkvc3JjL2F1dGhvcml6ZWQtdXNlcnMtY3JlYXRlL2NvbXBvbmVudHMvYXV0aG9yaXplZC11c2Vycy1jcmVhdGUtY29tbW9uL2Jhc2UtYXV0aG9yaXplZC11c2Vycy1jcmVhdGUtc3RlcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDOztBQVMvRSwyQkFBMkI7QUFDM0IsTUFBTSxPQUFnQiw2QkFBNkI7SUFGbkQ7UUFHWSxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQTJCLENBQUM7UUFDbkQsU0FBSSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDaEMsYUFBUSxHQUFHLElBQUksWUFBWSxFQUEyQixDQUFDO1FBQ3ZELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRW5DLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0tBMEI5QjtJQXJCQyxNQUFNLENBQUMsY0FBdUM7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxXQUFXLENBQUMsY0FBdUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ3JGO0lBQ0gsQ0FBQzs7MkhBL0JtQiw2QkFBNkI7K0dBQTdCLDZCQUE2Qjs0RkFBN0IsNkJBQTZCO2tCQUZsRCxTQUFTOzhCQUdFLElBQUk7c0JBQWIsTUFBTTtnQkFDRyxJQUFJO3NCQUFiLE1BQU07Z0JBQ0csUUFBUTtzQkFBakIsTUFBTTtnQkFDRyxNQUFNO3NCQUFmLE1BQU07Z0JBQ0UsY0FBYztzQkFBdEIsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLHNDQUFzQztzQkFBOUMsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUNHLGlCQUFpQjtzQkFBekIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgRGlyZWN0aXZlLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEF1dGhvcml6ZWRVc2VyLFxuICBMZXZlbFVJQ29uZmlnSGVhZGVyLFxuICBQYXJ0aWFsQXV0aG9yaXplZFVzZXJzLFxuICBQZXJtaXNzaW9uVUlDb25maWcsXG59IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9tb2RlbC9hdXRob3JpemVkLXVzZXJzLm1vZGVsJztcblxuQERpcmVjdGl2ZSgpXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQXV0aG9yaXplZFVzZXJzQ3JlYXRlU3RlcCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBPdXRwdXQoKSBuZXh0ID0gbmV3IEV2ZW50RW1pdHRlcjxQYXJ0aWFsPEF1dGhvcml6ZWRVc2VyPj4oKTtcbiAgQE91dHB1dCgpIGJhY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBzYXZlT25seSA9IG5ldyBFdmVudEVtaXR0ZXI8UGFydGlhbDxBdXRob3JpemVkVXNlcj4+KCk7XG4gIEBPdXRwdXQoKSBjYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBJbnB1dCgpIGF1dGhvcml6ZWRVc2VyITogUGFydGlhbEF1dGhvcml6ZWRVc2VycztcbiAgQElucHV0KCkgaXNGaXJzdFN0ZXAgPSBmYWxzZTtcbiAgQElucHV0KCkgZW5hYmxlQWNjb3VudExldmVsRnVsbEFjY2Vzc1Blcm1pc3Npb246IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIEBJbnB1dCgpIGxldmVsc0NvbmZpZzogQXJyYXk8TGV2ZWxVSUNvbmZpZ0hlYWRlcjxib29sZWFuW10+PiB8IHVuZGVmaW5lZDtcbiAgQElucHV0KCkgcGVybWlzc2lvbnNDb25maWc6IFBlcm1pc3Npb25VSUNvbmZpZzxzdHJpbmdbXT4gfCB1bmRlZmluZWQ7XG5cbiAgZ29OZXh0KGF1dGhvcml6ZWRVc2VyPzogUGFydGlhbEF1dGhvcml6ZWRVc2Vycykge1xuICAgIHRoaXMubmV4dC5lbWl0KGF1dGhvcml6ZWRVc2VyKTtcbiAgfVxuXG4gIGdvQmFjaygpIHtcbiAgICB0aGlzLmJhY2suZW1pdCgpO1xuICB9XG5cbiAgc2F2ZUNoYW5nZXMoYXV0aG9yaXplZFVzZXI/OiBQYXJ0aWFsQXV0aG9yaXplZFVzZXJzKSB7XG4gICAgdGhpcy5zYXZlT25seS5lbWl0KGF1dGhvcml6ZWRVc2VyKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuY2FuY2VsLmVtaXQoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5hdXRob3JpemVkVXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImF1dGhvcml6ZWRVc2VyXCIgaW5wdXQgaXMgcmVxdWlyZWQgaW4gXCIke3RoaXMuY29uc3RydWN0b3IubmFtZX1cImApO1xuICAgIH1cbiAgfVxufVxuIl19