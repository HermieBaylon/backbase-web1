import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { AuthorizedUsersBaseDialogComponent } from '../../../common/components/authorized-users-base-dialog/authorized-users-base-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/button";
import * as i4 from "@angular/common";
export class AuthorizedUsersConfirmationCompleteComponent extends AuthorizedUsersBaseDialogComponent {
    constructor() {
        super(...arguments);
        /**
         * success status
         */
        this.succeedStatus = '';
        /**
         * unique time to reload animated svg everytime
         */
        this.timestamp = new Date().getTime();
    }
}
AuthorizedUsersConfirmationCompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersConfirmationCompleteComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersConfirmationCompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersConfirmationCompleteComponent, selector: "bb-authorized-users-confirmation-complete", inputs: { authorizedUser: "authorizedUser", successImg: "successImg", succeedStatus: "succeedStatus" }, usesInheritance: true, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"dialogOpen\" (cancel)=\"onClose()\" data-role=\"complete-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <button \n            bbButton \n            data-role=\"complete-modal-close-button\" \n            color=\"unstyled\" \n            (click)=\"onClose()\"\n            aria-label=\"close confirmation complete modal\"\n            i18-aria-label=\"Close confirmation complete|Button for close confirmation complete@@authorized.users.confirmation.complete.closed.button\"\n          >\n            <bb-icon-ui color=\"muted\" name=\"clear\" size=\"lg\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-text-align-center bb-block\">\n        <img\n          src=\"{{ successImg + '?' + timestamp }}\"\n          alt=\"Confirmation succeeded\"\n          i18n-alt=\"Confirmation succeeded|Image for Confirmation succeeded@@authorized.users.confirmation.complete.confirmation-succeeded\"\n          data-role=\"confirmation-success-anim\"\n          class=\"img-fluid\"\n          data-role=\"complete-modal-image\"\n        />\n        <!-- Create confirmation -->\n        <ng-container *ngIf=\"succeedStatus==='create'\">\n          <h2\n            class=\"bb-text-bold\"\n            data-role=\"complete-create-modal-header\"\n            i18n=\"New authorized user!@@authorized.users.confirmation.create.complete.header\"\n          >\n            New authorized user!\n          </h2>\n          <span class=\"bb-text-support text-small\" data-role=\"complete-create-modal-subHeader\">\n            <span>{{authorizedUser?.firstName + ' ' + authorizedUser?.lastName + ' ' }}</span>\n            <span i18n=\"Success confirmation|Text for success confirmation@@authorized.users.confirmation.create.complete.success-message\">\n              will receive an email with a link to complete the registration process.\n            </span>\n          </span>\n        </ng-container>\n        <!-- Edit confirmation -->\n        <ng-container *ngIf=\"succeedStatus==='edit'\">\n          <h2\n            class=\"bb-text-bold\"\n            data-role=\"complete-edit-modal-header\"\n            i18n=\"New authorized user!@@authorized.users.confirmation.edit.complete.header\"\n          >\n            User permissions updated!\n          </h2>\n          <span class=\"bb-text-support text-small\" data-role=\"complete-edit-modal-subHeader\">\n            <span>{{authorizedUser?.firstName + ' ' + authorizedUser?.lastName + ' ' }}</span>\n            <span i18n=\"Success confirmation|Text for success confirmation@@authorized.users.confirmation.edit.complete.success-message\">\n              permissions were edited successfully.\n            </span>\n          </span>\n        </ng-container>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar bb-button-bar--center\">\n        <button\n          bbButton\n          data-role=\"complete-modal-gotIt-button\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          (click)=\"onConfirm()\"\n          i18n=\"Got it button|confirmation Done@@authorized.users.confirmation.complete.button.confirmation-done\"\n        >\n          Got it!\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersConfirmationCompleteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-confirmation-complete',
                    templateUrl: 'authorized-users-confirmation-complete.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { authorizedUser: [{
                type: Input
            }], successImg: [{
                type: Input
            }], succeedStatus: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXplZC11c2Vycy1jb25maXJtYXRpb24tY29tcGxldGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hdXRob3JpemVkLXVzZXJzLWpvdXJuZXkvc3JjL2F1dGhvcml6ZWQtdXNlcnMtY3JlYXRlL2NvbXBvbmVudHMvYXV0aG9yaXplZC11c2Vycy1jb25maXJtYXRpb24tY29tcGxldGUvYXV0aG9yaXplZC11c2Vycy1jb25maXJtYXRpb24tY29tcGxldGUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hdXRob3JpemVkLXVzZXJzLWpvdXJuZXkvc3JjL2F1dGhvcml6ZWQtdXNlcnMtY3JlYXRlL2NvbXBvbmVudHMvYXV0aG9yaXplZC11c2Vycy1jb25maXJtYXRpb24tY29tcGxldGUvYXV0aG9yaXplZC11c2Vycy1jb25maXJtYXRpb24tY29tcGxldGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sZ0dBQWdHLENBQUM7Ozs7OztBQVFwSixNQUFNLE9BQU8sNENBQTZDLFNBQVEsa0NBQWtDO0lBTHBHOztRQWNFOztXQUVHO1FBQ00sa0JBQWEsR0FBRyxFQUFFLENBQUM7UUFDNUI7O1dBRUc7UUFDTSxjQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUMzQzs7MElBakJZLDRDQUE0Qzs4SEFBNUMsNENBQTRDLGdOQ1R6RCxnakhBaUZjOzRGRHhFRCw0Q0FBNEM7a0JBTHhELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDJDQUEyQztvQkFDckQsV0FBVyxFQUFFLHVEQUF1RDtvQkFDcEUsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzhCQUtVLGNBQWM7c0JBQXRCLEtBQUs7Z0JBSUcsVUFBVTtzQkFBbEIsS0FBSztnQkFJRyxhQUFhO3NCQUFyQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dGhvcml6ZWRVc2Vyc0Jhc2VEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY29tcG9uZW50cy9hdXRob3JpemVkLXVzZXJzLWJhc2UtZGlhbG9nL2F1dGhvcml6ZWQtdXNlcnMtYmFzZS1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IFBhcnRpYWxBdXRob3JpemVkVXNlcnMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vbW9kZWwvYXV0aG9yaXplZC11c2Vycy5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWF1dGhvcml6ZWQtdXNlcnMtY29uZmlybWF0aW9uLWNvbXBsZXRlJyxcbiAgdGVtcGxhdGVVcmw6ICdhdXRob3JpemVkLXVzZXJzLWNvbmZpcm1hdGlvbi1jb21wbGV0ZS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBBdXRob3JpemVkVXNlcnNDb25maXJtYXRpb25Db21wbGV0ZUNvbXBvbmVudCBleHRlbmRzIEF1dGhvcml6ZWRVc2Vyc0Jhc2VEaWFsb2dDb21wb25lbnQge1xuICAvKipcbiAgICogQXV0aG9yaXplZCB1c2VyXG4gICAqL1xuICBASW5wdXQoKSBhdXRob3JpemVkVXNlcjogUGFydGlhbEF1dGhvcml6ZWRVc2VycyB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIHN1Y2Nlc3MgaW1hZ2UgcGF0aFxuICAgKi9cbiAgQElucHV0KCkgc3VjY2Vzc0ltZzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogc3VjY2VzcyBzdGF0dXNcbiAgICovXG4gIEBJbnB1dCgpIHN1Y2NlZWRTdGF0dXMgPSAnJztcbiAgLyoqXG4gICAqIHVuaXF1ZSB0aW1lIHRvIHJlbG9hZCBhbmltYXRlZCBzdmcgZXZlcnl0aW1lXG4gICAqL1xuICByZWFkb25seSB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbn1cbiIsIjxiYi1tb2RhbC11aSBbaXNPcGVuXT1cImRpYWxvZ09wZW5cIiAoY2FuY2VsKT1cIm9uQ2xvc2UoKVwiIGRhdGEtcm9sZT1cImNvbXBsZXRlLW1vZGFsXCI+XG4gIDxiYi1tb2RhbC1oZWFkZXItdWk+XG4gICAgPG5nLXRlbXBsYXRlIGJiQ3VzdG9tTW9kYWxIZWFkZXI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYmItc3RhY2tcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJiLXN0YWNrX19pdGVtIGJiLXN0YWNrX19pdGVtLS1wdXNoLXJpZ2h0XCI+XG4gICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgIGJiQnV0dG9uIFxuICAgICAgICAgICAgZGF0YS1yb2xlPVwiY29tcGxldGUtbW9kYWwtY2xvc2UtYnV0dG9uXCIgXG4gICAgICAgICAgICBjb2xvcj1cInVuc3R5bGVkXCIgXG4gICAgICAgICAgICAoY2xpY2spPVwib25DbG9zZSgpXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJjbG9zZSBjb25maXJtYXRpb24gY29tcGxldGUgbW9kYWxcIlxuICAgICAgICAgICAgaTE4LWFyaWEtbGFiZWw9XCJDbG9zZSBjb25maXJtYXRpb24gY29tcGxldGV8QnV0dG9uIGZvciBjbG9zZSBjb25maXJtYXRpb24gY29tcGxldGVAQGF1dGhvcml6ZWQudXNlcnMuY29uZmlybWF0aW9uLmNvbXBsZXRlLmNsb3NlZC5idXR0b25cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxiYi1pY29uLXVpIGNvbG9yPVwibXV0ZWRcIiBuYW1lPVwiY2xlYXJcIiBzaXplPVwibGdcIj48L2JiLWljb24tdWk+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgPC9iYi1tb2RhbC1oZWFkZXItdWk+XG4gIDxiYi1tb2RhbC1ib2R5LXVpPlxuICAgIDxuZy10ZW1wbGF0ZSBiYkN1c3RvbU1vZGFsQm9keT5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi10ZXh0LWFsaWduLWNlbnRlciBiYi1ibG9ja1wiPlxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPVwie3sgc3VjY2Vzc0ltZyArICc/JyArIHRpbWVzdGFtcCB9fVwiXG4gICAgICAgICAgYWx0PVwiQ29uZmlybWF0aW9uIHN1Y2NlZWRlZFwiXG4gICAgICAgICAgaTE4bi1hbHQ9XCJDb25maXJtYXRpb24gc3VjY2VlZGVkfEltYWdlIGZvciBDb25maXJtYXRpb24gc3VjY2VlZGVkQEBhdXRob3JpemVkLnVzZXJzLmNvbmZpcm1hdGlvbi5jb21wbGV0ZS5jb25maXJtYXRpb24tc3VjY2VlZGVkXCJcbiAgICAgICAgICBkYXRhLXJvbGU9XCJjb25maXJtYXRpb24tc3VjY2Vzcy1hbmltXCJcbiAgICAgICAgICBjbGFzcz1cImltZy1mbHVpZFwiXG4gICAgICAgICAgZGF0YS1yb2xlPVwiY29tcGxldGUtbW9kYWwtaW1hZ2VcIlxuICAgICAgICAvPlxuICAgICAgICA8IS0tIENyZWF0ZSBjb25maXJtYXRpb24gLS0+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJzdWNjZWVkU3RhdHVzPT09J2NyZWF0ZSdcIj5cbiAgICAgICAgICA8aDJcbiAgICAgICAgICAgIGNsYXNzPVwiYmItdGV4dC1ib2xkXCJcbiAgICAgICAgICAgIGRhdGEtcm9sZT1cImNvbXBsZXRlLWNyZWF0ZS1tb2RhbC1oZWFkZXJcIlxuICAgICAgICAgICAgaTE4bj1cIk5ldyBhdXRob3JpemVkIHVzZXIhQEBhdXRob3JpemVkLnVzZXJzLmNvbmZpcm1hdGlvbi5jcmVhdGUuY29tcGxldGUuaGVhZGVyXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBOZXcgYXV0aG9yaXplZCB1c2VyIVxuICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYi10ZXh0LXN1cHBvcnQgdGV4dC1zbWFsbFwiIGRhdGEtcm9sZT1cImNvbXBsZXRlLWNyZWF0ZS1tb2RhbC1zdWJIZWFkZXJcIj5cbiAgICAgICAgICAgIDxzcGFuPnt7YXV0aG9yaXplZFVzZXI/LmZpcnN0TmFtZSArICcgJyArIGF1dGhvcml6ZWRVc2VyPy5sYXN0TmFtZSArICcgJyB9fTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGkxOG49XCJTdWNjZXNzIGNvbmZpcm1hdGlvbnxUZXh0IGZvciBzdWNjZXNzIGNvbmZpcm1hdGlvbkBAYXV0aG9yaXplZC51c2Vycy5jb25maXJtYXRpb24uY3JlYXRlLmNvbXBsZXRlLnN1Y2Nlc3MtbWVzc2FnZVwiPlxuICAgICAgICAgICAgICB3aWxsIHJlY2VpdmUgYW4gZW1haWwgd2l0aCBhIGxpbmsgdG8gY29tcGxldGUgdGhlIHJlZ2lzdHJhdGlvbiBwcm9jZXNzLlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDwhLS0gRWRpdCBjb25maXJtYXRpb24gLS0+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJzdWNjZWVkU3RhdHVzPT09J2VkaXQnXCI+XG4gICAgICAgICAgPGgyXG4gICAgICAgICAgICBjbGFzcz1cImJiLXRleHQtYm9sZFwiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJjb21wbGV0ZS1lZGl0LW1vZGFsLWhlYWRlclwiXG4gICAgICAgICAgICBpMThuPVwiTmV3IGF1dGhvcml6ZWQgdXNlciFAQGF1dGhvcml6ZWQudXNlcnMuY29uZmlybWF0aW9uLmVkaXQuY29tcGxldGUuaGVhZGVyXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBVc2VyIHBlcm1pc3Npb25zIHVwZGF0ZWQhXG4gICAgICAgICAgPC9oMj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImJiLXRleHQtc3VwcG9ydCB0ZXh0LXNtYWxsXCIgZGF0YS1yb2xlPVwiY29tcGxldGUtZWRpdC1tb2RhbC1zdWJIZWFkZXJcIj5cbiAgICAgICAgICAgIDxzcGFuPnt7YXV0aG9yaXplZFVzZXI/LmZpcnN0TmFtZSArICcgJyArIGF1dGhvcml6ZWRVc2VyPy5sYXN0TmFtZSArICcgJyB9fTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGkxOG49XCJTdWNjZXNzIGNvbmZpcm1hdGlvbnxUZXh0IGZvciBzdWNjZXNzIGNvbmZpcm1hdGlvbkBAYXV0aG9yaXplZC51c2Vycy5jb25maXJtYXRpb24uZWRpdC5jb21wbGV0ZS5zdWNjZXNzLW1lc3NhZ2VcIj5cbiAgICAgICAgICAgICAgcGVybWlzc2lvbnMgd2VyZSBlZGl0ZWQgc3VjY2Vzc2Z1bGx5LlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLXRlbXBsYXRlPlxuICA8L2JiLW1vZGFsLWJvZHktdWk+XG4gIDxiYi1tb2RhbC1mb290ZXItdWkgI2Zvb3RlclJlZj5cbiAgICA8bmctdGVtcGxhdGUgYmJDdXN0b21Nb2RhbEZvb3Rlcj5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1idXR0b24tYmFyIGJiLWJ1dHRvbi1iYXItLWNlbnRlclwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgYmJCdXR0b25cbiAgICAgICAgICBkYXRhLXJvbGU9XCJjb21wbGV0ZS1tb2RhbC1nb3RJdC1idXR0b25cIlxuICAgICAgICAgIGNsYXNzPVwiYmItYnV0dG9uLWJhcl9fYnV0dG9uXCJcbiAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgIChjbGljayk9XCJvbkNvbmZpcm0oKVwiXG4gICAgICAgICAgaTE4bj1cIkdvdCBpdCBidXR0b258Y29uZmlybWF0aW9uIERvbmVAQGF1dGhvcml6ZWQudXNlcnMuY29uZmlybWF0aW9uLmNvbXBsZXRlLmJ1dHRvbi5jb25maXJtYXRpb24tZG9uZVwiXG4gICAgICAgID5cbiAgICAgICAgICBHb3QgaXQhXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgPC9iYi1tb2RhbC1mb290ZXItdWk+XG48L2JiLW1vZGFsLXVpPiJdfQ==