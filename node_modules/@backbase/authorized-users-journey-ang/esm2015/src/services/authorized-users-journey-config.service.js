import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
import { DEFAULT_UI_LEVELS_CONFIG, DEFAULT_UI_PERMISSIONS_CONFIG } from '../common/constants';
import { LevelsMappingConfigImplementation } from '../common/services/default-level-mapping-config.service';
import * as i0 from "@angular/core";
export const AuthorizedUsersJourneyConfigurationToken = new InjectionToken('AuthorizedUsersJourneyConfiguration injection token');
export var FullAccessGranularity;
(function (FullAccessGranularity) {
    FullAccessGranularity["PER_ACCOUNT"] = "individual-control";
    FullAccessGranularity["SAME_FOR_ALL_ACCOUNTS"] = "all-at-once";
})(FullAccessGranularity || (FullAccessGranularity = {}));
const configDefaults = {
    fullAccess: FullAccessGranularity.SAME_FOR_ALL_ACCOUNTS,
    levelsConfig: {
        mappings: new LevelsMappingConfigImplementation(),
        uiConfig: Object.assign(Object.assign({}, DEFAULT_UI_LEVELS_CONFIG), DEFAULT_UI_PERMISSIONS_CONFIG),
    },
};
export class AuthorizedUsersJourneyConfigService {
    constructor(config) {
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
    }
    get defaults() {
        return configDefaults;
    }
    /**
     * Full access permission. Defines how the account owner can set access permissions: for all accounts at once, or for each account individually.
     */
    get fullAccess() {
        return this._config.fullAccess;
    }
    /**
     * Custom UI configuration for the permission levels and their permission sets.
     * For more details check https://community.backbase.com/documentation/Retail-Banking/latest/authorized_user_create_reference#create_authorized_users_configuration
     */
    get levelsConfig() {
        return this._config.levelsConfig;
    }
}
AuthorizedUsersJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyConfigService, deps: [{ token: AuthorizedUsersJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AuthorizedUsersJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AuthorizedUsersJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXplZC11c2Vycy1qb3VybmV5LWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hdXRob3JpemVkLXVzZXJzLWpvdXJuZXkvc3JjL3NlcnZpY2VzL2F1dGhvcml6ZWQtdXNlcnMtam91cm5leS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTlGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHlEQUF5RCxDQUFDOztBQUM1RyxNQUFNLENBQUMsTUFBTSx3Q0FBd0MsR0FBRyxJQUFJLGNBQWMsQ0FFeEUscURBQXFELENBQUMsQ0FBQztBQUV6RCxNQUFNLENBQU4sSUFBWSxxQkFHWDtBQUhELFdBQVkscUJBQXFCO0lBQy9CLDJEQUFrQyxDQUFBO0lBQ2xDLDhEQUFxQyxDQUFBO0FBQ3ZDLENBQUMsRUFIVyxxQkFBcUIsS0FBckIscUJBQXFCLFFBR2hDO0FBT0QsTUFBTSxjQUFjLEdBR2hCO0lBQ0YsVUFBVSxFQUFFLHFCQUFxQixDQUFDLHFCQUFxQjtJQUN2RCxZQUFZLEVBQUU7UUFDWixRQUFRLEVBQUUsSUFBSSxpQ0FBaUMsRUFBRTtRQUNqRCxRQUFRLGtDQUNILHdCQUF3QixHQUN4Qiw2QkFBNkIsQ0FDakM7S0FDRjtDQUNGLENBQUM7QUFHRixNQUFNLE9BQU8sbUNBQW1DO0lBRzlDLFlBR0UsTUFBeUU7UUFFekUsTUFBTSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sbUNBQVEsY0FBYyxHQUFLLE1BQU0sQ0FBRSxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO0lBQ25DLENBQUM7O2lJQTdCVSxtQ0FBbUMsa0JBS3BDLHdDQUF3QztxSUFMdkMsbUNBQW1DOzRGQUFuQyxtQ0FBbUM7a0JBRC9DLFVBQVU7OzBCQUtOLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsd0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERFRkFVTFRfVUlfTEVWRUxTX0NPTkZJRywgREVGQVVMVF9VSV9QRVJNSVNTSU9OU19DT05GSUcgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IExldmVsc0NvbmZpZywgU2FmZVR5cGVBcnJheSB9IGZyb20gJy4uL2NvbW1vbi9tb2RlbC9hdXRob3JpemVkLXVzZXJzLm1vZGVsJztcbmltcG9ydCB7IExldmVsc01hcHBpbmdDb25maWdJbXBsZW1lbnRhdGlvbiB9IGZyb20gJy4uL2NvbW1vbi9zZXJ2aWNlcy9kZWZhdWx0LWxldmVsLW1hcHBpbmctY29uZmlnLnNlcnZpY2UnO1xuZXhwb3J0IGNvbnN0IEF1dGhvcml6ZWRVc2Vyc0pvdXJuZXlDb25maWd1cmF0aW9uVG9rZW4gPSBuZXcgSW5qZWN0aW9uVG9rZW48XG4gIEF1dGhvcml6ZWRVc2Vyc0pvdXJuZXlDb25maWd1cmF0aW9uPFNhZmVUeXBlQXJyYXksIFNhZmVUeXBlQXJyYXk+XG4+KCdBdXRob3JpemVkVXNlcnNKb3VybmV5Q29uZmlndXJhdGlvbiBpbmplY3Rpb24gdG9rZW4nKTtcblxuZXhwb3J0IGVudW0gRnVsbEFjY2Vzc0dyYW51bGFyaXR5IHtcbiAgUEVSX0FDQ09VTlQgPSAnaW5kaXZpZHVhbC1jb250cm9sJyxcbiAgU0FNRV9GT1JfQUxMX0FDQ09VTlRTID0gJ2FsbC1hdC1vbmNlJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdXRob3JpemVkVXNlcnNKb3VybmV5Q29uZmlndXJhdGlvbjxUIGV4dGVuZHMgU2FmZVR5cGVBcnJheSwgUyBleHRlbmRzIHsgW2sgaW4ga2V5b2YgVF06IGFueSB9PiB7XG4gIGZ1bGxBY2Nlc3M6IEZ1bGxBY2Nlc3NHcmFudWxhcml0eTtcbiAgbGV2ZWxzQ29uZmlnOiBMZXZlbHNDb25maWc8VCwgUz47XG59XG5cbmNvbnN0IGNvbmZpZ0RlZmF1bHRzOiBBdXRob3JpemVkVXNlcnNKb3VybmV5Q29uZmlndXJhdGlvbjxcbiAgW2Jvb2xlYW4sIGJvb2xlYW4sIGJvb2xlYW4sIGJvb2xlYW4sIGJvb2xlYW5dLFxuICBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmddXG4+ID0ge1xuICBmdWxsQWNjZXNzOiBGdWxsQWNjZXNzR3JhbnVsYXJpdHkuU0FNRV9GT1JfQUxMX0FDQ09VTlRTLFxuICBsZXZlbHNDb25maWc6IHtcbiAgICBtYXBwaW5nczogbmV3IExldmVsc01hcHBpbmdDb25maWdJbXBsZW1lbnRhdGlvbigpLFxuICAgIHVpQ29uZmlnOiB7XG4gICAgICAuLi5ERUZBVUxUX1VJX0xFVkVMU19DT05GSUcsXG4gICAgICAuLi5ERUZBVUxUX1VJX1BFUk1JU1NJT05TX0NPTkZJRyxcbiAgICB9LFxuICB9LFxufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dGhvcml6ZWRVc2Vyc0pvdXJuZXlDb25maWdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfY29uZmlnOiBBdXRob3JpemVkVXNlcnNKb3VybmV5Q29uZmlndXJhdGlvbjxTYWZlVHlwZUFycmF5LCBTYWZlVHlwZUFycmF5PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQXV0aG9yaXplZFVzZXJzSm91cm5leUNvbmZpZ3VyYXRpb25Ub2tlbilcbiAgICBjb25maWc6IEF1dGhvcml6ZWRVc2Vyc0pvdXJuZXlDb25maWd1cmF0aW9uPFNhZmVUeXBlQXJyYXksIFNhZmVUeXBlQXJyYXk+LFxuICApIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5fY29uZmlnID0geyAuLi5jb25maWdEZWZhdWx0cywgLi4uY29uZmlnIH07XG4gIH1cblxuICBnZXQgZGVmYXVsdHMoKTogQXV0aG9yaXplZFVzZXJzSm91cm5leUNvbmZpZ3VyYXRpb248U2FmZVR5cGVBcnJheSwgU2FmZVR5cGVBcnJheT4ge1xuICAgIHJldHVybiBjb25maWdEZWZhdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBGdWxsIGFjY2VzcyBwZXJtaXNzaW9uLiBEZWZpbmVzIGhvdyB0aGUgYWNjb3VudCBvd25lciBjYW4gc2V0IGFjY2VzcyBwZXJtaXNzaW9uczogZm9yIGFsbCBhY2NvdW50cyBhdCBvbmNlLCBvciBmb3IgZWFjaCBhY2NvdW50IGluZGl2aWR1YWxseS5cbiAgICovXG4gIGdldCBmdWxsQWNjZXNzKCk6IEZ1bGxBY2Nlc3NHcmFudWxhcml0eSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5mdWxsQWNjZXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBVSSBjb25maWd1cmF0aW9uIGZvciB0aGUgcGVybWlzc2lvbiBsZXZlbHMgYW5kIHRoZWlyIHBlcm1pc3Npb24gc2V0cy5cbiAgICogRm9yIG1vcmUgZGV0YWlscyBjaGVjayBodHRwczovL2NvbW11bml0eS5iYWNrYmFzZS5jb20vZG9jdW1lbnRhdGlvbi9SZXRhaWwtQmFua2luZy9sYXRlc3QvYXV0aG9yaXplZF91c2VyX2NyZWF0ZV9yZWZlcmVuY2UjY3JlYXRlX2F1dGhvcml6ZWRfdXNlcnNfY29uZmlndXJhdGlvblxuICAgKi9cbiAgZ2V0IGxldmVsc0NvbmZpZygpOiBMZXZlbHNDb25maWc8U2FmZVR5cGVBcnJheSwgU2FmZVR5cGVBcnJheT4ge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcubGV2ZWxzQ29uZmlnO1xuICB9XG59XG4iXX0=