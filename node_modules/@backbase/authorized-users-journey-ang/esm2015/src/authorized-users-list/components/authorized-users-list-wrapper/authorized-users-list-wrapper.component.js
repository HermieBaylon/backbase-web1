import { Component, EventEmitter, Output } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { catchError, mergeMap, tap } from 'rxjs/operators';
import { AuthorizedUserStatus, } from '../../../common/model/authorized-users.model';
import { parseError } from '../../../common/model/authorized-users-error.model';
import { SERVICE_AGREEMENT_DISABLED, SERVICE_AGREEMENT_ENABLED } from '../../../common/constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "../../../common/services/user-data.service";
import * as i3 from "../../../common/services/users-ui.service";
import * as i4 from "@backbase/ui-ang/notification";
import * as i5 from "../authorized-users-list/authorized-users-list.component";
import * as i6 from "../authorized-users-empty-list/authorized-users-empty-list.component";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "@backbase/ui-ang/empty-state";
import * as i9 from "../authorized-users-list-confirmation-dialog/authorized-users-list-confirmation-remove-user-dialog.component";
import * as i10 from "../authorized-users-list-confirmation-dialog/authorized-user-list-confirmation-pause-user-dialog.component";
import * as i11 from "@angular/common";
import * as i12 from "@backbase/ui-ang/button";
export class AuthorizedUsersListWrapperComponent {
    constructor(assetsService, userDataService, usersUIService, notificationService) {
        this.assetsService = assetsService;
        this.userDataService = userDataService;
        this.usersUIService = usersUIService;
        this.notificationService = notificationService;
        this.refreshAuthorizedUsers = new BehaviorSubject(true);
        this.authorizedUsersListSubject = new BehaviorSubject({ items: [] });
        this.isLoading = new BehaviorSubject(true);
        this.authorizedUsersList = this.authorizedUsersListSubject.asObservable();
        this.showLoadingIndicator = this.isLoading.asObservable();
        this.selectedUser = new EventEmitter();
        this.getURIFromAssetID = (assetId) => `${assetId}-img.svg`;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-authorized-users-journey-ang',
            getURIFromAssetID: this.getURIFromAssetID,
        });
        this.handleLoadingError = (error) => {
            this.error = parseError(error);
            return of({ items: [] });
        };
        this.handleOperationsError = () => {
            this.setLoadingIndicator(false);
            this.pushNotification($localize `Something went wrong`, $localize `Please try again later.`, 'error');
        };
        this.refreshAuthorizedUsers
            .pipe(mergeMap(() => this.retrieveAuthorizedUsers()))
            .subscribe(this.authorizedUsersListSubject);
        this.levelsConfig = this.usersUIService.uiLevelsConfigValue;
    }
    retrieveAuthorizedUsers() {
        return this.userDataService.retrieveAuthorizedUser().pipe(catchError(this.handleLoadingError), tap(() => {
            this.setLoadingIndicator(false);
        }));
    }
    pushNotification(header, message, modifier) {
        this.notificationService.showNotification({
            header,
            message,
            modifier,
            dismissible: true,
            ttl: 5000,
        });
    }
    get imageEmptyStateUrl() {
        return this.resolveAsset('authorized-users-empty-state');
    }
    goToAuthorizedUser() {
        this.selectedUser.emit();
    }
    editPermissions(user) {
        this.selectedUser.emit(user.id);
    }
    setCurrentUser(user, actionName) {
        this.currentUser = user;
        this.actionName = actionName;
    }
    setLoadingIndicator(value) {
        this.isLoading.next(value);
    }
    removeUser(user) {
        const success = () => {
            this.pushNotification($localize `Authorized user removed`, $localize `Their permissions are permanently removed.`, 'success');
            this.refreshList();
        };
        if (user && user.id) {
            this.setLoadingIndicator(true);
            this.currentUser = undefined;
            this.userDataService.removeAuthorizedUser(user.id).subscribe(success, this.handleOperationsError);
        }
    }
    updateUserStatus(user) {
        const success = () => {
            if (user.status !== AuthorizedUserStatus.PAUSED) {
                this.pushNotification($localize `Authorized user paused`, $localize `You can resume their permissions at any time.`, 'success');
            }
            else {
                this.pushNotification($localize `User permissions resumed`, $localize `Their permissions are now active again.`, 'success');
            }
            this.refreshList();
        };
        if (user && user.id) {
            this.setLoadingIndicator(true);
            this.currentUser = undefined;
            this.userDataService
                .updateAuthorizedUserStatus(user.id, user.status !== AuthorizedUserStatus.PAUSED ? SERVICE_AGREEMENT_DISABLED : SERVICE_AGREEMENT_ENABLED)
                .subscribe(success, this.handleOperationsError);
        }
    }
    refreshList() {
        this.refreshAuthorizedUsers.next(true);
    }
    ngOnDestroy() {
        this.refreshAuthorizedUsers.complete();
        this.authorizedUsersListSubject.complete();
        this.isLoading.complete();
    }
}
AuthorizedUsersListWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListWrapperComponent, deps: [{ token: i1.AssetsService }, { token: i2.UserDataService }, { token: i3.UsersUIService }, { token: i4.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersListWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersListWrapperComponent, selector: "bb-authorized-users-list-wrapper", outputs: { selectedUser: "selectedUser" }, ngImport: i0, template: "<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"authorizedUsersList | async as list\">\n    <ng-container *ngIf=\"(showLoadingIndicator | async) === false; else loadingState\">\n      <ng-container *ngIf=\"list.items.length; else emptyState\">\n        <bb-authorized-users-list\n          [authorizedUsersList]=\"list.items\"\n          [levelsConfig]=\"levelsConfig\"\n          (edit)=\"editPermissions($event)\"\n          (remove)=\"setCurrentUser($event, 'remove')\"\n          (paused)=\"setCurrentUser($event, 'pause')\"\n          (resumed)=\"updateUserStatus($event)\"\n          (createAuthorizedUser)=\"goToAuthorizedUser()\"\n        ></bb-authorized-users-list>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <bb-authorized-users-empty-list\n    [imageUrl]=\"imageEmptyStateUrl | async\"\n    (createAuthorizedUser)=\"goToAuthorizedUser()\"\n  ></bb-authorized-users-empty-list>\n</ng-template>\n\n<ng-template #loadingState>\n  <div class=\"card\">\n    <bb-loading-indicator-ui \n      loaderSize=\"lg\" \n      text=\"Loading...\"\n      i18n-text=\"Loading|Text for the loading indicator@@authorized.users.loading.indicator.text\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        iconModifier=\"error-outline\"\n        iconColor=\"dark\"\n        title=\"Something Went Wrong\"\n        i18n-title=\"Error state title@@authorized.users.errorState.title\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Error state message@@authorized.users.errorState.message\"\n      ></bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button \n          bbButton \n          color=\"primary\" \n          i18n=\"Reload button text@@authorized-users.errorState.reload.button\"\n        >\n          Reload\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<bb-authorized-user-list-remove-user-confirmation-dialog\n  [dialogOpen]=\"!!currentUser && actionName === 'remove'\"\n  (confirm)=\"removeUser(currentUser)\"\n  (closed)=\"setCurrentUser()\"\n></bb-authorized-user-list-remove-user-confirmation-dialog>\n\n<bb-authorized-user-list-confirmation-pause-user-dialog\n  [dialogOpen]=\"!!currentUser && actionName === 'pause'\"\n  (confirm)=\"updateUserStatus(currentUser)\"\n  (closed)=\"setCurrentUser()\"\n></bb-authorized-user-list-confirmation-pause-user-dialog>\n", components: [{ type: i5.AuthorizedUsersListComponent, selector: "bb-authorized-users-list", inputs: ["authorizedUsersList", "levelsConfig"], outputs: ["edit", "remove", "paused", "resumed", "createAuthorizedUser"] }, { type: i6.AuthorizedUsersEmptyListComponent, selector: "bb-authorized-users-empty-list", inputs: ["imageUrl"], outputs: ["createAuthorizedUser"] }, { type: i7.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i8.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i9.AuthorizedUsersListConfirmationRemoveUserDialogComponent, selector: "bb-authorized-user-list-remove-user-confirmation-dialog" }, { type: i10.AuthorizedUserListConfirmationPauseUserDialogComponent, selector: "bb-authorized-user-list-confirmation-pause-user-dialog" }], directives: [{ type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i11.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-list-wrapper',
                    templateUrl: `authorized-users-list-wrapper.component.html`,
                }]
        }], ctorParameters: function () { return [{ type: i1.AssetsService }, { type: i2.UserDataService }, { type: i3.UsersUIService }, { type: i4.NotificationService }]; }, propDecorators: { selectedUser: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,