import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "../authorized-users-list-item/authorized-users-list-item.component";
import * as i3 from "@backbase/ui-ang/button";
import * as i4 from "@angular/common";
export class AuthorizedUsersListComponent {
    constructor() {
        this.edit = new EventEmitter();
        this.remove = new EventEmitter();
        this.paused = new EventEmitter();
        this.resumed = new EventEmitter();
        this.createAuthorizedUser = new EventEmitter();
    }
    goToAuthorizedUser() {
        this.createAuthorizedUser.emit();
    }
    editPermissions(user) {
        this.edit.emit(user);
    }
    removeUser(user) {
        this.remove.emit(user);
    }
    pauseUser(user) {
        this.paused.emit(user);
    }
    resumeUser(user) {
        this.resumed.emit(user);
    }
}
AuthorizedUsersListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AuthorizedUsersListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthorizedUsersListComponent, selector: "bb-authorized-users-list", inputs: { authorizedUsersList: "authorizedUsersList", levelsConfig: "levelsConfig" }, outputs: { edit: "edit", remove: "remove", paused: "paused", resumed: "resumed", createAuthorizedUser: "createAuthorizedUser" }, ngImport: i0, template: "<div class=\"bb-block bb-block--lg bb-text-align-right\">\n  <button bbButton data-role=\"add-button\" color=\"primary\" (click)=\"goToAuthorizedUser()\">\n    <bb-icon-ui name=\"add\"></bb-icon-ui> \n    <span i18n=\"Add new authorized user button@@authorized.users.add.button\">\n      Add Authorized User\n    </span>\n  </button>\n</div>\n<div class=\"bb-list\">\n  <div class=\"bb-list__item--no-separator\" *ngFor=\"let authorizedUsersItem of authorizedUsersList\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-authorized-users-list-item\n        [authorizedUsersItem]=\"authorizedUsersItem\"\n        [levelsConfig]=\"levelsConfig\"\n        (edit)=\"editPermissions($event)\"\n        (remove)=\"removeUser($event)\"\n        (paused)=\"pauseUser($event)\"\n        (resumed)=\"resumeUser($event)\"\n      ></bb-authorized-users-list-item>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.AuthorizedUsersListItemComponent, selector: "bb-authorized-users-list-item", inputs: ["authorizedUsersItem", "levelsConfig"], outputs: ["edit", "remove", "paused", "resumed"] }], directives: [{ type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthorizedUsersListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-authorized-users-list',
                    templateUrl: `./authorized-users-list.component.html`,
                }]
        }], propDecorators: { authorizedUsersList: [{
                type: Input
            }], levelsConfig: [{
                type: Input
            }], edit: [{
                type: Output
            }], remove: [{
                type: Output
            }], paused: [{
                type: Output
            }], resumed: [{
                type: Output
            }], createAuthorizedUser: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXplZC11c2Vycy1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYXV0aG9yaXplZC11c2Vycy1qb3VybmV5L3NyYy9hdXRob3JpemVkLXVzZXJzLWxpc3QvY29tcG9uZW50cy9hdXRob3JpemVkLXVzZXJzLWxpc3QvYXV0aG9yaXplZC11c2Vycy1saXN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYXV0aG9yaXplZC11c2Vycy1qb3VybmV5L3NyYy9hdXRob3JpemVkLXVzZXJzLWxpc3QvY29tcG9uZW50cy9hdXRob3JpemVkLXVzZXJzLWxpc3QvYXV0aG9yaXplZC11c2Vycy1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7OztBQU92RSxNQUFNLE9BQU8sNEJBQTRCO0lBSnpDO1FBV1ksU0FBSSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBQzFDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztRQUM1QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFDNUMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBQzdDLHlCQUFvQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7S0FxQnJEO0lBbkJDLGtCQUFrQjtRQUNoQixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELGVBQWUsQ0FBQyxJQUFvQjtRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsVUFBVSxDQUFDLElBQW9CO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBb0I7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFvQjtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDOzswSEEvQlUsNEJBQTRCOzhHQUE1Qiw0QkFBNEIsdVJDUHpDLDAzQkFzQkE7NEZEZmEsNEJBQTRCO2tCQUp4QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFdBQVcsRUFBRSx3Q0FBd0M7aUJBQ3REOzhCQUtVLG1CQUFtQjtzQkFBM0IsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUVJLElBQUk7c0JBQWIsTUFBTTtnQkFDRyxNQUFNO3NCQUFmLE1BQU07Z0JBQ0csTUFBTTtzQkFBZixNQUFNO2dCQUNHLE9BQU87c0JBQWhCLE1BQU07Z0JBQ0csb0JBQW9CO3NCQUE3QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dGhvcml6ZWRVc2VyLCBBdXRob3JpemVkVXNlcnNMaXN0LCBMZXZlbFVJQ29uZmlnSGVhZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL21vZGVsL2F1dGhvcml6ZWQtdXNlcnMubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1hdXRob3JpemVkLXVzZXJzLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogYC4vYXV0aG9yaXplZC11c2Vycy1saXN0LmNvbXBvbmVudC5odG1sYCxcbn0pXG5leHBvcnQgY2xhc3MgQXV0aG9yaXplZFVzZXJzTGlzdENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiAgTGlzdCBvZiBhdXRob3JpemVkIHVzZXJzLlxuICAgKi9cbiAgQElucHV0KCkgYXV0aG9yaXplZFVzZXJzTGlzdDogQXV0aG9yaXplZFVzZXJzTGlzdCB8IHVuZGVmaW5lZDtcbiAgQElucHV0KCkgbGV2ZWxzQ29uZmlnOiBBcnJheTxMZXZlbFVJQ29uZmlnSGVhZGVyPGJvb2xlYW5bXT4+IHwgdW5kZWZpbmVkO1xuXG4gIEBPdXRwdXQoKSBlZGl0ID0gbmV3IEV2ZW50RW1pdHRlcjxBdXRob3JpemVkVXNlcj4oKTtcbiAgQE91dHB1dCgpIHJlbW92ZSA9IG5ldyBFdmVudEVtaXR0ZXI8QXV0aG9yaXplZFVzZXI+KCk7XG4gIEBPdXRwdXQoKSBwYXVzZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEF1dGhvcml6ZWRVc2VyPigpO1xuICBAT3V0cHV0KCkgcmVzdW1lZCA9IG5ldyBFdmVudEVtaXR0ZXI8QXV0aG9yaXplZFVzZXI+KCk7XG4gIEBPdXRwdXQoKSBjcmVhdGVBdXRob3JpemVkVXNlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBnb1RvQXV0aG9yaXplZFVzZXIoKSB7XG4gICAgdGhpcy5jcmVhdGVBdXRob3JpemVkVXNlci5lbWl0KCk7XG4gIH1cblxuICBlZGl0UGVybWlzc2lvbnModXNlcjogQXV0aG9yaXplZFVzZXIpIHtcbiAgICB0aGlzLmVkaXQuZW1pdCh1c2VyKTtcbiAgfVxuXG4gIHJlbW92ZVVzZXIodXNlcjogQXV0aG9yaXplZFVzZXIpIHtcbiAgICB0aGlzLnJlbW92ZS5lbWl0KHVzZXIpO1xuICB9XG5cbiAgcGF1c2VVc2VyKHVzZXI6IEF1dGhvcml6ZWRVc2VyKSB7XG4gICAgdGhpcy5wYXVzZWQuZW1pdCh1c2VyKTtcbiAgfVxuXG4gIHJlc3VtZVVzZXIodXNlcjogQXV0aG9yaXplZFVzZXIpIHtcbiAgICB0aGlzLnJlc3VtZWQuZW1pdCh1c2VyKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1sZyBiYi10ZXh0LWFsaWduLXJpZ2h0XCI+XG4gIDxidXR0b24gYmJCdXR0b24gZGF0YS1yb2xlPVwiYWRkLWJ1dHRvblwiIGNvbG9yPVwicHJpbWFyeVwiIChjbGljayk9XCJnb1RvQXV0aG9yaXplZFVzZXIoKVwiPlxuICAgIDxiYi1pY29uLXVpIG5hbWU9XCJhZGRcIj48L2JiLWljb24tdWk+IFxuICAgIDxzcGFuIGkxOG49XCJBZGQgbmV3IGF1dGhvcml6ZWQgdXNlciBidXR0b25AQGF1dGhvcml6ZWQudXNlcnMuYWRkLmJ1dHRvblwiPlxuICAgICAgQWRkIEF1dGhvcml6ZWQgVXNlclxuICAgIDwvc3Bhbj5cbiAgPC9idXR0b24+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJiYi1saXN0XCI+XG4gIDxkaXYgY2xhc3M9XCJiYi1saXN0X19pdGVtLS1uby1zZXBhcmF0b3JcIiAqbmdGb3I9XCJsZXQgYXV0aG9yaXplZFVzZXJzSXRlbSBvZiBhdXRob3JpemVkVXNlcnNMaXN0XCI+XG4gICAgPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1sZ1wiPlxuICAgICAgPGJiLWF1dGhvcml6ZWQtdXNlcnMtbGlzdC1pdGVtXG4gICAgICAgIFthdXRob3JpemVkVXNlcnNJdGVtXT1cImF1dGhvcml6ZWRVc2Vyc0l0ZW1cIlxuICAgICAgICBbbGV2ZWxzQ29uZmlnXT1cImxldmVsc0NvbmZpZ1wiXG4gICAgICAgIChlZGl0KT1cImVkaXRQZXJtaXNzaW9ucygkZXZlbnQpXCJcbiAgICAgICAgKHJlbW92ZSk9XCJyZW1vdmVVc2VyKCRldmVudClcIlxuICAgICAgICAocGF1c2VkKT1cInBhdXNlVXNlcigkZXZlbnQpXCJcbiAgICAgICAgKHJlc3VtZWQpPVwicmVzdW1lVXNlcigkZXZlbnQpXCJcbiAgICAgID48L2JiLWF1dGhvcml6ZWQtdXNlcnMtbGlzdC1pdGVtPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19