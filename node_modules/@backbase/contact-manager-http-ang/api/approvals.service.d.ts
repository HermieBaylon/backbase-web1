import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AccountIdentifierType } from '../model/models';
import { ApprovalGetResponseBodyItem } from '../model/models';
import { ApprovalPostRequestBody } from '../model/models';
import { ApprovalPostResponseBody } from '../model/models';
import { ApprovalSort } from '../model/models';
import { ApprovalsCreatedByMeGetResponseBodyItem } from '../model/models';
import { RejectionPostRequestBody } from '../model/models';
import { SortDirection } from '../model/models';
import { ContactManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteApprovalRequestRequestParams {
    ["requestId"]: string;
}
export interface GetApprovalsRequestParams {
    ["from"]?: number;
    ["size"]?: number;
    ["query"]?: string;
    ["accountIdentifierTypes"]?: Array<AccountIdentifierType>;
    ["sort"]?: ApprovalSort;
    ["direction"]?: SortDirection;
}
export interface GetApprovalsCreatedByMeRequestParams {
    ["from"]?: number;
    ["size"]?: number;
    ["query"]?: string;
    ["accountIdentifierTypes"]?: Array<AccountIdentifierType>;
    ["sort"]?: ApprovalSort;
    ["direction"]?: SortDirection;
}
export interface PostApprovalRecordRequestParams {
    ["requestId"]: string;
    ["approvalPostRequestBody"]?: ApprovalPostRequestBody;
}
export interface PostRejectionRecordRequestParams {
    ["requestId"]: string;
    ["rejectionPostRequestBody"]?: RejectionPostRequestBody;
}
export declare class ApprovalsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ContactManagerConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ContactManagerConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteApprovalRequest(requestParameters: DeleteApprovalRequestRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteApprovalRequest(requestParameters: DeleteApprovalRequestRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteApprovalRequest(requestParameters: DeleteApprovalRequestRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteApprovalRequestUrl(requestParameters: DeleteApprovalRequestRequestParams): string;
    getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ApprovalGetResponseBodyItem>>;
    getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ApprovalGetResponseBodyItem>>>;
    getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ApprovalGetResponseBodyItem>>>;
    getApprovalsUrl(requestParameters: GetApprovalsRequestParams): string;
    getApprovalsCreatedByMe(requestParameters: GetApprovalsCreatedByMeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ApprovalsCreatedByMeGetResponseBodyItem>>;
    getApprovalsCreatedByMe(requestParameters: GetApprovalsCreatedByMeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ApprovalsCreatedByMeGetResponseBodyItem>>>;
    getApprovalsCreatedByMe(requestParameters: GetApprovalsCreatedByMeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ApprovalsCreatedByMeGetResponseBodyItem>>>;
    getApprovalsCreatedByMeUrl(requestParameters: GetApprovalsCreatedByMeRequestParams): string;
    postApprovalRecord(requestParameters: PostApprovalRecordRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ApprovalPostResponseBody>;
    postApprovalRecord(requestParameters: PostApprovalRecordRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ApprovalPostResponseBody>>;
    postApprovalRecord(requestParameters: PostApprovalRecordRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ApprovalPostResponseBody>>;
    postApprovalRecordUrl(requestParameters: PostApprovalRecordRequestParams): string;
    postRejectionRecord(requestParameters: PostRejectionRecordRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postRejectionRecord(requestParameters: PostRejectionRecordRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postRejectionRecord(requestParameters: PostRejectionRecordRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postRejectionRecordUrl(requestParameters: PostRejectionRecordRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ApprovalsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ApprovalsHttpService>;
}
