import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AccountIdentifierType } from '../model/models';
import { ContactDeleteResponseBody } from '../model/models';
import { ContactGetResponseBody } from '../model/models';
import { ContactPutRequestBody } from '../model/models';
import { ContactPutResponseBody } from '../model/models';
import { ContactsGetResponseBodyItem } from '../model/models';
import { ContactsPostFilterRequestBody } from '../model/models';
import { ContactsPostRequestBody } from '../model/models';
import { ContactsPostResponseBody } from '../model/models';
import { ContactManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteContactRequestParams {
    ["contactId"]: string;
}
export interface GetContactRequestParams {
    ["contactId"]: string;
}
export interface GetContactsRequestParams {
    ["from"]?: number;
    ["size"]?: number;
    ["query"]?: string;
    ["accountIdentifierTypes"]?: Array<AccountIdentifierType>;
    ["targetSaId"]?: string;
    ["businessFunctions"]?: Array<string>;
    ["arrangementId"]?: string;
    ["privilege"]?: string;
}
export interface PostContactsRequestParams {
    ["contactsPostRequestBody"]?: ContactsPostRequestBody;
}
export interface PostContactsFilterRequestParams {
    ["from"]?: number;
    ["size"]?: number;
    ["query"]?: string;
    ["targetSaId"]?: string;
    ["contactsPostFilterRequestBody"]?: ContactsPostFilterRequestBody;
}
export interface PutContactRequestParams {
    ["contactId"]: string;
    ["contactPutRequestBody"]?: ContactPutRequestBody;
}
export declare class ContactsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ContactManagerConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ContactManagerConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteContact(requestParameters: DeleteContactRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ContactDeleteResponseBody>;
    deleteContact(requestParameters: DeleteContactRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ContactDeleteResponseBody>>;
    deleteContact(requestParameters: DeleteContactRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ContactDeleteResponseBody>>;
    deleteContactUrl(requestParameters: DeleteContactRequestParams): string;
    getContact(requestParameters: GetContactRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ContactGetResponseBody>;
    getContact(requestParameters: GetContactRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ContactGetResponseBody>>;
    getContact(requestParameters: GetContactRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ContactGetResponseBody>>;
    getContactUrl(requestParameters: GetContactRequestParams): string;
    getContacts(requestParameters: GetContactsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ContactsGetResponseBodyItem>>;
    getContacts(requestParameters: GetContactsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ContactsGetResponseBodyItem>>>;
    getContacts(requestParameters: GetContactsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ContactsGetResponseBodyItem>>>;
    getContactsUrl(requestParameters: GetContactsRequestParams): string;
    postContacts(requestParameters: PostContactsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ContactsPostResponseBody>;
    postContacts(requestParameters: PostContactsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ContactsPostResponseBody>>;
    postContacts(requestParameters: PostContactsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ContactsPostResponseBody>>;
    postContactsUrl(requestParameters: PostContactsRequestParams): string;
    postContactsFilter(requestParameters: PostContactsFilterRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ContactsGetResponseBodyItem>>;
    postContactsFilter(requestParameters: PostContactsFilterRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ContactsGetResponseBodyItem>>>;
    postContactsFilter(requestParameters: PostContactsFilterRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ContactsGetResponseBodyItem>>>;
    postContactsFilterUrl(requestParameters: PostContactsFilterRequestParams): string;
    putContact(requestParameters: PutContactRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ContactPutResponseBody>;
    putContact(requestParameters: PutContactRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ContactPutResponseBody>>;
    putContact(requestParameters: PutContactRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ContactPutResponseBody>>;
    putContactUrl(requestParameters: PutContactRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ContactsHttpService>;
}
