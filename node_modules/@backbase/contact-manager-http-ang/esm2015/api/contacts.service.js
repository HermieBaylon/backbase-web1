import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { CONTACT_MANAGER_BASE_PATH } from '../variables';
import { ContactManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class ContactsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ContactManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteContact(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteContactUrl(requestParameters) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');
        }
        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;
    }
    getContact(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling getContact.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getContactUrl(requestParameters) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling getContact.');
        }
        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;
    }
    getContacts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _targetSaId = requestParameters["targetSaId"];
        const _businessFunctions = requestParameters["businessFunctions"];
        const _arrangementId = requestParameters["arrangementId"];
        const _privilege = requestParameters["privilege"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_targetSaId !== undefined && _targetSaId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
        }
        if (_businessFunctions) {
            _businessFunctions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');
            });
        }
        if (_arrangementId !== undefined && _arrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/contacts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getContactsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _targetSaId = requestParameters["targetSaId"];
        const _businessFunctions = requestParameters["businessFunctions"];
        const _arrangementId = requestParameters["arrangementId"];
        const _privilege = requestParameters["privilege"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_targetSaId !== undefined && _targetSaId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
        }
        if (_businessFunctions) {
            _businessFunctions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');
            });
        }
        if (_arrangementId !== undefined && _arrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/contacts${queryString ? `?${queryString}` : ''}`;
    }
    postContacts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contactsPostRequestBody = requestParameters["contactsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/contacts`, _contactsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postContactsUrl(requestParameters) {
        const _contactsPostRequestBody = requestParameters["contactsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/contacts`;
    }
    postContactsFilter(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _targetSaId = requestParameters["targetSaId"];
        const _contactsPostFilterRequestBody = requestParameters["contactsPostFilterRequestBody"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_targetSaId !== undefined && _targetSaId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/contacts/filter`, _contactsPostFilterRequestBody, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postContactsFilterUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _targetSaId = requestParameters["targetSaId"];
        const _contactsPostFilterRequestBody = requestParameters["contactsPostFilterRequestBody"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_targetSaId !== undefined && _targetSaId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/contacts/filter${queryString ? `?${queryString}` : ''}`;
    }
    putContact(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling putContact.');
        }
        const _contactPutRequestBody = requestParameters["contactPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, _contactPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putContactUrl(requestParameters) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling putContact.');
        }
        const _contactPutRequestBody = requestParameters["contactPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;
    }
}
ContactsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactsHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: i2.ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ContactsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONTACT_MANAGER_BASE_PATH]
                }] }, { type: i2.ContactManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,