import { createMocks } from '@backbase/foundation-ang/data-http';
export const IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/iban-restrictions/countries/{code}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "ibanLength": 18
                }
            },
        ]
    }]);
export const IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/iban-restrictions/countries",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "countryCode": "NL",
                        "ibanLength": 18
                    }, {
                        "countryCode": "TR",
                        "ibanLength": 26
                    }]
            },
        ]
    }]);
export const IbanRestrictionsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/iban-restrictions/countries/{code}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "ibanLength": 18
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/iban-restrictions/countries",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "countryCode": "NL",
                        "ibanLength": 18
                    }, {
                        "countryCode": "TR",
                        "ibanLength": 26
                    }]
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWJhblJlc3RyaWN0aW9ucy5zZXJ2aWNlLm1vY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYXBpL2liYW5SZXN0cmljdGlvbnMuc2VydmljZS5tb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFNakUsTUFBTSxDQUFDLE1BQU0sMERBQTBELEdBQWEsV0FBVyxDQUFDLENBQUM7UUFDekYsVUFBVSxFQUFFLG1EQUFtRDtRQUMvRCxNQUFNLEVBQUUsS0FBSztRQUNiLFNBQVMsRUFBRTtZQUNIO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDeEIsWUFBWSxFQUFHLEVBQUU7aUJBQ2xCO2FBQ2dCO1NBQ1o7S0FDSixDQUFDLENBQUMsQ0FBQztBQUlKLE1BQU0sQ0FBQyxNQUFNLDJEQUEyRCxHQUFhLFdBQVcsQ0FBQyxDQUFDO1FBQzFGLFVBQVUsRUFBRSw0Q0FBNEM7UUFDeEQsTUFBTSxFQUFFLEtBQUs7UUFDYixTQUFTLEVBQUU7WUFDSDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUUsQ0FBRTt3QkFDMUIsYUFBYSxFQUFHLElBQUk7d0JBQ3BCLFlBQVksRUFBRyxFQUFFO3FCQUNsQixFQUFFO3dCQUNELGFBQWEsRUFBRyxJQUFJO3dCQUNwQixZQUFZLEVBQUcsRUFBRTtxQkFDbEIsQ0FBRTthQUNjO1NBQ1o7S0FDSixDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLHdDQUF3QyxHQUFhLFdBQVcsQ0FDekU7SUFDQTtRQUNJLFVBQVUsRUFBRSxtREFBbUQ7UUFDL0QsTUFBTSxFQUFFLEtBQUs7UUFDYixTQUFTLEVBQUU7WUFFUDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3BCLFlBQVksRUFBRyxFQUFFO2lCQUNsQjthQUNZO1NBS1I7S0FDSjtJQUNHO1FBQ0ksVUFBVSxFQUFFLDRDQUE0QztRQUN4RCxNQUFNLEVBQUUsS0FBSztRQUNiLFNBQVMsRUFBRTtZQUVQO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRSxDQUFFO3dCQUN0QixhQUFhLEVBQUcsSUFBSTt3QkFDcEIsWUFBWSxFQUFHLEVBQUU7cUJBQ2xCLEVBQUU7d0JBQ0QsYUFBYSxFQUFHLElBQUk7d0JBQ3BCLFlBQVksRUFBRyxFQUFFO3FCQUNsQixDQUFFO2FBQ1U7U0FLUjtLQUNKO0NBQ0EsQ0FDQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTW9ja3MgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZGF0YS1odHRwJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuKiBNb2NrcyBwcm92aWRlciBmb3IgL2NsaWVudC1hcGkvdjIvaWJhbi1yZXN0cmljdGlvbnMvY291bnRyaWVzL3tjb2RlfSBVUkwgcGF0dGVyblxuKi9cbmV4cG9ydCBjb25zdCBJYmFuUmVzdHJpY3Rpb25zSHR0cFNlcnZpY2VHZXRJYmFuUmVzdHJpY3Rpb25Nb2Nrc1Byb3ZpZGVyOiBQcm92aWRlciA9IGNyZWF0ZU1vY2tzKFt7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2NsaWVudC1hcGkvdjIvaWJhbi1yZXN0cmljdGlvbnMvY291bnRyaWVzL3tjb2RlfVwiLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHJlc3BvbnNlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJpYmFuTGVuZ3RoXCIgOiAxOFxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgXVxufV0pO1xuLyoqXG4qIE1vY2tzIHByb3ZpZGVyIGZvciAvY2xpZW50LWFwaS92Mi9pYmFuLXJlc3RyaWN0aW9ucy9jb3VudHJpZXMgVVJMIHBhdHRlcm5cbiovXG5leHBvcnQgY29uc3QgSWJhblJlc3RyaWN0aW9uc0h0dHBTZXJ2aWNlR2V0SWJhblJlc3RyaWN0aW9uc01vY2tzUHJvdmlkZXI6IFByb3ZpZGVyID0gY3JlYXRlTW9ja3MoW3tcbiAgICAgICAgdXJsUGF0dGVybjogXCIvY2xpZW50LWFwaS92Mi9pYmFuLXJlc3RyaWN0aW9ucy9jb3VudHJpZXNcIixcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICByZXNwb25zZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBbIHtcbiAgXCJjb3VudHJ5Q29kZVwiIDogXCJOTFwiLFxuICBcImliYW5MZW5ndGhcIiA6IDE4XG59LCB7XG4gIFwiY291bnRyeUNvZGVcIiA6IFwiVFJcIixcbiAgXCJpYmFuTGVuZ3RoXCIgOiAyNlxufSBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICBdXG59XSk7XG5cbmV4cG9ydCBjb25zdCBJYmFuUmVzdHJpY3Rpb25zSHR0cFNlcnZpY2VNb2Nrc1Byb3ZpZGVyOiBQcm92aWRlciA9IGNyZWF0ZU1vY2tzKFxuICAgIFtcbiAgICB7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2NsaWVudC1hcGkvdjIvaWJhbi1yZXN0cmljdGlvbnMvY291bnRyaWVzL3tjb2RlfVwiLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHJlc3BvbnNlczogW1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcImliYW5MZW5ndGhcIiA6IDE4XG59XG4gICAgICAgICAgICB9LFxuXG5cblxuXG4gICAgXVxufSxcbiAgICB7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2NsaWVudC1hcGkvdjIvaWJhbi1yZXN0cmljdGlvbnMvY291bnRyaWVzXCIsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgcmVzcG9uc2VzOiBbXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgICAgICBib2R5OiBbIHtcbiAgXCJjb3VudHJ5Q29kZVwiIDogXCJOTFwiLFxuICBcImliYW5MZW5ndGhcIiA6IDE4XG59LCB7XG4gIFwiY291bnRyeUNvZGVcIiA6IFwiVFJcIixcbiAgXCJpYmFuTGVuZ3RoXCIgOiAyNlxufSBdXG4gICAgICAgICAgICB9LFxuXG5cblxuXG4gICAgXVxufSxcbl1cbik7XG5cblxuIl19