import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { CONTACT_MANAGER_BASE_PATH } from '../variables';
import { ContactManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class ApprovalsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ContactManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteApprovalRequest(requestParameters, observe = 'body', reportProgress = false, options) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteApprovalRequestUrl(requestParameters) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');
        }
        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`;
    }
    getApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _sort = requestParameters["sort"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _sort = requestParameters["sort"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/approvals${queryString ? `?${queryString}` : ''}`;
    }
    getApprovalsCreatedByMe(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _sort = requestParameters["sort"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals/me`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalsCreatedByMeUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _sort = requestParameters["sort"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/approvals/me${queryString ? `?${queryString}` : ''}`;
    }
    postApprovalRecord(requestParameters, observe = 'body', reportProgress = false, options) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');
        }
        const _approvalPostRequestBody = requestParameters["approvalPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`, _approvalPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postApprovalRecordUrl(requestParameters) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');
        }
        const _approvalPostRequestBody = requestParameters["approvalPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`;
    }
    postRejectionRecord(requestParameters, observe = 'body', reportProgress = false, options) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');
        }
        const _rejectionPostRequestBody = requestParameters["rejectionPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`, _rejectionPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postRejectionRecordUrl(requestParameters) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');
        }
        const _rejectionPostRequestBody = requestParameters["rejectionPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`;
    }
}
ApprovalsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: i2.ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ApprovalsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONTACT_MANAGER_BASE_PATH]
                }] }, { type: i2.ContactManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,