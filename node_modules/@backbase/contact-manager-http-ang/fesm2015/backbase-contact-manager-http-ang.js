import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const AccessContextScope = {
    SA: 'SA',
    LE: 'LE',
    USER: 'USER'
};

const AccountIdentifierType = {
    IBAN: 'IBAN',
    ACCOUNTNUMBER: 'ACCOUNT_NUMBER',
    PHONENUMBER: 'PHONE_NUMBER',
    EMAIL: 'EMAIL'
};

const ActiveContactStatus = {
    ACTIVE: 'ACTIVE',
    PENDINGAPPROVAL: 'PENDING_APPROVAL'
};

const ApprovalRequestAction = {
    CREATE: 'CREATE',
    UPDATE: 'UPDATE',
    DELETE: 'DELETE'
};

const ApprovalRequestIndicator = {
    APPROVALREQUIRED: 'APPROVAL_REQUIRED',
    REQUESTACCEPTED: 'REQUEST_ACCEPTED'
};

const ApprovalRequestStatus = {
    ENTERED: 'ENTERED',
    REJECTED: 'REJECTED'
};

const ApprovalResultStatus = {
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED'
};

const ApprovalSort = {
    STATUS: 'STATUS',
    NAME: 'NAME',
    ACTION: 'ACTION',
    CREATIONTIME: 'CREATION_TIME'
};

const ApprovalStatus = {
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED'
};

const RecordStatus = {
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED'
};

const SortDirection = {
    ASC: 'ASC',
    DESC: 'DESC'
};

const CONTACT_MANAGER_BASE_PATH = new InjectionToken('CONTACT_MANAGER_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class ContactManagerConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module ContactManagerConfiguration');

class ContactManagerApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('ContactManagerApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: ContactManagerApiModule,
            providers: [{ provide: ContactManagerConfiguration, useFactory: configurationFactory }]
        };
    }
}
ContactManagerApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactManagerApiModule, deps: [{ token: ContactManagerApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: ContactManagerConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
ContactManagerApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactManagerApiModule });
ContactManagerApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactManagerApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactManagerApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: ContactManagerApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: ContactManagerConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class ApprovalsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ContactManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteApprovalRequest(requestParameters, observe = 'body', reportProgress = false, options) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteApprovalRequestUrl(requestParameters) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');
        }
        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`;
    }
    getApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _sort = requestParameters["sort"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _sort = requestParameters["sort"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/approvals${queryString ? `?${queryString}` : ''}`;
    }
    getApprovalsCreatedByMe(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _sort = requestParameters["sort"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals/me`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalsCreatedByMeUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _sort = requestParameters["sort"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/approvals/me${queryString ? `?${queryString}` : ''}`;
    }
    postApprovalRecord(requestParameters, observe = 'body', reportProgress = false, options) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');
        }
        const _approvalPostRequestBody = requestParameters["approvalPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`, _approvalPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postApprovalRecordUrl(requestParameters) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');
        }
        const _approvalPostRequestBody = requestParameters["approvalPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`;
    }
    postRejectionRecord(requestParameters, observe = 'body', reportProgress = false, options) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');
        }
        const _rejectionPostRequestBody = requestParameters["rejectionPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`, _rejectionPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postRejectionRecordUrl(requestParameters) {
        const _requestId = requestParameters["requestId"];
        if (_requestId === null || _requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');
        }
        const _rejectionPostRequestBody = requestParameters["rejectionPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`;
    }
}
ApprovalsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ApprovalsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONTACT_MANAGER_BASE_PATH]
                }] }, { type: ContactManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ApprovalsHttpServiceDeleteApprovalRequestMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals/{requestId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
        ]
    }]);
const ApprovalsHttpServiceGetApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "0855e686-d31e-4216-b3dd-5d66161d5312",
                        "creatorBbId": "john@example.com",
                        "data": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "John Doe",
                            "alias": "John",
                            "category": "Employee",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "john@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "QA Bank",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL",
                                    "accountHolderAddressLine1": "",
                                    "accountHolderAddressLine2": "",
                                    "accountHolderStreetName": "Woestduinstraat 114-3",
                                    "accountHolderTown": "Amsterdam",
                                    "accountHolderPostCode": "1059 SP",
                                    "accountHolderCountrySubDivision": "North Holland",
                                    "accountHolderCountry": "NL"
                                }],
                            "accessContextScope": "SA"
                        },
                        "creationTime": "2017-05-12T14:33:13.452Z",
                        "action": "CREATE",
                        "status": "ENTERED"
                    }, {
                        "id": "55ce2962-7c04-41e2-9bb9-84208342f321",
                        "creatorBbId": "john@example.com",
                        "data": {
                            "id": "aa7cea7f-38ed-4c09-ab38-b3903f1e40ca",
                            "name": "Judy Doe",
                            "alias": "Judy",
                            "category": "VP",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "judy@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE"
                        },
                        "creationTime": "2018-05-12T14:33:13.452Z",
                        "action": "UPDATE",
                        "status": "ENTERED"
                    }, {
                        "id": "cf40d556-4634-4e96-8976-7fb3764444e9",
                        "creatorBbId": "john@example.com",
                        "data": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "category": "Manager",
                            "contactPerson": "John Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "jane@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE"
                        },
                        "creationTime": "2018-05-21T14:33:13.452Z",
                        "action": "DELETE",
                        "status": "ENTERED"
                    }]
            },
        ]
    }]);
const ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals/me",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc",
                        "creatorBbId": "john@example.com",
                        "creationTime": "2017-05-12T14:33:13Z",
                        "action": "CREATE",
                        "status": "ENTERED",
                        "data": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "John Doe",
                            "alias": "John",
                            "category": "Employee",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "john@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "USER"
                        }
                    }, {
                        "id": "55ce2962-7c04-41e2-9bb9-84208342f321",
                        "creatorBbId": "john@example.com",
                        "creationTime": "2018-05-12T14:33:13.452Z",
                        "action": "UPDATE",
                        "status": "REJECTED",
                        "data": {
                            "id": "aa7cea7f-38ed-4c09-ab38-b3903f1e40ca",
                            "name": "Judy Doe",
                            "alias": "Judy",
                            "category": "VP",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "judy@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE"
                        }
                    }, {
                        "id": "cf40d556-4634-4e96-8976-7fb3764444e9",
                        "creatorBbId": "john@example.com",
                        "creationTime": "2018-05-21T14:33:13.452Z",
                        "action": "DELETE",
                        "status": "ENTERED",
                        "data": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "category": "Manager",
                            "contactPerson": "John Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "jane@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE"
                        }
                    }]
            },
        ]
    }]);
const ApprovalsHttpServicePostApprovalRecordMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals/{requestId}/approvalRecords",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "status": "PENDING"
                }
            },
            {
                status: 201,
                body: {
                    "status": "APPROVED"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ContactAlreadyCreated",
                    "message": "Contact has already been created, please refresh"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ContactAlreadyUpdated",
                    "message": "Contact has already been updated, please refresh"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ContactAlreadyDeleted",
                    "message": "Contact has already been deleted, please refresh"
                }
            },
        ]
    }]);
const ApprovalsHttpServicePostRejectionRecordMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals/{requestId}/rejectionRecords",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 409,
                body: {
                    "key": "ContactAlreadyRejected",
                    "message": "Contact request has already been rejected, please refresh"
                }
            },
        ]
    }]);
const ApprovalsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approvals/{requestId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "0855e686-d31e-4216-b3dd-5d66161d5312",
                        "creatorBbId": "john@example.com",
                        "data": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "John Doe",
                            "alias": "John",
                            "category": "Employee",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "john@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "QA Bank",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL",
                                    "accountHolderAddressLine1": "",
                                    "accountHolderAddressLine2": "",
                                    "accountHolderStreetName": "Woestduinstraat 114-3",
                                    "accountHolderTown": "Amsterdam",
                                    "accountHolderPostCode": "1059 SP",
                                    "accountHolderCountrySubDivision": "North Holland",
                                    "accountHolderCountry": "NL"
                                }],
                            "accessContextScope": "SA"
                        },
                        "creationTime": "2017-05-12T14:33:13.452Z",
                        "action": "CREATE",
                        "status": "ENTERED"
                    }, {
                        "id": "55ce2962-7c04-41e2-9bb9-84208342f321",
                        "creatorBbId": "john@example.com",
                        "data": {
                            "id": "aa7cea7f-38ed-4c09-ab38-b3903f1e40ca",
                            "name": "Judy Doe",
                            "alias": "Judy",
                            "category": "VP",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "judy@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE"
                        },
                        "creationTime": "2018-05-12T14:33:13.452Z",
                        "action": "UPDATE",
                        "status": "ENTERED"
                    }, {
                        "id": "cf40d556-4634-4e96-8976-7fb3764444e9",
                        "creatorBbId": "john@example.com",
                        "data": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "category": "Manager",
                            "contactPerson": "John Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "jane@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE"
                        },
                        "creationTime": "2018-05-21T14:33:13.452Z",
                        "action": "DELETE",
                        "status": "ENTERED"
                    }]
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approvals/me",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc",
                        "creatorBbId": "john@example.com",
                        "creationTime": "2017-05-12T14:33:13Z",
                        "action": "CREATE",
                        "status": "ENTERED",
                        "data": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "John Doe",
                            "alias": "John",
                            "category": "Employee",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "john@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "USER"
                        }
                    }, {
                        "id": "55ce2962-7c04-41e2-9bb9-84208342f321",
                        "creatorBbId": "john@example.com",
                        "creationTime": "2018-05-12T14:33:13.452Z",
                        "action": "UPDATE",
                        "status": "REJECTED",
                        "data": {
                            "id": "aa7cea7f-38ed-4c09-ab38-b3903f1e40ca",
                            "name": "Judy Doe",
                            "alias": "Judy",
                            "category": "VP",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "judy@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE"
                        }
                    }, {
                        "id": "cf40d556-4634-4e96-8976-7fb3764444e9",
                        "creatorBbId": "john@example.com",
                        "creationTime": "2018-05-21T14:33:13.452Z",
                        "action": "DELETE",
                        "status": "ENTERED",
                        "data": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "category": "Manager",
                            "contactPerson": "John Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "jane@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE"
                        }
                    }]
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approvals/{requestId}/approvalRecords",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "status": "PENDING"
                }
            },
            {
                status: 201,
                body: {
                    "status": "APPROVED"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ContactAlreadyCreated",
                    "message": "Contact has already been created, please refresh"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ContactAlreadyUpdated",
                    "message": "Contact has already been updated, please refresh"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ContactAlreadyDeleted",
                    "message": "Contact has already been deleted, please refresh"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approvals/{requestId}/rejectionRecords",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 409,
                body: {
                    "key": "ContactAlreadyRejected",
                    "message": "Contact request has already been rejected, please refresh"
                }
            },
        ]
    },
]);

class ContactsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ContactManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteContact(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteContactUrl(requestParameters) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');
        }
        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;
    }
    getContact(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling getContact.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getContactUrl(requestParameters) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling getContact.');
        }
        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;
    }
    getContacts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _targetSaId = requestParameters["targetSaId"];
        const _businessFunctions = requestParameters["businessFunctions"];
        const _arrangementId = requestParameters["arrangementId"];
        const _privilege = requestParameters["privilege"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_targetSaId !== undefined && _targetSaId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
        }
        if (_businessFunctions) {
            _businessFunctions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');
            });
        }
        if (_arrangementId !== undefined && _arrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/contacts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getContactsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
        const _targetSaId = requestParameters["targetSaId"];
        const _businessFunctions = requestParameters["businessFunctions"];
        const _arrangementId = requestParameters["arrangementId"];
        const _privilege = requestParameters["privilege"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_accountIdentifierTypes) {
            _accountIdentifierTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
            });
        }
        if (_targetSaId !== undefined && _targetSaId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
        }
        if (_businessFunctions) {
            _businessFunctions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');
            });
        }
        if (_arrangementId !== undefined && _arrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/contacts${queryString ? `?${queryString}` : ''}`;
    }
    postContacts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contactsPostRequestBody = requestParameters["contactsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/contacts`, _contactsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postContactsUrl(requestParameters) {
        const _contactsPostRequestBody = requestParameters["contactsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/contacts`;
    }
    postContactsFilter(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _targetSaId = requestParameters["targetSaId"];
        const _contactsPostFilterRequestBody = requestParameters["contactsPostFilterRequestBody"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_targetSaId !== undefined && _targetSaId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/contacts/filter`, _contactsPostFilterRequestBody, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postContactsFilterUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _query = requestParameters["query"];
        const _targetSaId = requestParameters["targetSaId"];
        const _contactsPostFilterRequestBody = requestParameters["contactsPostFilterRequestBody"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_targetSaId !== undefined && _targetSaId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/contacts/filter${queryString ? `?${queryString}` : ''}`;
    }
    putContact(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling putContact.');
        }
        const _contactPutRequestBody = requestParameters["contactPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, _contactPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putContactUrl(requestParameters) {
        const _contactId = requestParameters["contactId"];
        if (_contactId === null || _contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling putContact.');
        }
        const _contactPutRequestBody = requestParameters["contactPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;
    }
}
ContactsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactsHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ContactsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONTACT_MANAGER_BASE_PATH]
                }] }, { type: ContactManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ContactsHttpServiceDeleteContactMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/contacts/{contactId}",
        method: "DELETE",
        responses: [
            {
                status: 202,
                body: {
                    "status": "REQUEST_ACCEPTED"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ApprovalAlreadyExistForContact",
                    "message": "Approval request already exist with this contact."
                }
            },
        ]
    }]);
const ContactsHttpServiceGetContactMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/contacts/{contactId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                    "name": "John Doe",
                    "alias": "John",
                    "category": "Employee",
                    "contactPerson": "Jane Doe",
                    "phoneNumber": "055512345678",
                    "emailId": "john@example.com",
                    "addressLine1": "Backbase enterprise",
                    "addressLine2": "",
                    "streetName": "Jacob Bontiusplaats 9",
                    "town": "Amsterdam",
                    "postCode": "1018 LL",
                    "countrySubDivision": "North Holland",
                    "country": "NL",
                    "accounts": [{
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "accountType": "SAVINGS",
                            "IBAN": "FI21 1234 5600 0007 85",
                            "bankName": "Test Bank",
                            "bankAddressLine1": "Test Bank Co",
                            "bankAddressLine2": "",
                            "bankStreetName": "Jodenbreestraat 96",
                            "bankTown": "Amsterdam",
                            "bankPostCode": "1011NS",
                            "bankCountrySubDivision": "North Holland",
                            "bankCountry": "NL",
                            "accountHolderAddressLine1": "Backbase enterprise",
                            "accountHolderAddressLine2": "",
                            "accountHolderStreetName": "Jacob Bontiusplaats 9",
                            "accountHolderTown": "Amsterdam",
                            "accountHolderPostCode": "1018 LL",
                            "accountHolderCountrySubDivision": "North Holland",
                            "accountHolderCountry": "NL"
                        }],
                    "accessContextScope": "USER",
                    "activeStatus": "ACTIVE"
                }
            },
        ]
    }]);
const ContactsHttpServiceGetContactsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/contacts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                        "name": "John Doe",
                        "alias": "John",
                        "category": "Employee",
                        "contactPerson": "Jane Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "john@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "QA Bank",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL",
                                "accountHolderAddressLine1": "",
                                "accountHolderAddressLine2": "",
                                "accountHolderStreetName": "Woestduinstraat 114-3",
                                "accountHolderTown": "Amsterdam",
                                "accountHolderPostCode": "1059 SP",
                                "accountHolderCountrySubDivision": "North Holland",
                                "accountHolderCountry": "NL"
                            }],
                        "accessContextScope": "SA",
                        "activeStatus": "ACTIVE"
                    }, {
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                        "name": "Jane Doe",
                        "alias": "Jane",
                        "category": "Manager",
                        "contactPerson": "John Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "jane@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "Test Bank Co",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL"
                            }],
                        "accessContextScope": "LE",
                        "activeStatus": "PENDING_APPROVAL"
                    }]
            },
        ]
    }]);
const ContactsHttpServicePostContactsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/contacts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "status": "ACTIVE"
                }
            },
            {
                status: 202,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "status": "ACTIVE"
                }
            },
        ]
    }]);
const ContactsHttpServicePostContactsFilterMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/contacts/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                        "name": "John Doe",
                        "alias": "John",
                        "category": "Employee",
                        "contactPerson": "Jane Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "john@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "QA Bank",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL",
                                "accountHolderAddressLine1": "",
                                "accountHolderAddressLine2": "",
                                "accountHolderStreetName": "Woestduinstraat 114-3",
                                "accountHolderTown": "Amsterdam",
                                "accountHolderPostCode": "1059 SP",
                                "accountHolderCountrySubDivision": "North Holland",
                                "accountHolderCountry": "NL"
                            }],
                        "accessContextScope": "SA",
                        "activeStatus": "ACTIVE"
                    }, {
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                        "name": "Jane Doe",
                        "alias": "Jane",
                        "category": "Manager",
                        "contactPerson": "John Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "jane@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "Test Bank Co",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL"
                            }],
                        "accessContextScope": "LE",
                        "activeStatus": "PENDING_APPROVAL"
                    }]
            },
        ]
    }]);
const ContactsHttpServicePutContactMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/contacts/{contactId}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "status": "REQUEST_ACCEPTED"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ApprovalAlreadyExistForContact",
                    "message": "Approval request already exist with this contact."
                }
            },
        ]
    }]);
const ContactsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/contacts/{contactId}",
        method: "DELETE",
        responses: [
            {
                status: 202,
                body: {
                    "status": "REQUEST_ACCEPTED"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ApprovalAlreadyExistForContact",
                    "message": "Approval request already exist with this contact."
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/contacts/{contactId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                    "name": "John Doe",
                    "alias": "John",
                    "category": "Employee",
                    "contactPerson": "Jane Doe",
                    "phoneNumber": "055512345678",
                    "emailId": "john@example.com",
                    "addressLine1": "Backbase enterprise",
                    "addressLine2": "",
                    "streetName": "Jacob Bontiusplaats 9",
                    "town": "Amsterdam",
                    "postCode": "1018 LL",
                    "countrySubDivision": "North Holland",
                    "country": "NL",
                    "accounts": [{
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "accountType": "SAVINGS",
                            "IBAN": "FI21 1234 5600 0007 85",
                            "bankName": "Test Bank",
                            "bankAddressLine1": "Test Bank Co",
                            "bankAddressLine2": "",
                            "bankStreetName": "Jodenbreestraat 96",
                            "bankTown": "Amsterdam",
                            "bankPostCode": "1011NS",
                            "bankCountrySubDivision": "North Holland",
                            "bankCountry": "NL",
                            "accountHolderAddressLine1": "Backbase enterprise",
                            "accountHolderAddressLine2": "",
                            "accountHolderStreetName": "Jacob Bontiusplaats 9",
                            "accountHolderTown": "Amsterdam",
                            "accountHolderPostCode": "1018 LL",
                            "accountHolderCountrySubDivision": "North Holland",
                            "accountHolderCountry": "NL"
                        }],
                    "accessContextScope": "USER",
                    "activeStatus": "ACTIVE"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/contacts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                        "name": "John Doe",
                        "alias": "John",
                        "category": "Employee",
                        "contactPerson": "Jane Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "john@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "QA Bank",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL",
                                "accountHolderAddressLine1": "",
                                "accountHolderAddressLine2": "",
                                "accountHolderStreetName": "Woestduinstraat 114-3",
                                "accountHolderTown": "Amsterdam",
                                "accountHolderPostCode": "1059 SP",
                                "accountHolderCountrySubDivision": "North Holland",
                                "accountHolderCountry": "NL"
                            }],
                        "accessContextScope": "SA",
                        "activeStatus": "ACTIVE"
                    }, {
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                        "name": "Jane Doe",
                        "alias": "Jane",
                        "category": "Manager",
                        "contactPerson": "John Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "jane@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "Test Bank Co",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL"
                            }],
                        "accessContextScope": "LE",
                        "activeStatus": "PENDING_APPROVAL"
                    }]
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/contacts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "status": "ACTIVE"
                }
            },
            {
                status: 202,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "status": "ACTIVE"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/contacts/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                        "name": "John Doe",
                        "alias": "John",
                        "category": "Employee",
                        "contactPerson": "Jane Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "john@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "QA Bank",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL",
                                "accountHolderAddressLine1": "",
                                "accountHolderAddressLine2": "",
                                "accountHolderStreetName": "Woestduinstraat 114-3",
                                "accountHolderTown": "Amsterdam",
                                "accountHolderPostCode": "1059 SP",
                                "accountHolderCountrySubDivision": "North Holland",
                                "accountHolderCountry": "NL"
                            }],
                        "accessContextScope": "SA",
                        "activeStatus": "ACTIVE"
                    }, {
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                        "name": "Jane Doe",
                        "alias": "Jane",
                        "category": "Manager",
                        "contactPerson": "John Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "jane@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "Test Bank Co",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL"
                            }],
                        "accessContextScope": "LE",
                        "activeStatus": "PENDING_APPROVAL"
                    }]
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/contacts/{contactId}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "status": "REQUEST_ACCEPTED"
                }
            },
            {
                status: 409,
                body: {
                    "key": "ApprovalAlreadyExistForContact",
                    "message": "Approval request already exist with this contact."
                }
            },
        ]
    },
]);

class IbanRestrictionsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ContactManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getIbanRestriction(requestParameters, observe = 'body', reportProgress = false, options) {
        const _code = requestParameters["code"];
        if (_code === null || _code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/iban-restrictions/countries/${encodeURIComponent(String(_code))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIbanRestrictionUrl(requestParameters) {
        const _code = requestParameters["code"];
        if (_code === null || _code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');
        }
        return `${this.configuration.basePath}/client-api/v2/iban-restrictions/countries/${encodeURIComponent(String(_code))}`;
    }
    getIbanRestrictions(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/iban-restrictions/countries`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIbanRestrictionsUrl() {
        return `${this.configuration.basePath}/client-api/v2/iban-restrictions/countries`;
    }
}
IbanRestrictionsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IbanRestrictionsHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
IbanRestrictionsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IbanRestrictionsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IbanRestrictionsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONTACT_MANAGER_BASE_PATH]
                }] }, { type: ContactManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/iban-restrictions/countries/{code}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "ibanLength": 18
                }
            },
        ]
    }]);
const IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/iban-restrictions/countries",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "countryCode": "NL",
                        "ibanLength": 18
                    }, {
                        "countryCode": "TR",
                        "ibanLength": 26
                    }]
            },
        ]
    }]);
const IbanRestrictionsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/iban-restrictions/countries/{code}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "ibanLength": 18
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/iban-restrictions/countries",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "countryCode": "NL",
                        "ibanLength": 18
                    }, {
                        "countryCode": "TR",
                        "ibanLength": 26
                    }]
            },
        ]
    },
]);

class SupportedCountriesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ContactManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getSupportedCountries(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/supported-countries`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSupportedCountriesUrl() {
        return `${this.configuration.basePath}/client-api/v2/supported-countries`;
    }
}
SupportedCountriesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SupportedCountriesHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
SupportedCountriesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SupportedCountriesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SupportedCountriesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONTACT_MANAGER_BASE_PATH]
                }] }, { type: ContactManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/supported-countries",
        method: "GET",
        responses: [
            {
                status: 200,
                body: ["AR", "AU", "AT", "BE", "BR", "CA", "CN", "CO", "HR", "CZ", "DK", "EC", "EG", "ET", "FR", "DE", "GR", "HN", "HK", "HU", "IN", "ID", "IE", "IT", "JM", "MY", "MX", "MA", "NA", "NL", "NZ", "NO", "PL", "PT", "RU", "SN"]
            },
        ]
    }]);
const SupportedCountriesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/supported-countries",
        method: "GET",
        responses: [
            {
                status: 200,
                body: ["AR", "AU", "AT", "BE", "BR", "CA", "CN", "CO", "HR", "CZ", "DK", "EC", "EG", "ET", "FR", "DE", "GR", "HN", "HK", "HU", "IN", "ID", "IE", "IT", "JM", "MY", "MX", "MA", "NA", "NL", "NZ", "NO", "PL", "PT", "RU", "SN"]
            },
        ]
    },
]);

export { AccessContextScope, AccountIdentifierType, ActiveContactStatus, ApprovalRequestAction, ApprovalRequestIndicator, ApprovalRequestStatus, ApprovalResultStatus, ApprovalSort, ApprovalStatus, ApprovalsHttpService, ApprovalsHttpServiceDeleteApprovalRequestMocksProvider, ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider, ApprovalsHttpServiceGetApprovalsMocksProvider, ApprovalsHttpServiceMocksProvider, ApprovalsHttpServicePostApprovalRecordMocksProvider, ApprovalsHttpServicePostRejectionRecordMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, CONTACT_MANAGER_BASE_PATH, ContactManagerApiModule, ContactManagerConfiguration, ContactsHttpService, ContactsHttpServiceDeleteContactMocksProvider, ContactsHttpServiceGetContactMocksProvider, ContactsHttpServiceGetContactsMocksProvider, ContactsHttpServiceMocksProvider, ContactsHttpServicePostContactsFilterMocksProvider, ContactsHttpServicePostContactsMocksProvider, ContactsHttpServicePutContactMocksProvider, IbanRestrictionsHttpService, IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider, IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider, IbanRestrictionsHttpServiceMocksProvider, RecordStatus, SortDirection, SupportedCountriesHttpService, SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider, SupportedCountriesHttpServiceMocksProvider };
//# sourceMappingURL=backbase-contact-manager-http-ang.js.map
