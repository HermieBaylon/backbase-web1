(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/contact-manager-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["contact-manager-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var AccessContextScope = {
        SA: 'SA',
        LE: 'LE',
        USER: 'USER'
    };

    var AccountIdentifierType = {
        IBAN: 'IBAN',
        ACCOUNTNUMBER: 'ACCOUNT_NUMBER',
        PHONENUMBER: 'PHONE_NUMBER',
        EMAIL: 'EMAIL'
    };

    var ActiveContactStatus = {
        ACTIVE: 'ACTIVE',
        PENDINGAPPROVAL: 'PENDING_APPROVAL'
    };

    var ApprovalRequestAction = {
        CREATE: 'CREATE',
        UPDATE: 'UPDATE',
        DELETE: 'DELETE'
    };

    var ApprovalRequestIndicator = {
        APPROVALREQUIRED: 'APPROVAL_REQUIRED',
        REQUESTACCEPTED: 'REQUEST_ACCEPTED'
    };

    var ApprovalRequestStatus = {
        ENTERED: 'ENTERED',
        REJECTED: 'REJECTED'
    };

    var ApprovalResultStatus = {
        PENDING: 'PENDING',
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED'
    };

    var ApprovalSort = {
        STATUS: 'STATUS',
        NAME: 'NAME',
        ACTION: 'ACTION',
        CREATIONTIME: 'CREATION_TIME'
    };

    var ApprovalStatus = {
        PENDING: 'PENDING',
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED'
    };

    var RecordStatus = {
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED'
    };

    var SortDirection = {
        ASC: 'ASC',
        DESC: 'DESC'
    };

    var CONTACT_MANAGER_BASE_PATH = new i0.InjectionToken('CONTACT_MANAGER_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var ContactManagerConfiguration = /** @class */ (function () {
        function ContactManagerConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        ContactManagerConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        ContactManagerConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        ContactManagerConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        ContactManagerConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return ContactManagerConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module ContactManagerConfiguration');

    var ContactManagerApiModule = /** @class */ (function () {
        function ContactManagerApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('ContactManagerApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        ContactManagerApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: ContactManagerApiModule,
                providers: [{ provide: ContactManagerConfiguration, useFactory: configurationFactory }]
            };
        };
        return ContactManagerApiModule;
    }());
    ContactManagerApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactManagerApiModule, deps: [{ token: ContactManagerApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: ContactManagerConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ContactManagerApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactManagerApiModule });
    ContactManagerApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactManagerApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactManagerApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: ContactManagerApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: ContactManagerConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var ApprovalsHttpService = /** @class */ (function () {
        function ApprovalsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ContactManagerConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ApprovalsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ApprovalsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ApprovalsHttpService.prototype.deleteApprovalRequest = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _requestId = requestParameters["requestId"];
            if (_requestId === null || _requestId === undefined) {
                throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/approvals/" + encodeURIComponent(String(_requestId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.deleteApprovalRequestUrl = function (requestParameters) {
            var _requestId = requestParameters["requestId"];
            if (_requestId === null || _requestId === undefined) {
                throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');
            }
            return this.configuration.basePath + "/client-api/v2/approvals/" + encodeURIComponent(String(_requestId));
        };
        ApprovalsHttpService.prototype.getApprovals = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
            var _sort = requestParameters["sort"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_accountIdentifierTypes) {
                _accountIdentifierTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
                });
            }
            if (_sort !== undefined && _sort !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/approvals", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getApprovalsUrl = function (requestParameters) {
            var _this = this;
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
            var _sort = requestParameters["sort"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_accountIdentifierTypes) {
                _accountIdentifierTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
                });
            }
            if (_sort !== undefined && _sort !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/approvals" + (queryString ? "?" + queryString : '');
        };
        ApprovalsHttpService.prototype.getApprovalsCreatedByMe = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
            var _sort = requestParameters["sort"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_accountIdentifierTypes) {
                _accountIdentifierTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
                });
            }
            if (_sort !== undefined && _sort !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/approvals/me", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getApprovalsCreatedByMeUrl = function (requestParameters) {
            var _this = this;
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
            var _sort = requestParameters["sort"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_accountIdentifierTypes) {
                _accountIdentifierTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
                });
            }
            if (_sort !== undefined && _sort !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/approvals/me" + (queryString ? "?" + queryString : '');
        };
        ApprovalsHttpService.prototype.postApprovalRecord = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _requestId = requestParameters["requestId"];
            if (_requestId === null || _requestId === undefined) {
                throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');
            }
            var _approvalPostRequestBody = requestParameters["approvalPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/approvals/" + encodeURIComponent(String(_requestId)) + "/approvalRecords", _approvalPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.postApprovalRecordUrl = function (requestParameters) {
            var _requestId = requestParameters["requestId"];
            if (_requestId === null || _requestId === undefined) {
                throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');
            }
            var _approvalPostRequestBody = requestParameters["approvalPostRequestBody"];
            return this.configuration.basePath + "/client-api/v2/approvals/" + encodeURIComponent(String(_requestId)) + "/approvalRecords";
        };
        ApprovalsHttpService.prototype.postRejectionRecord = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _requestId = requestParameters["requestId"];
            if (_requestId === null || _requestId === undefined) {
                throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');
            }
            var _rejectionPostRequestBody = requestParameters["rejectionPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/approvals/" + encodeURIComponent(String(_requestId)) + "/rejectionRecords", _rejectionPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.postRejectionRecordUrl = function (requestParameters) {
            var _requestId = requestParameters["requestId"];
            if (_requestId === null || _requestId === undefined) {
                throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');
            }
            var _rejectionPostRequestBody = requestParameters["rejectionPostRequestBody"];
            return this.configuration.basePath + "/client-api/v2/approvals/" + encodeURIComponent(String(_requestId)) + "/rejectionRecords";
        };
        return ApprovalsHttpService;
    }());
    ApprovalsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ApprovalsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONTACT_MANAGER_BASE_PATH]
                        }] }, { type: ContactManagerConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ApprovalsHttpServiceDeleteApprovalRequestMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals/{requestId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
            ]
        }]);
    var ApprovalsHttpServiceGetApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "0855e686-d31e-4216-b3dd-5d66161d5312",
                            "creatorBbId": "john@example.com",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                                "name": "John Doe",
                                "alias": "John",
                                "category": "Employee",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "john@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "QA Bank",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL",
                                        "accountHolderAddressLine1": "",
                                        "accountHolderAddressLine2": "",
                                        "accountHolderStreetName": "Woestduinstraat 114-3",
                                        "accountHolderTown": "Amsterdam",
                                        "accountHolderPostCode": "1059 SP",
                                        "accountHolderCountrySubDivision": "North Holland",
                                        "accountHolderCountry": "NL"
                                    }],
                                "accessContextScope": "SA"
                            },
                            "creationTime": "2017-05-12T14:33:13.452Z",
                            "action": "CREATE",
                            "status": "ENTERED"
                        }, {
                            "id": "55ce2962-7c04-41e2-9bb9-84208342f321",
                            "creatorBbId": "john@example.com",
                            "data": {
                                "id": "aa7cea7f-38ed-4c09-ab38-b3903f1e40ca",
                                "name": "Judy Doe",
                                "alias": "Judy",
                                "category": "VP",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "judy@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "LE"
                            },
                            "creationTime": "2018-05-12T14:33:13.452Z",
                            "action": "UPDATE",
                            "status": "ENTERED"
                        }, {
                            "id": "cf40d556-4634-4e96-8976-7fb3764444e9",
                            "creatorBbId": "john@example.com",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "category": "Manager",
                                "contactPerson": "John Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "jane@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "LE"
                            },
                            "creationTime": "2018-05-21T14:33:13.452Z",
                            "action": "DELETE",
                            "status": "ENTERED"
                        }]
                },
            ]
        }]);
    var ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals/me",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc",
                            "creatorBbId": "john@example.com",
                            "creationTime": "2017-05-12T14:33:13Z",
                            "action": "CREATE",
                            "status": "ENTERED",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                                "name": "John Doe",
                                "alias": "John",
                                "category": "Employee",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "john@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "USER"
                            }
                        }, {
                            "id": "55ce2962-7c04-41e2-9bb9-84208342f321",
                            "creatorBbId": "john@example.com",
                            "creationTime": "2018-05-12T14:33:13.452Z",
                            "action": "UPDATE",
                            "status": "REJECTED",
                            "data": {
                                "id": "aa7cea7f-38ed-4c09-ab38-b3903f1e40ca",
                                "name": "Judy Doe",
                                "alias": "Judy",
                                "category": "VP",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "judy@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "LE"
                            }
                        }, {
                            "id": "cf40d556-4634-4e96-8976-7fb3764444e9",
                            "creatorBbId": "john@example.com",
                            "creationTime": "2018-05-21T14:33:13.452Z",
                            "action": "DELETE",
                            "status": "ENTERED",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "category": "Manager",
                                "contactPerson": "John Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "jane@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "LE"
                            }
                        }]
                },
            ]
        }]);
    var ApprovalsHttpServicePostApprovalRecordMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals/{requestId}/approvalRecords",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "status": "PENDING"
                    }
                },
                {
                    status: 201,
                    body: {
                        "status": "APPROVED"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ContactAlreadyCreated",
                        "message": "Contact has already been created, please refresh"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ContactAlreadyUpdated",
                        "message": "Contact has already been updated, please refresh"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ContactAlreadyDeleted",
                        "message": "Contact has already been deleted, please refresh"
                    }
                },
            ]
        }]);
    var ApprovalsHttpServicePostRejectionRecordMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals/{requestId}/rejectionRecords",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 409,
                    body: {
                        "key": "ContactAlreadyRejected",
                        "message": "Contact request has already been rejected, please refresh"
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/approvals/{requestId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "0855e686-d31e-4216-b3dd-5d66161d5312",
                            "creatorBbId": "john@example.com",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                                "name": "John Doe",
                                "alias": "John",
                                "category": "Employee",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "john@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "QA Bank",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL",
                                        "accountHolderAddressLine1": "",
                                        "accountHolderAddressLine2": "",
                                        "accountHolderStreetName": "Woestduinstraat 114-3",
                                        "accountHolderTown": "Amsterdam",
                                        "accountHolderPostCode": "1059 SP",
                                        "accountHolderCountrySubDivision": "North Holland",
                                        "accountHolderCountry": "NL"
                                    }],
                                "accessContextScope": "SA"
                            },
                            "creationTime": "2017-05-12T14:33:13.452Z",
                            "action": "CREATE",
                            "status": "ENTERED"
                        }, {
                            "id": "55ce2962-7c04-41e2-9bb9-84208342f321",
                            "creatorBbId": "john@example.com",
                            "data": {
                                "id": "aa7cea7f-38ed-4c09-ab38-b3903f1e40ca",
                                "name": "Judy Doe",
                                "alias": "Judy",
                                "category": "VP",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "judy@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "LE"
                            },
                            "creationTime": "2018-05-12T14:33:13.452Z",
                            "action": "UPDATE",
                            "status": "ENTERED"
                        }, {
                            "id": "cf40d556-4634-4e96-8976-7fb3764444e9",
                            "creatorBbId": "john@example.com",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "category": "Manager",
                                "contactPerson": "John Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "jane@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "LE"
                            },
                            "creationTime": "2018-05-21T14:33:13.452Z",
                            "action": "DELETE",
                            "status": "ENTERED"
                        }]
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approvals/me",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc",
                            "creatorBbId": "john@example.com",
                            "creationTime": "2017-05-12T14:33:13Z",
                            "action": "CREATE",
                            "status": "ENTERED",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                                "name": "John Doe",
                                "alias": "John",
                                "category": "Employee",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "john@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "USER"
                            }
                        }, {
                            "id": "55ce2962-7c04-41e2-9bb9-84208342f321",
                            "creatorBbId": "john@example.com",
                            "creationTime": "2018-05-12T14:33:13.452Z",
                            "action": "UPDATE",
                            "status": "REJECTED",
                            "data": {
                                "id": "aa7cea7f-38ed-4c09-ab38-b3903f1e40ca",
                                "name": "Judy Doe",
                                "alias": "Judy",
                                "category": "VP",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "judy@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "LE"
                            }
                        }, {
                            "id": "cf40d556-4634-4e96-8976-7fb3764444e9",
                            "creatorBbId": "john@example.com",
                            "creationTime": "2018-05-21T14:33:13.452Z",
                            "action": "DELETE",
                            "status": "ENTERED",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "category": "Manager",
                                "contactPerson": "John Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "jane@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "Test Bank Co",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL"
                                    }],
                                "accessContextScope": "LE"
                            }
                        }]
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approvals/{requestId}/approvalRecords",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "status": "PENDING"
                    }
                },
                {
                    status: 201,
                    body: {
                        "status": "APPROVED"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ContactAlreadyCreated",
                        "message": "Contact has already been created, please refresh"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ContactAlreadyUpdated",
                        "message": "Contact has already been updated, please refresh"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ContactAlreadyDeleted",
                        "message": "Contact has already been deleted, please refresh"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approvals/{requestId}/rejectionRecords",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 409,
                    body: {
                        "key": "ContactAlreadyRejected",
                        "message": "Contact request has already been rejected, please refresh"
                    }
                },
            ]
        },
    ]);

    var ContactsHttpService = /** @class */ (function () {
        function ContactsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ContactManagerConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ContactsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ContactsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ContactsHttpService.prototype.deleteContact = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _contactId = requestParameters["contactId"];
            if (_contactId === null || _contactId === undefined) {
                throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/contacts/" + encodeURIComponent(String(_contactId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ContactsHttpService.prototype.deleteContactUrl = function (requestParameters) {
            var _contactId = requestParameters["contactId"];
            if (_contactId === null || _contactId === undefined) {
                throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');
            }
            return this.configuration.basePath + "/client-api/v2/contacts/" + encodeURIComponent(String(_contactId));
        };
        ContactsHttpService.prototype.getContact = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _contactId = requestParameters["contactId"];
            if (_contactId === null || _contactId === undefined) {
                throw new Error('Required parameter contactId was null or undefined when calling getContact.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/contacts/" + encodeURIComponent(String(_contactId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ContactsHttpService.prototype.getContactUrl = function (requestParameters) {
            var _contactId = requestParameters["contactId"];
            if (_contactId === null || _contactId === undefined) {
                throw new Error('Required parameter contactId was null or undefined when calling getContact.');
            }
            return this.configuration.basePath + "/client-api/v2/contacts/" + encodeURIComponent(String(_contactId));
        };
        ContactsHttpService.prototype.getContacts = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
            var _targetSaId = requestParameters["targetSaId"];
            var _businessFunctions = requestParameters["businessFunctions"];
            var _arrangementId = requestParameters["arrangementId"];
            var _privilege = requestParameters["privilege"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_accountIdentifierTypes) {
                _accountIdentifierTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
                });
            }
            if (_targetSaId !== undefined && _targetSaId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
            }
            if (_businessFunctions) {
                _businessFunctions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'businessFunctions');
                });
            }
            if (_arrangementId !== undefined && _arrangementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/contacts", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ContactsHttpService.prototype.getContactsUrl = function (requestParameters) {
            var _this = this;
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var _accountIdentifierTypes = requestParameters["accountIdentifierTypes"];
            var _targetSaId = requestParameters["targetSaId"];
            var _businessFunctions = requestParameters["businessFunctions"];
            var _arrangementId = requestParameters["arrangementId"];
            var _privilege = requestParameters["privilege"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_accountIdentifierTypes) {
                _accountIdentifierTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');
                });
            }
            if (_targetSaId !== undefined && _targetSaId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
            }
            if (_businessFunctions) {
                _businessFunctions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'businessFunctions');
                });
            }
            if (_arrangementId !== undefined && _arrangementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/contacts" + (queryString ? "?" + queryString : '');
        };
        ContactsHttpService.prototype.postContacts = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _contactsPostRequestBody = requestParameters["contactsPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/contacts", _contactsPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ContactsHttpService.prototype.postContactsUrl = function (requestParameters) {
            var _contactsPostRequestBody = requestParameters["contactsPostRequestBody"];
            return this.configuration.basePath + "/client-api/v2/contacts";
        };
        ContactsHttpService.prototype.postContactsFilter = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var _targetSaId = requestParameters["targetSaId"];
            var _contactsPostFilterRequestBody = requestParameters["contactsPostFilterRequestBody"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_targetSaId !== undefined && _targetSaId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/contacts/filter", _contactsPostFilterRequestBody, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ContactsHttpService.prototype.postContactsFilterUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var _targetSaId = requestParameters["targetSaId"];
            var _contactsPostFilterRequestBody = requestParameters["contactsPostFilterRequestBody"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_targetSaId !== undefined && _targetSaId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/contacts/filter" + (queryString ? "?" + queryString : '');
        };
        ContactsHttpService.prototype.putContact = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _contactId = requestParameters["contactId"];
            if (_contactId === null || _contactId === undefined) {
                throw new Error('Required parameter contactId was null or undefined when calling putContact.');
            }
            var _contactPutRequestBody = requestParameters["contactPutRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/contacts/" + encodeURIComponent(String(_contactId)), _contactPutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ContactsHttpService.prototype.putContactUrl = function (requestParameters) {
            var _contactId = requestParameters["contactId"];
            if (_contactId === null || _contactId === undefined) {
                throw new Error('Required parameter contactId was null or undefined when calling putContact.');
            }
            var _contactPutRequestBody = requestParameters["contactPutRequestBody"];
            return this.configuration.basePath + "/client-api/v2/contacts/" + encodeURIComponent(String(_contactId));
        };
        return ContactsHttpService;
    }());
    ContactsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ContactsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONTACT_MANAGER_BASE_PATH]
                        }] }, { type: ContactManagerConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ContactsHttpServiceDeleteContactMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/contacts/{contactId}",
            method: "DELETE",
            responses: [
                {
                    status: 202,
                    body: {
                        "status": "REQUEST_ACCEPTED"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ApprovalAlreadyExistForContact",
                        "message": "Approval request already exist with this contact."
                    }
                },
            ]
        }]);
    var ContactsHttpServiceGetContactMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/contacts/{contactId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                        "name": "John Doe",
                        "alias": "John",
                        "category": "Employee",
                        "contactPerson": "Jane Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "john@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "Test Bank Co",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL",
                                "accountHolderAddressLine1": "Backbase enterprise",
                                "accountHolderAddressLine2": "",
                                "accountHolderStreetName": "Jacob Bontiusplaats 9",
                                "accountHolderTown": "Amsterdam",
                                "accountHolderPostCode": "1018 LL",
                                "accountHolderCountrySubDivision": "North Holland",
                                "accountHolderCountry": "NL"
                            }],
                        "accessContextScope": "USER",
                        "activeStatus": "ACTIVE"
                    }
                },
            ]
        }]);
    var ContactsHttpServiceGetContactsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/contacts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "John Doe",
                            "alias": "John",
                            "category": "Employee",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "john@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "QA Bank",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL",
                                    "accountHolderAddressLine1": "",
                                    "accountHolderAddressLine2": "",
                                    "accountHolderStreetName": "Woestduinstraat 114-3",
                                    "accountHolderTown": "Amsterdam",
                                    "accountHolderPostCode": "1059 SP",
                                    "accountHolderCountrySubDivision": "North Holland",
                                    "accountHolderCountry": "NL"
                                }],
                            "accessContextScope": "SA",
                            "activeStatus": "ACTIVE"
                        }, {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "category": "Manager",
                            "contactPerson": "John Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "jane@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE",
                            "activeStatus": "PENDING_APPROVAL"
                        }]
                },
            ]
        }]);
    var ContactsHttpServicePostContactsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/contacts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "status": "ACTIVE"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "status": "ACTIVE"
                    }
                },
            ]
        }]);
    var ContactsHttpServicePostContactsFilterMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/contacts/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "John Doe",
                            "alias": "John",
                            "category": "Employee",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "john@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "QA Bank",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL",
                                    "accountHolderAddressLine1": "",
                                    "accountHolderAddressLine2": "",
                                    "accountHolderStreetName": "Woestduinstraat 114-3",
                                    "accountHolderTown": "Amsterdam",
                                    "accountHolderPostCode": "1059 SP",
                                    "accountHolderCountrySubDivision": "North Holland",
                                    "accountHolderCountry": "NL"
                                }],
                            "accessContextScope": "SA",
                            "activeStatus": "ACTIVE"
                        }, {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "category": "Manager",
                            "contactPerson": "John Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "jane@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE",
                            "activeStatus": "PENDING_APPROVAL"
                        }]
                },
            ]
        }]);
    var ContactsHttpServicePutContactMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/contacts/{contactId}",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {
                        "status": "REQUEST_ACCEPTED"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ApprovalAlreadyExistForContact",
                        "message": "Approval request already exist with this contact."
                    }
                },
            ]
        }]);
    var ContactsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/contacts/{contactId}",
            method: "DELETE",
            responses: [
                {
                    status: 202,
                    body: {
                        "status": "REQUEST_ACCEPTED"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ApprovalAlreadyExistForContact",
                        "message": "Approval request already exist with this contact."
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/contacts/{contactId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                        "name": "John Doe",
                        "alias": "John",
                        "category": "Employee",
                        "contactPerson": "Jane Doe",
                        "phoneNumber": "055512345678",
                        "emailId": "john@example.com",
                        "addressLine1": "Backbase enterprise",
                        "addressLine2": "",
                        "streetName": "Jacob Bontiusplaats 9",
                        "town": "Amsterdam",
                        "postCode": "1018 LL",
                        "countrySubDivision": "North Holland",
                        "country": "NL",
                        "accounts": [{
                                "name": "Jane Doe",
                                "alias": "Jane",
                                "accountType": "SAVINGS",
                                "IBAN": "FI21 1234 5600 0007 85",
                                "bankName": "Test Bank",
                                "bankAddressLine1": "Test Bank Co",
                                "bankAddressLine2": "",
                                "bankStreetName": "Jodenbreestraat 96",
                                "bankTown": "Amsterdam",
                                "bankPostCode": "1011NS",
                                "bankCountrySubDivision": "North Holland",
                                "bankCountry": "NL",
                                "accountHolderAddressLine1": "Backbase enterprise",
                                "accountHolderAddressLine2": "",
                                "accountHolderStreetName": "Jacob Bontiusplaats 9",
                                "accountHolderTown": "Amsterdam",
                                "accountHolderPostCode": "1018 LL",
                                "accountHolderCountrySubDivision": "North Holland",
                                "accountHolderCountry": "NL"
                            }],
                        "accessContextScope": "USER",
                        "activeStatus": "ACTIVE"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/contacts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "John Doe",
                            "alias": "John",
                            "category": "Employee",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "john@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "QA Bank",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL",
                                    "accountHolderAddressLine1": "",
                                    "accountHolderAddressLine2": "",
                                    "accountHolderStreetName": "Woestduinstraat 114-3",
                                    "accountHolderTown": "Amsterdam",
                                    "accountHolderPostCode": "1059 SP",
                                    "accountHolderCountrySubDivision": "North Holland",
                                    "accountHolderCountry": "NL"
                                }],
                            "accessContextScope": "SA",
                            "activeStatus": "ACTIVE"
                        }, {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "category": "Manager",
                            "contactPerson": "John Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "jane@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE",
                            "activeStatus": "PENDING_APPROVAL"
                        }]
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/contacts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "status": "ACTIVE"
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "status": "ACTIVE"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/contacts/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "John Doe",
                            "alias": "John",
                            "category": "Employee",
                            "contactPerson": "Jane Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "john@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "QA Bank",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL",
                                    "accountHolderAddressLine1": "",
                                    "accountHolderAddressLine2": "",
                                    "accountHolderStreetName": "Woestduinstraat 114-3",
                                    "accountHolderTown": "Amsterdam",
                                    "accountHolderPostCode": "1059 SP",
                                    "accountHolderCountrySubDivision": "North Holland",
                                    "accountHolderCountry": "NL"
                                }],
                            "accessContextScope": "SA",
                            "activeStatus": "ACTIVE"
                        }, {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d536e",
                            "name": "Jane Doe",
                            "alias": "Jane",
                            "category": "Manager",
                            "contactPerson": "John Doe",
                            "phoneNumber": "055512345678",
                            "emailId": "jane@example.com",
                            "addressLine1": "Backbase enterprise",
                            "addressLine2": "",
                            "streetName": "Jacob Bontiusplaats 9",
                            "town": "Amsterdam",
                            "postCode": "1018 LL",
                            "countrySubDivision": "North Holland",
                            "country": "NL",
                            "accounts": [{
                                    "name": "Jane Doe",
                                    "alias": "Jane",
                                    "accountType": "SAVINGS",
                                    "IBAN": "FI21 1234 5600 0007 85",
                                    "bankName": "Test Bank",
                                    "bankAddressLine1": "Test Bank Co",
                                    "bankAddressLine2": "",
                                    "bankStreetName": "Jodenbreestraat 96",
                                    "bankTown": "Amsterdam",
                                    "bankPostCode": "1011NS",
                                    "bankCountrySubDivision": "North Holland",
                                    "bankCountry": "NL"
                                }],
                            "accessContextScope": "LE",
                            "activeStatus": "PENDING_APPROVAL"
                        }]
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/contacts/{contactId}",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {
                        "status": "REQUEST_ACCEPTED"
                    }
                },
                {
                    status: 409,
                    body: {
                        "key": "ApprovalAlreadyExistForContact",
                        "message": "Approval request already exist with this contact."
                    }
                },
            ]
        },
    ]);

    var IbanRestrictionsHttpService = /** @class */ (function () {
        function IbanRestrictionsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ContactManagerConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        IbanRestrictionsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        IbanRestrictionsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        IbanRestrictionsHttpService.prototype.getIbanRestriction = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _code = requestParameters["code"];
            if (_code === null || _code === undefined) {
                throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/iban-restrictions/countries/" + encodeURIComponent(String(_code)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IbanRestrictionsHttpService.prototype.getIbanRestrictionUrl = function (requestParameters) {
            var _code = requestParameters["code"];
            if (_code === null || _code === undefined) {
                throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');
            }
            return this.configuration.basePath + "/client-api/v2/iban-restrictions/countries/" + encodeURIComponent(String(_code));
        };
        IbanRestrictionsHttpService.prototype.getIbanRestrictions = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/iban-restrictions/countries", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IbanRestrictionsHttpService.prototype.getIbanRestrictionsUrl = function () {
            return this.configuration.basePath + "/client-api/v2/iban-restrictions/countries";
        };
        return IbanRestrictionsHttpService;
    }());
    IbanRestrictionsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IbanRestrictionsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    IbanRestrictionsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IbanRestrictionsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IbanRestrictionsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONTACT_MANAGER_BASE_PATH]
                        }] }, { type: ContactManagerConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/iban-restrictions/countries/{code}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "ibanLength": 18
                    }
                },
            ]
        }]);
    var IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/iban-restrictions/countries",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "countryCode": "NL",
                            "ibanLength": 18
                        }, {
                            "countryCode": "TR",
                            "ibanLength": 26
                        }]
                },
            ]
        }]);
    var IbanRestrictionsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/iban-restrictions/countries/{code}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "ibanLength": 18
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/iban-restrictions/countries",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "countryCode": "NL",
                            "ibanLength": 18
                        }, {
                            "countryCode": "TR",
                            "ibanLength": 26
                        }]
                },
            ]
        },
    ]);

    var SupportedCountriesHttpService = /** @class */ (function () {
        function SupportedCountriesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ContactManagerConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        SupportedCountriesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        SupportedCountriesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        SupportedCountriesHttpService.prototype.getSupportedCountries = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/supported-countries", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SupportedCountriesHttpService.prototype.getSupportedCountriesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/supported-countries";
        };
        return SupportedCountriesHttpService;
    }());
    SupportedCountriesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SupportedCountriesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SupportedCountriesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SupportedCountriesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SupportedCountriesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONTACT_MANAGER_BASE_PATH]
                        }] }, { type: ContactManagerConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/supported-countries",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: ["AR", "AU", "AT", "BE", "BR", "CA", "CN", "CO", "HR", "CZ", "DK", "EC", "EG", "ET", "FR", "DE", "GR", "HN", "HK", "HU", "IN", "ID", "IE", "IT", "JM", "MY", "MX", "MA", "NA", "NL", "NZ", "NO", "PL", "PT", "RU", "SN"]
                },
            ]
        }]);
    var SupportedCountriesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/supported-countries",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: ["AR", "AU", "AT", "BE", "BR", "CA", "CN", "CO", "HR", "CZ", "DK", "EC", "EG", "ET", "FR", "DE", "GR", "HN", "HK", "HU", "IN", "ID", "IE", "IT", "JM", "MY", "MX", "MA", "NA", "NL", "NZ", "NO", "PL", "PT", "RU", "SN"]
                },
            ]
        },
    ]);

    exports.AccessContextScope = AccessContextScope;
    exports.AccountIdentifierType = AccountIdentifierType;
    exports.ActiveContactStatus = ActiveContactStatus;
    exports.ApprovalRequestAction = ApprovalRequestAction;
    exports.ApprovalRequestIndicator = ApprovalRequestIndicator;
    exports.ApprovalRequestStatus = ApprovalRequestStatus;
    exports.ApprovalResultStatus = ApprovalResultStatus;
    exports.ApprovalSort = ApprovalSort;
    exports.ApprovalStatus = ApprovalStatus;
    exports.ApprovalsHttpService = ApprovalsHttpService;
    exports.ApprovalsHttpServiceDeleteApprovalRequestMocksProvider = ApprovalsHttpServiceDeleteApprovalRequestMocksProvider;
    exports.ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider = ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider;
    exports.ApprovalsHttpServiceGetApprovalsMocksProvider = ApprovalsHttpServiceGetApprovalsMocksProvider;
    exports.ApprovalsHttpServiceMocksProvider = ApprovalsHttpServiceMocksProvider;
    exports.ApprovalsHttpServicePostApprovalRecordMocksProvider = ApprovalsHttpServicePostApprovalRecordMocksProvider;
    exports.ApprovalsHttpServicePostRejectionRecordMocksProvider = ApprovalsHttpServicePostRejectionRecordMocksProvider;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CONTACT_MANAGER_BASE_PATH = CONTACT_MANAGER_BASE_PATH;
    exports.ContactManagerApiModule = ContactManagerApiModule;
    exports.ContactManagerConfiguration = ContactManagerConfiguration;
    exports.ContactsHttpService = ContactsHttpService;
    exports.ContactsHttpServiceDeleteContactMocksProvider = ContactsHttpServiceDeleteContactMocksProvider;
    exports.ContactsHttpServiceGetContactMocksProvider = ContactsHttpServiceGetContactMocksProvider;
    exports.ContactsHttpServiceGetContactsMocksProvider = ContactsHttpServiceGetContactsMocksProvider;
    exports.ContactsHttpServiceMocksProvider = ContactsHttpServiceMocksProvider;
    exports.ContactsHttpServicePostContactsFilterMocksProvider = ContactsHttpServicePostContactsFilterMocksProvider;
    exports.ContactsHttpServicePostContactsMocksProvider = ContactsHttpServicePostContactsMocksProvider;
    exports.ContactsHttpServicePutContactMocksProvider = ContactsHttpServicePutContactMocksProvider;
    exports.IbanRestrictionsHttpService = IbanRestrictionsHttpService;
    exports.IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider = IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider;
    exports.IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider = IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider;
    exports.IbanRestrictionsHttpServiceMocksProvider = IbanRestrictionsHttpServiceMocksProvider;
    exports.RecordStatus = RecordStatus;
    exports.SortDirection = SortDirection;
    exports.SupportedCountriesHttpService = SupportedCountriesHttpService;
    exports.SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider = SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider;
    exports.SupportedCountriesHttpServiceMocksProvider = SupportedCountriesHttpServiceMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-contact-manager-http-ang.umd.js.map
