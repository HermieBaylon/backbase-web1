{"version":3,"file":"backbase-contact-manager-http-ang.umd.js","sources":["../../model/accessContextScope.ts","../../model/accountIdentifierType.ts","../../model/activeContactStatus.ts","../../model/approvalRequestAction.ts","../../model/approvalRequestIndicator.ts","../../model/approvalRequestStatus.ts","../../model/approvalResultStatus.ts","../../model/approvalSort.ts","../../model/approvalStatus.ts","../../model/recordStatus.ts","../../model/sortDirection.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/approvals.service.ts","../../api/approvals.service.mocks.ts","../../api/contacts.service.ts","../../api/contacts.service.mocks.ts","../../api/ibanRestrictions.service.ts","../../api/ibanRestrictions.service.mocks.ts","../../api/supportedCountries.service.ts","../../api/supportedCountries.service.mocks.ts"],"sourcesContent":["/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Access context scope of the contact, either ServiceAgreement (SA), LegalEntity (LE) or User (USER). \n */\nexport type AccessContextScope = 'SA' | 'LE' | 'USER';\n\nexport const AccessContextScope = {\n    SA: 'SA' as AccessContextScope,\n    LE: 'LE' as AccessContextScope,\n    USER: 'USER' as AccessContextScope\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Account Identifier type can be one of IBAN, ACCOUNT_NUMBER, PHONE_NUMBER, EMAIL\n */\nexport type AccountIdentifierType = 'IBAN' | 'ACCOUNT_NUMBER' | 'PHONE_NUMBER' | 'EMAIL';\n\nexport const AccountIdentifierType = {\n    IBAN: 'IBAN' as AccountIdentifierType,\n    ACCOUNTNUMBER: 'ACCOUNT_NUMBER' as AccountIdentifierType,\n    PHONENUMBER: 'PHONE_NUMBER' as AccountIdentifierType,\n    EMAIL: 'EMAIL' as AccountIdentifierType\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The active status of a contact. When approvals is not enabled ACTIVE is the only value possible. Otherwise following values mean: ACTIVE - fully approved; PENDING_APPROVAL - the contact needs further approval to become active. \n */\nexport type ActiveContactStatus = 'ACTIVE' | 'PENDING_APPROVAL';\n\nexport const ActiveContactStatus = {\n    ACTIVE: 'ACTIVE' as ActiveContactStatus,\n    PENDINGAPPROVAL: 'PENDING_APPROVAL' as ActiveContactStatus\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Type of the operation performed on a contact.\n */\nexport type ApprovalRequestAction = 'CREATE' | 'UPDATE' | 'DELETE';\n\nexport const ApprovalRequestAction = {\n    CREATE: 'CREATE' as ApprovalRequestAction,\n    UPDATE: 'UPDATE' as ApprovalRequestAction,\n    DELETE: 'DELETE' as ApprovalRequestAction\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Indicator for approval required or request accepted.\n */\nexport type ApprovalRequestIndicator = 'APPROVAL_REQUIRED' | 'REQUEST_ACCEPTED';\n\nexport const ApprovalRequestIndicator = {\n    APPROVALREQUIRED: 'APPROVAL_REQUIRED' as ApprovalRequestIndicator,\n    REQUESTACCEPTED: 'REQUEST_ACCEPTED' as ApprovalRequestIndicator\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The status of the approval request\n */\nexport type ApprovalRequestStatus = 'ENTERED' | 'REJECTED';\n\nexport const ApprovalRequestStatus = {\n    ENTERED: 'ENTERED' as ApprovalRequestStatus,\n    REJECTED: 'REJECTED' as ApprovalRequestStatus\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Indicator for further approval required or approved successfully.\n */\nexport type ApprovalResultStatus = 'PENDING' | 'APPROVED' | 'REJECTED';\n\nexport const ApprovalResultStatus = {\n    PENDING: 'PENDING' as ApprovalResultStatus,\n    APPROVED: 'APPROVED' as ApprovalResultStatus,\n    REJECTED: 'REJECTED' as ApprovalResultStatus\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Approval sorting can be one of STATUS, NAME, ACTION, CREATION_TIME\n */\nexport type ApprovalSort = 'STATUS' | 'NAME' | 'ACTION' | 'CREATION_TIME';\n\nexport const ApprovalSort = {\n    STATUS: 'STATUS' as ApprovalSort,\n    NAME: 'NAME' as ApprovalSort,\n    ACTION: 'ACTION' as ApprovalSort,\n    CREATIONTIME: 'CREATION_TIME' as ApprovalSort\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The status of the approval.\n */\nexport type ApprovalStatus = 'PENDING' | 'APPROVED' | 'REJECTED' | 'CANCELLED';\n\nexport const ApprovalStatus = {\n    PENDING: 'PENDING' as ApprovalStatus,\n    APPROVED: 'APPROVED' as ApprovalStatus,\n    REJECTED: 'REJECTED' as ApprovalStatus,\n    CANCELLED: 'CANCELLED' as ApprovalStatus\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The list of accepted statuses that a user can request to update an approval to.\n */\nexport type RecordStatus = 'APPROVED' | 'REJECTED';\n\nexport const RecordStatus = {\n    APPROVED: 'APPROVED' as RecordStatus,\n    REJECTED: 'REJECTED' as RecordStatus\n};\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Sorting direction can be one of ASC, DESC\n */\nexport type SortDirection = 'ASC' | 'DESC';\n\nexport const SortDirection = {\n    ASC: 'ASC' as SortDirection,\n    DESC: 'DESC' as SortDirection\n};\n\n","import { InjectionToken } from '@angular/core';\n\nexport const CONTACT_MANAGER_BASE_PATH = new InjectionToken<string>('CONTACT_MANAGER_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface ContactManagerConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class ContactManagerConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ContactManagerConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link ContactManagerConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link ContactManagerConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module ContactManagerConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { ContactManagerConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class ContactManagerApiModule {\n    public static forRoot(configurationFactory: () => ContactManagerConfiguration): ModuleWithProviders<ContactManagerApiModule> {\n        return {\n            ngModule: ContactManagerApiModule,\n            providers: [ { provide: ContactManagerConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ContactManagerApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: ContactManagerConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('ContactManagerApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { AccountIdentifierType } from '../model/models';\nimport { ApprovalGetResponseBodyItem } from '../model/models';\nimport { ApprovalPostRequestBody } from '../model/models';\nimport { ApprovalPostResponseBody } from '../model/models';\nimport { ApprovalSort } from '../model/models';\nimport { ApprovalsCreatedByMeGetResponseBodyItem } from '../model/models';\nimport { BadRequestError } from '../model/models';\nimport { ConflictError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { RejectionPostRequestBody } from '../model/models';\nimport { SortDirection } from '../model/models';\nimport { UnauthorizedError } from '../model/models';\n\nimport { CONTACT_MANAGER_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { ContactManagerConfiguration }                                     from '../configuration';\n\n\nexport interface DeleteApprovalRequestRequestParams {\n    /** No description available */\n    [\"requestId\"]: string;\n}\n\nexport interface GetApprovalsRequestParams {\n    /** Page Number. Skip over pages of elements by specifying a start value for the query. */\n    [\"from\"]?: number;\n    /** Limit the number of elements on the response. */\n    [\"size\"]?: number;\n    /** The generic search term to search for contacts either by their name or alias or by one characteristic of their accounts (name, alias, accountNumber, IBAN, phoneNumber or email). */\n    [\"query\"]?: string;\n    /** An array of account identifier types to return the matching contacts should have at least one account with the given account identfier types. The default behavior is to return the matching contacts having accounts with any type of account identifier (accountNumber, IBAN, phoneNumber or email). But when the specific account identifier types are requested then the matching contacts which have at least one account with the requested account identfier being not empty, and then matching the search term either by their name or alias or by one characteristic of their accounts (name, alias, requested account identifiers such as accountNumber, IBAN, phoneNumber or email) are returned.  */\n    [\"accountIdentifierTypes\"]?: Array<AccountIdentifierType>;\n    /** Specifies the optional sorting for returned approvals. If skipped will be NAME by default. */\n    [\"sort\"]?: ApprovalSort;\n    /** Specifies the optional sorting direction for sort parameter. If skipped will be ASC by default. */\n    [\"direction\"]?: SortDirection;\n}\n\nexport interface GetApprovalsCreatedByMeRequestParams {\n    /** Page Number. Skip over pages of elements by specifying a start value for the query. */\n    [\"from\"]?: number;\n    /** Limit the number of elements on the response. */\n    [\"size\"]?: number;\n    /** The generic search term to search for contacts either by their name or alias or by one characteristic of their accounts (name, alias, accountNumber, IBAN, phoneNumber or email). */\n    [\"query\"]?: string;\n    /** An array of account identifier types to return the matching contacts should have at least one account with the given account identfier types. The default behavior is to return the matching contacts having accounts with any type of account identifier (accountNumber, IBAN, phoneNumber or email). But when the specific account identifier types are requested then the matching contacts which have at least one account with the requested account identfier being not empty, and then matching the search term either by their name or alias or by one characteristic of their accounts (name, alias, requested account identifiers such as accountNumber, IBAN, phoneNumber or email) are returned.  */\n    [\"accountIdentifierTypes\"]?: Array<AccountIdentifierType>;\n    /** Specifies the optional sorting for returned approvals. */\n    [\"sort\"]?: ApprovalSort;\n    /** Specifies the optional sorting direction for sort parameter. If skipped will be ASC by default. */\n    [\"direction\"]?: SortDirection;\n}\n\nexport interface PostApprovalRecordRequestParams {\n    /** No description available */\n    [\"requestId\"]: string;\n    /** Approves contact request */\n    [\"approvalPostRequestBody\"]?: ApprovalPostRequestBody;\n}\n\nexport interface PostRejectionRecordRequestParams {\n    /** No description available */\n    [\"requestId\"]: string;\n    /** Rejects contact request */\n    [\"rejectionPostRequestBody\"]?: RejectionPostRequestBody;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApprovalsHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new ContactManagerConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CONTACT_MANAGER_BASE_PATH) basePath: string, @Optional() configuration: ContactManagerConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Delete a single contact approval request.\n     * Deletion is only possible for the requests created by the logged in user in status ENTERED or REJECTED.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteApprovalRequest(requestParameters: DeleteApprovalRequestRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Delete a single contact approval request.\n     * Deletion is only possible for the requests created by the logged in user in status ENTERED or REJECTED.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteApprovalRequest(requestParameters: DeleteApprovalRequestRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Delete a single contact approval request.\n     * Deletion is only possible for the requests created by the logged in user in status ENTERED or REJECTED.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteApprovalRequest(requestParameters: DeleteApprovalRequestRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Delete a single contact approval request.\n     * Deletion is only possible for the requests created by the logged in user in status ENTERED or REJECTED.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteApprovalRequest(requestParameters: DeleteApprovalRequestRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deleteApprovalRequestUrl(requestParameters: DeleteApprovalRequestRequestParams): string {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`;\n    }\n\n    /**\n     * Retrieve a list of contact requests pending approval the logged in user can approve.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ApprovalGetResponseBodyItem>>;\n    /**\n     * Retrieve a list of contact requests pending approval the logged in user can approve.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ApprovalGetResponseBodyItem>>>;\n    /**\n     * Retrieve a list of contact requests pending approval the logged in user can approve.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ApprovalGetResponseBodyItem>>>;\n    /**\n     * Retrieve a list of contact requests pending approval the logged in user can approve.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApprovals(requestParameters: GetApprovalsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _sort = requestParameters[\"sort\"];\n        const _direction = requestParameters[\"direction\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'accountIdentifierTypes');\n            })\n        }\n        if (_sort !== undefined && _sort !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_sort, 'sort');\n        }\n        if (_direction !== undefined && _direction !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_direction, 'direction');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ApprovalGetResponseBodyItem>>(`${this.configuration.basePath}/client-api/v2/approvals`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getApprovalsUrl(requestParameters: GetApprovalsRequestParams): string {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _sort = requestParameters[\"sort\"];\n        const _direction = requestParameters[\"direction\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'accountIdentifierTypes');\n            })\n        }\n        if (_sort !== undefined && _sort !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_sort, 'sort');\n        }\n        if (_direction !== undefined && _direction !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_direction, 'direction');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/approvals${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Retrieves list of contact approval requests created by currently logged in user.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApprovalsCreatedByMe(requestParameters: GetApprovalsCreatedByMeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ApprovalsCreatedByMeGetResponseBodyItem>>;\n    /**\n     * Retrieves list of contact approval requests created by currently logged in user.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApprovalsCreatedByMe(requestParameters: GetApprovalsCreatedByMeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ApprovalsCreatedByMeGetResponseBodyItem>>>;\n    /**\n     * Retrieves list of contact approval requests created by currently logged in user.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApprovalsCreatedByMe(requestParameters: GetApprovalsCreatedByMeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ApprovalsCreatedByMeGetResponseBodyItem>>>;\n    /**\n     * Retrieves list of contact approval requests created by currently logged in user.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApprovalsCreatedByMe(requestParameters: GetApprovalsCreatedByMeRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _sort = requestParameters[\"sort\"];\n        const _direction = requestParameters[\"direction\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'accountIdentifierTypes');\n            })\n        }\n        if (_sort !== undefined && _sort !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_sort, 'sort');\n        }\n        if (_direction !== undefined && _direction !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_direction, 'direction');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ApprovalsCreatedByMeGetResponseBodyItem>>(`${this.configuration.basePath}/client-api/v2/approvals/me`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getApprovalsCreatedByMeUrl(requestParameters: GetApprovalsCreatedByMeRequestParams): string {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _sort = requestParameters[\"sort\"];\n        const _direction = requestParameters[\"direction\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'accountIdentifierTypes');\n            })\n        }\n        if (_sort !== undefined && _sort !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_sort, 'sort');\n        }\n        if (_direction !== undefined && _direction !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_direction, 'direction');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/approvals/me${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Approves a contact request.\n     * Approval is possible for requests that are pending approval and have create/update/delete action.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postApprovalRecord(requestParameters: PostApprovalRecordRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ApprovalPostResponseBody>;\n    /**\n     * Approves a contact request.\n     * Approval is possible for requests that are pending approval and have create/update/delete action.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postApprovalRecord(requestParameters: PostApprovalRecordRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ApprovalPostResponseBody>>;\n    /**\n     * Approves a contact request.\n     * Approval is possible for requests that are pending approval and have create/update/delete action.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postApprovalRecord(requestParameters: PostApprovalRecordRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ApprovalPostResponseBody>>;\n    /**\n     * Approves a contact request.\n     * Approval is possible for requests that are pending approval and have create/update/delete action.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postApprovalRecord(requestParameters: PostApprovalRecordRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');\n        }\n        const _approvalPostRequestBody = requestParameters[\"approvalPostRequestBody\"];\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ApprovalPostResponseBody>(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`,\n            _approvalPostRequestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postApprovalRecordUrl(requestParameters: PostApprovalRecordRequestParams): string {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');\n        }\n        const _approvalPostRequestBody = requestParameters[\"approvalPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`;\n    }\n\n    /**\n     * Rejects a contact request.\n     * Rejection is possible for requests that are pending approval and have create/update/delete action.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postRejectionRecord(requestParameters: PostRejectionRecordRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Rejects a contact request.\n     * Rejection is possible for requests that are pending approval and have create/update/delete action.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postRejectionRecord(requestParameters: PostRejectionRecordRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Rejects a contact request.\n     * Rejection is possible for requests that are pending approval and have create/update/delete action.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postRejectionRecord(requestParameters: PostRejectionRecordRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Rejects a contact request.\n     * Rejection is possible for requests that are pending approval and have create/update/delete action.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postRejectionRecord(requestParameters: PostRejectionRecordRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');\n        }\n        const _rejectionPostRequestBody = requestParameters[\"rejectionPostRequestBody\"];\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`,\n            _rejectionPostRequestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postRejectionRecordUrl(requestParameters: PostRejectionRecordRequestParams): string {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');\n        }\n        const _rejectionPostRequestBody = requestParameters[\"rejectionPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v2/approvals/{requestId} URL pattern\n*/\nexport const ApprovalsHttpServiceDeleteApprovalRequestMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals/{requestId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/approvals URL pattern\n*/\nexport const ApprovalsHttpServiceGetApprovalsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d5312\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"data\" : {\n    \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n    \"name\" : \"John Doe\",\n    \"alias\" : \"John\",\n    \"category\" : \"Employee\",\n    \"contactPerson\" : \"Jane Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"john@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"QA Bank\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\",\n      \"accountHolderAddressLine1\" : \"\",\n      \"accountHolderAddressLine2\" : \"\",\n      \"accountHolderStreetName\" : \"Woestduinstraat 114-3\",\n      \"accountHolderTown\" : \"Amsterdam\",\n      \"accountHolderPostCode\" : \"1059 SP\",\n      \"accountHolderCountrySubDivision\" : \"North Holland\",\n      \"accountHolderCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"SA\"\n  },\n  \"creationTime\" : \"2017-05-12T14:33:13.452Z\",\n  \"action\" : \"CREATE\",\n  \"status\" : \"ENTERED\"\n}, {\n  \"id\" : \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"data\" : {\n    \"id\" : \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n    \"name\" : \"Judy Doe\",\n    \"alias\" : \"Judy\",\n    \"category\" : \"VP\",\n    \"contactPerson\" : \"Jane Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"judy@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"LE\"\n  },\n  \"creationTime\" : \"2018-05-12T14:33:13.452Z\",\n  \"action\" : \"UPDATE\",\n  \"status\" : \"ENTERED\"\n}, {\n  \"id\" : \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"data\" : {\n    \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"category\" : \"Manager\",\n    \"contactPerson\" : \"John Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"jane@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"LE\"\n  },\n  \"creationTime\" : \"2018-05-21T14:33:13.452Z\",\n  \"action\" : \"DELETE\",\n  \"status\" : \"ENTERED\"\n} ]\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/approvals/me URL pattern\n*/\nexport const ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals/me\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\n  \"id\" : \"5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"creationTime\" : \"2017-05-12T14:33:13Z\",\n  \"action\" : \"CREATE\",\n  \"status\" : \"ENTERED\",\n  \"data\" : {\n    \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n    \"name\" : \"John Doe\",\n    \"alias\" : \"John\",\n    \"category\" : \"Employee\",\n    \"contactPerson\" : \"Jane Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"john@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"USER\"\n  }\n}, {\n  \"id\" : \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"creationTime\" : \"2018-05-12T14:33:13.452Z\",\n  \"action\" : \"UPDATE\",\n  \"status\" : \"REJECTED\",\n  \"data\" : {\n    \"id\" : \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n    \"name\" : \"Judy Doe\",\n    \"alias\" : \"Judy\",\n    \"category\" : \"VP\",\n    \"contactPerson\" : \"Jane Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"judy@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"LE\"\n  }\n}, {\n  \"id\" : \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"creationTime\" : \"2018-05-21T14:33:13.452Z\",\n  \"action\" : \"DELETE\",\n  \"status\" : \"ENTERED\",\n  \"data\" : {\n    \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"category\" : \"Manager\",\n    \"contactPerson\" : \"John Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"jane@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"LE\"\n  }\n} ]\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/approvals/{requestId}/approvalRecords URL pattern\n*/\nexport const ApprovalsHttpServicePostApprovalRecordMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals/{requestId}/approvalRecords\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 202,\n                    body: {\n  \"status\" : \"PENDING\"\n}\n                },\n                {\n                    status: 201,\n                    body: {\n  \"status\" : \"APPROVED\"\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"key\" : \"ContactAlreadyCreated\",\n  \"message\" : \"Contact has already been created, please refresh\"\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"key\" : \"ContactAlreadyUpdated\",\n  \"message\" : \"Contact has already been updated, please refresh\"\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"key\" : \"ContactAlreadyDeleted\",\n  \"message\" : \"Contact has already been deleted, please refresh\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/approvals/{requestId}/rejectionRecords URL pattern\n*/\nexport const ApprovalsHttpServicePostRejectionRecordMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals/{requestId}/rejectionRecords\",\n        method: \"POST\",\n        responses: [\n                {\n                status: 201,\n                body: \"\"\n                },\n                {\n                    status: 409,\n                    body: {\n  \"key\" : \"ContactAlreadyRejected\",\n  \"message\" : \"Contact request has already been rejected, please refresh\"\n}\n                },\n    ]\n}]);\n\nexport const ApprovalsHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v2/approvals/{requestId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/approvals\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d5312\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"data\" : {\n    \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n    \"name\" : \"John Doe\",\n    \"alias\" : \"John\",\n    \"category\" : \"Employee\",\n    \"contactPerson\" : \"Jane Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"john@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"QA Bank\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\",\n      \"accountHolderAddressLine1\" : \"\",\n      \"accountHolderAddressLine2\" : \"\",\n      \"accountHolderStreetName\" : \"Woestduinstraat 114-3\",\n      \"accountHolderTown\" : \"Amsterdam\",\n      \"accountHolderPostCode\" : \"1059 SP\",\n      \"accountHolderCountrySubDivision\" : \"North Holland\",\n      \"accountHolderCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"SA\"\n  },\n  \"creationTime\" : \"2017-05-12T14:33:13.452Z\",\n  \"action\" : \"CREATE\",\n  \"status\" : \"ENTERED\"\n}, {\n  \"id\" : \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"data\" : {\n    \"id\" : \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n    \"name\" : \"Judy Doe\",\n    \"alias\" : \"Judy\",\n    \"category\" : \"VP\",\n    \"contactPerson\" : \"Jane Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"judy@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"LE\"\n  },\n  \"creationTime\" : \"2018-05-12T14:33:13.452Z\",\n  \"action\" : \"UPDATE\",\n  \"status\" : \"ENTERED\"\n}, {\n  \"id\" : \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"data\" : {\n    \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"category\" : \"Manager\",\n    \"contactPerson\" : \"John Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"jane@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"LE\"\n  },\n  \"creationTime\" : \"2018-05-21T14:33:13.452Z\",\n  \"action\" : \"DELETE\",\n  \"status\" : \"ENTERED\"\n} ]\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/approvals/me\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\n  \"id\" : \"5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"creationTime\" : \"2017-05-12T14:33:13Z\",\n  \"action\" : \"CREATE\",\n  \"status\" : \"ENTERED\",\n  \"data\" : {\n    \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n    \"name\" : \"John Doe\",\n    \"alias\" : \"John\",\n    \"category\" : \"Employee\",\n    \"contactPerson\" : \"Jane Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"john@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"USER\"\n  }\n}, {\n  \"id\" : \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"creationTime\" : \"2018-05-12T14:33:13.452Z\",\n  \"action\" : \"UPDATE\",\n  \"status\" : \"REJECTED\",\n  \"data\" : {\n    \"id\" : \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n    \"name\" : \"Judy Doe\",\n    \"alias\" : \"Judy\",\n    \"category\" : \"VP\",\n    \"contactPerson\" : \"Jane Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"judy@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"LE\"\n  }\n}, {\n  \"id\" : \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n  \"creatorBbId\" : \"john@example.com\",\n  \"creationTime\" : \"2018-05-21T14:33:13.452Z\",\n  \"action\" : \"DELETE\",\n  \"status\" : \"ENTERED\",\n  \"data\" : {\n    \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"category\" : \"Manager\",\n    \"contactPerson\" : \"John Doe\",\n    \"phoneNumber\" : \"055512345678\",\n    \"emailId\" : \"jane@example.com\",\n    \"addressLine1\" : \"Backbase enterprise\",\n    \"addressLine2\" : \"\",\n    \"streetName\" : \"Jacob Bontiusplaats 9\",\n    \"town\" : \"Amsterdam\",\n    \"postCode\" : \"1018 LL\",\n    \"countrySubDivision\" : \"North Holland\",\n    \"country\" : \"NL\",\n    \"accounts\" : [ {\n      \"name\" : \"Jane Doe\",\n      \"alias\" : \"Jane\",\n      \"accountType\" : \"SAVINGS\",\n      \"IBAN\" : \"FI21 1234 5600 0007 85\",\n      \"bankName\" : \"Test Bank\",\n      \"bankAddressLine1\" : \"Test Bank Co\",\n      \"bankAddressLine2\" : \"\",\n      \"bankStreetName\" : \"Jodenbreestraat 96\",\n      \"bankTown\" : \"Amsterdam\",\n      \"bankPostCode\" : \"1011NS\",\n      \"bankCountrySubDivision\" : \"North Holland\",\n      \"bankCountry\" : \"NL\"\n    } ],\n    \"accessContextScope\" : \"LE\"\n  }\n} ]\n            },\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/approvals/{requestId}/approvalRecords\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 202,\n                body: {\n  \"status\" : \"PENDING\"\n}\n            },\n\n            {\n                status: 201,\n                body: {\n  \"status\" : \"APPROVED\"\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"key\" : \"ContactAlreadyCreated\",\n  \"message\" : \"Contact has already been created, please refresh\"\n}\n            },\n            {\n                status: 409,\n                body: {\n  \"key\" : \"ContactAlreadyUpdated\",\n  \"message\" : \"Contact has already been updated, please refresh\"\n}\n            },\n            {\n                status: 409,\n                body: {\n  \"key\" : \"ContactAlreadyDeleted\",\n  \"message\" : \"Contact has already been deleted, please refresh\"\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/approvals/{requestId}/rejectionRecords\",\n        method: \"POST\",\n        responses: [\n\n        {\n          status: 201,\n          body: \"\"\n        },\n\n            {\n                status: 409,\n                body: {\n  \"key\" : \"ContactAlreadyRejected\",\n  \"message\" : \"Contact request has already been rejected, please refresh\"\n}\n            },\n\n\n\n\n    ]\n},\n]\n);\n\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { AccountIdentifierType } from '../model/models';\nimport { BadRequestError } from '../model/models';\nimport { ConflictError } from '../model/models';\nimport { ContactDeleteResponseBody } from '../model/models';\nimport { ContactGetResponseBody } from '../model/models';\nimport { ContactPutRequestBody } from '../model/models';\nimport { ContactPutResponseBody } from '../model/models';\nimport { ContactsGetResponseBodyItem } from '../model/models';\nimport { ContactsPostFilterRequestBody } from '../model/models';\nimport { ContactsPostRequestBody } from '../model/models';\nimport { ContactsPostResponseBody } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { UnauthorizedError } from '../model/models';\n\nimport { CONTACT_MANAGER_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { ContactManagerConfiguration }                                     from '../configuration';\n\n\nexport interface DeleteContactRequestParams {\n    /** No description available */\n    [\"contactId\"]: string;\n}\n\nexport interface GetContactRequestParams {\n    /** No description available */\n    [\"contactId\"]: string;\n}\n\nexport interface GetContactsRequestParams {\n    /** Page Number. Skip over pages of elements by specifying a start value for the query */\n    [\"from\"]?: number;\n    /** Limit the number of elements on the response. */\n    [\"size\"]?: number;\n    /** The generic search term to search for contacts either by their name or alias or by one characteristic of their accounts (name, alias, accountNumber, IBAN, phoneNumber or email). */\n    [\"query\"]?: string;\n    /** An array of account identifier types to return the matching contacts should have at least one account with the given account identfier types. The default behavior is to return the matching contacts having accounts with any type of account identifier (accountNumber, IBAN, phoneNumber or email). But when the specific account identifier types are requested then the matching contacts which have at least one account with the requested account identfier being not empty, and then matching the search term either by their name or alias or by one characteristic of their accounts (name, alias, requested account identifiers such as accountNumber, IBAN, phoneNumber or email) are returned.  */\n    [\"accountIdentifierTypes\"]?: Array<AccountIdentifierType>;\n    /** Internal target service agreement id to match the contacts. When this parameter is not provided, the service agreement id from the user context is used to match contacts. When this parameter is not valid or the current user has no access to the target service agreement, the service returns empty result.  */\n    [\"targetSaId\"]?: string;\n    /** An array of comma separated business functions used for filtering contacts that business functions are entitled to. When business functions are not specified filtering is not applied. When business functions are specified then privilege is required.  Results can be further narrowed by providing an arrangement id - this will result with contacts that business functions are entitled to in scope of given arrangement.  */\n    [\"businessFunctions\"]?: Array<string>;\n    /** Id of the arrangement used for filtering contacts in combination with business functions. When this parameter is specified then business functions and privilege is required.  */\n    [\"arrangementId\"]?: string;\n    /** Privilege used for filtering contacts in combination with business functions. When privilege is specified then business functions are required.  */\n    [\"privilege\"]?: string;\n}\n\nexport interface PostContactsRequestParams {\n    /** Creates a new contact. Response 201 is a result of successful creation. Response 202 will indicate contact request has been created and approval is required for having it available.  */\n    [\"contactsPostRequestBody\"]?: ContactsPostRequestBody;\n}\n\nexport interface PostContactsFilterRequestParams {\n    /** Page Number. Skip over pages of elements by specifying a start value for the query */\n    [\"from\"]?: number;\n    /** Limit the number of elements on the response. */\n    [\"size\"]?: number;\n    /** The generic search term to search for contacts either by their name or alias or by one characteristic of their accounts (name, alias, accountNumber, IBAN, phoneNumber or email). */\n    [\"query\"]?: string;\n    /** Internal target service agreement id to match the contacts. When this parameter is not provided, the service agreement id from the user context is used to match contacts. When this parameter is not valid or the current user has no access to the target service agreement, the service returns empty result.  */\n    [\"targetSaId\"]?: string;\n    /** Filter to match contacts. */\n    [\"contactsPostFilterRequestBody\"]?: ContactsPostFilterRequestBody;\n}\n\nexport interface PutContactRequestParams {\n    /** No description available */\n    [\"contactId\"]: string;\n    [\"contactPutRequestBody\"]?: ContactPutRequestBody;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactsHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new ContactManagerConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CONTACT_MANAGER_BASE_PATH) basePath: string, @Optional() configuration: ContactManagerConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Deletes a single contact by ID.\n     * Success response has a status to indicate the delete request has been accepted or needs further approval.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteContact(requestParameters: DeleteContactRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ContactDeleteResponseBody>;\n    /**\n     * Deletes a single contact by ID.\n     * Success response has a status to indicate the delete request has been accepted or needs further approval.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteContact(requestParameters: DeleteContactRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ContactDeleteResponseBody>>;\n    /**\n     * Deletes a single contact by ID.\n     * Success response has a status to indicate the delete request has been accepted or needs further approval.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteContact(requestParameters: DeleteContactRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ContactDeleteResponseBody>>;\n    /**\n     * Deletes a single contact by ID.\n     * Success response has a status to indicate the delete request has been accepted or needs further approval.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteContact(requestParameters: DeleteContactRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<ContactDeleteResponseBody>(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deleteContactUrl(requestParameters: DeleteContactRequestParams): string {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n    }\n\n    /**\n     * Retrieves a contact by ID.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getContact(requestParameters: GetContactRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ContactGetResponseBody>;\n    /**\n     * Retrieves a contact by ID.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getContact(requestParameters: GetContactRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ContactGetResponseBody>>;\n    /**\n     * Retrieves a contact by ID.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getContact(requestParameters: GetContactRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ContactGetResponseBody>>;\n    /**\n     * Retrieves a contact by ID.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getContact(requestParameters: GetContactRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling getContact.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<ContactGetResponseBody>(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getContactUrl(requestParameters: GetContactRequestParams): string {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling getContact.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n    }\n\n    /**\n     * Retrieves list of all contacts.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getContacts(requestParameters: GetContactsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ContactsGetResponseBodyItem>>;\n    /**\n     * Retrieves list of all contacts.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getContacts(requestParameters: GetContactsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ContactsGetResponseBodyItem>>>;\n    /**\n     * Retrieves list of all contacts.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getContacts(requestParameters: GetContactsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ContactsGetResponseBodyItem>>>;\n    /**\n     * Retrieves list of all contacts.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getContacts(requestParameters: GetContactsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _targetSaId = requestParameters[\"targetSaId\"];\n        const _businessFunctions = requestParameters[\"businessFunctions\"];\n        const _arrangementId = requestParameters[\"arrangementId\"];\n        const _privilege = requestParameters[\"privilege\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'accountIdentifierTypes');\n            })\n        }\n        if (_targetSaId !== undefined && _targetSaId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_targetSaId, 'targetSaId');\n        }\n        if (_businessFunctions) {\n            _businessFunctions.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'businessFunctions');\n            })\n        }\n        if (_arrangementId !== undefined && _arrangementId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_arrangementId, 'arrangementId');\n        }\n        if (_privilege !== undefined && _privilege !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_privilege, 'privilege');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ContactsGetResponseBodyItem>>(`${this.configuration.basePath}/client-api/v2/contacts`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getContactsUrl(requestParameters: GetContactsRequestParams): string {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _targetSaId = requestParameters[\"targetSaId\"];\n        const _businessFunctions = requestParameters[\"businessFunctions\"];\n        const _arrangementId = requestParameters[\"arrangementId\"];\n        const _privilege = requestParameters[\"privilege\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'accountIdentifierTypes');\n            })\n        }\n        if (_targetSaId !== undefined && _targetSaId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_targetSaId, 'targetSaId');\n        }\n        if (_businessFunctions) {\n            _businessFunctions.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'businessFunctions');\n            })\n        }\n        if (_arrangementId !== undefined && _arrangementId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_arrangementId, 'arrangementId');\n        }\n        if (_privilege !== undefined && _privilege !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_privilege, 'privilege');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/contacts${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Creates a new contact.\n     * Response 201 is a result of successful creation. Response 202 will indicate contact request has been created and approval is required for having it available. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postContacts(requestParameters: PostContactsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ContactsPostResponseBody>;\n    /**\n     * Creates a new contact.\n     * Response 201 is a result of successful creation. Response 202 will indicate contact request has been created and approval is required for having it available. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postContacts(requestParameters: PostContactsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ContactsPostResponseBody>>;\n    /**\n     * Creates a new contact.\n     * Response 201 is a result of successful creation. Response 202 will indicate contact request has been created and approval is required for having it available. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postContacts(requestParameters: PostContactsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ContactsPostResponseBody>>;\n    /**\n     * Creates a new contact.\n     * Response 201 is a result of successful creation. Response 202 will indicate contact request has been created and approval is required for having it available. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postContacts(requestParameters: PostContactsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _contactsPostRequestBody = requestParameters[\"contactsPostRequestBody\"];\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ContactsPostResponseBody>(`${this.configuration.basePath}/client-api/v2/contacts`,\n            _contactsPostRequestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postContactsUrl(requestParameters: PostContactsRequestParams): string {\n        const _contactsPostRequestBody = requestParameters[\"contactsPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/contacts`;\n    }\n\n    /**\n     * Retrieves list of all contacts matching the filter.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postContactsFilter(requestParameters: PostContactsFilterRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ContactsGetResponseBodyItem>>;\n    /**\n     * Retrieves list of all contacts matching the filter.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postContactsFilter(requestParameters: PostContactsFilterRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ContactsGetResponseBodyItem>>>;\n    /**\n     * Retrieves list of all contacts matching the filter.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postContactsFilter(requestParameters: PostContactsFilterRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ContactsGetResponseBodyItem>>>;\n    /**\n     * Retrieves list of all contacts matching the filter.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postContactsFilter(requestParameters: PostContactsFilterRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _targetSaId = requestParameters[\"targetSaId\"];\n        const _contactsPostFilterRequestBody = requestParameters[\"contactsPostFilterRequestBody\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_targetSaId !== undefined && _targetSaId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_targetSaId, 'targetSaId');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<ContactsGetResponseBodyItem>>(`${this.configuration.basePath}/client-api/v2/contacts/filter`,\n            _contactsPostFilterRequestBody,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postContactsFilterUrl(requestParameters: PostContactsFilterRequestParams): string {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _targetSaId = requestParameters[\"targetSaId\"];\n        const _contactsPostFilterRequestBody = requestParameters[\"contactsPostFilterRequestBody\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_targetSaId !== undefined && _targetSaId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_targetSaId, 'targetSaId');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/contacts/filter${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Updates a single contact by ID.\n     * Response 202 is a result of an accepted request. Please check the status field in the response for further information. When the status field populated with:    REQUEST_ACCEPTED - No further approvals are needed. The contact has been updated. This may result change of the contact ID based on the approvals configuration.    APPROVAL_REQUIRED - The contact update needs further approval. Until the contact is fully approved, the original contact is available with the original contact ID.    The contact is updated and available with a reassigned ID after the contact has been approved. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putContact(requestParameters: PutContactRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ContactPutResponseBody>;\n    /**\n     * Updates a single contact by ID.\n     * Response 202 is a result of an accepted request. Please check the status field in the response for further information. When the status field populated with:    REQUEST_ACCEPTED - No further approvals are needed. The contact has been updated. This may result change of the contact ID based on the approvals configuration.    APPROVAL_REQUIRED - The contact update needs further approval. Until the contact is fully approved, the original contact is available with the original contact ID.    The contact is updated and available with a reassigned ID after the contact has been approved. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putContact(requestParameters: PutContactRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ContactPutResponseBody>>;\n    /**\n     * Updates a single contact by ID.\n     * Response 202 is a result of an accepted request. Please check the status field in the response for further information. When the status field populated with:    REQUEST_ACCEPTED - No further approvals are needed. The contact has been updated. This may result change of the contact ID based on the approvals configuration.    APPROVAL_REQUIRED - The contact update needs further approval. Until the contact is fully approved, the original contact is available with the original contact ID.    The contact is updated and available with a reassigned ID after the contact has been approved. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putContact(requestParameters: PutContactRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ContactPutResponseBody>>;\n    /**\n     * Updates a single contact by ID.\n     * Response 202 is a result of an accepted request. Please check the status field in the response for further information. When the status field populated with:    REQUEST_ACCEPTED - No further approvals are needed. The contact has been updated. This may result change of the contact ID based on the approvals configuration.    APPROVAL_REQUIRED - The contact update needs further approval. Until the contact is fully approved, the original contact is available with the original contact ID.    The contact is updated and available with a reassigned ID after the contact has been approved. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putContact(requestParameters: PutContactRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling putContact.');\n        }\n        const _contactPutRequestBody = requestParameters[\"contactPutRequestBody\"];\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ContactPutResponseBody>(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`,\n            _contactPutRequestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public putContactUrl(requestParameters: PutContactRequestParams): string {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling putContact.');\n        }\n        const _contactPutRequestBody = requestParameters[\"contactPutRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v2/contacts/{contactId} URL pattern\n*/\nexport const ContactsHttpServiceDeleteContactMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                    status: 202,\n                    body: {\n  \"status\" : \"REQUEST_ACCEPTED\"\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"key\" : \"ApprovalAlreadyExistForContact\",\n  \"message\" : \"Approval request already exist with this contact.\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/contacts/{contactId} URL pattern\n*/\nexport const ContactsHttpServiceGetContactMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n  \"name\" : \"John Doe\",\n  \"alias\" : \"John\",\n  \"category\" : \"Employee\",\n  \"contactPerson\" : \"Jane Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"john@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"Test Bank Co\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\",\n    \"accountHolderAddressLine1\" : \"Backbase enterprise\",\n    \"accountHolderAddressLine2\" : \"\",\n    \"accountHolderStreetName\" : \"Jacob Bontiusplaats 9\",\n    \"accountHolderTown\" : \"Amsterdam\",\n    \"accountHolderPostCode\" : \"1018 LL\",\n    \"accountHolderCountrySubDivision\" : \"North Holland\",\n    \"accountHolderCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"USER\",\n  \"activeStatus\" : \"ACTIVE\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/contacts URL pattern\n*/\nexport const ContactsHttpServiceGetContactsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n  \"name\" : \"John Doe\",\n  \"alias\" : \"John\",\n  \"category\" : \"Employee\",\n  \"contactPerson\" : \"Jane Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"john@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"QA Bank\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\",\n    \"accountHolderAddressLine1\" : \"\",\n    \"accountHolderAddressLine2\" : \"\",\n    \"accountHolderStreetName\" : \"Woestduinstraat 114-3\",\n    \"accountHolderTown\" : \"Amsterdam\",\n    \"accountHolderPostCode\" : \"1059 SP\",\n    \"accountHolderCountrySubDivision\" : \"North Holland\",\n    \"accountHolderCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"SA\",\n  \"activeStatus\" : \"ACTIVE\"\n}, {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n  \"name\" : \"Jane Doe\",\n  \"alias\" : \"Jane\",\n  \"category\" : \"Manager\",\n  \"contactPerson\" : \"John Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"jane@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"Test Bank Co\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"LE\",\n  \"activeStatus\" : \"PENDING_APPROVAL\"\n} ]\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/contacts URL pattern\n*/\nexport const ContactsHttpServicePostContactsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n  \"status\" : \"ACTIVE\"\n}\n                },\n                {\n                    status: 202,\n                    body: {\n  \"id\" : \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n  \"status\" : \"ACTIVE\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/contacts/filter URL pattern\n*/\nexport const ContactsHttpServicePostContactsFilterMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts/filter\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n  \"name\" : \"John Doe\",\n  \"alias\" : \"John\",\n  \"category\" : \"Employee\",\n  \"contactPerson\" : \"Jane Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"john@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"QA Bank\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\",\n    \"accountHolderAddressLine1\" : \"\",\n    \"accountHolderAddressLine2\" : \"\",\n    \"accountHolderStreetName\" : \"Woestduinstraat 114-3\",\n    \"accountHolderTown\" : \"Amsterdam\",\n    \"accountHolderPostCode\" : \"1059 SP\",\n    \"accountHolderCountrySubDivision\" : \"North Holland\",\n    \"accountHolderCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"SA\",\n  \"activeStatus\" : \"ACTIVE\"\n}, {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n  \"name\" : \"Jane Doe\",\n  \"alias\" : \"Jane\",\n  \"category\" : \"Manager\",\n  \"contactPerson\" : \"John Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"jane@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"Test Bank Co\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"LE\",\n  \"activeStatus\" : \"PENDING_APPROVAL\"\n} ]\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/contacts/{contactId} URL pattern\n*/\nexport const ContactsHttpServicePutContactMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 202,\n                    body: {\n  \"status\" : \"REQUEST_ACCEPTED\"\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"key\" : \"ApprovalAlreadyExistForContact\",\n  \"message\" : \"Approval request already exist with this contact.\"\n}\n                },\n    ]\n}]);\n\nexport const ContactsHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"DELETE\",\n        responses: [\n\n            {\n                status: 202,\n                body: {\n  \"status\" : \"REQUEST_ACCEPTED\"\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"key\" : \"ApprovalAlreadyExistForContact\",\n  \"message\" : \"Approval request already exist with this contact.\"\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n  \"name\" : \"John Doe\",\n  \"alias\" : \"John\",\n  \"category\" : \"Employee\",\n  \"contactPerson\" : \"Jane Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"john@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"Test Bank Co\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\",\n    \"accountHolderAddressLine1\" : \"Backbase enterprise\",\n    \"accountHolderAddressLine2\" : \"\",\n    \"accountHolderStreetName\" : \"Jacob Bontiusplaats 9\",\n    \"accountHolderTown\" : \"Amsterdam\",\n    \"accountHolderPostCode\" : \"1018 LL\",\n    \"accountHolderCountrySubDivision\" : \"North Holland\",\n    \"accountHolderCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"USER\",\n  \"activeStatus\" : \"ACTIVE\"\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/contacts\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n  \"name\" : \"John Doe\",\n  \"alias\" : \"John\",\n  \"category\" : \"Employee\",\n  \"contactPerson\" : \"Jane Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"john@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"QA Bank\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\",\n    \"accountHolderAddressLine1\" : \"\",\n    \"accountHolderAddressLine2\" : \"\",\n    \"accountHolderStreetName\" : \"Woestduinstraat 114-3\",\n    \"accountHolderTown\" : \"Amsterdam\",\n    \"accountHolderPostCode\" : \"1059 SP\",\n    \"accountHolderCountrySubDivision\" : \"North Holland\",\n    \"accountHolderCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"SA\",\n  \"activeStatus\" : \"ACTIVE\"\n}, {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n  \"name\" : \"Jane Doe\",\n  \"alias\" : \"Jane\",\n  \"category\" : \"Manager\",\n  \"contactPerson\" : \"John Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"jane@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"Test Bank Co\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"LE\",\n  \"activeStatus\" : \"PENDING_APPROVAL\"\n} ]\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/contacts\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n  \"status\" : \"ACTIVE\"\n}\n            },\n\n            {\n                status: 202,\n                body: {\n  \"id\" : \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n  \"status\" : \"ACTIVE\"\n}\n            },\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/contacts/filter\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n  \"name\" : \"John Doe\",\n  \"alias\" : \"John\",\n  \"category\" : \"Employee\",\n  \"contactPerson\" : \"Jane Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"john@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"QA Bank\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\",\n    \"accountHolderAddressLine1\" : \"\",\n    \"accountHolderAddressLine2\" : \"\",\n    \"accountHolderStreetName\" : \"Woestduinstraat 114-3\",\n    \"accountHolderTown\" : \"Amsterdam\",\n    \"accountHolderPostCode\" : \"1059 SP\",\n    \"accountHolderCountrySubDivision\" : \"North Holland\",\n    \"accountHolderCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"SA\",\n  \"activeStatus\" : \"ACTIVE\"\n}, {\n  \"id\" : \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n  \"name\" : \"Jane Doe\",\n  \"alias\" : \"Jane\",\n  \"category\" : \"Manager\",\n  \"contactPerson\" : \"John Doe\",\n  \"phoneNumber\" : \"055512345678\",\n  \"emailId\" : \"jane@example.com\",\n  \"addressLine1\" : \"Backbase enterprise\",\n  \"addressLine2\" : \"\",\n  \"streetName\" : \"Jacob Bontiusplaats 9\",\n  \"town\" : \"Amsterdam\",\n  \"postCode\" : \"1018 LL\",\n  \"countrySubDivision\" : \"North Holland\",\n  \"country\" : \"NL\",\n  \"accounts\" : [ {\n    \"name\" : \"Jane Doe\",\n    \"alias\" : \"Jane\",\n    \"accountType\" : \"SAVINGS\",\n    \"IBAN\" : \"FI21 1234 5600 0007 85\",\n    \"bankName\" : \"Test Bank\",\n    \"bankAddressLine1\" : \"Test Bank Co\",\n    \"bankAddressLine2\" : \"\",\n    \"bankStreetName\" : \"Jodenbreestraat 96\",\n    \"bankTown\" : \"Amsterdam\",\n    \"bankPostCode\" : \"1011NS\",\n    \"bankCountrySubDivision\" : \"North Holland\",\n    \"bankCountry\" : \"NL\"\n  } ],\n  \"accessContextScope\" : \"LE\",\n  \"activeStatus\" : \"PENDING_APPROVAL\"\n} ]\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 202,\n                body: {\n  \"status\" : \"REQUEST_ACCEPTED\"\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"key\" : \"ApprovalAlreadyExistForContact\",\n  \"message\" : \"Approval request already exist with this contact.\"\n}\n            },\n\n\n\n\n    ]\n},\n]\n);\n\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { IbanRestrictionGetResponseBody } from '../model/models';\nimport { IbanRestrictionsGetResponseBodyItem } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { UnauthorizedError } from '../model/models';\n\nimport { CONTACT_MANAGER_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { ContactManagerConfiguration }                                     from '../configuration';\n\n\nexport interface GetIbanRestrictionRequestParams {\n    /** No description available */\n    [\"code\"]: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IbanRestrictionsHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new ContactManagerConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CONTACT_MANAGER_BASE_PATH) basePath: string, @Optional() configuration: ContactManagerConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Retrieves IBAN length information for a single country identified by country code.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIbanRestriction(requestParameters: GetIbanRestrictionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<IbanRestrictionGetResponseBody>;\n    /**\n     * Retrieves IBAN length information for a single country identified by country code.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIbanRestriction(requestParameters: GetIbanRestrictionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<IbanRestrictionGetResponseBody>>;\n    /**\n     * Retrieves IBAN length information for a single country identified by country code.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIbanRestriction(requestParameters: GetIbanRestrictionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<IbanRestrictionGetResponseBody>>;\n    /**\n     * Retrieves IBAN length information for a single country identified by country code.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIbanRestriction(requestParameters: GetIbanRestrictionRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _code = requestParameters[\"code\"];\n        if (_code === null || _code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<IbanRestrictionGetResponseBody>(`${this.configuration.basePath}/client-api/v2/iban-restrictions/countries/${encodeURIComponent(String(_code))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getIbanRestrictionUrl(requestParameters: GetIbanRestrictionRequestParams): string {\n        const _code = requestParameters[\"code\"];\n        if (_code === null || _code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/iban-restrictions/countries/${encodeURIComponent(String(_code))}`;\n    }\n\n    /**\n     * Retrieves a list of country IBAN length information for all countries.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIbanRestrictions(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<IbanRestrictionsGetResponseBodyItem>>;\n    /**\n     * Retrieves a list of country IBAN length information for all countries.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIbanRestrictions(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<IbanRestrictionsGetResponseBodyItem>>>;\n    /**\n     * Retrieves a list of country IBAN length information for all countries.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIbanRestrictions(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<IbanRestrictionsGetResponseBodyItem>>>;\n    /**\n     * Retrieves a list of country IBAN length information for all countries.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIbanRestrictions(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<IbanRestrictionsGetResponseBodyItem>>(`${this.configuration.basePath}/client-api/v2/iban-restrictions/countries`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getIbanRestrictionsUrl(): string {\n        return `${this.configuration.basePath}/client-api/v2/iban-restrictions/countries`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v2/iban-restrictions/countries/{code} URL pattern\n*/\nexport const IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/iban-restrictions/countries/{code}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"ibanLength\" : 18\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/iban-restrictions/countries URL pattern\n*/\nexport const IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/iban-restrictions/countries\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\n  \"countryCode\" : \"NL\",\n  \"ibanLength\" : 18\n}, {\n  \"countryCode\" : \"TR\",\n  \"ibanLength\" : 26\n} ]\n                },\n    ]\n}]);\n\nexport const IbanRestrictionsHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v2/iban-restrictions/countries/{code}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"ibanLength\" : 18\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/iban-restrictions/countries\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\n  \"countryCode\" : \"NL\",\n  \"ibanLength\" : 18\n}, {\n  \"countryCode\" : \"TR\",\n  \"ibanLength\" : 26\n} ]\n            },\n\n\n\n\n    ]\n},\n]\n);\n\n\n","/**\n * Contacts client\n * Manage and search contacts. Approve or reject changes to contacts.\n *\n * The version of the OpenAPI document: 2.16.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InternalServerError } from '../model/models';\n\nimport { CONTACT_MANAGER_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { ContactManagerConfiguration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SupportedCountriesHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new ContactManagerConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CONTACT_MANAGER_BASE_PATH) basePath: string, @Optional() configuration: ContactManagerConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Retrieves the list of supported country codes for the bank address of a payee account. The country codes are either taken from a list of configured values which is the default behavior or from Payments sanctioned countries based on a configuration. \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSupportedCountries(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<string>>;\n    /**\n     * Retrieves the list of supported country codes for the bank address of a payee account. The country codes are either taken from a list of configured values which is the default behavior or from Payments sanctioned countries based on a configuration. \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSupportedCountries(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<string>>>;\n    /**\n     * Retrieves the list of supported country codes for the bank address of a payee account. The country codes are either taken from a list of configured values which is the default behavior or from Payments sanctioned countries based on a configuration. \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSupportedCountries(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<string>>>;\n    /**\n     * Retrieves the list of supported country codes for the bank address of a payee account. The country codes are either taken from a list of configured values which is the default behavior or from Payments sanctioned countries based on a configuration. \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSupportedCountries(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<string>>(`${this.configuration.basePath}/client-api/v2/supported-countries`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getSupportedCountriesUrl(): string {\n        return `${this.configuration.basePath}/client-api/v2/supported-countries`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v2/supported-countries URL pattern\n*/\nexport const SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/supported-countries\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ \"AR\", \"AU\", \"AT\", \"BE\", \"BR\", \"CA\", \"CN\", \"CO\", \"HR\", \"CZ\", \"DK\", \"EC\", \"EG\", \"ET\", \"FR\", \"DE\", \"GR\", \"HN\", \"HK\", \"HU\", \"IN\", \"ID\", \"IE\", \"IT\", \"JM\", \"MY\", \"MX\", \"MA\", \"NA\", \"NL\", \"NZ\", \"NO\", \"PL\", \"PT\", \"RU\", \"SN\" ]\n                },\n    ]\n}]);\n\nexport const SupportedCountriesHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v2/supported-countries\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ \"AR\", \"AU\", \"AT\", \"BE\", \"BR\", \"CA\", \"CN\", \"CO\", \"HR\", \"CZ\", \"DK\", \"EC\", \"EG\", \"ET\", \"FR\", \"DE\", \"GR\", \"HN\", \"HK\", \"HU\", \"IN\", \"ID\", \"IE\", \"IT\", \"JM\", \"MY\", \"MX\", \"MA\", \"NA\", \"NL\", \"NZ\", \"NO\", \"PL\", \"PT\", \"RU\", \"SN\" ]\n            },\n\n    ]\n},\n]\n);\n\n\n"],"names":["InjectionToken","NgModule","Optional","SkipSelf","HttpHeaders","HttpParams","Injectable","Inject","createMocks"],"mappings":"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"}