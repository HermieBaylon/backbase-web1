import * as i0 from '@angular/core';
import { EventEmitter, Component, Input, Output, ChangeDetectionStrategy, NgModule, Injectable, InjectionToken, Optional, Inject } from '@angular/core';
import * as i1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i2 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i2$2 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i2$1 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i3$2 from '@backbase/ui-ang/textarea';
import { TextareaModule } from '@backbase/ui-ang/textarea';
import * as i3$3 from '@angular/forms';
import { ReactiveFormsModule, Validators } from '@angular/forms';
import * as i6 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i6$1 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import * as i1$1 from '@backbase/ui-ang/currency-input';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';
import * as i2$3 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i5$2 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i4 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i1$2 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i2$4 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i5$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i8 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i1$4 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import { Subject, BehaviorSubject, throwError } from 'rxjs';
import { takeUntil, distinctUntilChanged, switchMap, catchError, map } from 'rxjs/operators';
import * as i1$3 from '@backbase/data-ang/payment-order-a2a';
import * as i4$1 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i1$5 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';

class CommunicationService {
}

const FORM_INPUT_LENGTHS = {
    name: 30,
    number: 17,
    routingNumber: 9,
};
const externalAcc = 'EXTERNAL_ACCOUNT_VERIFICATION_';
const RESPONSES = {
    unmatchedKey: `${externalAcc}FAILURE`,
    exceededKey: `${externalAcc}EXCEEDED_MAX_ATTEMPTS`,
    invalidAmount: `${externalAcc}INVALID_DEPOSIT_AMOUNTS`,
};
const payverisStatuses = {
    InProcess: 'warning',
    PendingActivation: 'warning',
    FailedVerification: 'danger',
    RejectedByExternalBank: 'danger',
    DisabledForExcessiveReturns: 'secondary',
    DisabledForFraud: 'secondary',
};
const responses = {
    unmatchedKey: `${externalAcc}FAILURE`,
    exceededKey: `${externalAcc}EXCEEDED_MAX_ATTEMPTS`,
    invalidAmount: `${externalAcc}INVALID_DEPOSIT_AMOUNTS`,
};
const failedStatuses = {
    FailedVerification: 'FailedVerification',
    RejectedByExternalBank: 'RejectedByExternalBank',
    DisabledForExcessiveReturns: 'DisabledForExcessiveReturns',
    DisabledForFraud: 'DisabledForFraud',
};

class AccountDetailModalHeaderComponent {
    constructor() {
        this.statuses = payverisStatuses;
        /**
         * Activate account attempts exceeded flag
         * Default value is false
         */
        this.attemptsExceeded = false;
        /**
         * Close modal event emitter
         */
        this.closeModal = new EventEmitter();
    }
    closeDetailModal() {
        this.closeModal.emit();
    }
}
/** @nocollapse */ AccountDetailModalHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountDetailModalHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountDetailModalHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountDetailModalHeaderComponent, selector: "bb-a2a-details-header", inputs: { account: "account", attemptsExceeded: "attemptsExceeded" }, outputs: { closeModal: "closeModal" }, ngImport: i0, template: "<bb-modal-header-ui>\n  <ng-template bbCustomModalHeader>\n    <div>\n      <div data-role=\"payord-a2a-account-details-modal-header\">\n        <h5\n          [attr.aria-label]=\"account.accountNickName || account.bankName\"\n          i18n-attr.aria-label=\"dialog header for the selected a2a account details@@payord-a2a.account.details.header\"\n        >\n          <span class=\"modal-title\" data-role=\"payord-a2a-account-details-modal-name\">\n            {{ account?.accountNickName || account?.bankName }}\n          </span>\n        </h5>\n        <span class=\"d-none\" aria-hidden=\"true\" i18n=\"@@payord-a2a-account-details-status-badge.label\" #label>\n          {account.status, select, InProcess {IN PROCESS} PendingActivation {PENDING ACTIVATION} FailedVerification\n          {FAILED ACTIVATION} RejectedByExternalBank {FAILED ACTIVATION} DisabledForExcessiveReturns {DISABLED}\n          DisabledForFraud {DISABLED} }\n        </span>\n        <bb-badge-ui\n          *ngIf=\"account.status !== 'Active' && !attemptsExceeded\"\n          data-role=\"payord-a2a-account-details-modal-account-status\"\n          [color]=\"statuses[account.status]\"\n          [text]=\"label.textContent\"\n        ></bb-badge-ui>\n\n        <bb-badge-ui\n          *ngIf=\"attemptsExceeded\"\n          color=\"danger\"\n          text=\"FAILED ACTIVATION\"\n          data-role=\"payord-a2a-account-details-modal-account-disabled-status\"\n          i18n-text=\"@@payord-a2a-account-details-disabled-status-badge.text\"\n        ></bb-badge-ui>\n      </div>\n    </div>\n    <div>\n      <button\n        (click)=\"closeDetailModal()\"\n        type=\"button\"\n        class=\"close m-0 p-0\"\n        aria-label=\"Close payment detail dialog\"\n        data-role=\"close-payord-a2a-account-details-modal\"\n        i18n-aria-label=\"@@payord-a2a.account.details-clear.button\"\n      >\n        <bb-icon-ui name=\"clear\"></bb-icon-ui>\n      </button>\n    </div>\n  </ng-template>\n</bb-modal-header-ui>\n", components: [{ type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountDetailModalHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-a2a-details-header',
                    templateUrl: './details-header.component.html',
                }]
        }], propDecorators: { account: [{
                type: Input
            }], attemptsExceeded: [{
                type: Input
            }], closeModal: [{
                type: Output
            }] } });

class AccountInformationComponent {
}
/** @nocollapse */ AccountInformationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInformationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountInformationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInformationComponent, selector: "bb-a2a-account-information", inputs: { account: "account" }, ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-12\" [ngClass]=\"{ 'col-md-6': account?.status === 'PendingActivation' }\">\n    <div class=\"bb-block bb-block--md\">\n      <div\n        class=\"bb-label\"\n        data-role=\"payord-a2a-account-details-modal-account-type-title\"\n        i18n=\"@@payord-a2a.account.details.type\"\n      >\n        Account type\n      </div>\n      <div class=\"bb-text-support\">\n        <span data-role=\"payord-a2a-account-details-modal-account-type\" i18n=\"@@payord-a2a.account.details.type.text\">\n          {account?.accountType, select, Savings {Saving's account} Checking {Checking's account} }\n        </span>\n      </div>\n    </div>\n\n    <div class=\"bb-block--md\">\n      <div\n        class=\"bb-label\"\n        data-role=\"payord-a2a-account-details-modal-account-number-title\"\n        i18n=\"@@payord-a2a.account.details.account.number\"\n      >\n        Account number\n      </div>\n      <div class=\"bb-text-support\" data-role=\"payord-a2a-account-details-modal-account-number\">\n        {{ account?.accountNumber }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-12\" [ngClass]=\"{ 'col-md-6': account?.status === 'PendingActivation' }\">\n    <div class=\"bb-block--md\">\n      <div\n        class=\"bb-label\"\n        data-role=\"payord-a2a-account-details-modal-bank-name-title\"\n        i18n=\"@@payord-a2a.account.details.bank.name\"\n      >\n        Bank name\n      </div>\n      <div class=\"bb-text-support\" data-role=\"payord-a2a-account-details-modal-bank-name\">\n        {{ account?.bankName }}\n      </div>\n    </div>\n\n    <div class=\"bb-block--md\">\n      <div\n        class=\"bb-label\"\n        data-role=\"payord-a2a-account-details-modal-routing-number-title\"\n        i18n=\"@@payord-a2a.account.details.routing.number\"\n      >\n        Routing transit number\n      </div>\n      <div class=\"bb-text-support\" data-role=\"payord-a2a-account-details-modal-routing-number\">\n        {{ account?.routingNumber }}\n      </div>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInformationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-a2a-account-information',
                    templateUrl: './account-information.component.html',
                }]
        }], propDecorators: { account: [{
                type: Input
            }] } });

class AccountDetailModalComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        this.statuses = failedStatuses;
        /**
         * Open account details modal flag
         * Default value is false
         */
        this.isOpen = false;
        /**
         * Close account details modal event emitter
         */
        this.closeModal = new EventEmitter();
    }
    onClose() {
        this.closeModal.emit();
    }
}
/** @nocollapse */ AccountDetailModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountDetailModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountDetailModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountDetailModalComponent, selector: "bb-a2a-account-details", inputs: { isOpen: "isOpen", externalAccount: "externalAccount" }, outputs: { closeModal: "closeModal" }, ngImport: i0, template: "<bb-modal-ui *ngIf=\"externalAccount as account\" [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-a2a-details-header [account]=\"account\" (closeModal)=\"onClose()\"> </bb-a2a-details-header>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngSwitch]=\"account.status\">\n        <bb-alert-ui\n          *ngSwitchCase=\"statuses.DisabledForExcessiveReturns\"\n          title=\"Your account was disabled for excessive returns\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-excessive-returns-error\"\n          i18n-title=\"@@payord-a2a.account.details.excessive-returns.title\"\n        >\n        </bb-alert-ui>\n        <bb-alert-ui\n          *ngSwitchCase=\"statuses.DisabledForFraud\"\n          title=\"Your account was disabled for fraud\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-fraud-error\"\n          i18n-title=\"@@payord-a2a.account.details.fraud.title\"\n        >\n        </bb-alert-ui>\n        <bb-alert-ui\n          *ngSwitchCase=\"statuses.FailedVerification\"\n          title=\"The activation of your account has failed\"\n          message=\"You have exceeded the number of attempts to activate your account. To continue, please raise a new request.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-failed-verification-error\"\n          i18n-title=\"@@payord-a2a.account.details.failed-verification.title\"\n          i18n-message=\"@@payord-a2a.account.details.failed-verification.message\"\n        >\n        </bb-alert-ui>\n        <bb-alert-ui\n          *ngSwitchCase=\"statuses.RejectedByExternalBank\"\n          title=\"The activation of your account was rejected by the external bank\"\n          message=\"For more information contact your provider.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-rejected-external-error\"\n          i18n-title=\"@@payord-a2a.account.details.rejected-external.title\"\n          i18n-message=\"@@payord-a2a.account.details.rejected-external.message\"\n        >\n        </bb-alert-ui>\n      </div>\n      <bb-a2a-account-information [account]=\"account\"></bb-a2a-account-information>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: AccountDetailModalHeaderComponent, selector: "bb-a2a-details-header", inputs: ["account", "attemptsExceeded"], outputs: ["closeModal"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: AccountInformationComponent, selector: "bb-a2a-account-information", inputs: ["account"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountDetailModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-a2a-account-details',
                    templateUrl: 'account-details.component.html',
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], externalAccount: [{
                type: Input
            }], closeModal: [{
                type: Output
            }] } });

class ConfirmationDialogComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        this.comment = '';
        /**
         * The button color for confirm button
         * Default value is `primary`.
         */
        this.confirmButtonColor = 'primary';
        /**
         * The button color for cancel button
         * Default value is `link`.
         */
        this.cancelButtonColor = 'link';
        /**
         * Indicator for confirmation dialog open state.
         * Default value is `false`.
         */
        this.isOpen = false;
        /**
         * Changes will be triggered on confirmAction event emit.
         */
        this.confirm = new EventEmitter();
        /**
         * Changes will be triggered on cancel event emit.
         */
        this.cancel = new EventEmitter();
        /**
         * Show the field for the comment
         * Default value is `false`.
         */
        this.attachComment = false;
        /**
         * Text for comment field label,
         * Default value is `Add comment`.
         */
        this.commentFieldLabel = 'Add comment';
    }
    resetComment() {
        if (this.attachComment) {
            this.comment = '';
        }
    }
    onCancelAction() {
        this.cancel.emit();
        this.resetComment();
    }
    onConfirmAction() {
        var _a, _b;
        const _comment = this.comment.trim();
        let emitValue = (_a = this.confirmActionPayload) === null || _a === void 0 ? void 0 : _a.payload;
        if (this.attachComment && !!_comment) {
            emitValue = {
                payload: (_b = this.confirmActionPayload) === null || _b === void 0 ? void 0 : _b.payload,
                comment: _comment,
            };
        }
        this.confirm.emit(emitValue);
        this.resetComment();
    }
}
/** @nocollapse */ ConfirmationDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ConfirmationDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: { confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", isOpen: "isOpen", confirmActionPayload: "confirmActionPayload", attachComment: "attachComment", commentFieldLabel: "commentFieldLabel" }, outputs: { confirm: "confirm", cancel: "cancel" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <span #headerContent class=\"d-none\" aria-hidden=\"true\">\n        <ng-content select=\"[title]\"></ng-content>\n      </span>\n      <bb-header-ui\n        headingType=\"h2\"\n        [heading]=\"headerContent.textContent\"\n        [attr.data-role]=\"'confirmation-header'\"\n      ></bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngClass]=\"{ 'bb-block bb-block--md': attachComment }\">\n        <ng-content select=\"[body]\"></ng-content>\n      </div>\n\n      <ng-container *ngIf=\"attachComment && isOpen\">\n        <label [for]=\"commentField.id\" i18n=\"@@bb-confirmation-dialog.comment\">{{ commentFieldLabel }}</label>\n        <span class=\"bb-text-support\">\n          (<ng-container i18n=\"@@bb-confirmation-dialog.comment.optional-label\">Optional</ng-container>)\n        </span>\n        <bb-textarea-ui\n          #commentField\n          wrap=\"hard\"\n          [rows]=\"3\"\n          [cols]=\"50\"\n          [minLength]=\"3\"\n          [maxLength]=\"140\"\n          [(ngModel)]=\"comment\"\n          showCharCounter=\"true\"\n          data-role=\"confirmation-comment\"\n        ></bb-textarea-ui>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          [color]=\"confirmButtonColor\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onConfirmAction()\"\n          [attr.data-role]=\"'confirm-action-btn'\"\n        >\n          <ng-content select=\"[confirmActionName]\"></ng-content>\n        </button>\n\n        <button\n          bbButton\n          (click)=\"onCancelAction()\"\n          [color]=\"cancelButtonColor\"\n          class=\"bb-button-bar__button\"\n          [attr.data-role]=\"'cancel-action-btn'\"\n        >\n          <ng-content select=\"[cancelActionName]\"></ng-content>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3$2.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-confirmation-dialog',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: 'confirmation-dialog.component.html',
                }]
        }], propDecorators: { confirmButtonColor: [{
                type: Input
            }], cancelButtonColor: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], confirmActionPayload: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }], attachComment: [{
                type: Input
            }], commentFieldLabel: [{
                type: Input
            }] } });

class AccountsListComponent {
    constructor() {
        this.isOpen = false;
        this.isPendigAccountOpen = false;
        this.statuses = payverisStatuses;
        /**
         * Open link account modal event emitter
         */
        this.openModal = new EventEmitter();
        /**
         * Loading activate account flag
         * Default value is false
         */
        this.isLoading = false;
        /**
         * Open account details modal event emitter
         */
        this.selectExternalAccount = new EventEmitter();
        /**
         * Delete account event emitter
         */
        this.deleteAccount = new EventEmitter();
        /**
         * Make transfer event emitter
         */
        this.makeTransfer = new EventEmitter();
        this.confirmationModalOpen = false;
    }
    onClickNewAccount() {
        this.openModal.emit();
    }
    populateAccount(account) {
        this.selectExternalAccount.emit(account);
    }
    onKeydown(event, account) {
        if (event.code === 'Space' || event.key === 'Enter') {
            if (account) {
                this.populateAccount(account);
            }
            else {
                this.onClickNewAccount();
            }
        }
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    manageConfirmationModal(account) {
        this.accountInfo = account;
        this.confirmationModalOpen = true;
    }
    onDeleteAccount(id) {
        this.deleteAccount.emit(id);
    }
    onMakeTransfer(account) {
        this.makeTransfer.emit(account.externalAccountId);
    }
}
/** @nocollapse */ AccountsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountsListComponent, selector: "bb-a2a-accounts-list", inputs: { accounts: "accounts", activateForm: "activateForm", isLoading: "isLoading" }, outputs: { openModal: "openModal", selectExternalAccount: "selectExternalAccount", deleteAccount: "deleteAccount", makeTransfer: "makeTransfer" }, ngImport: i0, template: "<div class=\"card\">\n  <div class=\"card-body\">\n    <div class=\"bb-list\">\n      <div\n        tabindex=\"0\"\n        role=\"button\"\n        class=\"bb-list__item\"\n        (keydown)=\"onKeydown($event, acc)\"\n        *ngFor=\"let acc of accounts; let odd = odd\"\n        (click)=\"populateAccount(acc)\"\n      >\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item\">\n            <div\n              class=\"bb-block--sm\"\n              [class.d-none]=\"acc.status === 'Active'\"\n              data-role=\"payord-a2a-accounts-list-status-badge\"\n            >\n              <span class=\"d-none\" aria-hidden=\"true\" i18n=\"@@payord-a2a-account-list-status-badge.label\" #label>\n                {acc.status, select, InProcess {IN PROCESS} PendingActivation {PENDING ACTIVATION} FailedVerification\n                {FAILED ACTIVATION} RejectedByExternalBank {FAILED ACTIVATION} DisabledForExcessiveReturns {DISABLED}\n                DisabledForFraud {DISABLED} }\n              </span>\n              <bb-badge-ui\n                *ngIf=\"acc.status !== 'Active'\"\n                [color]=\"$any(statuses)[acc.status]\"\n                [text]=\"label.textContent\"\n              >\n              </bb-badge-ui>\n            </div>\n            <div class=\"bb-text-bold bb-block--sm\">\n              <span data-role=\"payord-a2a-accounts-list-name\">\n                {{ acc?.accountNickName || acc?.bankName }}\n              </span>\n            </div>\n            <div class=\"bb-text-support\">\n              <span data-role=\"payord-a2a-accounts-list-account-number\">\n                {{ acc.accountNumber }}\n              </span>\n            </div>\n          </div>\n          <div class=\"bb-stack__item--push-right btn-group-toggle\">\n            <div class=\"bb-button-bar\" (click)=\"populateAccount(acc)\">\n              <bb-dropdown-menu-ui\n                class=\"bb-button-bar__button\"\n                btnColor=\"link\"\n                (click)=\"stopPropagation($event)\"\n                (keydown)=\"stopPropagation($event)\"\n                btnCircle=\"true\"\n                container=\"body\"\n                data-role=\"a2a-more-options\"\n              >\n                <ng-template bbDropdownLabel>\n                  <span class=\"sr-only\" i18n=\"@@a2a-account-list.item.actions-dropdown-button\"\n                    >Actions dropdown button</span\n                  >\n                  <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n                </ng-template>\n                <ng-template bbDropdownMenuItem>\n                  <button\n                    *ngIf=\"acc.status === 'PendingActivation'\"\n                    role=\"menuitem\"\n                    type=\"button\"\n                    class=\"d-block d-sm-none dropdown-item\"\n                    placement=\"left\"\n                    i18n=\"@@payord-a2a-accounts-list.activate.account\"\n                    data-role=\"transfer-a2a-dropdown\"\n                    (click)=\"populateAccount(acc)\"\n                    (keydown)=\"onKeydown($event, acc)\"\n                  >\n                    Activate\n                  </button>\n                  <button\n                    role=\"menuitem\"\n                    type=\"button\"\n                    class=\"dropdown-item\"\n                    placement=\"left\"\n                    i18n=\"@@payord-a2a-accounts-list.make.transfer\"\n                    data-role=\"transfer-a2a-dropdown\"\n                    [hidden]=\"acc.status !== 'Active'\"\n                    (bbKeyboardClick)=\"onMakeTransfer(acc)\"\n                  >\n                    Make transfer\n                  </button>\n                  <button\n                    role=\"menuitem\"\n                    type=\"button\"\n                    class=\"dropdown-item\"\n                    placement=\"left\"\n                    (click)=\"populateAccount(acc)\"\n                    (keydown)=\"onKeydown($event, acc)\"\n                    i18n=\"@@payord-a2a-accounts-list.see.details\"\n                    data-role=\"details-a2a-dropdown\"\n                  >\n                    See details\n                  </button>\n                  <button\n                    role=\"menuitem\"\n                    type=\"button\"\n                    class=\"dropdown-item text-danger\"\n                    placement=\"left\"\n                    (click)=\"manageConfirmationModal(acc)\"\n                    (keydown.enter)=\"manageConfirmationModal(acc)\"\n                    i18n=\"@@payord-a2a-accounts-list.remove.account\"\n                    data-role=\"remove-a2a-dropdown\"\n                  >\n                    Remove\n                  </button>\n                </ng-template>\n              </bb-dropdown-menu-ui>\n\n              <button\n                class=\"d-none d-sm-block bb-button-bar__button\"\n                bbButton\n                *ngIf=\"acc.status === 'PendingActivation'\"\n                color=\"primary\"\n                type=\"submit\"\n                data-role=\"payord-a2a-activate-account.modal-activate-btn-text\"\n              >\n                <span i18n=\"@@payord-a2a-link.accounts.list.activate-btn.span\"> Activate </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<bb-confirmation-dialog\n  [isOpen]=\"confirmationModalOpen\"\n  [confirmButtonColor]=\"'danger'\"\n  (cancel)=\"confirmationModalOpen = false\"\n  (confirm)=\"confirmationModalOpen = false; onDeleteAccount(accountInfo?.externalAccountId)\"\n>\n  <span\n    title\n    data-role=\"payord-a2a-remove-modal-title\"\n    i18n=\"@@payord-a2a-accounts-list.confirmation-dialog.discard.title\"\n  >\n    Remove \"{{ accountInfo?.accountNickName || accountInfo?.bankName }}\" account?\n  </span>\n  <span\n    body\n    data-role=\"payord-a2a-remove-modal-message\"\n    i18n=\"@@payord-a2a-accounts-list.confirmation-dialog.discard.body\"\n  >\n    Removing this account will permanently erase the data entered.\n  </span>\n  <span confirmActionName i18n=\"@@payord-a2a-accounts-list.confirmation-dialog.discard.action.confirm\"> Remove </span>\n  <span cancelActionName i18n=\"@@payord-a2a-accounts-list.confirmation-dialog.discard.action.cancel\"> Cancel </span>\n</bb-confirmation-dialog>\n", components: [{ type: i2.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i2$2.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$2.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2$2.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i6$1.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-a2a-accounts-list',
                    templateUrl: './accounts-list.component.html',
                }]
        }], propDecorators: { openModal: [{
                type: Output
            }], accounts: [{
                type: Input
            }], activateForm: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], selectExternalAccount: [{
                type: Output
            }], deleteAccount: [{
                type: Output
            }], makeTransfer: [{
                type: Output
            }] } });

const formatAccountNumber = (n) => (n && n.replace(/\s+/g, '')) || '';
const validateNumber = (event) => {
    const { metaKey, ctrlKey, keyCode, key } = event;
    const pattern = /^\d+$/;
    const excludedKeys = [8, 16, 37, 38, 93, 39, 9];
    const ctrlKeys = metaKey || ctrlKey;
    const keyCodes = [65, 67, 86, 88];
    const allowedCommands = ctrlKeys && keyCodes.includes(keyCode);
    if (!pattern.test(key) && !excludedKeys.includes(keyCode) && !allowedCommands) {
        event.preventDefault();
    }
};
function amountValidator(control) {
    return control.value && control.value.amount > 0 && control.value.currency.length > 0
        ? undefined
        : { invalidAmount: { value: control.value } };
}
function routingTransitNumberValidator(control) {
    let { value } = control;
    const errors = {
        pattern: false,
        size: false,
    };
    if (value) {
        value = value.toString(10);
        const p = (str) => parseInt(str, 10);
        if (value.length !== 9)
            errors.size = true;
        const left = 3 * (p(value[0]) + p(value[3]) + p(value[6]));
        const mid = 7 * (p(value[1]) + p(value[4]) + p(value[7]));
        const right = p(value[2]) + p(value[5]) + p(value[8]);
        if ((left + mid + right) % 10 !== 0 && value.length >= 9)
            errors.pattern = true;
    }
    return errors.size || errors.pattern ? errors : null;
}

class ActivateExternalAccountComponent {
    constructor() {
        this.numberValidation = validateNumber;
        /**
         * Submitted form flag
         * Default value is false
         */
        this.submitted = false;
        /**
         * Form fields disabled flag
         * Default value is false
         */
        this.isDisabled = false;
        /**
         * Currency list
         */
        this.currencies = [];
        /**
         * Set decimals fields values event emitter
         */
        this.setDecimalsValues = new EventEmitter();
        this.currencyState = { currency: true, integer: true, decimal: false };
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control === null || control === void 0 ? void 0 : control.valid;
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.activateAccountForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    onSetDecimalsValues(name) {
        const value = this.activateAccountForm.controls[name].value;
        const field = { name, value };
        this.setDecimalsValues.emit(field);
    }
}
/** @nocollapse */ ActivateExternalAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActivateExternalAccountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ActivateExternalAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ActivateExternalAccountComponent, selector: "bb-activate-a2a-account", inputs: { submitted: "submitted", activateAccountForm: "activateAccountForm", isDisabled: "isDisabled", currencies: "currencies" }, outputs: { setDecimalsValues: "setDecimalsValues" }, ngImport: i0, template: "<form [formGroup]=\"activateAccountForm\" class=\"form-group\">\n  <div class=\"bb-label\" id=\"firstAmountLabel\" i18n=\"@@payord-a2a-activate-account.first.amount\">First amount</div>\n  <div class=\"row col-md-8 col-sm-8\">\n    <bb-currency-input-ui\n      [attr.data-role]=\"'first-decimal-input'\"\n      aria-labelledby=\"firstAmountLabel\"\n      [disabled]=\"currencyState\"\n      [currencies]=\"currencies\"\n      formControlName=\"firstAmount\"\n      [placeholder]=\"'00'\"\n      [required]=\"true\"\n      [isRightAligned]=\"true\"\n    ></bb-currency-input-ui>\n  </div>\n\n  <div class=\"form-group\">\n    <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('firstAmount')\">\n      <ng-container *ngIf=\"submitted && activateAccountForm?.get('firstAmount')?.errors as errors\">\n        <span\n          *ngIf=\"errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.required.Decimals\"\n          data-role=\"payord-a2a-activate-account-first-decimals-required-message\"\n        >\n          Amount is required.\n        </span>\n        <span\n          *ngIf=\"errors.minValue && !errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.pattern.Decimals\"\n          data-role=\"payord-a2a-activate-account-first-Decimals-pattern-message\"\n        >\n          Amount is invalid.\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-label\" id=\"secondAmountLabel\" i18n=\"@@payord-a2a-activate-account.second.amount\">Second amount</div>\n\n  <div class=\"row col-md-8 col-sm-8\">\n    <bb-currency-input-ui\n      [attr.data-role]=\"'second-decimal-input'\"\n      aria-labelledby=\"secondAmountLabel\"\n      [disabled]=\"currencyState\"\n      [currencies]=\"currencies\"\n      formControlName=\"secondAmount\"\n      [required]=\"true\"\n      [placeholder]=\"'00'\"\n      [isRightAligned]=\"true\"\n    ></bb-currency-input-ui>\n  </div>\n\n  <div>\n    <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('secondAmount')\">\n      <ng-container *ngIf=\"submitted && activateAccountForm?.get('secondAmount')?.errors as errors\">\n        <span\n          *ngIf=\"errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.required.Decimals\"\n          data-role=\"payord-a2a-activate-account-second-decimals-required-message\"\n        >\n          Amount is required.\n        </span>\n        <span\n          *ngIf=\"errors.minValue && !errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.pattern.Decimals\"\n          data-role=\"payord-a2a-activate-account-second-Decimals-pattern-message\"\n        >\n          Amount is invalid.\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n</form>\n", components: [{ type: i1$1.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i2$3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i3$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActivateExternalAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-activate-a2a-account',
                    templateUrl: 'activate-account-form.component.html',
                }]
        }], propDecorators: { submitted: [{
                type: Input
            }], activateAccountForm: [{
                type: Input
            }], isDisabled: [{
                type: Input
            }], currencies: [{
                type: Input
            }], setDecimalsValues: [{
                type: Output
            }] } });

class EmptyListComponent {
    constructor() {
        /**
         * Open modal event emitter
         */
        this.openModal = new EventEmitter();
    }
    openAccountModal() {
        this.openModal.emit();
    }
}
/** @nocollapse */ EmptyListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ EmptyListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EmptyListComponent, selector: "bb-a2a-empty-list", outputs: { openModal: "openModal" }, ngImport: i0, template: "<div class=\"bb-state-container card\">\n  <bb-empty-state-ui\n    class=\"bb-empty-state__container bb-block bb-block--md\"\n    i18n-title=\"@@link-account.state.noLinkedAccount.title\"\n    title=\"You have not connected any account yet\"\n    i18n-subtitle=\"@@link-account.state.noLinkedAccount.subtitle\"\n    subtitle=\"You need to connect your accounts before starting free fees transfers.\"\n    iconSize=\"xxl\"\n    iconModifier=\"swap-horiz\"\n  >\n  </bb-empty-state-ui>\n  <div class=\"bb-text-align-center bb-block bb-block--md\">\n    <button\n      bbButton\n      (click)=\"openAccountModal()\"\n      data-role=\"payord-a2a-linked-external-account-action-btn\"\n      buttonSize=\"md\"\n    >\n      <span\n        i18n=\"@@payments.link-account.dialog.action.open\"\n        data-role=\"payord-a2a-linked-external-account-action-btn-text\"\n      >\n        Connect account\n      </span>\n    </button>\n  </div>\n</div>\n", components: [{ type: i1$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-a2a-empty-list',
                    templateUrl: './empty-list.component.html',
                }]
        }], propDecorators: { openModal: [{
                type: Output
            }] } });

class LinkAccountInfoComponent {
}
/** @nocollapse */ LinkAccountInfoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LinkAccountInfoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LinkAccountInfoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LinkAccountInfoComponent, selector: "bb-a2a-link-account-steps", inputs: { step: "step", stepIcon: "stepIcon", stepName: "stepName", stepDescription: "stepDescription" }, ngImport: i0, template: `
    <div class="bb-stack bb-stack--density-sm bb-subtitle" data-role="payord-a2a-link-account-info-step-info">
      <bb-icon-ui
        class="bb-stack__item"
        color="primary"
        name="{{ stepIcon }}"
        size="sm"
        data-role="icon-insert-link-sm"
      >
      </bb-icon-ui>
      <span class="bb-stack__item" data-role="payord-a2a-link-account-info-step-name">
        {{ stepName }}
      </span>
    </div>
    <div
      [ngClass]="{ 'bb-block bb-block--xl': stepIcon === 'access-time' }"
      class="bb-text-support bb-subtitle"
      data-role="payord-a2a-link-account-info-step-description"
    >
      {{ stepDescription }}
    </div>
  `, isInline: true, components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LinkAccountInfoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-a2a-link-account-steps',
                    template: `
    <div class="bb-stack bb-stack--density-sm bb-subtitle" data-role="payord-a2a-link-account-info-step-info">
      <bb-icon-ui
        class="bb-stack__item"
        color="primary"
        name="{{ stepIcon }}"
        size="sm"
        data-role="icon-insert-link-sm"
      >
      </bb-icon-ui>
      <span class="bb-stack__item" data-role="payord-a2a-link-account-info-step-name">
        {{ stepName }}
      </span>
    </div>
    <div
      [ngClass]="{ 'bb-block bb-block--xl': stepIcon === 'access-time' }"
      class="bb-text-support bb-subtitle"
      data-role="payord-a2a-link-account-info-step-description"
    >
      {{ stepDescription }}
    </div>
  `,
                }]
        }], propDecorators: { step: [{
                type: Input
            }], stepIcon: [{
                type: Input
            }], stepName: [{
                type: Input
            }], stepDescription: [{
                type: Input
            }] } });

var ModalState;
(function (ModalState) {
    ModalState[ModalState["Preview"] = 0] = "Preview";
    ModalState[ModalState["Hidden"] = 1] = "Hidden";
})(ModalState || (ModalState = {}));

class LinkAccountModalComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        /**
         * Modal open flag
         * Default value is false
         */
        this.modalOpen = false;
        /**
         * Submitted form flag
         * Default value is false
         */
        this.submitted = false;
        /**
         * Loading data flag
         * Default value is false
         */
        this.isLoading = false;
        /**
         * Submit form event emitter
         */
        this.submitForm = new EventEmitter();
        /**
         * Discard account form data event emitter
         */
        this.discardData = new EventEmitter();
        /**
         * Build account form event emitter
         */
        this.buildForm = new EventEmitter();
        this.confirmationModalOpen = false;
        this.numberValidator = validateNumber;
        this.gc$ = new Subject();
        this.preventFormDiscard = false;
        this.states = ModalState;
        this.state$ = new BehaviorSubject(ModalState.Hidden);
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control === null || control === void 0 ? void 0 : control.valid;
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.accountForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
    onSubmit() {
        this.submitForm.emit();
        this.modalOpen = false;
        this.state$ = this.modalState;
    }
    onDiscard() {
        this.discardData.emit();
    }
    manageConfirmationModal() {
        if (this.preventFormDiscard) {
            this.confirmationModalOpen = true;
        }
        else {
            this.onDiscard();
            this.closeModal();
        }
    }
    openModal() {
        this.buildForm.emit();
        this.state$.next(ModalState.Preview);
    }
    closeModal() {
        this.state$.next(ModalState.Hidden);
    }
    ngOnChanges() {
        if (this.accountForm) {
            this.accountForm.valueChanges.pipe(takeUntil(this.gc$), distinctUntilChanged()).subscribe(formValues => {
                this.preventFormDiscard = Object.values(formValues).some(value => !!value);
            });
        }
    }
}
/** @nocollapse */ LinkAccountModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LinkAccountModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LinkAccountModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LinkAccountModalComponent, selector: "bb-a2a-link-account-form", inputs: { modalOpen: "modalOpen", accountForm: "accountForm", submitted: "submitted", isLoading: "isLoading", formInputLengths: "formInputLengths", modalState: "modalState" }, outputs: { submitForm: "submitForm", discardData: "discardData", buildForm: "buildForm" }, usesOnChanges: true, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"states.Preview === (state$ | async) || modalOpen\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div\n        class=\"modal-title\"\n        i18n=\"@@a2a-link-account.dialog.header\"\n        data-role=\"payord-a2a-link-account-dialog-header\"\n      >\n        Connect external account\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item\">\n          <div class=\"row\">\n            <form class=\"col-md-6\" [formGroup]=\"accountForm\" *ngIf=\"accountForm\">\n              <div class=\"form-group\">\n                <label\n                  class=\"bb-label\"\n                  [for]=\"AccountName.id\"\n                  data-role=\"payord-debit-create-CountrySubDivision-label\"\n                  i18n=\"@@payord-a2a-link-account.modal.AccountName.label\"\n                >\n                  Account name\n                </label>\n                <bb-input-text-ui\n                  #AccountName\n                  data-role=\"payord-a2a-link-account-AccountName-input\"\n                  [aria-label]=\"'Account Name'\"\n                  formControlName=\"inputAccountName\"\n                  [readonly]=\"false\"\n                  [maxLength]=\"formInputLengths?.name\"\n                  [autocomplete]=\"'name'\"\n                  i18n-aria-label=\"@@payord-a2a-link-account.modal.AccountName\"\n                >\n                </bb-input-text-ui>\n                <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputAccountName')\">\n                  <span\n                    *ngIf=\"submitted && hasRequiredError('inputAccountName')\"\n                    i18n=\"@@payord-a2a-link-account.modal.required.AccountName\"\n                    data-role=\"payord-a2a-link-account-AccountName-required-message\"\n                  >\n                    Field is required.\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n\n              <div class=\"form-group\">\n                <label\n                  class=\"bb-label\"\n                  [for]=\"AccountType.id\"\n                  data-role=\"payord-debit-create-CountrySubDivision-label\"\n                  i18n=\"@@payord-a2a-link-account.modal.AccountType.label\"\n                >\n                  Account type\n                </label>\n                <bb-dropdown-single-select-ui\n                  #AccountType\n                  data-role=\"payord-a2a-link-account-AccountType-select\"\n                  aria-label=\"Account Type\"\n                  formControlName=\"accountTypeSelect\"\n                  placeholder=\"- select an account type -\"\n                  i18n-aria-label=\"@@payord-a2a-link-account.modal.label.AccountType\"\n                  i18n-placeholder=\"@@payord-a2a-link-account.modal.placeholder.AccountType\"\n                >\n                  <bb-dropdown-single-select-option-ui\n                    class=\"text-capitalize\"\n                    [value]=\"'Savings'\"\n                    [label]=\"'Savings Account'\"\n                    data-role=\"payord-a2a-link-account-AccountType-savings\"\n                    i18n-label=\"@@payord-a2a-link-account.modal.label.Savings\"\n                  >\n                  </bb-dropdown-single-select-option-ui>\n                  <bb-dropdown-single-select-option-ui\n                    class=\"text-capitalize\"\n                    [value]=\"'Checking'\"\n                    [label]=\"'Checking Account'\"\n                    data-role=\"payord-a2a-link-account-AccountType-checking\"\n                    i18n-label=\"@@payord-a2a-link-account.modal.label.Checking\"\n                  >\n                  </bb-dropdown-single-select-option-ui>\n                </bb-dropdown-single-select-ui>\n                <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('accountTypeSelect')\">\n                  <span\n                    *ngIf=\"submitted && hasRequiredError('accountTypeSelect')\"\n                    i18n=\"@@payord-a2a-link-account.modal.required.AccountType\"\n                    data-role=\"payord-a2a-link-account-AccountType-required-message\"\n                  >\n                    Field is required.\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n\n              <div class=\"bb-block bb-block--sm\">\n                <label\n                  class=\"bb-label\"\n                  [for]=\"AccountNumber.id\"\n                  data-role=\"payord-debit-create-CountrySubDivision-label\"\n                  i18n=\"@@payord-a2a-link-account.modal.AccountNumber.label\"\n                >\n                  Account number\n                </label>\n                <bb-input-text-ui\n                  #AccountNumber\n                  data-role=\"payord-a2a-link-account-AccountNumber-input\"\n                  aria-label=\"Account Number\"\n                  formControlName=\"inputAccountNumber\"\n                  [readonly]=\"false\"\n                  [maxLength]=\"formInputLengths?.number\"\n                  [autocomplete]=\"'name'\"\n                  i18n-aria-label=\"@@payord-a2a-link-account.modal.AccountNumber\"\n                  (keydown)=\"numberValidator($event)\"\n                >\n                </bb-input-text-ui>\n                <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputAccountNumber')\">\n                  <span\n                    *ngIf=\"submitted && hasRequiredError('inputAccountNumber')\"\n                    i18n=\"@@payord-a2a-link-account.modal.required.AccountNumber\"\n                    data-role=\"payord-a2a-link-account-AccountNumber-required-message\"\n                  >\n                    Field is required.\n                  </span>\n                  <ng-container *ngIf=\"accountForm.controls['inputAccountNumber'] as accNumber\">\n                    <span\n                      *ngIf=\"accNumber.touched && accNumber?.errors?.pattern\"\n                      i18n=\"@@payord-a2a-link-account.modal.pattern.AccountNumber\"\n                      data-role=\"payord-a2a-link-account-AccountNumber-pattern-message\"\n                    >\n                      Account number you have entered is invalid.\n                    </span>\n                  </ng-container>\n                </bb-input-validation-message-ui>\n              </div>\n\n              <div\n                class=\"bb-block bb-block--md bb-text-support bb-subtitle\"\n                data-role=\"payord-a2a-link-account-AccountNumber-example\"\n                i18n=\"@@payord-a2a-link.account.number.example\"\n              >\n                E.g. 001234567890\n              </div>\n\n              <div class=\"bb-block bb-block--sm\">\n                <label\n                  class=\"bb-label\"\n                  [for]=\"TransitNumber.id\"\n                  data-role=\"payord-debit-create-CountrySubDivision-label\"\n                  i18n=\"@@payord-a2a-link-account.modal.RoutingNumber.label\"\n                >\n                  Routing transit number\n                </label>\n                <bb-input-text-ui\n                  #TransitNumber\n                  data-role=\"payord-a2a-link-account-RoutingNumber-input\"\n                  aria-label=\"Routing Number\"\n                  formControlName=\"inputRoutingNumber\"\n                  [readonly]=\"false\"\n                  [maxLength]=\"formInputLengths?.routingNumber\"\n                  i18n-aria-label=\"@@payord-a2a-link-account.modal.RoutingNumber\"\n                  (keydown)=\"numberValidator($event)\"\n                >\n                </bb-input-text-ui>\n                <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputRoutingNumber')\">\n                  <span\n                    *ngIf=\"submitted && hasRequiredError('inputRoutingNumber')\"\n                    i18n=\"@@payord-a2a-link-account.modal.required.RoutingNumber\"\n                    data-role=\"payord-a2a-link-account-RoutingNumber-required-message\"\n                  >\n                    Field is required.\n                  </span>\n                  <ng-container *ngIf=\"accountForm.controls['inputRoutingNumber'] as routingNumber\">\n                    <span\n                      *ngIf=\"routingNumber.touched && routingNumber.errors && routingNumber.errors.size\"\n                      i18n=\"@@payord-a2a-link-account.modal.size.RoutingNumber\"\n                      data-role=\"payord-a2a-link-account-RoutingNumber-size-message\"\n                    >\n                      Branch code can only be 9 digit code.\n                    </span>\n                    <span\n                      *ngIf=\"routingNumber.touched && routingNumber.errors && routingNumber.errors.pattern\"\n                      i18n=\"@@payord-a2a-link-account.modal.pattern.RoutingNumber\"\n                      data-role=\"payord-a2a-link-account-RoutingNumber-pattern-message\"\n                    >\n                      Branch code you have entered is invalid.\n                    </span>\n                  </ng-container>\n                </bb-input-validation-message-ui>\n              </div>\n              <span\n                class=\"bb-text-support bb-subtitle\"\n                data-role=\"payord-a2a-link-account-RoutingNumber-example\"\n                i18n=\"@@payord-a2a-link.account.routing.example\"\n              >\n                E.g. 021000021\n              </span>\n            </form>\n          </div>\n        </div>\n        <div class=\"bb-list__item\">\n          <ng-container *ngTemplateOutlet=\"bbPayordA2ALinkAccountModalInformation\"></ng-container>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          color=\"primary\"\n          type=\"submit\"\n          class=\"bb-button-bar__button\"\n          [isLoading]=\"isLoading\"\n          (click)=\"onSubmit()\"\n          data-role=\"payord-a2a-link-account.modal-link-btn-text\"\n          i18n=\"@@payord-link-account.modal.link-account-btn.span\"\n        >\n          Connect\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          type=\"reset\"\n          class=\"bb-button-bar__button\"\n          (click)=\"manageConfirmationModal()\"\n          data-role=\"payord-a2a-link-account.modal-cancel-btn-text\"\n        >\n          <span i18n=\"@@payord-link-account.modal.cancel-btn.span\"> Cancel </span>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<bb-confirmation-dialog\n  [isOpen]=\"confirmationModalOpen\"\n  [confirmButtonColor]=\"'danger'\"\n  (cancel)=\"confirmationModalOpen = false\"\n  (confirm)=\"onDiscard(); confirmationModalOpen = false\"\n>\n  <span\n    title\n    class=\"modal-title\"\n    data-role=\"payord-a2a-link-account.confirmation-dialog-content\"\n    i18n=\"@@payord-link-account.confirmation-dialog.discard.title\"\n  >\n    Discard account\n  </span>\n  <span\n    body\n    data-role=\"payord-a2a-link-account.confirmation-dialog.discard.body\"\n    i18n=\"@@payord-a2a-link-account.confirmation-dialog.discard.body\"\n  >\n    Are you sure you want to discard the account? The data you have entered will be lost.\n  </span>\n  <span confirmActionName i18n=\"@@payord-a2a-link-account.confirmation-dialog.discard.action.confirm\">\n    Yes, Discard\n  </span>\n  <span cancelActionName i18n=\"@@payord-a2a-link-account.confirmation-dialog.discard.action.cancel\"> Keep data </span>\n</bb-confirmation-dialog>\n\n<ng-template #bbPayordA2ALinkAccountModalInformation>\n  <bb-a2a-link-account-steps\n    [stepIcon]=\"'access-time'\"\n    stepName=\"Wait 1-3 business days\"\n    stepDescription=\"You will receive two micro deposits in your external account\"\n    i18n-stepName=\"@@payord-a2a-link.step-2.account.modal.name\"\n    i18n-stepDescription=\"@@payord-a2a-link.step-2.account.modal.description\"\n  >\n  </bb-a2a-link-account-steps>\n  <bb-a2a-link-account-steps\n    [stepIcon]=\"'check'\"\n    stepName=\"Activate account\"\n    stepDescription=\"Use the two micro deposits to activate your account\"\n    i18n-stepName=\"@@payord-a2a-link.step-3.account.modal.name\"\n    i18n-stepDescription=\"@@payord-a2a-link.step-3.account.modal.description\"\n  >\n  </bb-a2a-link-account-steps>\n</ng-template>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2$4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i2$3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i4.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i5$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }, { type: LinkAccountInfoComponent, selector: "bb-a2a-link-account-steps", inputs: ["step", "stepIcon", "stepName", "stepDescription"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LinkAccountModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-a2a-link-account-form',
                    templateUrl: './link-account-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { modalOpen: [{
                type: Input
            }], accountForm: [{
                type: Input
            }], submitted: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], formInputLengths: [{
                type: Input
            }], modalState: [{
                type: Input
            }], submitForm: [{
                type: Output
            }], discardData: [{
                type: Output
            }], buildForm: [{
                type: Output
            }] } });

class PendingActivationAccountDetailsComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        /**
         * Open account details modal flag
         * Default value is false
         */
        this.isOpen = false;
        /**
         * Loading flag
         * Default value is false
         */
        this.loading = false;
        /**
         * Submitted form flag
         * Default value is false
         */
        this.submitted = false;
        /**
         * Activate account failure flag
         * Default value is false
         */
        this.activationFailed = false;
        /**
         * Activate account attempts
         * Default value is false
         */
        this.attemptsExceeded = false;
        /**
         * Ivalid activation amount
         * Default value is false
         */
        this.invalidAmount = false;
        /**
         * List of currencies
         */
        this.currencies = [];
        /**
         * Open account details modal event emitter
         */
        this.openDetailsModal = new EventEmitter();
        /**
         * Close account details modal event emitter
         */
        this.closeModal = new EventEmitter();
        /**
         * Refresh account list event emitter
         */
        this.refreshList = new EventEmitter();
        /**
         * Submit form event emitter
         */
        this.submitForm = new EventEmitter();
        /**
         * Account status event emitter
         */
        this.setAccountStatus = new EventEmitter();
        /**
         * Account activation attempts exceeded event emitter
         */
        this.setAttemptsExceeded = new EventEmitter();
        /**
         * Invalid amount on account activation event emitter
         */
        this.setInvalidAmount = new EventEmitter();
        this.isAccountOpen = true;
        this.confirmationModalOpen = false;
        this.areDetailsOpen = false;
        this.mequieromorir = true;
    }
    onClose() {
        const formControls = this.activateAccountForm.controls;
        if ((formControls.firstAmount.value['amount'] || formControls.secondAmount.value['amount']) &&
            !this.attemptsExceeded) {
            this.confirmationModalOpen = true;
        }
        else {
            this.closeModal.emit();
            this.setAccountStatus.emit();
            this.areDetailsOpen = false;
            this.refreshAccountsList();
        }
    }
    setOpenValue() {
        this.isAccountOpen = !this.isAccountOpen;
    }
    onSubmit() {
        this.submitForm.emit();
    }
    refreshAccountsList() {
        if (this.attemptsExceeded) {
            this.refreshList.emit();
            this.setAttemptsExceeded.emit();
        }
        else if (this.invalidAmount) {
            this.setInvalidAmount.emit();
        }
    }
    toggleDisplayDetails() {
        this.areDetailsOpen = !this.areDetailsOpen;
    }
    onCloseConfirmationModal() {
        this.setAccountStatus.emit();
        this.areDetailsOpen = false;
        this.confirmationModalOpen = false;
    }
}
/** @nocollapse */ PendingActivationAccountDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PendingActivationAccountDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PendingActivationAccountDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PendingActivationAccountDetailsComponent, selector: "bb-pending-activation-account-details", inputs: { isOpen: "isOpen", externalAccount: "externalAccount", activateAccountForm: "activateAccountForm", loading: "loading", submitted: "submitted", activationFailed: "activationFailed", attemptsExceeded: "attemptsExceeded", invalidAmount: "invalidAmount", currencies: "currencies" }, outputs: { openDetailsModal: "openDetailsModal", closeModal: "closeModal", refreshList: "refreshList", submitForm: "submitForm", setAccountStatus: "setAccountStatus", setAttemptsExceeded: "setAttemptsExceeded", setInvalidAmount: "setInvalidAmount" }, ngImport: i0, template: "<bb-modal-ui *ngIf=\"externalAccount as account\" [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-a2a-details-header\n    [account]=\"account\"\n    (closeModal)=\"onClose()\"\n    [attemptsExceeded]=\"attemptsExceeded\"\n  ></bb-a2a-details-header>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div *ngIf=\"activationFailed && !attemptsExceeded\">\n        <bb-alert-ui\n          title=\"The entered deposit amounts are incorrect. Please try again.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-excessive-returns-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.incorrect-amounts.title\"\n        >\n        </bb-alert-ui>\n      </div>\n      <div *ngIf=\"attemptsExceeded\">\n        <bb-alert-ui\n          title=\"The activation of your account has failed\"\n          message=\"You have exceeded the number of attempts to activate your account. To continue, please raise a new request.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-pending-activation-failed-verification-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.failed-verification.title\"\n          i18n-message=\"@@payord-a2a.pending.activation.failed-verification.message\"\n        >\n        </bb-alert-ui>\n      </div>\n      <div *ngIf=\"invalidAmount\">\n        <bb-alert-ui\n          title=\"The activation of your account has failed\"\n          message=\"Value must be between 0 and 51 cents.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-pending-activation-invalid-amount-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.invalid-amount.title\"\n          i18n-message=\"@@payord-a2a.pending.activation.invalid-amount.message\"\n        >\n        </bb-alert-ui>\n      </div>\n      <ng-container>\n        <div class=\"bb-block bb-block--lg\">\n          <span\n            data-role=\"payord-a2a-pending-activation-activate-account.information.message\"\n            i18n-message=\"@@payord-a2a.pending.activation.activate-account-information.message\"\n          >\n            Insert below the two amounts under 50 cents that were credited to your connected account.<br />\n            The order of the payments does not influence the activation.\n          </span>\n        </div>\n        <bb-activate-a2a-account\n          *ngIf=\"isOpen\"\n          [activateAccountForm]=\"activateAccountForm\"\n          [submitted]=\"submitted\"\n          [isDisabled]=\"attemptsExceeded\"\n          [currencies]=\"currencies\"\n        ></bb-activate-a2a-account>\n      </ng-container>\n      <bb-collapsible-ui [isOpen]=\"areDetailsOpen\" #collapse>\n        <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n          <div class=\"bb-block bb-block--lg bb-stack\">\n            <button\n              class=\"text-primary bb-text-bold\"\n              bbButton\n              [color]=\"'link-text'\"\n              buttonSize=\"md\"\n              (click)=\"toggleDisplayDetails()\"\n              data-role=\"toggle-details-button\"\n            >\n              <bb-icon-ui\n                class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                size=\"md\"\n                [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n              ></bb-icon-ui>\n              <p\n                class=\"bb-stack__item bb-block bb-block--no-margin\"\n                *ngIf=\"isOpen\"\n                data-role=\"payord-a2a-account-details-modal-hide-info-text\"\n                i18n=\"@@payord-a2a.pending.activation.hide.details\"\n              >\n                Hide account details\n              </p>\n              <p\n                class=\"bb-stack__item bb-block bb-block--no-margin\"\n                *ngIf=\"!isOpen\"\n                data-role=\"payord-a2a-account-details-modal-show-info-text\"\n                i18n=\"@@payord-a2a.pending.activation.show.details\"\n              >\n                Show account details\n              </p>\n            </button>\n          </div>\n        </ng-template>\n        <ng-template bbCollapsibleBody>\n          <bb-a2a-account-information [account]=\"account\"></bb-a2a-account-information>\n        </ng-template>\n      </bb-collapsible-ui>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui *ngIf=\"!attemptsExceeded\">\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          [isLoading]=\"loading\"\n          (click)=\"onSubmit()\"\n          data-role=\"payord-a2a-activate-account-modal\"\n          i18n=\"@@payord-a2a-pending.activation.activate-account-btn.span\"\n        >\n          Activate\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"payord-a2a-activate-account-modal-cancel\"\n          i18n=\"@@payord-a2a-pending.activation.cancel-btn.span\"\n          (click)=\"onClose()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<bb-confirmation-dialog\n  [isOpen]=\"confirmationModalOpen\"\n  [confirmButtonColor]=\"'danger'\"\n  (cancel)=\"confirmationModalOpen = false\"\n  (confirm)=\"closeModal.emit(); refreshAccountsList(); onCloseConfirmationModal()\"\n>\n  <span\n    title\n    class=\"modal-title\"\n    data-role=\"payord-a2a-activate-account.confirmation-dialog-content\"\n    i18n=\"@@payord-activate-account.confirmation-dialog.discard.title\"\n  >\n    Discard amount(s)\n  </span>\n  <span\n    body\n    data-role=\"payord-a2a-activate-account.confirmation-dialog.discard.body\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.body\"\n  >\n    Are you sure you want to discard the amount(s)? The data you have entered will be lost.\n  </span>\n  <span\n    confirmActionName\n    data-role=\"payord-a2a-activate-account-confirmation-dialog-cancel\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.action.confirm\"\n  >\n    Yes, Discard\n  </span>\n  <span\n    cancelActionName\n    data-role=\"payord-a2a-activate-account-confirmation-dialog-keep\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.action.cancel\"\n  >\n    Keep data\n  </span>\n</bb-confirmation-dialog>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: AccountDetailModalHeaderComponent, selector: "bb-a2a-details-header", inputs: ["account", "attemptsExceeded"], outputs: ["closeModal"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: ActivateExternalAccountComponent, selector: "bb-activate-a2a-account", inputs: ["submitted", "activateAccountForm", "isDisabled", "currencies"], outputs: ["setDecimalsValues"] }, { type: i5$2.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: AccountInformationComponent, selector: "bb-a2a-account-information", inputs: ["account"] }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i5$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5$2.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5$2.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PendingActivationAccountDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pending-activation-account-details',
                    templateUrl: 'pending-activation-account-details.component.html',
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], externalAccount: [{
                type: Input
            }], activateAccountForm: [{
                type: Input
            }], loading: [{
                type: Input
            }], submitted: [{
                type: Input
            }], activationFailed: [{
                type: Input
            }], attemptsExceeded: [{
                type: Input
            }], invalidAmount: [{
                type: Input
            }], currencies: [{
                type: Input
            }], openDetailsModal: [{
                type: Output
            }], closeModal: [{
                type: Output
            }], refreshList: [{
                type: Output
            }], submitForm: [{
                type: Output
            }], setAccountStatus: [{
                type: Output
            }], setAttemptsExceeded: [{
                type: Output
            }], setInvalidAmount: [{
                type: Output
            }] } });

const components$1 = [
    LinkAccountModalComponent,
    LinkAccountInfoComponent,
    AccountsListComponent,
    AccountDetailModalComponent,
    ActivateExternalAccountComponent,
    EmptyListComponent,
    AccountDetailModalHeaderComponent,
    AccountInformationComponent,
    PendingActivationAccountDetailsComponent,
    ConfirmationDialogComponent,
];
const uiModules$1 = [
    EmptyStateModule,
    ButtonModule,
    ModalModule,
    InputTextModule,
    DropdownSingleSelectModule,
    InputValidationMessageModule,
    IconModule,
    AlertModule,
    NotificationModule,
    BadgeModule,
    LoadingIndicatorModule,
    CurrencyInputModule,
    CollapsibleModule,
    DropdownMenuModule,
    HeaderModule,
    LoadButtonModule,
    AlertModule,
    TextareaModule,
    KeyboardClickModule,
];
class ConnectExternalAccountsJourneyUiModule {
}
/** @nocollapse */ ConnectExternalAccountsJourneyUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ConnectExternalAccountsJourneyUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyUiModule, declarations: [LinkAccountModalComponent,
        LinkAccountInfoComponent,
        AccountsListComponent,
        AccountDetailModalComponent,
        ActivateExternalAccountComponent,
        EmptyListComponent,
        AccountDetailModalHeaderComponent,
        AccountInformationComponent,
        PendingActivationAccountDetailsComponent,
        ConfirmationDialogComponent], imports: [CommonModule, ReactiveFormsModule, EmptyStateModule,
        ButtonModule,
        ModalModule,
        InputTextModule,
        DropdownSingleSelectModule,
        InputValidationMessageModule,
        IconModule,
        AlertModule,
        NotificationModule,
        BadgeModule,
        LoadingIndicatorModule,
        CurrencyInputModule,
        CollapsibleModule,
        DropdownMenuModule,
        HeaderModule,
        LoadButtonModule,
        AlertModule,
        TextareaModule,
        KeyboardClickModule], exports: [EmptyStateModule,
        ButtonModule,
        ModalModule,
        InputTextModule,
        DropdownSingleSelectModule,
        InputValidationMessageModule,
        IconModule,
        AlertModule,
        NotificationModule,
        BadgeModule,
        LoadingIndicatorModule,
        CurrencyInputModule,
        CollapsibleModule,
        DropdownMenuModule,
        HeaderModule,
        LoadButtonModule,
        AlertModule,
        TextareaModule,
        KeyboardClickModule, LinkAccountModalComponent,
        LinkAccountInfoComponent,
        AccountsListComponent,
        AccountDetailModalComponent,
        ActivateExternalAccountComponent,
        EmptyListComponent,
        AccountDetailModalHeaderComponent,
        AccountInformationComponent,
        PendingActivationAccountDetailsComponent,
        ConfirmationDialogComponent] });
/** @nocollapse */ ConnectExternalAccountsJourneyUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyUiModule, imports: [[CommonModule, ReactiveFormsModule, ...uiModules$1], EmptyStateModule,
        ButtonModule,
        ModalModule,
        InputTextModule,
        DropdownSingleSelectModule,
        InputValidationMessageModule,
        IconModule,
        AlertModule,
        NotificationModule,
        BadgeModule,
        LoadingIndicatorModule,
        CurrencyInputModule,
        CollapsibleModule,
        DropdownMenuModule,
        HeaderModule,
        LoadButtonModule,
        AlertModule,
        TextareaModule,
        KeyboardClickModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyUiModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components$1],
                    imports: [CommonModule, ReactiveFormsModule, ...uiModules$1],
                    exports: [...uiModules$1, ...components$1],
                }]
        }] });

class LinkAccountService {
    constructor(paymentOrdersA2ADataHttpService) {
        this.paymentOrdersA2ADataHttpService = paymentOrdersA2ADataHttpService;
        this.isFormModalOpen = new BehaviorSubject(false);
        this.defaultAccount = {
            routingNumber: '',
            accountNickName: '',
            accountNumber: '',
        };
        this.responseError$ = new BehaviorSubject(undefined);
        this.refreshAccounts$ = new BehaviorSubject(this.defaultAccount);
        this.accounts$ = this.refreshAccounts$.pipe(switchMap(() => this.paymentOrdersA2ADataHttpService.getAll().pipe(catchError(err => {
            this.responseError$.next(err);
            return throwError(err);
        }), map(res => (res && res.accounts ? res.accounts : [])))));
    }
    postNewAccount(contactItem) {
        return this.paymentOrdersA2ADataHttpService.create({ externalAccountPostRequest: contactItem });
    }
    putNewAccountVerification(externalId, amounts) {
        return this.paymentOrdersA2ADataHttpService.verify({
            externalAccountId: externalId,
            externalAccountVerificationPutRequest: amounts,
        });
    }
    removeAccount(externalAccountId) {
        return this.paymentOrdersA2ADataHttpService._delete({ externalAccountId });
    }
    get isModalOpen() {
        return this.isFormModalOpen;
    }
    openModal(value = true) {
        this.isFormModalOpen.next(value);
    }
}
/** @nocollapse */ LinkAccountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LinkAccountService, deps: [{ token: i1$3.A2aClientHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LinkAccountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LinkAccountService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LinkAccountService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.A2aClientHttpService }]; } });

class ConnectExternalAccountsJourneyComponent {
    constructor(linkAccountService) {
        this.linkAccountService = linkAccountService;
    }
    initiateConnectAccount() {
        this.linkAccountService.openModal();
    }
}
/** @nocollapse */ ConnectExternalAccountsJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyComponent, deps: [{ token: LinkAccountService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ConnectExternalAccountsJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConnectExternalAccountsJourneyComponent, selector: "bb-connect-external-accounts-journey", providers: [LinkAccountService], ngImport: i0, template: "<div class=\"bb-stack bb-block bb-block--lg\">\n  <div class=\"bb-stack__item bb-stack__item--fill\">\n    <bb-header-ui\n      headingType=\"h1\"\n      heading=\"Connected Accounts\"\n      i18n-heading=\"@@connect-external-accounts-journey.title.connected-accounts\"\n      data-role=\"connect-external-accounts-title\"\n    >\n    </bb-header-ui>\n  </div>\n  <div class=\"bb-stack__item\">\n    <button bbButton color=\"secondary\" data-role=\"inititate-connect-account\" (click)=\"initiateConnectAccount()\">\n      <i class=\"bb-icon bb-icon-add\"></i>\n      <span\n        class=\"bb-accounts-overview-table__header-row\"\n        i18n=\"@@connect-external-accounts-journey.connect-account-button\"\n        >Connect account\n      </span>\n    </button>\n  </div>\n</div>\n<router-outlet></router-outlet>\n", components: [{ type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4$1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-connect-external-accounts-journey',
                    templateUrl: './connect-external-accounts-journey.component.html',
                    providers: [LinkAccountService],
                }]
        }], ctorParameters: function () { return [{ type: LinkAccountService }]; } });

const ConnectExternalAccountsJourneyConfigurationToken = new InjectionToken('ConnectExternalAccountsJourneyConfigurationToken injection token');
const configDefaults = {
    currencies: ['USD'],
    dismissMessageTime: 3000,
};
class ConnectExternalAccountsJourneyConfigService {
    constructor(config) {
        this.config = config;
        this._config = Object.assign(Object.assign({}, configDefaults), (this.config || {}));
    }
    get defaults() {
        return configDefaults;
    }
    get currencies() {
        return this._config.currencies;
    }
    get dismissMessageTime() {
        return this._config.dismissMessageTime;
    }
}
/** @nocollapse */ ConnectExternalAccountsJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyConfigService, deps: [{ token: ConnectExternalAccountsJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ConnectExternalAccountsJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ConnectExternalAccountsJourneyConfigurationToken]
                }] }]; } });

class ConnectExternalAccountsViewComponent {
    constructor(notificationService, formBuilder, linkAccountService, config, communicationService) {
        this.notificationService = notificationService;
        this.formBuilder = formBuilder;
        this.linkAccountService = linkAccountService;
        this.config = config;
        this.communicationService = communicationService;
        this.submitted = false;
        this.isModalOpen = false;
        this.a2aAccounts$ = this.linkAccountService.accounts$;
        this.loading$ = new BehaviorSubject(false);
        this.httpResponseError$ = this.linkAccountService.responseError$;
        this.modalState = new BehaviorSubject(undefined);
        this.activateAccountSubmitted = false;
        this.isPendigAccountOpen = false;
        this.isOpen = false;
        this.activationFailed = false;
        this.attemptsExceeded = false;
        this.defaultAmount = {
            currency: '',
            amount: '',
        };
        this.invalidAmount = false;
        this.destroy$ = new Subject();
        this.formInputLengths = FORM_INPUT_LENGTHS;
    }
    get currencies() {
        return this.config.currencies;
    }
    ngOnInit() {
        this.linkAccountService.isModalOpen
            .pipe(takeUntil(this.destroy$))
            .subscribe(isOpen => isOpen && this.onOpenModal());
    }
    showNotification(success, notification) {
        this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: this.config.dismissMessageTime, modifier: success ? 'success' : 'error' }, notification));
    }
    showSuccessNotification() {
        this.showNotification(true, {
            header: $localize `:@@connect-external-accounts-journey.account.notification.success:Information submitted successfully`,
            message: '',
        });
    }
    noWhitespaceValidator(control) {
        const isWhitespace = (control.value || '').trim().length === 0;
        const isValid = !isWhitespace;
        // eslint-disable-next-line no-null/no-null
        return isValid ? null : { required: true };
    }
    buildAccountForm() {
        return this.formBuilder.group({
            inputAccountName: ['', [Validators.required, this.noWhitespaceValidator]],
            accountTypeSelect: ['', Validators.required],
            inputAccountNumber: ['', [Validators.required, this.noWhitespaceValidator, Validators.pattern(/^\d+$/)]],
            inputRoutingNumber: ['', [Validators.required, routingTransitNumberValidator]],
        });
    }
    buildActivateAccountForm() {
        return this.formBuilder.group({
            firstAmount: [this.defaultAmount, [amountValidator]],
            secondAmount: [this.defaultAmount, [amountValidator]],
        });
    }
    closeModal() {
        this.isModalOpen = false;
    }
    onOpenModal() {
        this.isModalOpen = true;
        this.accountForm = this.buildAccountForm();
        this.modalState.next(ModalState.Preview);
    }
    onSubmit() {
        this.submitted = true;
        this.loading$.next(true);
        if (this.accountForm.invalid) {
            this.loading$.next(false);
            return;
        }
        const formValues = this.accountForm.value;
        const accountItem = {
            routingNumber: formValues.inputRoutingNumber,
            accountNickName: formValues.inputAccountName.trim(),
            accountNumber: formatAccountNumber(formValues.inputAccountNumber),
            accountType: formValues.accountTypeSelect,
        };
        this.linkAccountService
            .postNewAccount(accountItem)
            .pipe(takeUntil(this.destroy$), catchError(err => {
            this.showNotification(false, {
                header: $localize `:@@connect-external-accounts-journey.account.notification.failure:Account creation failed`,
                message: '',
            });
            this.loading$.next(false);
            return throwError(err);
        }))
            .subscribe(() => {
            this.loading$.next(false);
            this.showSuccessNotification();
            this.accountForm.reset();
            this.submitted = false;
            this.linkAccountService.refreshAccounts$.next(accountItem);
            this.modalState.next(ModalState.Hidden);
        });
    }
    onDiscardData() {
        this.isModalOpen = false;
        this.submitted = false;
        this.accountForm.reset();
    }
    setExternalAccount(externalAccount) {
        if (externalAccount.status === 'PendingActivation') {
            this.isPendigAccountOpen = true;
        }
        else {
            this.isOpen = true;
        }
        this.activateForm = this.buildActivateAccountForm();
        this.account = externalAccount;
    }
    closeDetailsModal() {
        this.isOpen = false;
    }
    closePendingAccountModal() {
        this.isPendigAccountOpen = false;
        this.activateAccountSubmitted = false;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onActivateAccount() {
        var _a, _b;
        const externalAccountId = (_a = this.account) === null || _a === void 0 ? void 0 : _a.externalAccountId;
        this.activateAccountSubmitted = true;
        this.loading$.next(true);
        if (((_b = this.activateForm) === null || _b === void 0 ? void 0 : _b.invalid) || !externalAccountId) {
            this.loading$.next(false);
            return;
        }
        const amounts = {
            value1: this.activateForm.value.firstAmount.amount,
            value2: this.activateForm.value.secondAmount.amount,
        };
        this.linkAccountService
            .putNewAccountVerification(externalAccountId, amounts)
            .pipe(takeUntil(this.destroy$))
            .subscribe(res => {
            this.isPendigAccountOpen = false;
            this.loading$.next(false);
            this.showSuccessNotification();
            this.activateForm.reset();
            this.activateAccountSubmitted = false;
            this.linkAccountService.refreshAccounts$.next(res);
        }, ({ error }) => {
            const { errors } = error;
            if (errors === null || errors === void 0 ? void 0 : errors.length) {
                this.manageResponseError(errors[0].key);
            }
            else {
                this.activationFailed = false;
            }
            this.showNotification(false, {
                header: $localize `:@@connect-external-accounts-journey.account.activation.failure.failure:Account activation failed`,
                message: '',
            });
            this.loading$.next(false);
        });
    }
    manageResponseError(key) {
        switch (key) {
            case RESPONSES.unmatchedKey:
                this.activationFailed = true;
                this.invalidAmount = false;
                break;
            case RESPONSES.exceededKey:
                this.attemptsExceeded = true;
                this.invalidAmount = false;
                break;
            case RESPONSES.invalidAmount:
                this.activationFailed = false;
                this.attemptsExceeded = false;
                this.invalidAmount = true;
        }
    }
    refreshAccountsList() {
        this.linkAccountService.refreshAccounts$.next(this.account);
        if (this.attemptsExceeded) {
            this.activateForm.controls['firstAmount'].disable();
            this.activateForm.controls['secondAmount'].disable();
        }
    }
    deleteAccount(id) {
        this.linkAccountService
            .removeAccount(id)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.refreshAccountsList();
            this.showNotification(true, {
                header: $localize `:@@connect-external-accounts-journey.account.success-message:Account removed successfully`,
                message: '',
            });
        }, () => {
            this.showNotification(false, {
                header: $localize `:@@connect-external-accounts-journey.account.failure-message:Account could not be removed`,
                message: '',
            });
        });
    }
    onCreatePayment(id) {
        if (this.communicationService) {
            this.communicationService.navigateToMakeTransfer(id);
        }
    }
    initiateConnectAccount() {
        this.onOpenModal();
    }
}
/** @nocollapse */ ConnectExternalAccountsViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsViewComponent, deps: [{ token: i1$4.NotificationService }, { token: i3$3.FormBuilder }, { token: LinkAccountService }, { token: ConnectExternalAccountsJourneyConfigService }, { token: CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ConnectExternalAccountsViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConnectExternalAccountsViewComponent, selector: "bb-connect-external-accounts-view", ngImport: i0, template: "<ng-container *ngIf=\"!(httpResponseError$ | async); else errorState\">\n  <ng-container *ngIf=\"a2aAccounts$ | async as accounts; else loadingA2AList\">\n    <div *ngIf=\"accounts?.length; else emptyList\">\n      <bb-a2a-accounts-list\n        (openModal)=\"onOpenModal()\"\n        [accounts]=\"accounts\"\n        (selectExternalAccount)=\"setExternalAccount($event)\"\n        [activateForm]=\"activateForm\"\n        [isLoading]=\"loading$ | async\"\n        (submitActivateForm)=\"onActivateAccount()\"\n        (deleteAccount)=\"deleteAccount($event)\"\n        (makeTransfer)=\"onCreatePayment($event)\"\n      ></bb-a2a-accounts-list>\n    </div>\n    <ng-template #emptyList>\n      <bb-a2a-empty-list (openModal)=\"onOpenModal()\"> </bb-a2a-empty-list>\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingA2AList>\n  <div class=\"bb-state-container card\">\n    <bb-loading-indicator-ui\n      text=\"Loading data...\"\n      text-i18n=\"@@bb-connected-external-accounts-journey.connected-external-accounts-view.loading-placeholder\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"bb-state-container card\">\n    <bb-empty-state-ui\n      title=\"Page couldn't load\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      i18n-title=\"@@connect-external-accounts-journey.error.state.title\"\n      i18n-subtitle=\"@@connect-external-accounts-journey.error.state.message\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<bb-a2a-link-account-form\n  [modalOpen]=\"isModalOpen\"\n  (isAccountModalOpen)=\"closeModal()\"\n  [accountForm]=\"accountForm\"\n  [submitted]=\"submitted\"\n  (submitForm)=\"onSubmit()\"\n  (discardData)=\"onDiscardData()\"\n  [isLoading]=\"loading$ | async\"\n  (buildForm)=\"onOpenModal()\"\n  [formInputLengths]=\"formInputLengths\"\n  [modalState]=\"modalState\"\n></bb-a2a-link-account-form>\n\n<bb-a2a-account-details\n  [isOpen]=\"isOpen\"\n  (closeModal)=\"closeDetailsModal()\"\n  [externalAccount]=\"account\"\n></bb-a2a-account-details>\n\n<bb-pending-activation-account-details\n  [isOpen]=\"isPendigAccountOpen\"\n  (closeModal)=\"closePendingAccountModal()\"\n  [externalAccount]=\"account\"\n  [activateAccountForm]=\"activateForm\"\n  [loading]=\"loading$ | async\"\n  [submitted]=\"activateAccountSubmitted\"\n  [activationFailed]=\"activationFailed\"\n  [attemptsExceeded]=\"attemptsExceeded\"\n  [invalidAmount]=\"invalidAmount\"\n  (submitForm)=\"onActivateAccount()\"\n  (refreshList)=\"refreshAccountsList()\"\n  (setAccountStatus)=\"activationFailed = false\"\n  (setAttemptsExceeded)=\"attemptsExceeded = false\"\n  (setInvalidAmount)=\"invalidAmount = false\"\n  [currencies]=\"currencies\"\n></bb-pending-activation-account-details>\n", components: [{ type: AccountsListComponent, selector: "bb-a2a-accounts-list", inputs: ["accounts", "activateForm", "isLoading"], outputs: ["openModal", "selectExternalAccount", "deleteAccount", "makeTransfer"] }, { type: EmptyListComponent, selector: "bb-a2a-empty-list", outputs: ["openModal"] }, { type: i8.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: LinkAccountModalComponent, selector: "bb-a2a-link-account-form", inputs: ["modalOpen", "accountForm", "submitted", "isLoading", "formInputLengths", "modalState"], outputs: ["submitForm", "discardData", "buildForm"] }, { type: AccountDetailModalComponent, selector: "bb-a2a-account-details", inputs: ["isOpen", "externalAccount"], outputs: ["closeModal"] }, { type: PendingActivationAccountDetailsComponent, selector: "bb-pending-activation-account-details", inputs: ["isOpen", "externalAccount", "activateAccountForm", "loading", "submitted", "activationFailed", "attemptsExceeded", "invalidAmount", "currencies"], outputs: ["openDetailsModal", "closeModal", "refreshList", "submitForm", "setAccountStatus", "setAttemptsExceeded", "setInvalidAmount"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-connect-external-accounts-view',
                    templateUrl: 'connect-external-accounts-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$4.NotificationService }, { type: i3$3.FormBuilder }, { type: LinkAccountService }, { type: ConnectExternalAccountsJourneyConfigService }, { type: CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });

const defaultRoute = {
    path: '',
    component: ConnectExternalAccountsJourneyComponent,
    children: [{ path: '', component: ConnectExternalAccountsViewComponent }],
};
const components = [ConnectExternalAccountsJourneyComponent, ConnectExternalAccountsViewComponent];
const uiModules = [EmptyStateModule, HeaderModule];
class ConnectExternalAccountsJourneyModule {
    static forRoot(data = { route: defaultRoute }) {
        return {
            ngModule: ConnectExternalAccountsJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
/** @nocollapse */ ConnectExternalAccountsJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ConnectExternalAccountsJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyModule, declarations: [ConnectExternalAccountsJourneyComponent, ConnectExternalAccountsViewComponent], imports: [CommonModule,
        RouterModule, i1$5.BackbaseCoreModule, ConnectExternalAccountsJourneyUiModule, EmptyStateModule, HeaderModule], exports: [EmptyStateModule, HeaderModule, ConnectExternalAccountsJourneyComponent, ConnectExternalAccountsViewComponent] });
/** @nocollapse */ ConnectExternalAccountsJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyModule, providers: [ConnectExternalAccountsJourneyConfigService], imports: [[
            CommonModule,
            RouterModule,
            BackbaseCoreModule.withConfig({
                classMap: {
                    ConnectExternalAccountsJourneyComponent,
                },
            }),
            ConnectExternalAccountsJourneyUiModule,
            ...uiModules,
        ], EmptyStateModule, HeaderModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [
                        CommonModule,
                        RouterModule,
                        BackbaseCoreModule.withConfig({
                            classMap: {
                                ConnectExternalAccountsJourneyComponent,
                            },
                        }),
                        ConnectExternalAccountsJourneyUiModule,
                        ...uiModules,
                    ],
                    exports: [...uiModules, ...components],
                    providers: [ConnectExternalAccountsJourneyConfigService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CommunicationService as ConnectExternalAccontsCommunicationService, ConnectExternalAccountsJourneyComponent, ConnectExternalAccountsJourneyConfigService, ConnectExternalAccountsJourneyConfigurationToken, ConnectExternalAccountsJourneyModule, ConnectExternalAccountsJourneyUiModule, ConnectExternalAccountsViewComponent, LinkAccountService, AccountDetailModalComponent as ӨAccountDetailModalComponent, AccountDetailModalHeaderComponent as ӨAccountDetailModalHeaderComponent, AccountInformationComponent as ӨAccountInformationComponent, AccountsListComponent as ӨAccountsListComponent, ActivateExternalAccountComponent as ӨActivateExternalAccountComponent, ConfirmationDialogComponent as ӨConfirmationDialogComponent, EmptyListComponent as ӨEmptyListComponent, LinkAccountInfoComponent as ӨLinkAccountInfoComponent, LinkAccountModalComponent as ӨLinkAccountModalComponent, PendingActivationAccountDetailsComponent as ӨPendingActivationAccountDetailsComponent };
//# sourceMappingURL=backbase-connect-external-accounts-journey-ang.js.map
