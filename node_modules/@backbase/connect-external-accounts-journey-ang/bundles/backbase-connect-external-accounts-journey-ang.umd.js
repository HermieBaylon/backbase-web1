(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/icon'), require('@angular/common'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/textarea'), require('@angular/forms'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/keyboard-click-directive'), require('@backbase/ui-ang/currency-input'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/notification'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/payment-order-a2a'), require('@angular/router'), require('@backbase/foundation-ang/core')) :
    typeof define === 'function' && define.amd ? define('@backbase/connect-external-accounts-journey-ang', ['exports', '@angular/core', '@backbase/ui-ang/modal', '@backbase/ui-ang/badge', '@backbase/ui-ang/icon', '@angular/common', '@backbase/ui-ang/alert', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/header', '@backbase/ui-ang/textarea', '@angular/forms', '@backbase/ui-ang/button', '@backbase/ui-ang/keyboard-click-directive', '@backbase/ui-ang/currency-input', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/input-text', '@backbase/ui-ang/load-button', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/notification', 'rxjs', 'rxjs/operators', '@backbase/data-ang/payment-order-a2a', '@angular/router', '@backbase/foundation-ang/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["connect-external-accounts-journey-ang"] = {}), global.ng.core, global.i1, global.i2, global.i3, global.ng.common, global.i3$1, global.i2$2, global.i2$1, global.i3$2, global.ng.forms, global.i6, global.i6$1, global.i1$1, global.i2$3, global.i5$2, global.i4, global.i1$2, global.i2$4, global.i5$1, global.i8, global.i1$3, global.rxjs, global.rxjs.operators, global.i1$4, global.ng.router, global.i1$5));
})(this, (function (exports, i0, i1, i2, i3, i5, i3$1, i2$2, i2$1, i3$2, i3$3, i6, i6$1, i1$1, i2$3, i5$2, i4, i1$2, i2$4, i5$1, i8, i1$3, rxjs, operators, i1$4, i4$1, i1$5) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i3__namespace$3 = /*#__PURE__*/_interopNamespace(i3$3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$4);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);

    var CommunicationService = /** @class */ (function () {
        function CommunicationService() {
        }
        return CommunicationService;
    }());

    var FORM_INPUT_LENGTHS = {
        name: 30,
        number: 17,
        routingNumber: 9,
    };
    var externalAcc = 'EXTERNAL_ACCOUNT_VERIFICATION_';
    var RESPONSES = {
        unmatchedKey: externalAcc + "FAILURE",
        exceededKey: externalAcc + "EXCEEDED_MAX_ATTEMPTS",
        invalidAmount: externalAcc + "INVALID_DEPOSIT_AMOUNTS",
    };
    var payverisStatuses = {
        InProcess: 'warning',
        PendingActivation: 'warning',
        FailedVerification: 'danger',
        RejectedByExternalBank: 'danger',
        DisabledForExcessiveReturns: 'secondary',
        DisabledForFraud: 'secondary',
    };
    var responses = {
        unmatchedKey: externalAcc + "FAILURE",
        exceededKey: externalAcc + "EXCEEDED_MAX_ATTEMPTS",
        invalidAmount: externalAcc + "INVALID_DEPOSIT_AMOUNTS",
    };
    var failedStatuses = {
        FailedVerification: 'FailedVerification',
        RejectedByExternalBank: 'RejectedByExternalBank',
        DisabledForExcessiveReturns: 'DisabledForExcessiveReturns',
        DisabledForFraud: 'DisabledForFraud',
    };

    var AccountDetailModalHeaderComponent = /** @class */ (function () {
        function AccountDetailModalHeaderComponent() {
            this.statuses = payverisStatuses;
            /**
             * Activate account attempts exceeded flag
             * Default value is false
             */
            this.attemptsExceeded = false;
            /**
             * Close modal event emitter
             */
            this.closeModal = new i0.EventEmitter();
        }
        AccountDetailModalHeaderComponent.prototype.closeDetailModal = function () {
            this.closeModal.emit();
        };
        return AccountDetailModalHeaderComponent;
    }());
    /** @nocollapse */ AccountDetailModalHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountDetailModalHeaderComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccountDetailModalHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountDetailModalHeaderComponent, selector: "bb-a2a-details-header", inputs: { account: "account", attemptsExceeded: "attemptsExceeded" }, outputs: { closeModal: "closeModal" }, ngImport: i0__namespace, template: "<bb-modal-header-ui>\n  <ng-template bbCustomModalHeader>\n    <div>\n      <div data-role=\"payord-a2a-account-details-modal-header\">\n        <h5\n          [attr.aria-label]=\"account.accountNickName || account.bankName\"\n          i18n-attr.aria-label=\"dialog header for the selected a2a account details@@payord-a2a.account.details.header\"\n        >\n          <span class=\"modal-title\" data-role=\"payord-a2a-account-details-modal-name\">\n            {{ account?.accountNickName || account?.bankName }}\n          </span>\n        </h5>\n        <span class=\"d-none\" aria-hidden=\"true\" i18n=\"@@payord-a2a-account-details-status-badge.label\" #label>\n          {account.status, select, InProcess {IN PROCESS} PendingActivation {PENDING ACTIVATION} FailedVerification\n          {FAILED ACTIVATION} RejectedByExternalBank {FAILED ACTIVATION} DisabledForExcessiveReturns {DISABLED}\n          DisabledForFraud {DISABLED} }\n        </span>\n        <bb-badge-ui\n          *ngIf=\"account.status !== 'Active' && !attemptsExceeded\"\n          data-role=\"payord-a2a-account-details-modal-account-status\"\n          [color]=\"statuses[account.status]\"\n          [text]=\"label.textContent\"\n        ></bb-badge-ui>\n\n        <bb-badge-ui\n          *ngIf=\"attemptsExceeded\"\n          color=\"danger\"\n          text=\"FAILED ACTIVATION\"\n          data-role=\"payord-a2a-account-details-modal-account-disabled-status\"\n          i18n-text=\"@@payord-a2a-account-details-disabled-status-badge.text\"\n        ></bb-badge-ui>\n      </div>\n    </div>\n    <div>\n      <button\n        (click)=\"closeDetailModal()\"\n        type=\"button\"\n        class=\"close m-0 p-0\"\n        aria-label=\"Close payment detail dialog\"\n        data-role=\"close-payord-a2a-account-details-modal\"\n        i18n-aria-label=\"@@payord-a2a.account.details-clear.button\"\n      >\n        <bb-icon-ui name=\"clear\"></bb-icon-ui>\n      </button>\n    </div>\n  </ng-template>\n</bb-modal-header-ui>\n", components: [{ type: i1__namespace.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2__namespace.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1__namespace.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountDetailModalHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-a2a-details-header',
                        templateUrl: './details-header.component.html',
                    }]
            }], propDecorators: { account: [{
                    type: i0.Input
                }], attemptsExceeded: [{
                    type: i0.Input
                }], closeModal: [{
                    type: i0.Output
                }] } });

    var AccountInformationComponent = /** @class */ (function () {
        function AccountInformationComponent() {
        }
        return AccountInformationComponent;
    }());
    /** @nocollapse */ AccountInformationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountInformationComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccountInformationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInformationComponent, selector: "bb-a2a-account-information", inputs: { account: "account" }, ngImport: i0__namespace, template: "<div class=\"row\">\n  <div class=\"col-12\" [ngClass]=\"{ 'col-md-6': account?.status === 'PendingActivation' }\">\n    <div class=\"bb-block bb-block--md\">\n      <div\n        class=\"bb-label\"\n        data-role=\"payord-a2a-account-details-modal-account-type-title\"\n        i18n=\"@@payord-a2a.account.details.type\"\n      >\n        Account type\n      </div>\n      <div class=\"bb-text-support\">\n        <span data-role=\"payord-a2a-account-details-modal-account-type\" i18n=\"@@payord-a2a.account.details.type.text\">\n          {account?.accountType, select, Savings {Saving's account} Checking {Checking's account} }\n        </span>\n      </div>\n    </div>\n\n    <div class=\"bb-block--md\">\n      <div\n        class=\"bb-label\"\n        data-role=\"payord-a2a-account-details-modal-account-number-title\"\n        i18n=\"@@payord-a2a.account.details.account.number\"\n      >\n        Account number\n      </div>\n      <div class=\"bb-text-support\" data-role=\"payord-a2a-account-details-modal-account-number\">\n        {{ account?.accountNumber }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-12\" [ngClass]=\"{ 'col-md-6': account?.status === 'PendingActivation' }\">\n    <div class=\"bb-block--md\">\n      <div\n        class=\"bb-label\"\n        data-role=\"payord-a2a-account-details-modal-bank-name-title\"\n        i18n=\"@@payord-a2a.account.details.bank.name\"\n      >\n        Bank name\n      </div>\n      <div class=\"bb-text-support\" data-role=\"payord-a2a-account-details-modal-bank-name\">\n        {{ account?.bankName }}\n      </div>\n    </div>\n\n    <div class=\"bb-block--md\">\n      <div\n        class=\"bb-label\"\n        data-role=\"payord-a2a-account-details-modal-routing-number-title\"\n        i18n=\"@@payord-a2a.account.details.routing.number\"\n      >\n        Routing transit number\n      </div>\n      <div class=\"bb-text-support\" data-role=\"payord-a2a-account-details-modal-routing-number\">\n        {{ account?.routingNumber }}\n      </div>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i5__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountInformationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-a2a-account-information',
                        templateUrl: './account-information.component.html',
                    }]
            }], propDecorators: { account: [{
                    type: i0.Input
                }] } });

    var AccountDetailModalComponent = /** @class */ (function () {
        function AccountDetailModalComponent() {
            this.modalOptions = {
                backdrop: 'static',
                keyboard: false,
            };
            this.statuses = failedStatuses;
            /**
             * Open account details modal flag
             * Default value is false
             */
            this.isOpen = false;
            /**
             * Close account details modal event emitter
             */
            this.closeModal = new i0.EventEmitter();
        }
        AccountDetailModalComponent.prototype.onClose = function () {
            this.closeModal.emit();
        };
        return AccountDetailModalComponent;
    }());
    /** @nocollapse */ AccountDetailModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountDetailModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccountDetailModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountDetailModalComponent, selector: "bb-a2a-account-details", inputs: { isOpen: "isOpen", externalAccount: "externalAccount" }, outputs: { closeModal: "closeModal" }, ngImport: i0__namespace, template: "<bb-modal-ui *ngIf=\"externalAccount as account\" [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-a2a-details-header [account]=\"account\" (closeModal)=\"onClose()\"> </bb-a2a-details-header>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngSwitch]=\"account.status\">\n        <bb-alert-ui\n          *ngSwitchCase=\"statuses.DisabledForExcessiveReturns\"\n          title=\"Your account was disabled for excessive returns\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-excessive-returns-error\"\n          i18n-title=\"@@payord-a2a.account.details.excessive-returns.title\"\n        >\n        </bb-alert-ui>\n        <bb-alert-ui\n          *ngSwitchCase=\"statuses.DisabledForFraud\"\n          title=\"Your account was disabled for fraud\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-fraud-error\"\n          i18n-title=\"@@payord-a2a.account.details.fraud.title\"\n        >\n        </bb-alert-ui>\n        <bb-alert-ui\n          *ngSwitchCase=\"statuses.FailedVerification\"\n          title=\"The activation of your account has failed\"\n          message=\"You have exceeded the number of attempts to activate your account. To continue, please raise a new request.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-failed-verification-error\"\n          i18n-title=\"@@payord-a2a.account.details.failed-verification.title\"\n          i18n-message=\"@@payord-a2a.account.details.failed-verification.message\"\n        >\n        </bb-alert-ui>\n        <bb-alert-ui\n          *ngSwitchCase=\"statuses.RejectedByExternalBank\"\n          title=\"The activation of your account was rejected by the external bank\"\n          message=\"For more information contact your provider.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-rejected-external-error\"\n          i18n-title=\"@@payord-a2a.account.details.rejected-external.title\"\n          i18n-message=\"@@payord-a2a.account.details.rejected-external.message\"\n        >\n        </bb-alert-ui>\n      </div>\n      <bb-a2a-account-information [account]=\"account\"></bb-a2a-account-information>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: AccountDetailModalHeaderComponent, selector: "bb-a2a-details-header", inputs: ["account", "attemptsExceeded"], outputs: ["closeModal"] }, { type: i1__namespace.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3__namespace$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: AccountInformationComponent, selector: "bb-a2a-account-information", inputs: ["account"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountDetailModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-a2a-account-details',
                        templateUrl: 'account-details.component.html',
                    }]
            }], propDecorators: { isOpen: [{
                    type: i0.Input
                }], externalAccount: [{
                    type: i0.Input
                }], closeModal: [{
                    type: i0.Output
                }] } });

    var ConfirmationDialogComponent = /** @class */ (function () {
        function ConfirmationDialogComponent() {
            this.modalOptions = {
                backdrop: 'static',
                keyboard: false,
            };
            this.comment = '';
            /**
             * The button color for confirm button
             * Default value is `primary`.
             */
            this.confirmButtonColor = 'primary';
            /**
             * The button color for cancel button
             * Default value is `link`.
             */
            this.cancelButtonColor = 'link';
            /**
             * Indicator for confirmation dialog open state.
             * Default value is `false`.
             */
            this.isOpen = false;
            /**
             * Changes will be triggered on confirmAction event emit.
             */
            this.confirm = new i0.EventEmitter();
            /**
             * Changes will be triggered on cancel event emit.
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Show the field for the comment
             * Default value is `false`.
             */
            this.attachComment = false;
            /**
             * Text for comment field label,
             * Default value is `Add comment`.
             */
            this.commentFieldLabel = 'Add comment';
        }
        ConfirmationDialogComponent.prototype.resetComment = function () {
            if (this.attachComment) {
                this.comment = '';
            }
        };
        ConfirmationDialogComponent.prototype.onCancelAction = function () {
            this.cancel.emit();
            this.resetComment();
        };
        ConfirmationDialogComponent.prototype.onConfirmAction = function () {
            var _a, _b;
            var _comment = this.comment.trim();
            var emitValue = (_a = this.confirmActionPayload) === null || _a === void 0 ? void 0 : _a.payload;
            if (this.attachComment && !!_comment) {
                emitValue = {
                    payload: (_b = this.confirmActionPayload) === null || _b === void 0 ? void 0 : _b.payload,
                    comment: _comment,
                };
            }
            this.confirm.emit(emitValue);
            this.resetComment();
        };
        return ConfirmationDialogComponent;
    }());
    /** @nocollapse */ ConfirmationDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmationDialogComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ConfirmationDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: { confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", isOpen: "isOpen", confirmActionPayload: "confirmActionPayload", attachComment: "attachComment", commentFieldLabel: "commentFieldLabel" }, outputs: { confirm: "confirm", cancel: "cancel" }, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <span #headerContent class=\"d-none\" aria-hidden=\"true\">\n        <ng-content select=\"[title]\"></ng-content>\n      </span>\n      <bb-header-ui\n        headingType=\"h2\"\n        [heading]=\"headerContent.textContent\"\n        [attr.data-role]=\"'confirmation-header'\"\n      ></bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngClass]=\"{ 'bb-block bb-block--md': attachComment }\">\n        <ng-content select=\"[body]\"></ng-content>\n      </div>\n\n      <ng-container *ngIf=\"attachComment && isOpen\">\n        <label [for]=\"commentField.id\" i18n=\"@@bb-confirmation-dialog.comment\">{{ commentFieldLabel }}</label>\n        <span class=\"bb-text-support\">\n          (<ng-container i18n=\"@@bb-confirmation-dialog.comment.optional-label\">Optional</ng-container>)\n        </span>\n        <bb-textarea-ui\n          #commentField\n          wrap=\"hard\"\n          [rows]=\"3\"\n          [cols]=\"50\"\n          [minLength]=\"3\"\n          [maxLength]=\"140\"\n          [(ngModel)]=\"comment\"\n          showCharCounter=\"true\"\n          data-role=\"confirmation-comment\"\n        ></bb-textarea-ui>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          [color]=\"confirmButtonColor\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onConfirmAction()\"\n          [attr.data-role]=\"'confirm-action-btn'\"\n        >\n          <ng-content select=\"[confirmActionName]\"></ng-content>\n        </button>\n\n        <button\n          bbButton\n          (click)=\"onCancelAction()\"\n          [color]=\"cancelButtonColor\"\n          class=\"bb-button-bar__button\"\n          [attr.data-role]=\"'cancel-action-btn'\"\n        >\n          <ng-content select=\"[cancelActionName]\"></ng-content>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2__namespace$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1__namespace.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3__namespace$2.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i1__namespace.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1__namespace.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmationDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-confirmation-dialog',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        templateUrl: 'confirmation-dialog.component.html',
                    }]
            }], propDecorators: { confirmButtonColor: [{
                    type: i0.Input
                }], cancelButtonColor: [{
                    type: i0.Input
                }], isOpen: [{
                    type: i0.Input
                }], confirmActionPayload: [{
                    type: i0.Input
                }], confirm: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }], attachComment: [{
                    type: i0.Input
                }], commentFieldLabel: [{
                    type: i0.Input
                }] } });

    var AccountsListComponent = /** @class */ (function () {
        function AccountsListComponent() {
            this.isOpen = false;
            this.isPendigAccountOpen = false;
            this.statuses = payverisStatuses;
            /**
             * Open link account modal event emitter
             */
            this.openModal = new i0.EventEmitter();
            /**
             * Loading activate account flag
             * Default value is false
             */
            this.isLoading = false;
            /**
             * Open account details modal event emitter
             */
            this.selectExternalAccount = new i0.EventEmitter();
            /**
             * Delete account event emitter
             */
            this.deleteAccount = new i0.EventEmitter();
            /**
             * Make transfer event emitter
             */
            this.makeTransfer = new i0.EventEmitter();
            this.confirmationModalOpen = false;
        }
        AccountsListComponent.prototype.onClickNewAccount = function () {
            this.openModal.emit();
        };
        AccountsListComponent.prototype.populateAccount = function (account) {
            this.selectExternalAccount.emit(account);
        };
        AccountsListComponent.prototype.onKeydown = function (event, account) {
            if (event.code === 'Space' || event.key === 'Enter') {
                if (account) {
                    this.populateAccount(account);
                }
                else {
                    this.onClickNewAccount();
                }
            }
        };
        AccountsListComponent.prototype.stopPropagation = function (event) {
            event.stopPropagation();
        };
        AccountsListComponent.prototype.manageConfirmationModal = function (account) {
            this.accountInfo = account;
            this.confirmationModalOpen = true;
        };
        AccountsListComponent.prototype.onDeleteAccount = function (id) {
            this.deleteAccount.emit(id);
        };
        AccountsListComponent.prototype.onMakeTransfer = function (account) {
            this.makeTransfer.emit(account.externalAccountId);
        };
        return AccountsListComponent;
    }());
    /** @nocollapse */ AccountsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountsListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccountsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountsListComponent, selector: "bb-a2a-accounts-list", inputs: { accounts: "accounts", activateForm: "activateForm", isLoading: "isLoading" }, outputs: { openModal: "openModal", selectExternalAccount: "selectExternalAccount", deleteAccount: "deleteAccount", makeTransfer: "makeTransfer" }, ngImport: i0__namespace, template: "<div class=\"card\">\n  <div class=\"card-body\">\n    <div class=\"bb-list\">\n      <div\n        tabindex=\"0\"\n        role=\"button\"\n        class=\"bb-list__item\"\n        (keydown)=\"onKeydown($event, acc)\"\n        *ngFor=\"let acc of accounts; let odd = odd\"\n        (click)=\"populateAccount(acc)\"\n      >\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item\">\n            <div\n              class=\"bb-block--sm\"\n              [class.d-none]=\"acc.status === 'Active'\"\n              data-role=\"payord-a2a-accounts-list-status-badge\"\n            >\n              <span class=\"d-none\" aria-hidden=\"true\" i18n=\"@@payord-a2a-account-list-status-badge.label\" #label>\n                {acc.status, select, InProcess {IN PROCESS} PendingActivation {PENDING ACTIVATION} FailedVerification\n                {FAILED ACTIVATION} RejectedByExternalBank {FAILED ACTIVATION} DisabledForExcessiveReturns {DISABLED}\n                DisabledForFraud {DISABLED} }\n              </span>\n              <bb-badge-ui\n                *ngIf=\"acc.status !== 'Active'\"\n                [color]=\"$any(statuses)[acc.status]\"\n                [text]=\"label.textContent\"\n              >\n              </bb-badge-ui>\n            </div>\n            <div class=\"bb-text-bold bb-block--sm\">\n              <span data-role=\"payord-a2a-accounts-list-name\">\n                {{ acc?.accountNickName || acc?.bankName }}\n              </span>\n            </div>\n            <div class=\"bb-text-support\">\n              <span data-role=\"payord-a2a-accounts-list-account-number\">\n                {{ acc.accountNumber }}\n              </span>\n            </div>\n          </div>\n          <div class=\"bb-stack__item--push-right btn-group-toggle\">\n            <div class=\"bb-button-bar\" (click)=\"populateAccount(acc)\">\n              <bb-dropdown-menu-ui\n                class=\"bb-button-bar__button\"\n                btnColor=\"link\"\n                (click)=\"stopPropagation($event)\"\n                (keydown)=\"stopPropagation($event)\"\n                btnCircle=\"true\"\n                container=\"body\"\n                data-role=\"a2a-more-options\"\n              >\n                <ng-template bbDropdownLabel>\n                  <span class=\"sr-only\" i18n=\"@@a2a-account-list.item.actions-dropdown-button\"\n                    >Actions dropdown button</span\n                  >\n                  <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n                </ng-template>\n                <ng-template bbDropdownMenuItem>\n                  <button\n                    *ngIf=\"acc.status === 'PendingActivation'\"\n                    role=\"menuitem\"\n                    type=\"button\"\n                    class=\"d-block d-sm-none dropdown-item\"\n                    placement=\"left\"\n                    i18n=\"@@payord-a2a-accounts-list.activate.account\"\n                    data-role=\"transfer-a2a-dropdown\"\n                    (click)=\"populateAccount(acc)\"\n                    (keydown)=\"onKeydown($event, acc)\"\n                  >\n                    Activate\n                  </button>\n                  <button\n                    role=\"menuitem\"\n                    type=\"button\"\n                    class=\"dropdown-item\"\n                    placement=\"left\"\n                    i18n=\"@@payord-a2a-accounts-list.make.transfer\"\n                    data-role=\"transfer-a2a-dropdown\"\n                    [hidden]=\"acc.status !== 'Active'\"\n                    (bbKeyboardClick)=\"onMakeTransfer(acc)\"\n                  >\n                    Make transfer\n                  </button>\n                  <button\n                    role=\"menuitem\"\n                    type=\"button\"\n                    class=\"dropdown-item\"\n                    placement=\"left\"\n                    (click)=\"populateAccount(acc)\"\n                    (keydown)=\"onKeydown($event, acc)\"\n                    i18n=\"@@payord-a2a-accounts-list.see.details\"\n                    data-role=\"details-a2a-dropdown\"\n                  >\n                    See details\n                  </button>\n                  <button\n                    role=\"menuitem\"\n                    type=\"button\"\n                    class=\"dropdown-item text-danger\"\n                    placement=\"left\"\n                    (click)=\"manageConfirmationModal(acc)\"\n                    (keydown.enter)=\"manageConfirmationModal(acc)\"\n                    i18n=\"@@payord-a2a-accounts-list.remove.account\"\n                    data-role=\"remove-a2a-dropdown\"\n                  >\n                    Remove\n                  </button>\n                </ng-template>\n              </bb-dropdown-menu-ui>\n\n              <button\n                class=\"d-none d-sm-block bb-button-bar__button\"\n                bbButton\n                *ngIf=\"acc.status === 'PendingActivation'\"\n                color=\"primary\"\n                type=\"submit\"\n                data-role=\"payord-a2a-activate-account.modal-activate-btn-text\"\n              >\n                <span i18n=\"@@payord-a2a-link.accounts.list.activate-btn.span\"> Activate </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<bb-confirmation-dialog\n  [isOpen]=\"confirmationModalOpen\"\n  [confirmButtonColor]=\"'danger'\"\n  (cancel)=\"confirmationModalOpen = false\"\n  (confirm)=\"confirmationModalOpen = false; onDeleteAccount(accountInfo?.externalAccountId)\"\n>\n  <span\n    title\n    data-role=\"payord-a2a-remove-modal-title\"\n    i18n=\"@@payord-a2a-accounts-list.confirmation-dialog.discard.title\"\n  >\n    Remove \"{{ accountInfo?.accountNickName || accountInfo?.bankName }}\" account?\n  </span>\n  <span\n    body\n    data-role=\"payord-a2a-remove-modal-message\"\n    i18n=\"@@payord-a2a-accounts-list.confirmation-dialog.discard.body\"\n  >\n    Removing this account will permanently erase the data entered.\n  </span>\n  <span confirmActionName i18n=\"@@payord-a2a-accounts-list.confirmation-dialog.discard.action.confirm\"> Remove </span>\n  <span cancelActionName i18n=\"@@payord-a2a-accounts-list.confirmation-dialog.discard.action.cancel\"> Cancel </span>\n</bb-confirmation-dialog>\n", components: [{ type: i2__namespace.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i2__namespace$2.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$2.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2__namespace$2.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i6__namespace$1.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-a2a-accounts-list',
                        templateUrl: './accounts-list.component.html',
                    }]
            }], propDecorators: { openModal: [{
                    type: i0.Output
                }], accounts: [{
                    type: i0.Input
                }], activateForm: [{
                    type: i0.Input
                }], isLoading: [{
                    type: i0.Input
                }], selectExternalAccount: [{
                    type: i0.Output
                }], deleteAccount: [{
                    type: i0.Output
                }], makeTransfer: [{
                    type: i0.Output
                }] } });

    var formatAccountNumber = function (n) { return (n && n.replace(/\s+/g, '')) || ''; };
    var validateNumber = function (event) {
        var metaKey = event.metaKey, ctrlKey = event.ctrlKey, keyCode = event.keyCode, key = event.key;
        var pattern = /^\d+$/;
        var excludedKeys = [8, 16, 37, 38, 93, 39, 9];
        var ctrlKeys = metaKey || ctrlKey;
        var keyCodes = [65, 67, 86, 88];
        var allowedCommands = ctrlKeys && keyCodes.includes(keyCode);
        if (!pattern.test(key) && !excludedKeys.includes(keyCode) && !allowedCommands) {
            event.preventDefault();
        }
    };
    function amountValidator(control) {
        return control.value && control.value.amount > 0 && control.value.currency.length > 0
            ? undefined
            : { invalidAmount: { value: control.value } };
    }
    function routingTransitNumberValidator(control) {
        var value = control.value;
        var errors = {
            pattern: false,
            size: false,
        };
        if (value) {
            value = value.toString(10);
            var p = function (str) { return parseInt(str, 10); };
            if (value.length !== 9)
                errors.size = true;
            var left = 3 * (p(value[0]) + p(value[3]) + p(value[6]));
            var mid = 7 * (p(value[1]) + p(value[4]) + p(value[7]));
            var right = p(value[2]) + p(value[5]) + p(value[8]);
            if ((left + mid + right) % 10 !== 0 && value.length >= 9)
                errors.pattern = true;
        }
        return errors.size || errors.pattern ? errors : null;
    }

    var ActivateExternalAccountComponent = /** @class */ (function () {
        function ActivateExternalAccountComponent() {
            this.numberValidation = validateNumber;
            /**
             * Submitted form flag
             * Default value is false
             */
            this.submitted = false;
            /**
             * Form fields disabled flag
             * Default value is false
             */
            this.isDisabled = false;
            /**
             * Currency list
             */
            this.currencies = [];
            /**
             * Set decimals fields values event emitter
             */
            this.setDecimalsValues = new i0.EventEmitter();
            this.currencyState = { currency: true, integer: true, decimal: false };
        }
        ActivateExternalAccountComponent.prototype.isFieldValid = function (fieldName) {
            var control = this.getControl(fieldName);
            return control === null || control === void 0 ? void 0 : control.valid;
        };
        ActivateExternalAccountComponent.prototype.getControl = function (fieldName) {
            var _a;
            return (_a = this.activateAccountForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
        };
        ActivateExternalAccountComponent.prototype.onSetDecimalsValues = function (name) {
            var value = this.activateAccountForm.controls[name].value;
            var field = { name: name, value: value };
            this.setDecimalsValues.emit(field);
        };
        return ActivateExternalAccountComponent;
    }());
    /** @nocollapse */ ActivateExternalAccountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ActivateExternalAccountComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ActivateExternalAccountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ActivateExternalAccountComponent, selector: "bb-activate-a2a-account", inputs: { submitted: "submitted", activateAccountForm: "activateAccountForm", isDisabled: "isDisabled", currencies: "currencies" }, outputs: { setDecimalsValues: "setDecimalsValues" }, ngImport: i0__namespace, template: "<form [formGroup]=\"activateAccountForm\" class=\"form-group\">\n  <div class=\"bb-label\" id=\"firstAmountLabel\" i18n=\"@@payord-a2a-activate-account.first.amount\">First amount</div>\n  <div class=\"row col-md-8 col-sm-8\">\n    <bb-currency-input-ui\n      [attr.data-role]=\"'first-decimal-input'\"\n      aria-labelledby=\"firstAmountLabel\"\n      [disabled]=\"currencyState\"\n      [currencies]=\"currencies\"\n      formControlName=\"firstAmount\"\n      [placeholder]=\"'00'\"\n      [required]=\"true\"\n      [isRightAligned]=\"true\"\n    ></bb-currency-input-ui>\n  </div>\n\n  <div class=\"form-group\">\n    <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('firstAmount')\">\n      <ng-container *ngIf=\"submitted && activateAccountForm?.get('firstAmount')?.errors as errors\">\n        <span\n          *ngIf=\"errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.required.Decimals\"\n          data-role=\"payord-a2a-activate-account-first-decimals-required-message\"\n        >\n          Amount is required.\n        </span>\n        <span\n          *ngIf=\"errors.minValue && !errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.pattern.Decimals\"\n          data-role=\"payord-a2a-activate-account-first-Decimals-pattern-message\"\n        >\n          Amount is invalid.\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-label\" id=\"secondAmountLabel\" i18n=\"@@payord-a2a-activate-account.second.amount\">Second amount</div>\n\n  <div class=\"row col-md-8 col-sm-8\">\n    <bb-currency-input-ui\n      [attr.data-role]=\"'second-decimal-input'\"\n      aria-labelledby=\"secondAmountLabel\"\n      [disabled]=\"currencyState\"\n      [currencies]=\"currencies\"\n      formControlName=\"secondAmount\"\n      [required]=\"true\"\n      [placeholder]=\"'00'\"\n      [isRightAligned]=\"true\"\n    ></bb-currency-input-ui>\n  </div>\n\n  <div>\n    <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('secondAmount')\">\n      <ng-container *ngIf=\"submitted && activateAccountForm?.get('secondAmount')?.errors as errors\">\n        <span\n          *ngIf=\"errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.required.Decimals\"\n          data-role=\"payord-a2a-activate-account-second-decimals-required-message\"\n        >\n          Amount is required.\n        </span>\n        <span\n          *ngIf=\"errors.minValue && !errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.pattern.Decimals\"\n          data-role=\"payord-a2a-activate-account-second-Decimals-pattern-message\"\n        >\n          Amount is invalid.\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n</form>\n", components: [{ type: i1__namespace$1.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i2__namespace$3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i3__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ActivateExternalAccountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-activate-a2a-account',
                        templateUrl: 'activate-account-form.component.html',
                    }]
            }], propDecorators: { submitted: [{
                    type: i0.Input
                }], activateAccountForm: [{
                    type: i0.Input
                }], isDisabled: [{
                    type: i0.Input
                }], currencies: [{
                    type: i0.Input
                }], setDecimalsValues: [{
                    type: i0.Output
                }] } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var EmptyListComponent = /** @class */ (function () {
        function EmptyListComponent() {
            /**
             * Open modal event emitter
             */
            this.openModal = new i0.EventEmitter();
        }
        EmptyListComponent.prototype.openAccountModal = function () {
            this.openModal.emit();
        };
        return EmptyListComponent;
    }());
    /** @nocollapse */ EmptyListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EmptyListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ EmptyListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EmptyListComponent, selector: "bb-a2a-empty-list", outputs: { openModal: "openModal" }, ngImport: i0__namespace, template: "<div class=\"bb-state-container card\">\n  <bb-empty-state-ui\n    class=\"bb-empty-state__container bb-block bb-block--md\"\n    i18n-title=\"@@link-account.state.noLinkedAccount.title\"\n    title=\"You have not connected any account yet\"\n    i18n-subtitle=\"@@link-account.state.noLinkedAccount.subtitle\"\n    subtitle=\"You need to connect your accounts before starting free fees transfers.\"\n    iconSize=\"xxl\"\n    iconModifier=\"swap-horiz\"\n  >\n  </bb-empty-state-ui>\n  <div class=\"bb-text-align-center bb-block bb-block--md\">\n    <button\n      bbButton\n      (click)=\"openAccountModal()\"\n      data-role=\"payord-a2a-linked-external-account-action-btn\"\n      buttonSize=\"md\"\n    >\n      <span\n        i18n=\"@@payments.link-account.dialog.action.open\"\n        data-role=\"payord-a2a-linked-external-account-action-btn-text\"\n      >\n        Connect account\n      </span>\n    </button>\n  </div>\n</div>\n", components: [{ type: i1__namespace$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EmptyListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-a2a-empty-list',
                        templateUrl: './empty-list.component.html',
                    }]
            }], propDecorators: { openModal: [{
                    type: i0.Output
                }] } });

    var LinkAccountInfoComponent = /** @class */ (function () {
        function LinkAccountInfoComponent() {
        }
        return LinkAccountInfoComponent;
    }());
    /** @nocollapse */ LinkAccountInfoComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LinkAccountInfoComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ LinkAccountInfoComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LinkAccountInfoComponent, selector: "bb-a2a-link-account-steps", inputs: { step: "step", stepIcon: "stepIcon", stepName: "stepName", stepDescription: "stepDescription" }, ngImport: i0__namespace, template: "\n    <div class=\"bb-stack bb-stack--density-sm bb-subtitle\" data-role=\"payord-a2a-link-account-info-step-info\">\n      <bb-icon-ui\n        class=\"bb-stack__item\"\n        color=\"primary\"\n        name=\"{{ stepIcon }}\"\n        size=\"sm\"\n        data-role=\"icon-insert-link-sm\"\n      >\n      </bb-icon-ui>\n      <span class=\"bb-stack__item\" data-role=\"payord-a2a-link-account-info-step-name\">\n        {{ stepName }}\n      </span>\n    </div>\n    <div\n      [ngClass]=\"{ 'bb-block bb-block--xl': stepIcon === 'access-time' }\"\n      class=\"bb-text-support bb-subtitle\"\n      data-role=\"payord-a2a-link-account-info-step-description\"\n    >\n      {{ stepDescription }}\n    </div>\n  ", isInline: true, components: [{ type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i5__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LinkAccountInfoComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-a2a-link-account-steps',
                        template: "\n    <div class=\"bb-stack bb-stack--density-sm bb-subtitle\" data-role=\"payord-a2a-link-account-info-step-info\">\n      <bb-icon-ui\n        class=\"bb-stack__item\"\n        color=\"primary\"\n        name=\"{{ stepIcon }}\"\n        size=\"sm\"\n        data-role=\"icon-insert-link-sm\"\n      >\n      </bb-icon-ui>\n      <span class=\"bb-stack__item\" data-role=\"payord-a2a-link-account-info-step-name\">\n        {{ stepName }}\n      </span>\n    </div>\n    <div\n      [ngClass]=\"{ 'bb-block bb-block--xl': stepIcon === 'access-time' }\"\n      class=\"bb-text-support bb-subtitle\"\n      data-role=\"payord-a2a-link-account-info-step-description\"\n    >\n      {{ stepDescription }}\n    </div>\n  ",
                    }]
            }], propDecorators: { step: [{
                    type: i0.Input
                }], stepIcon: [{
                    type: i0.Input
                }], stepName: [{
                    type: i0.Input
                }], stepDescription: [{
                    type: i0.Input
                }] } });

    var ModalState;
    (function (ModalState) {
        ModalState[ModalState["Preview"] = 0] = "Preview";
        ModalState[ModalState["Hidden"] = 1] = "Hidden";
    })(ModalState || (ModalState = {}));

    var LinkAccountModalComponent = /** @class */ (function () {
        function LinkAccountModalComponent() {
            this.modalOptions = {
                backdrop: 'static',
                keyboard: false,
            };
            /**
             * Modal open flag
             * Default value is false
             */
            this.modalOpen = false;
            /**
             * Submitted form flag
             * Default value is false
             */
            this.submitted = false;
            /**
             * Loading data flag
             * Default value is false
             */
            this.isLoading = false;
            /**
             * Submit form event emitter
             */
            this.submitForm = new i0.EventEmitter();
            /**
             * Discard account form data event emitter
             */
            this.discardData = new i0.EventEmitter();
            /**
             * Build account form event emitter
             */
            this.buildForm = new i0.EventEmitter();
            this.confirmationModalOpen = false;
            this.numberValidator = validateNumber;
            this.gc$ = new rxjs.Subject();
            this.preventFormDiscard = false;
            this.states = ModalState;
            this.state$ = new rxjs.BehaviorSubject(ModalState.Hidden);
        }
        LinkAccountModalComponent.prototype.isFieldValid = function (fieldName) {
            var control = this.getControl(fieldName);
            return control === null || control === void 0 ? void 0 : control.valid;
        };
        LinkAccountModalComponent.prototype.getControl = function (fieldName) {
            var _a;
            return (_a = this.accountForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
        };
        LinkAccountModalComponent.prototype.hasRequiredError = function (field) {
            var fieldControl = this.getControl(field);
            if (!fieldControl || !fieldControl.errors) {
                return;
            }
            return fieldControl.errors.required;
        };
        LinkAccountModalComponent.prototype.onSubmit = function () {
            this.submitForm.emit();
            this.modalOpen = false;
            this.state$ = this.modalState;
        };
        LinkAccountModalComponent.prototype.onDiscard = function () {
            this.discardData.emit();
        };
        LinkAccountModalComponent.prototype.manageConfirmationModal = function () {
            if (this.preventFormDiscard) {
                this.confirmationModalOpen = true;
            }
            else {
                this.onDiscard();
                this.closeModal();
            }
        };
        LinkAccountModalComponent.prototype.openModal = function () {
            this.buildForm.emit();
            this.state$.next(ModalState.Preview);
        };
        LinkAccountModalComponent.prototype.closeModal = function () {
            this.state$.next(ModalState.Hidden);
        };
        LinkAccountModalComponent.prototype.ngOnChanges = function () {
            var _this = this;
            if (this.accountForm) {
                this.accountForm.valueChanges.pipe(operators.takeUntil(this.gc$), operators.distinctUntilChanged()).subscribe(function (formValues) {
                    _this.preventFormDiscard = Object.values(formValues).some(function (value) { return !!value; });
                });
            }
        };
        return LinkAccountModalComponent;
    }());
    /** @nocollapse */ LinkAccountModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LinkAccountModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ LinkAccountModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LinkAccountModalComponent, selector: "bb-a2a-link-account-form", inputs: { modalOpen: "modalOpen", accountForm: "accountForm", submitted: "submitted", isLoading: "isLoading", formInputLengths: "formInputLengths", modalState: "modalState" }, outputs: { submitForm: "submitForm", discardData: "discardData", buildForm: "buildForm" }, usesOnChanges: true, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"states.Preview === (state$ | async) || modalOpen\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div\n        class=\"modal-title\"\n        i18n=\"@@a2a-link-account.dialog.header\"\n        data-role=\"payord-a2a-link-account-dialog-header\"\n      >\n        Connect external account\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item\">\n          <div class=\"row\">\n            <form class=\"col-md-6\" [formGroup]=\"accountForm\" *ngIf=\"accountForm\">\n              <div class=\"form-group\">\n                <label\n                  class=\"bb-label\"\n                  [for]=\"AccountName.id\"\n                  data-role=\"payord-debit-create-CountrySubDivision-label\"\n                  i18n=\"@@payord-a2a-link-account.modal.AccountName.label\"\n                >\n                  Account name\n                </label>\n                <bb-input-text-ui\n                  #AccountName\n                  data-role=\"payord-a2a-link-account-AccountName-input\"\n                  [aria-label]=\"'Account Name'\"\n                  formControlName=\"inputAccountName\"\n                  [readonly]=\"false\"\n                  [maxLength]=\"formInputLengths?.name\"\n                  [autocomplete]=\"'name'\"\n                  i18n-aria-label=\"@@payord-a2a-link-account.modal.AccountName\"\n                >\n                </bb-input-text-ui>\n                <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputAccountName')\">\n                  <span\n                    *ngIf=\"submitted && hasRequiredError('inputAccountName')\"\n                    i18n=\"@@payord-a2a-link-account.modal.required.AccountName\"\n                    data-role=\"payord-a2a-link-account-AccountName-required-message\"\n                  >\n                    Field is required.\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n\n              <div class=\"form-group\">\n                <label\n                  class=\"bb-label\"\n                  [for]=\"AccountType.id\"\n                  data-role=\"payord-debit-create-CountrySubDivision-label\"\n                  i18n=\"@@payord-a2a-link-account.modal.AccountType.label\"\n                >\n                  Account type\n                </label>\n                <bb-dropdown-single-select-ui\n                  #AccountType\n                  data-role=\"payord-a2a-link-account-AccountType-select\"\n                  aria-label=\"Account Type\"\n                  formControlName=\"accountTypeSelect\"\n                  placeholder=\"- select an account type -\"\n                  i18n-aria-label=\"@@payord-a2a-link-account.modal.label.AccountType\"\n                  i18n-placeholder=\"@@payord-a2a-link-account.modal.placeholder.AccountType\"\n                >\n                  <bb-dropdown-single-select-option-ui\n                    class=\"text-capitalize\"\n                    [value]=\"'Savings'\"\n                    [label]=\"'Savings Account'\"\n                    data-role=\"payord-a2a-link-account-AccountType-savings\"\n                    i18n-label=\"@@payord-a2a-link-account.modal.label.Savings\"\n                  >\n                  </bb-dropdown-single-select-option-ui>\n                  <bb-dropdown-single-select-option-ui\n                    class=\"text-capitalize\"\n                    [value]=\"'Checking'\"\n                    [label]=\"'Checking Account'\"\n                    data-role=\"payord-a2a-link-account-AccountType-checking\"\n                    i18n-label=\"@@payord-a2a-link-account.modal.label.Checking\"\n                  >\n                  </bb-dropdown-single-select-option-ui>\n                </bb-dropdown-single-select-ui>\n                <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('accountTypeSelect')\">\n                  <span\n                    *ngIf=\"submitted && hasRequiredError('accountTypeSelect')\"\n                    i18n=\"@@payord-a2a-link-account.modal.required.AccountType\"\n                    data-role=\"payord-a2a-link-account-AccountType-required-message\"\n                  >\n                    Field is required.\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n\n              <div class=\"bb-block bb-block--sm\">\n                <label\n                  class=\"bb-label\"\n                  [for]=\"AccountNumber.id\"\n                  data-role=\"payord-debit-create-CountrySubDivision-label\"\n                  i18n=\"@@payord-a2a-link-account.modal.AccountNumber.label\"\n                >\n                  Account number\n                </label>\n                <bb-input-text-ui\n                  #AccountNumber\n                  data-role=\"payord-a2a-link-account-AccountNumber-input\"\n                  aria-label=\"Account Number\"\n                  formControlName=\"inputAccountNumber\"\n                  [readonly]=\"false\"\n                  [maxLength]=\"formInputLengths?.number\"\n                  [autocomplete]=\"'name'\"\n                  i18n-aria-label=\"@@payord-a2a-link-account.modal.AccountNumber\"\n                  (keydown)=\"numberValidator($event)\"\n                >\n                </bb-input-text-ui>\n                <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputAccountNumber')\">\n                  <span\n                    *ngIf=\"submitted && hasRequiredError('inputAccountNumber')\"\n                    i18n=\"@@payord-a2a-link-account.modal.required.AccountNumber\"\n                    data-role=\"payord-a2a-link-account-AccountNumber-required-message\"\n                  >\n                    Field is required.\n                  </span>\n                  <ng-container *ngIf=\"accountForm.controls['inputAccountNumber'] as accNumber\">\n                    <span\n                      *ngIf=\"accNumber.touched && accNumber?.errors?.pattern\"\n                      i18n=\"@@payord-a2a-link-account.modal.pattern.AccountNumber\"\n                      data-role=\"payord-a2a-link-account-AccountNumber-pattern-message\"\n                    >\n                      Account number you have entered is invalid.\n                    </span>\n                  </ng-container>\n                </bb-input-validation-message-ui>\n              </div>\n\n              <div\n                class=\"bb-block bb-block--md bb-text-support bb-subtitle\"\n                data-role=\"payord-a2a-link-account-AccountNumber-example\"\n                i18n=\"@@payord-a2a-link.account.number.example\"\n              >\n                E.g. 001234567890\n              </div>\n\n              <div class=\"bb-block bb-block--sm\">\n                <label\n                  class=\"bb-label\"\n                  [for]=\"TransitNumber.id\"\n                  data-role=\"payord-debit-create-CountrySubDivision-label\"\n                  i18n=\"@@payord-a2a-link-account.modal.RoutingNumber.label\"\n                >\n                  Routing transit number\n                </label>\n                <bb-input-text-ui\n                  #TransitNumber\n                  data-role=\"payord-a2a-link-account-RoutingNumber-input\"\n                  aria-label=\"Routing Number\"\n                  formControlName=\"inputRoutingNumber\"\n                  [readonly]=\"false\"\n                  [maxLength]=\"formInputLengths?.routingNumber\"\n                  i18n-aria-label=\"@@payord-a2a-link-account.modal.RoutingNumber\"\n                  (keydown)=\"numberValidator($event)\"\n                >\n                </bb-input-text-ui>\n                <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputRoutingNumber')\">\n                  <span\n                    *ngIf=\"submitted && hasRequiredError('inputRoutingNumber')\"\n                    i18n=\"@@payord-a2a-link-account.modal.required.RoutingNumber\"\n                    data-role=\"payord-a2a-link-account-RoutingNumber-required-message\"\n                  >\n                    Field is required.\n                  </span>\n                  <ng-container *ngIf=\"accountForm.controls['inputRoutingNumber'] as routingNumber\">\n                    <span\n                      *ngIf=\"routingNumber.touched && routingNumber.errors && routingNumber.errors.size\"\n                      i18n=\"@@payord-a2a-link-account.modal.size.RoutingNumber\"\n                      data-role=\"payord-a2a-link-account-RoutingNumber-size-message\"\n                    >\n                      Branch code can only be 9 digit code.\n                    </span>\n                    <span\n                      *ngIf=\"routingNumber.touched && routingNumber.errors && routingNumber.errors.pattern\"\n                      i18n=\"@@payord-a2a-link-account.modal.pattern.RoutingNumber\"\n                      data-role=\"payord-a2a-link-account-RoutingNumber-pattern-message\"\n                    >\n                      Branch code you have entered is invalid.\n                    </span>\n                  </ng-container>\n                </bb-input-validation-message-ui>\n              </div>\n              <span\n                class=\"bb-text-support bb-subtitle\"\n                data-role=\"payord-a2a-link-account-RoutingNumber-example\"\n                i18n=\"@@payord-a2a-link.account.routing.example\"\n              >\n                E.g. 021000021\n              </span>\n            </form>\n          </div>\n        </div>\n        <div class=\"bb-list__item\">\n          <ng-container *ngTemplateOutlet=\"bbPayordA2ALinkAccountModalInformation\"></ng-container>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          color=\"primary\"\n          type=\"submit\"\n          class=\"bb-button-bar__button\"\n          [isLoading]=\"isLoading\"\n          (click)=\"onSubmit()\"\n          data-role=\"payord-a2a-link-account.modal-link-btn-text\"\n          i18n=\"@@payord-link-account.modal.link-account-btn.span\"\n        >\n          Connect\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          type=\"reset\"\n          class=\"bb-button-bar__button\"\n          (click)=\"manageConfirmationModal()\"\n          data-role=\"payord-a2a-link-account.modal-cancel-btn-text\"\n        >\n          <span i18n=\"@@payord-link-account.modal.cancel-btn.span\"> Cancel </span>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<bb-confirmation-dialog\n  [isOpen]=\"confirmationModalOpen\"\n  [confirmButtonColor]=\"'danger'\"\n  (cancel)=\"confirmationModalOpen = false\"\n  (confirm)=\"onDiscard(); confirmationModalOpen = false\"\n>\n  <span\n    title\n    class=\"modal-title\"\n    data-role=\"payord-a2a-link-account.confirmation-dialog-content\"\n    i18n=\"@@payord-link-account.confirmation-dialog.discard.title\"\n  >\n    Discard account\n  </span>\n  <span\n    body\n    data-role=\"payord-a2a-link-account.confirmation-dialog.discard.body\"\n    i18n=\"@@payord-a2a-link-account.confirmation-dialog.discard.body\"\n  >\n    Are you sure you want to discard the account? The data you have entered will be lost.\n  </span>\n  <span confirmActionName i18n=\"@@payord-a2a-link-account.confirmation-dialog.discard.action.confirm\">\n    Yes, Discard\n  </span>\n  <span cancelActionName i18n=\"@@payord-a2a-link-account.confirmation-dialog.discard.action.cancel\"> Keep data </span>\n</bb-confirmation-dialog>\n\n<ng-template #bbPayordA2ALinkAccountModalInformation>\n  <bb-a2a-link-account-steps\n    [stepIcon]=\"'access-time'\"\n    stepName=\"Wait 1-3 business days\"\n    stepDescription=\"You will receive two micro deposits in your external account\"\n    i18n-stepName=\"@@payord-a2a-link.step-2.account.modal.name\"\n    i18n-stepDescription=\"@@payord-a2a-link.step-2.account.modal.description\"\n  >\n  </bb-a2a-link-account-steps>\n  <bb-a2a-link-account-steps\n    [stepIcon]=\"'check'\"\n    stepName=\"Activate account\"\n    stepDescription=\"Use the two micro deposits to activate your account\"\n    i18n-stepName=\"@@payord-a2a-link.step-3.account.modal.name\"\n    i18n-stepDescription=\"@@payord-a2a-link.step-3.account.modal.description\"\n  >\n  </bb-a2a-link-account-steps>\n</ng-template>\n", components: [{ type: i1__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2__namespace$4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i2__namespace$3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4__namespace.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i4__namespace.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i1__namespace.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i5__namespace$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }, { type: LinkAccountInfoComponent, selector: "bb-a2a-link-account-steps", inputs: ["step", "stepIcon", "stepName", "stepDescription"] }], directives: [{ type: i1__namespace.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1__namespace.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LinkAccountModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-a2a-link-account-form',
                        templateUrl: './link-account-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { modalOpen: [{
                    type: i0.Input
                }], accountForm: [{
                    type: i0.Input
                }], submitted: [{
                    type: i0.Input
                }], isLoading: [{
                    type: i0.Input
                }], formInputLengths: [{
                    type: i0.Input
                }], modalState: [{
                    type: i0.Input
                }], submitForm: [{
                    type: i0.Output
                }], discardData: [{
                    type: i0.Output
                }], buildForm: [{
                    type: i0.Output
                }] } });

    var PendingActivationAccountDetailsComponent = /** @class */ (function () {
        function PendingActivationAccountDetailsComponent() {
            this.modalOptions = {
                backdrop: 'static',
                keyboard: false,
            };
            /**
             * Open account details modal flag
             * Default value is false
             */
            this.isOpen = false;
            /**
             * Loading flag
             * Default value is false
             */
            this.loading = false;
            /**
             * Submitted form flag
             * Default value is false
             */
            this.submitted = false;
            /**
             * Activate account failure flag
             * Default value is false
             */
            this.activationFailed = false;
            /**
             * Activate account attempts
             * Default value is false
             */
            this.attemptsExceeded = false;
            /**
             * Ivalid activation amount
             * Default value is false
             */
            this.invalidAmount = false;
            /**
             * List of currencies
             */
            this.currencies = [];
            /**
             * Open account details modal event emitter
             */
            this.openDetailsModal = new i0.EventEmitter();
            /**
             * Close account details modal event emitter
             */
            this.closeModal = new i0.EventEmitter();
            /**
             * Refresh account list event emitter
             */
            this.refreshList = new i0.EventEmitter();
            /**
             * Submit form event emitter
             */
            this.submitForm = new i0.EventEmitter();
            /**
             * Account status event emitter
             */
            this.setAccountStatus = new i0.EventEmitter();
            /**
             * Account activation attempts exceeded event emitter
             */
            this.setAttemptsExceeded = new i0.EventEmitter();
            /**
             * Invalid amount on account activation event emitter
             */
            this.setInvalidAmount = new i0.EventEmitter();
            this.isAccountOpen = true;
            this.confirmationModalOpen = false;
            this.areDetailsOpen = false;
            this.mequieromorir = true;
        }
        PendingActivationAccountDetailsComponent.prototype.onClose = function () {
            var formControls = this.activateAccountForm.controls;
            if ((formControls.firstAmount.value['amount'] || formControls.secondAmount.value['amount']) &&
                !this.attemptsExceeded) {
                this.confirmationModalOpen = true;
            }
            else {
                this.closeModal.emit();
                this.setAccountStatus.emit();
                this.areDetailsOpen = false;
                this.refreshAccountsList();
            }
        };
        PendingActivationAccountDetailsComponent.prototype.setOpenValue = function () {
            this.isAccountOpen = !this.isAccountOpen;
        };
        PendingActivationAccountDetailsComponent.prototype.onSubmit = function () {
            this.submitForm.emit();
        };
        PendingActivationAccountDetailsComponent.prototype.refreshAccountsList = function () {
            if (this.attemptsExceeded) {
                this.refreshList.emit();
                this.setAttemptsExceeded.emit();
            }
            else if (this.invalidAmount) {
                this.setInvalidAmount.emit();
            }
        };
        PendingActivationAccountDetailsComponent.prototype.toggleDisplayDetails = function () {
            this.areDetailsOpen = !this.areDetailsOpen;
        };
        PendingActivationAccountDetailsComponent.prototype.onCloseConfirmationModal = function () {
            this.setAccountStatus.emit();
            this.areDetailsOpen = false;
            this.confirmationModalOpen = false;
        };
        return PendingActivationAccountDetailsComponent;
    }());
    /** @nocollapse */ PendingActivationAccountDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PendingActivationAccountDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PendingActivationAccountDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PendingActivationAccountDetailsComponent, selector: "bb-pending-activation-account-details", inputs: { isOpen: "isOpen", externalAccount: "externalAccount", activateAccountForm: "activateAccountForm", loading: "loading", submitted: "submitted", activationFailed: "activationFailed", attemptsExceeded: "attemptsExceeded", invalidAmount: "invalidAmount", currencies: "currencies" }, outputs: { openDetailsModal: "openDetailsModal", closeModal: "closeModal", refreshList: "refreshList", submitForm: "submitForm", setAccountStatus: "setAccountStatus", setAttemptsExceeded: "setAttemptsExceeded", setInvalidAmount: "setInvalidAmount" }, ngImport: i0__namespace, template: "<bb-modal-ui *ngIf=\"externalAccount as account\" [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-a2a-details-header\n    [account]=\"account\"\n    (closeModal)=\"onClose()\"\n    [attemptsExceeded]=\"attemptsExceeded\"\n  ></bb-a2a-details-header>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div *ngIf=\"activationFailed && !attemptsExceeded\">\n        <bb-alert-ui\n          title=\"The entered deposit amounts are incorrect. Please try again.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-excessive-returns-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.incorrect-amounts.title\"\n        >\n        </bb-alert-ui>\n      </div>\n      <div *ngIf=\"attemptsExceeded\">\n        <bb-alert-ui\n          title=\"The activation of your account has failed\"\n          message=\"You have exceeded the number of attempts to activate your account. To continue, please raise a new request.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-pending-activation-failed-verification-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.failed-verification.title\"\n          i18n-message=\"@@payord-a2a.pending.activation.failed-verification.message\"\n        >\n        </bb-alert-ui>\n      </div>\n      <div *ngIf=\"invalidAmount\">\n        <bb-alert-ui\n          title=\"The activation of your account has failed\"\n          message=\"Value must be between 0 and 51 cents.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-pending-activation-invalid-amount-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.invalid-amount.title\"\n          i18n-message=\"@@payord-a2a.pending.activation.invalid-amount.message\"\n        >\n        </bb-alert-ui>\n      </div>\n      <ng-container>\n        <div class=\"bb-block bb-block--lg\">\n          <span\n            data-role=\"payord-a2a-pending-activation-activate-account.information.message\"\n            i18n-message=\"@@payord-a2a.pending.activation.activate-account-information.message\"\n          >\n            Insert below the two amounts under 50 cents that were credited to your connected account.<br />\n            The order of the payments does not influence the activation.\n          </span>\n        </div>\n        <bb-activate-a2a-account\n          *ngIf=\"isOpen\"\n          [activateAccountForm]=\"activateAccountForm\"\n          [submitted]=\"submitted\"\n          [isDisabled]=\"attemptsExceeded\"\n          [currencies]=\"currencies\"\n        ></bb-activate-a2a-account>\n      </ng-container>\n      <bb-collapsible-ui [isOpen]=\"areDetailsOpen\" #collapse>\n        <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n          <div class=\"bb-block bb-block--lg bb-stack\">\n            <button\n              class=\"text-primary bb-text-bold\"\n              bbButton\n              [color]=\"'link-text'\"\n              buttonSize=\"md\"\n              (click)=\"toggleDisplayDetails()\"\n              data-role=\"toggle-details-button\"\n            >\n              <bb-icon-ui\n                class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                size=\"md\"\n                [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n              ></bb-icon-ui>\n              <p\n                class=\"bb-stack__item bb-block bb-block--no-margin\"\n                *ngIf=\"isOpen\"\n                data-role=\"payord-a2a-account-details-modal-hide-info-text\"\n                i18n=\"@@payord-a2a.pending.activation.hide.details\"\n              >\n                Hide account details\n              </p>\n              <p\n                class=\"bb-stack__item bb-block bb-block--no-margin\"\n                *ngIf=\"!isOpen\"\n                data-role=\"payord-a2a-account-details-modal-show-info-text\"\n                i18n=\"@@payord-a2a.pending.activation.show.details\"\n              >\n                Show account details\n              </p>\n            </button>\n          </div>\n        </ng-template>\n        <ng-template bbCollapsibleBody>\n          <bb-a2a-account-information [account]=\"account\"></bb-a2a-account-information>\n        </ng-template>\n      </bb-collapsible-ui>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui *ngIf=\"!attemptsExceeded\">\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          [isLoading]=\"loading\"\n          (click)=\"onSubmit()\"\n          data-role=\"payord-a2a-activate-account-modal\"\n          i18n=\"@@payord-a2a-pending.activation.activate-account-btn.span\"\n        >\n          Activate\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"payord-a2a-activate-account-modal-cancel\"\n          i18n=\"@@payord-a2a-pending.activation.cancel-btn.span\"\n          (click)=\"onClose()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<bb-confirmation-dialog\n  [isOpen]=\"confirmationModalOpen\"\n  [confirmButtonColor]=\"'danger'\"\n  (cancel)=\"confirmationModalOpen = false\"\n  (confirm)=\"closeModal.emit(); refreshAccountsList(); onCloseConfirmationModal()\"\n>\n  <span\n    title\n    class=\"modal-title\"\n    data-role=\"payord-a2a-activate-account.confirmation-dialog-content\"\n    i18n=\"@@payord-activate-account.confirmation-dialog.discard.title\"\n  >\n    Discard amount(s)\n  </span>\n  <span\n    body\n    data-role=\"payord-a2a-activate-account.confirmation-dialog.discard.body\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.body\"\n  >\n    Are you sure you want to discard the amount(s)? The data you have entered will be lost.\n  </span>\n  <span\n    confirmActionName\n    data-role=\"payord-a2a-activate-account-confirmation-dialog-cancel\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.action.confirm\"\n  >\n    Yes, Discard\n  </span>\n  <span\n    cancelActionName\n    data-role=\"payord-a2a-activate-account-confirmation-dialog-keep\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.action.cancel\"\n  >\n    Keep data\n  </span>\n</bb-confirmation-dialog>\n", components: [{ type: i1__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: AccountDetailModalHeaderComponent, selector: "bb-a2a-details-header", inputs: ["account", "attemptsExceeded"], outputs: ["closeModal"] }, { type: i1__namespace.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3__namespace$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: ActivateExternalAccountComponent, selector: "bb-activate-a2a-account", inputs: ["submitted", "activateAccountForm", "isDisabled", "currencies"], outputs: ["setDecimalsValues"] }, { type: i5__namespace$2.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: AccountInformationComponent, selector: "bb-a2a-account-information", inputs: ["account"] }, { type: i1__namespace.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i5__namespace$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5__namespace$2.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5__namespace$2.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }, { type: i1__namespace.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PendingActivationAccountDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-pending-activation-account-details',
                        templateUrl: 'pending-activation-account-details.component.html',
                    }]
            }], propDecorators: { isOpen: [{
                    type: i0.Input
                }], externalAccount: [{
                    type: i0.Input
                }], activateAccountForm: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], submitted: [{
                    type: i0.Input
                }], activationFailed: [{
                    type: i0.Input
                }], attemptsExceeded: [{
                    type: i0.Input
                }], invalidAmount: [{
                    type: i0.Input
                }], currencies: [{
                    type: i0.Input
                }], openDetailsModal: [{
                    type: i0.Output
                }], closeModal: [{
                    type: i0.Output
                }], refreshList: [{
                    type: i0.Output
                }], submitForm: [{
                    type: i0.Output
                }], setAccountStatus: [{
                    type: i0.Output
                }], setAttemptsExceeded: [{
                    type: i0.Output
                }], setInvalidAmount: [{
                    type: i0.Output
                }] } });

    var components$1 = [
        LinkAccountModalComponent,
        LinkAccountInfoComponent,
        AccountsListComponent,
        AccountDetailModalComponent,
        ActivateExternalAccountComponent,
        EmptyListComponent,
        AccountDetailModalHeaderComponent,
        AccountInformationComponent,
        PendingActivationAccountDetailsComponent,
        ConfirmationDialogComponent,
    ];
    var uiModules$1 = [
        i1$2.EmptyStateModule,
        i6.ButtonModule,
        i1.ModalModule,
        i2$4.InputTextModule,
        i4.DropdownSingleSelectModule,
        i2$3.InputValidationMessageModule,
        i3.IconModule,
        i3$1.AlertModule,
        i1$3.NotificationModule,
        i2.BadgeModule,
        i8.LoadingIndicatorModule,
        i1$1.CurrencyInputModule,
        i5$2.CollapsibleModule,
        i2$2.DropdownMenuModule,
        i2$1.HeaderModule,
        i5$1.LoadButtonModule,
        i3$1.AlertModule,
        i3$2.TextareaModule,
        i6$1.KeyboardClickModule,
    ];
    var ConnectExternalAccountsJourneyUiModule = /** @class */ (function () {
        function ConnectExternalAccountsJourneyUiModule() {
        }
        return ConnectExternalAccountsJourneyUiModule;
    }());
    /** @nocollapse */ ConnectExternalAccountsJourneyUiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyUiModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ConnectExternalAccountsJourneyUiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyUiModule, declarations: [LinkAccountModalComponent,
            LinkAccountInfoComponent,
            AccountsListComponent,
            AccountDetailModalComponent,
            ActivateExternalAccountComponent,
            EmptyListComponent,
            AccountDetailModalHeaderComponent,
            AccountInformationComponent,
            PendingActivationAccountDetailsComponent,
            ConfirmationDialogComponent], imports: [i5.CommonModule, i3$3.ReactiveFormsModule, i1$2.EmptyStateModule,
            i6.ButtonModule,
            i1.ModalModule,
            i2$4.InputTextModule,
            i4.DropdownSingleSelectModule,
            i2$3.InputValidationMessageModule,
            i3.IconModule,
            i3$1.AlertModule,
            i1$3.NotificationModule,
            i2.BadgeModule,
            i8.LoadingIndicatorModule,
            i1$1.CurrencyInputModule,
            i5$2.CollapsibleModule,
            i2$2.DropdownMenuModule,
            i2$1.HeaderModule,
            i5$1.LoadButtonModule,
            i3$1.AlertModule,
            i3$2.TextareaModule,
            i6$1.KeyboardClickModule], exports: [i1$2.EmptyStateModule,
            i6.ButtonModule,
            i1.ModalModule,
            i2$4.InputTextModule,
            i4.DropdownSingleSelectModule,
            i2$3.InputValidationMessageModule,
            i3.IconModule,
            i3$1.AlertModule,
            i1$3.NotificationModule,
            i2.BadgeModule,
            i8.LoadingIndicatorModule,
            i1$1.CurrencyInputModule,
            i5$2.CollapsibleModule,
            i2$2.DropdownMenuModule,
            i2$1.HeaderModule,
            i5$1.LoadButtonModule,
            i3$1.AlertModule,
            i3$2.TextareaModule,
            i6$1.KeyboardClickModule, LinkAccountModalComponent,
            LinkAccountInfoComponent,
            AccountsListComponent,
            AccountDetailModalComponent,
            ActivateExternalAccountComponent,
            EmptyListComponent,
            AccountDetailModalHeaderComponent,
            AccountInformationComponent,
            PendingActivationAccountDetailsComponent,
            ConfirmationDialogComponent] });
    /** @nocollapse */ ConnectExternalAccountsJourneyUiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyUiModule, imports: [__spreadArray([i5.CommonModule, i3$3.ReactiveFormsModule], __read(uiModules$1)), i1$2.EmptyStateModule,
            i6.ButtonModule,
            i1.ModalModule,
            i2$4.InputTextModule,
            i4.DropdownSingleSelectModule,
            i2$3.InputValidationMessageModule,
            i3.IconModule,
            i3$1.AlertModule,
            i1$3.NotificationModule,
            i2.BadgeModule,
            i8.LoadingIndicatorModule,
            i1$1.CurrencyInputModule,
            i5$2.CollapsibleModule,
            i2$2.DropdownMenuModule,
            i2$1.HeaderModule,
            i5$1.LoadButtonModule,
            i3$1.AlertModule,
            i3$2.TextareaModule,
            i6$1.KeyboardClickModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyUiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components$1)),
                        imports: __spreadArray([i5.CommonModule, i3$3.ReactiveFormsModule], __read(uiModules$1)),
                        exports: __spreadArray(__spreadArray([], __read(uiModules$1)), __read(components$1)),
                    }]
            }] });

    var LinkAccountService = /** @class */ (function () {
        function LinkAccountService(paymentOrdersA2ADataHttpService) {
            var _this = this;
            this.paymentOrdersA2ADataHttpService = paymentOrdersA2ADataHttpService;
            this.isFormModalOpen = new rxjs.BehaviorSubject(false);
            this.defaultAccount = {
                routingNumber: '',
                accountNickName: '',
                accountNumber: '',
            };
            this.responseError$ = new rxjs.BehaviorSubject(undefined);
            this.refreshAccounts$ = new rxjs.BehaviorSubject(this.defaultAccount);
            this.accounts$ = this.refreshAccounts$.pipe(operators.switchMap(function () { return _this.paymentOrdersA2ADataHttpService.getAll().pipe(operators.catchError(function (err) {
                _this.responseError$.next(err);
                return rxjs.throwError(err);
            }), operators.map(function (res) { return (res && res.accounts ? res.accounts : []); })); }));
        }
        LinkAccountService.prototype.postNewAccount = function (contactItem) {
            return this.paymentOrdersA2ADataHttpService.create({ externalAccountPostRequest: contactItem });
        };
        LinkAccountService.prototype.putNewAccountVerification = function (externalId, amounts) {
            return this.paymentOrdersA2ADataHttpService.verify({
                externalAccountId: externalId,
                externalAccountVerificationPutRequest: amounts,
            });
        };
        LinkAccountService.prototype.removeAccount = function (externalAccountId) {
            return this.paymentOrdersA2ADataHttpService._delete({ externalAccountId: externalAccountId });
        };
        Object.defineProperty(LinkAccountService.prototype, "isModalOpen", {
            get: function () {
                return this.isFormModalOpen;
            },
            enumerable: false,
            configurable: true
        });
        LinkAccountService.prototype.openModal = function (value) {
            if (value === void 0) { value = true; }
            this.isFormModalOpen.next(value);
        };
        return LinkAccountService;
    }());
    /** @nocollapse */ LinkAccountService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LinkAccountService, deps: [{ token: i1__namespace$3.A2aClientHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ LinkAccountService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LinkAccountService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LinkAccountService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$3.A2aClientHttpService }]; } });

    var ConnectExternalAccountsJourneyComponent = /** @class */ (function () {
        function ConnectExternalAccountsJourneyComponent(linkAccountService) {
            this.linkAccountService = linkAccountService;
        }
        ConnectExternalAccountsJourneyComponent.prototype.initiateConnectAccount = function () {
            this.linkAccountService.openModal();
        };
        return ConnectExternalAccountsJourneyComponent;
    }());
    /** @nocollapse */ ConnectExternalAccountsJourneyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyComponent, deps: [{ token: LinkAccountService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ConnectExternalAccountsJourneyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConnectExternalAccountsJourneyComponent, selector: "bb-connect-external-accounts-journey", providers: [LinkAccountService], ngImport: i0__namespace, template: "<div class=\"bb-stack bb-block bb-block--lg\">\n  <div class=\"bb-stack__item bb-stack__item--fill\">\n    <bb-header-ui\n      headingType=\"h1\"\n      heading=\"Connected Accounts\"\n      i18n-heading=\"@@connect-external-accounts-journey.title.connected-accounts\"\n      data-role=\"connect-external-accounts-title\"\n    >\n    </bb-header-ui>\n  </div>\n  <div class=\"bb-stack__item\">\n    <button bbButton color=\"secondary\" data-role=\"inititate-connect-account\" (click)=\"initiateConnectAccount()\">\n      <i class=\"bb-icon bb-icon-add\"></i>\n      <span\n        class=\"bb-accounts-overview-table__header-row\"\n        i18n=\"@@connect-external-accounts-journey.connect-account-button\"\n        >Connect account\n      </span>\n    </button>\n  </div>\n</div>\n<router-outlet></router-outlet>\n", components: [{ type: i2__namespace$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4__namespace$1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-connect-external-accounts-journey',
                        templateUrl: './connect-external-accounts-journey.component.html',
                        providers: [LinkAccountService],
                    }]
            }], ctorParameters: function () { return [{ type: LinkAccountService }]; } });

    var ConnectExternalAccountsJourneyConfigurationToken = new i0.InjectionToken('ConnectExternalAccountsJourneyConfigurationToken injection token');
    var configDefaults = {
        currencies: ['USD'],
        dismissMessageTime: 3000,
    };
    var ConnectExternalAccountsJourneyConfigService = /** @class */ (function () {
        function ConnectExternalAccountsJourneyConfigService(config) {
            this.config = config;
            this._config = Object.assign(Object.assign({}, configDefaults), (this.config || {}));
        }
        Object.defineProperty(ConnectExternalAccountsJourneyConfigService.prototype, "defaults", {
            get: function () {
                return configDefaults;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ConnectExternalAccountsJourneyConfigService.prototype, "currencies", {
            get: function () {
                return this._config.currencies;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ConnectExternalAccountsJourneyConfigService.prototype, "dismissMessageTime", {
            get: function () {
                return this._config.dismissMessageTime;
            },
            enumerable: false,
            configurable: true
        });
        return ConnectExternalAccountsJourneyConfigService;
    }());
    /** @nocollapse */ ConnectExternalAccountsJourneyConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyConfigService, deps: [{ token: ConnectExternalAccountsJourneyConfigurationToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ConnectExternalAccountsJourneyConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ConnectExternalAccountsJourneyConfigurationToken]
                        }] }];
        } });

    var ConnectExternalAccountsViewComponent = /** @class */ (function () {
        function ConnectExternalAccountsViewComponent(notificationService, formBuilder, linkAccountService, config, communicationService) {
            this.notificationService = notificationService;
            this.formBuilder = formBuilder;
            this.linkAccountService = linkAccountService;
            this.config = config;
            this.communicationService = communicationService;
            this.submitted = false;
            this.isModalOpen = false;
            this.a2aAccounts$ = this.linkAccountService.accounts$;
            this.loading$ = new rxjs.BehaviorSubject(false);
            this.httpResponseError$ = this.linkAccountService.responseError$;
            this.modalState = new rxjs.BehaviorSubject(undefined);
            this.activateAccountSubmitted = false;
            this.isPendigAccountOpen = false;
            this.isOpen = false;
            this.activationFailed = false;
            this.attemptsExceeded = false;
            this.defaultAmount = {
                currency: '',
                amount: '',
            };
            this.invalidAmount = false;
            this.destroy$ = new rxjs.Subject();
            this.formInputLengths = FORM_INPUT_LENGTHS;
        }
        Object.defineProperty(ConnectExternalAccountsViewComponent.prototype, "currencies", {
            get: function () {
                return this.config.currencies;
            },
            enumerable: false,
            configurable: true
        });
        ConnectExternalAccountsViewComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.linkAccountService.isModalOpen
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (isOpen) { return isOpen && _this.onOpenModal(); });
        };
        ConnectExternalAccountsViewComponent.prototype.showNotification = function (success, notification) {
            this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: this.config.dismissMessageTime, modifier: success ? 'success' : 'error' }, notification));
        };
        ConnectExternalAccountsViewComponent.prototype.showSuccessNotification = function () {
            this.showNotification(true, {
                header: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@connect-external-accounts-journey.account.notification.success:Information submitted successfully"], [":@@connect-external-accounts-journey.account.notification.success:Information submitted successfully"]))),
                message: '',
            });
        };
        ConnectExternalAccountsViewComponent.prototype.noWhitespaceValidator = function (control) {
            var isWhitespace = (control.value || '').trim().length === 0;
            var isValid = !isWhitespace;
            // eslint-disable-next-line no-null/no-null
            return isValid ? null : { required: true };
        };
        ConnectExternalAccountsViewComponent.prototype.buildAccountForm = function () {
            return this.formBuilder.group({
                inputAccountName: ['', [i3$3.Validators.required, this.noWhitespaceValidator]],
                accountTypeSelect: ['', i3$3.Validators.required],
                inputAccountNumber: ['', [i3$3.Validators.required, this.noWhitespaceValidator, i3$3.Validators.pattern(/^\d+$/)]],
                inputRoutingNumber: ['', [i3$3.Validators.required, routingTransitNumberValidator]],
            });
        };
        ConnectExternalAccountsViewComponent.prototype.buildActivateAccountForm = function () {
            return this.formBuilder.group({
                firstAmount: [this.defaultAmount, [amountValidator]],
                secondAmount: [this.defaultAmount, [amountValidator]],
            });
        };
        ConnectExternalAccountsViewComponent.prototype.closeModal = function () {
            this.isModalOpen = false;
        };
        ConnectExternalAccountsViewComponent.prototype.onOpenModal = function () {
            this.isModalOpen = true;
            this.accountForm = this.buildAccountForm();
            this.modalState.next(ModalState.Preview);
        };
        ConnectExternalAccountsViewComponent.prototype.onSubmit = function () {
            var _this = this;
            this.submitted = true;
            this.loading$.next(true);
            if (this.accountForm.invalid) {
                this.loading$.next(false);
                return;
            }
            var formValues = this.accountForm.value;
            var accountItem = {
                routingNumber: formValues.inputRoutingNumber,
                accountNickName: formValues.inputAccountName.trim(),
                accountNumber: formatAccountNumber(formValues.inputAccountNumber),
                accountType: formValues.accountTypeSelect,
            };
            this.linkAccountService
                .postNewAccount(accountItem)
                .pipe(operators.takeUntil(this.destroy$), operators.catchError(function (err) {
                _this.showNotification(false, {
                    header: $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":@@connect-external-accounts-journey.account.notification.failure:Account creation failed"], [":@@connect-external-accounts-journey.account.notification.failure:Account creation failed"]))),
                    message: '',
                });
                _this.loading$.next(false);
                return rxjs.throwError(err);
            }))
                .subscribe(function () {
                _this.loading$.next(false);
                _this.showSuccessNotification();
                _this.accountForm.reset();
                _this.submitted = false;
                _this.linkAccountService.refreshAccounts$.next(accountItem);
                _this.modalState.next(ModalState.Hidden);
            });
        };
        ConnectExternalAccountsViewComponent.prototype.onDiscardData = function () {
            this.isModalOpen = false;
            this.submitted = false;
            this.accountForm.reset();
        };
        ConnectExternalAccountsViewComponent.prototype.setExternalAccount = function (externalAccount) {
            if (externalAccount.status === 'PendingActivation') {
                this.isPendigAccountOpen = true;
            }
            else {
                this.isOpen = true;
            }
            this.activateForm = this.buildActivateAccountForm();
            this.account = externalAccount;
        };
        ConnectExternalAccountsViewComponent.prototype.closeDetailsModal = function () {
            this.isOpen = false;
        };
        ConnectExternalAccountsViewComponent.prototype.closePendingAccountModal = function () {
            this.isPendigAccountOpen = false;
            this.activateAccountSubmitted = false;
        };
        ConnectExternalAccountsViewComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        ConnectExternalAccountsViewComponent.prototype.onActivateAccount = function () {
            var _this = this;
            var _a, _b;
            var externalAccountId = (_a = this.account) === null || _a === void 0 ? void 0 : _a.externalAccountId;
            this.activateAccountSubmitted = true;
            this.loading$.next(true);
            if (((_b = this.activateForm) === null || _b === void 0 ? void 0 : _b.invalid) || !externalAccountId) {
                this.loading$.next(false);
                return;
            }
            var amounts = {
                value1: this.activateForm.value.firstAmount.amount,
                value2: this.activateForm.value.secondAmount.amount,
            };
            this.linkAccountService
                .putNewAccountVerification(externalAccountId, amounts)
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (res) {
                _this.isPendigAccountOpen = false;
                _this.loading$.next(false);
                _this.showSuccessNotification();
                _this.activateForm.reset();
                _this.activateAccountSubmitted = false;
                _this.linkAccountService.refreshAccounts$.next(res);
            }, function (_c) {
                var error = _c.error;
                var errors = error.errors;
                if (errors === null || errors === void 0 ? void 0 : errors.length) {
                    _this.manageResponseError(errors[0].key);
                }
                else {
                    _this.activationFailed = false;
                }
                _this.showNotification(false, {
                    header: $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@connect-external-accounts-journey.account.activation.failure.failure:Account activation failed"], [":@@connect-external-accounts-journey.account.activation.failure.failure:Account activation failed"]))),
                    message: '',
                });
                _this.loading$.next(false);
            });
        };
        ConnectExternalAccountsViewComponent.prototype.manageResponseError = function (key) {
            switch (key) {
                case RESPONSES.unmatchedKey:
                    this.activationFailed = true;
                    this.invalidAmount = false;
                    break;
                case RESPONSES.exceededKey:
                    this.attemptsExceeded = true;
                    this.invalidAmount = false;
                    break;
                case RESPONSES.invalidAmount:
                    this.activationFailed = false;
                    this.attemptsExceeded = false;
                    this.invalidAmount = true;
            }
        };
        ConnectExternalAccountsViewComponent.prototype.refreshAccountsList = function () {
            this.linkAccountService.refreshAccounts$.next(this.account);
            if (this.attemptsExceeded) {
                this.activateForm.controls['firstAmount'].disable();
                this.activateForm.controls['secondAmount'].disable();
            }
        };
        ConnectExternalAccountsViewComponent.prototype.deleteAccount = function (id) {
            var _this = this;
            this.linkAccountService
                .removeAccount(id)
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.refreshAccountsList();
                _this.showNotification(true, {
                    header: $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@connect-external-accounts-journey.account.success-message:Account removed successfully"], [":@@connect-external-accounts-journey.account.success-message:Account removed successfully"]))),
                    message: '',
                });
            }, function () {
                _this.showNotification(false, {
                    header: $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":@@connect-external-accounts-journey.account.failure-message:Account could not be removed"], [":@@connect-external-accounts-journey.account.failure-message:Account could not be removed"]))),
                    message: '',
                });
            });
        };
        ConnectExternalAccountsViewComponent.prototype.onCreatePayment = function (id) {
            if (this.communicationService) {
                this.communicationService.navigateToMakeTransfer(id);
            }
        };
        ConnectExternalAccountsViewComponent.prototype.initiateConnectAccount = function () {
            this.onOpenModal();
        };
        return ConnectExternalAccountsViewComponent;
    }());
    /** @nocollapse */ ConnectExternalAccountsViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsViewComponent, deps: [{ token: i1__namespace$4.NotificationService }, { token: i3__namespace$3.FormBuilder }, { token: LinkAccountService }, { token: ConnectExternalAccountsJourneyConfigService }, { token: CommunicationService, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ConnectExternalAccountsViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConnectExternalAccountsViewComponent, selector: "bb-connect-external-accounts-view", ngImport: i0__namespace, template: "<ng-container *ngIf=\"!(httpResponseError$ | async); else errorState\">\n  <ng-container *ngIf=\"a2aAccounts$ | async as accounts; else loadingA2AList\">\n    <div *ngIf=\"accounts?.length; else emptyList\">\n      <bb-a2a-accounts-list\n        (openModal)=\"onOpenModal()\"\n        [accounts]=\"accounts\"\n        (selectExternalAccount)=\"setExternalAccount($event)\"\n        [activateForm]=\"activateForm\"\n        [isLoading]=\"loading$ | async\"\n        (submitActivateForm)=\"onActivateAccount()\"\n        (deleteAccount)=\"deleteAccount($event)\"\n        (makeTransfer)=\"onCreatePayment($event)\"\n      ></bb-a2a-accounts-list>\n    </div>\n    <ng-template #emptyList>\n      <bb-a2a-empty-list (openModal)=\"onOpenModal()\"> </bb-a2a-empty-list>\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingA2AList>\n  <div class=\"bb-state-container card\">\n    <bb-loading-indicator-ui\n      text=\"Loading data...\"\n      text-i18n=\"@@bb-connected-external-accounts-journey.connected-external-accounts-view.loading-placeholder\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"bb-state-container card\">\n    <bb-empty-state-ui\n      title=\"Page couldn't load\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      i18n-title=\"@@connect-external-accounts-journey.error.state.title\"\n      i18n-subtitle=\"@@connect-external-accounts-journey.error.state.message\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<bb-a2a-link-account-form\n  [modalOpen]=\"isModalOpen\"\n  (isAccountModalOpen)=\"closeModal()\"\n  [accountForm]=\"accountForm\"\n  [submitted]=\"submitted\"\n  (submitForm)=\"onSubmit()\"\n  (discardData)=\"onDiscardData()\"\n  [isLoading]=\"loading$ | async\"\n  (buildForm)=\"onOpenModal()\"\n  [formInputLengths]=\"formInputLengths\"\n  [modalState]=\"modalState\"\n></bb-a2a-link-account-form>\n\n<bb-a2a-account-details\n  [isOpen]=\"isOpen\"\n  (closeModal)=\"closeDetailsModal()\"\n  [externalAccount]=\"account\"\n></bb-a2a-account-details>\n\n<bb-pending-activation-account-details\n  [isOpen]=\"isPendigAccountOpen\"\n  (closeModal)=\"closePendingAccountModal()\"\n  [externalAccount]=\"account\"\n  [activateAccountForm]=\"activateForm\"\n  [loading]=\"loading$ | async\"\n  [submitted]=\"activateAccountSubmitted\"\n  [activationFailed]=\"activationFailed\"\n  [attemptsExceeded]=\"attemptsExceeded\"\n  [invalidAmount]=\"invalidAmount\"\n  (submitForm)=\"onActivateAccount()\"\n  (refreshList)=\"refreshAccountsList()\"\n  (setAccountStatus)=\"activationFailed = false\"\n  (setAttemptsExceeded)=\"attemptsExceeded = false\"\n  (setInvalidAmount)=\"invalidAmount = false\"\n  [currencies]=\"currencies\"\n></bb-pending-activation-account-details>\n", components: [{ type: AccountsListComponent, selector: "bb-a2a-accounts-list", inputs: ["accounts", "activateForm", "isLoading"], outputs: ["openModal", "selectExternalAccount", "deleteAccount", "makeTransfer"] }, { type: EmptyListComponent, selector: "bb-a2a-empty-list", outputs: ["openModal"] }, { type: i8__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1__namespace$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: LinkAccountModalComponent, selector: "bb-a2a-link-account-form", inputs: ["modalOpen", "accountForm", "submitted", "isLoading", "formInputLengths", "modalState"], outputs: ["submitForm", "discardData", "buildForm"] }, { type: AccountDetailModalComponent, selector: "bb-a2a-account-details", inputs: ["isOpen", "externalAccount"], outputs: ["closeModal"] }, { type: PendingActivationAccountDetailsComponent, selector: "bb-pending-activation-account-details", inputs: ["isOpen", "externalAccount", "activateAccountForm", "loading", "submitted", "activationFailed", "attemptsExceeded", "invalidAmount", "currencies"], outputs: ["openDetailsModal", "closeModal", "refreshList", "submitForm", "setAccountStatus", "setAttemptsExceeded", "setInvalidAmount"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-connect-external-accounts-view',
                        templateUrl: 'connect-external-accounts-view.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$4.NotificationService }, { type: i3__namespace$3.FormBuilder }, { type: LinkAccountService }, { type: ConnectExternalAccountsJourneyConfigService }, { type: CommunicationService, decorators: [{
                            type: i0.Optional
                        }] }];
        } });
    var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;

    var defaultRoute = {
        path: '',
        component: ConnectExternalAccountsJourneyComponent,
        children: [{ path: '', component: ConnectExternalAccountsViewComponent }],
    };
    var components = [ConnectExternalAccountsJourneyComponent, ConnectExternalAccountsViewComponent];
    var uiModules = [i1$2.EmptyStateModule, i2$1.HeaderModule];
    var ConnectExternalAccountsJourneyModule = /** @class */ (function () {
        function ConnectExternalAccountsJourneyModule() {
        }
        ConnectExternalAccountsJourneyModule.forRoot = function (data) {
            if (data === void 0) { data = { route: defaultRoute }; }
            return {
                ngModule: ConnectExternalAccountsJourneyModule,
                providers: [i4$1.provideRoutes([data.route])],
            };
        };
        return ConnectExternalAccountsJourneyModule;
    }());
    /** @nocollapse */ ConnectExternalAccountsJourneyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ConnectExternalAccountsJourneyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyModule, declarations: [ConnectExternalAccountsJourneyComponent, ConnectExternalAccountsViewComponent], imports: [i5.CommonModule,
            i4$1.RouterModule, i1__namespace$5.BackbaseCoreModule, ConnectExternalAccountsJourneyUiModule, i1$2.EmptyStateModule, i2$1.HeaderModule], exports: [i1$2.EmptyStateModule, i2$1.HeaderModule, ConnectExternalAccountsJourneyComponent, ConnectExternalAccountsViewComponent] });
    /** @nocollapse */ ConnectExternalAccountsJourneyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyModule, providers: [ConnectExternalAccountsJourneyConfigService], imports: [__spreadArray([
                i5.CommonModule,
                i4$1.RouterModule,
                i1$5.BackbaseCoreModule.withConfig({
                    classMap: {
                        ConnectExternalAccountsJourneyComponent: ConnectExternalAccountsJourneyComponent,
                    },
                }),
                ConnectExternalAccountsJourneyUiModule
            ], __read(uiModules)), i1$2.EmptyStateModule, i2$1.HeaderModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConnectExternalAccountsJourneyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components)),
                        imports: __spreadArray([
                            i5.CommonModule,
                            i4$1.RouterModule,
                            i1$5.BackbaseCoreModule.withConfig({
                                classMap: {
                                    ConnectExternalAccountsJourneyComponent: ConnectExternalAccountsJourneyComponent,
                                },
                            }),
                            ConnectExternalAccountsJourneyUiModule
                        ], __read(uiModules)),
                        exports: __spreadArray(__spreadArray([], __read(uiModules)), __read(components)),
                        providers: [ConnectExternalAccountsJourneyConfigService],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ConnectExternalAccontsCommunicationService = CommunicationService;
    exports.ConnectExternalAccountsJourneyComponent = ConnectExternalAccountsJourneyComponent;
    exports.ConnectExternalAccountsJourneyConfigService = ConnectExternalAccountsJourneyConfigService;
    exports.ConnectExternalAccountsJourneyConfigurationToken = ConnectExternalAccountsJourneyConfigurationToken;
    exports.ConnectExternalAccountsJourneyModule = ConnectExternalAccountsJourneyModule;
    exports.ConnectExternalAccountsJourneyUiModule = ConnectExternalAccountsJourneyUiModule;
    exports.ConnectExternalAccountsViewComponent = ConnectExternalAccountsViewComponent;
    exports.LinkAccountService = LinkAccountService;
    exports["ӨAccountDetailModalComponent"] = AccountDetailModalComponent;
    exports["ӨAccountDetailModalHeaderComponent"] = AccountDetailModalHeaderComponent;
    exports["ӨAccountInformationComponent"] = AccountInformationComponent;
    exports["ӨAccountsListComponent"] = AccountsListComponent;
    exports["ӨActivateExternalAccountComponent"] = ActivateExternalAccountComponent;
    exports["ӨConfirmationDialogComponent"] = ConfirmationDialogComponent;
    exports["ӨEmptyListComponent"] = EmptyListComponent;
    exports["ӨLinkAccountInfoComponent"] = LinkAccountInfoComponent;
    exports["ӨLinkAccountModalComponent"] = LinkAccountModalComponent;
    exports["ӨPendingActivationAccountDetailsComponent"] = PendingActivationAccountDetailsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-connect-external-accounts-journey-ang.umd.js.map
