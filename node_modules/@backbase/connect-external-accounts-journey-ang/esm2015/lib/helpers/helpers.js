export const formatAccountNumber = (n) => (n && n.replace(/\s+/g, '')) || '';
export const validateNumber = (event) => {
    const { metaKey, ctrlKey, keyCode, key } = event;
    const pattern = /^\d+$/;
    const excludedKeys = [8, 16, 37, 38, 93, 39, 9];
    const ctrlKeys = metaKey || ctrlKey;
    const keyCodes = [65, 67, 86, 88];
    const allowedCommands = ctrlKeys && keyCodes.includes(keyCode);
    if (!pattern.test(key) && !excludedKeys.includes(keyCode) && !allowedCommands) {
        event.preventDefault();
    }
};
export function amountValidator(control) {
    return control.value && control.value.amount > 0 && control.value.currency.length > 0
        ? undefined
        : { invalidAmount: { value: control.value } };
}
export function routingTransitNumberValidator(control) {
    let { value } = control;
    const errors = {
        pattern: false,
        size: false,
    };
    if (value) {
        value = value.toString(10);
        const p = (str) => parseInt(str, 10);
        if (value.length !== 9)
            errors.size = true;
        const left = 3 * (p(value[0]) + p(value[3]) + p(value[6]));
        const mid = 7 * (p(value[1]) + p(value[4]) + p(value[7]));
        const right = p(value[2]) + p(value[5]) + p(value[8]);
        if ((left + mid + right) % 10 !== 0 && value.length >= 9)
            errors.pattern = true;
    }
    return errors.size || errors.pattern ? errors : null;
}
//# sourceMappingURL=helpers.js.map