import { Component, Optional } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { NotificationService } from '@backbase/ui-ang/notification';
import { BehaviorSubject, Subject, throwError } from 'rxjs';
import { catchError, takeUntil } from 'rxjs/operators';
import { CommunicationService } from '../communication.service';
import { FORM_INPUT_LENGTHS, RESPONSES } from '../helpers/constants';
import { amountValidator, formatAccountNumber, routingTransitNumberValidator } from '../helpers/helpers';
import { ModalState } from '../models/types';
import { ConnectExternalAccountsJourneyConfigService } from '../services/config.service';
import { LinkAccountService } from '../services/link-account.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/notification";
import * as i2 from "@angular/forms";
import * as i3 from "../services/link-account.service";
import * as i4 from "../services/config.service";
import * as i5 from "../communication.service";
import * as i6 from "../components/accounts-list/accounts-list.component";
import * as i7 from "../components/empty-list/empty-list.component";
import * as i8 from "@backbase/ui-ang/loading-indicator";
import * as i9 from "@backbase/ui-ang/empty-state";
import * as i10 from "../components/link-account-form/link-account-form.component";
import * as i11 from "../components/account-details/account-details.component";
import * as i12 from "../components/pending-activation-account-details/pending-activation-account-details.component";
import * as i13 from "@angular/common";
export class ConnectExternalAccountsViewComponent {
    constructor(notificationService, formBuilder, linkAccountService, config, communicationService) {
        this.notificationService = notificationService;
        this.formBuilder = formBuilder;
        this.linkAccountService = linkAccountService;
        this.config = config;
        this.communicationService = communicationService;
        this.submitted = false;
        this.isModalOpen = false;
        this.a2aAccounts$ = this.linkAccountService.accounts$;
        this.loading$ = new BehaviorSubject(false);
        this.httpResponseError$ = this.linkAccountService.responseError$;
        this.modalState = new BehaviorSubject(undefined);
        this.activateAccountSubmitted = false;
        this.isPendigAccountOpen = false;
        this.isOpen = false;
        this.activationFailed = false;
        this.attemptsExceeded = false;
        this.defaultAmount = {
            currency: '',
            amount: '',
        };
        this.invalidAmount = false;
        this.destroy$ = new Subject();
        this.formInputLengths = FORM_INPUT_LENGTHS;
    }
    get currencies() {
        return this.config.currencies;
    }
    ngOnInit() {
        this.linkAccountService.isModalOpen
            .pipe(takeUntil(this.destroy$))
            .subscribe(isOpen => isOpen && this.onOpenModal());
    }
    showNotification(success, notification) {
        this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: this.config.dismissMessageTime, modifier: success ? 'success' : 'error' }, notification));
    }
    showSuccessNotification() {
        this.showNotification(true, {
            header: $localize `:@@connect-external-accounts-journey.account.notification.success:Information submitted successfully`,
            message: '',
        });
    }
    noWhitespaceValidator(control) {
        const isWhitespace = (control.value || '').trim().length === 0;
        const isValid = !isWhitespace;
        // eslint-disable-next-line no-null/no-null
        return isValid ? null : { required: true };
    }
    buildAccountForm() {
        return this.formBuilder.group({
            inputAccountName: ['', [Validators.required, this.noWhitespaceValidator]],
            accountTypeSelect: ['', Validators.required],
            inputAccountNumber: ['', [Validators.required, this.noWhitespaceValidator, Validators.pattern(/^\d+$/)]],
            inputRoutingNumber: ['', [Validators.required, routingTransitNumberValidator]],
        });
    }
    buildActivateAccountForm() {
        return this.formBuilder.group({
            firstAmount: [this.defaultAmount, [amountValidator]],
            secondAmount: [this.defaultAmount, [amountValidator]],
        });
    }
    closeModal() {
        this.isModalOpen = false;
    }
    onOpenModal() {
        this.isModalOpen = true;
        this.accountForm = this.buildAccountForm();
        this.modalState.next(ModalState.Preview);
    }
    onSubmit() {
        this.submitted = true;
        this.loading$.next(true);
        if (this.accountForm.invalid) {
            this.loading$.next(false);
            return;
        }
        const formValues = this.accountForm.value;
        const accountItem = {
            routingNumber: formValues.inputRoutingNumber,
            accountNickName: formValues.inputAccountName.trim(),
            accountNumber: formatAccountNumber(formValues.inputAccountNumber),
            accountType: formValues.accountTypeSelect,
        };
        this.linkAccountService
            .postNewAccount(accountItem)
            .pipe(takeUntil(this.destroy$), catchError(err => {
            this.showNotification(false, {
                header: $localize `:@@connect-external-accounts-journey.account.notification.failure:Account creation failed`,
                message: '',
            });
            this.loading$.next(false);
            return throwError(err);
        }))
            .subscribe(() => {
            this.loading$.next(false);
            this.showSuccessNotification();
            this.accountForm.reset();
            this.submitted = false;
            this.linkAccountService.refreshAccounts$.next(accountItem);
            this.modalState.next(ModalState.Hidden);
        });
    }
    onDiscardData() {
        this.isModalOpen = false;
        this.submitted = false;
        this.accountForm.reset();
    }
    setExternalAccount(externalAccount) {
        if (externalAccount.status === 'PendingActivation') {
            this.isPendigAccountOpen = true;
        }
        else {
            this.isOpen = true;
        }
        this.activateForm = this.buildActivateAccountForm();
        this.account = externalAccount;
    }
    closeDetailsModal() {
        this.isOpen = false;
    }
    closePendingAccountModal() {
        this.isPendigAccountOpen = false;
        this.activateAccountSubmitted = false;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onActivateAccount() {
        var _a, _b;
        const externalAccountId = (_a = this.account) === null || _a === void 0 ? void 0 : _a.externalAccountId;
        this.activateAccountSubmitted = true;
        this.loading$.next(true);
        if (((_b = this.activateForm) === null || _b === void 0 ? void 0 : _b.invalid) || !externalAccountId) {
            this.loading$.next(false);
            return;
        }
        const amounts = {
            value1: this.activateForm.value.firstAmount.amount,
            value2: this.activateForm.value.secondAmount.amount,
        };
        this.linkAccountService
            .putNewAccountVerification(externalAccountId, amounts)
            .pipe(takeUntil(this.destroy$))
            .subscribe(res => {
            this.isPendigAccountOpen = false;
            this.loading$.next(false);
            this.showSuccessNotification();
            this.activateForm.reset();
            this.activateAccountSubmitted = false;
            this.linkAccountService.refreshAccounts$.next(res);
        }, ({ error }) => {
            const { errors } = error;
            if (errors === null || errors === void 0 ? void 0 : errors.length) {
                this.manageResponseError(errors[0].key);
            }
            else {
                this.activationFailed = false;
            }
            this.showNotification(false, {
                header: $localize `:@@connect-external-accounts-journey.account.activation.failure.failure:Account activation failed`,
                message: '',
            });
            this.loading$.next(false);
        });
    }
    manageResponseError(key) {
        switch (key) {
            case RESPONSES.unmatchedKey:
                this.activationFailed = true;
                this.invalidAmount = false;
                break;
            case RESPONSES.exceededKey:
                this.attemptsExceeded = true;
                this.invalidAmount = false;
                break;
            case RESPONSES.invalidAmount:
                this.activationFailed = false;
                this.attemptsExceeded = false;
                this.invalidAmount = true;
        }
    }
    refreshAccountsList() {
        this.linkAccountService.refreshAccounts$.next(this.account);
        if (this.attemptsExceeded) {
            this.activateForm.controls['firstAmount'].disable();
            this.activateForm.controls['secondAmount'].disable();
        }
    }
    deleteAccount(id) {
        this.linkAccountService
            .removeAccount(id)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.refreshAccountsList();
            this.showNotification(true, {
                header: $localize `:@@connect-external-accounts-journey.account.success-message:Account removed successfully`,
                message: '',
            });
        }, () => {
            this.showNotification(false, {
                header: $localize `:@@connect-external-accounts-journey.account.failure-message:Account could not be removed`,
                message: '',
            });
        });
    }
    onCreatePayment(id) {
        if (this.communicationService) {
            this.communicationService.navigateToMakeTransfer(id);
        }
    }
    initiateConnectAccount() {
        this.onOpenModal();
    }
}
/** @nocollapse */ ConnectExternalAccountsViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsViewComponent, deps: [{ token: i1.NotificationService }, { token: i2.FormBuilder }, { token: i3.LinkAccountService }, { token: i4.ConnectExternalAccountsJourneyConfigService }, { token: i5.CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ConnectExternalAccountsViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConnectExternalAccountsViewComponent, selector: "bb-connect-external-accounts-view", ngImport: i0, template: "<ng-container *ngIf=\"!(httpResponseError$ | async); else errorState\">\n  <ng-container *ngIf=\"a2aAccounts$ | async as accounts; else loadingA2AList\">\n    <div *ngIf=\"accounts?.length; else emptyList\">\n      <bb-a2a-accounts-list\n        (openModal)=\"onOpenModal()\"\n        [accounts]=\"accounts\"\n        (selectExternalAccount)=\"setExternalAccount($event)\"\n        [activateForm]=\"activateForm\"\n        [isLoading]=\"loading$ | async\"\n        (submitActivateForm)=\"onActivateAccount()\"\n        (deleteAccount)=\"deleteAccount($event)\"\n        (makeTransfer)=\"onCreatePayment($event)\"\n      ></bb-a2a-accounts-list>\n    </div>\n    <ng-template #emptyList>\n      <bb-a2a-empty-list (openModal)=\"onOpenModal()\"> </bb-a2a-empty-list>\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingA2AList>\n  <div class=\"bb-state-container card\">\n    <bb-loading-indicator-ui\n      text=\"Loading data...\"\n      text-i18n=\"@@bb-connected-external-accounts-journey.connected-external-accounts-view.loading-placeholder\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"bb-state-container card\">\n    <bb-empty-state-ui\n      title=\"Page couldn't load\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      i18n-title=\"@@connect-external-accounts-journey.error.state.title\"\n      i18n-subtitle=\"@@connect-external-accounts-journey.error.state.message\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<bb-a2a-link-account-form\n  [modalOpen]=\"isModalOpen\"\n  (isAccountModalOpen)=\"closeModal()\"\n  [accountForm]=\"accountForm\"\n  [submitted]=\"submitted\"\n  (submitForm)=\"onSubmit()\"\n  (discardData)=\"onDiscardData()\"\n  [isLoading]=\"loading$ | async\"\n  (buildForm)=\"onOpenModal()\"\n  [formInputLengths]=\"formInputLengths\"\n  [modalState]=\"modalState\"\n></bb-a2a-link-account-form>\n\n<bb-a2a-account-details\n  [isOpen]=\"isOpen\"\n  (closeModal)=\"closeDetailsModal()\"\n  [externalAccount]=\"account\"\n></bb-a2a-account-details>\n\n<bb-pending-activation-account-details\n  [isOpen]=\"isPendigAccountOpen\"\n  (closeModal)=\"closePendingAccountModal()\"\n  [externalAccount]=\"account\"\n  [activateAccountForm]=\"activateForm\"\n  [loading]=\"loading$ | async\"\n  [submitted]=\"activateAccountSubmitted\"\n  [activationFailed]=\"activationFailed\"\n  [attemptsExceeded]=\"attemptsExceeded\"\n  [invalidAmount]=\"invalidAmount\"\n  (submitForm)=\"onActivateAccount()\"\n  (refreshList)=\"refreshAccountsList()\"\n  (setAccountStatus)=\"activationFailed = false\"\n  (setAttemptsExceeded)=\"attemptsExceeded = false\"\n  (setInvalidAmount)=\"invalidAmount = false\"\n  [currencies]=\"currencies\"\n></bb-pending-activation-account-details>\n", components: [{ type: i6.AccountsListComponent, selector: "bb-a2a-accounts-list", inputs: ["accounts", "activateForm", "isLoading"], outputs: ["openModal", "selectExternalAccount", "deleteAccount", "makeTransfer"] }, { type: i7.EmptyListComponent, selector: "bb-a2a-empty-list", outputs: ["openModal"] }, { type: i8.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i9.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i10.LinkAccountModalComponent, selector: "bb-a2a-link-account-form", inputs: ["modalOpen", "accountForm", "submitted", "isLoading", "formInputLengths", "modalState"], outputs: ["submitForm", "discardData", "buildForm"] }, { type: i11.AccountDetailModalComponent, selector: "bb-a2a-account-details", inputs: ["isOpen", "externalAccount"], outputs: ["closeModal"] }, { type: i12.PendingActivationAccountDetailsComponent, selector: "bb-pending-activation-account-details", inputs: ["isOpen", "externalAccount", "activateAccountForm", "loading", "submitted", "activationFailed", "attemptsExceeded", "invalidAmount", "currencies"], outputs: ["openDetailsModal", "closeModal", "refreshList", "submitForm", "setAccountStatus", "setAttemptsExceeded", "setInvalidAmount"] }], directives: [{ type: i13.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i13.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConnectExternalAccountsViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-connect-external-accounts-view',
                    templateUrl: 'connect-external-accounts-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationService }, { type: i2.FormBuilder }, { type: i3.LinkAccountService }, { type: i4.ConnectExternalAccountsJourneyConfigService }, { type: i5.CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=connect-external-accounts-view.component.js.map