import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "../details-header/details-header.component";
import * as i3 from "@backbase/ui-ang/alert";
import * as i4 from "../activate-account-form/activate-account-form.component";
import * as i5 from "@backbase/ui-ang/collapsible";
import * as i6 from "@backbase/ui-ang/icon";
import * as i7 from "../account-information/account-information.component";
import * as i8 from "@backbase/ui-ang/load-button";
import * as i9 from "../confirmation-dialog/confirmation-dialog.component";
import * as i10 from "@angular/common";
import * as i11 from "@backbase/ui-ang/button";
export class PendingActivationAccountDetailsComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        /**
         * Open account details modal flag
         * Default value is false
         */
        this.isOpen = false;
        /**
         * Loading flag
         * Default value is false
         */
        this.loading = false;
        /**
         * Submitted form flag
         * Default value is false
         */
        this.submitted = false;
        /**
         * Activate account failure flag
         * Default value is false
         */
        this.activationFailed = false;
        /**
         * Activate account attempts
         * Default value is false
         */
        this.attemptsExceeded = false;
        /**
         * Ivalid activation amount
         * Default value is false
         */
        this.invalidAmount = false;
        /**
         * List of currencies
         */
        this.currencies = [];
        /**
         * Open account details modal event emitter
         */
        this.openDetailsModal = new EventEmitter();
        /**
         * Close account details modal event emitter
         */
        this.closeModal = new EventEmitter();
        /**
         * Refresh account list event emitter
         */
        this.refreshList = new EventEmitter();
        /**
         * Submit form event emitter
         */
        this.submitForm = new EventEmitter();
        /**
         * Account status event emitter
         */
        this.setAccountStatus = new EventEmitter();
        /**
         * Account activation attempts exceeded event emitter
         */
        this.setAttemptsExceeded = new EventEmitter();
        /**
         * Invalid amount on account activation event emitter
         */
        this.setInvalidAmount = new EventEmitter();
        this.isAccountOpen = true;
        this.confirmationModalOpen = false;
        this.areDetailsOpen = false;
        this.mequieromorir = true;
    }
    onClose() {
        const formControls = this.activateAccountForm.controls;
        if ((formControls.firstAmount.value['amount'] || formControls.secondAmount.value['amount']) &&
            !this.attemptsExceeded) {
            this.confirmationModalOpen = true;
        }
        else {
            this.closeModal.emit();
            this.setAccountStatus.emit();
            this.areDetailsOpen = false;
            this.refreshAccountsList();
        }
    }
    setOpenValue() {
        this.isAccountOpen = !this.isAccountOpen;
    }
    onSubmit() {
        this.submitForm.emit();
    }
    refreshAccountsList() {
        if (this.attemptsExceeded) {
            this.refreshList.emit();
            this.setAttemptsExceeded.emit();
        }
        else if (this.invalidAmount) {
            this.setInvalidAmount.emit();
        }
    }
    toggleDisplayDetails() {
        this.areDetailsOpen = !this.areDetailsOpen;
    }
    onCloseConfirmationModal() {
        this.setAccountStatus.emit();
        this.areDetailsOpen = false;
        this.confirmationModalOpen = false;
    }
}
/** @nocollapse */ PendingActivationAccountDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PendingActivationAccountDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PendingActivationAccountDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PendingActivationAccountDetailsComponent, selector: "bb-pending-activation-account-details", inputs: { isOpen: "isOpen", externalAccount: "externalAccount", activateAccountForm: "activateAccountForm", loading: "loading", submitted: "submitted", activationFailed: "activationFailed", attemptsExceeded: "attemptsExceeded", invalidAmount: "invalidAmount", currencies: "currencies" }, outputs: { openDetailsModal: "openDetailsModal", closeModal: "closeModal", refreshList: "refreshList", submitForm: "submitForm", setAccountStatus: "setAccountStatus", setAttemptsExceeded: "setAttemptsExceeded", setInvalidAmount: "setInvalidAmount" }, ngImport: i0, template: "<bb-modal-ui *ngIf=\"externalAccount as account\" [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-a2a-details-header\n    [account]=\"account\"\n    (closeModal)=\"onClose()\"\n    [attemptsExceeded]=\"attemptsExceeded\"\n  ></bb-a2a-details-header>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div *ngIf=\"activationFailed && !attemptsExceeded\">\n        <bb-alert-ui\n          title=\"The entered deposit amounts are incorrect. Please try again.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-account-details-modal-excessive-returns-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.incorrect-amounts.title\"\n        >\n        </bb-alert-ui>\n      </div>\n      <div *ngIf=\"attemptsExceeded\">\n        <bb-alert-ui\n          title=\"The activation of your account has failed\"\n          message=\"You have exceeded the number of attempts to activate your account. To continue, please raise a new request.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-pending-activation-failed-verification-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.failed-verification.title\"\n          i18n-message=\"@@payord-a2a.pending.activation.failed-verification.message\"\n        >\n        </bb-alert-ui>\n      </div>\n      <div *ngIf=\"invalidAmount\">\n        <bb-alert-ui\n          title=\"The activation of your account has failed\"\n          message=\"Value must be between 0 and 51 cents.\"\n          [dismissible]=\"false\"\n          data-role=\"payord-a2a-pending-activation-invalid-amount-error\"\n          i18n-title=\"@@payord-a2a.pending.activation.invalid-amount.title\"\n          i18n-message=\"@@payord-a2a.pending.activation.invalid-amount.message\"\n        >\n        </bb-alert-ui>\n      </div>\n      <ng-container>\n        <div class=\"bb-block bb-block--lg\">\n          <span\n            data-role=\"payord-a2a-pending-activation-activate-account.information.message\"\n            i18n-message=\"@@payord-a2a.pending.activation.activate-account-information.message\"\n          >\n            Insert below the two amounts under 50 cents that were credited to your connected account.<br />\n            The order of the payments does not influence the activation.\n          </span>\n        </div>\n        <bb-activate-a2a-account\n          *ngIf=\"isOpen\"\n          [activateAccountForm]=\"activateAccountForm\"\n          [submitted]=\"submitted\"\n          [isDisabled]=\"attemptsExceeded\"\n          [currencies]=\"currencies\"\n        ></bb-activate-a2a-account>\n      </ng-container>\n      <bb-collapsible-ui [isOpen]=\"areDetailsOpen\" #collapse>\n        <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n          <div class=\"bb-block bb-block--lg bb-stack\">\n            <button\n              class=\"text-primary bb-text-bold\"\n              bbButton\n              [color]=\"'link-text'\"\n              buttonSize=\"md\"\n              (click)=\"toggleDisplayDetails()\"\n              data-role=\"toggle-details-button\"\n            >\n              <bb-icon-ui\n                class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                size=\"md\"\n                [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n              ></bb-icon-ui>\n              <p\n                class=\"bb-stack__item bb-block bb-block--no-margin\"\n                *ngIf=\"isOpen\"\n                data-role=\"payord-a2a-account-details-modal-hide-info-text\"\n                i18n=\"@@payord-a2a.pending.activation.hide.details\"\n              >\n                Hide account details\n              </p>\n              <p\n                class=\"bb-stack__item bb-block bb-block--no-margin\"\n                *ngIf=\"!isOpen\"\n                data-role=\"payord-a2a-account-details-modal-show-info-text\"\n                i18n=\"@@payord-a2a.pending.activation.show.details\"\n              >\n                Show account details\n              </p>\n            </button>\n          </div>\n        </ng-template>\n        <ng-template bbCollapsibleBody>\n          <bb-a2a-account-information [account]=\"account\"></bb-a2a-account-information>\n        </ng-template>\n      </bb-collapsible-ui>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui *ngIf=\"!attemptsExceeded\">\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          [isLoading]=\"loading\"\n          (click)=\"onSubmit()\"\n          data-role=\"payord-a2a-activate-account-modal\"\n          i18n=\"@@payord-a2a-pending.activation.activate-account-btn.span\"\n        >\n          Activate\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"payord-a2a-activate-account-modal-cancel\"\n          i18n=\"@@payord-a2a-pending.activation.cancel-btn.span\"\n          (click)=\"onClose()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<bb-confirmation-dialog\n  [isOpen]=\"confirmationModalOpen\"\n  [confirmButtonColor]=\"'danger'\"\n  (cancel)=\"confirmationModalOpen = false\"\n  (confirm)=\"closeModal.emit(); refreshAccountsList(); onCloseConfirmationModal()\"\n>\n  <span\n    title\n    class=\"modal-title\"\n    data-role=\"payord-a2a-activate-account.confirmation-dialog-content\"\n    i18n=\"@@payord-activate-account.confirmation-dialog.discard.title\"\n  >\n    Discard amount(s)\n  </span>\n  <span\n    body\n    data-role=\"payord-a2a-activate-account.confirmation-dialog.discard.body\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.body\"\n  >\n    Are you sure you want to discard the amount(s)? The data you have entered will be lost.\n  </span>\n  <span\n    confirmActionName\n    data-role=\"payord-a2a-activate-account-confirmation-dialog-cancel\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.action.confirm\"\n  >\n    Yes, Discard\n  </span>\n  <span\n    cancelActionName\n    data-role=\"payord-a2a-activate-account-confirmation-dialog-keep\"\n    i18n=\"@@payord-a2a-activate-account.confirmation-dialog.discard.action.cancel\"\n  >\n    Keep data\n  </span>\n</bb-confirmation-dialog>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i2.AccountDetailModalHeaderComponent, selector: "bb-a2a-details-header", inputs: ["account", "attemptsExceeded"], outputs: ["closeModal"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4.ActivateExternalAccountComponent, selector: "bb-activate-a2a-account", inputs: ["submitted", "activateAccountForm", "isDisabled", "currencies"], outputs: ["setDecimalsValues"] }, { type: i5.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i6.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i7.AccountInformationComponent, selector: "bb-a2a-account-information", inputs: ["account"] }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i8.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i9.ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PendingActivationAccountDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pending-activation-account-details',
                    templateUrl: 'pending-activation-account-details.component.html',
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], externalAccount: [{
                type: Input
            }], activateAccountForm: [{
                type: Input
            }], loading: [{
                type: Input
            }], submitted: [{
                type: Input
            }], activationFailed: [{
                type: Input
            }], attemptsExceeded: [{
                type: Input
            }], invalidAmount: [{
                type: Input
            }], currencies: [{
                type: Input
            }], openDetailsModal: [{
                type: Output
            }], closeModal: [{
                type: Output
            }], refreshList: [{
                type: Output
            }], submitForm: [{
                type: Output
            }], setAccountStatus: [{
                type: Output
            }], setAttemptsExceeded: [{
                type: Output
            }], setInvalidAmount: [{
                type: Output
            }] } });
//# sourceMappingURL=pending-activation-account-details.component.js.map