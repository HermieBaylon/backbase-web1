import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { validateNumber } from '../../helpers/helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/currency-input";
import * as i2 from "@backbase/ui-ang/input-validation-message";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
export class ActivateExternalAccountComponent {
    constructor() {
        this.numberValidation = validateNumber;
        /**
         * Submitted form flag
         * Default value is false
         */
        this.submitted = false;
        /**
         * Form fields disabled flag
         * Default value is false
         */
        this.isDisabled = false;
        /**
         * Currency list
         */
        this.currencies = [];
        /**
         * Set decimals fields values event emitter
         */
        this.setDecimalsValues = new EventEmitter();
        this.currencyState = { currency: true, integer: true, decimal: false };
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control === null || control === void 0 ? void 0 : control.valid;
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.activateAccountForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    onSetDecimalsValues(name) {
        const value = this.activateAccountForm.controls[name].value;
        const field = { name, value };
        this.setDecimalsValues.emit(field);
    }
}
/** @nocollapse */ ActivateExternalAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActivateExternalAccountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ActivateExternalAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ActivateExternalAccountComponent, selector: "bb-activate-a2a-account", inputs: { submitted: "submitted", activateAccountForm: "activateAccountForm", isDisabled: "isDisabled", currencies: "currencies" }, outputs: { setDecimalsValues: "setDecimalsValues" }, ngImport: i0, template: "<form [formGroup]=\"activateAccountForm\" class=\"form-group\">\n  <div class=\"bb-label\" id=\"firstAmountLabel\" i18n=\"@@payord-a2a-activate-account.first.amount\">First amount</div>\n  <div class=\"row col-md-8 col-sm-8\">\n    <bb-currency-input-ui\n      [attr.data-role]=\"'first-decimal-input'\"\n      aria-labelledby=\"firstAmountLabel\"\n      [disabled]=\"currencyState\"\n      [currencies]=\"currencies\"\n      formControlName=\"firstAmount\"\n      [placeholder]=\"'00'\"\n      [required]=\"true\"\n      [isRightAligned]=\"true\"\n    ></bb-currency-input-ui>\n  </div>\n\n  <div class=\"form-group\">\n    <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('firstAmount')\">\n      <ng-container *ngIf=\"submitted && activateAccountForm?.get('firstAmount')?.errors as errors\">\n        <span\n          *ngIf=\"errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.required.Decimals\"\n          data-role=\"payord-a2a-activate-account-first-decimals-required-message\"\n        >\n          Amount is required.\n        </span>\n        <span\n          *ngIf=\"errors.minValue && !errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.pattern.Decimals\"\n          data-role=\"payord-a2a-activate-account-first-Decimals-pattern-message\"\n        >\n          Amount is invalid.\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-label\" id=\"secondAmountLabel\" i18n=\"@@payord-a2a-activate-account.second.amount\">Second amount</div>\n\n  <div class=\"row col-md-8 col-sm-8\">\n    <bb-currency-input-ui\n      [attr.data-role]=\"'second-decimal-input'\"\n      aria-labelledby=\"secondAmountLabel\"\n      [disabled]=\"currencyState\"\n      [currencies]=\"currencies\"\n      formControlName=\"secondAmount\"\n      [required]=\"true\"\n      [placeholder]=\"'00'\"\n      [isRightAligned]=\"true\"\n    ></bb-currency-input-ui>\n  </div>\n\n  <div>\n    <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('secondAmount')\">\n      <ng-container *ngIf=\"submitted && activateAccountForm?.get('secondAmount')?.errors as errors\">\n        <span\n          *ngIf=\"errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.required.Decimals\"\n          data-role=\"payord-a2a-activate-account-second-decimals-required-message\"\n        >\n          Amount is required.\n        </span>\n        <span\n          *ngIf=\"errors.minValue && !errors.invalidAmount\"\n          i18n=\"@@payord-a2a-link-account.modal.pattern.Decimals\"\n          data-role=\"payord-a2a-activate-account-second-Decimals-pattern-message\"\n        >\n          Amount is invalid.\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n</form>\n", components: [{ type: i1.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActivateExternalAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-activate-a2a-account',
                    templateUrl: 'activate-account-form.component.html',
                }]
        }], propDecorators: { submitted: [{
                type: Input
            }], activateAccountForm: [{
                type: Input
            }], isDisabled: [{
                type: Input
            }], currencies: [{
                type: Input
            }], setDecimalsValues: [{
                type: Output
            }] } });
//# sourceMappingURL=activate-account-form.component.js.map