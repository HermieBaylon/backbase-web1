{"version":3,"file":"link-account.service.js","sourceRoot":"","sources":["../../../../../../libs/connect-external-accounts-journey/src/lib/services/link-account.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,oBAAoB,IAAI,gBAAgB,GAKzC,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EAAE,eAAe,EAAc,UAAU,EAAE,MAAM,MAAM,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;;;AAS5D,MAAM,OAAO,kBAAkB;IAuB7B,YAA6B,+BAAiD;QAAjD,oCAA+B,GAA/B,+BAA+B,CAAkB;QAtBtE,oBAAe,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;QAE7C,mBAAc,GAAyE;YACtG,aAAa,EAAE,EAAE;YACjB,eAAe,EAAE,EAAE;YACnB,aAAa,EAAE,EAAE;SAClB,CAAC;QAEO,mBAAc,GAAG,IAAI,eAAe,CAAgC,SAAS,CAAC,CAAC;QAC/E,qBAAgB,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5D,cAAS,GAAsD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAChG,SAAS,CAAC,GAAG,EAAE,CACb,IAAI,CAAC,+BAA+B,CAAC,MAAM,EAAE,CAAC,IAAI,CAChD,UAAU,CAAC,GAAG,CAAC,EAAE;YACf,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9B,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,EACF,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CACtD,CACF,CACF,CAAC;IAE+E,CAAC;IAElF,cAAc,CAAC,WAAuC;QACpD,OAAO,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,EAAE,0BAA0B,EAAE,WAAW,EAAE,CAAC,CAAC;IAClG,CAAC;IAED,yBAAyB,CAAC,UAAkB,EAAE,OAAoD;QAChG,OAAO,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC;YACjD,iBAAiB,EAAE,UAAU;YAC7B,qCAAqC,EAAE,OAAgD;SACxF,CAAC,CAAC;IACL,CAAC;IAED,aAAa,CAAC,iBAAyB;QACrC,OAAO,IAAI,CAAC,+BAA+B,CAAC,OAAO,CAAC,EAAE,iBAAiB,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,SAAS,CAAC,KAAK,GAAG,IAAI;QACpB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;;mIA9CU,kBAAkB;uIAAlB,kBAAkB;4FAAlB,kBAAkB;kBAD9B,UAAU","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  A2aClientHttpService as A2aClientService,\n  DetailedExternalAccount,\n  ExternalAccountGetPostPutResponse,\n  ExternalAccountPostRequest,\n  ExternalAccountVerificationPutRequest,\n} from '@backbase/data-ang/payment-order-a2a';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\n// temporary workaround: please check https://backbase.atlassian.net/browse/PAYM-1109\ninterface ExternalAccountVerificationPutRequestExtend {\n  value1: string | number;\n  value2: string | number;\n}\n\n@Injectable()\nexport class LinkAccountService {\n  private isFormModalOpen = new BehaviorSubject<boolean>(false);\n\n  private readonly defaultAccount: Partial<DetailedExternalAccount | ExternalAccountGetPostPutResponse> = {\n    routingNumber: '',\n    accountNickName: '',\n    accountNumber: '',\n  };\n\n  readonly responseError$ = new BehaviorSubject<HttpErrorResponse | undefined>(undefined);\n  readonly refreshAccounts$ = new BehaviorSubject(this.defaultAccount);\n  readonly accounts$: Observable<DetailedExternalAccount[] | undefined> = this.refreshAccounts$.pipe(\n    switchMap(() =>\n      this.paymentOrdersA2ADataHttpService.getAll().pipe(\n        catchError(err => {\n          this.responseError$.next(err);\n          return throwError(err);\n        }),\n        map(res => (res && res.accounts ? res.accounts : [])),\n      ),\n    ),\n  );\n\n  constructor(private readonly paymentOrdersA2ADataHttpService: A2aClientService) {}\n\n  postNewAccount(contactItem: ExternalAccountPostRequest) {\n    return this.paymentOrdersA2ADataHttpService.create({ externalAccountPostRequest: contactItem });\n  }\n\n  putNewAccountVerification(externalId: string, amounts: ExternalAccountVerificationPutRequestExtend) {\n    return this.paymentOrdersA2ADataHttpService.verify({\n      externalAccountId: externalId,\n      externalAccountVerificationPutRequest: amounts as ExternalAccountVerificationPutRequest,\n    });\n  }\n\n  removeAccount(externalAccountId: string) {\n    return this.paymentOrdersA2ADataHttpService._delete({ externalAccountId });\n  }\n\n  get isModalOpen(): Observable<boolean> {\n    return this.isFormModalOpen;\n  }\n\n  openModal(value = true) {\n    this.isFormModalOpen.next(value);\n  }\n}\n"]}