import { EventEmitter, OnChanges } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';
import { ModalState } from '../../models/types';
import * as i0 from "@angular/core";
export declare class LinkAccountModalComponent implements OnChanges {
    readonly modalOptions: {
        backdrop: string;
        keyboard: boolean;
    };
    /**
     * Modal open flag
     * Default value is false
     */
    modalOpen: boolean;
    /**
     * Account form
     */
    accountForm: FormGroup;
    /**
     * Submitted form flag
     * Default value is false
     */
    submitted: boolean;
    /**
     * Loading data flag
     * Default value is false
     */
    isLoading: boolean;
    /**
     * Form options input to pass options from journey
     */
    formInputLengths?: {
        name: number;
        number: number;
        routingNumber: number;
    };
    /**
     * Modal state flag
     */
    modalState: BehaviorSubject<ModalState>;
    /**
     * Submit form event emitter
     */
    submitForm: EventEmitter<void>;
    /**
     * Discard account form data event emitter
     */
    discardData: EventEmitter<void>;
    /**
     * Build account form event emitter
     */
    buildForm: EventEmitter<void>;
    confirmationModalOpen: boolean;
    numberValidator: (event: import("../../models/types").EventTypes) => void;
    gc$: Subject<void>;
    preventFormDiscard: boolean;
    readonly states: typeof ModalState;
    state$: BehaviorSubject<ModalState>;
    isFieldValid(fieldName: string): boolean | undefined;
    private getControl;
    hasRequiredError(field: string): boolean | undefined;
    onSubmit(): void;
    onDiscard(): void;
    manageConfirmationModal(): void;
    openModal(): void;
    closeModal(): void;
    ngOnChanges(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LinkAccountModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LinkAccountModalComponent, "bb-a2a-link-account-form", never, { "modalOpen": "modalOpen"; "accountForm": "accountForm"; "submitted": "submitted"; "isLoading": "isLoading"; "formInputLengths": "formInputLengths"; "modalState": "modalState"; }, { "submitForm": "submitForm"; "discardData": "discardData"; "buildForm": "buildForm"; }, never, never>;
}
