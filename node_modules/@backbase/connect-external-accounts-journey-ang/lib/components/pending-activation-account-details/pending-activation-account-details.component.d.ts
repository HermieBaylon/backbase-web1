import { EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { DetailedExternalAccount } from '@backbase/data-ang/payment-order-a2a';
import * as i0 from "@angular/core";
export declare class PendingActivationAccountDetailsComponent {
    readonly modalOptions: {
        backdrop: string;
        keyboard: boolean;
    };
    /**
     * Open account details modal flag
     * Default value is false
     */
    isOpen: boolean;
    /**
     * External account details
     */
    externalAccount: DetailedExternalAccount | null;
    /**
     * Activate account form
     */
    activateAccountForm: FormGroup;
    /**
     * Loading flag
     * Default value is false
     */
    loading: boolean;
    /**
     * Submitted form flag
     * Default value is false
     */
    submitted: boolean;
    /**
     * Activate account failure flag
     * Default value is false
     */
    activationFailed: boolean;
    /**
     * Activate account attempts
     * Default value is false
     */
    attemptsExceeded: boolean;
    /**
     * Ivalid activation amount
     * Default value is false
     */
    invalidAmount: boolean;
    /**
     * List of currencies
     */
    currencies: Array<string>;
    /**
     * Open account details modal event emitter
     */
    openDetailsModal: EventEmitter<any>;
    /**
     * Close account details modal event emitter
     */
    closeModal: EventEmitter<void>;
    /**
     * Refresh account list event emitter
     */
    refreshList: EventEmitter<void>;
    /**
     * Submit form event emitter
     */
    submitForm: EventEmitter<void>;
    /**
     * Account status event emitter
     */
    setAccountStatus: EventEmitter<void>;
    /**
     * Account activation attempts exceeded event emitter
     */
    setAttemptsExceeded: EventEmitter<void>;
    /**
     * Invalid amount on account activation event emitter
     */
    setInvalidAmount: EventEmitter<void>;
    isAccountOpen: boolean;
    confirmationModalOpen: boolean;
    areDetailsOpen: boolean;
    mequieromorir: boolean;
    onClose(): void;
    setOpenValue(): void;
    onSubmit(): void;
    refreshAccountsList(): void;
    toggleDisplayDetails(): void;
    onCloseConfirmationModal(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PendingActivationAccountDetailsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PendingActivationAccountDetailsComponent, "bb-pending-activation-account-details", never, { "isOpen": "isOpen"; "externalAccount": "externalAccount"; "activateAccountForm": "activateAccountForm"; "loading": "loading"; "submitted": "submitted"; "activationFailed": "activationFailed"; "attemptsExceeded": "attemptsExceeded"; "invalidAmount": "invalidAmount"; "currencies": "currencies"; }, { "openDetailsModal": "openDetailsModal"; "closeModal": "closeModal"; "refreshList": "refreshList"; "submitForm": "submitForm"; "setAccountStatus": "setAccountStatus"; "setAttemptsExceeded": "setAttemptsExceeded"; "setInvalidAmount": "setInvalidAmount"; }, never, never>;
}
