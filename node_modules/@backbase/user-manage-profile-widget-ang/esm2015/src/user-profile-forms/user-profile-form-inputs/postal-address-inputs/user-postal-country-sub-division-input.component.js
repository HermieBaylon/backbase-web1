import { Component, Directive } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { InputBase } from '@backbase/user-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/input-text";
import * as i2 from "@backbase/ui-ang/input-validation-message";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
export class UserPostalCountrySubDivisionInputComponent extends InputBase {
}
UserPostalCountrySubDivisionInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserPostalCountrySubDivisionInputComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
UserPostalCountrySubDivisionInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserPostalCountrySubDivisionInputComponent, selector: "bb-user-postal-country-sub-division-input", usesInheritance: true, ngImport: i0, template: "<ng-container bbUserPostalCountrySubDivisionInputCustomizable [bbHostRef]=\"this\">\n</ng-container>\n\n<ng-template bbUserPostalCountrySubDivisionInputCustomizable let-hostRef>\n  <div class=\"form-group\" [formGroup]=\"hostRef.formGroup\">\n    <bb-input-text-ui\n      class=\"bb-form-field bb-form-field--sm\"\n      data-role=\"user-manage-profile-postal-manage-state\"\n      i18n-label=\"Country sub-division label|Label for the country sub-division field@@bb-user-postal-country-sub-division-input.label\"\n      label=\"State, province or region\"\n      [formControlName]=\"hostRef.fieldName\"\n      (blur)=\"hostRef.onFieldBlur()\"\n      [required]=\"true\"\n      [maxLength]=\"35\">\n    </bb-input-text-ui>\n\n    <ng-container bbUserPostalCountrySubDivisionInputErrorsCustomizable [bbHostRef]=\"hostRef\">\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template bbUserPostalCountrySubDivisionInputErrorsCustomizable let-hostRef>\n  <bb-input-validation-message-ui [showErrors]=\"hostRef.hasErrors\">\n    <span *ngIf=\"hostRef.fieldControl.errors?.required\" i18n=\"Country sub-division required error|Error to say that postal country sub-division is a required field@@bb-user-postal-country-sub-division-input.errors.required\">\n      You must enter a value for State, province or region.\n    </span>\n  </bb-input-validation-message-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i2.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i0.forwardRef(function () { return UserPostalCountrySubDivisionInputCustomizableDirective; }), selector: "[bbUserPostalCountrySubDivisionInputCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i3.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i3.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i3.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i3.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return UserPostalCountrySubDivisionInputErrorsCustomizableDirective; }), selector: "[bbUserPostalCountrySubDivisionInputErrorsCustomizable]" }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserPostalCountrySubDivisionInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-postal-country-sub-division-input',
                    templateUrl: './user-postal-country-sub-division-input.component.html',
                }]
        }] });
export class UserPostalCountrySubDivisionInputCustomizableDirective extends BbTemplate {
}
UserPostalCountrySubDivisionInputCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserPostalCountrySubDivisionInputCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
UserPostalCountrySubDivisionInputCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserPostalCountrySubDivisionInputCustomizableDirective, selector: "[bbUserPostalCountrySubDivisionInputCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserPostalCountrySubDivisionInputCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserPostalCountrySubDivisionInputCustomizable]',
                }]
        }] });
export class UserPostalCountrySubDivisionInputErrorsCustomizableDirective extends BbTemplate {
}
UserPostalCountrySubDivisionInputErrorsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserPostalCountrySubDivisionInputErrorsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
UserPostalCountrySubDivisionInputErrorsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserPostalCountrySubDivisionInputErrorsCustomizableDirective, selector: "[bbUserPostalCountrySubDivisionInputErrorsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserPostalCountrySubDivisionInputErrorsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserPostalCountrySubDivisionInputErrorsCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wb3N0YWwtY291bnRyeS1zdWItZGl2aXNpb24taW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91c2VyLW1hbmFnZS1wcm9maWxlLXdpZGdldC9zcmMvdXNlci1wcm9maWxlLWZvcm1zL3VzZXItcHJvZmlsZS1mb3JtLWlucHV0cy9wb3N0YWwtYWRkcmVzcy1pbnB1dHMvdXNlci1wb3N0YWwtY291bnRyeS1zdWItZGl2aXNpb24taW5wdXQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91c2VyLW1hbmFnZS1wcm9maWxlLXdpZGdldC9zcmMvdXNlci1wcm9maWxlLWZvcm1zL3VzZXItcHJvZmlsZS1mb3JtLWlucHV0cy9wb3N0YWwtYWRkcmVzcy1pbnB1dHMvdXNlci1wb3N0YWwtY291bnRyeS1zdWItZGl2aXNpb24taW5wdXQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7O0FBTWxELE1BQU0sT0FBTywwQ0FBMkMsU0FBUSxTQUFTOzt3SUFBNUQsMENBQTBDOzRIQUExQywwQ0FBMEMsd0dDUnZELHcyQ0E0QkEseWVEZmEsc0RBQXNELHcrQkFRdEQsNERBQTREOzRGQWI1RCwwQ0FBMEM7a0JBSnRELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDJDQUEyQztvQkFDckQsV0FBVyxFQUFFLHlEQUF5RDtpQkFDdkU7O0FBTUQsTUFBTSxPQUFPLHNEQUF1RCxTQUFRLFVBRzNFOztvSkFIWSxzREFBc0Q7d0lBQXRELHNEQUFzRDs0RkFBdEQsc0RBQXNEO2tCQUhsRSxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtREFBbUQ7aUJBQzlEOztBQVNELE1BQU0sT0FBTyw0REFBNkQsU0FBUSxVQUdqRjs7MEpBSFksNERBQTREOzhJQUE1RCw0REFBNEQ7NEZBQTVELDREQUE0RDtrQkFIeEUsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseURBQXlEO2lCQUNwRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYlRlbXBsYXRlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuaW1wb3J0IHsgSW5wdXRCYXNlIH0gZnJvbSAnQGJhY2tiYXNlL3VzZXItY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItdXNlci1wb3N0YWwtY291bnRyeS1zdWItZGl2aXNpb24taW5wdXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdXNlci1wb3N0YWwtY291bnRyeS1zdWItZGl2aXNpb24taW5wdXQuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBVc2VyUG9zdGFsQ291bnRyeVN1YkRpdmlzaW9uSW5wdXRDb21wb25lbnQgZXh0ZW5kcyBJbnB1dEJhc2Uge31cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiVXNlclBvc3RhbENvdW50cnlTdWJEaXZpc2lvbklucHV0Q3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJQb3N0YWxDb3VudHJ5U3ViRGl2aXNpb25JbnB1dEN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIFVzZXJQb3N0YWxDb3VudHJ5U3ViRGl2aXNpb25JbnB1dENvbXBvbmVudCxcbiAgdW5kZWZpbmVkXG4+IHt9XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYlVzZXJQb3N0YWxDb3VudHJ5U3ViRGl2aXNpb25JbnB1dEVycm9yc0N1c3RvbWl6YWJsZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBVc2VyUG9zdGFsQ291bnRyeVN1YkRpdmlzaW9uSW5wdXRFcnJvcnNDdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBVc2VyUG9zdGFsQ291bnRyeVN1YkRpdmlzaW9uSW5wdXRDb21wb25lbnQsXG4gIHVuZGVmaW5lZFxuPiB7fVxuIiwiPG5nLWNvbnRhaW5lciBiYlVzZXJQb3N0YWxDb3VudHJ5U3ViRGl2aXNpb25JbnB1dEN1c3RvbWl6YWJsZSBbYmJIb3N0UmVmXT1cInRoaXNcIj5cbjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgYmJVc2VyUG9zdGFsQ291bnRyeVN1YkRpdmlzaW9uSW5wdXRDdXN0b21pemFibGUgbGV0LWhvc3RSZWY+XG4gIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCIgW2Zvcm1Hcm91cF09XCJob3N0UmVmLmZvcm1Hcm91cFwiPlxuICAgIDxiYi1pbnB1dC10ZXh0LXVpXG4gICAgICBjbGFzcz1cImJiLWZvcm0tZmllbGQgYmItZm9ybS1maWVsZC0tc21cIlxuICAgICAgZGF0YS1yb2xlPVwidXNlci1tYW5hZ2UtcHJvZmlsZS1wb3N0YWwtbWFuYWdlLXN0YXRlXCJcbiAgICAgIGkxOG4tbGFiZWw9XCJDb3VudHJ5IHN1Yi1kaXZpc2lvbiBsYWJlbHxMYWJlbCBmb3IgdGhlIGNvdW50cnkgc3ViLWRpdmlzaW9uIGZpZWxkQEBiYi11c2VyLXBvc3RhbC1jb3VudHJ5LXN1Yi1kaXZpc2lvbi1pbnB1dC5sYWJlbFwiXG4gICAgICBsYWJlbD1cIlN0YXRlLCBwcm92aW5jZSBvciByZWdpb25cIlxuICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJob3N0UmVmLmZpZWxkTmFtZVwiXG4gICAgICAoYmx1cik9XCJob3N0UmVmLm9uRmllbGRCbHVyKClcIlxuICAgICAgW3JlcXVpcmVkXT1cInRydWVcIlxuICAgICAgW21heExlbmd0aF09XCIzNVwiPlxuICAgIDwvYmItaW5wdXQtdGV4dC11aT5cblxuICAgIDxuZy1jb250YWluZXIgYmJVc2VyUG9zdGFsQ291bnRyeVN1YkRpdmlzaW9uSW5wdXRFcnJvcnNDdXN0b21pemFibGUgW2JiSG9zdFJlZl09XCJob3N0UmVmXCI+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlIGJiVXNlclBvc3RhbENvdW50cnlTdWJEaXZpc2lvbklucHV0RXJyb3JzQ3VzdG9taXphYmxlIGxldC1ob3N0UmVmPlxuICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpIFtzaG93RXJyb3JzXT1cImhvc3RSZWYuaGFzRXJyb3JzXCI+XG4gICAgPHNwYW4gKm5nSWY9XCJob3N0UmVmLmZpZWxkQ29udHJvbC5lcnJvcnM/LnJlcXVpcmVkXCIgaTE4bj1cIkNvdW50cnkgc3ViLWRpdmlzaW9uIHJlcXVpcmVkIGVycm9yfEVycm9yIHRvIHNheSB0aGF0IHBvc3RhbCBjb3VudHJ5IHN1Yi1kaXZpc2lvbiBpcyBhIHJlcXVpcmVkIGZpZWxkQEBiYi11c2VyLXBvc3RhbC1jb3VudHJ5LXN1Yi1kaXZpc2lvbi1pbnB1dC5lcnJvcnMucmVxdWlyZWRcIj5cbiAgICAgIFlvdSBtdXN0IGVudGVyIGEgdmFsdWUgZm9yIFN0YXRlLCBwcm92aW5jZSBvciByZWdpb24uXG4gICAgPC9zcGFuPlxuICA8L2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aT5cbjwvbmctdGVtcGxhdGU+XG4iXX0=