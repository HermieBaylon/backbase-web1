import { __rest } from "tslib";
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/user";
import * as i2 from "@backbase/user-common";
export class UserManageProfileService {
    constructor(data, manageProfileService) {
        this.data = data;
        this.manageProfileService = manageProfileService;
    }
    getUserProfile() {
        return this.data.getOwnUserProfile().pipe(map(this.manageProfileService.sortUserContactListsByPrimary));
    }
    createElectronicAddressRecord(electronicAddress) {
        return this.data.addOwnElectronicAddress({ electronicAddress });
    }
    updateElectronicAddressRecord(electronicAddress) {
        const { key } = electronicAddress, record = __rest(electronicAddress, ["key"]);
        return this.data.updateOwnElectronicAddress({
            electronicAddressKey: electronicAddress.key,
            electronicAddress: record,
        });
    }
    deleteElectronicAddressRecord(electronicAddress) {
        return this.data.deleteOwnElectronicAddress({ electronicAddressKey: electronicAddress.key });
    }
    createPhoneAddressRecord(phoneAddress) {
        return this.data.addOwnPhoneAddress({ phoneAddress });
    }
    updatePhoneAddressRecord(phoneAddress) {
        const { key } = phoneAddress, record = __rest(phoneAddress, ["key"]);
        return this.data.updateOwnPhoneAddress({
            phoneAddressKey: phoneAddress.key,
            phoneAddress: record,
        });
    }
    deletePhoneAddressRecord(phoneAddress) {
        return this.data.deleteOwnPhoneAddress({ phoneAddressKey: phoneAddress.key });
    }
    createPostalAddressRecord(postalAddress) {
        return this.data.addOwnPostalAddress({ postalAddress });
    }
    updatePostalAddressRecord(postalAddress) {
        const { key } = postalAddress, record = __rest(postalAddress, ["key"]);
        return this.data.updateOwnPostalAddress({
            postalAddressKey: postalAddress.key,
            postalAddress: record,
        });
    }
    deletePostalAddressRecord(postalAddress) {
        return this.data.deleteOwnPostalAddress({ postalAddressKey: postalAddress.key });
    }
}
UserManageProfileService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageProfileService, deps: [{ token: i1.UserProfileManagementService }, { token: i2.ManageProfileService }], target: i0.ɵɵFactoryTarget.Injectable });
UserManageProfileService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageProfileService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageProfileService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UserProfileManagementService }, { type: i2.ManageProfileService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1tYW5hZ2UtcHJvZmlsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91c2VyLW1hbmFnZS1wcm9maWxlLXdpZGdldC9zcmMvdXNlci1tYW5hZ2UtcHJvZmlsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBYTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUdyQyxNQUFNLE9BQU8sd0JBQXdCO0lBQ25DLFlBQ21CLElBQWtDLEVBQ2xDLG9CQUEwQztRQUQxQyxTQUFJLEdBQUosSUFBSSxDQUE4QjtRQUNsQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO0lBQzFELENBQUM7SUFFSixjQUFjO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUFFRCw2QkFBNkIsQ0FBQyxpQkFBb0M7UUFDaEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCw2QkFBNkIsQ0FBQyxpQkFBdUM7UUFDbkUsTUFBTSxFQUFFLEdBQUcsS0FBZ0IsaUJBQWlCLEVBQTVCLE1BQU0sVUFBSyxpQkFBaUIsRUFBdEMsT0FBa0IsQ0FBb0IsQ0FBQztRQUU3QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUM7WUFDMUMsb0JBQW9CLEVBQUUsaUJBQWlCLENBQUMsR0FBRztZQUMzQyxpQkFBaUIsRUFBRSxNQUFNO1NBQzFCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw2QkFBNkIsQ0FBQyxpQkFBdUM7UUFDbkUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRUQsd0JBQXdCLENBQUMsWUFBMEI7UUFDakQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsd0JBQXdCLENBQUMsWUFBNkI7UUFDcEQsTUFBTSxFQUFFLEdBQUcsS0FBZ0IsWUFBWSxFQUF2QixNQUFNLFVBQUssWUFBWSxFQUFqQyxPQUFrQixDQUFlLENBQUM7UUFFeEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDO1lBQ3JDLGVBQWUsRUFBRSxZQUFZLENBQUMsR0FBRztZQUNqQyxZQUFZLEVBQUUsTUFBTTtTQUNyQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsd0JBQXdCLENBQUMsWUFBNkI7UUFDcEQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsZUFBZSxFQUFFLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxhQUE0QjtRQUNwRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxhQUErQjtRQUN2RCxNQUFNLEVBQUUsR0FBRyxLQUFnQixhQUFhLEVBQXhCLE1BQU0sVUFBSyxhQUFhLEVBQWxDLE9BQWtCLENBQWdCLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1lBQ3RDLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxHQUFHO1lBQ25DLGFBQWEsRUFBRSxNQUFNO1NBQ3RCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxhQUErQjtRQUN2RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNuRixDQUFDOztzSEEzRFUsd0JBQXdCOzBIQUF4Qix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFEcEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEVsZWN0cm9uaWNBZGRyZXNzLFxuICBHZXRFbGVjdHJvbmljQWRkcmVzcyxcbiAgR2V0UGhvbmVBZGRyZXNzLFxuICBHZXRQb3N0YWxBZGRyZXNzLFxuICBQaG9uZUFkZHJlc3MsXG4gIFBvc3RhbEFkZHJlc3MsXG4gIFVzZXJQcm9maWxlLFxuICBVc2VyUHJvZmlsZU1hbmFnZW1lbnRTZXJ2aWNlLFxufSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvdXNlcic7XG5pbXBvcnQgeyBNYW5hZ2VQcm9maWxlU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS91c2VyLWNvbW1vbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2VyTWFuYWdlUHJvZmlsZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRhdGE6IFVzZXJQcm9maWxlTWFuYWdlbWVudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBtYW5hZ2VQcm9maWxlU2VydmljZTogTWFuYWdlUHJvZmlsZVNlcnZpY2UsXG4gICkge31cblxuICBnZXRVc2VyUHJvZmlsZSgpOiBPYnNlcnZhYmxlPFVzZXJQcm9maWxlPiB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5nZXRPd25Vc2VyUHJvZmlsZSgpLnBpcGUobWFwKHRoaXMubWFuYWdlUHJvZmlsZVNlcnZpY2Uuc29ydFVzZXJDb250YWN0TGlzdHNCeVByaW1hcnkpKTtcbiAgfVxuXG4gIGNyZWF0ZUVsZWN0cm9uaWNBZGRyZXNzUmVjb3JkKGVsZWN0cm9uaWNBZGRyZXNzOiBFbGVjdHJvbmljQWRkcmVzcyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5hZGRPd25FbGVjdHJvbmljQWRkcmVzcyh7IGVsZWN0cm9uaWNBZGRyZXNzIH0pO1xuICB9XG5cbiAgdXBkYXRlRWxlY3Ryb25pY0FkZHJlc3NSZWNvcmQoZWxlY3Ryb25pY0FkZHJlc3M6IEdldEVsZWN0cm9uaWNBZGRyZXNzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB7IGtleSwgLi4ucmVjb3JkIH0gPSBlbGVjdHJvbmljQWRkcmVzcztcblxuICAgIHJldHVybiB0aGlzLmRhdGEudXBkYXRlT3duRWxlY3Ryb25pY0FkZHJlc3Moe1xuICAgICAgZWxlY3Ryb25pY0FkZHJlc3NLZXk6IGVsZWN0cm9uaWNBZGRyZXNzLmtleSxcbiAgICAgIGVsZWN0cm9uaWNBZGRyZXNzOiByZWNvcmQsXG4gICAgfSk7XG4gIH1cblxuICBkZWxldGVFbGVjdHJvbmljQWRkcmVzc1JlY29yZChlbGVjdHJvbmljQWRkcmVzczogR2V0RWxlY3Ryb25pY0FkZHJlc3MpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmRhdGEuZGVsZXRlT3duRWxlY3Ryb25pY0FkZHJlc3MoeyBlbGVjdHJvbmljQWRkcmVzc0tleTogZWxlY3Ryb25pY0FkZHJlc3Mua2V5IH0pO1xuICB9XG5cbiAgY3JlYXRlUGhvbmVBZGRyZXNzUmVjb3JkKHBob25lQWRkcmVzczogUGhvbmVBZGRyZXNzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmFkZE93blBob25lQWRkcmVzcyh7IHBob25lQWRkcmVzcyB9KTtcbiAgfVxuXG4gIHVwZGF0ZVBob25lQWRkcmVzc1JlY29yZChwaG9uZUFkZHJlc3M6IEdldFBob25lQWRkcmVzcyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgeyBrZXksIC4uLnJlY29yZCB9ID0gcGhvbmVBZGRyZXNzO1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YS51cGRhdGVPd25QaG9uZUFkZHJlc3Moe1xuICAgICAgcGhvbmVBZGRyZXNzS2V5OiBwaG9uZUFkZHJlc3Mua2V5LFxuICAgICAgcGhvbmVBZGRyZXNzOiByZWNvcmQsXG4gICAgfSk7XG4gIH1cblxuICBkZWxldGVQaG9uZUFkZHJlc3NSZWNvcmQocGhvbmVBZGRyZXNzOiBHZXRQaG9uZUFkZHJlc3MpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmRhdGEuZGVsZXRlT3duUGhvbmVBZGRyZXNzKHsgcGhvbmVBZGRyZXNzS2V5OiBwaG9uZUFkZHJlc3Mua2V5IH0pO1xuICB9XG5cbiAgY3JlYXRlUG9zdGFsQWRkcmVzc1JlY29yZChwb3N0YWxBZGRyZXNzOiBQb3N0YWxBZGRyZXNzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmFkZE93blBvc3RhbEFkZHJlc3MoeyBwb3N0YWxBZGRyZXNzIH0pO1xuICB9XG5cbiAgdXBkYXRlUG9zdGFsQWRkcmVzc1JlY29yZChwb3N0YWxBZGRyZXNzOiBHZXRQb3N0YWxBZGRyZXNzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB7IGtleSwgLi4ucmVjb3JkIH0gPSBwb3N0YWxBZGRyZXNzO1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YS51cGRhdGVPd25Qb3N0YWxBZGRyZXNzKHtcbiAgICAgIHBvc3RhbEFkZHJlc3NLZXk6IHBvc3RhbEFkZHJlc3Mua2V5LFxuICAgICAgcG9zdGFsQWRkcmVzczogcmVjb3JkLFxuICAgIH0pO1xuICB9XG5cbiAgZGVsZXRlUG9zdGFsQWRkcmVzc1JlY29yZChwb3N0YWxBZGRyZXNzOiBHZXRQb3N0YWxBZGRyZXNzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmRlbGV0ZU93blBvc3RhbEFkZHJlc3MoeyBwb3N0YWxBZGRyZXNzS2V5OiBwb3N0YWxBZGRyZXNzLmtleSB9KTtcbiAgfVxufVxuIl19