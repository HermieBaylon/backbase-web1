import { Component, Directive, Input } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { convertCommaSeparatedStringToStringArray, filterInputParameters, ManageProfileComponent, ManageProfilePreferencesService, ManageProfileService, } from '@backbase/user-common';
import { BehaviorSubject, of } from 'rxjs';
import { catchError, first, pluck, switchMap, tap } from 'rxjs/operators';
import { UserManageProfileService } from './user-manage-profile.service';
import * as i0 from "@angular/core";
import * as i1 from "./user-manage-profile.service";
import * as i2 from "@backbase/user-common";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@backbase/ui-ang/common-error-state";
import * as i5 from "./user-manage-email-addresses/user-manage-email-addresses.component";
import * as i6 from "./user-manage-phone-numbers/user-manage-phone-numbers.component";
import * as i7 from "./user-manage-postal-addresses/user-manage-postal-addresses.component";
import * as i8 from "@backbase/ui-ang/header";
import * as i9 from "@angular/common";
export class UserManageProfileWidgetComponent extends ManageProfileComponent {
    constructor(manageProfileService, manageProfilePreferencesService, cd) {
        super(manageProfilePreferencesService, cd);
        this.manageProfileService = manageProfileService;
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.cd = cd;
        this.emailAddressTypesSubject = new BehaviorSubject(undefined);
        this.postalAddressTypesSubject = new BehaviorSubject(undefined);
        this.phoneNumberTypesSubject = new BehaviorSubject(undefined);
        this.maxEmailAddressesSubject = new BehaviorSubject(undefined);
        this.maxPhoneNumbersSubject = new BehaviorSubject(undefined);
        this.maxPostalAddressesSubject = new BehaviorSubject(undefined);
        this.showWidgetHeaderSubject = new BehaviorSubject(undefined);
        this.phoneNumberCountryCodeSubject = new BehaviorSubject(undefined);
        this.phoneNumberDebounceTimeSubject = new BehaviorSubject(undefined);
        this.enablePhoneNumberFormatterSubject = new BehaviorSubject(undefined);
        this.emailAddressTypes = filterInputParameters(this.emailAddressTypesSubject.asObservable(), this.manageProfilePreferencesService.getWidgetPreferences().pipe(pluck('emailAddressTypes')));
        this.postalAddressTypes = filterInputParameters(this.postalAddressTypesSubject.asObservable(), this.manageProfilePreferencesService.getWidgetPreferences().pipe(pluck('postalAddressTypes')));
        this.phoneNumberTypes = filterInputParameters(this.phoneNumberTypesSubject.asObservable(), this.manageProfilePreferencesService.getWidgetPreferences().pipe(pluck('phoneNumberTypes')));
        this.maxEmailAddresses = filterInputParameters(this.maxEmailAddressesSubject.asObservable(), this.manageProfilePreferencesService.getWidgetPreferences().pipe(pluck('maxEmailAddresses')));
        this.maxPhoneNumbers = filterInputParameters(this.maxPhoneNumbersSubject.asObservable(), this.manageProfilePreferencesService.getWidgetPreferences().pipe(pluck('maxPhoneNumbers')));
        this.maxPostalAddresses = filterInputParameters(this.maxPostalAddressesSubject.asObservable(), this.manageProfilePreferencesService.getWidgetPreferences().pipe(pluck('maxPostalAddresses')));
        this.showWidgetHeader = filterInputParameters(this.showWidgetHeaderSubject.asObservable(), this.manageProfilePreferencesService.getWidgetPreferences().pipe(pluck('showWidgetHeader')));
        this.phoneNumberCountryCode = filterInputParameters(this.phoneNumberCountryCodeSubject.asObservable(), this.manageProfilePreferencesService.getPhoneNumberInputPreferences().pipe(pluck('countryCode')));
        this.phoneNumberDebounceTime = filterInputParameters(this.phoneNumberDebounceTimeSubject.asObservable(), this.manageProfilePreferencesService.getPhoneNumberInputPreferences().pipe(pluck('debounceTime')));
        this.enablePhoneNumberFormatter = filterInputParameters(this.enablePhoneNumberFormatterSubject.asObservable(), this.manageProfilePreferencesService
            .getPhoneNumberInputPreferences()
            .pipe(switchMap((preferences) => of((preferences && preferences.enablePhoneNumberFormatter) || false))));
    }
    set emailAddressTypesValue(value) {
        this.emailAddressTypesSubject.next(typeof value === 'string' ? this.convertCommaSeparatedStringToStringArray(value) : value);
    }
    set postalAddressTypesValue(value) {
        this.postalAddressTypesSubject.next(typeof value === 'string' ? this.convertCommaSeparatedStringToStringArray(value) : value);
    }
    set phoneNumberTypesValue(value) {
        this.phoneNumberTypesSubject.next(typeof value === 'string' ? this.convertCommaSeparatedStringToStringArray(value) : value);
    }
    set maxEmailAddressesValue(value) {
        this.maxEmailAddressesSubject.next(value);
    }
    set maxPhoneNumbersValue(value) {
        this.maxPhoneNumbersSubject.next(value);
    }
    set maxPostalAddressesValue(value) {
        this.maxPostalAddressesSubject.next(value);
    }
    set showWidgetHeaderValue(value) {
        this.showWidgetHeaderSubject.next(typeof value === 'string' ? !!value && value !== 'false' : value);
    }
    set phoneNumberCountryCodeValue(value) {
        this.phoneNumberCountryCodeSubject.next(value);
    }
    set phoneNumberDebounceTimeValue(value) {
        this.phoneNumberDebounceTimeSubject.next(value);
    }
    set enablePhoneNumberFormatterValue(value) {
        this.enablePhoneNumberFormatterSubject.next(typeof value === 'string' ? value === 'true' : value);
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.notificationDismissTime) {
            this.dismissTimeout = this.notificationDismissTime * 1000;
        }
        else {
            this.manageProfilePreferencesService
                .getNotificationDismissTimePreference()
                .pipe(first())
                .subscribe((time) => (this.dismissTimeout = time * 1000));
        }
    }
    convertCommaSeparatedStringToStringArray(value) {
        return convertCommaSeparatedStringToStringArray(value);
    }
    setUserProfileObservable() {
        return this.userProfileSubject.asObservable().pipe(tap(this.onProfileUpdate), switchMap(() => this.manageProfileService.getUserProfile()), tap(() => (this.loadingState = false)), catchError(this.handleProfileError));
    }
}
UserManageProfileWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageProfileWidgetComponent, deps: [{ token: i1.UserManageProfileService }, { token: i2.ManageProfilePreferencesService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
UserManageProfileWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserManageProfileWidgetComponent, selector: "bb-user-manage-profile-widget", inputs: { emailAddressTypesValue: ["emailAddressTypes", "emailAddressTypesValue"], postalAddressTypesValue: ["postalAddressTypes", "postalAddressTypesValue"], phoneNumberTypesValue: ["phoneNumberTypes", "phoneNumberTypesValue"], maxEmailAddressesValue: ["maxEmailAddresses", "maxEmailAddressesValue"], maxPhoneNumbersValue: ["maxPhoneNumbers", "maxPhoneNumbersValue"], maxPostalAddressesValue: ["maxPostalAddresses", "maxPostalAddressesValue"], showWidgetHeaderValue: ["showWidgetHeader", "showWidgetHeaderValue"], phoneNumberCountryCodeValue: ["phoneNumberCountryCode", "phoneNumberCountryCodeValue"], phoneNumberDebounceTimeValue: ["phoneNumberDebounceTime", "phoneNumberDebounceTimeValue"], enablePhoneNumberFormatterValue: ["enablePhoneNumberFormatter", "enablePhoneNumberFormatterValue"] }, providers: [UserManageProfileService, ManageProfilePreferencesService, ManageProfileService], usesInheritance: true, ngImport: i0, template: "<ng-container bbUserManageWidgetCustomizable [bbHostRef]=\"this\">\n</ng-container>\n\n<ng-template bbUserManageWidgetCustomizable let-hostRef>\n  <section>\n    <bb-loading-indicator-ui\n      *ngIf=\"hostRef.loadingState\"\n      i18n-text=\"User Profile loading message|Message for when the user profile is loading@@bb-user-manage-profile.bb-loading-indicator-ui\"\n      text=\"Loading...\">\n    </bb-loading-indicator-ui>\n\n    <bb-common-error-state-ui\n      *ngIf=\"hostRef.loadingErrorState\"\n      class=\"bb-state-container\"\n      [error]=\"hostRef.loadingError\"\n      data-role=\"user-manage-profile-error-state\">\n    </bb-common-error-state-ui>\n\n    <div *ngIf=\"!hostRef.loadingState && !hostRef.loadingErrorState && hostRef.userProfile\">\n      <ng-container bbUserManageWidgetTitleCustomizable\n        *ngIf=\"hostRef.showWidgetHeader | async\"\n        [bbHostRef]=\"hostRef\">\n      </ng-container>\n      <div>\n        <div class=\"bb-block bb-block--xl\">\n          <bb-user-manage-email-addresses\n            [emailAddresses]=\"hostRef.userProfile['electronic-addresses']\"\n            [emailAddressTypes]=\"hostRef.emailAddressTypes | async\"\n            [maxEmailAddresses]=\"hostRef.maxEmailAddresses | async\"\n            (updateProfile)=\"hostRef.refreshProfileData()\"\n            (manageEmail)=\"hostRef.handleManageAddressOpen()\"\n            (cancelManageEmail)=\"hostRef.handleManageAddressClose()\"\n            [disableManage]=\"hostRef.disableAddressManaging\"\n            [dismissTimeout]=\"hostRef.dismissTimeout\">\n          </bb-user-manage-email-addresses>\n        </div>\n        <div class=\"bb-block bb-block--xl\">\n          <bb-user-manage-phone-numbers\n            [phoneNumbers]=\"hostRef.userProfile['phone-addresses']\"\n            [phoneNumberTypes]=\"hostRef.phoneNumberTypes | async\"\n            [maxPhoneNumbers]=\"hostRef.maxPhoneNumbers | async\"\n            (updateProfile)=\"hostRef.refreshProfileData()\"\n            (managePhoneNumber)=\"hostRef.handleManageAddressOpen()\"\n            (cancelManagePhoneNumber)=\"hostRef.handleManageAddressClose()\"\n            [disableManage]=\"hostRef.disableAddressManaging\"\n            [dismissTimeout]=\"hostRef.dismissTimeout\"\n\n            [phoneNumberCountryCode]=\"hostRef.phoneNumberCountryCode | async\"\n            [phoneNumberDebounceTime]=\"hostRef.phoneNumberDebounceTime | async\"\n            [enablePhoneNumberFormatter]=\"hostRef.enablePhoneNumberFormatter | async\">\n          </bb-user-manage-phone-numbers>\n        </div>\n        <div class=\"bb-block bb-block--xl\">\n          <bb-user-manage-postal-addresses\n            [postalAddresses]=\"hostRef.userProfile['postal-addresses']\"\n            [postalAddressTypes]=\"hostRef.postalAddressTypes | async\"\n            [maxPostalAddresses]=\"hostRef.maxPostalAddresses | async\"\n            (updateProfile)=\"hostRef.refreshProfileData()\"\n            (managePostalAddress)=\"hostRef.handleManageAddressOpen()\"\n            (cancelManagePostalAddress)=\"hostRef.handleManageAddressClose()\"\n            [disableManage]=\"hostRef.disableAddressManaging\"\n            [dismissTimeout]=\"hostRef.dismissTimeout\">\n          </bb-user-manage-postal-addresses>\n        </div>\n      </div>\n    </div>\n  </section>\n</ng-template>\n\n<ng-template bbUserManageWidgetTitleCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--md\">\n    <bb-header-ui\n      headingType=\"h2\"\n      data-role=\"user-manage-profile-user-name\"\n      [heading]=\"hostRef.userProfile.fullName\">\n    </bb-header-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i4.ErrorCommonStateComponent; }), selector: "bb-common-error-state-ui", inputs: ["error"] }, { type: i0.forwardRef(function () { return i5.UserManageEmailAddressesComponent; }), selector: "bb-user-manage-email-addresses" }, { type: i0.forwardRef(function () { return i6.UserManagePhoneNumbersComponent; }), selector: "bb-user-manage-phone-numbers", inputs: ["phoneNumberCountryCode", "phoneNumberDebounceTime", "enablePhoneNumberFormatter"] }, { type: i0.forwardRef(function () { return i7.UserManagePostalAddressesComponent; }), selector: "bb-user-manage-postal-addresses" }, { type: i0.forwardRef(function () { return i8.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i0.forwardRef(function () { return UserManageWidgetCustomizableDirective; }), selector: "[bbUserManageWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return UserManageWidgetTitleCustomizableDirective; }), selector: "[bbUserManageWidgetTitleCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i9.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageProfileWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-manage-profile-widget',
                    templateUrl: './user-manage-profile-widget.component.html',
                    providers: [UserManageProfileService, ManageProfilePreferencesService, ManageProfileService],
                }]
        }], ctorParameters: function () { return [{ type: i1.UserManageProfileService }, { type: i2.ManageProfilePreferencesService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { emailAddressTypesValue: [{
                type: Input,
                args: ['emailAddressTypes']
            }], postalAddressTypesValue: [{
                type: Input,
                args: ['postalAddressTypes']
            }], phoneNumberTypesValue: [{
                type: Input,
                args: ['phoneNumberTypes']
            }], maxEmailAddressesValue: [{
                type: Input,
                args: ['maxEmailAddresses']
            }], maxPhoneNumbersValue: [{
                type: Input,
                args: ['maxPhoneNumbers']
            }], maxPostalAddressesValue: [{
                type: Input,
                args: ['maxPostalAddresses']
            }], showWidgetHeaderValue: [{
                type: Input,
                args: ['showWidgetHeader']
            }], phoneNumberCountryCodeValue: [{
                type: Input,
                args: ['phoneNumberCountryCode']
            }], phoneNumberDebounceTimeValue: [{
                type: Input,
                args: ['phoneNumberDebounceTime']
            }], enablePhoneNumberFormatterValue: [{
                type: Input,
                args: ['enablePhoneNumberFormatter']
            }] } });
export class UserManageWidgetCustomizableDirective extends BbTemplate {
}
UserManageWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
UserManageWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserManageWidgetCustomizableDirective, selector: "[bbUserManageWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserManageWidgetCustomizable]',
                }]
        }] });
export class UserManageWidgetTitleCustomizableDirective extends BbTemplate {
}
UserManageWidgetTitleCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageWidgetTitleCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
UserManageWidgetTitleCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserManageWidgetTitleCustomizableDirective, selector: "[bbUserManageWidgetTitleCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageWidgetTitleCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserManageWidgetTitleCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,