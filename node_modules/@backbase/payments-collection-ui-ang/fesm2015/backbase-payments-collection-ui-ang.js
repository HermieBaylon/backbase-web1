import * as i2 from '@backbase/payment-orders-ang';
import { PaymentBaseFields, PaymentComponents, CounterPartyFields, defaultInitiatorConfig, RemittanceInfoFields, getCounterpartySchemeName, stripSpaces, getConfig, isAddressTruthy, mapConnectedAccounts, accMap, mapArrangementList, handleCurrenciesList, shouldLoadTabContent, BeneficiaryList, ScheduleFields, PaymentMode, InitiatorFields, mapPaymentOptions, removeScheduleFromConfig, setFrequencyOptionsPerConfig, InitiatePaymentHeaderStates, PaymentState, triggerPaymentHook, PaymentHooks, HiddenFields, setFormDetailsFromService, setFormDetailsFromResponse, toPostRequest, focusErrorElement, P2PLimitErrorKeys, PaymentTemplateFields, toPostPaymentTemplate, defaultPaymentSuccessEventName, BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN, datePart, ReviewScreens, getLabelFromPaymentConfig, isObjectTruthy, contactItemToService, ProgressStatus as ProgressStatus$1, ApprovalStatus, Status, noWhitespaceValidator, ModalState, getForexDetailsFromPayment, PaymentSubmitStatuses, PaymentOrdersUiModule } from '@backbase/payment-orders-ang';
import * as i1$2 from '@angular/forms';
import { Validators, FormControl, FormGroup } from '@angular/forms';
import * as i0 from '@angular/core';
import { Injectable, ViewContainerRef, TemplateRef, Component, Optional, Inject, ViewChild, NgModule, Input, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';
import * as i14 from '@angular/common';
import { CommonModule } from '@angular/common';
import { BehaviorSubject, Subject, of, combineLatest, EMPTY, merge, from } from 'rxjs';
import { map, takeUntil, filter, switchMap, tap, shareReplay, catchError, distinctUntilChanged, take, mapTo, pluck, concatMap, reduce } from 'rxjs/operators';
import { PUBSUB, CONDITIONS } from '@backbase/foundation-ang/web-sdk';
import * as i7 from '@backbase/payord-form-builder-ang';
import { registerFormControl, isEditFormDirty, PayordFormBuilderAngModule } from '@backbase/payord-form-builder-ang';
import { SchemeName } from '@backbase/data-ang/payment-order-options';
import { __rest } from 'tslib';
import { HttpErrorResponse } from '@angular/common/http';
import * as i5 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i6 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import { PaymentOrderProgressStatusGet } from '@backbase/data-ang/payment-order';
import * as i2$2 from '@backbase/identity-auth/transaction-signing';
import { ProgressStatus } from '@backbase/identity-auth/transaction-signing';
import { ActiveContactStatus } from '@backbase/data-ang/contact-manager';
import * as i1$1 from '@backbase/foundation-ang/core';
import * as i3 from '@backbase/ui-ang/loading-indicator';
import * as i1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2$1 from '@backbase/ui-ang/amount';
import * as i13 from '@backbase/ui-ang/load-button';
import * as i2$3 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i13$1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i18 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i19 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import { NotificationModule } from '@backbase/ui-ang/notification';
import { FocusModule } from '@backbase/ui-ang/focus';
import { RouterModule } from '@angular/router';

const counterPartyConfig = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@initiate-payment-base-fields.beneficiary-header-title:To`,
                hasDynamicTitle: true,
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                label: $localize `:@@initiate-payment-base-fields.beneficiary-selector-label:Beneficiary's name`,
                placeholder: $localize `:@@initiate-payment-base-fields.beneficiary-selector-placeholder:Select a beneficiary`,
                saveNewContactLabel: $localize `:@@initiate-payment-base-fields.beneficiary-selector-new-contact-label:Save as a new contact`,
                isWizardMode: true,
                retainBankCountry: true,
                cssClasses: ['col-12'],
                dependants: [
                    CounterPartyFields.country,
                    CounterPartyFields.bankBranchCode,
                    CounterPartyFields.accountNumber,
                ],
                validationMessages: [
                    {
                        message: $localize `:@@initiate-payment-base-fields.same-accounts-error:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.country,
            type: PaymentComponents.sanctionedCountrySelector,
            options: {
                validators: [Validators.required],
                label: $localize `:@@initiate-payment-base-fields.country.label:Country`,
                placeholder: $localize `:@@initiate-payment-base-fields.country-placeholder:- select a country -`,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                mapToField: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`,
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required, Validators.minLength(6)],
                maxLength: 36,
                label: $localize `:@@initiate-payment-base-fields.acc-no-label:Account number or IBAN`,
                validationMessages: [
                    {
                        name: 'minlength',
                        message: $localize `:@@initiate-payment-base-fields.acc-no-min-length-error:Account number should have minimum 6 characters`,
                    },
                    {
                        message: $localize `:@@initiate-payment-base-fields.iban-country-error-message:Invalid IBAN`,
                        name: 'invalidIbanCountry',
                    },
                ],
                cssClasses: ['d-inline-block', 'col-md-6'],
            },
        },
        {
            name: CounterPartyFields.bankBranchCode,
            type: PaymentComponents.text,
            options: {
                label: $localize `:@@initiate-payment-base-fields.bank-branch-code-label:Sort code`,
                maxLength: 20,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                mapToField: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}`,
            },
        },
    ],
};
const BaseFields = [
    defaultInitiatorConfig,
    {
        name: PaymentBaseFields.remittanceInfo,
        title: $localize `:@@initiate-payment-base-fields.remittance-group-title:Payment details`,
        fields: [
            {
                type: PaymentComponents.sanctionedCurrencyAmount,
                name: RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    cssClasses: ['col-12'],
                    label: $localize `:@@initiate-payment-base-fields.amount-title:Amount`,
                    validationMessages: [
                        {
                            message: $localize `:@@initiate-payment-base-fields.amount-error:Enter amount`,
                            name: 'invalidAmount',
                        },
                        {
                            message: $localize `:@@initiate-payment-base-fields.currency-error:Selected country does not allow payments in this currency`,
                            name: 'invalidCurrency',
                        },
                    ],
                },
            },
        ],
    },
    counterPartyConfig,
];
const PaymentTypes = {
    ILE_POSTFIX: '_ILE',
    CLOSED_POSTFIX: '_CLOSED',
    SEPA_PREFIX: 'SEPA_CT',
    SEPA: 'SEPA_CREDIT_TRANSFER',
};

const mapPaymentOptionRequest = (formItem, clientServiceAgreementID = '', clientJurisdiction = '') => {
    const { creditorBank } = formItem.counterparty;
    const counterpartyCountry = creditorBank &&
        creditorBank.postalAddress &&
        creditorBank.postalAddress.country;
    const bankBranchCode = creditorBank && creditorBank.bankBranchCode;
    const creditorScheme = getCounterpartySchemeName(formItem);
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (clientServiceAgreementID ? { clientServiceAgreementID } : null)), (clientJurisdiction ? { clientJurisdiction } : null)), { originatorAccount: {
            identification: formItem.initiator.id,
            schemeName: SchemeName.ID,
        }, counterpartyAccount: Object.assign(Object.assign({}, (bankBranchCode ? { bankBranchCode } : null)), { identification: creditorScheme === SchemeName.ID
                ? stripSpaces(formItem.counterparty.id)
                : stripSpaces(formItem.counterparty.accountNumber), schemeName: creditorScheme }), requestedExecutionDate: new Date().toISOString().substring(0, 10), instructedAmount: {
            amount: formItem.remittanceInfo.amountGroup.amount,
            currencyCode: formItem.remittanceInfo.amountGroup.currency,
        } }), (counterpartyCountry ? { counterpartyCountry } : null)), { additions: formItem.additions });
};
function normalizePaymentType(selectedPaymentItem) {
    let _selectedPayment = selectedPaymentItem === null || selectedPaymentItem === void 0 ? void 0 : selectedPaymentItem.details.paymentType;
    if (_selectedPayment ===
        `${PaymentTypes.SEPA_PREFIX}${PaymentTypes.CLOSED_POSTFIX}` ||
        _selectedPayment ===
            `${PaymentTypes.SEPA_PREFIX}${PaymentTypes.ILE_POSTFIX}`) {
        _selectedPayment = _selectedPayment.replace(PaymentTypes.SEPA_PREFIX, PaymentTypes.SEPA);
    }
    let replacedPayment;
    if (_selectedPayment) {
        if (_selectedPayment.endsWith(PaymentTypes.ILE_POSTFIX)) {
            replacedPayment = _selectedPayment.replace(PaymentTypes.ILE_POSTFIX, '');
        }
        else if (_selectedPayment.endsWith(PaymentTypes.CLOSED_POSTFIX)) {
            replacedPayment = _selectedPayment.replace(PaymentTypes.CLOSED_POSTFIX, '');
        }
        else {
            replacedPayment = _selectedPayment;
        }
    }
    return replacedPayment;
}
function normalisePaymentTemplate(paymentTemplate) {
    return Object.assign(Object.assign({}, paymentTemplate), { details: Object.assign(Object.assign({}, paymentTemplate.details), { paymentType: normalizePaymentType(paymentTemplate) }) });
}
/**
 * Reset beneficiary address if the form contains address details but the selected config does not contain address config.
 */
function resetBeneficiaryAddress(paymentTypeConfig, form) {
    const counterPartyConfig = getConfig(PaymentBaseFields.counterparty, paymentTypeConfig);
    const beneficiaryAddress = getConfig(CounterPartyFields.postalAddress, counterPartyConfig);
    const beneficiaryAddressGroup = form.get([
        PaymentBaseFields.counterparty,
        CounterPartyFields.postalAddress,
    ]);
    if (!beneficiaryAddress &&
        beneficiaryAddressGroup &&
        isAddressTruthy(beneficiaryAddressGroup.value)) {
        beneficiaryAddressGroup.reset();
    }
}
/**
 * Reset bank details if the form contains bank details but the selected config does not contain specific bank detail config.
 */
function resetBankDetails(paymentTypeConfig, form) {
    const counterPartyConfig = getConfig(PaymentBaseFields.counterparty, paymentTypeConfig);
    const beneficiaryBankConfig = getConfig(CounterPartyFields.creditorBank, counterPartyConfig);
    const beneficiaryBankAddress = beneficiaryBankConfig
        ? getConfig(CounterPartyFields.postalAddress, beneficiaryBankConfig)
        : null;
    const beneficiaryBankAddressGroup = form.get([
        PaymentBaseFields.counterparty,
        CounterPartyFields.creditorBank,
        CounterPartyFields.postalAddress,
    ]);
    resetBankField(CounterPartyFields.bic, counterPartyConfig, form);
    resetBankField(CounterPartyFields.bankName, counterPartyConfig, form);
    if (!beneficiaryBankAddress &&
        beneficiaryBankAddressGroup &&
        isAddressTruthy(beneficiaryBankAddressGroup.value)) {
        for (const key in beneficiaryBankAddressGroup.controls) {
            if (key !== 'country') {
                beneficiaryBankAddressGroup.controls[key].reset();
            }
        }
    }
}
function resetBankField(fieldName, counterpartyConfig, form) {
    const config = getConfig(fieldName, counterpartyConfig);
    const control = form.get([
        PaymentBaseFields.counterparty,
        CounterPartyFields.creditorBank,
        fieldName,
    ]);
    if (!config && (control === null || control === void 0 ? void 0 : control.value)) {
        control.reset();
    }
}

class CreatePaymentConfigSetupService {
    constructor() {
        this.configsSub$ = new BehaviorSubject([]);
        this.optionsSub$ = new BehaviorSubject({});
        this.baseFieldsSub$ = new BehaviorSubject([]);
        this.fetchPaymentOptionsListenerSub$ = new BehaviorSubject(undefined);
        this.hooksSub$ = new BehaviorSubject({});
        this.reviewTemplateSub$ = new BehaviorSubject(undefined);
        this.configs$ = this.configsSub$.asObservable();
        this.options$ = this.optionsSub$.asObservable();
        this.baseFields$ = this.baseFieldsSub$.asObservable();
        this.fetchPaymentOptionsListener$ = this.fetchPaymentOptionsListenerSub$.asObservable();
        this.reviewTemplate$ = this.reviewTemplateSub$.asObservable();
    }
    get hooks() {
        return this.hooksSub$.value;
    }
    get options() {
        return this.optionsSub$.value;
    }
    get configs() {
        return this.configsSub$.value;
    }
    setHooks(hooks = {}) {
        this.hooksSub$.next(hooks);
    }
    setConfigs(configs) {
        this.configsSub$.next(configs);
    }
    setOptions(options) {
        this.optionsSub$.next(options);
    }
    setBaseFields(baseFields = BaseFields) {
        this.baseFieldsSub$.next(baseFields);
    }
    setFetchPaymentOptionsListener(listenerFn) {
        this.fetchPaymentOptionsListenerSub$.next(listenerFn);
    }
    setReviewTemplate(templateRef) {
        this.reviewTemplateSub$.next(templateRef);
    }
    getHeader(state) {
        var _a, _b, _c;
        const paymentType = this.configs.length === 1 ? this.configs[0].paymentType : '';
        const data = {
            paymentMode: (_a = this.options) === null || _a === void 0 ? void 0 : _a.paymentMode,
            state,
            paymentType,
            isDebit: this.options.isDebitPayment,
        };
        return (_c = (_b = this.options).header) === null || _c === void 0 ? void 0 : _c.call(_b, data);
    }
}
/** @nocollapse */ CreatePaymentConfigSetupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentConfigSetupService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CreatePaymentConfigSetupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentConfigSetupService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentConfigSetupService, decorators: [{
            type: Injectable
        }] });

class CreatePaymentFieldsSetupService {
    constructor(createPaymentSetup, paymentOptionsService, paymentOrderHttpService) {
        this.createPaymentSetup = createPaymentSetup;
        this.paymentOptionsService = paymentOptionsService;
        this.paymentOrderHttpService = paymentOrderHttpService;
        this.destroyed$ = new Subject();
        this.fetchDebitItemPermissions$ = new Subject();
        this.fetchBeneficiaries$ = new Subject();
        this.paymentOptionsSub$ = new BehaviorSubject([]);
        this.paymentOptionsErrorSub$ = new BehaviorSubject(false);
        this.exchangeRate$ = new Subject();
        this.getExchangeRate$ = new Subject();
        this.exchangeRateError$ = new Subject();
        this.frequencyFieldSub$ = new Subject();
        this.countries$ = this.loadSanctionedCountries();
        this.currencies$ = this.loadSanctionedCurrencies();
        this.fetchDebitAccounts$ = new Subject();
        this.fetchCreditAccounts$ = new Subject();
        this.connectedAccounts$ = this.paymentOrderHttpService.connectedAccounts$.pipe(map((accounts) => accounts === null || accounts === void 0 ? void 0 : accounts.map(mapConnectedAccounts)));
        this.totalContacts = 0; // x-total-count from response header
        this.totalCreditAccounts = 0;
        this.totalContactsItemsCount = 0; // total count of items in response before extracting sub accounts
        this.checkClosedPaymentsAccess = false;
        this.paymentOptions$ = this.paymentOptionsSub$.asObservable();
        this.paymentOptionsError$ = this.paymentOptionsErrorSub$.asObservable();
        this.frequencyField$ = this.frequencyFieldSub$.asObservable();
        this.fetchDebitItemPermissions$
            .pipe(takeUntil(this.destroyed$))
            .subscribe((dataItemId) => {
            this.paymentOrderHttpService.loadDataItemPermissions(dataItemId);
        });
        this.fetchBeneficiaries$
            .pipe(takeUntil(this.destroyed$))
            .subscribe(({ params, type }) => {
            this.paymentOrderHttpService.fetchBeneficiaries(Object.assign(Object.assign({}, params), { size: this.options.pageSize }), type);
        });
        this.getExchangeRate$
            .pipe(filter(({ fromCurrency, toCurrency }) => {
            const isExchangeValid = fromCurrency !== toCurrency;
            if (!isExchangeValid) {
                // If fromCurrency and toCurrency are same, don't fetch exchange rate
                this.exchangeRate$.next(0);
            }
            return isExchangeValid;
        }), switchMap(({ fromCurrency, toCurrency }) => this.paymentOrderHttpService.getCurrencyExchangeRate(fromCurrency, toCurrency)), tap((exchangeRate) => {
            this.exchangeRateError$.next(!exchangeRate);
            this.exchangeRate$.next((exchangeRate === null || exchangeRate === void 0 ? void 0 : exchangeRate.rate) || 0);
        }), takeUntil(this.destroyed$))
            .subscribe();
        this.fetchDebitAccounts$
            .pipe(takeUntil(this.destroyed$))
            .subscribe((params) => {
            this.paymentOrderHttpService.loadMoreDebitAccounts(Object.assign(Object.assign({}, params), { merge: true, size: this.options.pageSize }));
        });
        this.fetchCreditAccounts$
            .pipe(takeUntil(this.destroyed$))
            .subscribe((_a) => {
            var { from } = _a, params = __rest(_a, ["from"]);
            this.paymentOrderHttpService.loadMoreCreditAccounts(from, Object.assign(Object.assign({}, params), { merge: true, size: this.options.pageSize }));
        });
    }
    get debitAccounts$() {
        return this.paymentOrderHttpService
            .getDebitAccounts({ size: this.options.pageSize })
            .pipe(accMap(this.options.defaultScheme));
    }
    get creditAccountList$() {
        return this.paymentOrderHttpService
            .getCreditAccounts({ size: this.options.pageSize })
            .pipe(map((arrangements) => ({
            items: mapArrangementList(arrangements, this.options.defaultScheme),
            count: arrangements.count,
        })));
    }
    get options() {
        return this.createPaymentSetup.options;
    }
    get configs() {
        return this.createPaymentSetup.configs;
    }
    ngOnDestroy() {
        this.destroyed$.next();
    }
    loadSanctionedCountries() {
        var _a;
        return this.paymentOptionsService
            .getSanctionedCountries((_a = this.options) === null || _a === void 0 ? void 0 : _a.defaultCountry)
            .pipe(shareReplay(1), catchError((_) => {
            this.paymentOrderHttpService.showNotification(false, {
                header: $localize `:omni-payment-get-countries-failed:Failed to load countries list. Please try again later.`,
            });
            return of([]);
        }));
    }
    loadSanctionedCurrencies() {
        var _a;
        return this.paymentOptionsService
            .getSanctionedCurrencies((_a = this.options) === null || _a === void 0 ? void 0 : _a.defaultCountry)
            .pipe(map((response) => {
            const result = {};
            if ('labeled' in response) {
                const { currencies, dividerIndex } = handleCurrenciesList(response);
                result.currencies = currencies;
                result.dividerIndex = dividerIndex;
            }
            return result;
        }), shareReplay(1), catchError((err) => {
            this.paymentOrderHttpService.showNotification(false, {
                header: $localize `:@omni-payment-get-countries-failed:Failed to load currencies list. Please try again later.`,
            });
            return of(err);
        }));
    }
    loadAccountByAccountId(id, accountNumber) {
        return this.paymentOrderHttpService
            .getAccountByAccountId(id, accountNumber)
            .pipe(map((item) => ({
            count: 1,
            items: [item],
        })), accMap(this.options.defaultScheme), map((list) => list[0]), catchError(() => of(undefined)));
    }
    getContacts() {
        return this.paymentOrderHttpService
            .getContacts({ size: this.options.pageSize, query: '' })
            .pipe(tap((data) => {
            if (!(data instanceof HttpErrorResponse)) {
                this.totalContacts = data.count;
                this.totalContactsItemsCount =
                    data.itemsCount && data.isLoadMore
                        ? this.totalContactsItemsCount + data.itemsCount
                        : data.itemsCount || 0;
            }
            else {
                this.totalContacts = 0;
            }
        }), map((value) => !(value instanceof HttpErrorResponse) ? value.items : value));
    }
    getCreditAccounts() {
        return this.paymentOrderHttpService
            .getCreditAccounts({ size: this.options.pageSize, searchTerm: '' })
            .pipe(tap((data) => {
            this.totalCreditAccounts = !(data instanceof HttpErrorResponse)
                ? data.count
                : 0;
        }), map((value) => !(value instanceof HttpErrorResponse)
            ? mapArrangementList(value, this.options.defaultScheme)
            : value));
    }
    getDebitAccounts() {
        return this.paymentOrderHttpService
            .getDebitAccounts({ size: this.options.pageSize, searchTerm: '' })
            .pipe(map((arrangements) => ({
            items: mapArrangementList(arrangements, this.options.defaultScheme),
            count: arrangements.count,
        })));
    }
    loadCreditorDetails(options) {
        this.contacts$ = shouldLoadTabContent(BeneficiaryList.CONTACTS, options)
            ? this.getContacts()
            : of([]);
        this.creditAccounts$ = shouldLoadTabContent(BeneficiaryList.ACCOUNTS, options)
            ? this.getCreditAccounts()
            : of([]);
        return combineLatest([this.creditAccounts$, this.contacts$]).pipe(map(([accounts, contacts]) => ({
            accounts,
            contacts,
            totalCreditAccounts: this.totalCreditAccounts,
            totalContacts: this.totalContacts,
            totalContactsItemsCount: this.totalContactsItemsCount,
        })));
    }
    setPaymentOptions(options) {
        this.paymentOptionsSub$.next(options);
    }
    setPaymentOptionsError(error) {
        this.paymentOptionsErrorSub$.next(error);
    }
    clearPaymentOptions() {
        this.paymentOptionsService.resetPaymentOptions();
        this.setPaymentOptionsError(false);
    }
    injectData(fields, paymentTypeOptions) {
        fields.forEach((field) => {
            var _a, _b, _c;
            field.options = field.options || {};
            field.options.isTemplateMode = this.options.isTemplateMode;
            field.options.templateModeType = this.options.templateModeType;
            field.options.isModalView = this.options.isModalView;
            field.options.checkClosedPaymentsAccess =
                (_a = this.options.checkClosedPaymentsAccess) !== null && _a !== void 0 ? _a : this.checkClosedPaymentsAccess;
            field.options.isWizardMode = ((_b = this.configs) === null || _b === void 0 ? void 0 : _b.length) > 1;
            if (field.fields instanceof Array) {
                this.injectData(field.fields, paymentTypeOptions);
            }
            else {
                switch (field.type) {
                    case PaymentComponents.debitAccountSelector:
                        field.options.items$ = this.getDebitAccounts();
                        field.options.fetchItems$ = this.fetchDebitAccounts$;
                        field.options.loadAccountByAccountId =
                            this.loadAccountByAccountId.bind(this);
                        field.options.fetchArrangementPermissions$ =
                            this.fetchDebitItemPermissions$;
                        field.options.arrangementPermissions$ =
                            this.paymentOrderHttpService.arrangementUserPermissions$;
                        field.options.checkClosedPaymentsAccess =
                            this.options.checkClosedPaymentsAccess;
                        break;
                    case PaymentComponents.beneficiarySelector:
                        field.options.items$ = this.loadCreditorDetails(field.options);
                        field.options.fetchItems$ = this.fetchBeneficiaries$;
                        break;
                    case PaymentComponents.internalAccountSelector:
                        field.options.paymentTypeOptions = paymentTypeOptions;
                        field.options.connectedItems$ = this.connectedAccounts$;
                        field.options.items$ =
                            field.name === InitiatorFields.initiatorAccountGroup
                                ? this.debitAccounts$
                                : this.getCreditAccounts();
                        break;
                    case PaymentComponents.accountSelector:
                        field.options.paymentTypeOptions = paymentTypeOptions;
                        field.options.connectedItems$ = this.connectedAccounts$;
                        if (field.name === CounterPartyFields.counterPartyAccountGroup ||
                            this.options.isDebitPayment) {
                            field.options.fetchItems$ = this.fetchCreditAccounts$;
                            field.options.items$ = this.creditAccountList$;
                        }
                        else {
                            field.options.items$ = this.getDebitAccounts();
                            field.options.fetchItems$ = this.fetchDebitAccounts$;
                        }
                        break;
                    case PaymentComponents.contactSelector:
                        field.options.items$ = this.getContacts();
                        field.options.fetchItems$ = this.fetchBeneficiaries$;
                        break;
                    case PaymentComponents.selectPaymentOption:
                        field.options.items$ = this.paymentOptions$;
                        break;
                    case PaymentComponents.sanctionedCountrySelector:
                    case PaymentComponents.address:
                        field.options.items$ = this.countries$;
                        break;
                    case PaymentComponents.sanctionedCurrencyAmount:
                        field.options.items$ = this.currencies$;
                        field.options.getExchangeRate$ = this.getExchangeRate$;
                        field.options.exchangeRate$ = this.exchangeRate$;
                        field.options.exchangeRateError$ = this.exchangeRateError$;
                        break;
                    case PaymentComponents.select:
                        if (field.name === ScheduleFields.frequency &&
                            ((_c = this.options) === null || _c === void 0 ? void 0 : _c.paymentMode) === PaymentMode.EDIT_PAYMENT) {
                            this.frequencyFieldSub$.next(field);
                        }
                        break;
                }
            }
        });
    }
}
/** @nocollapse */ CreatePaymentFieldsSetupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFieldsSetupService, deps: [{ token: CreatePaymentConfigSetupService }, { token: i2.PaymentOptionsService }, { token: i2.PaymentOrderHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CreatePaymentFieldsSetupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFieldsSetupService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFieldsSetupService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: CreatePaymentConfigSetupService }, { type: i2.PaymentOptionsService }, { type: i2.PaymentOrderHttpService }]; } });

/* eslint-disable max-len */
const formI18n = {
    unknownErrorHeader: $localize `:@@initiate-payment-unknown-error-header:Server error`,
    unknownError: $localize `:@@initiate-payment-unknown-error:Unknown error occured.`,
    validateFailed: $localize `:@@initiate-payment-validate-failed:Payment data error`,
};
const commonI18n = {
    templateSaveFailed: $localize `:@@initiate-payment-save-template-failed-message:Failed to save the template. Please try again.`,
    templateSaveSuccess: (templateName) => $localize `:@@initiate-payment-create-payment-template-success-message:Template "${templateName}" has been saved`,
};
const reviewI18n = {
    defaultPayment: {
        submitSuccess: $localize `:@@initiate-payment-submit-success-notification:Payment submitted successfully`,
        submitSuccessPendingApproval: $localize `:@@initiate-payment-submit-success-pendingApproval-notification:Payment is submitted successfully, \
  and pending further approval(s)`,
        editSubmitSuccess: $localize `:@@initiate-payment-edit-submit-success-notification:Edited payment submitted successfully`,
    },
    debitPayment: {
        submitSuccess: $localize `:@@initiate-debit-submit-success-notification:Debit request submitted successfully`,
        submitSuccessPendingApproval: $localize `:@@initiate-debit-submit-success-pendingApproval-notification:Debit request is submitted successfully, and pending further approval(s)`,
        editSubmitSuccess: $localize `:@@initiate-payment-edit-submit-success-notification:Edited debit request submitted successfully`,
    },
    paymentSubmitSuccess: $localize `:@@initiate-payment-submit-success-notification:Payment submitted successfully`,
    editPaymentSubmitSuccess: $localize `:@@initiate-payment-edit-submit-success-notification:Edited payment submitted successfully`,
    paymentSubmitSuccessPendingApproval: $localize `:@@initiate-payment-submit-success-pendingApproval-notification:Payment is submitted successfully, \
  and pending further approval(s)`,
    newContactSubmitSuccess: $localize `:@@initiate-payment-newContact-submit-success-notification:Contact saved successfully`,
    newContactSubmitFailure: $localize `:@@initiate-payment-newContact-submit-failure-notification:Failed to save contact. Please try again later.`,
    newContactSubmitSuccessPendingApproval: $localize `:@@initiate-payment-newContact-submit-success-pendingApproval-notification:Contact submitted successfully, \
  and pending further approval(s)`,
    submitPaymentFailure: $localize `:@@initiate-payment-submit-failure-notification:Payment data error`,
    debitSubmitSuccess: $localize `:@@initiate-debit-submit-success-notification:Debit request submitted successfully`,
    editdebitSubmitSuccess: $localize `:@@initiate-payment-edit-submit-success-notification:Edited debit request submitted successfully`,
    debitSubmitSuccessPendingApproval: $localize `:@@initiate-debit-submit-success-pendingApproval-notification:Debit request is submitted successfully, and pending further approval(s)`,
    submitDebitFailure: $localize `:@@initiate-debit-submit-failure-notification:Debit request data error`,
    submitPaymentFailureUnknownError: $localize `:@@initiate-payment-submit-unknown-failure-notification:Unknown error occurred.`,
    submitPaymentFailureUnknownErrorHeader: $localize `:@@initiate-payment-submit-unknown-failure-header-notification:Server error`,
    submitPaymentApprovalFailureCOED: {
        header: $localize `:@@edited-payment-submit-ts-failure-header-notification:Payment not submitted`,
        message: $localize `:@@edited-payment-submit-ts-failure-message-notification:Payment is already edited by another user`,
    },
};

class CreatePaymentService {
    constructor(paymentOptionsService) {
        this.paymentOptionsService = paymentOptionsService;
        this.selectedPaymentOptionSub$ = new BehaviorSubject(undefined);
        this.selectedPaymentConfigSub$ = new BehaviorSubject(undefined);
        this.selectedPaymentOption$ = this.selectedPaymentOptionSub$
            .asObservable()
            .pipe(distinctUntilChanged());
        this.selectedPaymentConfig$ = this.selectedPaymentConfigSub$
            .asObservable()
            .pipe(distinctUntilChanged());
    }
    get selectedPaymentConfigValue() {
        return this.selectedPaymentConfigSub$.value;
    }
    static getCriticalFieldValues(formValue) {
        var _a, _b;
        const { initiator, counterparty, remittanceInfo } = formValue || {};
        return {
            debitAccountNumber: initiator === null || initiator === void 0 ? void 0 : initiator.accountNumber,
            creditAccountNumber: counterparty === null || counterparty === void 0 ? void 0 : counterparty.accountNumber,
            amount: remittanceInfo === null || remittanceInfo === void 0 ? void 0 : remittanceInfo.amountGroup,
            country: (_b = (_a = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _a === void 0 ? void 0 : _a.postalAddress) === null || _b === void 0 ? void 0 : _b.country,
        };
    }
    selectPaymentConfig(config) {
        this.selectedPaymentConfigSub$.next(config);
    }
    selectPaymentOption(paymentOption) {
        this.selectedPaymentOptionSub$.next(paymentOption);
    }
    getPaymentOptionsRequest(configs) {
        let optionsReq;
        if (configs.length === 1) {
            const config = configs[0];
            // TODO: find a better solution for this
            if (config.paymentType !== 'INTERNATIONAL_TRANSFER') {
                return EMPTY;
            }
            optionsReq = this.paymentOptionsService
                .getPaymentOptionsRecordByPaymentType(config.paymentType)
                .pipe(map((response) => mapPaymentOptions(response, { [config.paymentType]: config.name })));
        }
        else {
            optionsReq = this.paymentOptionsService.paymentOptions$.pipe(filter((options) => !!options), map((options) => mapPaymentOptions(options || [])));
        }
        return optionsReq;
    }
    resetRedundantFields(paymentTypeConfig, form) {
        resetBeneficiaryAddress(paymentTypeConfig, form);
        resetBankDetails(paymentTypeConfig, form);
    }
}
/** @nocollapse */ CreatePaymentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentService, deps: [{ token: i2.PaymentOptionsService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CreatePaymentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i2.PaymentOptionsService }]; } });

class CreatePaymentFormComponent {
    constructor(paymentOrderHttpService, paymentOptionsService, createPaymentService, navigationService, stateService, cdRef, createPaymentSetup, fieldSetupService, formEl, modalService, eventBus, paymentErrors) {
        var _a, _b;
        this.paymentOrderHttpService = paymentOrderHttpService;
        this.paymentOptionsService = paymentOptionsService;
        this.createPaymentService = createPaymentService;
        this.navigationService = navigationService;
        this.stateService = stateService;
        this.cdRef = cdRef;
        this.createPaymentSetup = createPaymentSetup;
        this.fieldSetupService = fieldSetupService;
        this.formEl = formEl;
        this.modalService = modalService;
        this.eventBus = eventBus;
        this.paymentErrors = paymentErrors;
        this.destroyed$ = new Subject();
        this.paymentTemplate = null;
        this.shouldResetPaymentOptions = false;
        this.formValue = (_a = this.stateService.formInstance) === null || _a === void 0 ? void 0 : _a.value;
        this.paymentTemplateSearch = new FormControl();
        this.fetchOptions$ = new Subject();
        this.submitting$ = new BehaviorSubject(false);
        this.paymentState$ = this.stateService.paymentState$;
        this.paymentTemplates$ = this.paymentOrderHttpService.paymentTemplates$;
        this.loadingTemplates$ = this.paymentOrderHttpService.loading$;
        this.fetchingPaymentOptions$ = new BehaviorSubject(false);
        this.paymentOptions$ = this.fieldSetupService.paymentOptions$;
        this.paymentOptionsError$ = this.fieldSetupService.paymentOptionsError$;
        this.selectedPaymentConfig$ = this.createPaymentService.selectedPaymentConfig$;
        this.selectedPaymentOption$ = this.createPaymentService.selectedPaymentOption$;
        this.fetchPaymentOptionsListener$ = this.createPaymentSetup.fetchPaymentOptionsListener$;
        this.baseFields$ = this.createPaymentSetup.baseFields$.pipe(map((baseFields) => {
            this.fieldSetupService.injectData(baseFields);
            return baseFields;
        }));
        this.options = {};
        this.configs = [];
        this.templateNameControl = (_b = this.stateService.formInstance) === null || _b === void 0 ? void 0 : _b.get('templateName');
        this.errors = [];
        this.isEditPaymentConfirmationDialogOpen = false;
        this.enablePaymentTemplateSelector = true;
        this.editPaymentHasNoChanges = false;
        this.isErrorTitleDisplayed = true;
        this.shouldApplyTemplate = false;
        this.showApiError = false;
        this.paymentMode = PaymentMode;
    }
    ngOnInit() {
        combineLatest([
            this.createPaymentSetup.configs$,
            this.createPaymentSetup.options$,
            this.stateService.paymentEditState$,
        ])
            .pipe(distinctUntilChanged(), takeUntil(this.destroyed$))
            .subscribe(([configs, options, editedPaymentDetails]) => {
            var _a, _b, _c;
            this.options = options;
            this.editedPaymentDetails = editedPaymentDetails;
            this.isErrorTitleDisplayed =
                (_a = options.isErrorTitleDisplayed) !== null && _a !== void 0 ? _a : this.isErrorTitleDisplayed;
            this.enablePaymentTemplateSelector =
                (_b = options.enablePaymentTemplateSelector) !== null && _b !== void 0 ? _b : this.enablePaymentTemplateSelector;
            if (configs.length === 1) {
                // TODO: find a better solution for this
                this.setArrangementBusFunctions((_c = configs[0].options) === null || _c === void 0 ? void 0 : _c.closedPaymentBusFns, configs[0].businessFunction);
                this.onSelectConfig(configs[0]);
            }
            const { isOneOffToRecurrentAllowed, isRecurrentToOneOffAllowed } = options;
            this.configs = configs.map((config) => {
                let _config = options.isTemplateMode
                    ? removeScheduleFromConfig(config)
                    : config;
                if (editedPaymentDetails) {
                    _config = setFrequencyOptionsPerConfig(config, !!editedPaymentDetails.schedule, {
                        isOneOffToRecurrentAllowed,
                        isRecurrentToOneOffAllowed,
                    });
                }
                this.fieldSetupService.injectData(_config.fields, _config.options);
                return _config;
            });
            this.setupPaymentTypes(this.configs);
            this.header = this.createPaymentSetup.getHeader(InitiatePaymentHeaderStates.FORM);
        });
        this.listen();
        if (this.stateService.currentState !== PaymentState.EDIT) {
            this.fieldSetupService.clearPaymentOptions();
            this.shouldResetPaymentOptions = true;
        }
        this.createPaymentService
            .getPaymentOptionsRequest(this.configs)
            .pipe(tap((options) => {
            if (!this.shouldResetPaymentOptions && !(options === null || options === void 0 ? void 0 : options.length)) {
                this.fieldSetupService.setPaymentOptionsError(true);
            }
            this.shouldResetPaymentOptions = false;
            this.onPaymentTypeChange(options);
        }, catchError(() => {
            this.fieldSetupService.setPaymentOptionsError(true);
            return of([]);
        })), takeUntil(this.destroyed$))
            .subscribe();
        triggerPaymentHook(this.createPaymentSetup.hooks, PaymentHooks.onInit);
    }
    ngAfterViewInit() {
        this.stateService.paymentTemplateState$
            .pipe(takeUntil(this.destroyed$))
            .subscribe((template) => {
            if (template) {
                this.onSelectPaymentTemplate(template);
            }
        });
        if (this.editedPaymentDetails) {
            this.setEditFormValues(this.editedPaymentDetails);
            this.stateService.setEditPayment(undefined); // This is to prevent overwrite manual edits on return from review screen
        }
    }
    ngAfterContentInit() {
        this.renderView();
    }
    ngOnDestroy() {
        this.destroyed$.next();
        triggerPaymentHook(this.createPaymentSetup.hooks, PaymentHooks.onDestroy);
    }
    setArrangementBusFunctions(closedFunctions, businessFunction) {
        if ((closedFunctions === null || closedFunctions === void 0 ? void 0 : closedFunctions.length) && businessFunction) {
            // TODO: temporary solution, need to find better way do not mutate object
            const setOfBusFun = new Set([...closedFunctions, businessFunction]);
            closedFunctions = Array.from(setOfBusFun);
            this.paymentOrderHttpService.arrangementBusFunctions =
                closedFunctions.toString();
        }
    }
    setEditFormValues(payment) {
        const form = this.stateService.formInstance;
        const counterparty = form.get(PaymentBaseFields.counterparty);
        registerFormControl(counterparty, CounterPartyFields.schemeName, [], [], 'BBAN');
        registerFormControl(form, 'paymentOrderId', [], [], payment.id);
        this.isPaymentCopyControl = registerFormControl(form, HiddenFields.isPaymentCopy);
        this.isPaymentCopyControl.patchValue(this.options.paymentMode === this.paymentMode.COPY_PAYMENT);
        const editForm = setFormDetailsFromService(form, payment);
        this.stateService.initialEditFormValue = editForm.value;
        this.setForm(editForm);
    }
    setupPaymentTypes(configs) {
        this.paymentTypes = configs.map((config) => config.paymentType).join(',');
        this.paymentOrderHttpService.paymentType = this.paymentTypes;
    }
    renderView() {
        this.outletRef.clear();
        this.outletRef.createEmbeddedView(this.contentRef);
    }
    setTemplateValues(form, paymentTemplate) {
        this.setFormValues(normalisePaymentTemplate(paymentTemplate), form);
        this.paymentTemplate = null;
        this.stateService.setPaymentTemplate(undefined);
    }
    prepareForTemplateApply() {
        const formGroup = new FormGroup({});
        this.formValue = null;
        this.fieldSetupService.setPaymentOptions([]);
        this.templateNameControl = registerFormControl(formGroup, 'templateName');
        this.stateService.saveForm(formGroup);
    }
    getPaymentConfig(paymentType) {
        if (paymentType) {
            return this.configs.filter((paymentConfig) => paymentType === paymentConfig.paymentType)[0];
        }
        return;
    }
    setFormValues({ details, name, id }, form) {
        var _a;
        const _form = form || this.stateService.formInstance;
        const templateForm = setFormDetailsFromResponse(_form, details, {
            name,
            id,
        });
        this.templateSelectorName = name;
        (_a = this.templateNameControl) === null || _a === void 0 ? void 0 : _a.setValue(name);
        this.setForm(templateForm);
        _form.markAllAsTouched();
    }
    listen() {
        this.fetchOptions$
            .pipe(filter((form) => JSON.stringify(CreatePaymentService.getCriticalFieldValues(this.formValue)) !==
            JSON.stringify(CreatePaymentService.getCriticalFieldValues(form.getRawValue()))), switchMap((form) => {
            this.formValue = form.getRawValue();
            return this.fetchPaymentOptions(form);
        }), takeUntil(this.destroyed$))
            .subscribe();
    }
    setForm(formInstance) {
        this.stateService.setPaymentState(PaymentState.EDIT);
        this.stateService.saveForm(formInstance);
        this.renderView();
        this.cdRef.detectChanges();
    }
    /**
     * Callback triggered when the payment type changes
     */
    onPaymentTypeChange(paymentOptions = []) {
        if (paymentOptions && paymentOptions.length) {
            this.fieldSetupService.setPaymentOptionsError(false);
        }
        this.fieldSetupService.setPaymentOptions(paymentOptions);
        this.fetchingPaymentOptions$.next(false);
    }
    validatePayment(form) {
        this.paymentOrderHttpService
            .validatePayment(toPostRequest(form.getRawValue()))
            .pipe(take(1))
            .subscribe((response) => {
            const control = form.get('isIntraLegalEntity') ||
                registerFormControl(form, 'isIntraLegalEntity');
            this.templateNameControl =
                this.templateNameControl ||
                    registerFormControl(form, 'templateName');
            control.setValue(response.isIntraLegalEntityPaymentOrder);
            this.templateNameControl.setValue(this.templateSelectorName);
            this.submitting$.next(false);
            this.navigationService.review();
            this.stateService.canApprove = response.canApprove;
        }, ({ error }) => {
            var _a;
            this.submitting$.next(false);
            this.errors = error.errors;
            if (!this.isP2PLimitError(error)) {
                this.genericError = error.message;
                this.showApiError = true;
                if (((_a = this.errors) === null || _a === void 0 ? void 0 : _a.length) || this.genericError) {
                    const errorObject = {
                        errorResponse: error,
                        errors: this.errors,
                        paymentErrors: this.paymentErrors,
                        notificationHeader: formI18n.validateFailed,
                        genericMessage: this.genericError,
                    };
                    this.paymentOrderHttpService.manageErrorResponse(errorObject);
                }
                else {
                    this.paymentOrderHttpService.showNotification(false, {
                        header: formI18n.unknownErrorHeader,
                        message: formI18n.unknownError,
                        headerContext: error,
                    });
                }
                this.scrollIntoAlertView();
            }
            else {
                this.showApiError = false;
                this.handleP2PErrors(this.errors[0]);
            }
        });
    }
    handleP2PErrors(error) {
        var _a, _b, _c, _d, _e, _f;
        if (error === null || error === void 0 ? void 0 : error.key) {
            const amountGroupConfig = getConfig(RemittanceInfoFields.amountCurrencyGroup, this.configs[0]);
            const validationMsg = (_b = (_a = amountGroupConfig === null || amountGroupConfig === void 0 ? void 0 : amountGroupConfig.options) === null || _a === void 0 ? void 0 : _a.validationMessages) === null || _b === void 0 ? void 0 : _b.find((validationMessage) => validationMessage.name === error.key);
            if (validationMsg === null || validationMsg === void 0 ? void 0 : validationMsg.message) {
                validationMsg.message = validationMsg.message.replace('#amount#', (_c = error.context) === null || _c === void 0 ? void 0 : _c.limit);
                const amountGroup = (_d = this.stateService.formInstance
                    .get(PaymentBaseFields.remittanceInfo)) === null || _d === void 0 ? void 0 : _d.get(RemittanceInfoFields.amountCurrencyGroup);
                amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.setErrors({ [error.key]: true });
                (_e = amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.get(RemittanceInfoFields.amount)) === null || _e === void 0 ? void 0 : _e.setErrors({ invalid: true });
                focusErrorElement((_f = this.formEl) === null || _f === void 0 ? void 0 : _f.nativeElement, 'small.bb-input-validation-message');
            }
        }
    }
    scrollIntoAlertView() {
        var _a;
        (_a = this.alertContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollIntoView(false, {
            behavior: 'smooth',
            block: 'start',
        });
    }
    isP2PLimitError(error) {
        var _a;
        if (!Array.isArray(error.errors))
            return false;
        const errKey = (_a = error.errors[0]) === null || _a === void 0 ? void 0 : _a.key;
        return Object.values(P2PLimitErrorKeys).includes(errKey);
    }
    saveTemplate(form) {
        if (this.options.paymentMode === PaymentMode.EDIT_TEMPLATE) {
            this.editPaymentTemplate(form);
        }
        else {
            this.createPaymentTemplate(form);
        }
    }
    editPaymentTemplate(form) {
        var _a, _b;
        const templateName = (_a = form.get(PaymentTemplateFields.templateName)) === null || _a === void 0 ? void 0 : _a.value;
        const paymentTemplateId = (_b = form.get(PaymentTemplateFields.paymentTemplateId)) === null || _b === void 0 ? void 0 : _b.value;
        if (paymentTemplateId) {
            this.paymentOrderHttpService
                .editPaymentTemplate(paymentTemplateId, toPostPaymentTemplate(form.getRawValue()))
                .pipe(takeUntil(this.destroyed$))
                .subscribe(this.saveTemplateSuccessCallback.bind(this, templateName), this.saveTemplateErrorCallback.bind(this));
        }
    }
    createPaymentTemplate(form) {
        var _a;
        const templateName = (_a = form.get(PaymentTemplateFields.templateName)) === null || _a === void 0 ? void 0 : _a.value;
        this.paymentOrderHttpService
            .postPaymentTemplate(toPostPaymentTemplate(form.getRawValue()))
            .pipe(takeUntil(this.destroyed$))
            .subscribe(this.saveTemplateSuccessCallback.bind(this, templateName), this.saveTemplateErrorCallback.bind(this));
    }
    saveTemplateSuccessCallback(templateName) {
        var _a;
        this.paymentOrderHttpService.showNotification(true, {
            header: commonI18n.templateSaveSuccess(templateName),
            headerContext: { name: templateName },
        });
        this.submitting$.next(false);
        if (this.options.isModalView) {
            (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
        }
        else {
            this.stateService.resetForm();
            this.renderView();
        }
        this.eventBus.publish((this.options.successEventName || defaultPaymentSuccessEventName), true);
    }
    saveTemplateErrorCallback(response) {
        const { error } = response;
        this.paymentOrderHttpService.showNotification(false, {
            header: (error === null || error === void 0 ? void 0 : error.message) || commonI18n.templateSaveFailed,
        });
        this.submitting$.next(false);
    }
    onHooksDone(form, success = true) {
        if (success) {
            if (this.options.isTemplateMode) {
                this.saveTemplate(form);
            }
            else {
                this.validatePayment(form);
            }
        }
        else {
            this.submitting$.next(false);
        }
    }
    isEditFormNotChanged(form) {
        return !isEditFormDirty(form.value, this.stateService.initialEditFormValue);
    }
    onSelectPaymentTemplate(paymentTemplateData) {
        const config = this.getPaymentConfig(normalizePaymentType(paymentTemplateData));
        if (this.configs.length > 1 && config) {
            this.prepareForTemplateApply();
            this.paymentTemplate = normalisePaymentTemplate(paymentTemplateData);
            this.shouldApplyTemplate = true;
            this.stateService.setPaymentState(PaymentState.EDIT);
            this.onSelectConfig(config);
            this.renderView();
        }
        else {
            this.setFormValues(paymentTemplateData);
        }
    }
    clearTemplateName() {
        this.templateSelectorName = '';
        if (this.templateNameControl) {
            this.templateNameControl.setValue('');
        }
    }
    onLoadingMoreTemplates(page) {
        this.paymentOrderHttpService.loadMore(page);
    }
    search(text) {
        this.paymentOrderHttpService.search(text);
    }
    onSelectConfig(config) {
        this.createPaymentService.selectPaymentConfig(config);
    }
    onPaymentOptionSelect(paymentOption) {
        this.createPaymentService.selectPaymentOption(paymentOption);
    }
    onApplyTemplate(form) {
        this.shouldApplyTemplate = false;
        if (this.paymentTemplate) {
            this.setTemplateValues(form, this.paymentTemplate);
        }
        else {
            this.stateService.paymentTemplateState$
                .pipe(takeUntil(this.destroyed$))
                .subscribe((template) => {
                if (template) {
                    this.setTemplateValues(form, template);
                }
            });
        }
    }
    /**
     * Fetches the payment options for provided payment details
     */
    fetchPaymentOptions(form) {
        this.fetchingPaymentOptions$.next(true);
        return this.paymentOptionsService.fetchPaymentOptions(mapPaymentOptionRequest(form.getRawValue()));
    }
    discardEditPaymentChanges() {
        var _a;
        (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
    }
    cancelEditPaymentConfirmationDialog() {
        this.isEditPaymentConfirmationDialogOpen = false;
    }
    onSubmit(form) {
        var _a;
        const configVal = this.createPaymentService.selectedPaymentConfigValue;
        if (configVal) {
            this.createPaymentService.resetRedundantFields(configVal, form);
        }
        this.stateService.saveForm(form);
        this.submitting$.next(true);
        if ((_a = this.createPaymentSetup.hooks) === null || _a === void 0 ? void 0 : _a[PaymentHooks.onSave]) {
            triggerPaymentHook(this.createPaymentSetup.hooks, PaymentHooks.onSave, this.onHooksDone.bind(this, form), form);
        }
        else {
            this.onHooksDone(form);
        }
    }
    onClear() {
        this.fieldSetupService.clearPaymentOptions();
        this.stateService.setPaymentState(PaymentState.INITIAL);
        this.stateService.resetForm();
        this.clearTemplateName();
        this.formValue = null;
        this.searchValue = '';
        this.showApiError = false;
        this.renderView();
    }
    onEditCancel(form) {
        var _a;
        if (this.isEditFormNotChanged(form)) {
            (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
        }
        else {
            this.isEditPaymentConfirmationDialogOpen = true;
        }
    }
    onEditSubmit(form) {
        if (this.isEditFormNotChanged(form)) {
            this.editPaymentHasNoChanges = true;
            this.scrollIntoAlertView();
        }
        else {
            this.editPaymentHasNoChanges = false;
            this.onSubmit(form);
        }
    }
    getForm(paymentState) {
        if (paymentState === PaymentState.REVIEW) {
            this.stateService.resetForm();
            this.stateService.setPaymentState(PaymentState.INITIAL);
        }
        return this.stateService.form$;
    }
}
/** @nocollapse */ CreatePaymentFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFormComponent, deps: [{ token: i2.PaymentOrderHttpService }, { token: i2.PaymentOptionsService }, { token: CreatePaymentService }, { token: i2.NavigationService }, { token: i2.StateService }, { token: i0.ChangeDetectorRef }, { token: CreatePaymentConfigSetupService }, { token: CreatePaymentFieldsSetupService }, { token: i0.ElementRef }, { token: i2.RoutableModalService, optional: true }, { token: PUBSUB }, { token: BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CreatePaymentFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreatePaymentFormComponent, selector: "bb-create-payment-form", providers: [CreatePaymentFieldsSetupService], viewQueries: [{ propertyName: "outletRef", first: true, predicate: ["outlet"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "contentRef", first: true, predicate: ["content"], descendants: true, read: TemplateRef, static: true }, { propertyName: "alertContainer", first: true, predicate: ["alertContainer"], descendants: true }], ngImport: i0, template: "<bb-header-ui\n  *ngIf=\"header\"\n  headingClasses=\"bb-block bb-block--lg\"\n  headingType=\"h2\"\n  [heading]=\"header\"\n></bb-header-ui>\n<div #alertContainer>\n  <ng-container *ngIf=\"errors?.length; else noSpecificError\">\n    <ng-container *ngFor=\"let error of errors\">\n      <ng-container *ngIf=\"error.message; else noSpecificError\">\n        <bb-alert-ui *ngIf=\"showApiError\" title=\"\" modifier=\"error\">\n          <div class=\"bb-text-bold bb-text-default d-inline-flex\">\n            <ng-container *ngIf=\"isErrorTitleDisplayed\">\n              <span i18n=\"@@initiate-payment-payments-error-alert-title\">\n                Payment data error: </span\n              >&nbsp;\n            </ng-container>\n            <span>{{ $any(error)?.message }}</span>\n          </div>\n        </bb-alert-ui>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <ng-template #noSpecificError>\n    <ng-container *ngIf=\"genericError; else unknownError\">\n      <bb-alert-ui *ngIf=\"showApiError\" title=\"\" modifier=\"error\">\n        <div class=\"bb-text-bold bb-text-default\">\n          <ng-container *ngIf=\"isErrorTitleDisplayed\">\n            <span\n              i18n=\"@@initiate-payment-payments-generic-message-alert-title\"\n            >\n              Payment data error:\n            </span>\n          </ng-container>\n          <span>{{ genericError }}</span>\n        </div>\n      </bb-alert-ui>\n    </ng-container>\n  </ng-template>\n  <ng-template #unknownError>\n    <div class=\"bb-text-bold bb-text-default\">\n      <bb-alert-ui\n        *ngIf=\"showApiError\"\n        i18n-title=\"@@initiate-payment-payments-unknown-error-alert-title\"\n        title=\"Server error: Unknown error occurred\"\n        modifier=\"error\"\n      >\n      </bb-alert-ui>\n    </div>\n  </ng-template>\n  <bb-alert-ui\n    *ngIf=\"editPaymentHasNoChanges\"\n    i18n-title=\"\n      @@initiate-payment-payments-edit-paymet-no-changes-warning-alert-title\"\n    title=\"Please make changes to continue.\"\n    modifier=\"warning\"\n  ></bb-alert-ui>\n</div>\n\n<ng-container\n  *ngIf=\"\n    enablePaymentTemplateSelector &&\n    !options?.isTemplateMode &&\n    options?.paymentMode !== paymentMode.EDIT_PAYMENT &&\n    options?.paymentMode !== paymentMode.COPY_PAYMENT\n  \"\n>\n  <bb-payment-template-selector\n    [paymentTemplateSearch]=\"paymentTemplateSearch\"\n    [items]=\"paymentTemplates$\"\n    [loading]=\"loadingTemplates$ | async\"\n    [templateName]=\"templateSelectorName || templateNameControl?.value\"\n    [searchValue]=\"searchValue\"\n    (setValues)=\"onSelectPaymentTemplate($event)\"\n    (loadMoreTemplates)=\"onLoadingMoreTemplates($event)\"\n    (searchTemplates)=\"search($event)\"\n    (clear)=\"clearTemplateName()\"\n  >\n  </bb-payment-template-selector>\n</ng-container>\n\n<ng-container #outlet></ng-container>\n<ng-template #content>\n  <ng-container *ngIf=\"paymentState$ | async as paymentState\">\n    <ng-container *ngIf=\"configs.length === 1; else adaptiveFormTmpl\">\n      <bb-payord-form\n        [config]=\"configs[0]\"\n        [formItem]=\"getForm(paymentState) | async\"\n        [submitting]=\"submitting$ | async\"\n        [isModalView]=\"options.isModalView\"\n        [isTemplateMode]=\"options.isTemplateMode\"\n        [isDebitPayment]=\"options.isDebitPayment\"\n        [paymentMode]=\"options.paymentMode\"\n        [templateModeType]=\"options.templateModeType\"\n        (clear)=\"onClear()\"\n        (submitted)=\"onSubmit($event)\"\n        (editPaymentCancel)=\"onEditCancel($event)\"\n        (editPaymentSubmit)=\"onEditSubmit($event)\"\n      >\n      </bb-payord-form>\n\n      <bb-confirmation-dialog\n        data-role=\"discard-payment-edit-confirmation-dialog\"\n        confirmButtonColor=\"danger\"\n        (confirm)=\"discardEditPaymentChanges()\"\n        [isOpen]=\"isEditPaymentConfirmationDialogOpen\"\n        (cancel)=\"cancelEditPaymentConfirmationDialog()\"\n      >\n        <span title i18n=\"@@confirmation-dialog.edit.payment.title.discard\"\n          >Discard edited data?</span\n        >\n        <span body i18n=\"@@confirmation-dialog.edit.payment.body.discard\">\n          Are you sure you want to exit and discard all changes? Edited data\n          will be lost.\n        </span>\n        <span\n          confirmActionName\n          i18n=\"@@confirmation-dialog.edit.payment.action.discard.confirm\"\n          >Discard</span\n        >\n        <span\n          cancelActionName\n          i18n=\"@@confirmation-dialog.edit.payment.action.discard.cancel\"\n          >Not now</span\n        >\n      </bb-confirmation-dialog>\n    </ng-container>\n    <ng-template #adaptiveFormTmpl>\n      <bb-adaptive-form\n        [formItem]=\"getForm(paymentState) | async\"\n        [paymentState]=\"paymentState\"\n        [paymentTypes]=\"configs\"\n        [baseFields]=\"baseFields$ | async\"\n        [fetchOptions$]=\"fetchOptions$\"\n        [fetchingOptions]=\"fetchingPaymentOptions$ | async\"\n        [paymentOptions$]=\"paymentOptions$\"\n        [paymentOptionsError]=\"paymentOptionsError$ | async\"\n        [selectedPaymentConfig]=\"selectedPaymentConfig$ | async\"\n        [selectedPaymentOption]=\"selectedPaymentOption$ | async\"\n        [fetchPaymentOptionsListener]=\"fetchPaymentOptionsListener$ | async\"\n        [shouldApplyTemplate]=\"shouldApplyTemplate\"\n        [checkClosedPaymentsAccess]=\"!!options.checkClosedPaymentsAccess\"\n        [submitting]=\"submitting$ | async\"\n        [isModalView]=\"options.isModalView\"\n        [isDebitPayment]=\"options.isDebitPayment\"\n        (selectConfig)=\"onSelectConfig($event)\"\n        (submitted)=\"onSubmit($event)\"\n        (selectPaymentOption)=\"onPaymentOptionSelect($event)\"\n        (clear)=\"onClear()\"\n        (applyPaymentTemplate)=\"onApplyTemplate($event)\"\n      ></bb-adaptive-form>\n    </ng-template>\n  </ng-container>\n</ng-template>\n", components: [{ type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i6.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2.ӨPaymentTemplateSelectorComponent, selector: "bb-payment-template-selector", inputs: ["items", "templatesList", "paymentTemplateSearch", "loading", "templateName", "searchValue"], outputs: ["setValues", "loadMoreTemplates", "searchTemplates", "clear"] }, { type: i7.ӨPayordFormComponent, selector: "bb-payord-form", inputs: ["config", "isModalView", "isTemplateMode", "isDebitPayment", "isEditPaymentModal", "templateModeType", "formItem", "submitting", "paymentMode"], outputs: ["submitted", "clear", "editPaymentCancel", "editPaymentSubmit"] }, { type: i2.ӨConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }, { type: i7.ӨAdaptiveFormComponent, selector: "bb-adaptive-form", inputs: ["formItem", "baseFields", "paymentTypes", "paymentState", "isDebitPayment", "selectedPaymentConfig", "selectedPaymentOption", "paymentOptionsError", "checkClosedPaymentsAccess", "paymentOptions$", "fetchingOptions", "fetchPaymentOptionsListener", "submitting", "fetchOptions$", "shouldApplyTemplate", "isModalView"], outputs: ["applyPaymentTemplate", "submitted", "selectPaymentOption", "clear", "selectConfig"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i14.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-create-payment-form',
                    templateUrl: './create-payment-form.component.html',
                    providers: [CreatePaymentFieldsSetupService],
                }]
        }], ctorParameters: function () { return [{ type: i2.PaymentOrderHttpService }, { type: i2.PaymentOptionsService }, { type: CreatePaymentService }, { type: i2.NavigationService }, { type: i2.StateService }, { type: i0.ChangeDetectorRef }, { type: CreatePaymentConfigSetupService }, { type: CreatePaymentFieldsSetupService }, { type: i0.ElementRef }, { type: i2.RoutableModalService, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN]
                }] }]; }, propDecorators: { outletRef: [{
                type: ViewChild,
                args: ['outlet', { read: ViewContainerRef, static: true }]
            }], contentRef: [{
                type: ViewChild,
                args: ['content', { read: TemplateRef, static: true }]
            }], alertContainer: [{
                type: ViewChild,
                args: ['alertContainer']
            }] } });

const components$1 = [CreatePaymentFormComponent];
class CreatePaymentFormModule {
}
/** @nocollapse */ CreatePaymentFormModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFormModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ CreatePaymentFormModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFormModule, declarations: [CreatePaymentFormComponent], imports: [CommonModule, PayordFormBuilderAngModule], exports: [CreatePaymentFormComponent] });
/** @nocollapse */ CreatePaymentFormModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFormModule, imports: [[CommonModule, PayordFormBuilderAngModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreatePaymentFormModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PayordFormBuilderAngModule],
                    declarations: [...components$1],
                    exports: [...components$1],
                }]
        }] });

var P2PLimitReasonCodes;
(function (P2PLimitReasonCodes) {
    P2PLimitReasonCodes["MIN_TRANSFER"] = "PL01";
    P2PLimitReasonCodes["MAX_TRANSFER"] = "PL02";
    P2PLimitReasonCodes["DAILY"] = "PL03";
    P2PLimitReasonCodes["MONTHLY"] = "PL04";
})(P2PLimitReasonCodes || (P2PLimitReasonCodes = {}));

class InitiatorDetailsComponent {
}
/** @nocollapse */ InitiatorDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatorDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ InitiatorDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InitiatorDetailsComponent, selector: "bb-payment-initiator-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0, template: "<div class=\"bb-text-bold bb-block bb-block--sm\">\n  <bb-payord-dynamic-label\n    name=\"initiator\"\n    [config]=\"paymentConfig\"\n    defaultLabel=\"From\"\n    i18n-defaultLabel=\"@@omni-payment-review-initiator.from-account.label\"\n  ></bb-payord-dynamic-label>\n</div>\n\n<div *ngIf=\"data?.accountNumber\">\n  <div\n    class=\"break-word bb-text-bold bb-block bb-block--xs\"\n    data-role=\"debit-account-name\"\n  >\n    {{ data?.alias || data?.name }}\n  </div>\n  <div\n    data-role=\"debit-account-number\"\n    class=\"bb-text-support break-word contextual-alternates-off\"\n  >\n    {{ data?.accountNumber }}\n  </div>\n</div>\n", components: [{ type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatorDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-initiator-details',
                    templateUrl: './initiator-details.component.html',
                }]
        }], propDecorators: { data: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }] } });

class CreditorAccountComponent {
}
/** @nocollapse */ CreditorAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditorAccountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CreditorAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditorAccountComponent, selector: "bb-creditor-account", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0, template: "<div class=\"bb-text-bold bb-block bb-block--sm\">\n  <bb-payord-dynamic-label\n    name=\"counterparty\"\n    [config]=\"paymentConfig\"\n    defaultLabel=\"To\"\n    i18n-defaultLabel=\"@@omni-payment-review-counterparty.transfer-to.label\"\n  ></bb-payord-dynamic-label>\n</div>\n<div *ngIf=\"data?.accountNumber || data?.creditorBank?.bankBranchCode\">\n  <div\n    class=\"bb-text-bold bb-block bb-block--xs\"\n    data-role=\"beneficiary-account-name\"\n  >\n    {{ data?.alias || data?.name }}\n  </div>\n  <div class=\"bb-text-support break-word contextual-alternates-off\">\n    <span data-role=\"beneficiary-account-number\">\n      {{\n        data?.creditorBank?.bankBranchCode\n          ? data?.creditorBank?.bankBranchCode + ' / ' + data?.accountNumber\n          : data?.accountNumber\n      }}\n    </span>\n  </div>\n</div>\n", components: [{ type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditorAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-creditor-account',
                    templateUrl: './creditor-account.component.html',
                }]
        }], propDecorators: { data: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }] } });

class RemittanceDetailsComponent {
}
/** @nocollapse */ RemittanceDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RemittanceDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ RemittanceDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RemittanceDetailsComponent, selector: "bb-payment-remittance-details", inputs: { data: "data", paymentConfig: "paymentConfig", forexDetails: "forexDetails", transferFee: "transferFee", chargeBearer: "chargeBearer" }, ngImport: i0, template: "<div class=\"bb-text-bold bb-block bb-block--sm\">\n  <bb-payord-dynamic-label\n    name=\"amountGroup\"\n    [config]=\"paymentConfig\"\n    defaultLabel=\"Amount\"\n    i18n-defaultLabel=\"@@omni-payment-review-remittance-details.amount.label\"\n  ></bb-payord-dynamic-label>\n</div>\n<div class=\"bb-highlight break-word\" data-role=\"transfer-amount\">\n  <bb-amount-ui\n    class=\"bb-heading-1\"\n    [amount]=\"data?.amountGroup?.amount\"\n    [currency]=\"data?.amountGroup?.currency\"\n    [mapCurrency]=\"false\"\n  ></bb-amount-ui>\n</div>\n\n<div data-role=\"payment-is-urgent\" class=\"bb-stack\" *ngIf=\"data?.urgent\">\n  <bb-icon-ui color=\"secondary\" name=\"info\" size=\"md\"> </bb-icon-ui>\n  &nbsp;\n  <span i18n=\"@@omni-payment-review-remittance-details.urgent-payment.label\"\n    >Urgent payment</span\n  >\n</div>\n\n<div class=\"bb-stack bb-text-support\" *ngIf=\"data?.amountOptionLabel\">\n  <span>{{ data?.amountOptionLabel }}</span>\n</div>\n", components: [{ type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RemittanceDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-remittance-details',
                    templateUrl: './remittance-details.component.html',
                }]
        }], propDecorators: { data: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }], forexDetails: [{
                type: Input
            }], transferFee: [{
                type: Input
            }], chargeBearer: [{
                type: Input
            }] } });

class CreditorDetailsComponent {
}
/** @nocollapse */ CreditorDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditorDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CreditorDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditorDetailsComponent, selector: "bb-payment-creditor-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0, template: "<ng-container\n  *ngIf=\"\n    data?.entryClass ||\n    data?.accountType ||\n    data?.recipientId ||\n    data?.postalAddress?.addressLine1 ||\n    data?.postalAddress?.addressLine2 ||\n    data?.postalAddress?.streetName\n  \"\n>\n  <div\n    class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  >\n    <div class=\"card-body\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--md\"\n        i18n=\"@@counterparty-details.beneficiary-details.title\"\n      >\n        Beneficiary details\n      </div>\n      <div\n        class=\"row bb-block bb-block--md\"\n        *ngIf=\"data?.entryClass || data?.accountType\"\n      >\n        <div\n          class=\"col-md-6 bb-block bb-block--md\"\n          *ngIf=\"\n            data?.accountType &&\n            (data?.accountType === 'SAVINGS' ||\n              data?.accountType === 'CHECKING')\n          \"\n        >\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"accountType\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Account type\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.account-type-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            [ngSwitch]=\"data?.accountType\"\n            data-role=\"beneficiary-account-type\"\n          >\n            <ng-container\n              i18n=\"@@counterparty-details.account-type-savings\"\n              *ngSwitchCase=\"'SAVINGS'\"\n            >\n              Savings\n            </ng-container>\n            <ng-container\n              i18n=\"@@counterparty-details.account-type-checking\"\n              *ngSwitchCase=\"'CHECKING'\"\n            >\n              Checking\n            </ng-container>\n          </div>\n        </div>\n\n        <div class=\"col-md-6 bb-block bb-block--md\" *ngIf=\"data?.entryClass\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"entryClass\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Standard entry class (SEC Type)\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.entryClass-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            [ngSwitch]=\"data?.entryClass\"\n            data-role=\"beneficiary-standard-entry-class\"\n          >\n            <ng-container\n              i18n=\"@@counterparty-details.entryClass-ppd\"\n              *ngSwitchCase=\"'PPD'\"\n            >\n              Personal (PPD)\n            </ng-container>\n            <ng-container\n              i18n=\"@@counterparty-details.entryClass-ccd\"\n              *ngSwitchCase=\"'CCD'\"\n            >\n              Business (CCD)\n            </ng-container>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row bb-block bb-block--md\" *ngIf=\"data?.recipientId\">\n        <div class=\"col-md-6 bb-block bb-block--md\">\n          <div\n            class=\"bb-text-bold break-word\"\n            data-role=\"payment-counterparty-recipient-id-label\"\n          >\n            <bb-payord-dynamic-label\n              name=\"recipientId\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Recipient ID\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.recipientId-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div data-role=\"payment-counterparty-recipient-id\">\n            {{ data?.recipientId }}\n          </div>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"\n          data?.postalAddress?.addressLine1 ||\n          data?.postalAddress?.addressLine2 ||\n          data?.postalAddress?.streetName\n        \"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@counterparty-details.beneficiary-address.title\"\n        >\n          Beneficiary Address\n        </div>\n        <div class=\"break-word\">\n          <bb-full-address [address]=\"data?.postalAddress\"></bb-full-address>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n", components: [{ type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2.ӨFullAddressComponent, selector: "bb-full-address", inputs: ["address"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditorDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-creditor-details',
                    templateUrl: './creditor-details.component.html',
                }]
        }], propDecorators: { data: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }] } });

class CounterpartyDetailsComponent {
}
/** @nocollapse */ CounterpartyDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CounterpartyDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CounterpartyDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CounterpartyDetailsComponent, selector: "bb-payment-counterparty-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0, template: "<div\n  class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  *ngIf=\"\n    data?.creditorBank?.bankName ||\n    data?.creditorBank?.bic ||\n    data?.creditorBank?.postalAddress?.addressLine1 ||\n    data?.creditorBank?.postalAddress?.addressLine2 ||\n    data?.creditorBank?.postalAddress?.streetName\n  \"\n>\n  <div class=\"card-body\">\n    <div\n      class=\"bb-text-bold bb-block bb-block--md\"\n      i18n=\"@@counterparty-details.bank-details.title\"\n    >\n      Beneficiary bank details\n    </div>\n\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"data?.creditorBank?.bankName || data?.creditorBank?.bic\"\n    >\n      <div class=\"row\">\n        <div class=\"col-6\" *ngIf=\"data?.creditorBank?.bic\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bic\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"SWIFT/BIC code\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.creditor-bank-bic-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            class=\"break-word\"\n            *ngIf=\"data?.creditorBank?.bic\"\n            data-role=\"counterparty-bic-code\"\n          >\n            {{ data?.creditorBank?.bic }}\n          </div>\n        </div>\n        <div class=\"col-6\" *ngIf=\"data?.creditorBank?.bankName\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bankName\"\n              [config]=\"paymentConfig\"\n              parentName=\"creditorBank\"\n              defaultLabel=\"Bank name\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.creditor-bank-name-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ data?.creditorBank?.bankName }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"\n        data?.creditorBank?.postalAddress?.addressLine1 ||\n        data?.creditorBank?.postalAddress?.addressLine2 ||\n        data?.creditorBank?.postalAddress?.streetName\n      \"\n    >\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@counterparty-details.bank-address.title\"\n      >\n        Bank address\n      </div>\n      <div class=\"break-word\">\n        <bb-full-address\n          [address]=\"data?.creditorBank?.postalAddress\"\n        ></bb-full-address>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  *ngIf=\"\n    data?.correspondentBank?.bankName ||\n    data?.correspondentBank?.bic ||\n    data?.correspondentBank?.bankBranchCode ||\n    data?.correspondentBank?.postalAddress?.addressLine1 ||\n    data?.correspondentBank?.postalAddress?.addressLine2 ||\n    data?.correspondentBank?.postalAddress?.streetName\n  \"\n>\n  <div class=\"card-body\">\n    <div\n      class=\"bb-text-bold bb-block bb-block--md\"\n      i18n=\"@@counterparty-details.correspondant-bank-details.title\"\n    >\n      Correspondent bank details\n    </div>\n\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"\n        data?.correspondentBank?.bankName ||\n        data?.correspondentBank?.bankBranchCode ||\n        data?.correspondentBank?.bic\n      \"\n    >\n      <div class=\"row\">\n        <div class=\"col-6\" *ngIf=\"data?.correspondentBank?.bankBranchCode\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bankBranchCode\"\n              [config]=\"paymentConfig\"\n              parentName=\"correspondentBank\"\n              defaultLabel=\"Routing transit number (ABA)\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.routing-transit-number-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"bb-text-support\">\n            {{ data?.correspondentBank?.bankBranchCode }}\n          </div>\n        </div>\n\n        <div class=\"col-6\" *ngIf=\"data?.correspondentBank?.bic\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bic\"\n              [config]=\"paymentConfig\"\n              parentName=\"correspondentBank\"\n              defaultLabel=\"SWIFT/BIC code\"\n              i18n-defaultLabel=\"@@counterparty-details.bic-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            class=\"break-word\"\n            *ngIf=\"data?.correspondentBank?.bic\"\n            data-role=\"correspondent-bic-code\"\n          >\n            {{ data?.correspondentBank?.bic }}\n          </div>\n        </div>\n\n        <div class=\"col-6\" *ngIf=\"data?.correspondentBank?.bankName\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bankName\"\n              [config]=\"paymentConfig\"\n              parentName=\"correspondentBank\"\n              defaultLabel=\"Bank name\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.correspondent.bank-name-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ data?.correspondentBank?.bankName }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"\n        data?.correspondentBank?.postalAddress?.addressLine1 ||\n        data?.correspondentBank?.postalAddress?.addressLine2 ||\n        data?.correspondentBank?.postalAddress?.streetName\n      \"\n    >\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@counterparty-details.correspondant.bank-address.title\"\n      >\n        Bank address\n      </div>\n      <div class=\"break-word\">\n        <bb-full-address\n          [address]=\"data?.correspondentBank?.postalAddress\"\n        ></bb-full-address>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  *ngIf=\"\n    data?.intermediaryBank?.bankName ||\n    data?.intermediaryBank?.bic ||\n    data?.intermediaryBank?.bankBranchCode ||\n    data?.intermediaryBank?.postalAddress?.addressLine1 ||\n    data?.intermediaryBank?.postalAddress?.addressLine2 ||\n    data?.intermediaryBank?.postalAddress?.streetName\n  \"\n>\n  <div class=\"card-body\">\n    <div\n      class=\"bb-text-bold bb-block bb-block--md\"\n      i18n=\"@@counterparty-details.intermediary-bank-details.title\"\n    >\n      Intermediary bank details\n    </div>\n\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"\n        data?.intermediaryBank?.bankName ||\n        data?.intermediaryBank?.bankBranchCode ||\n        data?.intermediaryBank?.bic\n      \"\n    >\n      <div class=\"row\">\n        <div class=\"col-6\" *ngIf=\"data?.intermediaryBank?.bankBranchCode\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bankBranchCode\"\n              [config]=\"paymentConfig\"\n              parentName=\"intermediaryBank\"\n              defaultLabel=\"Routing transit number (ABA)\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.routing-transit-number-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"bb-text-support\">\n            {{ data?.intermediaryBank?.bankBranchCode }}\n          </div>\n        </div>\n\n        <div class=\"col-6\" *ngIf=\"data?.intermediaryBank?.bic\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bic\"\n              [config]=\"paymentConfig\"\n              parentName=\"intermediaryBank\"\n              defaultLabel=\"SWIFT/BIC code\"\n              i18n-defaultLabel=\"@@counterparty-details.bic-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            class=\"break-word\"\n            *ngIf=\"data?.intermediaryBank?.bic\"\n            data-role=\"correspondent-bic-code\"\n          >\n            {{ data?.intermediaryBank?.bic }}\n          </div>\n        </div>\n\n        <div class=\"col-6\">\n          <div class=\"bb-text-bold\" *ngIf=\"data?.intermediaryBank?.bankName\">\n            <bb-payord-dynamic-label\n              name=\"bankName\"\n              [config]=\"paymentConfig\"\n              parentName=\"intermediaryBank\"\n              defaultLabel=\"Bank name\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.intermediary-bank-name-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ data?.intermediaryBank?.bankName }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"\n        data?.intermediaryBank?.postalAddress?.addressLine1 ||\n        data?.intermediaryBank?.postalAddress?.addressLine2 ||\n        data?.intermediaryBank?.postalAddress?.streetName\n      \"\n    >\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@counterparty-details.intermediary-bank-address.title\"\n      >\n        Bank address\n      </div>\n      <div class=\"break-word\">\n        <bb-full-address\n          [address]=\"data?.intermediaryBank?.postalAddress\"\n        ></bb-full-address>\n      </div>\n    </div>\n  </div>\n</div>\n\n<hr\n  *ngIf=\"\n    data?.creditorBank?.bankName ||\n    data?.creditorBank?.bic ||\n    data?.creditorBank?.postalAddress?.addressLine1 ||\n    data?.creditorBank?.postalAddress?.addressLine2 ||\n    data?.creditorBank?.postalAddress?.streetName ||\n    data?.correspondentBank?.bankName ||\n    data?.correspondentBank?.bic ||\n    data?.correspondentBank?.bankBranchCode ||\n    data?.correspondentBank?.postalAddress?.addressLine1 ||\n    data?.correspondentBank?.postalAddress?.addressLine2 ||\n    data?.correspondentBank?.postalAddress?.streetName ||\n    data?.intermediaryBank?.bankName ||\n    data?.intermediaryBank?.bic ||\n    data?.intermediaryBank?.bankBranchCode ||\n    data?.intermediaryBank?.postalAddress?.addressLine1 ||\n    data?.intermediaryBank?.postalAddress?.addressLine2 ||\n    data?.intermediaryBank?.postalAddress?.streetName\n  \"\n/>\n", components: [{ type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2.ӨFullAddressComponent, selector: "bb-full-address", inputs: ["address"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CounterpartyDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-counterparty-details',
                    templateUrl: './counterparty-details.component.html',
                }]
        }], propDecorators: { data: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }] } });

class ScheduleDetailsComponent {
}
/** @nocollapse */ ScheduleDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ScheduleDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleDetailsComponent, selector: "bb-payment-schedule-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0, template: "<div\n  class=\"bb-block bb-block--md bb-stack bb-stack--align-top\"\n  *ngIf=\"data?.frequency?.value || data?.frequency as freq\"\n>\n  <bb-icon-ui\n    name=\"cached\"\n    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n  ></bb-icon-ui>\n  <div class=\"bb-stack__item\">\n    <div class=\"bb-text-bold bb-block bb-block--xs\">\n      <bb-payord-dynamic-label\n        name=\"frequency\"\n        [config]=\"paymentConfig\"\n        parentName=\"schedule\"\n        defaultLabel=\"Frequency\"\n        i18n-defaultLabel=\"\n          @@omni-payment-review-schedule-details.frequency.label\"\n      ></bb-payord-dynamic-label>\n    </div>\n    <div\n      data-role=\"frequency-value\"\n      i18n=\"@@omni-payment-review-schedule-details.frequency\"\n    >\n      {freq, select, other {Once} DAILY {Daily} WEEKLY {Weekly} BIWEEKLY\n      {Bi-Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Annually}}\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"bb-block bb-block--md bb-stack bb-stack--align-top\"\n  *ngIf=\"data?.startDate\"\n>\n  <bb-icon-ui\n    name=\"today\"\n    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n  ></bb-icon-ui>\n  <div class=\"bb-stack__item\">\n    <div class=\"bb-text-bold bb-block bb-block--xs\">\n      <bb-payord-dynamic-label\n        name=\"startDate\"\n        [config]=\"paymentConfig\"\n        parentName=\"schedule\"\n        defaultLabel=\"Start date\"\n        i18n-defaultLabel=\"\n          @@omni-payment-review-schedule-details.start-date.label\"\n      ></bb-payord-dynamic-label>\n    </div>\n    <div data-role=\"execution-date\">\n      {{ data?.startDate | date: 'mediumDate' }}\n    </div>\n    <div class=\"row\">\n      <span class=\"bb-text-support bb-subtitle col-md-6\">{{\n        data?.scheduleInfo\n      }}</span>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"data?.frequency?.value || data?.frequency as freq\">\n  <ng-container *ngIf=\"freq !== 'ONCE'\">\n    <div\n      class=\"bb-block bb-block--md bb-stack bb-stack--align-top\"\n      *ngIf=\"data?.endType === 'after' && data?.repeat\"\n    >\n      <bb-icon-ui\n        name=\"today\"\n        class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      ></bb-icon-ui>\n      <div class=\"bb-stack__item\">\n        <div\n          class=\"bb-text-bold bb-block bb-block--xs\"\n          data-role=\"end-after-label\"\n        >\n          <bb-payord-dynamic-label\n            name=\"repeat\"\n            [config]=\"paymentConfig\"\n            parentName=\"schedule\"\n            defaultLabel=\"End after\"\n            i18n-defaultLabel=\"\n              @@omni-payment-review-schedule-details.end-after.label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div data-role=\"end-after\">\n          {{ data?.repeat }}\n          <span i18n=\"@@omni-payment-review-schedule-details.occurances.label\"\n            >occurrences</span\n          >\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"bb-block bb-block--md bb-stack bb-stack--align-top\"\n      *ngIf=\"data?.endType === 'on' && data?.endDate\"\n    >\n      <bb-icon-ui\n        name=\"today\"\n        class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      ></bb-icon-ui>\n      <div class=\"bb-stack__item\">\n        <div\n          class=\"bb-text-bold bb-block bb-block--xs\"\n          data-role=\"end-date-label\"\n        >\n          <bb-payord-dynamic-label\n            name=\"endDate\"\n            [config]=\"paymentConfig\"\n            parentName=\"schedule\"\n            defaultLabel=\"End date\"\n            i18n-defaultLabel=\"\n              @@omni-payment-review-schedule-details.end-date.label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div data-role=\"end-date\">\n          {{ data?.endDate | date: 'mediumDate' }}\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i14.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-schedule-details',
                    templateUrl: './schedule-details.component.html',
                }]
        }], propDecorators: { data: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }] } });

class AdaptedReviewComponent {
    constructor(assetsService, identityService) {
        this.assetsService = assetsService;
        this.identityService = identityService;
        /**
         * Asset resolver for quick-transfer widget
         */
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-payord-omni-payment-widget-ang',
            getURIFromAssetID: (assetId) => `${assetId}`,
        });
        /**
         * Stream of resolved success image path
         */
        this.successImg = this.resolveAsset('succeed.svg');
        /**
         * Stream of resolved success image path
         */
        this.successImgNoMotion = this.resolveAsset('no-motion.svg');
        /**
         * unique time to reload animated svg image everytime
         */
        this.timestamp = new Date().getTime();
    }
    ngOnInit() {
        var _a, _b;
        this.isLoading$ = merge((_a = this.methods) === null || _a === void 0 ? void 0 : _a.isSubmitting$(), (_b = this.identityService) === null || _b === void 0 ? void 0 : _b.requestSubject.pipe(mapTo(false)));
    }
    /*
     * Text for alert error content for server errors
     */
    get errorText() {
        var _a, _b, _c;
        const amount = (_b = (_a = this.breachError) === null || _a === void 0 ? void 0 : _a.reasonText) === null || _b === void 0 ? void 0 : _b.split('|')[1];
        if (this.isUserDeclined) {
            return $localize `:@@initiate-payment.adapted-review.user-decline-error-message:`;
        }
        switch ((_c = this.breachError) === null || _c === void 0 ? void 0 : _c.reasonCode) {
            case P2PLimitReasonCodes.DAILY:
                return $localize `:@@initiate-payment.adapted-review.P2P-daily-limit-error-message:The amount exceeds the daily limit of ${amount}`;
            case P2PLimitReasonCodes.MONTHLY:
                return $localize `:@@initiate-payment.adapted-review.P2P-monthly-limit-error-message:The amount exceeds the monthly limit of ${amount}`;
            case P2PLimitReasonCodes.MAX_TRANSFER:
                return $localize `:@@initiate-payment.adapted-review.P2P-max-limit-error-message:This amount can't exceed ${amount}`;
            case P2PLimitReasonCodes.MIN_TRANSFER:
                return $localize `:@@initiate-payment.adapted-review.P2P-max-limit-daily-error-message:This amount can't be lower than ${amount}`;
            default:
                return $localize `:@@initiate-payment.adapted-review.default-error-message:Failed to submit payment. Please try again later.`;
        }
    }
    /*
     * Title for alert error content for server errors
     */
    get errorTitle() {
        if (this.breachError) {
            return $localize `:@@initiate-payment.adapted-review.P2P-limit-error-title:Payment Failed Due to an Exceeding Limit`;
        }
        else if (this.isUserDeclined) {
            return $localize `:@@initiate-payment.adapted-review.user-declined-error-title:Your Transfer Has Been Cancelled.`;
        }
        else {
            return $localize `:@@initiate-payment.adapted-review.generic-error-title:`;
        }
    }
    /*
     * Boolean flag to display whether transfer date is for future
     */
    get isScheduledTransfer() {
        var _a;
        const today = datePart();
        const transferDate = datePart((_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule.startDate);
        return new Date(transferDate) > new Date(today);
    }
    get isUserDeclined() {
        return this.status === ProgressStatus.USER_DECLINED;
    }
}
/** @nocollapse */ AdaptedReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdaptedReviewComponent, deps: [{ token: i1$1.AssetsService }, { token: i2$2.TransactionSigningService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AdaptedReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AdaptedReviewComponent, selector: "bb-adapted-review-container", inputs: { payment: "payment", status: "status", paymentConfig: "paymentConfig", methods: "methods", breachError: "breachError" }, ngImport: i0, template: "<ng-container *ngTemplateOutlet=\"status === 'SUCCESS' ? successScreen : reviewTemplate\"> </ng-container>\n\n<ng-template #reviewTemplate>\n  <div\n    *ngIf=\"isLoading$ | async\"\n    data-role=\"adapted-review-loader\"\n    class=\"bb-loading-indicator-wrapper bb-loading-indicator-wrapper--overlay\"\n  >\n    <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </div>\n\n  <fieldset class=\"bb-fieldset omni-payment-adapted-review\">\n    <legend class=\"bb-label bb-block bb-block--lg\" i18n=\"@@omni-payment-wrapper-review-page-title.label\">\n      Review your transfer\n    </legend>\n    <ng-container *ngIf=\"payment\">\n      <bb-alert-ui\n        *ngIf=\"status === 'ERROR' || status === 'USER_DECLINED' || breachError\"\n        [title]=\"errorTitle\"\n        (close)=\"(false)\"\n        modifier=\"error\"\n      >\n        <span data-role=\"failure-message\">{{ errorText }}</span>\n      </bb-alert-ui>\n\n      <div *ngIf=\"payment?.isIntraLegalEntity\" class=\"bb-block bb-block--sm bb-inline-stack bb-text-support\">\n        <div class=\"bb-inline-stack__item\">\n          <bb-icon-ui name=\"domain\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"bb-inline-stack__item bb-text-bold\"\n          i18n=\"@@omni-payment-wrapper-review-payment-intra-company-payment.label\"\n        >\n          Intracompany payment\n        </div>\n      </div>\n\n      <div class=\"bb-item-log bb-block bb-block--lg\">\n        <div class=\"bb-item-log__record item-log__record--has-bullet\">\n          <div class=\"bb-stack bb-stack--align-top\">\n            <div\n              class=\"bb-item-log-record__bullet-icon bb-item-log-record__bullet-icon--filled bb-stack__item bb-stack__item--spacing-md\"\n            ></div>\n            <div class=\"bb-item-log-record__details\">\n              <bb-payment-initiator-details [data]=\"payment?.initiator\" [paymentConfig]=\"paymentConfig\">\n              </bb-payment-initiator-details>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-item-log__record item-log__record--has-bullet\">\n          <div class=\"bb-stack bb-stack--align-top\">\n            <div class=\"bb-item-log-record__bullet-icon bb-stack__item bb-stack__item--spacing-md\"></div>\n            <div class=\"bb-item-log-record__details\">\n              <bb-creditor-account [data]=\"payment?.counterparty\" [paymentConfig]=\"paymentConfig\">\n              </bb-creditor-account>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-block bb-block--lg\">\n        <bb-payment-remittance-details\n          [data]=\"payment?.remittanceInfo\"\n          [transferFee]=\"payment?.transferFee\"\n          [chargeBearer]=\"payment?.chargeBearer\"\n          [forexDetails]=\"methods?.getForexDetails(payment)\"\n          [paymentConfig]=\"paymentConfig\"\n        ></bb-payment-remittance-details>\n      </div>\n\n      <bb-payment-creditor-details\n        [data]=\"payment?.counterparty\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-creditor-details>\n\n      <bb-payment-counterparty-details\n        [data]=\"payment?.counterparty\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-counterparty-details>\n\n      <bb-payment-schedule-details\n        [data]=\"payment?.schedule\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-schedule-details>\n\n      <div\n        *ngIf=\"\n          payment?.remittanceInfo?.description ||\n          payment?.remittanceInfo?.paymentReference ||\n          payment?.counterparty.messageToBank ||\n          payment?.counterparty.remittanceInformation\n        \"\n      >\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.paymentReference\">\n          <div class=\"bb-text-bold\" data-role=\"payment-reference-label\">\n            <bb-payord-dynamic-label\n              name=\"paymentReference\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Payment reference\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-remittance-info-payment-reference.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-reference\">\n            {{ payment?.remittanceInfo?.paymentReference }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md bb-inline-stack bb-stack--align-top\">\n          <bb-icon-ui name=\"subject\" class=\"bb-stack__item bb-stack__item--spacing-sm\"></bb-icon-ui>\n          <div class=\"bb-stack__item\">\n            <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n              <bb-payord-dynamic-label\n                name=\"description\"\n                parentName=\"remittanceInfo\"\n                defaultLabel=\"Memo\"\n                i18n-defaultLabel=\"@@omni-payment-wrapper-review-remittance-info-description.label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"payment-description\">\n              {{ payment?.remittanceInfo?.description }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty.remittanceInformation\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-counterparty-message-to-beneficiary.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ payment?.counterparty?.remittanceInformation }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.messageToBank || payment?.counterparty?.messageToBank\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary bank\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-message-to-bank.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ payment?.counterparty?.messageToBank || payment?.messageToBank }}\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </fieldset>\n\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      class=\"bb-button-bar__button\"\n      data-role=\"submit-button\"\n      (click)=\"methods?.submit()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      *ngIf=\"!methods?.isApprovalEnabled()\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-submit-payment.label\"\n    >\n      Confirm and Send Money\n    </button>\n    <div class=\"btn-group bb-button-bar__button\" data-role=\"button-group\" *ngIf=\"methods?.isApprovalEnabled()\">\n      <bb-load-button-ui\n        color=\"primary\"\n        [isLoading]=\"methods?.isSubmitting$() | async\"\n        (click)=\"methods?.submit()\"\n        i18n=\"@@omni-payment-wrapper-review-btn-group-submit-payment.label\"\n      >\n        Submit\n      </bb-load-button-ui>\n\n      <bb-dropdown-menu-ui\n        class=\"btn-group\"\n        btnColor=\"primary\"\n        icon=\"caret-down\"\n        data-role=\"dropdown-menu\"\n        container=\"body\"\n        position=\"top-right\"\n      >\n        <ng-template bbDropdownMenuItem>\n          <button\n            role=\"menuitem\"\n            type=\"button\"\n            class=\"dropdown-item\"\n            data-role=\"bus-submit-and-approve-button\"\n            [disabled]=\"methods?.isSubmitting$() | async\"\n            (bbKeyboardClick)=\"methods?.submit(true)\"\n            i18n=\"@@omni-payment-wrapper-review-btn-group-submit-and-approve-payment.label\"\n          >\n            Submit and Approve\n          </button>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n    <button\n      class=\"bb-button-bar__button\"\n      bbButton\n      color=\"secondary\"\n      data-role=\"edit-button\"\n      (click)=\"methods?.edit()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-edit-payment.label\"\n    >\n      Edit\n    </button>\n    <button\n      bbButton\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n      data-role=\"cancel-button\"\n      (click)=\"methods?.toggleDiscardDialog()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-discard-payment.label\"\n    >\n      Cancel\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #successScreen>\n  <div class=\"bb-text-align-center bb-block--xl\">\n    <picture>\n      <source srcset=\"{{ successImgNoMotion | async }}\" media=\"(prefers-reduced-motion: reduce)\" />\n      <img\n        srcset=\"{{ (successImg | async) + '?' + timestamp }}\"\n        alt=\"Success!\"\n        i18n-alt=\"Success!|Text for transfer succeeded@@omni-payment-wrapper.complete.transfer-succeeded\"\n        data-role=\"transfer-success-anim\"\n        class=\"img-fluid\"\n      />\n    </picture>\n    <div></div>\n    <bb-header-ui\n      headingClasses=\"bb-text-semi-bold\"\n      headingType=\"h2\"\n      heading=\"Success!\"\n      i18n-heading=\"Success!|Text for success@@omni-payment-wrapper.complete.success\"\n    ></bb-header-ui>\n    <div data-role=\"adapted-success-message\" *ngIf=\"!payment?.paymentOrderId; else editPaymentMessageTemplate\">\n      <span\n        *ngIf=\"!isScheduledTransfer\"\n        class=\"bb-text-support\"\n        i18n=\"Success Transfer|Text for success transfer@@omni-payment-wrapper.complete.success-message\"\n      >\n        You\u2019ve just transferred\n        {{ payment?.remittanceInfo?.amountGroup.currency }}\n        {{ payment?.remittanceInfo?.amountGroup.amount }} to {{ payment?.counterparty.name }}'s.\n      </span>\n      <span\n        *ngIf=\"isScheduledTransfer\"\n        class=\"bb-text-support\"\n        i18n=\"\n          Success Scheduled Transfer|Text for success scheduled\n          transfer@@omni-payment-wrapper.scheduled-transfer.complete.success-message\"\n      >\n        You\u2019ve just scheduled transfer to {{ payment?.counterparty.name }}'s.\n      </span>\n    </div>\n    <ng-template #editPaymentMessageTemplate>\n      <span\n        class=\"bb-text-support\"\n        i18n=\"Success edit transfer|Text for edit transfer success@@omni-payment-wrapper.complete.success-edit-message\"\n        data-role=\"adapted-success-edit-message\"\n      >\n        You\u2019ve just edited the scheduled transfer to\n        {{ payment?.counterparty.name }}'s.\n      </span>\n    </ng-template>\n  </div>\n  <div class=\"bb-text-align-center bb-block bb-block--xl\" *ngIf=\"payment?.counterparty?.saveNewContact\">\n    <div class=\"bb-payment-account-details-card bb-inline-stack\">\n      <div class=\"bb-inline-stack\">\n        <ng-container *ngIf=\"!!(methods?.getSaveContactResponse$ | async)?.id; else saveContactFail\">\n          <bb-icon-ui name=\"success\" color=\"success\" class=\"bb-stack__item bb-stack__item--spacing-sm\"></bb-icon-ui>\n          <span\n            i18n=\"\n              Success Save Contact|Text for success save contact@@omni-payment-wrapper.complete.success-save-contact\"\n            >{{ payment?.counterparty?.name }} is saved to your contacts</span\n          >\n        </ng-container>\n        <ng-template #saveContactFail>\n          <bb-icon-ui\n            name=\"error-outline\"\n            color=\"danger\"\n            class=\"bb-stack__item bb-stack__item--spacing-sm\"\n          ></bb-icon-ui>\n          <span i18n=\"Fail Save Contact|Text for fail save contact@@omni-payment-wrapper.complete.fail-save-contact\"\n            >Can\u2019t save {{ payment?.counterparty?.name }} to your contacts. Please try again later.</span\n          >\n        </ng-template>\n      </div>\n    </div>\n  </div>\n  <div class=\"bb-text-align-center\">\n    <div class=\"bb-block bb-block--md\">\n      <button\n        *ngIf=\"!payment?.paymentOrderId\"\n        bbButton\n        color=\"primary\"\n        (click)=\"methods?.reset()\"\n        i18n=\"Make another transfer button|Make another transfer@@omni-payment-wrapper.complete.button.transfer-done\"\n      >\n        Make another transfer\n      </button>\n      <button\n        *ngIf=\"payment?.paymentOrderId\"\n        bbButton\n        color=\"primary\"\n        (click)=\"methods?.navigateToAfterSuccessPage()\"\n        i18n=\"\n          View scheduled transfers button|View scheduled\n          transfers@@omni-payment-wrapper.complete.button.scheduled-transfer-done\"\n      >\n        View scheduled transfers\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<bb-modal-ui\n  [isOpen]=\"methods?.showDiscardDialog()\"\n  (cancel)=\"methods?.toggleDiscardDialog()\"\n  (confirm)=\"methods?.reset()\"\n>\n  <bb-modal-header-ui\n    title=\"Discard entered data?\"\n    i18n-title=\"omni-payment-adapted-review-discard-modal-title\"\n  ></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-container i18n=\"@@omni-payment-adapted-review-discard-modal-content\">\n        Are you sure to exit and discard all changes? Entered data will be lost.\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"methods?.reset()\"\n          data-role=\"discard-action-btn\"\n          i18n=\"@@omni-payment-adapted-review-discard-modal-discard-btn\"\n        >\n          Discard\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"methods?.toggleDiscardDialog()\"\n          data-role=\"cancel-action-btn\"\n          i18n=\"@@omni-payment-adapted-review-discard-modal-cancel-btn\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: InitiatorDetailsComponent, selector: "bb-payment-initiator-details", inputs: ["data", "paymentConfig"] }, { type: CreditorAccountComponent, selector: "bb-creditor-account", inputs: ["data", "paymentConfig"] }, { type: RemittanceDetailsComponent, selector: "bb-payment-remittance-details", inputs: ["data", "paymentConfig", "forexDetails", "transferFee", "chargeBearer"] }, { type: CreditorDetailsComponent, selector: "bb-payment-creditor-details", inputs: ["data", "paymentConfig"] }, { type: CounterpartyDetailsComponent, selector: "bb-payment-counterparty-details", inputs: ["data", "paymentConfig"] }, { type: ScheduleDetailsComponent, selector: "bb-payment-schedule-details", inputs: ["data", "paymentConfig"] }, { type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i13.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i2$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i13$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i13$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i13$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i13$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i14.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i18.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i19.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i13$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i13$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i14.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdaptedReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-adapted-review-container',
                    templateUrl: './adapted-review.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.AssetsService }, { type: i2$2.TransactionSigningService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { payment: [{
                type: Input
            }], status: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }], methods: [{
                type: Input
            }], breachError: [{
                type: Input
            }] } });

class ReviewPaymentContainerComponent {
    constructor(formBuilder, stateService, eventBus, navigationService, createPaymentService, modalService, paymentOrderHttpService, createPaymentSetup, transactionSigningHelper, paymentErrors) {
        this.formBuilder = formBuilder;
        this.stateService = stateService;
        this.eventBus = eventBus;
        this.navigationService = navigationService;
        this.createPaymentService = createPaymentService;
        this.modalService = modalService;
        this.paymentOrderHttpService = paymentOrderHttpService;
        this.createPaymentSetup = createPaymentSetup;
        this.transactionSigningHelper = transactionSigningHelper;
        this.paymentErrors = paymentErrors;
        this.showConfirmation = false;
        this.gc$ = new Subject();
        this.saveContactResponse$ = new BehaviorSubject(null);
        this.paymentOrderId = '';
        this.approvalPending = false;
        this.enablePaymentTemplate = true;
        this.saveTemplate = false;
        this.canApprove = false;
        this.showBreachDetails = false;
        this.paymentMode = PaymentMode;
        this.isErrorTitleDisplayed = true;
        this.reviewScreens = ReviewScreens;
        this.widgetOptions = {};
        this.errors = [];
        this.submitting$ = new BehaviorSubject(false);
        this.savingTemplate$ = new BehaviorSubject(false);
        this.paymentStatus$ = new BehaviorSubject(undefined);
        this.selectedPaymentConfig$ = this.createPaymentService.selectedPaymentConfig$;
        this.paymentTemplateModalState = new BehaviorSubject(undefined);
        this.methods = {
            edit: this.onEdit.bind(this),
            submit: this.submitPayment.bind(this),
            reset: this.resetPayment.bind(this),
            discard: this.discardPayment.bind(this),
            toggleDiscardDialog: this.toggleConfirmationDialog.bind(this),
            showDiscardDialog: this.showDiscardDialog.bind(this),
            isApprovalEnabled: this.isApprovalEnabled.bind(this),
            isPaymentTemplateEnabled: this.isPaymentTemplateEnabled.bind(this),
            isNewPaymentEnabled: this.isNewPaymentEnabled.bind(this),
            isSavingTemplate$: this.isSavingTemplate$.bind(this),
            getPaymentMessage: this.getPaymentMessage.bind(this),
            getPurposeDescription: this.getPurposeDescription.bind(this),
            isSubmitting$: this.isSubmitting$.bind(this),
            getLabelText: getLabelFromPaymentConfig,
            getForexDetails: this.getForexDetails.bind(this),
            showBreachModal: this.showBreachModal.bind(this),
            isTemplateSaved: this.isTemplateSaved.bind(this),
            openTemplateModal: this.openTemplateModal.bind(this),
            doneEditing: this.doneEditing.bind(this),
            navigateToAfterSuccessPage: this.navigateToAfterSuccessPage.bind(this),
            getPaymentResponse: this.getPaymentResponse.bind(this),
            getSaveContactResponse$: this.saveContactResponse$,
            getPaymentStatusType: this.getPaymentStatusType.bind(this),
        };
        this.createTemplatePermission$ = this.paymentOrderHttpService.createPermission$.pipe(map(() => true), catchError((error) => of(false)));
    }
    onEdit() {
        this.stateService.setPaymentState(PaymentState.EDIT);
        this.navigationService.form();
    }
    ngOnInit() {
        this.stateService.setPaymentState(PaymentState.REVIEW);
        this.canApprove = this.stateService.canApprove;
        this.createPaymentSetup.reviewTemplate$
            .pipe(takeUntil(this.gc$), filter((template) => !!template))
            .subscribe((template) => (this.reviewTemplate = template));
        this.createPaymentSetup.options$.pipe(takeUntil(this.gc$)).subscribe((options) => {
            this.isErrorTitleDisplayed = Boolean(options.isErrorTitleDisplayed);
            this.widgetOptions = options;
            this.header = this.createPaymentSetup.getHeader(InitiatePaymentHeaderStates.REVIEW);
        });
        this.paymentItem$ = this.stateService.form$.pipe(takeUntil(this.gc$), tap((form) => (this.paymentForm = form)), map((form) => (form === null || form === void 0 ? void 0 : form.getRawValue()) || {}));
        this.paymentItem$.pipe(takeUntil(this.gc$)).subscribe((data) => {
            if (data && isObjectTruthy(data)) {
                this.paymentItem = data;
            }
            else {
                this.stateService.setPaymentState(PaymentState.INITIAL);
                this.navigationService.form();
            }
        });
        this.paymentTemplateForm = this.buildPaymentTemplateForm();
    }
    isSavingTemplate$() {
        return this.savingTemplate$;
    }
    onSubmit(approved = false) {
        this.submitting$.next(true);
        if (this.paymentItem.counterparty.saveNewContact) {
            this.saveNewContact();
        }
        this.postPaymentOrder(approved);
    }
    saveNewContact() {
        this.paymentOrderHttpService
            .saveNewContact(Object.assign(Object.assign({}, contactItemToService(this.paymentItem.counterparty)), { accessContextScope: this.widgetOptions.accessContextScope }))
            .pipe(takeUntil(this.gc$))
            .subscribe((response) => {
            const { id, status } = response || {};
            this.saveContactResponse$.next(response);
            const contactSaved = !!id;
            this.paymentOrderHttpService.showNotification(contactSaved, {
                header: contactSaved
                    ? status === ActiveContactStatus.PENDINGAPPROVAL
                        ? reviewI18n.newContactSubmitSuccessPendingApproval
                        : reviewI18n.newContactSubmitSuccess
                    : reviewI18n.newContactSubmitFailure,
            });
        });
    }
    handlePaymentError(error) {
        var _a, _b, _c;
        this.genericError = (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.message;
        this.errors = (_b = error === null || error === void 0 ? void 0 : error.error) === null || _b === void 0 ? void 0 : _b.errors;
        if (((_c = this.errors) === null || _c === void 0 ? void 0 : _c.length) || this.genericError) {
            const errorObject = {
                errorResponse: error,
                genericMessage: this.genericError,
                errors: this.errors,
                paymentErrors: this.paymentErrors,
                notificationHeader: reviewI18n.submitPaymentFailure,
            };
            this.paymentOrderHttpService.manageErrorResponse(errorObject);
        }
        else {
            this.paymentOrderHttpService.showNotification(false, {
                header: reviewI18n.submitPaymentFailureUnknownErrorHeader,
                message: reviewI18n.submitPaymentFailureUnknownError,
            });
        }
        const message = error === null || error === void 0 ? void 0 : error.statusText;
        let status;
        switch (message) {
            case 'rejected_by_user':
                status = ProgressStatus$1.USER_DECLINED;
                break;
            default:
                status = 'ERROR';
        }
        this.paymentStatus$.next(status);
        this.submitting$.next(false);
    }
    putOrPostPaymentOrder(post) {
        var _a;
        const isCopyPayment = ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === PaymentMode.COPY_PAYMENT;
        const paymentOrderId = this.paymentItem.paymentOrderId;
        return paymentOrderId && !isCopyPayment
            ? this.paymentOrderHttpService.putPaymentOrder(Object.assign(Object.assign({}, post), { id: paymentOrderId }), paymentOrderId)
            : this.paymentOrderHttpService.postPaymentOrder(post);
    }
    postPaymentOrder(approved) {
        const shouldApprove = approved ? { approved } : null;
        this.putOrPostPaymentOrder(toPostRequest(Object.assign(Object.assign({}, this.paymentItem), shouldApprove)))
            .pipe(takeUntil(this.gc$), catchError((error) => {
            var _a;
            (_a = this.alertContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollIntoView(false);
            if (this.hasLimitBreach(error)) {
                this.paymentStatus$.next('LIMIT_BREACH');
                this.breachError = error.error || error;
                this.submitting$.next(false);
            }
            else {
                this.handlePaymentError(error);
            }
            return EMPTY;
        }))
            .subscribe((response) => {
            var _a;
            if ((_a = this.transactionSigningHelper) === null || _a === void 0 ? void 0 : _a.isTransactionSigningResponse(response)) {
                this.handleTransactionSigning(response);
            }
            else {
                this.handlePaymentSubmit(response);
            }
        });
    }
    handlePaymentSubmit(response) {
        var _a;
        const { status: _paymentStatus } = response;
        const isApprovalRejected = _paymentStatus === ApprovalStatus.REJECTED;
        const status = !!response.id && !isApprovalRejected ? 'SUCCESS' : _paymentStatus || 'ERROR';
        this.paymentOrderId = response === null || response === void 0 ? void 0 : response.id;
        this.approvalPending = _paymentStatus === Status.ENTERED || _paymentStatus === ProgressStatus$1.PENDING_APPROVAL;
        if (!!response.id && !isApprovalRejected) {
            const isEditPayment = ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === PaymentMode.EDIT_PAYMENT;
            const { submitSuccess, submitSuccessPendingApproval, editSubmitSuccess } = this.widgetOptions.isDebitPayment
                ? reviewI18n.debitPayment
                : reviewI18n.defaultPayment;
            const header = isEditPayment
                ? editSubmitSuccess
                : this.approvalPending
                    ? submitSuccessPendingApproval
                    : submitSuccess;
            this.paymentOrderHttpService.showNotification(true, { header });
            this.eventBus.publish(this.widgetOptions.successEventName || defaultPaymentSuccessEventName, true);
            this.header = this.createPaymentSetup.getHeader(InitiatePaymentHeaderStates.SUBMITTED);
        }
        this.paymentResponse = response;
        this.paymentStatus$.next(status);
        this.submitting$.next(false);
    }
    handleTransactionSigning(response) {
        if (!this.transactionSigningHelper) {
            return;
        }
        const paymentOrderId = response['payment-order-id'];
        if (paymentOrderId) {
            this.transactionSigningHelper.getTransactionInfo({
                data: response,
                asyncPollingOptions: {
                    pollInterval: this.widgetOptions.pollInterval,
                    maxRetries: 3,
                    pollUntilFn: this.isPaymentConfirmed,
                    complete$: this.gc$,
                },
                fetchFn: this.getPaymentProgressStatus.bind(this),
                onSuccess: this.onTransactionSigningSuccess.bind(this, paymentOrderId),
                onRejected: this.onTransactionSigningReject.bind(this, paymentOrderId),
                onDeclined: this.onTransactionSigningDecline.bind(this),
                onError: this.onTransactionSigningError.bind(this),
            });
        }
    }
    onTransactionSigningSuccess(paymentOrderId) {
        this.paymentOrderHttpService
            .getPayment(paymentOrderId)
            .pipe(takeUntil(this.gc$))
            .subscribe(this.handlePaymentSubmit.bind(this));
    }
    onTransactionSigningReject(paymentOrderId, _) {
        this.handleRejectedPayment(paymentOrderId);
    }
    onTransactionSigningDecline({ status }) {
        const header = this.widgetOptions.isDebitPayment ? reviewI18n.submitDebitFailure : reviewI18n.submitPaymentFailure;
        this.paymentStatus$.next(status);
        this.submitting$.next(false);
        this.paymentOrderHttpService.showNotification(false, { header });
    }
    onTransactionSigningError({ status }) {
        const header = this.widgetOptions.isDebitPayment ? reviewI18n.submitDebitFailure : reviewI18n.submitPaymentFailure;
        const errorMessage = status === 'COED' ? reviewI18n.submitPaymentApprovalFailureCOED : { header };
        this.submitting$.next(false);
        this.paymentStatus$.next(status === 'COED' ? 'COED' : 'ERROR');
        this.paymentOrderHttpService.showNotification(false, Object.assign({}, errorMessage));
    }
    handleRejectedPayment(paymentOrderId) {
        this.paymentOrderHttpService
            .getPayment(paymentOrderId)
            .pipe(takeUntil(this.gc$))
            .subscribe((response) => {
            if (response.reasonCode === 'LTBR') {
                this.paymentStatus$.next('LIMIT_BREACH');
                this.breachError = {
                    message: '',
                    breachReport: response.breachReports,
                };
            }
            else {
                const header = this.widgetOptions.isDebitPayment
                    ? reviewI18n.submitDebitFailure
                    : reviewI18n.submitPaymentFailure;
                this.paymentOrderHttpService.showNotification(false, { header });
                this.paymentStatus$.next('ERROR');
            }
            this.submitting$.next(false);
        });
    }
    getPaymentProgressStatus(data) {
        return this.paymentOrderHttpService.getPaymentProgressStatus((data === null || data === void 0 ? void 0 : data['payment-order-id']) || '').pipe(map((res) => {
            if ((res === null || res === void 0 ? void 0 : res.progressStatus) === PaymentOrderProgressStatusGet.ProgressStatusEnum.REJECTED &&
                res.reasonCode === 'COED') {
                res = Object.assign(Object.assign({}, res), { progressStatus: res.reasonCode });
            }
            return res;
        }), pluck('progressStatus'));
    }
    isPaymentConfirmed(status) {
        return !!status && status !== ProgressStatus$1.CONFIRMATION_PENDING && status !== ProgressStatus$1.SENDING;
    }
    onHooksDone(approved, success = true) {
        if (success) {
            this.onSubmit(approved);
        }
        else {
            this.submitting$.next(false);
        }
    }
    hasLimitBreach(response) {
        var _a;
        const isP2PLimitBreach = Object.values(P2PLimitReasonCodes).includes(response.reasonCode);
        return !!(response === null || response === void 0 ? void 0 : response.breachReport) || !!((_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.breachReport) || isP2PLimitBreach;
    }
    showBreachModal() {
        this.showBreachDetails = true;
    }
    getPaymentResponse() {
        return this.paymentResponse;
    }
    hideBreachModal() {
        this.showBreachDetails = false;
    }
    isTemplateSaved() {
        return this.saveTemplate;
    }
    buildPaymentTemplateForm() {
        return this.formBuilder.group({
            templateName: ['', [Validators.required, noWhitespaceValidator]],
        });
    }
    openTemplateModal() {
        this.paymentTemplateModalState.next(ModalState.Preview);
    }
    closeTemplateModal() {
        this.paymentTemplateModalState.next(ModalState.Hidden);
        this.paymentTemplateForm.reset();
    }
    submitPaymentTemplate(templateName = '') {
        if (this.paymentOrderId) {
            const paymentOrderId = this.paymentOrderId;
            const name = templateName || this.paymentTemplateForm.controls['templateName'].value;
            const templateObject = {
                paymentOrderId,
                name,
            };
            if (this.paymentTemplateForm.invalid) {
                return;
            }
            this.savingTemplate$.next(true);
            this.paymentOrderHttpService
                .postPaymentTemplate(templateObject)
                .pipe(takeUntil(this.gc$))
                .subscribe(() => {
                this.saveTemplate = true;
                this.savingTemplate$.next(false);
                this.paymentOrderHttpService.showNotification(true, {
                    header: commonI18n.templateSaveSuccess(name),
                    headerContext: { name },
                });
                this.paymentTemplateForm.reset();
                this.paymentTemplateModalState.next(ModalState.Hidden);
                this.eventBus.publish((this.widgetOptions.successEventName || defaultPaymentSuccessEventName), true);
            }, () => {
                this.paymentOrderHttpService.showNotification(false, {
                    header: commonI18n.templateSaveFailed,
                });
                this.savingTemplate$.next(false);
            });
        }
    }
    submitPayment(approved = false) {
        const hasHooks = this.createPaymentSetup.hooks && this.createPaymentSetup.hooks[PaymentHooks.onSubmit];
        this.submitting$.next(true);
        if (hasHooks) {
            triggerPaymentHook(this.createPaymentSetup.hooks, PaymentHooks.onSubmit, this.onHooksDone.bind(this, approved), this.paymentForm);
        }
        else {
            this.onSubmit(approved);
        }
    }
    getForexDetails(payment) {
        return getForexDetailsFromPayment(payment);
    }
    isApprovalEnabled() {
        return !!this.widgetOptions.enableApprovals && this.canApprove;
    }
    isPaymentTemplateEnabled() {
        return !!this.widgetOptions.enableSavePaymentAsTemplate && this.enablePaymentTemplate;
    }
    isNewPaymentEnabled() {
        return this.widgetOptions.enableNewPaymentButton !== false;
    }
    discardPayment() {
        var _a, _b;
        if ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.isModalView) {
            (_b = this.modalService) === null || _b === void 0 ? void 0 : _b.closeModal();
        }
        else {
            this.resetPayment();
        }
    }
    resetPayment() {
        this.showConfirmation = false;
        this.widgetOptions.paymentMode = PaymentMode.CREATE_PAYMENT;
        this.stateService.resetForm();
        this.stateService.setPaymentState(PaymentState.INITIAL);
        this.navigationService.form();
    }
    toggleConfirmationDialog() {
        this.showConfirmation = !this.showConfirmation;
    }
    showDiscardDialog() {
        return this.showConfirmation;
    }
    isApprovalPending() {
        return this.approvalPending;
    }
    isSubmitting$() {
        return this.submitting$;
    }
    getPaymentStatusType() {
        var _a;
        return ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === PaymentMode.EDIT_PAYMENT
            ? PaymentSubmitStatuses.PENDING_EDITED
            : this.isApprovalPending()
                ? PaymentSubmitStatuses.PENDING
                : PaymentSubmitStatuses.SUCCESS;
    }
    getPaymentMessage() {
        return this.paymentMessage;
    }
    getPurposeDescription(purpose) {
        var _a, _b;
        const purposes = (_a = this.paymentItem.inputFormFromSettings) === null || _a === void 0 ? void 0 : _a.purposesOfPayment;
        return (purposes === null || purposes === void 0 ? void 0 : purposes.length) ? (_b = purposes.find((item) => item.code === purpose)) === null || _b === void 0 ? void 0 : _b.description : '';
    }
    doneEditing() {
        var _a;
        (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
    }
    navigateToAfterSuccessPage() {
        this.navigationService.afterSuccess();
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
}
/** @nocollapse */ ReviewPaymentContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewPaymentContainerComponent, deps: [{ token: i1$2.FormBuilder }, { token: i2.StateService }, { token: PUBSUB }, { token: i2.NavigationService }, { token: CreatePaymentService }, { token: i2.RoutableModalService, optional: true }, { token: i2.PaymentOrderHttpService }, { token: CreatePaymentConfigSetupService }, { token: i2$2.TransactionSigningHelperService, optional: true }, { token: BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ReviewPaymentContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ReviewPaymentContainerComponent, selector: "bb-review-payment", viewQueries: [{ propertyName: "alertContainer", first: true, predicate: ["alertContainer"], descendants: true }], ngImport: i0, template: "<div class=\"position-relative\">\n  <ng-container\n    *ngTemplateOutlet=\"\n      reviewTemplate || (widgetOptions.reviewScreenType === reviewScreens.ADAPTED ? adaptedReviewTmpl : defaultTmpl);\n      context: {\n        $implicit: paymentItem,\n        status: paymentStatus$ | async,\n        isSubmitting: submitting$ | async,\n        methods: methods,\n        paymentConfig: selectedPaymentConfig$ | async,\n        breachError: breachError\n      }\n    \"\n  ></ng-container>\n</div>\n\n<ng-template\n  let-payment\n  let-paymentConfig=\"paymentConfig\"\n  let-status=\"status\"\n  let-methods=\"methods\"\n  let-errors=\"errors\"\n  #adaptedReviewTmpl\n>\n  <bb-adapted-review-container\n    [payment]=\"payment\"\n    [paymentConfig]=\"paymentConfig\"\n    [status]=\"status\"\n    [methods]=\"methods\"\n    [breachError]=\"breachError\"\n  ></bb-adapted-review-container>\n</ng-template>\n\n<ng-template\n  let-payment\n  let-paymentConfig=\"paymentConfig\"\n  let-status=\"status\"\n  let-methods=\"methods\"\n  let-isSubmitting=\"isSubmitting\"\n  let-breachError=\"breachError\"\n  #defaultTmpl\n>\n  <fieldset class=\"bb-fieldset bb-fieldset__no-outline\">\n    <bb-header-ui\n      *ngIf=\"header\"\n      data-role=\"page-title\"\n      headingClasses=\"bb-block bb-block--lg\"\n      headingType=\"h2\"\n      [heading]=\"header\"\n    ></bb-header-ui>\n    <div #alertContainer></div>\n    <ng-container *ngIf=\"payment\">\n      <div class=\"bb-block bb-block--md\" *ngIf=\"status\">\n        <bb-payord-status-card\n          [status]=\"methods.getPaymentStatusType()\"\n          [isDebitPayment]=\"widgetOptions.isDebitPayment\"\n          *ngIf=\"status === 'SUCCESS'\"\n        ></bb-payord-status-card>\n\n        <ng-container *ngIf=\"!!status && status !== 'SUCCESS'\">\n          <ng-container *ngIf=\"errors?.length; else noSpecificError\">\n            <ng-container *ngFor=\"let error of errors\">\n              <ng-container *ngIf=\"error.message; else noSpecificError\">\n                <bb-alert-ui title=\"\" (close)=\"(false)\" modifier=\"error\">\n                  <div data-role=\"failure-message\" class=\"bb-text-bold bb-text-default d-inline-flex\">\n                    <ng-container *ngIf=\"isErrorTitleDisplayed\">\n                      <span>\n                        <ng-container\n                          *ngIf=\"!widgetOptions.isDebitPayment\"\n                          i18n=\"@@initiate-payment.review.payment-failed-alert.title\"\n                          >Payment data error:</ng-container\n                        >\n                        <ng-container\n                          *ngIf=\"widgetOptions.isDebitPayment\"\n                          i18n=\"@@initiate-payment.review.debit-failed-alert.title\"\n                          >Debit data error:</ng-container\n                        > </span\n                      >&nbsp;\n                    </ng-container>\n                    <span>{{ $any(error)?.message }}</span>\n                  </div>\n                </bb-alert-ui>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #noSpecificError>\n            <ng-container *ngIf=\"genericError; else unknownError\">\n              <bb-alert-ui title=\"\" modifier=\"error\">\n                <div class=\"bb-text-bold bb-text-default\">\n                  <ng-container *ngIf=\"isErrorTitleDisplayed\">\n                    <span>\n                      <ng-container\n                        *ngIf=\"!widgetOptions.isDebitPayment\"\n                        i18n=\"@@initiate-payment-payments-generic-message-alert-title\"\n                        >Payment data error:</ng-container\n                      >\n                      <ng-container\n                        *ngIf=\"widgetOptions.isDebitPayment\"\n                        i18n=\"@@initiate-payment-debit-generic-message-alert-title\"\n                        >Debit data error:</ng-container\n                      >\n                    </span>\n                  </ng-container>\n                  <span>{{ genericError }}</span>\n                </div>\n              </bb-alert-ui>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #unknownError>\n            <ng-container *ngIf=\"status !== 'USER_DECLINED' && status !== 'LIMIT_BREACH' && status !== 'COED'\">\n              <div class=\"bb-stack__item bb-text-bold\">\n                <bb-alert-ui\n                  i18n-title=\"@@initiate-payment-review.payments-unknown-error-alert-title\"\n                  title=\"Server error: Unknown error occurred.\"\n                  modifier=\"error\"\n                >\n                </bb-alert-ui>\n              </div>\n            </ng-container>\n          </ng-template>\n\n          <ng-container *ngIf=\"status === 'USER_DECLINED' || status === 'LIMIT_BREACH' || status === 'COED'\">\n            <ng-container [ngSwitch]=\"status\">\n              <bb-alert-ui title=\"\" (close)=\"(false)\" modifier=\"error\" [ngSwitch]=\"status\">\n                <div class=\"bb-stack bb-text-default\" *ngSwitchCase=\"'LIMIT_BREACH'\">\n                  <div\n                    class=\"bb-stack__item bb-text-bold\"\n                    data-role=\"failure-message\"\n                    i18n=\"@@initiate-payment.review.limit-breach-error\"\n                  >\n                    Payment cannot be submitted because your limits have been breached\n                  </div>\n                  <button\n                    bbButton\n                    color=\"unstyled\"\n                    buttonSize=\"sm\"\n                    i18n=\"@@initiate-payment.review.limit-breach-error-see-details-button\"\n                    class=\"bb-stack__item bb-stack__item--push-right alert-link\"\n                    data-role=\"failure-see-details\"\n                    (click)=\"methods.showBreachModal()\"\n                  >\n                    See details\n                  </button>\n                </div>\n                <div *ngSwitchCase=\"'USER_DECLINED'\" data-role=\"failure-message\">\n                  <div\n                    i18n=\"@@initiate-payment.review.txn-signing-cancelled-error-title\"\n                    class=\"bb-text-bold bb-text-default\"\n                  >\n                    Payment not submitted\n                  </div>\n                  <div i18n=\"@@initiate-payment.review.txn-signing-cancelled-error-msg\" class=\"bb-text-default\">\n                    The transaction signing request was cancelled\n                  </div>\n                </div>\n                <div *ngSwitchCase=\"'COED'\" data-role=\"failure-message\">\n                  <div i18n=\"@@edit-payment.review.txn-signing-coed-error-title\" class=\"bb-text-bold bb-text-default\">\n                    Payment not submitted\n                  </div>\n                  <div i18n=\"@@edit-payment.review.txn-signing-coed-error-msg\" class=\"bb-text-default\">\n                    Payment is already edited by another user\n                  </div>\n                </div>\n              </bb-alert-ui>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div\n        *ngIf=\"payment?.isIntraLegalEntity || payment?.remittanceInfo?.urgent\"\n        class=\"bb-block bb-block--md bb-inline-stack bb-text-support\"\n      >\n        <div class=\"bb-inline-stack bb-inline-stack__item\" *ngIf=\"payment?.isIntraLegalEntity\">\n          <bb-icon-ui name=\"domain\"></bb-icon-ui>\n          <div class=\"bb-inline-stack__item\"></div>\n          <div\n            class=\"bb-inline-stack__item bb-text-bold bb-inline-stack__item--spacing-sm\"\n            i18n=\"@@initiate-payment.review.intra-company-transfer-label\"\n          >\n            Intracompany payment\n          </div>\n        </div>\n        <div *ngIf=\"payment?.remittanceInfo?.urgent\" class=\"bb-inline-stack bb-inline-stack__item\">\n          <bb-icon-ui name=\"priority-high\"></bb-icon-ui>\n          <div class=\"bb-inline-stack__item\"></div>\n          <div\n            class=\"bb-inline-stack__item bb-text-bold\"\n            data-role=\"payment-is-urgent\"\n            i18n=\"@@initiate-payment.review.urgent-transfer-label\"\n          >\n            Urgent payment\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-payment-account-details-card__container d-none d-md-flex\">\n        <div class=\"bb-text-bold w-md-50\">\n          <ng-container *ngTemplateOutlet=\"dynamicLabelInitiator\"></ng-container>\n        </div>\n        <div class=\"mr-3\">&nbsp;</div>\n        <div class=\"bb-text-bold w-md-50\">\n          <ng-container *ngTemplateOutlet=\"dynamicLabelCounterparty\"></ng-container>\n        </div>\n      </div>\n\n      <div\n        class=\"bb-payment-account-details-card__container bb-block bb-block--md break-word\"\n        [ngClass]=\"{\n          'flex-column-reverse flex-md-row-reverse': widgetOptions.isDebitPayment\n        }\"\n      >\n        <div class=\"w-md-50\">\n          <div class=\"bb-text-bold d-md-none\">\n            <ng-container\n              *ngTemplateOutlet=\"widgetOptions.isDebitPayment ? dynamicLabelCounterparty : dynamicLabelInitiator\"\n            ></ng-container>\n          </div>\n          <bb-debitor-details-card [details]=\"payment?.initiator\"></bb-debitor-details-card>\n        </div>\n\n        <div class=\"justify-content-center align-items-center d-md-flex d-none\">\n          <bb-icon-ui class=\"bb-account-transfer-icon\" name=\"arrow-forward\"></bb-icon-ui>\n        </div>\n        <div class=\"d-md-none\">&nbsp;</div>\n\n        <div class=\"w-md-50\">\n          <div class=\"bb-text-bold d-md-none\">\n            <ng-container\n              *ngTemplateOutlet=\"widgetOptions.isDebitPayment ? dynamicLabelInitiator : dynamicLabelCounterparty\"\n            ></ng-container>\n          </div>\n          <bb-creditor-details-card [details]=\"payment?.counterparty\"></bb-creditor-details-card>\n        </div>\n      </div>\n\n      <ng-template #dynamicLabelInitiator>\n        <ng-container *ngIf=\"widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            name=\"counterparty\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"Collect from\"\n            i18n-defaultLabel=\"@@initiate-payment.review.debit-counterparty-title\"\n            data-role=\"initiator-label\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n        <ng-container *ngIf=\"!widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            name=\"initiator\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"From\"\n            i18n-defaultLabel=\"@@initiate-payment.review.initiator-title\"\n            data-role=\"initiator-label\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n      </ng-template>\n\n      <ng-template #dynamicLabelCounterparty>\n        <ng-container *ngIf=\"widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            data-role=\"payee-label\"\n            name=\"initiator\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"Transfer to\"\n            i18n-defaultLabel=\"@@initiate-payment.review.debit-initiator-title\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n        <ng-container *ngIf=\"!widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            data-role=\"payee-label\"\n            name=\"counterparty\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"To\"\n            i18n-defaultLabel=\"@@initiate-payment.review.counterparty-title\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n      </ng-template>\n\n      <bb-payord-amount-details\n        [config]=\"paymentConfig\"\n        [details]=\"payment?.remittanceInfo\"\n        [transferFee]=\"payment?.transferFee\"\n        [chargeBearer]=\"payment?.chargeBearer\"\n        [forexDetails]=\"methods.getForexDetails(payment)\"\n      ></bb-payord-amount-details>\n\n      <bb-payord-counterparty-details\n        [details]=\"payment?.counterparty\"\n        [config]=\"paymentConfig\"\n        [isDebitPayment]=\"payment?.isDebitPayment\"\n      ></bb-payord-counterparty-details>\n\n      <div\n        *ngIf=\"\n          payment?.messageToBank ||\n          payment?.remittanceInfo?.description ||\n          payment?.remittanceInfo?.paymentReference ||\n          payment?.counterparty.messageToBank ||\n          payment?.counterparty.remittanceInformation ||\n          payment?.remittanceInfo?.purposeOfPayment ||\n          payment?.counterparty?.mandateIdentifier\n        \"\n      >\n        <hr />\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty?.mandateIdentifier\">\n          <div class=\"bb-text-bold\" data-role=\"mandate-identifier-label\">\n            <bb-payord-dynamic-label\n              name=\"mandateIdentifier\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Mandate identifier\"\n              i18n-defaultLabel=\"@@initiate-payment.review.mandate-identifier-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"mandate-identifier\">\n            {{ payment?.counterparty?.mandateIdentifier }}\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.paymentReference\">\n          <div class=\"bb-text-bold\" data-role=\"payment-reference-label\">\n            <bb-payord-dynamic-label\n              name=\"paymentReference\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Payment reference\"\n              i18n-defaultLabel=\"@@initiate-payment.review.payment-reference-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-reference\">\n            {{ payment?.remittanceInfo?.paymentReference }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.description\">\n          <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n            <bb-payord-dynamic-label\n              name=\"description\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Description\"\n              i18n-defaultLabel=\"@@initiate-payment.review.description-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-description\">\n            {{ payment?.remittanceInfo?.description }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty.remittanceInformation\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              *ngIf=\"!payment.isDebitPayment\"\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-beneficiary-title\"\n            ></bb-payord-dynamic-label>\n            <bb-payord-dynamic-label\n              *ngIf=\"payment.isDebitPayment\"\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to client\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-client-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div data-role=\"description\" class=\"break-word\">\n            {{ payment?.counterparty?.remittanceInformation }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.purposeOfPayment\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"purposeOfPayment\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Purpose of payment\"\n              i18n-defaultLabel=\"@@initiate-payment.review.purpose-of-payment-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"bb-stack\">\n            <div data-role=\"purpose-of-payment\" class=\"bb-stack__item bb-stack__item--align-top\">\n              {{ payment?.remittanceInfo?.purposeOfPayment }}\n            </div>\n            <div data-role=\"purpose-of-payment-description\" class=\"bb-stack__item bb-text-support\">\n              {{ methods.getPurposeDescription(payment?.remittanceInfo?.purposeOfPayment) }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.messageToBank || payment?.counterparty?.messageToBank\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              *ngIf=\"!payment.isDebitPayment\"\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary bank\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-bank.label\"\n            ></bb-payord-dynamic-label>\n            <bb-payord-dynamic-label\n              *ngIf=\"payment.isDebitPayment\"\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to client bank\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-client-bank.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"message-to-bank\">\n            {{ payment?.counterparty?.messageToBank || payment?.messageToBank }}\n          </div>\n        </div>\n        <hr />\n      </div>\n\n      <bb-payord-schedule-details [paymentConfig]=\"paymentConfig\" [data]=\"payment?.schedule\">\n      </bb-payord-schedule-details>\n    </ng-container>\n  </fieldset>\n\n  <ng-container *ngIf=\"status !== 'SUCCESS'; else closureSwitch\">\n    <div class=\"bb-button-bar\" [class.bb-button-bar--reverse]=\"!widgetOptions?.isModalView\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        data-role=\"submit-button\"\n        (click)=\"methods.submit()\"\n        *ngIf=\"!methods.isApprovalEnabled()\"\n        [disabled]=\"isSubmitting\"\n        i18n=\"@@initiate-payment.review.submit-dropdown-btn\"\n      >\n        Submit\n      </button>\n      <div class=\"btn-group bb-button-bar__button\" data-role=\"button-group\" *ngIf=\"methods.isApprovalEnabled()\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          data-role=\"submit-button\"\n          [isLoading]=\"isSubmitting\"\n          (click)=\"methods.submit()\"\n          i18n=\"@@initiate-payment.review.submit-btn\"\n        >\n          Submit\n        </bb-load-button-ui>\n\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          btnColor=\"primary\"\n          icon=\"caret-down\"\n          data-role=\"dropdown-menu\"\n          position=\"top-right\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <button\n              role=\"menuitem\"\n              type=\"button\"\n              class=\"dropdown-item\"\n              data-role=\"bus-submit-and-approve-button\"\n              [disabled]=\"isSubmitting\"\n              (bbKeyboardClick)=\"methods.submit(true)\"\n              i18n=\"@@initiate-payment.review.submit-and-approve-btn\"\n            >\n              Submit and Approve\n            </button>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n      </div>\n      <button\n        class=\"bb-button-bar__button\"\n        bbButton\n        color=\"secondary\"\n        (click)=\"methods.edit()\"\n        [disabled]=\"isSubmitting\"\n        data-role=\"edit-button\"\n        i18n=\"@@initiate-payment.review.edit-btn\"\n      >\n        Edit\n      </button>\n\n      <button\n        bbButton\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        color=\"link\"\n        data-role=\"cancel-button\"\n        (click)=\"methods.toggleDiscardDialog()\"\n        [disabled]=\"isSubmitting\"\n        i18n=\"@@initiate-payment.review.discard-btn\"\n      >\n        Discard\n      </button>\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"isSubmitting\" class=\"position-absolute w-100 h-100 top-0 fixed-top bg-white\" [style.opacity]=\"0.6\">\n    <bb-loading-indicator-ui loaderSize=\"lg\" class=\"absolute-center\"></bb-loading-indicator-ui>\n  </div>\n\n  <ng-template #closureSwitch>\n    <ng-container *ngIf=\"widgetOptions?.isModalView; else newPayment\">\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          data-role=\"done-payment-edit-button\"\n          *ngIf=\"status\"\n          (click)=\"methods.doneEditing()\"\n          i18n=\"@@initiate-payment.review.btn-done-edit-payment.label\"\n        >\n          Done\n        </button>\n\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"export-payment-button\"\n          *ngIf=\"methods.getPaymentResponse()?.exportAllowed\"\n          [bbExportPdf]=\"methods.getPaymentResponse()?.id\"\n        >\n          <bb-icon-ui class=\"mr-2\" name=\"file-download\"></bb-icon-ui>\n          <span i18n=\"@@initiate-payment.review.btn-export-payment.label\">Export PDF</span>\n        </button>\n\n        <ng-container *ngIf=\"widgetOptions?.paymentMode !== paymentMode.EDIT_PAYMENT\">\n          <ng-container *ngTemplateOutlet=\"newPaymentButton; context: { color: 'secondary' }\"></ng-container>\n          <div class=\"bb-button-bar__button bb-button-bar__button--across\">\n            <ng-container *ngTemplateOutlet=\"saveTemplateButton; context: { color: 'link' }\"></ng-container>\n          </div>\n        </ng-container>\n      </div>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #newPayment>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <ng-container *ngTemplateOutlet=\"newPaymentButton; context: { color: 'primary' }\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"saveTemplateButton; context: { color: 'secondary' }\"></ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template #newPaymentButton let-color=\"color\">\n    <button\n      *ngIf=\"status && methods.isNewPaymentEnabled()\"\n      bbButton\n      [color]=\"color\"\n      class=\"bb-button-bar__button\"\n      data-role=\"new-payment-button\"\n      (click)=\"methods.reset()\"\n      [disabled]=\"methods.isSavingTemplate$() | async\"\n    >\n      <ng-container *ngIf=\"!widgetOptions.isDebitPayment\" i18n=\"@@initiate-payment.review.btn-group-new-payment.label\"\n        >New Payment</ng-container\n      >\n      <ng-container *ngIf=\"widgetOptions.isDebitPayment\" i18n=\"@@initiate-payment.review.btn-group-new-debit.label\"\n        >New debit request</ng-container\n      >\n    </button>\n  </ng-template>\n\n  <ng-template #saveTemplateButton let-color=\"color\">\n    <button\n      *ngIf=\"status === 'SUCCESS' && methods.isPaymentTemplateEnabled() && (createTemplatePermission$ | async)\"\n      bbButton\n      [color]=\"color\"\n      class=\"bb-button-bar__button\"\n      data-role=\"save-as-template-button\"\n      (click)=\"methods.openTemplateModal()\"\n      [disabled]=\"methods.isTemplateSaved()\"\n      i18n=\"@@initiate-payment.review.btn-group-save-as-template.label\"\n    >\n      Save as a template\n    </button>\n  </ng-template>\n\n  <bb-modal-ui\n    [isOpen]=\"methods.showDiscardDialog()\"\n    (cancel)=\"methods.toggleDiscardDialog()\"\n    (confirm)=\"methods.discard()\"\n  >\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <div data-role=\"modal-header\">\n          <h2 class=\"modal-title\" i18n=\"omni-payment-edit-review-discard-modal-title\">\n            Discard {widgetOptions?.paymentMode === paymentMode.EDIT_PAYMENT, select, true {edited} other {entered}}\n            data?\n          </h2>\n        </div>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container i18n=\"@@initiate-payment.review.discard-modal-content\">\n          Are you sure you want to exit and discard all changes? {widgetOptions?.paymentMode ===\n          paymentMode.EDIT_PAYMENT, select, true {Edited} other {Entered}} data will be lost.\n        </ng-container>\n      </ng-template>\n    </bb-modal-body-ui>\n\n    <bb-modal-footer-ui #modalFooterRef>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"danger\"\n            class=\"bb-button-bar__button\"\n            (click)=\"methods.discard()\"\n            data-role=\"discard-action-btn\"\n            i18n=\"@@initiate-payment.review.discard-modal-discard-btn\"\n          >\n            Discard\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"methods.toggleDiscardDialog()\"\n            data-role=\"cancel-action-btn\"\n            i18n=\"@@initiate-payment.review.discard-modal-cancel-btn\"\n          >\n            Not now\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <bb-breach-limit-details\n    [paymentDetails]=\"paymentItem\"\n    [error]=\"breachError\"\n    [isOpen]=\"showBreachDetails\"\n    (close)=\"hideBreachModal()\"\n  ></bb-breach-limit-details>\n</ng-template>\n\n<bb-payment-template-form\n  [paymentTemplateForm]=\"paymentTemplateForm\"\n  [isSavingTemplate]=\"savingTemplate$ | async\"\n  [modalState]=\"paymentTemplateModalState\"\n  (closeModal)=\"closeTemplateModal()\"\n  (openModal)=\"openTemplateModal()\"\n  (submitForm)=\"submitPaymentTemplate()\"\n></bb-payment-template-form>\n", components: [{ type: AdaptedReviewComponent, selector: "bb-adapted-review-container", inputs: ["payment", "status", "paymentConfig", "methods", "breachError"] }, { type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2.ӨPayordStatusComponent, selector: "bb-payord-status-card", inputs: ["status", "message", "isDebitPayment"] }, { type: i6.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.ӨPaymentDebitorDetailsCardComponent, selector: "bb-debitor-details-card", inputs: ["details"] }, { type: i2.ӨPaymentCreditorDetailsCardComponent, selector: "bb-creditor-details-card", inputs: ["details"] }, { type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2.ӨPayordAmountDetailsComponent, selector: "bb-payord-amount-details", inputs: ["config", "details", "transferFee", "chargeBearer", "forexDetails"] }, { type: i2.ӨPayordCounterpartyDetailsComponent, selector: "bb-payord-counterparty-details", inputs: ["config", "details", "isDebitPayment"] }, { type: i2.ӨPayordScheduleDetailsComponent, selector: "bb-payord-schedule-details", inputs: ["data", "paymentConfig"] }, { type: i13.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i2$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i13$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i13$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i13$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i13$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i2.ӨBreachLimitDetailsModalComponent, selector: "bb-breach-limit-details", inputs: ["paymentDetails", "error", "isOpen"], outputs: ["close"] }, { type: i2.ӨPaymentTemplateComponent, selector: "bb-payment-template-form", inputs: ["modalState", "paymentTemplateForm", "isSavingTemplate"], outputs: ["closeModal", "openModal", "submitForm"] }], directives: [{ type: i14.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i18.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i19.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2.ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }, { type: i13$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i13$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i13$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i14.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewPaymentContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-review-payment',
                    templateUrl: 'review-payment.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }, { type: i2.StateService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: i2.NavigationService }, { type: CreatePaymentService }, { type: i2.RoutableModalService, decorators: [{
                    type: Optional
                }] }, { type: i2.PaymentOrderHttpService }, { type: CreatePaymentConfigSetupService }, { type: i2$2.TransactionSigningHelperService, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN]
                }] }]; }, propDecorators: { alertContainer: [{
                type: ViewChild,
                args: ['alertContainer']
            }] } });

const components = [
    ReviewPaymentContainerComponent,
    RemittanceDetailsComponent,
    CounterpartyDetailsComponent,
    InitiatorDetailsComponent,
    ScheduleDetailsComponent,
    CreditorAccountComponent,
    CreditorDetailsComponent,
    AdaptedReviewComponent,
];
const uiAngComponentModules = [
    ModalModule,
    DropdownMenuModule,
    KeyboardClickModule,
    NotificationModule,
    AlertModule,
    HeaderModule,
    FocusModule,
];
class ReviewPaymentModule {
}
/** @nocollapse */ ReviewPaymentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewPaymentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ReviewPaymentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewPaymentModule, declarations: [ReviewPaymentContainerComponent,
        RemittanceDetailsComponent,
        CounterpartyDetailsComponent,
        InitiatorDetailsComponent,
        ScheduleDetailsComponent,
        CreditorAccountComponent,
        CreditorDetailsComponent,
        AdaptedReviewComponent], imports: [CommonModule, PaymentOrdersUiModule, ModalModule,
        DropdownMenuModule,
        KeyboardClickModule,
        NotificationModule,
        AlertModule,
        HeaderModule,
        FocusModule], exports: [ReviewPaymentContainerComponent,
        RemittanceDetailsComponent,
        CounterpartyDetailsComponent,
        InitiatorDetailsComponent,
        ScheduleDetailsComponent,
        CreditorAccountComponent,
        CreditorDetailsComponent,
        AdaptedReviewComponent, ModalModule,
        DropdownMenuModule,
        KeyboardClickModule,
        NotificationModule,
        AlertModule,
        HeaderModule,
        FocusModule] });
/** @nocollapse */ ReviewPaymentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewPaymentModule, imports: [[CommonModule, PaymentOrdersUiModule, ...uiAngComponentModules], ModalModule,
        DropdownMenuModule,
        KeyboardClickModule,
        NotificationModule,
        AlertModule,
        HeaderModule,
        FocusModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewPaymentModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PaymentOrdersUiModule, ...uiAngComponentModules],
                    exports: [...components, ...uiAngComponentModules],
                    declarations: [...components],
                }]
        }] });

class HeaderDropdownComponent {
    constructor() {
        /**
         * Array of representation of the link menu object
         */
        this.menu = [];
        /**
         * Flag to denote if the first link from buttons array should be used as default target
         */
        this.useFirstLinkAsDefault = false;
        /**
         * Flag to denote if the first link from buttons array should be used as default target
         */
        this.position = 'bottom-right';
        /**
         * Color of the button. Default `primary`
         */
        this.buttonColor = 'primary';
        /**
         * Size of the button. Allowed values are `sm` or `md`. Default `md`
         */
        this.buttonSize = 'md';
        /**
         * Event on item click
         */
        this.navigationAction = new EventEmitter();
    }
    onClick(event, value) {
        event.preventDefault();
        this.navigationAction.emit(value);
    }
}
/** @nocollapse */ HeaderDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderDropdownComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ HeaderDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HeaderDropdownComponent, selector: "bb-header-dropdown", inputs: { menu: "menu", useFirstLinkAsDefault: "useFirstLinkAsDefault", position: "position", buttonLabel: "buttonLabel", buttonIcon: "buttonIcon", buttonColor: "buttonColor", buttonSize: "buttonSize" }, outputs: { navigationAction: "navigationAction" }, ngImport: i0, template: "<div class=\"btn-group bb-button-bar__button\">\n  <button\n    *ngIf=\"useFirstLinkAsDefault || menu.length === 1\"\n    class=\"bb-button-bar__button\"\n    bbButton\n    [color]=\"buttonColor\"\n    [buttonSize]=\"buttonSize\"\n    (click)=\"onClick($event, menu[0].value)\"\n  >\n    <bb-icon-ui *ngIf=\"menu[0].iconName\" [name]=\"menu[0].iconName\"></bb-icon-ui>\n    <span>{{ menu[0].label }}</span>\n  </button>\n  <ng-container *ngIf=\"menu.length > 1\">\n    <bb-dropdown-menu-ui\n      container=\"body\"\n      icon=\"caret-down\"\n      [btnColor]=\"buttonColor\"\n      [buttonSize]=\"buttonSize\"\n      [position]=\"position\"\n      [class.btn-group]=\"useFirstLinkAsDefault\"\n    >\n      <ng-template bbDropdownLabel>\n        <span class=\"d-flex align-items-center\" *ngIf=\"!useFirstLinkAsDefault\">\n          <bb-icon-ui *ngIf=\"buttonIcon\" [name]=\"buttonIcon\"></bb-icon-ui>\n          <span>{{ buttonLabel }}</span>\n        </span>\n      </ng-template>\n\n      <ng-template bbDropdownMenuItem>\n        <ng-container *ngFor=\"let item of menu; let i = index\">\n          <ng-container *ngIf=\"!(useFirstLinkAsDefault && i === 0)\">\n            <a\n              rel=\"noopener\"\n              role=\"menuitem\"\n              href=\"#\"\n              class=\"dropdown-item\"\n              (click)=\"onClick($event, item.value)\"\n            >\n              <span class=\"bb-stack\">\n                <bb-icon-ui\n                  *ngIf=\"item.iconName\"\n                  class=\"bb-stack__item bb-stack__item--align-top\"\n                  [name]=\"item.iconName ? item.iconName : undefined\"\n                  color=\"dark\"\n                ></bb-icon-ui>\n                <div class=\"bb-stack__item\">\n                  <span>{{ item.label }}</span>\n                  <div\n                    *ngIf=\"item.description\"\n                    class=\"bb-subtitle bb-text-support mr-4\"\n                  >\n                    {{ item.description }}\n                  </div>\n                </div>\n              </span>\n            </a>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </ng-container>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i18.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2$3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-header-dropdown',
                    templateUrl: './header-dropdown.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { menu: [{
                type: Input
            }], useFirstLinkAsDefault: [{
                type: Input
            }], position: [{
                type: Input
            }], buttonLabel: [{
                type: Input
            }], buttonIcon: [{
                type: Input
            }], buttonColor: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], navigationAction: [{
                type: Output
            }] } });

class PaymentsHeaderComponent {
    constructor(conditions) {
        this.conditions = conditions;
        /**
         * Custom class name
         */
        this.customClassName = '';
        /**
         * Heading Classes
         */
        this.headingClasses = '';
        /**
         * Heading type (h1-h6)
         */
        this.headingType = '';
        /**
         * Heading
         */
        this.heading = '';
        /**
         * Show right side button / dropdown
         */
        this.showNavigation = true;
        /**
         * Array of representation of the link menu object
         */
        this.navigationItems = [];
        /**
         * Flag to denote if the first link from buttons array should be used as default target
         */
        this.useFirstLinkAsDefault = false;
        /**
         * Flag to denote if the first link from buttons array should be used as default target
         */
        this.position = 'bottom-right';
        /**
         * Color of the button. Default `primary`
         */
        this.buttonColor = 'primary';
        /**
         * Size of the button. Allowed values are `sm` or `md`. Default `md`
         */
        this.buttonSize = 'md';
        /**
         * Event on item click
         */
        this.navigationAction = new EventEmitter();
    }
    hasPermissions(item) {
        const hasPermissionsPromise = item.canView
            ? this.conditions.resolveEntitlements(item.canView)
            : of(true);
        return from(hasPermissionsPromise).pipe(map((hasPermissions) => (Object.assign({ hasPermissions }, item))));
    }
    menuSetup() {
        return from(this.navigationItems).pipe(concatMap(this.hasPermissions.bind(this)), reduce((acc, _a) => {
            var { hasPermissions } = _a, item = __rest(_a, ["hasPermissions"]);
            if (hasPermissions) {
                acc.push(Object.assign({}, item));
            }
            return acc;
        }, []));
    }
    ngOnInit() {
        this.menuItems = this.menuSetup();
    }
    onClick(value) {
        this.navigationAction.emit(value);
    }
}
/** @nocollapse */ PaymentsHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsHeaderComponent, deps: [{ token: CONDITIONS }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsHeaderComponent, selector: "bb-payments-header", inputs: { customClassName: "customClassName", headingClasses: "headingClasses", headingType: "headingType", heading: "heading", showNavigation: "showNavigation", navigationItems: "navigationItems", useFirstLinkAsDefault: "useFirstLinkAsDefault", position: "position", buttonLabel: "buttonLabel", buttonIcon: "buttonIcon", buttonColor: "buttonColor", buttonSize: "buttonSize" }, outputs: { navigationAction: "navigationAction" }, ngImport: i0, template: "<div class=\"heading-widget bb-heading-widget {{ customClassName }}\">\n  <bb-header-ui\n    headingClasses=\"bb-heading-widget__heading {{ headingClasses }}\"\n    [headingType]=\"headingType\"\n    [heading]=\"heading\"\n  ></bb-header-ui>\n\n  <ng-container *ngIf=\"showNavigation\">\n    <ng-container *ngIf=\"menuItems | async as menu\">\n      <ng-container *ngIf=\"menu.length\">\n        <bb-header-dropdown\n          [menu]=\"menu\"\n          [useFirstLinkAsDefault]=\"useFirstLinkAsDefault\"\n          [position]=\"position\"\n          [buttonLabel]=\"buttonLabel\"\n          [buttonIcon]=\"buttonIcon\"\n          [buttonColor]=\"buttonColor\"\n          [buttonSize]=\"buttonSize\"\n          (navigationAction)=\"onClick($event)\"\n        >\n        </bb-header-dropdown>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n", components: [{ type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: HeaderDropdownComponent, selector: "bb-header-dropdown", inputs: ["menu", "useFirstLinkAsDefault", "position", "buttonLabel", "buttonIcon", "buttonColor", "buttonSize"], outputs: ["navigationAction"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i14.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-header',
                    templateUrl: './payments-header.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [CONDITIONS]
                }] }]; }, propDecorators: { customClassName: [{
                type: Input
            }], headingClasses: [{
                type: Input
            }], headingType: [{
                type: Input
            }], heading: [{
                type: Input
            }], showNavigation: [{
                type: Input
            }], navigationItems: [{
                type: Input
            }], useFirstLinkAsDefault: [{
                type: Input
            }], position: [{
                type: Input
            }], buttonLabel: [{
                type: Input
            }], buttonIcon: [{
                type: Input
            }], buttonColor: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], navigationAction: [{
                type: Output
            }] } });

class PaymentsHeaderModule {
}
/** @nocollapse */ PaymentsHeaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsHeaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PaymentsHeaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsHeaderModule, declarations: [PaymentsHeaderComponent, HeaderDropdownComponent], imports: [CommonModule,
        HeaderModule,
        DropdownMenuModule,
        IconModule,
        RouterModule,
        ButtonModule], exports: [PaymentsHeaderComponent] });
/** @nocollapse */ PaymentsHeaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsHeaderModule, imports: [[
            CommonModule,
            HeaderModule,
            DropdownMenuModule,
            IconModule,
            RouterModule,
            ButtonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsHeaderModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PaymentsHeaderComponent, HeaderDropdownComponent],
                    exports: [PaymentsHeaderComponent],
                    imports: [
                        CommonModule,
                        HeaderModule,
                        DropdownMenuModule,
                        IconModule,
                        RouterModule,
                        ButtonModule,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BaseFields, CreatePaymentConfigSetupService, CreatePaymentFieldsSetupService, CreatePaymentFormComponent, CreatePaymentFormModule, CreatePaymentService, PaymentsHeaderComponent, PaymentsHeaderModule, ReviewPaymentContainerComponent, ReviewPaymentModule, AdaptedReviewComponent as ӨAdaptedReviewComponent, CounterpartyDetailsComponent as ӨCounterpartyDetailsComponent, CreditorAccountComponent as ӨCreditorAccountComponent, CreditorDetailsComponent as ӨCreditorDetailsComponent, InitiatorDetailsComponent as ӨInitiatorDetailsComponent, RemittanceDetailsComponent as ӨRemittanceDetailsComponent, ScheduleDetailsComponent as ӨScheduleDetailsComponent };
//# sourceMappingURL=backbase-payments-collection-ui-ang.js.map
