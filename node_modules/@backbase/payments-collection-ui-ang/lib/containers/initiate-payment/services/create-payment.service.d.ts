import { PaymentDetails, PaymentOption, PaymentOptionsService, PaymentTypeConfig } from '@backbase/payment-orders-ang';
import { Observable } from 'rxjs';
import { FormGroup } from '@angular/forms';
import { CriticalFormValues } from '../models/create-payment.model';
import * as i0 from "@angular/core";
export declare class CreatePaymentService {
    private readonly paymentOptionsService;
    private readonly selectedPaymentOptionSub$;
    private readonly selectedPaymentConfigSub$;
    selectedPaymentOption$: Observable<PaymentOption | undefined>;
    selectedPaymentConfig$: Observable<PaymentTypeConfig | undefined>;
    get selectedPaymentConfigValue(): PaymentTypeConfig | undefined;
    static getCriticalFieldValues(formValue: Partial<PaymentDetails> | null): CriticalFormValues;
    constructor(paymentOptionsService: PaymentOptionsService);
    selectPaymentConfig(config?: PaymentTypeConfig): void;
    selectPaymentOption(paymentOption?: PaymentOption): void;
    getPaymentOptionsRequest(configs: PaymentTypeConfig[]): Observable<PaymentOption[] | undefined>;
    resetRedundantFields(paymentTypeConfig: PaymentTypeConfig, form: FormGroup): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CreatePaymentService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CreatePaymentService>;
}
