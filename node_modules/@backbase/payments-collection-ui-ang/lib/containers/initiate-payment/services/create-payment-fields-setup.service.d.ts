import { OnDestroy } from '@angular/core';
import { InitiatePaymentOptions, PaymentFormFieldConfig, PaymentFormGroup, PaymentOption, PaymentOptionsService, PaymentOrderHttpService, PaymentTypeConfig, PaymentTypeOptions } from '@backbase/payment-orders-ang';
import { Observable } from 'rxjs';
import { CreatePaymentConfigSetupService } from './create-payment-config-setup.service';
import * as i0 from "@angular/core";
export declare class CreatePaymentFieldsSetupService implements OnDestroy {
    private readonly createPaymentSetup;
    private readonly paymentOptionsService;
    private readonly paymentOrderHttpService;
    private readonly destroyed$;
    private readonly fetchDebitItemPermissions$;
    private readonly fetchBeneficiaries$;
    private readonly paymentOptionsSub$;
    private readonly paymentOptionsErrorSub$;
    private readonly exchangeRate$;
    private readonly getExchangeRate$;
    private readonly exchangeRateError$;
    private readonly frequencyFieldSub$;
    private readonly countries$;
    private readonly currencies$;
    private get debitAccounts$();
    private get creditAccountList$();
    private readonly fetchDebitAccounts$;
    private readonly fetchCreditAccounts$;
    private readonly connectedAccounts$;
    private totalContacts;
    private totalCreditAccounts;
    private totalContactsItemsCount;
    private checkClosedPaymentsAccess;
    private contacts$;
    private creditAccounts$;
    readonly paymentOptions$: Observable<PaymentOption[]>;
    readonly paymentOptionsError$: Observable<boolean>;
    readonly frequencyField$: Observable<PaymentFormFieldConfig>;
    get options(): InitiatePaymentOptions;
    get configs(): PaymentTypeConfig[];
    constructor(createPaymentSetup: CreatePaymentConfigSetupService, paymentOptionsService: PaymentOptionsService, paymentOrderHttpService: PaymentOrderHttpService);
    ngOnDestroy(): void;
    private loadSanctionedCountries;
    private loadSanctionedCurrencies;
    private loadAccountByAccountId;
    private getContacts;
    private getCreditAccounts;
    private getDebitAccounts;
    private loadCreditorDetails;
    setPaymentOptions(options: PaymentOption[]): void;
    setPaymentOptionsError(error: boolean): void;
    clearPaymentOptions(): void;
    injectData(fields: Array<PaymentFormGroup | PaymentFormFieldConfig>, paymentTypeOptions?: PaymentTypeOptions): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CreatePaymentFieldsSetupService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CreatePaymentFieldsSetupService>;
}
