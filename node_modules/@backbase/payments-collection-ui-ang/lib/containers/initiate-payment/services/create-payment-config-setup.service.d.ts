import { TemplateRef } from '@angular/core';
import { FetchPaymentOptionsListenerFn, InitiatePaymentHeaderStates, InitiatePaymentOptions, PaymentFormFieldConfig, PaymentFormGroup, PaymentHooksOptions, PaymentTypeConfig, ReviewTemplateContext } from '@backbase/payment-orders-ang';
import * as i0 from "@angular/core";
export declare class CreatePaymentConfigSetupService {
    private readonly configsSub$;
    private readonly optionsSub$;
    private readonly baseFieldsSub$;
    private readonly fetchPaymentOptionsListenerSub$;
    private readonly hooksSub$;
    private readonly reviewTemplateSub$;
    readonly configs$: import("rxjs").Observable<PaymentTypeConfig[]>;
    readonly options$: import("rxjs").Observable<InitiatePaymentOptions>;
    readonly baseFields$: import("rxjs").Observable<(PaymentFormGroup | PaymentFormFieldConfig)[]>;
    readonly fetchPaymentOptionsListener$: import("rxjs").Observable<FetchPaymentOptionsListenerFn | undefined>;
    readonly reviewTemplate$: import("rxjs").Observable<TemplateRef<ReviewTemplateContext> | undefined>;
    get hooks(): PaymentHooksOptions;
    get options(): InitiatePaymentOptions;
    get configs(): PaymentTypeConfig[];
    setHooks(hooks?: PaymentHooksOptions): void;
    setConfigs(configs: PaymentTypeConfig[]): void;
    setOptions(options: InitiatePaymentOptions): void;
    setBaseFields(baseFields?: Array<PaymentFormFieldConfig | PaymentFormGroup>): void;
    setFetchPaymentOptionsListener(listenerFn?: FetchPaymentOptionsListenerFn): void;
    setReviewTemplate(templateRef: TemplateRef<ReviewTemplateContext>): void;
    getHeader(state: InitiatePaymentHeaderStates): string | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<CreatePaymentConfigSetupService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CreatePaymentConfigSetupService>;
}
