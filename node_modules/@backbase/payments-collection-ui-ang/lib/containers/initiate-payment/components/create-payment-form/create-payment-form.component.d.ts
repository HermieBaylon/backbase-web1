import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { FetchPaymentOptionsListenerFn, InitiatePaymentOptions, NavigationService, PaymentFormFieldConfig, PaymentFormGroup, PaymentMode, PaymentOption, PaymentOptionsService, PaymentOrderHttpService, PaymentState, PaymentTemplatesData, PaymentTypeConfig, PayordPaymentError, RoutableModalService, StateService } from '@backbase/payment-orders-ang';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { AbstractControl, FormControl, FormGroup } from '@angular/forms';
import { PaymentTemplate } from '@backbase/data-ang/payment-template';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import { CreatePaymentConfigSetupService } from '../../services/create-payment-config-setup.service';
import { CreatePaymentFieldsSetupService } from '../../services/create-payment-fields-setup.service';
import { CreatePaymentService } from '../../services/create-payment.service';
import * as i0 from "@angular/core";
export declare class CreatePaymentFormComponent implements OnInit, AfterContentInit, OnDestroy, AfterViewInit {
    private readonly paymentOrderHttpService;
    private readonly paymentOptionsService;
    private readonly createPaymentService;
    private readonly navigationService;
    private readonly stateService;
    private readonly cdRef;
    private readonly createPaymentSetup;
    private readonly fieldSetupService;
    private readonly formEl;
    private readonly modalService;
    private readonly eventBus;
    readonly paymentErrors: PayordPaymentError;
    private readonly destroyed$;
    private paymentTypes;
    private paymentTemplate;
    private shouldResetPaymentOptions;
    private formValue;
    header: string | undefined;
    readonly paymentTemplateSearch: FormControl;
    readonly fetchOptions$: Subject<FormGroup>;
    readonly submitting$: BehaviorSubject<boolean>;
    readonly paymentState$: Observable<PaymentState>;
    readonly paymentTemplates$: Observable<PaymentTemplatesData>;
    readonly loadingTemplates$: BehaviorSubject<boolean>;
    readonly fetchingPaymentOptions$: BehaviorSubject<boolean>;
    readonly paymentOptions$: Observable<PaymentOption[]>;
    readonly paymentOptionsError$: Observable<boolean>;
    readonly selectedPaymentConfig$: Observable<PaymentTypeConfig | undefined>;
    readonly selectedPaymentOption$: Observable<PaymentOption | undefined>;
    readonly fetchPaymentOptionsListener$: Observable<FetchPaymentOptionsListenerFn | undefined>;
    readonly baseFields$: Observable<Array<PaymentFormFieldConfig | PaymentFormGroup>>;
    private editedPaymentDetails;
    options: InitiatePaymentOptions;
    configs: PaymentTypeConfig[];
    templateSelectorName?: string;
    isPaymentCopyControl?: AbstractControl;
    templateNameControl: AbstractControl | null;
    errors: {
        key: string;
        message: string;
    }[];
    isEditPaymentConfirmationDialogOpen: boolean;
    enablePaymentTemplateSelector: boolean;
    editPaymentHasNoChanges: boolean;
    isErrorTitleDisplayed: boolean;
    shouldApplyTemplate: boolean;
    genericError?: string;
    searchValue?: string;
    showApiError: boolean;
    paymentMode: typeof PaymentMode;
    outletRef: ViewContainerRef;
    contentRef: TemplateRef<any>;
    alertContainer?: ElementRef;
    constructor(paymentOrderHttpService: PaymentOrderHttpService, paymentOptionsService: PaymentOptionsService, createPaymentService: CreatePaymentService, navigationService: NavigationService, stateService: StateService, cdRef: ChangeDetectorRef, createPaymentSetup: CreatePaymentConfigSetupService, fieldSetupService: CreatePaymentFieldsSetupService, formEl: ElementRef, modalService: RoutableModalService, eventBus: Pubsub, paymentErrors: PayordPaymentError);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private setArrangementBusFunctions;
    private setEditFormValues;
    private setupPaymentTypes;
    private renderView;
    private setTemplateValues;
    private prepareForTemplateApply;
    private getPaymentConfig;
    private setFormValues;
    private listen;
    private setForm;
    /**
     * Callback triggered when the payment type changes
     */
    private onPaymentTypeChange;
    private validatePayment;
    private handleP2PErrors;
    private scrollIntoAlertView;
    private isP2PLimitError;
    private saveTemplate;
    private editPaymentTemplate;
    private createPaymentTemplate;
    private saveTemplateSuccessCallback;
    private saveTemplateErrorCallback;
    private onHooksDone;
    private isEditFormNotChanged;
    onSelectPaymentTemplate(paymentTemplateData: PaymentTemplate): void;
    clearTemplateName(): void;
    onLoadingMoreTemplates(page: number): void;
    search(text: string): void;
    onSelectConfig(config?: PaymentTypeConfig): void;
    onPaymentOptionSelect(paymentOption?: PaymentOption): void;
    onApplyTemplate(form: FormGroup): void;
    /**
     * Fetches the payment options for provided payment details
     */
    private fetchPaymentOptions;
    discardEditPaymentChanges(): void;
    cancelEditPaymentConfirmationDialog(): void;
    onSubmit(form: FormGroup): void;
    onClear(): void;
    onEditCancel(form: FormGroup): void;
    onEditSubmit(form: FormGroup): void;
    getForm(paymentState: PaymentState): Observable<FormGroup | undefined>;
    static ɵfac: i0.ɵɵFactoryDeclaration<CreatePaymentFormComponent, [null, null, null, null, null, null, null, null, null, { optional: true; }, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CreatePaymentFormComponent, "bb-create-payment-form", never, {}, {}, never, never>;
}
