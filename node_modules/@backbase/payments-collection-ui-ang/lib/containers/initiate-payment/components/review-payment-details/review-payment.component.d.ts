import { ElementRef, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { BreachReportError, ForexDetails, getLabelFromPaymentConfig, InitiatePaymentOptions, ModalState, NavigationService, PaymentDetails, PaymentMode, PaymentOrderHttpService, PaymentOrderResponseItem, PaymentSubmitStatuses, PaymentTypeConfig, PayordPaymentError, ReviewScreens, ReviewTemplateContext, RoutableModalService, StateService } from '@backbase/payment-orders-ang';
import { BehaviorSubject, Observable } from 'rxjs';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import { FormBuilder, FormGroup } from '@angular/forms';
import { TransactionSigningHelperService } from '@backbase/identity-auth/transaction-signing';
import { ContactsPostResponseBody } from '@backbase/data-ang/contact-manager';
import { CreatePaymentService } from '../../services/create-payment.service';
import { CreatePaymentConfigSetupService } from '../../services/create-payment-config-setup.service';
import * as i0 from "@angular/core";
export declare class ReviewPaymentContainerComponent implements OnInit, OnDestroy {
    private readonly formBuilder;
    private readonly stateService;
    private readonly eventBus;
    private readonly navigationService;
    private readonly createPaymentService;
    private readonly modalService;
    private readonly paymentOrderHttpService;
    private readonly createPaymentSetup;
    private readonly transactionSigningHelper;
    readonly paymentErrors: PayordPaymentError;
    private showConfirmation;
    private paymentItem$;
    private gc$;
    private saveContactResponse$;
    private paymentOrderId;
    private paymentMessage?;
    private approvalPending;
    private enablePaymentTemplate;
    private saveTemplate;
    private canApprove;
    private paymentForm?;
    private paymentResponse?;
    alertContainer: ElementRef;
    header: string | undefined;
    genericError?: string;
    showBreachDetails: boolean;
    paymentMode: typeof PaymentMode;
    paymentItem: PaymentDetails;
    isErrorTitleDisplayed: boolean;
    reviewScreens: typeof ReviewScreens;
    breachError?: BreachReportError;
    paymentTemplateForm: FormGroup;
    widgetOptions: InitiatePaymentOptions;
    errors: {
        key: string;
        message: string;
    }[];
    submitting$: BehaviorSubject<boolean>;
    savingTemplate$: BehaviorSubject<boolean>;
    reviewTemplate: TemplateRef<ReviewTemplateContext> | undefined;
    paymentStatus$: BehaviorSubject<string | undefined>;
    selectedPaymentConfig$: Observable<PaymentTypeConfig | undefined>;
    paymentTemplateModalState: BehaviorSubject<ModalState | undefined>;
    methods: {
        edit: () => void;
        submit: (approved?: boolean) => void;
        reset: () => void;
        discard: () => void;
        toggleDiscardDialog: () => void;
        showDiscardDialog: () => boolean;
        isApprovalEnabled: () => boolean;
        isPaymentTemplateEnabled: () => boolean;
        isNewPaymentEnabled: () => boolean;
        isSavingTemplate$: () => BehaviorSubject<boolean>;
        getPaymentMessage: () => string | undefined;
        getPurposeDescription: (purpose: string) => string | undefined;
        isSubmitting$: () => BehaviorSubject<boolean>;
        getLabelText: typeof getLabelFromPaymentConfig;
        getForexDetails: (payment: PaymentDetails) => Partial<ForexDetails> | undefined;
        showBreachModal: () => void;
        isTemplateSaved: () => boolean;
        openTemplateModal: () => void;
        doneEditing: () => void;
        navigateToAfterSuccessPage: () => void;
        getPaymentResponse: () => Partial<PaymentOrderResponseItem> | undefined;
        getSaveContactResponse$: BehaviorSubject<ContactsPostResponseBody | null>;
        getPaymentStatusType: () => PaymentSubmitStatuses;
    };
    createTemplatePermission$: Observable<boolean>;
    constructor(formBuilder: FormBuilder, stateService: StateService, eventBus: Pubsub, navigationService: NavigationService, createPaymentService: CreatePaymentService, modalService: RoutableModalService, paymentOrderHttpService: PaymentOrderHttpService, createPaymentSetup: CreatePaymentConfigSetupService, transactionSigningHelper: TransactionSigningHelperService, paymentErrors: PayordPaymentError);
    onEdit(): void;
    ngOnInit(): void;
    isSavingTemplate$(): BehaviorSubject<boolean>;
    private onSubmit;
    private saveNewContact;
    private handlePaymentError;
    private putOrPostPaymentOrder;
    private postPaymentOrder;
    private handlePaymentSubmit;
    private handleTransactionSigning;
    private onTransactionSigningSuccess;
    private onTransactionSigningReject;
    private onTransactionSigningDecline;
    private onTransactionSigningError;
    private handleRejectedPayment;
    private getPaymentProgressStatus;
    private isPaymentConfirmed;
    private onHooksDone;
    private hasLimitBreach;
    showBreachModal(): void;
    getPaymentResponse(): Partial<PaymentOrderResponseItem> | undefined;
    hideBreachModal(): void;
    isTemplateSaved(): boolean;
    private buildPaymentTemplateForm;
    openTemplateModal(): void;
    closeTemplateModal(): void;
    submitPaymentTemplate(templateName?: string): void;
    submitPayment(approved?: boolean): void;
    getForexDetails(payment: PaymentDetails): Partial<ForexDetails> | undefined;
    isApprovalEnabled(): boolean;
    isPaymentTemplateEnabled(): boolean;
    isNewPaymentEnabled(): boolean;
    discardPayment(): void;
    resetPayment(): void;
    toggleConfirmationDialog(): void;
    showDiscardDialog(): boolean;
    isApprovalPending(): boolean;
    isSubmitting$(): BehaviorSubject<boolean>;
    getPaymentStatusType(): PaymentSubmitStatuses;
    getPaymentMessage(): string | undefined;
    getPurposeDescription(purpose: string): string | undefined;
    doneEditing(): void;
    navigateToAfterSuccessPage(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReviewPaymentContainerComponent, [null, null, null, null, null, { optional: true; }, null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ReviewPaymentContainerComponent, "bb-review-payment", never, {}, {}, never, never>;
}
