import { PaymentOptionsRequest } from '@backbase/data-ang/payment-order-options';
import { PaymentTemplate } from '@backbase/data-ang/payment-template';
import { FormGroup } from '@angular/forms';
import { PaymentDetails, PaymentFormGroup, PaymentTypeConfig } from '@backbase/payment-orders-ang';
export declare const mapPaymentOptionRequest: (formItem: PaymentDetails, clientServiceAgreementID?: string, clientJurisdiction?: string) => PaymentOptionsRequest;
export declare function normalizePaymentType(selectedPaymentItem: PaymentTemplate | undefined): string | undefined;
export declare function normalisePaymentTemplate(paymentTemplate: PaymentTemplate): {
    details: {
        paymentType: string | undefined;
        originatorAccount?: import("@backbase/data-ang/payment-template").OriginatorAccount | undefined;
        instructionPriority?: import("@backbase/data-ang/payment-template").InstructionPriority | undefined;
        entryClass?: string | undefined;
        additions?: {
            [key: string]: string;
        } | undefined;
        transferTransactionInformation?: import("@backbase/data-ang/payment-template").TransferTransactionInformation | undefined;
    };
    id: string;
    name?: string | undefined;
    createdAt: string;
    serviceAgreementId: string;
    actions?: import("@backbase/data-ang/payment-template").Action[] | undefined;
    additions?: {
        [key: string]: string;
    } | undefined;
};
/**
 * Reset beneficiary address if the form contains address details but the selected config does not contain address config.
 */
export declare function resetBeneficiaryAddress(paymentTypeConfig: PaymentTypeConfig, form: FormGroup): void;
/**
 * Reset bank details if the form contains bank details but the selected config does not contain specific bank detail config.
 */
export declare function resetBankDetails(paymentTypeConfig: PaymentTypeConfig, form: FormGroup): void;
export declare function resetBankField(fieldName: string, counterpartyConfig: PaymentFormGroup, form: FormGroup): void;
