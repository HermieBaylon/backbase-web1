import { Component, ChangeDetectionStrategy, Input, Optional } from '@angular/core';
import { AssetsService } from '@backbase/foundation-ang/core';
import { ProgressStatus, TransactionSigningService } from '@backbase/identity-auth/transaction-signing';
import { datePart } from '@backbase/payment-orders-ang';
import { merge } from 'rxjs';
import { mapTo } from 'rxjs/operators';
import { P2PLimitReasonCodes } from '../../../models/create-payment.model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "@backbase/identity-auth/transaction-signing";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@backbase/ui-ang/alert";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "../initiator-details/initiator-details.component";
import * as i7 from "../creditor-account/creditor-account.component";
import * as i8 from "../remittance-details/remittance-details.component";
import * as i9 from "../creditor-details/creditor-details.component";
import * as i10 from "../counterparty-details/counterparty-details.component";
import * as i11 from "../schedule-details/schedule-details.component";
import * as i12 from "@backbase/payment-orders-ang";
import * as i13 from "@backbase/ui-ang/load-button";
import * as i14 from "@backbase/ui-ang/dropdown-menu";
import * as i15 from "@backbase/ui-ang/header";
import * as i16 from "@backbase/ui-ang/modal";
import * as i17 from "@angular/common";
import * as i18 from "@backbase/ui-ang/button";
import * as i19 from "@backbase/ui-ang/keyboard-click-directive";
export class AdaptedReviewComponent {
    constructor(assetsService, identityService) {
        this.assetsService = assetsService;
        this.identityService = identityService;
        /**
         * Asset resolver for quick-transfer widget
         */
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-payord-omni-payment-widget-ang',
            getURIFromAssetID: (assetId) => `${assetId}`,
        });
        /**
         * Stream of resolved success image path
         */
        this.successImg = this.resolveAsset('succeed.svg');
        /**
         * Stream of resolved success image path
         */
        this.successImgNoMotion = this.resolveAsset('no-motion.svg');
        /**
         * unique time to reload animated svg image everytime
         */
        this.timestamp = new Date().getTime();
    }
    ngOnInit() {
        var _a, _b;
        this.isLoading$ = merge((_a = this.methods) === null || _a === void 0 ? void 0 : _a.isSubmitting$(), (_b = this.identityService) === null || _b === void 0 ? void 0 : _b.requestSubject.pipe(mapTo(false)));
    }
    /*
     * Text for alert error content for server errors
     */
    get errorText() {
        var _a, _b, _c;
        const amount = (_b = (_a = this.breachError) === null || _a === void 0 ? void 0 : _a.reasonText) === null || _b === void 0 ? void 0 : _b.split('|')[1];
        if (this.isUserDeclined) {
            return $localize `:@@initiate-payment.adapted-review.user-decline-error-message:`;
        }
        switch ((_c = this.breachError) === null || _c === void 0 ? void 0 : _c.reasonCode) {
            case P2PLimitReasonCodes.DAILY:
                return $localize `:@@initiate-payment.adapted-review.P2P-daily-limit-error-message:The amount exceeds the daily limit of ${amount}`;
            case P2PLimitReasonCodes.MONTHLY:
                return $localize `:@@initiate-payment.adapted-review.P2P-monthly-limit-error-message:The amount exceeds the monthly limit of ${amount}`;
            case P2PLimitReasonCodes.MAX_TRANSFER:
                return $localize `:@@initiate-payment.adapted-review.P2P-max-limit-error-message:This amount can't exceed ${amount}`;
            case P2PLimitReasonCodes.MIN_TRANSFER:
                return $localize `:@@initiate-payment.adapted-review.P2P-max-limit-daily-error-message:This amount can't be lower than ${amount}`;
            default:
                return $localize `:@@initiate-payment.adapted-review.default-error-message:Failed to submit payment. Please try again later.`;
        }
    }
    /*
     * Title for alert error content for server errors
     */
    get errorTitle() {
        if (this.breachError) {
            return $localize `:@@initiate-payment.adapted-review.P2P-limit-error-title:Payment Failed Due to an Exceeding Limit`;
        }
        else if (this.isUserDeclined) {
            return $localize `:@@initiate-payment.adapted-review.user-declined-error-title:Your Transfer Has Been Cancelled.`;
        }
        else {
            return $localize `:@@initiate-payment.adapted-review.generic-error-title:`;
        }
    }
    /*
     * Boolean flag to display whether transfer date is for future
     */
    get isScheduledTransfer() {
        var _a;
        const today = datePart();
        const transferDate = datePart((_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule.startDate);
        return new Date(transferDate) > new Date(today);
    }
    get isUserDeclined() {
        return this.status === ProgressStatus.USER_DECLINED;
    }
}
/** @nocollapse */ AdaptedReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdaptedReviewComponent, deps: [{ token: i1.AssetsService }, { token: i2.TransactionSigningService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AdaptedReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AdaptedReviewComponent, selector: "bb-adapted-review-container", inputs: { payment: "payment", status: "status", paymentConfig: "paymentConfig", methods: "methods", breachError: "breachError" }, ngImport: i0, template: "<ng-container *ngTemplateOutlet=\"status === 'SUCCESS' ? successScreen : reviewTemplate\"> </ng-container>\n\n<ng-template #reviewTemplate>\n  <div\n    *ngIf=\"isLoading$ | async\"\n    data-role=\"adapted-review-loader\"\n    class=\"bb-loading-indicator-wrapper bb-loading-indicator-wrapper--overlay\"\n  >\n    <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </div>\n\n  <fieldset class=\"bb-fieldset omni-payment-adapted-review\">\n    <legend class=\"bb-label bb-block bb-block--lg\" i18n=\"@@omni-payment-wrapper-review-page-title.label\">\n      Review your transfer\n    </legend>\n    <ng-container *ngIf=\"payment\">\n      <bb-alert-ui\n        *ngIf=\"status === 'ERROR' || status === 'USER_DECLINED' || breachError\"\n        [title]=\"errorTitle\"\n        (close)=\"(false)\"\n        modifier=\"error\"\n      >\n        <span data-role=\"failure-message\">{{ errorText }}</span>\n      </bb-alert-ui>\n\n      <div *ngIf=\"payment?.isIntraLegalEntity\" class=\"bb-block bb-block--sm bb-inline-stack bb-text-support\">\n        <div class=\"bb-inline-stack__item\">\n          <bb-icon-ui name=\"domain\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"bb-inline-stack__item bb-text-bold\"\n          i18n=\"@@omni-payment-wrapper-review-payment-intra-company-payment.label\"\n        >\n          Intracompany payment\n        </div>\n      </div>\n\n      <div class=\"bb-item-log bb-block bb-block--lg\">\n        <div class=\"bb-item-log__record item-log__record--has-bullet\">\n          <div class=\"bb-stack bb-stack--align-top\">\n            <div\n              class=\"bb-item-log-record__bullet-icon bb-item-log-record__bullet-icon--filled bb-stack__item bb-stack__item--spacing-md\"\n            ></div>\n            <div class=\"bb-item-log-record__details\">\n              <bb-payment-initiator-details [data]=\"payment?.initiator\" [paymentConfig]=\"paymentConfig\">\n              </bb-payment-initiator-details>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-item-log__record item-log__record--has-bullet\">\n          <div class=\"bb-stack bb-stack--align-top\">\n            <div class=\"bb-item-log-record__bullet-icon bb-stack__item bb-stack__item--spacing-md\"></div>\n            <div class=\"bb-item-log-record__details\">\n              <bb-creditor-account [data]=\"payment?.counterparty\" [paymentConfig]=\"paymentConfig\">\n              </bb-creditor-account>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-block bb-block--lg\">\n        <bb-payment-remittance-details\n          [data]=\"payment?.remittanceInfo\"\n          [transferFee]=\"payment?.transferFee\"\n          [chargeBearer]=\"payment?.chargeBearer\"\n          [forexDetails]=\"methods?.getForexDetails(payment)\"\n          [paymentConfig]=\"paymentConfig\"\n        ></bb-payment-remittance-details>\n      </div>\n\n      <bb-payment-creditor-details\n        [data]=\"payment?.counterparty\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-creditor-details>\n\n      <bb-payment-counterparty-details\n        [data]=\"payment?.counterparty\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-counterparty-details>\n\n      <bb-payment-schedule-details\n        [data]=\"payment?.schedule\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-schedule-details>\n\n      <div\n        *ngIf=\"\n          payment?.remittanceInfo?.description ||\n          payment?.remittanceInfo?.paymentReference ||\n          payment?.counterparty.messageToBank ||\n          payment?.counterparty.remittanceInformation\n        \"\n      >\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.paymentReference\">\n          <div class=\"bb-text-bold\" data-role=\"payment-reference-label\">\n            <bb-payord-dynamic-label\n              name=\"paymentReference\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Payment reference\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-remittance-info-payment-reference.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-reference\">\n            {{ payment?.remittanceInfo?.paymentReference }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md bb-inline-stack bb-stack--align-top\">\n          <bb-icon-ui name=\"subject\" class=\"bb-stack__item bb-stack__item--spacing-sm\"></bb-icon-ui>\n          <div class=\"bb-stack__item\">\n            <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n              <bb-payord-dynamic-label\n                name=\"description\"\n                parentName=\"remittanceInfo\"\n                defaultLabel=\"Memo\"\n                i18n-defaultLabel=\"@@omni-payment-wrapper-review-remittance-info-description.label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"payment-description\">\n              {{ payment?.remittanceInfo?.description }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty.remittanceInformation\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-counterparty-message-to-beneficiary.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ payment?.counterparty?.remittanceInformation }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.messageToBank || payment?.counterparty?.messageToBank\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary bank\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-message-to-bank.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ payment?.counterparty?.messageToBank || payment?.messageToBank }}\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </fieldset>\n\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      class=\"bb-button-bar__button\"\n      data-role=\"submit-button\"\n      (click)=\"methods?.submit()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      *ngIf=\"!methods?.isApprovalEnabled()\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-submit-payment.label\"\n    >\n      Confirm and Send Money\n    </button>\n    <div class=\"btn-group bb-button-bar__button\" data-role=\"button-group\" *ngIf=\"methods?.isApprovalEnabled()\">\n      <bb-load-button-ui\n        color=\"primary\"\n        [isLoading]=\"methods?.isSubmitting$() | async\"\n        (click)=\"methods?.submit()\"\n        i18n=\"@@omni-payment-wrapper-review-btn-group-submit-payment.label\"\n      >\n        Submit\n      </bb-load-button-ui>\n\n      <bb-dropdown-menu-ui\n        class=\"btn-group\"\n        btnColor=\"primary\"\n        icon=\"caret-down\"\n        data-role=\"dropdown-menu\"\n        container=\"body\"\n        position=\"top-right\"\n      >\n        <ng-template bbDropdownMenuItem>\n          <button\n            role=\"menuitem\"\n            type=\"button\"\n            class=\"dropdown-item\"\n            data-role=\"bus-submit-and-approve-button\"\n            [disabled]=\"methods?.isSubmitting$() | async\"\n            (bbKeyboardClick)=\"methods?.submit(true)\"\n            i18n=\"@@omni-payment-wrapper-review-btn-group-submit-and-approve-payment.label\"\n          >\n            Submit and Approve\n          </button>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n    <button\n      class=\"bb-button-bar__button\"\n      bbButton\n      color=\"secondary\"\n      data-role=\"edit-button\"\n      (click)=\"methods?.edit()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-edit-payment.label\"\n    >\n      Edit\n    </button>\n    <button\n      bbButton\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n      data-role=\"cancel-button\"\n      (click)=\"methods?.toggleDiscardDialog()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-discard-payment.label\"\n    >\n      Cancel\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #successScreen>\n  <div class=\"bb-text-align-center bb-block--xl\">\n    <picture>\n      <source srcset=\"{{ successImgNoMotion | async }}\" media=\"(prefers-reduced-motion: reduce)\" />\n      <img\n        srcset=\"{{ (successImg | async) + '?' + timestamp }}\"\n        alt=\"Success!\"\n        i18n-alt=\"Success!|Text for transfer succeeded@@omni-payment-wrapper.complete.transfer-succeeded\"\n        data-role=\"transfer-success-anim\"\n        class=\"img-fluid\"\n      />\n    </picture>\n    <div></div>\n    <bb-header-ui\n      headingClasses=\"bb-text-semi-bold\"\n      headingType=\"h2\"\n      heading=\"Success!\"\n      i18n-heading=\"Success!|Text for success@@omni-payment-wrapper.complete.success\"\n    ></bb-header-ui>\n    <div data-role=\"adapted-success-message\" *ngIf=\"!payment?.paymentOrderId; else editPaymentMessageTemplate\">\n      <span\n        *ngIf=\"!isScheduledTransfer\"\n        class=\"bb-text-support\"\n        i18n=\"Success Transfer|Text for success transfer@@omni-payment-wrapper.complete.success-message\"\n      >\n        You\u2019ve just transferred\n        {{ payment?.remittanceInfo?.amountGroup.currency }}\n        {{ payment?.remittanceInfo?.amountGroup.amount }} to {{ payment?.counterparty.name }}'s.\n      </span>\n      <span\n        *ngIf=\"isScheduledTransfer\"\n        class=\"bb-text-support\"\n        i18n=\"\n          Success Scheduled Transfer|Text for success scheduled\n          transfer@@omni-payment-wrapper.scheduled-transfer.complete.success-message\"\n      >\n        You\u2019ve just scheduled transfer to {{ payment?.counterparty.name }}'s.\n      </span>\n    </div>\n    <ng-template #editPaymentMessageTemplate>\n      <span\n        class=\"bb-text-support\"\n        i18n=\"Success edit transfer|Text for edit transfer success@@omni-payment-wrapper.complete.success-edit-message\"\n        data-role=\"adapted-success-edit-message\"\n      >\n        You\u2019ve just edited the scheduled transfer to\n        {{ payment?.counterparty.name }}'s.\n      </span>\n    </ng-template>\n  </div>\n  <div class=\"bb-text-align-center bb-block bb-block--xl\" *ngIf=\"payment?.counterparty?.saveNewContact\">\n    <div class=\"bb-payment-account-details-card bb-inline-stack\">\n      <div class=\"bb-inline-stack\">\n        <ng-container *ngIf=\"!!(methods?.getSaveContactResponse$ | async)?.id; else saveContactFail\">\n          <bb-icon-ui name=\"success\" color=\"success\" class=\"bb-stack__item bb-stack__item--spacing-sm\"></bb-icon-ui>\n          <span\n            i18n=\"\n              Success Save Contact|Text for success save contact@@omni-payment-wrapper.complete.success-save-contact\"\n            >{{ payment?.counterparty?.name }} is saved to your contacts</span\n          >\n        </ng-container>\n        <ng-template #saveContactFail>\n          <bb-icon-ui\n            name=\"error-outline\"\n            color=\"danger\"\n            class=\"bb-stack__item bb-stack__item--spacing-sm\"\n          ></bb-icon-ui>\n          <span i18n=\"Fail Save Contact|Text for fail save contact@@omni-payment-wrapper.complete.fail-save-contact\"\n            >Can\u2019t save {{ payment?.counterparty?.name }} to your contacts. Please try again later.</span\n          >\n        </ng-template>\n      </div>\n    </div>\n  </div>\n  <div class=\"bb-text-align-center\">\n    <div class=\"bb-block bb-block--md\">\n      <button\n        *ngIf=\"!payment?.paymentOrderId\"\n        bbButton\n        color=\"primary\"\n        (click)=\"methods?.reset()\"\n        i18n=\"Make another transfer button|Make another transfer@@omni-payment-wrapper.complete.button.transfer-done\"\n      >\n        Make another transfer\n      </button>\n      <button\n        *ngIf=\"payment?.paymentOrderId\"\n        bbButton\n        color=\"primary\"\n        (click)=\"methods?.navigateToAfterSuccessPage()\"\n        i18n=\"\n          View scheduled transfers button|View scheduled\n          transfers@@omni-payment-wrapper.complete.button.scheduled-transfer-done\"\n      >\n        View scheduled transfers\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<bb-modal-ui\n  [isOpen]=\"methods?.showDiscardDialog()\"\n  (cancel)=\"methods?.toggleDiscardDialog()\"\n  (confirm)=\"methods?.reset()\"\n>\n  <bb-modal-header-ui\n    title=\"Discard entered data?\"\n    i18n-title=\"omni-payment-adapted-review-discard-modal-title\"\n  ></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-container i18n=\"@@omni-payment-adapted-review-discard-modal-content\">\n        Are you sure to exit and discard all changes? Entered data will be lost.\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"methods?.reset()\"\n          data-role=\"discard-action-btn\"\n          i18n=\"@@omni-payment-adapted-review-discard-modal-discard-btn\"\n        >\n          Discard\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"methods?.toggleDiscardDialog()\"\n          data-role=\"cancel-action-btn\"\n          i18n=\"@@omni-payment-adapted-review-discard-modal-cancel-btn\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i4.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6.InitiatorDetailsComponent, selector: "bb-payment-initiator-details", inputs: ["data", "paymentConfig"] }, { type: i7.CreditorAccountComponent, selector: "bb-creditor-account", inputs: ["data", "paymentConfig"] }, { type: i8.RemittanceDetailsComponent, selector: "bb-payment-remittance-details", inputs: ["data", "paymentConfig", "forexDetails", "transferFee", "chargeBearer"] }, { type: i9.CreditorDetailsComponent, selector: "bb-payment-creditor-details", inputs: ["data", "paymentConfig"] }, { type: i10.CounterpartyDetailsComponent, selector: "bb-payment-counterparty-details", inputs: ["data", "paymentConfig"] }, { type: i11.ScheduleDetailsComponent, selector: "bb-payment-schedule-details", inputs: ["data", "paymentConfig"] }, { type: i12.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i13.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i14.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i15.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i16.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i16.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i16.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i16.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i17.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i17.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i18.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i14.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i19.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i16.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i16.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i17.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdaptedReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-adapted-review-container',
                    templateUrl: './adapted-review.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.AssetsService }, { type: i2.TransactionSigningService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { payment: [{
                type: Input
            }], status: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }], methods: [{
                type: Input
            }], breachError: [{
                type: Input
            }] } });
//# sourceMappingURL=adapted-review.component.js.map