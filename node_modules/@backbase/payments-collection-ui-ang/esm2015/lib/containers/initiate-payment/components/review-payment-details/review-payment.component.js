import { Component, ElementRef, Inject, Optional, ViewChild } from '@angular/core';
import { ApprovalStatus, BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN, contactItemToService, defaultPaymentSuccessEventName, getForexDetailsFromPayment, getLabelFromPaymentConfig, InitiatePaymentHeaderStates, isObjectTruthy, ModalState, NavigationService, noWhitespaceValidator, PaymentHooks, PaymentMode, PaymentOrderHttpService, PaymentState, PaymentSubmitStatuses, ProgressStatus, ReviewScreens, RoutableModalService, StateService, Status, toPostRequest, triggerPaymentHook, } from '@backbase/payment-orders-ang';
import { catchError, filter, map, pluck, takeUntil, tap } from 'rxjs/operators';
import { BehaviorSubject, EMPTY, of, Subject } from 'rxjs';
import { PaymentOrderProgressStatusGet, } from '@backbase/data-ang/payment-order';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import { FormBuilder, Validators } from '@angular/forms';
import { TransactionSigningHelperService } from '@backbase/identity-auth/transaction-signing';
import { ActiveContactStatus } from '@backbase/data-ang/contact-manager';
import { CreatePaymentService } from '../../services/create-payment.service';
import { CreatePaymentConfigSetupService } from '../../services/create-payment-config-setup.service';
import { commonI18n, reviewI18n } from '../../constants/initiate-payment.i18n';
import { P2PLimitReasonCodes } from '../../models/create-payment.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/payment-orders-ang";
import * as i3 from "../../services/create-payment.service";
import * as i4 from "../../services/create-payment-config-setup.service";
import * as i5 from "@backbase/identity-auth/transaction-signing";
import * as i6 from "../adapted-review/adapted-review-container/adapted-review.component";
import * as i7 from "@backbase/ui-ang/header";
import * as i8 from "@backbase/ui-ang/alert";
import * as i9 from "@backbase/ui-ang/icon";
import * as i10 from "@backbase/ui-ang/load-button";
import * as i11 from "@backbase/ui-ang/dropdown-menu";
import * as i12 from "@backbase/ui-ang/loading-indicator";
import * as i13 from "@backbase/ui-ang/modal";
import * as i14 from "@angular/common";
import * as i15 from "@backbase/ui-ang/button";
import * as i16 from "@backbase/ui-ang/keyboard-click-directive";
export class ReviewPaymentContainerComponent {
    constructor(formBuilder, stateService, eventBus, navigationService, createPaymentService, modalService, paymentOrderHttpService, createPaymentSetup, transactionSigningHelper, paymentErrors) {
        this.formBuilder = formBuilder;
        this.stateService = stateService;
        this.eventBus = eventBus;
        this.navigationService = navigationService;
        this.createPaymentService = createPaymentService;
        this.modalService = modalService;
        this.paymentOrderHttpService = paymentOrderHttpService;
        this.createPaymentSetup = createPaymentSetup;
        this.transactionSigningHelper = transactionSigningHelper;
        this.paymentErrors = paymentErrors;
        this.showConfirmation = false;
        this.gc$ = new Subject();
        this.saveContactResponse$ = new BehaviorSubject(null);
        this.paymentOrderId = '';
        this.approvalPending = false;
        this.enablePaymentTemplate = true;
        this.saveTemplate = false;
        this.canApprove = false;
        this.showBreachDetails = false;
        this.paymentMode = PaymentMode;
        this.isErrorTitleDisplayed = true;
        this.reviewScreens = ReviewScreens;
        this.widgetOptions = {};
        this.errors = [];
        this.submitting$ = new BehaviorSubject(false);
        this.savingTemplate$ = new BehaviorSubject(false);
        this.paymentStatus$ = new BehaviorSubject(undefined);
        this.selectedPaymentConfig$ = this.createPaymentService.selectedPaymentConfig$;
        this.paymentTemplateModalState = new BehaviorSubject(undefined);
        this.methods = {
            edit: this.onEdit.bind(this),
            submit: this.submitPayment.bind(this),
            reset: this.resetPayment.bind(this),
            discard: this.discardPayment.bind(this),
            toggleDiscardDialog: this.toggleConfirmationDialog.bind(this),
            showDiscardDialog: this.showDiscardDialog.bind(this),
            isApprovalEnabled: this.isApprovalEnabled.bind(this),
            isPaymentTemplateEnabled: this.isPaymentTemplateEnabled.bind(this),
            isNewPaymentEnabled: this.isNewPaymentEnabled.bind(this),
            isSavingTemplate$: this.isSavingTemplate$.bind(this),
            getPaymentMessage: this.getPaymentMessage.bind(this),
            getPurposeDescription: this.getPurposeDescription.bind(this),
            isSubmitting$: this.isSubmitting$.bind(this),
            getLabelText: getLabelFromPaymentConfig,
            getForexDetails: this.getForexDetails.bind(this),
            showBreachModal: this.showBreachModal.bind(this),
            isTemplateSaved: this.isTemplateSaved.bind(this),
            openTemplateModal: this.openTemplateModal.bind(this),
            doneEditing: this.doneEditing.bind(this),
            navigateToAfterSuccessPage: this.navigateToAfterSuccessPage.bind(this),
            getPaymentResponse: this.getPaymentResponse.bind(this),
            getSaveContactResponse$: this.saveContactResponse$,
            getPaymentStatusType: this.getPaymentStatusType.bind(this),
        };
        this.createTemplatePermission$ = this.paymentOrderHttpService.createPermission$.pipe(map(() => true), catchError((error) => of(false)));
    }
    onEdit() {
        this.stateService.setPaymentState(PaymentState.EDIT);
        this.navigationService.form();
    }
    ngOnInit() {
        this.stateService.setPaymentState(PaymentState.REVIEW);
        this.canApprove = this.stateService.canApprove;
        this.createPaymentSetup.reviewTemplate$
            .pipe(takeUntil(this.gc$), filter((template) => !!template))
            .subscribe((template) => (this.reviewTemplate = template));
        this.createPaymentSetup.options$.pipe(takeUntil(this.gc$)).subscribe((options) => {
            this.isErrorTitleDisplayed = Boolean(options.isErrorTitleDisplayed);
            this.widgetOptions = options;
            this.header = this.createPaymentSetup.getHeader(InitiatePaymentHeaderStates.REVIEW);
        });
        this.paymentItem$ = this.stateService.form$.pipe(takeUntil(this.gc$), tap((form) => (this.paymentForm = form)), map((form) => (form === null || form === void 0 ? void 0 : form.getRawValue()) || {}));
        this.paymentItem$.pipe(takeUntil(this.gc$)).subscribe((data) => {
            if (data && isObjectTruthy(data)) {
                this.paymentItem = data;
            }
            else {
                this.stateService.setPaymentState(PaymentState.INITIAL);
                this.navigationService.form();
            }
        });
        this.paymentTemplateForm = this.buildPaymentTemplateForm();
    }
    isSavingTemplate$() {
        return this.savingTemplate$;
    }
    onSubmit(approved = false) {
        this.submitting$.next(true);
        if (this.paymentItem.counterparty.saveNewContact) {
            this.saveNewContact();
        }
        this.postPaymentOrder(approved);
    }
    saveNewContact() {
        this.paymentOrderHttpService
            .saveNewContact(Object.assign(Object.assign({}, contactItemToService(this.paymentItem.counterparty)), { accessContextScope: this.widgetOptions.accessContextScope }))
            .pipe(takeUntil(this.gc$))
            .subscribe((response) => {
            const { id, status } = response || {};
            this.saveContactResponse$.next(response);
            const contactSaved = !!id;
            this.paymentOrderHttpService.showNotification(contactSaved, {
                header: contactSaved
                    ? status === ActiveContactStatus.PENDINGAPPROVAL
                        ? reviewI18n.newContactSubmitSuccessPendingApproval
                        : reviewI18n.newContactSubmitSuccess
                    : reviewI18n.newContactSubmitFailure,
            });
        });
    }
    handlePaymentError(error) {
        var _a, _b, _c;
        this.genericError = (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.message;
        this.errors = (_b = error === null || error === void 0 ? void 0 : error.error) === null || _b === void 0 ? void 0 : _b.errors;
        if (((_c = this.errors) === null || _c === void 0 ? void 0 : _c.length) || this.genericError) {
            const errorObject = {
                errorResponse: error,
                genericMessage: this.genericError,
                errors: this.errors,
                paymentErrors: this.paymentErrors,
                notificationHeader: reviewI18n.submitPaymentFailure,
            };
            this.paymentOrderHttpService.manageErrorResponse(errorObject);
        }
        else {
            this.paymentOrderHttpService.showNotification(false, {
                header: reviewI18n.submitPaymentFailureUnknownErrorHeader,
                message: reviewI18n.submitPaymentFailureUnknownError,
            });
        }
        const message = error === null || error === void 0 ? void 0 : error.statusText;
        let status;
        switch (message) {
            case 'rejected_by_user':
                status = ProgressStatus.USER_DECLINED;
                break;
            default:
                status = 'ERROR';
        }
        this.paymentStatus$.next(status);
        this.submitting$.next(false);
    }
    putOrPostPaymentOrder(post) {
        var _a;
        const isCopyPayment = ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === PaymentMode.COPY_PAYMENT;
        const paymentOrderId = this.paymentItem.paymentOrderId;
        return paymentOrderId && !isCopyPayment
            ? this.paymentOrderHttpService.putPaymentOrder(Object.assign(Object.assign({}, post), { id: paymentOrderId }), paymentOrderId)
            : this.paymentOrderHttpService.postPaymentOrder(post);
    }
    postPaymentOrder(approved) {
        const shouldApprove = approved ? { approved } : null;
        this.putOrPostPaymentOrder(toPostRequest(Object.assign(Object.assign({}, this.paymentItem), shouldApprove)))
            .pipe(takeUntil(this.gc$), catchError((error) => {
            var _a;
            (_a = this.alertContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollIntoView(false);
            if (this.hasLimitBreach(error)) {
                this.paymentStatus$.next('LIMIT_BREACH');
                this.breachError = error.error || error;
                this.submitting$.next(false);
            }
            else {
                this.handlePaymentError(error);
            }
            return EMPTY;
        }))
            .subscribe((response) => {
            var _a;
            if ((_a = this.transactionSigningHelper) === null || _a === void 0 ? void 0 : _a.isTransactionSigningResponse(response)) {
                this.handleTransactionSigning(response);
            }
            else {
                this.handlePaymentSubmit(response);
            }
        });
    }
    handlePaymentSubmit(response) {
        var _a;
        const { status: _paymentStatus } = response;
        const isApprovalRejected = _paymentStatus === ApprovalStatus.REJECTED;
        const status = !!response.id && !isApprovalRejected ? 'SUCCESS' : _paymentStatus || 'ERROR';
        this.paymentOrderId = response === null || response === void 0 ? void 0 : response.id;
        this.approvalPending = _paymentStatus === Status.ENTERED || _paymentStatus === ProgressStatus.PENDING_APPROVAL;
        if (!!response.id && !isApprovalRejected) {
            const isEditPayment = ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === PaymentMode.EDIT_PAYMENT;
            const { submitSuccess, submitSuccessPendingApproval, editSubmitSuccess } = this.widgetOptions.isDebitPayment
                ? reviewI18n.debitPayment
                : reviewI18n.defaultPayment;
            const header = isEditPayment
                ? editSubmitSuccess
                : this.approvalPending
                    ? submitSuccessPendingApproval
                    : submitSuccess;
            this.paymentOrderHttpService.showNotification(true, { header });
            this.eventBus.publish(this.widgetOptions.successEventName || defaultPaymentSuccessEventName, true);
            this.header = this.createPaymentSetup.getHeader(InitiatePaymentHeaderStates.SUBMITTED);
        }
        this.paymentResponse = response;
        this.paymentStatus$.next(status);
        this.submitting$.next(false);
    }
    handleTransactionSigning(response) {
        if (!this.transactionSigningHelper) {
            return;
        }
        const paymentOrderId = response['payment-order-id'];
        if (paymentOrderId) {
            this.transactionSigningHelper.getTransactionInfo({
                data: response,
                asyncPollingOptions: {
                    pollInterval: this.widgetOptions.pollInterval,
                    maxRetries: 3,
                    pollUntilFn: this.isPaymentConfirmed,
                    complete$: this.gc$,
                },
                fetchFn: this.getPaymentProgressStatus.bind(this),
                onSuccess: this.onTransactionSigningSuccess.bind(this, paymentOrderId),
                onRejected: this.onTransactionSigningReject.bind(this, paymentOrderId),
                onDeclined: this.onTransactionSigningDecline.bind(this),
                onError: this.onTransactionSigningError.bind(this),
            });
        }
    }
    onTransactionSigningSuccess(paymentOrderId) {
        this.paymentOrderHttpService
            .getPayment(paymentOrderId)
            .pipe(takeUntil(this.gc$))
            .subscribe(this.handlePaymentSubmit.bind(this));
    }
    onTransactionSigningReject(paymentOrderId, _) {
        this.handleRejectedPayment(paymentOrderId);
    }
    onTransactionSigningDecline({ status }) {
        const header = this.widgetOptions.isDebitPayment ? reviewI18n.submitDebitFailure : reviewI18n.submitPaymentFailure;
        this.paymentStatus$.next(status);
        this.submitting$.next(false);
        this.paymentOrderHttpService.showNotification(false, { header });
    }
    onTransactionSigningError({ status }) {
        const header = this.widgetOptions.isDebitPayment ? reviewI18n.submitDebitFailure : reviewI18n.submitPaymentFailure;
        const errorMessage = status === 'COED' ? reviewI18n.submitPaymentApprovalFailureCOED : { header };
        this.submitting$.next(false);
        this.paymentStatus$.next(status === 'COED' ? 'COED' : 'ERROR');
        this.paymentOrderHttpService.showNotification(false, Object.assign({}, errorMessage));
    }
    handleRejectedPayment(paymentOrderId) {
        this.paymentOrderHttpService
            .getPayment(paymentOrderId)
            .pipe(takeUntil(this.gc$))
            .subscribe((response) => {
            if (response.reasonCode === 'LTBR') {
                this.paymentStatus$.next('LIMIT_BREACH');
                this.breachError = {
                    message: '',
                    breachReport: response.breachReports,
                };
            }
            else {
                const header = this.widgetOptions.isDebitPayment
                    ? reviewI18n.submitDebitFailure
                    : reviewI18n.submitPaymentFailure;
                this.paymentOrderHttpService.showNotification(false, { header });
                this.paymentStatus$.next('ERROR');
            }
            this.submitting$.next(false);
        });
    }
    getPaymentProgressStatus(data) {
        return this.paymentOrderHttpService.getPaymentProgressStatus((data === null || data === void 0 ? void 0 : data['payment-order-id']) || '').pipe(map((res) => {
            if ((res === null || res === void 0 ? void 0 : res.progressStatus) === PaymentOrderProgressStatusGet.ProgressStatusEnum.REJECTED &&
                res.reasonCode === 'COED') {
                res = Object.assign(Object.assign({}, res), { progressStatus: res.reasonCode });
            }
            return res;
        }), pluck('progressStatus'));
    }
    isPaymentConfirmed(status) {
        return !!status && status !== ProgressStatus.CONFIRMATION_PENDING && status !== ProgressStatus.SENDING;
    }
    onHooksDone(approved, success = true) {
        if (success) {
            this.onSubmit(approved);
        }
        else {
            this.submitting$.next(false);
        }
    }
    hasLimitBreach(response) {
        var _a;
        const isP2PLimitBreach = Object.values(P2PLimitReasonCodes).includes(response.reasonCode);
        return !!(response === null || response === void 0 ? void 0 : response.breachReport) || !!((_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.breachReport) || isP2PLimitBreach;
    }
    showBreachModal() {
        this.showBreachDetails = true;
    }
    getPaymentResponse() {
        return this.paymentResponse;
    }
    hideBreachModal() {
        this.showBreachDetails = false;
    }
    isTemplateSaved() {
        return this.saveTemplate;
    }
    buildPaymentTemplateForm() {
        return this.formBuilder.group({
            templateName: ['', [Validators.required, noWhitespaceValidator]],
        });
    }
    openTemplateModal() {
        this.paymentTemplateModalState.next(ModalState.Preview);
    }
    closeTemplateModal() {
        this.paymentTemplateModalState.next(ModalState.Hidden);
        this.paymentTemplateForm.reset();
    }
    submitPaymentTemplate(templateName = '') {
        if (this.paymentOrderId) {
            const paymentOrderId = this.paymentOrderId;
            const name = templateName || this.paymentTemplateForm.controls['templateName'].value;
            const templateObject = {
                paymentOrderId,
                name,
            };
            if (this.paymentTemplateForm.invalid) {
                return;
            }
            this.savingTemplate$.next(true);
            this.paymentOrderHttpService
                .postPaymentTemplate(templateObject)
                .pipe(takeUntil(this.gc$))
                .subscribe(() => {
                this.saveTemplate = true;
                this.savingTemplate$.next(false);
                this.paymentOrderHttpService.showNotification(true, {
                    header: commonI18n.templateSaveSuccess(name),
                    headerContext: { name },
                });
                this.paymentTemplateForm.reset();
                this.paymentTemplateModalState.next(ModalState.Hidden);
                this.eventBus.publish((this.widgetOptions.successEventName || defaultPaymentSuccessEventName), true);
            }, () => {
                this.paymentOrderHttpService.showNotification(false, {
                    header: commonI18n.templateSaveFailed,
                });
                this.savingTemplate$.next(false);
            });
        }
    }
    submitPayment(approved = false) {
        const hasHooks = this.createPaymentSetup.hooks && this.createPaymentSetup.hooks[PaymentHooks.onSubmit];
        this.submitting$.next(true);
        if (hasHooks) {
            triggerPaymentHook(this.createPaymentSetup.hooks, PaymentHooks.onSubmit, this.onHooksDone.bind(this, approved), this.paymentForm);
        }
        else {
            this.onSubmit(approved);
        }
    }
    getForexDetails(payment) {
        return getForexDetailsFromPayment(payment);
    }
    isApprovalEnabled() {
        return !!this.widgetOptions.enableApprovals && this.canApprove;
    }
    isPaymentTemplateEnabled() {
        return !!this.widgetOptions.enableSavePaymentAsTemplate && this.enablePaymentTemplate;
    }
    isNewPaymentEnabled() {
        return this.widgetOptions.enableNewPaymentButton !== false;
    }
    discardPayment() {
        var _a, _b;
        if ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.isModalView) {
            (_b = this.modalService) === null || _b === void 0 ? void 0 : _b.closeModal();
        }
        else {
            this.resetPayment();
        }
    }
    resetPayment() {
        this.showConfirmation = false;
        this.widgetOptions.paymentMode = PaymentMode.CREATE_PAYMENT;
        this.stateService.resetForm();
        this.stateService.setPaymentState(PaymentState.INITIAL);
        this.navigationService.form();
    }
    toggleConfirmationDialog() {
        this.showConfirmation = !this.showConfirmation;
    }
    showDiscardDialog() {
        return this.showConfirmation;
    }
    isApprovalPending() {
        return this.approvalPending;
    }
    isSubmitting$() {
        return this.submitting$;
    }
    getPaymentStatusType() {
        var _a;
        return ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === PaymentMode.EDIT_PAYMENT
            ? PaymentSubmitStatuses.PENDING_EDITED
            : this.isApprovalPending()
                ? PaymentSubmitStatuses.PENDING
                : PaymentSubmitStatuses.SUCCESS;
    }
    getPaymentMessage() {
        return this.paymentMessage;
    }
    getPurposeDescription(purpose) {
        var _a, _b;
        const purposes = (_a = this.paymentItem.inputFormFromSettings) === null || _a === void 0 ? void 0 : _a.purposesOfPayment;
        return (purposes === null || purposes === void 0 ? void 0 : purposes.length) ? (_b = purposes.find((item) => item.code === purpose)) === null || _b === void 0 ? void 0 : _b.description : '';
    }
    doneEditing() {
        var _a;
        (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
    }
    navigateToAfterSuccessPage() {
        this.navigationService.afterSuccess();
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
}
/** @nocollapse */ ReviewPaymentContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewPaymentContainerComponent, deps: [{ token: i1.FormBuilder }, { token: i2.StateService }, { token: PUBSUB }, { token: i2.NavigationService }, { token: i3.CreatePaymentService }, { token: i2.RoutableModalService, optional: true }, { token: i2.PaymentOrderHttpService }, { token: i4.CreatePaymentConfigSetupService }, { token: i5.TransactionSigningHelperService, optional: true }, { token: BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ReviewPaymentContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ReviewPaymentContainerComponent, selector: "bb-review-payment", viewQueries: [{ propertyName: "alertContainer", first: true, predicate: ["alertContainer"], descendants: true }], ngImport: i0, template: "<div class=\"position-relative\">\n  <ng-container\n    *ngTemplateOutlet=\"\n      reviewTemplate || (widgetOptions.reviewScreenType === reviewScreens.ADAPTED ? adaptedReviewTmpl : defaultTmpl);\n      context: {\n        $implicit: paymentItem,\n        status: paymentStatus$ | async,\n        isSubmitting: submitting$ | async,\n        methods: methods,\n        paymentConfig: selectedPaymentConfig$ | async,\n        breachError: breachError\n      }\n    \"\n  ></ng-container>\n</div>\n\n<ng-template\n  let-payment\n  let-paymentConfig=\"paymentConfig\"\n  let-status=\"status\"\n  let-methods=\"methods\"\n  let-errors=\"errors\"\n  #adaptedReviewTmpl\n>\n  <bb-adapted-review-container\n    [payment]=\"payment\"\n    [paymentConfig]=\"paymentConfig\"\n    [status]=\"status\"\n    [methods]=\"methods\"\n    [breachError]=\"breachError\"\n  ></bb-adapted-review-container>\n</ng-template>\n\n<ng-template\n  let-payment\n  let-paymentConfig=\"paymentConfig\"\n  let-status=\"status\"\n  let-methods=\"methods\"\n  let-isSubmitting=\"isSubmitting\"\n  let-breachError=\"breachError\"\n  #defaultTmpl\n>\n  <fieldset class=\"bb-fieldset bb-fieldset__no-outline\">\n    <bb-header-ui\n      *ngIf=\"header\"\n      data-role=\"page-title\"\n      headingClasses=\"bb-block bb-block--lg\"\n      headingType=\"h2\"\n      [heading]=\"header\"\n    ></bb-header-ui>\n    <div #alertContainer></div>\n    <ng-container *ngIf=\"payment\">\n      <div class=\"bb-block bb-block--md\" *ngIf=\"status\">\n        <bb-payord-status-card\n          [status]=\"methods.getPaymentStatusType()\"\n          [isDebitPayment]=\"widgetOptions.isDebitPayment\"\n          *ngIf=\"status === 'SUCCESS'\"\n        ></bb-payord-status-card>\n\n        <ng-container *ngIf=\"!!status && status !== 'SUCCESS'\">\n          <ng-container *ngIf=\"errors?.length; else noSpecificError\">\n            <ng-container *ngFor=\"let error of errors\">\n              <ng-container *ngIf=\"error.message; else noSpecificError\">\n                <bb-alert-ui title=\"\" (close)=\"(false)\" modifier=\"error\">\n                  <div data-role=\"failure-message\" class=\"bb-text-bold bb-text-default d-inline-flex\">\n                    <ng-container *ngIf=\"isErrorTitleDisplayed\">\n                      <span>\n                        <ng-container\n                          *ngIf=\"!widgetOptions.isDebitPayment\"\n                          i18n=\"@@initiate-payment.review.payment-failed-alert.title\"\n                          >Payment data error:</ng-container\n                        >\n                        <ng-container\n                          *ngIf=\"widgetOptions.isDebitPayment\"\n                          i18n=\"@@initiate-payment.review.debit-failed-alert.title\"\n                          >Debit data error:</ng-container\n                        > </span\n                      >&nbsp;\n                    </ng-container>\n                    <span>{{ $any(error)?.message }}</span>\n                  </div>\n                </bb-alert-ui>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #noSpecificError>\n            <ng-container *ngIf=\"genericError; else unknownError\">\n              <bb-alert-ui title=\"\" modifier=\"error\">\n                <div class=\"bb-text-bold bb-text-default\">\n                  <ng-container *ngIf=\"isErrorTitleDisplayed\">\n                    <span>\n                      <ng-container\n                        *ngIf=\"!widgetOptions.isDebitPayment\"\n                        i18n=\"@@initiate-payment-payments-generic-message-alert-title\"\n                        >Payment data error:</ng-container\n                      >\n                      <ng-container\n                        *ngIf=\"widgetOptions.isDebitPayment\"\n                        i18n=\"@@initiate-payment-debit-generic-message-alert-title\"\n                        >Debit data error:</ng-container\n                      >\n                    </span>\n                  </ng-container>\n                  <span>{{ genericError }}</span>\n                </div>\n              </bb-alert-ui>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #unknownError>\n            <ng-container *ngIf=\"status !== 'USER_DECLINED' && status !== 'LIMIT_BREACH' && status !== 'COED'\">\n              <div class=\"bb-stack__item bb-text-bold\">\n                <bb-alert-ui\n                  i18n-title=\"@@initiate-payment-review.payments-unknown-error-alert-title\"\n                  title=\"Server error: Unknown error occurred.\"\n                  modifier=\"error\"\n                >\n                </bb-alert-ui>\n              </div>\n            </ng-container>\n          </ng-template>\n\n          <ng-container *ngIf=\"status === 'USER_DECLINED' || status === 'LIMIT_BREACH' || status === 'COED'\">\n            <ng-container [ngSwitch]=\"status\">\n              <bb-alert-ui title=\"\" (close)=\"(false)\" modifier=\"error\" [ngSwitch]=\"status\">\n                <div class=\"bb-stack bb-text-default\" *ngSwitchCase=\"'LIMIT_BREACH'\">\n                  <div\n                    class=\"bb-stack__item bb-text-bold\"\n                    data-role=\"failure-message\"\n                    i18n=\"@@initiate-payment.review.limit-breach-error\"\n                  >\n                    Payment cannot be submitted because your limits have been breached\n                  </div>\n                  <button\n                    bbButton\n                    color=\"unstyled\"\n                    buttonSize=\"sm\"\n                    i18n=\"@@initiate-payment.review.limit-breach-error-see-details-button\"\n                    class=\"bb-stack__item bb-stack__item--push-right alert-link\"\n                    data-role=\"failure-see-details\"\n                    (click)=\"methods.showBreachModal()\"\n                  >\n                    See details\n                  </button>\n                </div>\n                <div *ngSwitchCase=\"'USER_DECLINED'\" data-role=\"failure-message\">\n                  <div\n                    i18n=\"@@initiate-payment.review.txn-signing-cancelled-error-title\"\n                    class=\"bb-text-bold bb-text-default\"\n                  >\n                    Payment not submitted\n                  </div>\n                  <div i18n=\"@@initiate-payment.review.txn-signing-cancelled-error-msg\" class=\"bb-text-default\">\n                    The transaction signing request was cancelled\n                  </div>\n                </div>\n                <div *ngSwitchCase=\"'COED'\" data-role=\"failure-message\">\n                  <div i18n=\"@@edit-payment.review.txn-signing-coed-error-title\" class=\"bb-text-bold bb-text-default\">\n                    Payment not submitted\n                  </div>\n                  <div i18n=\"@@edit-payment.review.txn-signing-coed-error-msg\" class=\"bb-text-default\">\n                    Payment is already edited by another user\n                  </div>\n                </div>\n              </bb-alert-ui>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div\n        *ngIf=\"payment?.isIntraLegalEntity || payment?.remittanceInfo?.urgent\"\n        class=\"bb-block bb-block--md bb-inline-stack bb-text-support\"\n      >\n        <div class=\"bb-inline-stack bb-inline-stack__item\" *ngIf=\"payment?.isIntraLegalEntity\">\n          <bb-icon-ui name=\"domain\"></bb-icon-ui>\n          <div class=\"bb-inline-stack__item\"></div>\n          <div\n            class=\"bb-inline-stack__item bb-text-bold bb-inline-stack__item--spacing-sm\"\n            i18n=\"@@initiate-payment.review.intra-company-transfer-label\"\n          >\n            Intracompany payment\n          </div>\n        </div>\n        <div *ngIf=\"payment?.remittanceInfo?.urgent\" class=\"bb-inline-stack bb-inline-stack__item\">\n          <bb-icon-ui name=\"priority-high\"></bb-icon-ui>\n          <div class=\"bb-inline-stack__item\"></div>\n          <div\n            class=\"bb-inline-stack__item bb-text-bold\"\n            data-role=\"payment-is-urgent\"\n            i18n=\"@@initiate-payment.review.urgent-transfer-label\"\n          >\n            Urgent payment\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-payment-account-details-card__container d-none d-md-flex\">\n        <div class=\"bb-text-bold w-md-50\">\n          <ng-container *ngTemplateOutlet=\"dynamicLabelInitiator\"></ng-container>\n        </div>\n        <div class=\"mr-3\">&nbsp;</div>\n        <div class=\"bb-text-bold w-md-50\">\n          <ng-container *ngTemplateOutlet=\"dynamicLabelCounterparty\"></ng-container>\n        </div>\n      </div>\n\n      <div\n        class=\"bb-payment-account-details-card__container bb-block bb-block--md break-word\"\n        [ngClass]=\"{\n          'flex-column-reverse flex-md-row-reverse': widgetOptions.isDebitPayment\n        }\"\n      >\n        <div class=\"w-md-50\">\n          <div class=\"bb-text-bold d-md-none\">\n            <ng-container\n              *ngTemplateOutlet=\"widgetOptions.isDebitPayment ? dynamicLabelCounterparty : dynamicLabelInitiator\"\n            ></ng-container>\n          </div>\n          <bb-debitor-details-card [details]=\"payment?.initiator\"></bb-debitor-details-card>\n        </div>\n\n        <div class=\"justify-content-center align-items-center d-md-flex d-none\">\n          <bb-icon-ui class=\"bb-account-transfer-icon\" name=\"arrow-forward\"></bb-icon-ui>\n        </div>\n        <div class=\"d-md-none\">&nbsp;</div>\n\n        <div class=\"w-md-50\">\n          <div class=\"bb-text-bold d-md-none\">\n            <ng-container\n              *ngTemplateOutlet=\"widgetOptions.isDebitPayment ? dynamicLabelInitiator : dynamicLabelCounterparty\"\n            ></ng-container>\n          </div>\n          <bb-creditor-details-card [details]=\"payment?.counterparty\"></bb-creditor-details-card>\n        </div>\n      </div>\n\n      <ng-template #dynamicLabelInitiator>\n        <ng-container *ngIf=\"widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            name=\"counterparty\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"Collect from\"\n            i18n-defaultLabel=\"@@initiate-payment.review.debit-counterparty-title\"\n            data-role=\"initiator-label\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n        <ng-container *ngIf=\"!widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            name=\"initiator\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"From\"\n            i18n-defaultLabel=\"@@initiate-payment.review.initiator-title\"\n            data-role=\"initiator-label\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n      </ng-template>\n\n      <ng-template #dynamicLabelCounterparty>\n        <ng-container *ngIf=\"widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            data-role=\"payee-label\"\n            name=\"initiator\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"Transfer to\"\n            i18n-defaultLabel=\"@@initiate-payment.review.debit-initiator-title\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n        <ng-container *ngIf=\"!widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            data-role=\"payee-label\"\n            name=\"counterparty\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"To\"\n            i18n-defaultLabel=\"@@initiate-payment.review.counterparty-title\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n      </ng-template>\n\n      <bb-payord-amount-details\n        [config]=\"paymentConfig\"\n        [details]=\"payment?.remittanceInfo\"\n        [transferFee]=\"payment?.transferFee\"\n        [chargeBearer]=\"payment?.chargeBearer\"\n        [forexDetails]=\"methods.getForexDetails(payment)\"\n      ></bb-payord-amount-details>\n\n      <bb-payord-counterparty-details\n        [details]=\"payment?.counterparty\"\n        [config]=\"paymentConfig\"\n        [isDebitPayment]=\"payment?.isDebitPayment\"\n      ></bb-payord-counterparty-details>\n\n      <div\n        *ngIf=\"\n          payment?.messageToBank ||\n          payment?.remittanceInfo?.description ||\n          payment?.remittanceInfo?.paymentReference ||\n          payment?.counterparty.messageToBank ||\n          payment?.counterparty.remittanceInformation ||\n          payment?.remittanceInfo?.purposeOfPayment ||\n          payment?.counterparty?.mandateIdentifier\n        \"\n      >\n        <hr />\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty?.mandateIdentifier\">\n          <div class=\"bb-text-bold\" data-role=\"mandate-identifier-label\">\n            <bb-payord-dynamic-label\n              name=\"mandateIdentifier\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Mandate identifier\"\n              i18n-defaultLabel=\"@@initiate-payment.review.mandate-identifier-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"mandate-identifier\">\n            {{ payment?.counterparty?.mandateIdentifier }}\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.paymentReference\">\n          <div class=\"bb-text-bold\" data-role=\"payment-reference-label\">\n            <bb-payord-dynamic-label\n              name=\"paymentReference\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Payment reference\"\n              i18n-defaultLabel=\"@@initiate-payment.review.payment-reference-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-reference\">\n            {{ payment?.remittanceInfo?.paymentReference }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.description\">\n          <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n            <bb-payord-dynamic-label\n              name=\"description\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Description\"\n              i18n-defaultLabel=\"@@initiate-payment.review.description-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-description\">\n            {{ payment?.remittanceInfo?.description }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty.remittanceInformation\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              *ngIf=\"!payment.isDebitPayment\"\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-beneficiary-title\"\n            ></bb-payord-dynamic-label>\n            <bb-payord-dynamic-label\n              *ngIf=\"payment.isDebitPayment\"\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to client\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-client-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div data-role=\"description\" class=\"break-word\">\n            {{ payment?.counterparty?.remittanceInformation }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.purposeOfPayment\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"purposeOfPayment\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Purpose of payment\"\n              i18n-defaultLabel=\"@@initiate-payment.review.purpose-of-payment-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"bb-stack\">\n            <div data-role=\"purpose-of-payment\" class=\"bb-stack__item bb-stack__item--align-top\">\n              {{ payment?.remittanceInfo?.purposeOfPayment }}\n            </div>\n            <div data-role=\"purpose-of-payment-description\" class=\"bb-stack__item bb-text-support\">\n              {{ methods.getPurposeDescription(payment?.remittanceInfo?.purposeOfPayment) }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.messageToBank || payment?.counterparty?.messageToBank\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              *ngIf=\"!payment.isDebitPayment\"\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary bank\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-bank.label\"\n            ></bb-payord-dynamic-label>\n            <bb-payord-dynamic-label\n              *ngIf=\"payment.isDebitPayment\"\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to client bank\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-client-bank.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"message-to-bank\">\n            {{ payment?.counterparty?.messageToBank || payment?.messageToBank }}\n          </div>\n        </div>\n        <hr />\n      </div>\n\n      <bb-payord-schedule-details [paymentConfig]=\"paymentConfig\" [data]=\"payment?.schedule\">\n      </bb-payord-schedule-details>\n    </ng-container>\n  </fieldset>\n\n  <ng-container *ngIf=\"status !== 'SUCCESS'; else closureSwitch\">\n    <div class=\"bb-button-bar\" [class.bb-button-bar--reverse]=\"!widgetOptions?.isModalView\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        data-role=\"submit-button\"\n        (click)=\"methods.submit()\"\n        *ngIf=\"!methods.isApprovalEnabled()\"\n        [disabled]=\"isSubmitting\"\n        i18n=\"@@initiate-payment.review.submit-dropdown-btn\"\n      >\n        Submit\n      </button>\n      <div class=\"btn-group bb-button-bar__button\" data-role=\"button-group\" *ngIf=\"methods.isApprovalEnabled()\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          data-role=\"submit-button\"\n          [isLoading]=\"isSubmitting\"\n          (click)=\"methods.submit()\"\n          i18n=\"@@initiate-payment.review.submit-btn\"\n        >\n          Submit\n        </bb-load-button-ui>\n\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          btnColor=\"primary\"\n          icon=\"caret-down\"\n          data-role=\"dropdown-menu\"\n          position=\"top-right\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <button\n              role=\"menuitem\"\n              type=\"button\"\n              class=\"dropdown-item\"\n              data-role=\"bus-submit-and-approve-button\"\n              [disabled]=\"isSubmitting\"\n              (bbKeyboardClick)=\"methods.submit(true)\"\n              i18n=\"@@initiate-payment.review.submit-and-approve-btn\"\n            >\n              Submit and Approve\n            </button>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n      </div>\n      <button\n        class=\"bb-button-bar__button\"\n        bbButton\n        color=\"secondary\"\n        (click)=\"methods.edit()\"\n        [disabled]=\"isSubmitting\"\n        data-role=\"edit-button\"\n        i18n=\"@@initiate-payment.review.edit-btn\"\n      >\n        Edit\n      </button>\n\n      <button\n        bbButton\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        color=\"link\"\n        data-role=\"cancel-button\"\n        (click)=\"methods.toggleDiscardDialog()\"\n        [disabled]=\"isSubmitting\"\n        i18n=\"@@initiate-payment.review.discard-btn\"\n      >\n        Discard\n      </button>\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"isSubmitting\" class=\"position-absolute w-100 h-100 top-0 fixed-top bg-white\" [style.opacity]=\"0.6\">\n    <bb-loading-indicator-ui loaderSize=\"lg\" class=\"absolute-center\"></bb-loading-indicator-ui>\n  </div>\n\n  <ng-template #closureSwitch>\n    <ng-container *ngIf=\"widgetOptions?.isModalView; else newPayment\">\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          data-role=\"done-payment-edit-button\"\n          *ngIf=\"status\"\n          (click)=\"methods.doneEditing()\"\n          i18n=\"@@initiate-payment.review.btn-done-edit-payment.label\"\n        >\n          Done\n        </button>\n\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"export-payment-button\"\n          *ngIf=\"methods.getPaymentResponse()?.exportAllowed\"\n          [bbExportPdf]=\"methods.getPaymentResponse()?.id\"\n        >\n          <bb-icon-ui class=\"mr-2\" name=\"file-download\"></bb-icon-ui>\n          <span i18n=\"@@initiate-payment.review.btn-export-payment.label\">Export PDF</span>\n        </button>\n\n        <ng-container *ngIf=\"widgetOptions?.paymentMode !== paymentMode.EDIT_PAYMENT\">\n          <ng-container *ngTemplateOutlet=\"newPaymentButton; context: { color: 'secondary' }\"></ng-container>\n          <div class=\"bb-button-bar__button bb-button-bar__button--across\">\n            <ng-container *ngTemplateOutlet=\"saveTemplateButton; context: { color: 'link' }\"></ng-container>\n          </div>\n        </ng-container>\n      </div>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #newPayment>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <ng-container *ngTemplateOutlet=\"newPaymentButton; context: { color: 'primary' }\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"saveTemplateButton; context: { color: 'secondary' }\"></ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template #newPaymentButton let-color=\"color\">\n    <button\n      *ngIf=\"status && methods.isNewPaymentEnabled()\"\n      bbButton\n      [color]=\"color\"\n      class=\"bb-button-bar__button\"\n      data-role=\"new-payment-button\"\n      (click)=\"methods.reset()\"\n      [disabled]=\"methods.isSavingTemplate$() | async\"\n    >\n      <ng-container *ngIf=\"!widgetOptions.isDebitPayment\" i18n=\"@@initiate-payment.review.btn-group-new-payment.label\"\n        >New Payment</ng-container\n      >\n      <ng-container *ngIf=\"widgetOptions.isDebitPayment\" i18n=\"@@initiate-payment.review.btn-group-new-debit.label\"\n        >New debit request</ng-container\n      >\n    </button>\n  </ng-template>\n\n  <ng-template #saveTemplateButton let-color=\"color\">\n    <button\n      *ngIf=\"status === 'SUCCESS' && methods.isPaymentTemplateEnabled() && (createTemplatePermission$ | async)\"\n      bbButton\n      [color]=\"color\"\n      class=\"bb-button-bar__button\"\n      data-role=\"save-as-template-button\"\n      (click)=\"methods.openTemplateModal()\"\n      [disabled]=\"methods.isTemplateSaved()\"\n      i18n=\"@@initiate-payment.review.btn-group-save-as-template.label\"\n    >\n      Save as a template\n    </button>\n  </ng-template>\n\n  <bb-modal-ui\n    [isOpen]=\"methods.showDiscardDialog()\"\n    (cancel)=\"methods.toggleDiscardDialog()\"\n    (confirm)=\"methods.discard()\"\n  >\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <div data-role=\"modal-header\">\n          <h2 class=\"modal-title\" i18n=\"omni-payment-edit-review-discard-modal-title\">\n            Discard {widgetOptions?.paymentMode === paymentMode.EDIT_PAYMENT, select, true {edited} other {entered}}\n            data?\n          </h2>\n        </div>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container i18n=\"@@initiate-payment.review.discard-modal-content\">\n          Are you sure you want to exit and discard all changes? {widgetOptions?.paymentMode ===\n          paymentMode.EDIT_PAYMENT, select, true {Edited} other {Entered}} data will be lost.\n        </ng-container>\n      </ng-template>\n    </bb-modal-body-ui>\n\n    <bb-modal-footer-ui #modalFooterRef>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"danger\"\n            class=\"bb-button-bar__button\"\n            (click)=\"methods.discard()\"\n            data-role=\"discard-action-btn\"\n            i18n=\"@@initiate-payment.review.discard-modal-discard-btn\"\n          >\n            Discard\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"methods.toggleDiscardDialog()\"\n            data-role=\"cancel-action-btn\"\n            i18n=\"@@initiate-payment.review.discard-modal-cancel-btn\"\n          >\n            Not now\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <bb-breach-limit-details\n    [paymentDetails]=\"paymentItem\"\n    [error]=\"breachError\"\n    [isOpen]=\"showBreachDetails\"\n    (close)=\"hideBreachModal()\"\n  ></bb-breach-limit-details>\n</ng-template>\n\n<bb-payment-template-form\n  [paymentTemplateForm]=\"paymentTemplateForm\"\n  [isSavingTemplate]=\"savingTemplate$ | async\"\n  [modalState]=\"paymentTemplateModalState\"\n  (closeModal)=\"closeTemplateModal()\"\n  (openModal)=\"openTemplateModal()\"\n  (submitForm)=\"submitPaymentTemplate()\"\n></bb-payment-template-form>\n", components: [{ type: i6.AdaptedReviewComponent, selector: "bb-adapted-review-container", inputs: ["payment", "status", "paymentConfig", "methods", "breachError"] }, { type: i7.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2.ӨPayordStatusComponent, selector: "bb-payord-status-card", inputs: ["status", "message", "isDebitPayment"] }, { type: i8.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i9.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.ӨPaymentDebitorDetailsCardComponent, selector: "bb-debitor-details-card", inputs: ["details"] }, { type: i2.ӨPaymentCreditorDetailsCardComponent, selector: "bb-creditor-details-card", inputs: ["details"] }, { type: i2.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2.ӨPayordAmountDetailsComponent, selector: "bb-payord-amount-details", inputs: ["config", "details", "transferFee", "chargeBearer", "forexDetails"] }, { type: i2.ӨPayordCounterpartyDetailsComponent, selector: "bb-payord-counterparty-details", inputs: ["config", "details", "isDebitPayment"] }, { type: i2.ӨPayordScheduleDetailsComponent, selector: "bb-payord-schedule-details", inputs: ["data", "paymentConfig"] }, { type: i10.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i11.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i12.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i13.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i13.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i13.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i13.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i2.ӨBreachLimitDetailsModalComponent, selector: "bb-breach-limit-details", inputs: ["paymentDetails", "error", "isOpen"], outputs: ["close"] }, { type: i2.ӨPaymentTemplateComponent, selector: "bb-payment-template-form", inputs: ["modalState", "paymentTemplateForm", "isSavingTemplate"], outputs: ["closeModal", "openModal", "submitForm"] }], directives: [{ type: i14.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i15.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i11.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i16.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2.ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }, { type: i13.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i13.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i13.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i14.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewPaymentContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-review-payment',
                    templateUrl: 'review-payment.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.StateService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: i2.NavigationService }, { type: i3.CreatePaymentService }, { type: i2.RoutableModalService, decorators: [{
                    type: Optional
                }] }, { type: i2.PaymentOrderHttpService }, { type: i4.CreatePaymentConfigSetupService }, { type: i5.TransactionSigningHelperService, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN]
                }] }]; }, propDecorators: { alertContainer: [{
                type: ViewChild,
                args: ['alertContainer']
            }] } });
//# sourceMappingURL=review-payment.component.js.map