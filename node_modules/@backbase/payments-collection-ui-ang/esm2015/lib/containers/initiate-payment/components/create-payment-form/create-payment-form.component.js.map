{"version":3,"file":"create-payment-form.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/payments-collection-ui-ang/src/lib/containers/initiate-payment/components/create-payment-form/create-payment-form.component.ts","../../../../../../../../../libs/payments-collection-ui-ang/src/lib/containers/initiate-payment/components/create-payment-form/create-payment-form.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  OnDestroy,\n  OnInit,\n  Optional,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN,\n  CounterPartyFields,\n  defaultPaymentSuccessEventName,\n  FetchPaymentOptionsListenerFn,\n  HiddenFields,\n  InitiatePaymentHeaderStates,\n  InitiatePaymentOptions,\n  NavigationService,\n  PaymentBaseFields,\n  PaymentError,\n  PaymentErrors,\n  PaymentFormFieldConfig,\n  PaymentFormGroup,\n  PaymentHooks,\n  PaymentHooksOptions,\n  PaymentMode,\n  PaymentOption,\n  PaymentOptionsService,\n  PaymentOrderHttpService,\n  PaymentState,\n  PaymentTemplateFields,\n  PaymentTemplatesData,\n  PaymentTypeConfig,\n  PayordPaymentError,\n  removeScheduleFromConfig,\n  RoutableModalService,\n  P2PLimitErrorKeys,\n  setFormDetailsFromResponse,\n  setFormDetailsFromService,\n  setFrequencyOptionsPerConfig,\n  StateService,\n  toPostPaymentTemplate,\n  toPostRequest,\n  triggerPaymentHook,\n  focusErrorElement,\n  BaseObject,\n  RemittanceInfoFields,\n  getConfig,\n} from '@backbase/payment-orders-ang';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\nimport { PaymentTemplate } from '@backbase/data-ang/payment-template';\nimport { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\nimport { PaymentOptionsResponse } from '@backbase/data-ang/payment-order-options';\nimport { Pubsub, PUBSUB } from '@backbase/foundation-ang/web-sdk';\nimport {\n  isEditFormDirty,\n  registerFormControl,\n} from '@backbase/payord-form-builder-ang';\n\nimport {\n  mapPaymentOptionRequest,\n  normalisePaymentTemplate,\n  normalizePaymentType,\n} from '../../helpers/payment-options-mappers';\nimport { CreatePaymentConfigSetupService } from '../../services/create-payment-config-setup.service';\nimport { CreatePaymentFieldsSetupService } from '../../services/create-payment-fields-setup.service';\nimport { commonI18n, formI18n } from '../../constants/initiate-payment.i18n';\nimport { CreatePaymentService } from '../../services/create-payment.service';\n\n@Component({\n  selector: 'bb-create-payment-form',\n  templateUrl: './create-payment-form.component.html',\n  providers: [CreatePaymentFieldsSetupService],\n})\nexport class CreatePaymentFormComponent\n  implements OnInit, AfterContentInit, OnDestroy, AfterViewInit\n{\n  private readonly destroyed$ = new Subject<void>();\n\n  private paymentTypes: string | undefined;\n  private paymentTemplate: PaymentTemplate | null = null;\n  private shouldResetPaymentOptions = false;\n  private formValue = this.stateService.formInstance?.value;\n\n  header: string | undefined;\n  readonly paymentTemplateSearch = new FormControl();\n  readonly fetchOptions$ = new Subject<FormGroup>();\n  readonly submitting$ = new BehaviorSubject<boolean>(false);\n  readonly paymentState$ = this.stateService.paymentState$;\n\n  readonly paymentTemplates$: Observable<PaymentTemplatesData> =\n    this.paymentOrderHttpService.paymentTemplates$;\n  readonly loadingTemplates$ = this.paymentOrderHttpService.loading$;\n\n  readonly fetchingPaymentOptions$ = new BehaviorSubject<boolean>(false);\n  readonly paymentOptions$ = this.fieldSetupService.paymentOptions$;\n  readonly paymentOptionsError$ = this.fieldSetupService.paymentOptionsError$;\n\n  readonly selectedPaymentConfig$ =\n    this.createPaymentService.selectedPaymentConfig$;\n  readonly selectedPaymentOption$ =\n    this.createPaymentService.selectedPaymentOption$;\n\n  readonly fetchPaymentOptionsListener$: Observable<\n    FetchPaymentOptionsListenerFn | undefined\n  > = this.createPaymentSetup.fetchPaymentOptionsListener$;\n  readonly baseFields$: Observable<\n    Array<PaymentFormFieldConfig | PaymentFormGroup>\n  > = this.createPaymentSetup.baseFields$.pipe(\n    map((baseFields) => {\n      this.fieldSetupService.injectData(baseFields);\n      return baseFields;\n    })\n  );\n\n  private editedPaymentDetails: IdentifiedPaymentOrder | undefined;\n\n  options: InitiatePaymentOptions = {};\n  configs: PaymentTypeConfig[] = [];\n\n  templateSelectorName?: string;\n  isPaymentCopyControl?: AbstractControl;\n  templateNameControl = this.stateService.formInstance?.get('templateName');\n\n  errors: { key: string; message: string }[] = [];\n  isEditPaymentConfirmationDialogOpen = false;\n  enablePaymentTemplateSelector = true;\n  editPaymentHasNoChanges = false;\n  isErrorTitleDisplayed = true;\n  shouldApplyTemplate = false;\n  genericError?: string;\n  searchValue?: string;\n  showApiError = false;\n  paymentMode = PaymentMode;\n\n  @ViewChild('outlet', { read: ViewContainerRef, static: true })\n  outletRef!: ViewContainerRef;\n  @ViewChild('content', { read: TemplateRef, static: true })\n  contentRef!: TemplateRef<any>;\n\n  @ViewChild('alertContainer') alertContainer?: ElementRef;\n\n  constructor(\n    private readonly paymentOrderHttpService: PaymentOrderHttpService,\n    private readonly paymentOptionsService: PaymentOptionsService,\n    private readonly createPaymentService: CreatePaymentService,\n    private readonly navigationService: NavigationService,\n    private readonly stateService: StateService,\n    private readonly cdRef: ChangeDetectorRef,\n    private readonly createPaymentSetup: CreatePaymentConfigSetupService,\n    private readonly fieldSetupService: CreatePaymentFieldsSetupService,\n    private readonly formEl: ElementRef,\n    @Optional() private readonly modalService: RoutableModalService,\n    @Inject(PUBSUB) private readonly eventBus: Pubsub,\n    @Optional()\n    @Inject(BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN)\n    readonly paymentErrors: PayordPaymentError\n  ) {}\n\n  ngOnInit(): void {\n    combineLatest([\n      this.createPaymentSetup.configs$,\n      this.createPaymentSetup.options$,\n      this.stateService.paymentEditState$,\n    ])\n      .pipe(distinctUntilChanged(), takeUntil(this.destroyed$))\n      .subscribe(([configs, options, editedPaymentDetails]) => {\n        this.options = options;\n        this.editedPaymentDetails = editedPaymentDetails;\n        this.isErrorTitleDisplayed =\n          options.isErrorTitleDisplayed ?? this.isErrorTitleDisplayed;\n        this.enablePaymentTemplateSelector =\n          options.enablePaymentTemplateSelector ??\n          this.enablePaymentTemplateSelector;\n\n        if (configs.length === 1) {\n          // TODO: find a better solution for this\n          this.setArrangementBusFunctions(\n            configs[0].options?.closedPaymentBusFns,\n            configs[0].businessFunction\n          );\n\n          this.onSelectConfig(configs[0]);\n        }\n        const { isOneOffToRecurrentAllowed, isRecurrentToOneOffAllowed } =\n          options;\n\n        this.configs = configs.map((config) => {\n          let _config = options.isTemplateMode\n            ? removeScheduleFromConfig(config)\n            : config;\n\n          if (editedPaymentDetails) {\n            _config = setFrequencyOptionsPerConfig(\n              config,\n              !!editedPaymentDetails.schedule,\n              {\n                isOneOffToRecurrentAllowed,\n                isRecurrentToOneOffAllowed,\n              }\n            );\n          }\n\n          this.fieldSetupService.injectData(_config.fields, _config.options);\n          return _config;\n        });\n\n        this.setupPaymentTypes(this.configs);\n\n        this.header = this.createPaymentSetup.getHeader(\n          InitiatePaymentHeaderStates.FORM\n        );\n      });\n\n    this.listen();\n\n    if (this.stateService.currentState !== PaymentState.EDIT) {\n      this.fieldSetupService.clearPaymentOptions();\n      this.shouldResetPaymentOptions = true;\n    }\n\n    this.createPaymentService\n      .getPaymentOptionsRequest(this.configs)\n      .pipe(\n        tap(\n          (options) => {\n            if (!this.shouldResetPaymentOptions && !options?.length) {\n              this.fieldSetupService.setPaymentOptionsError(true);\n            }\n            this.shouldResetPaymentOptions = false;\n            this.onPaymentTypeChange(options);\n          },\n          catchError(() => {\n            this.fieldSetupService.setPaymentOptionsError(true);\n            return of([]);\n          })\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n\n    triggerPaymentHook(\n      <PaymentHooksOptions>this.createPaymentSetup.hooks,\n      PaymentHooks.onInit\n    );\n  }\n\n  ngAfterViewInit() {\n    this.stateService.paymentTemplateState$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((template) => {\n        if (template) {\n          this.onSelectPaymentTemplate(template);\n        }\n      });\n\n    if (this.editedPaymentDetails) {\n      this.setEditFormValues(this.editedPaymentDetails);\n      this.stateService.setEditPayment(undefined); // This is to prevent overwrite manual edits on return from review screen\n    }\n  }\n\n  ngAfterContentInit() {\n    this.renderView();\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n    triggerPaymentHook(\n      <PaymentHooksOptions>this.createPaymentSetup.hooks,\n      PaymentHooks.onDestroy\n    );\n  }\n\n  private setArrangementBusFunctions(\n    closedFunctions: string[] | undefined,\n    businessFunction: string | undefined\n  ) {\n    if (closedFunctions?.length && businessFunction) {\n      // TODO: temporary solution, need to find better way do not mutate object\n      const setOfBusFun = new Set([...closedFunctions, businessFunction]);\n      closedFunctions = Array.from(setOfBusFun);\n\n      this.paymentOrderHttpService.arrangementBusFunctions =\n        closedFunctions.toString();\n    }\n  }\n\n  private setEditFormValues(payment: IdentifiedPaymentOrder) {\n    const form: FormGroup = this.stateService.formInstance;\n    const counterparty = form.get(PaymentBaseFields.counterparty) as FormGroup;\n    registerFormControl(\n      counterparty,\n      CounterPartyFields.schemeName,\n      [],\n      [],\n      'BBAN'\n    );\n    registerFormControl(form, 'paymentOrderId', [], [], payment.id);\n    this.isPaymentCopyControl = registerFormControl(\n      form,\n      HiddenFields.isPaymentCopy\n    );\n    this.isPaymentCopyControl.patchValue(\n      this.options.paymentMode === this.paymentMode.COPY_PAYMENT\n    );\n    const editForm = setFormDetailsFromService(form, payment);\n    this.stateService.initialEditFormValue = editForm.value;\n    this.setForm(editForm);\n  }\n\n  private setupPaymentTypes(configs: PaymentTypeConfig[]) {\n    this.paymentTypes = configs.map((config) => config.paymentType).join(',');\n    this.paymentOrderHttpService.paymentType = this.paymentTypes;\n  }\n\n  private renderView() {\n    this.outletRef.clear();\n    this.outletRef.createEmbeddedView(this.contentRef);\n  }\n\n  private setTemplateValues(form: FormGroup, paymentTemplate: PaymentTemplate) {\n    this.setFormValues(normalisePaymentTemplate(paymentTemplate), form);\n    this.paymentTemplate = null;\n    this.stateService.setPaymentTemplate(undefined);\n  }\n\n  private prepareForTemplateApply() {\n    const formGroup = new FormGroup({});\n    this.formValue = null;\n    this.fieldSetupService.setPaymentOptions([]);\n    this.templateNameControl = registerFormControl(formGroup, 'templateName');\n    this.stateService.saveForm(formGroup);\n  }\n\n  private getPaymentConfig(\n    paymentType?: string\n  ): PaymentTypeConfig | undefined {\n    if (paymentType) {\n      return this.configs.filter(\n        (paymentConfig) => paymentType === paymentConfig.paymentType\n      )[0];\n    }\n    return;\n  }\n\n  private setFormValues(\n    { details, name, id }: PaymentTemplate,\n    form?: FormGroup\n  ) {\n    const _form = form || this.stateService.formInstance;\n    const templateForm = setFormDetailsFromResponse(_form, details, {\n      name,\n      id,\n    });\n    this.templateSelectorName = name;\n    this.templateNameControl?.setValue(name);\n    this.setForm(templateForm);\n    _form.markAllAsTouched();\n  }\n\n  private listen() {\n    this.fetchOptions$\n      .pipe(\n        filter(\n          (form: FormGroup) =>\n            JSON.stringify(\n              CreatePaymentService.getCriticalFieldValues(this.formValue)\n            ) !==\n            JSON.stringify(\n              CreatePaymentService.getCriticalFieldValues(form.getRawValue())\n            )\n        ),\n        switchMap((form: FormGroup) => {\n          this.formValue = form.getRawValue();\n          return this.fetchPaymentOptions(form);\n        }),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  private setForm(formInstance: FormGroup) {\n    this.stateService.setPaymentState(PaymentState.EDIT);\n    this.stateService.saveForm(formInstance);\n\n    this.renderView();\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Callback triggered when the payment type changes\n   */\n  private onPaymentTypeChange(paymentOptions: Array<PaymentOption> = []) {\n    if (paymentOptions && paymentOptions.length) {\n      this.fieldSetupService.setPaymentOptionsError(false);\n    }\n\n    this.fieldSetupService.setPaymentOptions(paymentOptions);\n    this.fetchingPaymentOptions$.next(false);\n  }\n\n  private validatePayment(form: FormGroup) {\n    this.paymentOrderHttpService\n      .validatePayment(toPostRequest(form.getRawValue()))\n      .pipe(take(1))\n      .subscribe(\n        (response) => {\n          const control =\n            form.get('isIntraLegalEntity') ||\n            registerFormControl(form, 'isIntraLegalEntity');\n          this.templateNameControl =\n            this.templateNameControl ||\n            registerFormControl(form, 'templateName');\n          control.setValue(response.isIntraLegalEntityPaymentOrder);\n          this.templateNameControl.setValue(this.templateSelectorName);\n          this.submitting$.next(false);\n          this.navigationService.review();\n          this.stateService.canApprove = response.canApprove;\n        },\n        ({ error }) => {\n          this.submitting$.next(false);\n          this.errors = error.errors;\n\n          if (!this.isP2PLimitError(error)) {\n            this.genericError = error.message;\n            this.showApiError = true;\n            if (this.errors?.length || this.genericError) {\n              const errorObject: PaymentErrors = {\n                errorResponse: error,\n                errors: this.errors,\n                paymentErrors: this.paymentErrors,\n                notificationHeader: formI18n.validateFailed,\n                genericMessage: this.genericError,\n              };\n              this.paymentOrderHttpService.manageErrorResponse(errorObject);\n            } else {\n              this.paymentOrderHttpService.showNotification(false, {\n                header: formI18n.unknownErrorHeader,\n                message: formI18n.unknownError,\n                headerContext: error,\n              });\n            }\n            this.scrollIntoAlertView();\n          } else {\n            this.showApiError = false;\n            this.handleP2PErrors(this.errors[0]);\n          }\n        }\n      );\n  }\n\n  private handleP2PErrors(error: BaseObject<any>): void {\n    if (error?.key) {\n      const amountGroupConfig = getConfig(\n        RemittanceInfoFields.amountCurrencyGroup,\n        this.configs[0]\n      );\n\n      const validationMsg =\n        amountGroupConfig?.options?.validationMessages?.find(\n          (validationMessage: { name: string; message: string }) =>\n            validationMessage.name === error.key\n        );\n\n      if (validationMsg?.message) {\n        validationMsg.message = validationMsg.message.replace(\n          '#amount#',\n          error.context?.limit\n        );\n\n        const amountGroup = this.stateService.formInstance\n          .get(PaymentBaseFields.remittanceInfo)\n          ?.get(RemittanceInfoFields.amountCurrencyGroup);\n        amountGroup?.setErrors({ [error.key]: true });\n        amountGroup\n          ?.get(RemittanceInfoFields.amount)\n          ?.setErrors({ invalid: true });\n\n        focusErrorElement(\n          this.formEl?.nativeElement,\n          'small.bb-input-validation-message'\n        );\n      }\n    }\n  }\n\n  private scrollIntoAlertView() {\n    this.alertContainer?.nativeElement.scrollIntoView(false, {\n      behavior: 'smooth',\n      block: 'start',\n    });\n  }\n\n  private isP2PLimitError(error: any): boolean {\n    if (!Array.isArray(error.errors)) return false;\n\n    const errKey = error.errors[0]?.key;\n    return Object.values(P2PLimitErrorKeys).includes(\n      errKey as P2PLimitErrorKeys\n    );\n  }\n\n  private saveTemplate(form: FormGroup) {\n    if (this.options.paymentMode === PaymentMode.EDIT_TEMPLATE) {\n      this.editPaymentTemplate(form);\n    } else {\n      this.createPaymentTemplate(form);\n    }\n  }\n\n  private editPaymentTemplate(form: FormGroup) {\n    const templateName = form.get(PaymentTemplateFields.templateName)?.value;\n    const paymentTemplateId = form.get(\n      PaymentTemplateFields.paymentTemplateId\n    )?.value;\n    if (paymentTemplateId) {\n      this.paymentOrderHttpService\n        .editPaymentTemplate(\n          paymentTemplateId,\n          toPostPaymentTemplate(form.getRawValue())\n        )\n        .pipe(takeUntil(this.destroyed$))\n        .subscribe(\n          this.saveTemplateSuccessCallback.bind(this, templateName),\n          this.saveTemplateErrorCallback.bind(this)\n        );\n    }\n  }\n\n  private createPaymentTemplate(form: FormGroup) {\n    const templateName = form.get(PaymentTemplateFields.templateName)?.value;\n    this.paymentOrderHttpService\n      .postPaymentTemplate(toPostPaymentTemplate(form.getRawValue()))\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(\n        this.saveTemplateSuccessCallback.bind(this, templateName),\n        this.saveTemplateErrorCallback.bind(this)\n      );\n  }\n\n  private saveTemplateSuccessCallback(templateName: string) {\n    this.paymentOrderHttpService.showNotification(true, {\n      header: commonI18n.templateSaveSuccess(templateName),\n      headerContext: { name: templateName },\n    });\n    this.submitting$.next(false);\n    if (this.options.isModalView) {\n      this.modalService?.closeModal();\n    } else {\n      this.stateService.resetForm();\n      this.renderView();\n    }\n    this.eventBus.publish(\n      <string>(this.options.successEventName || defaultPaymentSuccessEventName),\n      true\n    );\n  }\n\n  private saveTemplateErrorCallback(response: PaymentError) {\n    const { error } = response;\n    this.paymentOrderHttpService.showNotification(false, {\n      header: error?.message || commonI18n.templateSaveFailed,\n    });\n    this.submitting$.next(false);\n  }\n\n  private onHooksDone(form: FormGroup, success = true) {\n    if (success) {\n      if (this.options.isTemplateMode) {\n        this.saveTemplate(form);\n      } else {\n        this.validatePayment(form);\n      }\n    } else {\n      this.submitting$.next(false);\n    }\n  }\n\n  private isEditFormNotChanged(form: FormGroup): boolean {\n    return !isEditFormDirty(form.value, this.stateService.initialEditFormValue);\n  }\n\n  onSelectPaymentTemplate(paymentTemplateData: PaymentTemplate) {\n    const config = this.getPaymentConfig(\n      normalizePaymentType(paymentTemplateData)\n    );\n    if (this.configs.length > 1 && config) {\n      this.prepareForTemplateApply();\n      this.paymentTemplate = normalisePaymentTemplate(paymentTemplateData);\n      this.shouldApplyTemplate = true;\n      this.stateService.setPaymentState(PaymentState.EDIT);\n      this.onSelectConfig(config);\n      this.renderView();\n    } else {\n      this.setFormValues(paymentTemplateData);\n    }\n  }\n\n  clearTemplateName() {\n    this.templateSelectorName = '';\n    if (this.templateNameControl) {\n      this.templateNameControl.setValue('');\n    }\n  }\n\n  onLoadingMoreTemplates(page: number) {\n    this.paymentOrderHttpService.loadMore(page);\n  }\n\n  search(text: string) {\n    this.paymentOrderHttpService.search(text);\n  }\n\n  onSelectConfig(config?: PaymentTypeConfig) {\n    this.createPaymentService.selectPaymentConfig(config);\n  }\n\n  onPaymentOptionSelect(paymentOption?: PaymentOption) {\n    this.createPaymentService.selectPaymentOption(paymentOption);\n  }\n\n  onApplyTemplate(form: FormGroup) {\n    this.shouldApplyTemplate = false;\n    if (this.paymentTemplate) {\n      this.setTemplateValues(form, this.paymentTemplate);\n    } else {\n      this.stateService.paymentTemplateState$\n        .pipe(takeUntil(this.destroyed$))\n        .subscribe((template) => {\n          if (template) {\n            this.setTemplateValues(form, template);\n          }\n        });\n    }\n  }\n\n  /**\n   * Fetches the payment options for provided payment details\n   */\n\n  private fetchPaymentOptions(\n    form: FormGroup\n  ): Observable<PaymentOptionsResponse> {\n    this.fetchingPaymentOptions$.next(true);\n    return this.paymentOptionsService.fetchPaymentOptions(\n      mapPaymentOptionRequest(form.getRawValue())\n    );\n  }\n\n  discardEditPaymentChanges() {\n    this.modalService?.closeModal();\n  }\n\n  cancelEditPaymentConfirmationDialog() {\n    this.isEditPaymentConfirmationDialogOpen = false;\n  }\n\n  onSubmit(form: FormGroup) {\n    const configVal = this.createPaymentService.selectedPaymentConfigValue;\n\n    if (configVal) {\n      this.createPaymentService.resetRedundantFields(configVal, form);\n    }\n\n    this.stateService.saveForm(form);\n    this.submitting$.next(true);\n    if (this.createPaymentSetup.hooks?.[PaymentHooks.onSave]) {\n      triggerPaymentHook(\n        this.createPaymentSetup.hooks,\n        PaymentHooks.onSave,\n        this.onHooksDone.bind(this, form),\n        form\n      );\n    } else {\n      this.onHooksDone(form);\n    }\n  }\n\n  onClear() {\n    this.fieldSetupService.clearPaymentOptions();\n    this.stateService.setPaymentState(PaymentState.INITIAL);\n    this.stateService.resetForm();\n    this.clearTemplateName();\n    this.formValue = null;\n    this.searchValue = '';\n    this.showApiError = false;\n    this.renderView();\n  }\n\n  onEditCancel(form: FormGroup) {\n    if (this.isEditFormNotChanged(form)) {\n      this.modalService?.closeModal();\n    } else {\n      this.isEditPaymentConfirmationDialogOpen = true;\n    }\n  }\n\n  onEditSubmit(form: FormGroup) {\n    if (this.isEditFormNotChanged(form)) {\n      this.editPaymentHasNoChanges = true;\n      this.scrollIntoAlertView();\n    } else {\n      this.editPaymentHasNoChanges = false;\n      this.onSubmit(form);\n    }\n  }\n\n  getForm(paymentState: PaymentState): Observable<FormGroup | undefined> {\n    if (paymentState === PaymentState.REVIEW) {\n      this.stateService.resetForm();\n      this.stateService.setPaymentState(PaymentState.INITIAL);\n    }\n\n    return this.stateService.form$;\n  }\n}\n","<bb-header-ui\n  *ngIf=\"header\"\n  headingClasses=\"bb-block bb-block--lg\"\n  headingType=\"h2\"\n  [heading]=\"header\"\n></bb-header-ui>\n<div #alertContainer>\n  <ng-container *ngIf=\"errors?.length; else noSpecificError\">\n    <ng-container *ngFor=\"let error of errors\">\n      <ng-container *ngIf=\"error.message; else noSpecificError\">\n        <bb-alert-ui *ngIf=\"showApiError\" title=\"\" modifier=\"error\">\n          <div class=\"bb-text-bold bb-text-default d-inline-flex\">\n            <ng-container *ngIf=\"isErrorTitleDisplayed\">\n              <span i18n=\"@@initiate-payment-payments-error-alert-title\">\n                Payment data error: </span\n              >&nbsp;\n            </ng-container>\n            <span>{{ $any(error)?.message }}</span>\n          </div>\n        </bb-alert-ui>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <ng-template #noSpecificError>\n    <ng-container *ngIf=\"genericError; else unknownError\">\n      <bb-alert-ui *ngIf=\"showApiError\" title=\"\" modifier=\"error\">\n        <div class=\"bb-text-bold bb-text-default\">\n          <ng-container *ngIf=\"isErrorTitleDisplayed\">\n            <span\n              i18n=\"@@initiate-payment-payments-generic-message-alert-title\"\n            >\n              Payment data error:\n            </span>\n          </ng-container>\n          <span>{{ genericError }}</span>\n        </div>\n      </bb-alert-ui>\n    </ng-container>\n  </ng-template>\n  <ng-template #unknownError>\n    <div class=\"bb-text-bold bb-text-default\">\n      <bb-alert-ui\n        *ngIf=\"showApiError\"\n        i18n-title=\"@@initiate-payment-payments-unknown-error-alert-title\"\n        title=\"Server error: Unknown error occurred\"\n        modifier=\"error\"\n      >\n      </bb-alert-ui>\n    </div>\n  </ng-template>\n  <bb-alert-ui\n    *ngIf=\"editPaymentHasNoChanges\"\n    i18n-title=\"\n      @@initiate-payment-payments-edit-paymet-no-changes-warning-alert-title\"\n    title=\"Please make changes to continue.\"\n    modifier=\"warning\"\n  ></bb-alert-ui>\n</div>\n\n<ng-container\n  *ngIf=\"\n    enablePaymentTemplateSelector &&\n    !options?.isTemplateMode &&\n    options?.paymentMode !== paymentMode.EDIT_PAYMENT &&\n    options?.paymentMode !== paymentMode.COPY_PAYMENT\n  \"\n>\n  <bb-payment-template-selector\n    [paymentTemplateSearch]=\"paymentTemplateSearch\"\n    [items]=\"paymentTemplates$\"\n    [loading]=\"loadingTemplates$ | async\"\n    [templateName]=\"templateSelectorName || templateNameControl?.value\"\n    [searchValue]=\"searchValue\"\n    (setValues)=\"onSelectPaymentTemplate($event)\"\n    (loadMoreTemplates)=\"onLoadingMoreTemplates($event)\"\n    (searchTemplates)=\"search($event)\"\n    (clear)=\"clearTemplateName()\"\n  >\n  </bb-payment-template-selector>\n</ng-container>\n\n<ng-container #outlet></ng-container>\n<ng-template #content>\n  <ng-container *ngIf=\"paymentState$ | async as paymentState\">\n    <ng-container *ngIf=\"configs.length === 1; else adaptiveFormTmpl\">\n      <bb-payord-form\n        [config]=\"configs[0]\"\n        [formItem]=\"getForm(paymentState) | async\"\n        [submitting]=\"submitting$ | async\"\n        [isModalView]=\"options.isModalView\"\n        [isTemplateMode]=\"options.isTemplateMode\"\n        [isDebitPayment]=\"options.isDebitPayment\"\n        [paymentMode]=\"options.paymentMode\"\n        [templateModeType]=\"options.templateModeType\"\n        (clear)=\"onClear()\"\n        (submitted)=\"onSubmit($event)\"\n        (editPaymentCancel)=\"onEditCancel($event)\"\n        (editPaymentSubmit)=\"onEditSubmit($event)\"\n      >\n      </bb-payord-form>\n\n      <bb-confirmation-dialog\n        data-role=\"discard-payment-edit-confirmation-dialog\"\n        confirmButtonColor=\"danger\"\n        (confirm)=\"discardEditPaymentChanges()\"\n        [isOpen]=\"isEditPaymentConfirmationDialogOpen\"\n        (cancel)=\"cancelEditPaymentConfirmationDialog()\"\n      >\n        <span title i18n=\"@@confirmation-dialog.edit.payment.title.discard\"\n          >Discard edited data?</span\n        >\n        <span body i18n=\"@@confirmation-dialog.edit.payment.body.discard\">\n          Are you sure you want to exit and discard all changes? Edited data\n          will be lost.\n        </span>\n        <span\n          confirmActionName\n          i18n=\"@@confirmation-dialog.edit.payment.action.discard.confirm\"\n          >Discard</span\n        >\n        <span\n          cancelActionName\n          i18n=\"@@confirmation-dialog.edit.payment.action.discard.cancel\"\n          >Not now</span\n        >\n      </bb-confirmation-dialog>\n    </ng-container>\n    <ng-template #adaptiveFormTmpl>\n      <bb-adaptive-form\n        [formItem]=\"getForm(paymentState) | async\"\n        [paymentState]=\"paymentState\"\n        [paymentTypes]=\"configs\"\n        [baseFields]=\"baseFields$ | async\"\n        [fetchOptions$]=\"fetchOptions$\"\n        [fetchingOptions]=\"fetchingPaymentOptions$ | async\"\n        [paymentOptions$]=\"paymentOptions$\"\n        [paymentOptionsError]=\"paymentOptionsError$ | async\"\n        [selectedPaymentConfig]=\"selectedPaymentConfig$ | async\"\n        [selectedPaymentOption]=\"selectedPaymentOption$ | async\"\n        [fetchPaymentOptionsListener]=\"fetchPaymentOptionsListener$ | async\"\n        [shouldApplyTemplate]=\"shouldApplyTemplate\"\n        [checkClosedPaymentsAccess]=\"!!options.checkClosedPaymentsAccess\"\n        [submitting]=\"submitting$ | async\"\n        [isModalView]=\"options.isModalView\"\n        [isDebitPayment]=\"options.isDebitPayment\"\n        (selectConfig)=\"onSelectConfig($event)\"\n        (submitted)=\"onSubmit($event)\"\n        (selectPaymentOption)=\"onPaymentOptionSelect($event)\"\n        (clear)=\"onClear()\"\n        (applyPaymentTemplate)=\"onApplyTemplate($event)\"\n      ></bb-adaptive-form>\n    </ng-template>\n  </ng-container>\n</ng-template>\n"]}