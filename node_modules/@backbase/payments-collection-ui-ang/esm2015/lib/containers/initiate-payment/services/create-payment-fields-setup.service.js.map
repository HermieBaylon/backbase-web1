{"version":3,"file":"create-payment-fields-setup.service.js","sourceRoot":"","sources":["../../../../../../../../libs/payments-collection-ui-ang/src/lib/containers/initiate-payment/services/create-payment-fields-setup.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  accMap,\n  BeneficiaryData,\n  BeneficiaryList,\n  FetchCreditorItemsParams,\n  handleCurrenciesList,\n  InitiatorFields,\n  mapArrangementList,\n  mapConnectedAccounts,\n  PaymentComponents,\n  InitiatePaymentOptions,\n  PaymentFormFieldConfig,\n  PaymentFormFieldOptions,\n  PaymentFormGroup,\n  PaymentOption,\n  PaymentOptionsService,\n  PaymentOrderHttpService,\n  PaymentTypeConfig,\n  PaymentTypeOptions,\n  ScheduleFields,\n  shouldLoadTabContent,\n  ContactsAndArrangementsGetParams,\n  PaymentMode,\n  CounterPartyFields,\n  OutputItem,\n} from '@backbase/payment-orders-ang';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\nimport { RateGet } from '@backbase/data-ang/payment-order';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { CreatePaymentConfigSetupService } from './create-payment-config-setup.service';\nimport {\n  ArrangementItem,\n  ArrangementList,\n  ContactList,\n  ExternalAccountFormItem,\n  InternalAccountFormItem,\n} from '@backbase/payment-orders-ang';\n\n@Injectable()\nexport class CreatePaymentFieldsSetupService implements OnDestroy {\n  private readonly destroyed$ = new Subject<void>();\n  private readonly fetchDebitItemPermissions$ = new Subject<string>();\n  private readonly fetchBeneficiaries$ =\n    new Subject<FetchCreditorItemsParams>();\n\n  private readonly paymentOptionsSub$ = new BehaviorSubject<PaymentOption[]>(\n    []\n  );\n  private readonly paymentOptionsErrorSub$ = new BehaviorSubject<boolean>(\n    false\n  );\n\n  private readonly exchangeRate$ = new Subject<number>();\n  private readonly getExchangeRate$ = new Subject<{\n    fromCurrency: string;\n    toCurrency: string;\n  }>();\n  private readonly exchangeRateError$ = new Subject<boolean>();\n  private readonly frequencyFieldSub$ = new Subject<PaymentFormFieldConfig>();\n\n  private readonly countries$ = this.loadSanctionedCountries();\n  private readonly currencies$ = this.loadSanctionedCurrencies();\n\n  private get debitAccounts$(): Observable<Array<OutputItem>> {\n    return this.paymentOrderHttpService\n      .getDebitAccounts({ size: this.options.pageSize })\n      .pipe(accMap(this.options.defaultScheme));\n  }\n\n  private get creditAccountList$() {\n    return this.paymentOrderHttpService\n      .getCreditAccounts({ size: this.options.pageSize })\n      .pipe(\n        map((arrangements) => ({\n          items: mapArrangementList(\n            arrangements as ArrangementList,\n            this.options.defaultScheme\n          ),\n          count: (arrangements as ArrangementList).count,\n        }))\n      );\n  }\n\n  private readonly fetchDebitAccounts$ =\n    new Subject<ContactsAndArrangementsGetParams>();\n  private readonly fetchCreditAccounts$ =\n    new Subject<ContactsAndArrangementsGetParams>();\n\n  private readonly connectedAccounts$ =\n    this.paymentOrderHttpService.connectedAccounts$.pipe(\n      map((accounts) => accounts?.map(mapConnectedAccounts))\n    );\n\n  private totalContacts = 0; // x-total-count from response header\n  private totalCreditAccounts = 0;\n  private totalContactsItemsCount = 0; // total count of items in response before extracting sub accounts\n  private checkClosedPaymentsAccess = false;\n\n  private contacts$!: Observable<ExternalAccountFormItem[] | HttpErrorResponse>;\n  private creditAccounts$!: Observable<\n    InternalAccountFormItem[] | HttpErrorResponse\n  >;\n\n  readonly paymentOptions$ = this.paymentOptionsSub$.asObservable();\n  readonly paymentOptionsError$ = this.paymentOptionsErrorSub$.asObservable();\n  readonly frequencyField$ = this.frequencyFieldSub$.asObservable();\n\n  get options(): InitiatePaymentOptions {\n    return this.createPaymentSetup.options;\n  }\n\n  get configs(): PaymentTypeConfig[] {\n    return this.createPaymentSetup.configs;\n  }\n\n  constructor(\n    private readonly createPaymentSetup: CreatePaymentConfigSetupService,\n    private readonly paymentOptionsService: PaymentOptionsService,\n    private readonly paymentOrderHttpService: PaymentOrderHttpService\n  ) {\n    this.fetchDebitItemPermissions$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((dataItemId) => {\n        this.paymentOrderHttpService.loadDataItemPermissions(dataItemId);\n      });\n\n    this.fetchBeneficiaries$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(({ params, type }: FetchCreditorItemsParams) => {\n        this.paymentOrderHttpService.fetchBeneficiaries(\n          { ...params, size: this.options.pageSize },\n          type\n        );\n      });\n\n    this.getExchangeRate$\n      .pipe(\n        filter(({ fromCurrency, toCurrency }) => {\n          const isExchangeValid = fromCurrency !== toCurrency;\n          if (!isExchangeValid) {\n            // If fromCurrency and toCurrency are same, don't fetch exchange rate\n            this.exchangeRate$.next(0);\n          }\n          return isExchangeValid;\n        }),\n        switchMap(({ fromCurrency, toCurrency }) =>\n          this.paymentOrderHttpService.getCurrencyExchangeRate(\n            fromCurrency,\n            toCurrency\n          )\n        ),\n        tap((exchangeRate: RateGet | null) => {\n          this.exchangeRateError$.next(!exchangeRate);\n          this.exchangeRate$.next(exchangeRate?.rate || 0);\n        }),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n\n    this.fetchDebitAccounts$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((params) => {\n        this.paymentOrderHttpService.loadMoreDebitAccounts({\n          ...params,\n          merge: true,\n          size: this.options.pageSize,\n        });\n      });\n\n    this.fetchCreditAccounts$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(({ from, ...params }) => {\n        this.paymentOrderHttpService.loadMoreCreditAccounts(from, {\n          ...params,\n          merge: true,\n          size: this.options.pageSize,\n        });\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n  }\n\n  private loadSanctionedCountries() {\n    return this.paymentOptionsService\n      .getSanctionedCountries(this.options?.defaultCountry)\n      .pipe(\n        shareReplay(1),\n        catchError((_) => {\n          this.paymentOrderHttpService.showNotification(false, {\n            header: $localize`:omni-payment-get-countries-failed:Failed to load countries list. Please try again later.`,\n          });\n          return of([]);\n        })\n      );\n  }\n\n  private loadSanctionedCurrencies(): Observable<{\n    currencies?: Array<string>;\n    dividerIndex?: number;\n  }> {\n    return this.paymentOptionsService\n      .getSanctionedCurrencies(this.options?.defaultCountry)\n      .pipe(\n        map((response) => {\n          const result: { currencies?: Array<string>; dividerIndex?: number } =\n            {};\n          if ('labeled' in response) {\n            const { currencies, dividerIndex } = handleCurrenciesList(response);\n\n            result.currencies = currencies;\n            result.dividerIndex = dividerIndex;\n          }\n          return result;\n        }),\n        shareReplay(1),\n        catchError((err) => {\n          this.paymentOrderHttpService.showNotification(false, {\n            header: $localize`:@omni-payment-get-countries-failed:Failed to load currencies list. Please try again later.`,\n          });\n          return of(err);\n        })\n      );\n  }\n\n  private loadAccountByAccountId(\n    id: string,\n    accountNumber: string\n  ): Observable<InternalAccountFormItem | undefined> {\n    return this.paymentOrderHttpService\n      .getAccountByAccountId(id, accountNumber)\n      .pipe(\n        map(\n          (item: ArrangementItem): ArrangementList => ({\n            count: 1,\n            items: [item as ArrangementItem],\n          })\n        ),\n        accMap(this.options.defaultScheme),\n        map(\n          (list: Array<InternalAccountFormItem>): InternalAccountFormItem =>\n            list[0]\n        ),\n        catchError(() => of(undefined))\n      );\n  }\n\n  private getContacts(): Observable<\n    ExternalAccountFormItem[] | HttpErrorResponse\n  > {\n    return this.paymentOrderHttpService\n      .getContacts({ size: this.options.pageSize, query: '' })\n      .pipe(\n        tap((data: ContactList | HttpErrorResponse) => {\n          if (!(data instanceof HttpErrorResponse)) {\n            this.totalContacts = data.count;\n            this.totalContactsItemsCount =\n              data.itemsCount && data.isLoadMore\n                ? this.totalContactsItemsCount + data.itemsCount\n                : data.itemsCount || 0;\n          } else {\n            this.totalContacts = 0;\n          }\n        }),\n        map((value: ContactList | HttpErrorResponse) =>\n          !(value instanceof HttpErrorResponse) ? value.items : value\n        )\n      );\n  }\n\n  private getCreditAccounts(): Observable<\n    InternalAccountFormItem[] | HttpErrorResponse\n  > {\n    return this.paymentOrderHttpService\n      .getCreditAccounts({ size: this.options.pageSize, searchTerm: '' })\n      .pipe(\n        tap((data: ArrangementList | HttpErrorResponse) => {\n          this.totalCreditAccounts = !(data instanceof HttpErrorResponse)\n            ? data.count\n            : 0;\n        }),\n        map((value) =>\n          !(value instanceof HttpErrorResponse)\n            ? mapArrangementList(value, this.options.defaultScheme)\n            : value\n        )\n      );\n  }\n\n  private getDebitAccounts(): Observable<ArrangementList> {\n    return this.paymentOrderHttpService\n      .getDebitAccounts({ size: this.options.pageSize, searchTerm: '' })\n      .pipe(\n        map((arrangements) => ({\n          items: mapArrangementList(arrangements, this.options.defaultScheme),\n          count: arrangements.count,\n        }))\n      );\n  }\n\n  private loadCreditorDetails(\n    options: PaymentFormFieldOptions\n  ): Observable<BeneficiaryData> {\n    this.contacts$ = shouldLoadTabContent(BeneficiaryList.CONTACTS, options)\n      ? this.getContacts()\n      : of([]);\n    this.creditAccounts$ = shouldLoadTabContent(\n      BeneficiaryList.ACCOUNTS,\n      options\n    )\n      ? this.getCreditAccounts()\n      : of([]);\n\n    return combineLatest([this.creditAccounts$, this.contacts$]).pipe(\n      map(([accounts, contacts]) => ({\n        accounts,\n        contacts,\n        totalCreditAccounts: this.totalCreditAccounts,\n        totalContacts: this.totalContacts,\n        totalContactsItemsCount: this.totalContactsItemsCount,\n      }))\n    );\n  }\n\n  setPaymentOptions(options: PaymentOption[]) {\n    this.paymentOptionsSub$.next(options);\n  }\n\n  setPaymentOptionsError(error: boolean) {\n    this.paymentOptionsErrorSub$.next(error);\n  }\n\n  clearPaymentOptions() {\n    this.paymentOptionsService.resetPaymentOptions();\n    this.setPaymentOptionsError(false);\n  }\n\n  injectData(\n    fields: Array<PaymentFormGroup | PaymentFormFieldConfig>,\n    paymentTypeOptions?: PaymentTypeOptions\n  ) {\n    fields.forEach((field) => {\n      field.options = field.options || {};\n      field.options.isTemplateMode = this.options.isTemplateMode;\n      field.options.templateModeType = this.options.templateModeType;\n      field.options.isModalView = this.options.isModalView;\n      field.options.checkClosedPaymentsAccess =\n        this.options.checkClosedPaymentsAccess ??\n        this.checkClosedPaymentsAccess;\n      field.options.isWizardMode = this.configs?.length > 1;\n\n      if ((<PaymentFormGroup>field).fields instanceof Array) {\n        this.injectData((<PaymentFormGroup>field).fields, paymentTypeOptions);\n      } else {\n        switch ((field as PaymentFormFieldConfig).type) {\n          case PaymentComponents.debitAccountSelector:\n            field.options.items$ = this.getDebitAccounts();\n            field.options.fetchItems$ = this.fetchDebitAccounts$;\n            field.options.loadAccountByAccountId =\n              this.loadAccountByAccountId.bind(this);\n            field.options.fetchArrangementPermissions$ =\n              this.fetchDebitItemPermissions$;\n            field.options.arrangementPermissions$ =\n              this.paymentOrderHttpService.arrangementUserPermissions$;\n            field.options.checkClosedPaymentsAccess =\n              this.options.checkClosedPaymentsAccess;\n            break;\n          case PaymentComponents.beneficiarySelector:\n            field.options.items$ = this.loadCreditorDetails(field.options);\n            field.options.fetchItems$ = this.fetchBeneficiaries$;\n            break;\n          case PaymentComponents.internalAccountSelector:\n            field.options.paymentTypeOptions = paymentTypeOptions;\n            field.options.connectedItems$ = this.connectedAccounts$;\n            field.options.items$ =\n              field.name === InitiatorFields.initiatorAccountGroup\n                ? this.debitAccounts$\n                : this.getCreditAccounts();\n            break;\n          case PaymentComponents.accountSelector:\n            field.options.paymentTypeOptions = paymentTypeOptions;\n            field.options.connectedItems$ = this.connectedAccounts$;\n            if (\n              field.name === CounterPartyFields.counterPartyAccountGroup ||\n              this.options.isDebitPayment\n            ) {\n              field.options.fetchItems$ = this.fetchCreditAccounts$;\n              field.options.items$ = this.creditAccountList$;\n            } else {\n              field.options.items$ = this.getDebitAccounts();\n              field.options.fetchItems$ = this.fetchDebitAccounts$;\n            }\n            break;\n          case PaymentComponents.contactSelector:\n            field.options.items$ = this.getContacts();\n            field.options.fetchItems$ = this.fetchBeneficiaries$;\n            break;\n          case PaymentComponents.selectPaymentOption:\n            field.options.items$ = this.paymentOptions$;\n            break;\n          case PaymentComponents.sanctionedCountrySelector:\n          case PaymentComponents.address:\n            field.options.items$ = this.countries$;\n            break;\n          case PaymentComponents.sanctionedCurrencyAmount:\n            field.options.items$ = this.currencies$;\n            field.options.getExchangeRate$ = this.getExchangeRate$;\n            field.options.exchangeRate$ = this.exchangeRate$;\n            field.options.exchangeRateError$ = this.exchangeRateError$;\n            break;\n          case PaymentComponents.select:\n            if (\n              field.name === ScheduleFields.frequency &&\n              this.options?.paymentMode === PaymentMode.EDIT_PAYMENT\n            ) {\n              this.frequencyFieldSub$.next(field as PaymentFormFieldConfig);\n            }\n            break;\n        }\n      }\n    });\n  }\n}\n"]}