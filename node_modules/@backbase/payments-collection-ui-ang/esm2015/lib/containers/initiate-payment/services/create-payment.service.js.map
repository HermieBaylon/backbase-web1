{"version":3,"file":"create-payment.service.js","sourceRoot":"","sources":["../../../../../../../../libs/payments-collection-ui-ang/src/lib/containers/initiate-payment/services/create-payment.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,iBAAiB,EAGjB,qBAAqB,GAEtB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAc,MAAM,MAAM,CAAC;AAC1D,OAAO,EAAE,oBAAoB,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAGnE,OAAO,EACL,gBAAgB,EAChB,uBAAuB,GACxB,MAAM,oCAAoC,CAAC;;;AAI5C,MAAM,OAAO,oBAAoB;IA+B/B,YAA6B,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;QA9BxD,8BAAyB,GAAG,IAAI,eAAe,CAE9D,SAAS,CAAC,CAAC;QACI,8BAAyB,GAAG,IAAI,eAAe,CAE9D,SAAS,CAAC,CAAC;QAEb,2BAAsB,GAAG,IAAI,CAAC,yBAAyB;aACpD,YAAY,EAAE;aACd,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAChC,2BAAsB,GAAG,IAAI,CAAC,yBAAyB;aACpD,YAAY,EAAE;aACd,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;IAkB4C,CAAC;IAhB7E,IAAI,0BAA0B;QAC5B,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC;IAC9C,CAAC;IAED,MAAM,CAAC,sBAAsB,CAC3B,SAAyC;;QAEzC,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,cAAc,EAAE,GAAG,SAAS,IAAI,EAAE,CAAC;QACpE,OAAO;YACL,kBAAkB,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,aAAa;YAC5C,mBAAmB,EAAE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,aAAa;YAChD,MAAM,EAAE,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,WAAW;YACnC,OAAO,EAAE,MAAA,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,YAAY,0CAAE,aAAa,0CAAE,OAAO;SAC5D,CAAC;IACJ,CAAC;IAID,mBAAmB,CAAC,MAA0B;QAC5C,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED,mBAAmB,CAAC,aAA6B;QAC/C,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACrD,CAAC;IAED,wBAAwB,CACtB,OAA4B;QAE5B,IAAI,UAAU,CAAC;QAEf,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAE1B,wCAAwC;YACxC,IAAI,MAAM,CAAC,WAAW,KAAK,wBAAwB,EAAE;gBACnD,OAAO,KAAK,CAAC;aACd;YAED,UAAU,GAAG,IAAI,CAAC,qBAAqB;iBACpC,oCAAoC,CAAC,MAAM,CAAC,WAAW,CAAC;iBACxD,IAAI,CACH,GAAG,CAAC,CAAC,QAAiC,EAAE,EAAE,CACxC,iBAAiB,CAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,CACnE,CACF,CAAC;SACL;aAAM;YACL,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,IAAI,CAC1D,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAC9B,GAAG,CAAC,CAAC,OAAiC,EAAE,EAAE,CACxC,iBAAiB,CAAC,OAAO,IAAI,EAAE,CAAC,CACjC,CACF,CAAC;SACH;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,oBAAoB,CAAC,iBAAoC,EAAE,IAAe;QACxE,uBAAuB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QACjD,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;;qIA5EU,oBAAoB;yIAApB,oBAAoB;4FAApB,oBAAoB;kBADhC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  mapPaymentOptions,\n  PaymentDetails,\n  PaymentOption,\n  PaymentOptionsService,\n  PaymentTypeConfig,\n} from '@backbase/payment-orders-ang';\nimport { BehaviorSubject, EMPTY, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { PaymentOption as PaymentOptionResponse } from '@backbase/data-ang/payment-order-options';\nimport { FormGroup } from '@angular/forms';\nimport {\n  resetBankDetails,\n  resetBeneficiaryAddress,\n} from '../helpers/payment-options-mappers';\nimport { CriticalFormValues } from '../models/create-payment.model';\n\n@Injectable()\nexport class CreatePaymentService {\n  private readonly selectedPaymentOptionSub$ = new BehaviorSubject<\n    PaymentOption | undefined\n  >(undefined);\n  private readonly selectedPaymentConfigSub$ = new BehaviorSubject<\n    PaymentTypeConfig | undefined\n  >(undefined);\n\n  selectedPaymentOption$ = this.selectedPaymentOptionSub$\n    .asObservable()\n    .pipe(distinctUntilChanged());\n  selectedPaymentConfig$ = this.selectedPaymentConfigSub$\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  get selectedPaymentConfigValue(): PaymentTypeConfig | undefined {\n    return this.selectedPaymentConfigSub$.value;\n  }\n\n  static getCriticalFieldValues(\n    formValue: Partial<PaymentDetails> | null\n  ): CriticalFormValues {\n    const { initiator, counterparty, remittanceInfo } = formValue || {};\n    return {\n      debitAccountNumber: initiator?.accountNumber,\n      creditAccountNumber: counterparty?.accountNumber,\n      amount: remittanceInfo?.amountGroup,\n      country: counterparty?.creditorBank?.postalAddress?.country,\n    };\n  }\n\n  constructor(private readonly paymentOptionsService: PaymentOptionsService) {}\n\n  selectPaymentConfig(config?: PaymentTypeConfig) {\n    this.selectedPaymentConfigSub$.next(config);\n  }\n\n  selectPaymentOption(paymentOption?: PaymentOption) {\n    this.selectedPaymentOptionSub$.next(paymentOption);\n  }\n\n  getPaymentOptionsRequest(\n    configs: PaymentTypeConfig[]\n  ): Observable<PaymentOption[] | undefined> {\n    let optionsReq;\n\n    if (configs.length === 1) {\n      const config = configs[0];\n\n      // TODO: find a better solution for this\n      if (config.paymentType !== 'INTERNATIONAL_TRANSFER') {\n        return EMPTY;\n      }\n\n      optionsReq = this.paymentOptionsService\n        .getPaymentOptionsRecordByPaymentType(config.paymentType)\n        .pipe(\n          map((response: PaymentOptionResponse[]) =>\n            mapPaymentOptions(response, { [config.paymentType]: config.name })\n          )\n        );\n    } else {\n      optionsReq = this.paymentOptionsService.paymentOptions$.pipe(\n        filter((options) => !!options),\n        map((options?: PaymentOptionResponse[]) =>\n          mapPaymentOptions(options || [])\n        )\n      );\n    }\n\n    return optionsReq;\n  }\n\n  resetRedundantFields(paymentTypeConfig: PaymentTypeConfig, form: FormGroup) {\n    resetBeneficiaryAddress(paymentTypeConfig, form);\n    resetBankDetails(paymentTypeConfig, form);\n  }\n}\n"]}