{"version":3,"file":"create-payment-config-setup.service.js","sourceRoot":"","sources":["../../../../../../../../libs/payments-collection-ui-ang/src/lib/containers/initiate-payment/services/create-payment-config-setup.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAe,MAAM,eAAe,CAAC;AAWxD,OAAO,EAAE,eAAe,EAAE,MAAM,MAAM,CAAC;AACvC,OAAO,EAAE,UAAU,EAAE,MAAM,qCAAqC,CAAC;;AAGjE,MAAM,OAAO,+BAA+B;IAD5C;QAEmB,gBAAW,GAAG,IAAI,eAAe,CAAsB,EAAE,CAAC,CAAC;QAC3D,gBAAW,GAAG,IAAI,eAAe,CAChD,EAAE,CACH,CAAC;QACe,mBAAc,GAAG,IAAI,eAAe,CAEnD,EAAE,CAAC,CAAC;QACW,oCAA+B,GAAG,IAAI,eAAe,CAEpE,SAAS,CAAC,CAAC;QACI,cAAS,GAAG,IAAI,eAAe,CAAsB,EAAE,CAAC,CAAC;QACzD,uBAAkB,GAAG,IAAI,eAAe,CAEvD,SAAS,CAAC,CAAC;QAEJ,aAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;QAC3C,aAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;QAC3C,gBAAW,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;QACjD,iCAA4B,GACnC,IAAI,CAAC,+BAA+B,CAAC,YAAY,EAAE,CAAC;QAC7C,oBAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KAmDnE;IAjDC,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IAChC,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IAChC,CAAC;IAED,QAAQ,CAAC,QAA6B,EAAE;QACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,UAAU,CAAC,OAA4B;QACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,UAAU,CAAC,OAA+B;QACxC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,aAAa,CACX,aAA+D,UAAU;QAEzE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC;IAED,8BAA8B,CAAC,UAA0C;QACvE,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IAED,iBAAiB,CAAC,WAA+C;QAC/D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5C,CAAC;IAED,SAAS,CAAC,KAAkC;;QAC1C,MAAM,WAAW,GACf,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/D,MAAM,IAAI,GAAG;YACX,WAAW,EAAE,MAAA,IAAI,CAAC,OAAO,0CAAE,WAAW;YACtC,KAAK;YACL,WAAW;YACX,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc;SACrC,CAAC;QACF,OAAO,MAAA,MAAA,IAAI,CAAC,OAAO,EAAC,MAAM,mDAAG,IAAI,CAAC,CAAC;IACrC,CAAC;;gJAvEU,+BAA+B;oJAA/B,+BAA+B;4FAA/B,+BAA+B;kBAD3C,UAAU","sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\nimport {\n  FetchPaymentOptionsListenerFn,\n  InitiatePaymentHeaderStates,\n  InitiatePaymentOptions,\n  PaymentFormFieldConfig,\n  PaymentFormGroup,\n  PaymentHooksOptions,\n  PaymentTypeConfig,\n  ReviewTemplateContext,\n} from '@backbase/payment-orders-ang';\nimport { BehaviorSubject } from 'rxjs';\nimport { BaseFields } from '../constants/initiate-payment.const';\n\n@Injectable()\nexport class CreatePaymentConfigSetupService {\n  private readonly configsSub$ = new BehaviorSubject<PaymentTypeConfig[]>([]);\n  private readonly optionsSub$ = new BehaviorSubject<InitiatePaymentOptions>(\n    {}\n  );\n  private readonly baseFieldsSub$ = new BehaviorSubject<\n    Array<PaymentFormFieldConfig | PaymentFormGroup>\n  >([]);\n  private readonly fetchPaymentOptionsListenerSub$ = new BehaviorSubject<\n    FetchPaymentOptionsListenerFn | undefined\n  >(undefined);\n  private readonly hooksSub$ = new BehaviorSubject<PaymentHooksOptions>({});\n  private readonly reviewTemplateSub$ = new BehaviorSubject<\n    TemplateRef<ReviewTemplateContext> | undefined\n  >(undefined);\n\n  readonly configs$ = this.configsSub$.asObservable();\n  readonly options$ = this.optionsSub$.asObservable();\n  readonly baseFields$ = this.baseFieldsSub$.asObservable();\n  readonly fetchPaymentOptionsListener$ =\n    this.fetchPaymentOptionsListenerSub$.asObservable();\n  readonly reviewTemplate$ = this.reviewTemplateSub$.asObservable();\n\n  get hooks(): PaymentHooksOptions {\n    return this.hooksSub$.value;\n  }\n\n  get options(): InitiatePaymentOptions {\n    return this.optionsSub$.value;\n  }\n\n  get configs(): PaymentTypeConfig[] {\n    return this.configsSub$.value;\n  }\n\n  setHooks(hooks: PaymentHooksOptions = {}) {\n    this.hooksSub$.next(hooks);\n  }\n\n  setConfigs(configs: PaymentTypeConfig[]) {\n    this.configsSub$.next(configs);\n  }\n\n  setOptions(options: InitiatePaymentOptions) {\n    this.optionsSub$.next(options);\n  }\n\n  setBaseFields(\n    baseFields: Array<PaymentFormFieldConfig | PaymentFormGroup> = BaseFields\n  ) {\n    this.baseFieldsSub$.next(baseFields);\n  }\n\n  setFetchPaymentOptionsListener(listenerFn?: FetchPaymentOptionsListenerFn) {\n    this.fetchPaymentOptionsListenerSub$.next(listenerFn);\n  }\n\n  setReviewTemplate(templateRef: TemplateRef<ReviewTemplateContext>) {\n    this.reviewTemplateSub$.next(templateRef);\n  }\n\n  getHeader(state: InitiatePaymentHeaderStates): string | undefined {\n    const paymentType =\n      this.configs.length === 1 ? this.configs[0].paymentType : '';\n    const data = {\n      paymentMode: this.options?.paymentMode,\n      state,\n      paymentType,\n      isDebit: this.options.isDebitPayment,\n    };\n    return this.options.header?.(data);\n  }\n}\n"]}