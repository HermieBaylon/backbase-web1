{"version":3,"file":"payment-options-mappers.js","sourceRoot":"","sources":["../../../../../../../../libs/payments-collection-ui-ang/src/lib/containers/initiate-payment/helpers/payment-options-mappers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PaymentOptionsRequest,\n  SchemeName,\n} from '@backbase/data-ang/payment-order-options';\nimport { PaymentTemplate } from '@backbase/data-ang/payment-template';\nimport { PaymentTypes } from '../constants/initiate-payment.const';\nimport { FormGroup } from '@angular/forms';\nimport {\n  CounterPartyFields,\n  getConfig,\n  getCounterpartySchemeName,\n  isAddressTruthy,\n  PaymentBaseFields,\n  PaymentDetails,\n  PaymentFormGroup,\n  PaymentTypeConfig,\n  stripSpaces,\n} from '@backbase/payment-orders-ang';\n\nexport const mapPaymentOptionRequest = (\n  formItem: PaymentDetails,\n  clientServiceAgreementID = '',\n  clientJurisdiction = ''\n): PaymentOptionsRequest => {\n  const { creditorBank } = formItem.counterparty;\n  const counterpartyCountry =\n    creditorBank &&\n    creditorBank.postalAddress &&\n    creditorBank.postalAddress.country;\n  const bankBranchCode = creditorBank && creditorBank.bankBranchCode;\n  const creditorScheme = getCounterpartySchemeName(formItem);\n  return {\n    ...(clientServiceAgreementID ? { clientServiceAgreementID } : null),\n    ...(clientJurisdiction ? { clientJurisdiction } : null),\n    originatorAccount: {\n      identification: formItem.initiator.id,\n      schemeName: SchemeName.ID,\n    },\n    counterpartyAccount: {\n      ...(bankBranchCode ? { bankBranchCode } : null),\n      identification:\n        creditorScheme === SchemeName.ID\n          ? stripSpaces(formItem.counterparty.id)\n          : stripSpaces(formItem.counterparty.accountNumber),\n      schemeName: <SchemeName>creditorScheme,\n    },\n    requestedExecutionDate: new Date().toISOString().substring(0, 10),\n    instructedAmount: {\n      amount: formItem.remittanceInfo.amountGroup.amount,\n      currencyCode: formItem.remittanceInfo.amountGroup.currency,\n    },\n    ...(counterpartyCountry ? { counterpartyCountry } : null),\n    additions: formItem.additions,\n  };\n};\n\nexport function normalizePaymentType(\n  selectedPaymentItem: PaymentTemplate | undefined\n): string | undefined {\n  let _selectedPayment = selectedPaymentItem?.details.paymentType;\n  if (\n    _selectedPayment ===\n      `${PaymentTypes.SEPA_PREFIX}${PaymentTypes.CLOSED_POSTFIX}` ||\n    _selectedPayment ===\n      `${PaymentTypes.SEPA_PREFIX}${PaymentTypes.ILE_POSTFIX}`\n  ) {\n    _selectedPayment = _selectedPayment.replace(\n      PaymentTypes.SEPA_PREFIX,\n      PaymentTypes.SEPA\n    );\n  }\n  let replacedPayment;\n  if (_selectedPayment) {\n    if (_selectedPayment.endsWith(PaymentTypes.ILE_POSTFIX)) {\n      replacedPayment = _selectedPayment.replace(PaymentTypes.ILE_POSTFIX, '');\n    } else if (_selectedPayment.endsWith(PaymentTypes.CLOSED_POSTFIX)) {\n      replacedPayment = _selectedPayment.replace(\n        PaymentTypes.CLOSED_POSTFIX,\n        ''\n      );\n    } else {\n      replacedPayment = _selectedPayment;\n    }\n  }\n\n  return replacedPayment;\n}\n\nexport function normalisePaymentTemplate(paymentTemplate: PaymentTemplate) {\n  return {\n    ...paymentTemplate,\n    details: {\n      ...paymentTemplate.details,\n      paymentType: normalizePaymentType(paymentTemplate),\n    },\n  };\n}\n\n/**\n * Reset beneficiary address if the form contains address details but the selected config does not contain address config.\n */\nexport function resetBeneficiaryAddress(\n  paymentTypeConfig: PaymentTypeConfig,\n  form: FormGroup\n) {\n  const counterPartyConfig = getConfig(\n    PaymentBaseFields.counterparty,\n    paymentTypeConfig\n  ) as PaymentFormGroup;\n  const beneficiaryAddress = getConfig(\n    CounterPartyFields.postalAddress,\n    counterPartyConfig\n  );\n  const beneficiaryAddressGroup = form.get([\n    PaymentBaseFields.counterparty,\n    CounterPartyFields.postalAddress,\n  ]);\n  if (\n    !beneficiaryAddress &&\n    beneficiaryAddressGroup &&\n    isAddressTruthy(beneficiaryAddressGroup.value)\n  ) {\n    beneficiaryAddressGroup.reset();\n  }\n}\n\n/**\n * Reset bank details if the form contains bank details but the selected config does not contain specific bank detail config.\n */\nexport function resetBankDetails(\n  paymentTypeConfig: PaymentTypeConfig,\n  form: FormGroup\n) {\n  const counterPartyConfig = getConfig(\n    PaymentBaseFields.counterparty,\n    paymentTypeConfig\n  ) as PaymentFormGroup;\n  const beneficiaryBankConfig = getConfig(\n    CounterPartyFields.creditorBank,\n    counterPartyConfig\n  ) as PaymentFormGroup;\n  const beneficiaryBankAddress = beneficiaryBankConfig\n    ? getConfig(CounterPartyFields.postalAddress, beneficiaryBankConfig)\n    : null;\n  const beneficiaryBankAddressGroup = form.get([\n    PaymentBaseFields.counterparty,\n    CounterPartyFields.creditorBank,\n    CounterPartyFields.postalAddress,\n  ]);\n\n  resetBankField(CounterPartyFields.bic, counterPartyConfig, form);\n  resetBankField(CounterPartyFields.bankName, counterPartyConfig, form);\n\n  if (\n    !beneficiaryBankAddress &&\n    beneficiaryBankAddressGroup &&\n    isAddressTruthy(beneficiaryBankAddressGroup.value)\n  ) {\n    for (const key in (<FormGroup>beneficiaryBankAddressGroup).controls) {\n      if (key !== 'country') {\n        (<FormGroup>beneficiaryBankAddressGroup).controls[key].reset();\n      }\n    }\n  }\n}\n\nexport function resetBankField(\n  fieldName: string,\n  counterpartyConfig: PaymentFormGroup,\n  form: FormGroup\n) {\n  const config = getConfig(fieldName, counterpartyConfig);\n  const control = form.get([\n    PaymentBaseFields.counterparty,\n    CounterPartyFields.creditorBank,\n    fieldName,\n  ]);\n  if (!config && control?.value) {\n    control.reset();\n  }\n}\n"]}