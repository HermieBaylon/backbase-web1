import { SchemeName, } from '@backbase/data-ang/payment-order-options';
import { PaymentTypes } from '../constants/initiate-payment.const';
import { CounterPartyFields, getConfig, getCounterpartySchemeName, isAddressTruthy, PaymentBaseFields, stripSpaces, } from '@backbase/payment-orders-ang';
export const mapPaymentOptionRequest = (formItem, clientServiceAgreementID = '', clientJurisdiction = '') => {
    const { creditorBank } = formItem.counterparty;
    const counterpartyCountry = creditorBank &&
        creditorBank.postalAddress &&
        creditorBank.postalAddress.country;
    const bankBranchCode = creditorBank && creditorBank.bankBranchCode;
    const creditorScheme = getCounterpartySchemeName(formItem);
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (clientServiceAgreementID ? { clientServiceAgreementID } : null)), (clientJurisdiction ? { clientJurisdiction } : null)), { originatorAccount: {
            identification: formItem.initiator.id,
            schemeName: SchemeName.ID,
        }, counterpartyAccount: Object.assign(Object.assign({}, (bankBranchCode ? { bankBranchCode } : null)), { identification: creditorScheme === SchemeName.ID
                ? stripSpaces(formItem.counterparty.id)
                : stripSpaces(formItem.counterparty.accountNumber), schemeName: creditorScheme }), requestedExecutionDate: new Date().toISOString().substring(0, 10), instructedAmount: {
            amount: formItem.remittanceInfo.amountGroup.amount,
            currencyCode: formItem.remittanceInfo.amountGroup.currency,
        } }), (counterpartyCountry ? { counterpartyCountry } : null)), { additions: formItem.additions });
};
export function normalizePaymentType(selectedPaymentItem) {
    let _selectedPayment = selectedPaymentItem === null || selectedPaymentItem === void 0 ? void 0 : selectedPaymentItem.details.paymentType;
    if (_selectedPayment ===
        `${PaymentTypes.SEPA_PREFIX}${PaymentTypes.CLOSED_POSTFIX}` ||
        _selectedPayment ===
            `${PaymentTypes.SEPA_PREFIX}${PaymentTypes.ILE_POSTFIX}`) {
        _selectedPayment = _selectedPayment.replace(PaymentTypes.SEPA_PREFIX, PaymentTypes.SEPA);
    }
    let replacedPayment;
    if (_selectedPayment) {
        if (_selectedPayment.endsWith(PaymentTypes.ILE_POSTFIX)) {
            replacedPayment = _selectedPayment.replace(PaymentTypes.ILE_POSTFIX, '');
        }
        else if (_selectedPayment.endsWith(PaymentTypes.CLOSED_POSTFIX)) {
            replacedPayment = _selectedPayment.replace(PaymentTypes.CLOSED_POSTFIX, '');
        }
        else {
            replacedPayment = _selectedPayment;
        }
    }
    return replacedPayment;
}
export function normalisePaymentTemplate(paymentTemplate) {
    return Object.assign(Object.assign({}, paymentTemplate), { details: Object.assign(Object.assign({}, paymentTemplate.details), { paymentType: normalizePaymentType(paymentTemplate) }) });
}
/**
 * Reset beneficiary address if the form contains address details but the selected config does not contain address config.
 */
export function resetBeneficiaryAddress(paymentTypeConfig, form) {
    const counterPartyConfig = getConfig(PaymentBaseFields.counterparty, paymentTypeConfig);
    const beneficiaryAddress = getConfig(CounterPartyFields.postalAddress, counterPartyConfig);
    const beneficiaryAddressGroup = form.get([
        PaymentBaseFields.counterparty,
        CounterPartyFields.postalAddress,
    ]);
    if (!beneficiaryAddress &&
        beneficiaryAddressGroup &&
        isAddressTruthy(beneficiaryAddressGroup.value)) {
        beneficiaryAddressGroup.reset();
    }
}
/**
 * Reset bank details if the form contains bank details but the selected config does not contain specific bank detail config.
 */
export function resetBankDetails(paymentTypeConfig, form) {
    const counterPartyConfig = getConfig(PaymentBaseFields.counterparty, paymentTypeConfig);
    const beneficiaryBankConfig = getConfig(CounterPartyFields.creditorBank, counterPartyConfig);
    const beneficiaryBankAddress = beneficiaryBankConfig
        ? getConfig(CounterPartyFields.postalAddress, beneficiaryBankConfig)
        : null;
    const beneficiaryBankAddressGroup = form.get([
        PaymentBaseFields.counterparty,
        CounterPartyFields.creditorBank,
        CounterPartyFields.postalAddress,
    ]);
    resetBankField(CounterPartyFields.bic, counterPartyConfig, form);
    resetBankField(CounterPartyFields.bankName, counterPartyConfig, form);
    if (!beneficiaryBankAddress &&
        beneficiaryBankAddressGroup &&
        isAddressTruthy(beneficiaryBankAddressGroup.value)) {
        for (const key in beneficiaryBankAddressGroup.controls) {
            if (key !== 'country') {
                beneficiaryBankAddressGroup.controls[key].reset();
            }
        }
    }
}
export function resetBankField(fieldName, counterpartyConfig, form) {
    const config = getConfig(fieldName, counterpartyConfig);
    const control = form.get([
        PaymentBaseFields.counterparty,
        CounterPartyFields.creditorBank,
        fieldName,
    ]);
    if (!config && (control === null || control === void 0 ? void 0 : control.value)) {
        control.reset();
    }
}
//# sourceMappingURL=payment-options-mappers.js.map