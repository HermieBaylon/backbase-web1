import { __rest } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, } from '@angular/core';
import { CONDITIONS } from '@backbase/foundation-ang/web-sdk';
import { from, of } from 'rxjs';
import { concatMap, map, reduce } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/header";
import * as i2 from "./components/header-dropdown/header-dropdown.component";
import * as i3 from "@angular/common";
export class PaymentsHeaderComponent {
    constructor(conditions) {
        this.conditions = conditions;
        /**
         * Custom class name
         */
        this.customClassName = '';
        /**
         * Heading Classes
         */
        this.headingClasses = '';
        /**
         * Heading type (h1-h6)
         */
        this.headingType = '';
        /**
         * Heading
         */
        this.heading = '';
        /**
         * Show right side button / dropdown
         */
        this.showNavigation = true;
        /**
         * Array of representation of the link menu object
         */
        this.navigationItems = [];
        /**
         * Flag to denote if the first link from buttons array should be used as default target
         */
        this.useFirstLinkAsDefault = false;
        /**
         * Flag to denote if the first link from buttons array should be used as default target
         */
        this.position = 'bottom-right';
        /**
         * Color of the button. Default `primary`
         */
        this.buttonColor = 'primary';
        /**
         * Size of the button. Allowed values are `sm` or `md`. Default `md`
         */
        this.buttonSize = 'md';
        /**
         * Event on item click
         */
        this.navigationAction = new EventEmitter();
    }
    hasPermissions(item) {
        const hasPermissionsPromise = item.canView
            ? this.conditions.resolveEntitlements(item.canView)
            : of(true);
        return from(hasPermissionsPromise).pipe(map((hasPermissions) => (Object.assign({ hasPermissions }, item))));
    }
    menuSetup() {
        return from(this.navigationItems).pipe(concatMap(this.hasPermissions.bind(this)), reduce((acc, _a) => {
            var { hasPermissions } = _a, item = __rest(_a, ["hasPermissions"]);
            if (hasPermissions) {
                acc.push(Object.assign({}, item));
            }
            return acc;
        }, []));
    }
    ngOnInit() {
        this.menuItems = this.menuSetup();
    }
    onClick(value) {
        this.navigationAction.emit(value);
    }
}
/** @nocollapse */ PaymentsHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsHeaderComponent, deps: [{ token: CONDITIONS }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsHeaderComponent, selector: "bb-payments-header", inputs: { customClassName: "customClassName", headingClasses: "headingClasses", headingType: "headingType", heading: "heading", showNavigation: "showNavigation", navigationItems: "navigationItems", useFirstLinkAsDefault: "useFirstLinkAsDefault", position: "position", buttonLabel: "buttonLabel", buttonIcon: "buttonIcon", buttonColor: "buttonColor", buttonSize: "buttonSize" }, outputs: { navigationAction: "navigationAction" }, ngImport: i0, template: "<div class=\"heading-widget bb-heading-widget {{ customClassName }}\">\n  <bb-header-ui\n    headingClasses=\"bb-heading-widget__heading {{ headingClasses }}\"\n    [headingType]=\"headingType\"\n    [heading]=\"heading\"\n  ></bb-header-ui>\n\n  <ng-container *ngIf=\"showNavigation\">\n    <ng-container *ngIf=\"menuItems | async as menu\">\n      <ng-container *ngIf=\"menu.length\">\n        <bb-header-dropdown\n          [menu]=\"menu\"\n          [useFirstLinkAsDefault]=\"useFirstLinkAsDefault\"\n          [position]=\"position\"\n          [buttonLabel]=\"buttonLabel\"\n          [buttonIcon]=\"buttonIcon\"\n          [buttonColor]=\"buttonColor\"\n          [buttonSize]=\"buttonSize\"\n          (navigationAction)=\"onClick($event)\"\n        >\n        </bb-header-dropdown>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n", components: [{ type: i1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2.HeaderDropdownComponent, selector: "bb-header-dropdown", inputs: ["menu", "useFirstLinkAsDefault", "position", "buttonLabel", "buttonIcon", "buttonColor", "buttonSize"], outputs: ["navigationAction"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-header',
                    templateUrl: './payments-header.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [CONDITIONS]
                }] }]; }, propDecorators: { customClassName: [{
                type: Input
            }], headingClasses: [{
                type: Input
            }], headingType: [{
                type: Input
            }], heading: [{
                type: Input
            }], showNavigation: [{
                type: Input
            }], navigationItems: [{
                type: Input
            }], useFirstLinkAsDefault: [{
                type: Input
            }], position: [{
                type: Input
            }], buttonLabel: [{
                type: Input
            }], buttonIcon: [{
                type: Input
            }], buttonColor: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], navigationAction: [{
                type: Output
            }] } });
//# sourceMappingURL=payments-header.component.js.map