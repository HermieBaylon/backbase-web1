import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/ui-ang/dropdown-menu";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/ui-ang/button";
export class HeaderDropdownComponent {
    constructor() {
        /**
         * Array of representation of the link menu object
         */
        this.menu = [];
        /**
         * Flag to denote if the first link from buttons array should be used as default target
         */
        this.useFirstLinkAsDefault = false;
        /**
         * Flag to denote if the first link from buttons array should be used as default target
         */
        this.position = 'bottom-right';
        /**
         * Color of the button. Default `primary`
         */
        this.buttonColor = 'primary';
        /**
         * Size of the button. Allowed values are `sm` or `md`. Default `md`
         */
        this.buttonSize = 'md';
        /**
         * Event on item click
         */
        this.navigationAction = new EventEmitter();
    }
    onClick(event, value) {
        event.preventDefault();
        this.navigationAction.emit(value);
    }
}
/** @nocollapse */ HeaderDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderDropdownComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ HeaderDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HeaderDropdownComponent, selector: "bb-header-dropdown", inputs: { menu: "menu", useFirstLinkAsDefault: "useFirstLinkAsDefault", position: "position", buttonLabel: "buttonLabel", buttonIcon: "buttonIcon", buttonColor: "buttonColor", buttonSize: "buttonSize" }, outputs: { navigationAction: "navigationAction" }, ngImport: i0, template: "<div class=\"btn-group bb-button-bar__button\">\n  <button\n    *ngIf=\"useFirstLinkAsDefault || menu.length === 1\"\n    class=\"bb-button-bar__button\"\n    bbButton\n    [color]=\"buttonColor\"\n    [buttonSize]=\"buttonSize\"\n    (click)=\"onClick($event, menu[0].value)\"\n  >\n    <bb-icon-ui *ngIf=\"menu[0].iconName\" [name]=\"menu[0].iconName\"></bb-icon-ui>\n    <span>{{ menu[0].label }}</span>\n  </button>\n  <ng-container *ngIf=\"menu.length > 1\">\n    <bb-dropdown-menu-ui\n      container=\"body\"\n      icon=\"caret-down\"\n      [btnColor]=\"buttonColor\"\n      [buttonSize]=\"buttonSize\"\n      [position]=\"position\"\n      [class.btn-group]=\"useFirstLinkAsDefault\"\n    >\n      <ng-template bbDropdownLabel>\n        <span class=\"d-flex align-items-center\" *ngIf=\"!useFirstLinkAsDefault\">\n          <bb-icon-ui *ngIf=\"buttonIcon\" [name]=\"buttonIcon\"></bb-icon-ui>\n          <span>{{ buttonLabel }}</span>\n        </span>\n      </ng-template>\n\n      <ng-template bbDropdownMenuItem>\n        <ng-container *ngFor=\"let item of menu; let i = index\">\n          <ng-container *ngIf=\"!(useFirstLinkAsDefault && i === 0)\">\n            <a\n              rel=\"noopener\"\n              role=\"menuitem\"\n              href=\"#\"\n              class=\"dropdown-item\"\n              (click)=\"onClick($event, item.value)\"\n            >\n              <span class=\"bb-stack\">\n                <bb-icon-ui\n                  *ngIf=\"item.iconName\"\n                  class=\"bb-stack__item bb-stack__item--align-top\"\n                  [name]=\"item.iconName ? item.iconName : undefined\"\n                  color=\"dark\"\n                ></bb-icon-ui>\n                <div class=\"bb-stack__item\">\n                  <span>{{ item.label }}</span>\n                  <div\n                    *ngIf=\"item.description\"\n                    class=\"bb-subtitle bb-text-support mr-4\"\n                  >\n                    {{ item.description }}\n                  </div>\n                </div>\n              </span>\n            </a>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </ng-container>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-header-dropdown',
                    templateUrl: './header-dropdown.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { menu: [{
                type: Input
            }], useFirstLinkAsDefault: [{
                type: Input
            }], position: [{
                type: Input
            }], buttonLabel: [{
                type: Input
            }], buttonIcon: [{
                type: Input
            }], buttonColor: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], navigationAction: [{
                type: Output
            }] } });
//# sourceMappingURL=header-dropdown.component.js.map