(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@backbase/payment-orders-ang'), require('@angular/forms'), require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@backbase/foundation-ang/web-sdk'), require('@backbase/payord-form-builder-ang'), require('@backbase/data-ang/payment-order-options'), require('@angular/common/http'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/alert'), require('@backbase/data-ang/payment-order'), require('@backbase/data-ang/contact-manager'), require('@backbase/identity-auth/transaction-signing'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/keyboard-click-directive'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/focus'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@backbase/payments-collection-ui-ang', ['exports', '@backbase/payment-orders-ang', '@angular/forms', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators', '@backbase/foundation-ang/web-sdk', '@backbase/payord-form-builder-ang', '@backbase/data-ang/payment-order-options', '@angular/common/http', '@backbase/ui-ang/header', '@backbase/ui-ang/alert', '@backbase/data-ang/payment-order', '@backbase/data-ang/contact-manager', '@backbase/identity-auth/transaction-signing', '@backbase/foundation-ang/core', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/icon', '@backbase/ui-ang/amount', '@backbase/ui-ang/load-button', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/modal', '@backbase/ui-ang/button', '@backbase/ui-ang/keyboard-click-directive', '@backbase/ui-ang/notification', '@backbase/ui-ang/focus', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payments-collection-ui-ang"] = {}), global.i2, global.ng.forms, global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators, global.webSdk, global.i7, global.paymentOrderOptions, global.ng.common.http, global.i5, global.i6, global.paymentOrder, global.contactManager, global.i2$2, global.i1$2, global.i3, global.i1$1, global.i2$1, global.i13, global.i2$3, global.i13$1, global.i18, global.i19, global.notification, global.focus, global.ng.router));
})(this, (function (exports, i2, i1, i0, i14, rxjs, operators, webSdk, i7, paymentOrderOptions, http, i5, i6, paymentOrder, contactManager, i2$2, i1$2, i3, i1$1, i2$1, i13, i2$3, i13$1, i18, i19, notification, focus, router) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i14__namespace = /*#__PURE__*/_interopNamespace(i14);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i13__namespace$1 = /*#__PURE__*/_interopNamespace(i13$1);
    var i18__namespace = /*#__PURE__*/_interopNamespace(i18);
    var i19__namespace = /*#__PURE__*/_interopNamespace(i19);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var counterPartyConfig = {
        name: i2.PaymentBaseFields.counterparty,
        fields: [
            {
                name: i2.PaymentComponents.beneficiaryGroupHeader,
                type: i2.PaymentComponents.beneficiaryGroupHeader,
                options: {
                    label: $localize(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([":@@initiate-payment-base-fields.beneficiary-header-title:To"], [":@@initiate-payment-base-fields.beneficiary-header-title:To"]))),
                    hasDynamicTitle: true,
                },
            },
            {
                name: i2.CounterPartyFields.name,
                type: i2.PaymentComponents.beneficiarySelector,
                options: {
                    label: $localize(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject([":@@initiate-payment-base-fields.beneficiary-selector-label:Beneficiary's name"], [":@@initiate-payment-base-fields.beneficiary-selector-label:Beneficiary's name"]))),
                    placeholder: $localize(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject([":@@initiate-payment-base-fields.beneficiary-selector-placeholder:Select a beneficiary"], [":@@initiate-payment-base-fields.beneficiary-selector-placeholder:Select a beneficiary"]))),
                    saveNewContactLabel: $localize(templateObject_4$2 || (templateObject_4$2 = __makeTemplateObject([":@@initiate-payment-base-fields.beneficiary-selector-new-contact-label:Save as a new contact"], [":@@initiate-payment-base-fields.beneficiary-selector-new-contact-label:Save as a new contact"]))),
                    isWizardMode: true,
                    retainBankCountry: true,
                    cssClasses: ['col-12'],
                    dependants: [
                        i2.CounterPartyFields.country,
                        i2.CounterPartyFields.bankBranchCode,
                        i2.CounterPartyFields.accountNumber,
                    ],
                    validationMessages: [
                        {
                            message: $localize(templateObject_5$2 || (templateObject_5$2 = __makeTemplateObject([":@@initiate-payment-base-fields.same-accounts-error:Beneficiary is same as selected Debit account"], [":@@initiate-payment-base-fields.same-accounts-error:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                },
            },
            {
                name: i2.CounterPartyFields.country,
                type: i2.PaymentComponents.sanctionedCountrySelector,
                options: {
                    validators: [i1.Validators.required],
                    label: $localize(templateObject_6$2 || (templateObject_6$2 = __makeTemplateObject([":@@initiate-payment-base-fields.country.label:Country"], [":@@initiate-payment-base-fields.country.label:Country"]))),
                    placeholder: $localize(templateObject_7$2 || (templateObject_7$2 = __makeTemplateObject([":@@initiate-payment-base-fields.country-placeholder:- select a country -"], [":@@initiate-payment-base-fields.country-placeholder:- select a country -"]))),
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    mapToField: i2.PaymentBaseFields.counterparty + "." + i2.CounterPartyFields.creditorBank + "." + i2.CounterPartyFields.postalAddress,
                },
            },
            {
                name: i2.CounterPartyFields.accountNumber,
                type: i2.PaymentComponents.text,
                options: {
                    validators: [i1.Validators.required, i1.Validators.minLength(6)],
                    maxLength: 36,
                    label: $localize(templateObject_8$2 || (templateObject_8$2 = __makeTemplateObject([":@@initiate-payment-base-fields.acc-no-label:Account number or IBAN"], [":@@initiate-payment-base-fields.acc-no-label:Account number or IBAN"]))),
                    validationMessages: [
                        {
                            name: 'minlength',
                            message: $localize(templateObject_9$2 || (templateObject_9$2 = __makeTemplateObject([":@@initiate-payment-base-fields.acc-no-min-length-error:Account number should have minimum 6 characters"], [":@@initiate-payment-base-fields.acc-no-min-length-error:Account number should have minimum 6 characters"]))),
                        },
                        {
                            message: $localize(templateObject_10$1 || (templateObject_10$1 = __makeTemplateObject([":@@initiate-payment-base-fields.iban-country-error-message:Invalid IBAN"], [":@@initiate-payment-base-fields.iban-country-error-message:Invalid IBAN"]))),
                            name: 'invalidIbanCountry',
                        },
                    ],
                    cssClasses: ['d-inline-block', 'col-md-6'],
                },
            },
            {
                name: i2.CounterPartyFields.bankBranchCode,
                type: i2.PaymentComponents.text,
                options: {
                    label: $localize(templateObject_11$1 || (templateObject_11$1 = __makeTemplateObject([":@@initiate-payment-base-fields.bank-branch-code-label:Sort code"], [":@@initiate-payment-base-fields.bank-branch-code-label:Sort code"]))),
                    maxLength: 20,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    mapToField: i2.PaymentBaseFields.counterparty + "." + i2.CounterPartyFields.creditorBank,
                },
            },
        ],
    };
    var BaseFields = [
        i2.defaultInitiatorConfig,
        {
            name: i2.PaymentBaseFields.remittanceInfo,
            title: $localize(templateObject_12$1 || (templateObject_12$1 = __makeTemplateObject([":@@initiate-payment-base-fields.remittance-group-title:Payment details"], [":@@initiate-payment-base-fields.remittance-group-title:Payment details"]))),
            fields: [
                {
                    type: i2.PaymentComponents.sanctionedCurrencyAmount,
                    name: i2.RemittanceInfoFields.amountCurrencyGroup,
                    options: {
                        cssClasses: ['col-12'],
                        label: $localize(templateObject_13$1 || (templateObject_13$1 = __makeTemplateObject([":@@initiate-payment-base-fields.amount-title:Amount"], [":@@initiate-payment-base-fields.amount-title:Amount"]))),
                        validationMessages: [
                            {
                                message: $localize(templateObject_14$1 || (templateObject_14$1 = __makeTemplateObject([":@@initiate-payment-base-fields.amount-error:Enter amount"], [":@@initiate-payment-base-fields.amount-error:Enter amount"]))),
                                name: 'invalidAmount',
                            },
                            {
                                message: $localize(templateObject_15$1 || (templateObject_15$1 = __makeTemplateObject([":@@initiate-payment-base-fields.currency-error:Selected country does not allow payments in this currency"], [":@@initiate-payment-base-fields.currency-error:Selected country does not allow payments in this currency"]))),
                                name: 'invalidCurrency',
                            },
                        ],
                    },
                },
            ],
        },
        counterPartyConfig,
    ];
    var PaymentTypes = {
        ILE_POSTFIX: '_ILE',
        CLOSED_POSTFIX: '_CLOSED',
        SEPA_PREFIX: 'SEPA_CT',
        SEPA: 'SEPA_CREDIT_TRANSFER',
    };
    var templateObject_1$3, templateObject_2$3, templateObject_3$2, templateObject_4$2, templateObject_5$2, templateObject_6$2, templateObject_7$2, templateObject_8$2, templateObject_9$2, templateObject_10$1, templateObject_11$1, templateObject_12$1, templateObject_13$1, templateObject_14$1, templateObject_15$1;

    var mapPaymentOptionRequest = function (formItem, clientServiceAgreementID, clientJurisdiction) {
        if (clientServiceAgreementID === void 0) { clientServiceAgreementID = ''; }
        if (clientJurisdiction === void 0) { clientJurisdiction = ''; }
        var creditorBank = formItem.counterparty.creditorBank;
        var counterpartyCountry = creditorBank &&
            creditorBank.postalAddress &&
            creditorBank.postalAddress.country;
        var bankBranchCode = creditorBank && creditorBank.bankBranchCode;
        var creditorScheme = i2.getCounterpartySchemeName(formItem);
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (clientServiceAgreementID ? { clientServiceAgreementID: clientServiceAgreementID } : null)), (clientJurisdiction ? { clientJurisdiction: clientJurisdiction } : null)), { originatorAccount: {
                identification: formItem.initiator.id,
                schemeName: paymentOrderOptions.SchemeName.ID,
            }, counterpartyAccount: Object.assign(Object.assign({}, (bankBranchCode ? { bankBranchCode: bankBranchCode } : null)), { identification: creditorScheme === paymentOrderOptions.SchemeName.ID
                    ? i2.stripSpaces(formItem.counterparty.id)
                    : i2.stripSpaces(formItem.counterparty.accountNumber), schemeName: creditorScheme }), requestedExecutionDate: new Date().toISOString().substring(0, 10), instructedAmount: {
                amount: formItem.remittanceInfo.amountGroup.amount,
                currencyCode: formItem.remittanceInfo.amountGroup.currency,
            } }), (counterpartyCountry ? { counterpartyCountry: counterpartyCountry } : null)), { additions: formItem.additions });
    };
    function normalizePaymentType(selectedPaymentItem) {
        var _selectedPayment = selectedPaymentItem === null || selectedPaymentItem === void 0 ? void 0 : selectedPaymentItem.details.paymentType;
        if (_selectedPayment ===
            "" + PaymentTypes.SEPA_PREFIX + PaymentTypes.CLOSED_POSTFIX ||
            _selectedPayment ===
                "" + PaymentTypes.SEPA_PREFIX + PaymentTypes.ILE_POSTFIX) {
            _selectedPayment = _selectedPayment.replace(PaymentTypes.SEPA_PREFIX, PaymentTypes.SEPA);
        }
        var replacedPayment;
        if (_selectedPayment) {
            if (_selectedPayment.endsWith(PaymentTypes.ILE_POSTFIX)) {
                replacedPayment = _selectedPayment.replace(PaymentTypes.ILE_POSTFIX, '');
            }
            else if (_selectedPayment.endsWith(PaymentTypes.CLOSED_POSTFIX)) {
                replacedPayment = _selectedPayment.replace(PaymentTypes.CLOSED_POSTFIX, '');
            }
            else {
                replacedPayment = _selectedPayment;
            }
        }
        return replacedPayment;
    }
    function normalisePaymentTemplate(paymentTemplate) {
        return Object.assign(Object.assign({}, paymentTemplate), { details: Object.assign(Object.assign({}, paymentTemplate.details), { paymentType: normalizePaymentType(paymentTemplate) }) });
    }
    /**
     * Reset beneficiary address if the form contains address details but the selected config does not contain address config.
     */
    function resetBeneficiaryAddress(paymentTypeConfig, form) {
        var counterPartyConfig = i2.getConfig(i2.PaymentBaseFields.counterparty, paymentTypeConfig);
        var beneficiaryAddress = i2.getConfig(i2.CounterPartyFields.postalAddress, counterPartyConfig);
        var beneficiaryAddressGroup = form.get([
            i2.PaymentBaseFields.counterparty,
            i2.CounterPartyFields.postalAddress,
        ]);
        if (!beneficiaryAddress &&
            beneficiaryAddressGroup &&
            i2.isAddressTruthy(beneficiaryAddressGroup.value)) {
            beneficiaryAddressGroup.reset();
        }
    }
    /**
     * Reset bank details if the form contains bank details but the selected config does not contain specific bank detail config.
     */
    function resetBankDetails(paymentTypeConfig, form) {
        var counterPartyConfig = i2.getConfig(i2.PaymentBaseFields.counterparty, paymentTypeConfig);
        var beneficiaryBankConfig = i2.getConfig(i2.CounterPartyFields.creditorBank, counterPartyConfig);
        var beneficiaryBankAddress = beneficiaryBankConfig
            ? i2.getConfig(i2.CounterPartyFields.postalAddress, beneficiaryBankConfig)
            : null;
        var beneficiaryBankAddressGroup = form.get([
            i2.PaymentBaseFields.counterparty,
            i2.CounterPartyFields.creditorBank,
            i2.CounterPartyFields.postalAddress,
        ]);
        resetBankField(i2.CounterPartyFields.bic, counterPartyConfig, form);
        resetBankField(i2.CounterPartyFields.bankName, counterPartyConfig, form);
        if (!beneficiaryBankAddress &&
            beneficiaryBankAddressGroup &&
            i2.isAddressTruthy(beneficiaryBankAddressGroup.value)) {
            for (var key in beneficiaryBankAddressGroup.controls) {
                if (key !== 'country') {
                    beneficiaryBankAddressGroup.controls[key].reset();
                }
            }
        }
    }
    function resetBankField(fieldName, counterpartyConfig, form) {
        var config = i2.getConfig(fieldName, counterpartyConfig);
        var control = form.get([
            i2.PaymentBaseFields.counterparty,
            i2.CounterPartyFields.creditorBank,
            fieldName,
        ]);
        if (!config && (control === null || control === void 0 ? void 0 : control.value)) {
            control.reset();
        }
    }

    var CreatePaymentConfigSetupService = /** @class */ (function () {
        function CreatePaymentConfigSetupService() {
            this.configsSub$ = new rxjs.BehaviorSubject([]);
            this.optionsSub$ = new rxjs.BehaviorSubject({});
            this.baseFieldsSub$ = new rxjs.BehaviorSubject([]);
            this.fetchPaymentOptionsListenerSub$ = new rxjs.BehaviorSubject(undefined);
            this.hooksSub$ = new rxjs.BehaviorSubject({});
            this.reviewTemplateSub$ = new rxjs.BehaviorSubject(undefined);
            this.configs$ = this.configsSub$.asObservable();
            this.options$ = this.optionsSub$.asObservable();
            this.baseFields$ = this.baseFieldsSub$.asObservable();
            this.fetchPaymentOptionsListener$ = this.fetchPaymentOptionsListenerSub$.asObservable();
            this.reviewTemplate$ = this.reviewTemplateSub$.asObservable();
        }
        Object.defineProperty(CreatePaymentConfigSetupService.prototype, "hooks", {
            get: function () {
                return this.hooksSub$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CreatePaymentConfigSetupService.prototype, "options", {
            get: function () {
                return this.optionsSub$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CreatePaymentConfigSetupService.prototype, "configs", {
            get: function () {
                return this.configsSub$.value;
            },
            enumerable: false,
            configurable: true
        });
        CreatePaymentConfigSetupService.prototype.setHooks = function (hooks) {
            if (hooks === void 0) { hooks = {}; }
            this.hooksSub$.next(hooks);
        };
        CreatePaymentConfigSetupService.prototype.setConfigs = function (configs) {
            this.configsSub$.next(configs);
        };
        CreatePaymentConfigSetupService.prototype.setOptions = function (options) {
            this.optionsSub$.next(options);
        };
        CreatePaymentConfigSetupService.prototype.setBaseFields = function (baseFields) {
            if (baseFields === void 0) { baseFields = BaseFields; }
            this.baseFieldsSub$.next(baseFields);
        };
        CreatePaymentConfigSetupService.prototype.setFetchPaymentOptionsListener = function (listenerFn) {
            this.fetchPaymentOptionsListenerSub$.next(listenerFn);
        };
        CreatePaymentConfigSetupService.prototype.setReviewTemplate = function (templateRef) {
            this.reviewTemplateSub$.next(templateRef);
        };
        CreatePaymentConfigSetupService.prototype.getHeader = function (state) {
            var _a, _b, _c;
            var paymentType = this.configs.length === 1 ? this.configs[0].paymentType : '';
            var data = {
                paymentMode: (_a = this.options) === null || _a === void 0 ? void 0 : _a.paymentMode,
                state: state,
                paymentType: paymentType,
                isDebit: this.options.isDebitPayment,
            };
            return (_c = (_b = this.options).header) === null || _c === void 0 ? void 0 : _c.call(_b, data);
        };
        return CreatePaymentConfigSetupService;
    }());
    /** @nocollapse */ CreatePaymentConfigSetupService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentConfigSetupService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ CreatePaymentConfigSetupService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentConfigSetupService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentConfigSetupService, decorators: [{
                type: i0.Injectable
            }] });

    var CreatePaymentFieldsSetupService = /** @class */ (function () {
        function CreatePaymentFieldsSetupService(createPaymentSetup, paymentOptionsService, paymentOrderHttpService) {
            var _this = this;
            this.createPaymentSetup = createPaymentSetup;
            this.paymentOptionsService = paymentOptionsService;
            this.paymentOrderHttpService = paymentOrderHttpService;
            this.destroyed$ = new rxjs.Subject();
            this.fetchDebitItemPermissions$ = new rxjs.Subject();
            this.fetchBeneficiaries$ = new rxjs.Subject();
            this.paymentOptionsSub$ = new rxjs.BehaviorSubject([]);
            this.paymentOptionsErrorSub$ = new rxjs.BehaviorSubject(false);
            this.exchangeRate$ = new rxjs.Subject();
            this.getExchangeRate$ = new rxjs.Subject();
            this.exchangeRateError$ = new rxjs.Subject();
            this.frequencyFieldSub$ = new rxjs.Subject();
            this.countries$ = this.loadSanctionedCountries();
            this.currencies$ = this.loadSanctionedCurrencies();
            this.fetchDebitAccounts$ = new rxjs.Subject();
            this.fetchCreditAccounts$ = new rxjs.Subject();
            this.connectedAccounts$ = this.paymentOrderHttpService.connectedAccounts$.pipe(operators.map(function (accounts) { return accounts === null || accounts === void 0 ? void 0 : accounts.map(i2.mapConnectedAccounts); }));
            this.totalContacts = 0; // x-total-count from response header
            this.totalCreditAccounts = 0;
            this.totalContactsItemsCount = 0; // total count of items in response before extracting sub accounts
            this.checkClosedPaymentsAccess = false;
            this.paymentOptions$ = this.paymentOptionsSub$.asObservable();
            this.paymentOptionsError$ = this.paymentOptionsErrorSub$.asObservable();
            this.frequencyField$ = this.frequencyFieldSub$.asObservable();
            this.fetchDebitItemPermissions$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (dataItemId) {
                _this.paymentOrderHttpService.loadDataItemPermissions(dataItemId);
            });
            this.fetchBeneficiaries$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (_d) {
                var params = _d.params, type = _d.type;
                _this.paymentOrderHttpService.fetchBeneficiaries(Object.assign(Object.assign({}, params), { size: _this.options.pageSize }), type);
            });
            this.getExchangeRate$
                .pipe(operators.filter(function (_d) {
                var fromCurrency = _d.fromCurrency, toCurrency = _d.toCurrency;
                var isExchangeValid = fromCurrency !== toCurrency;
                if (!isExchangeValid) {
                    // If fromCurrency and toCurrency are same, don't fetch exchange rate
                    _this.exchangeRate$.next(0);
                }
                return isExchangeValid;
            }), operators.switchMap(function (_d) {
                var fromCurrency = _d.fromCurrency, toCurrency = _d.toCurrency;
                return _this.paymentOrderHttpService.getCurrencyExchangeRate(fromCurrency, toCurrency);
            }), operators.tap(function (exchangeRate) {
                _this.exchangeRateError$.next(!exchangeRate);
                _this.exchangeRate$.next((exchangeRate === null || exchangeRate === void 0 ? void 0 : exchangeRate.rate) || 0);
            }), operators.takeUntil(this.destroyed$))
                .subscribe();
            this.fetchDebitAccounts$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (params) {
                _this.paymentOrderHttpService.loadMoreDebitAccounts(Object.assign(Object.assign({}, params), { merge: true, size: _this.options.pageSize }));
            });
            this.fetchCreditAccounts$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var from = _a.from, params = __rest(_a, ["from"]);
                _this.paymentOrderHttpService.loadMoreCreditAccounts(from, Object.assign(Object.assign({}, params), { merge: true, size: _this.options.pageSize }));
            });
        }
        Object.defineProperty(CreatePaymentFieldsSetupService.prototype, "debitAccounts$", {
            get: function () {
                return this.paymentOrderHttpService
                    .getDebitAccounts({ size: this.options.pageSize })
                    .pipe(i2.accMap(this.options.defaultScheme));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CreatePaymentFieldsSetupService.prototype, "creditAccountList$", {
            get: function () {
                var _this = this;
                return this.paymentOrderHttpService
                    .getCreditAccounts({ size: this.options.pageSize })
                    .pipe(operators.map(function (arrangements) { return ({
                    items: i2.mapArrangementList(arrangements, _this.options.defaultScheme),
                    count: arrangements.count,
                }); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CreatePaymentFieldsSetupService.prototype, "options", {
            get: function () {
                return this.createPaymentSetup.options;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CreatePaymentFieldsSetupService.prototype, "configs", {
            get: function () {
                return this.createPaymentSetup.configs;
            },
            enumerable: false,
            configurable: true
        });
        CreatePaymentFieldsSetupService.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
        };
        CreatePaymentFieldsSetupService.prototype.loadSanctionedCountries = function () {
            var _this = this;
            var _a;
            return this.paymentOptionsService
                .getSanctionedCountries((_a = this.options) === null || _a === void 0 ? void 0 : _a.defaultCountry)
                .pipe(operators.shareReplay(1), operators.catchError(function (_) {
                _this.paymentOrderHttpService.showNotification(false, {
                    header: $localize(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([":omni-payment-get-countries-failed:Failed to load countries list. Please try again later."], [":omni-payment-get-countries-failed:Failed to load countries list. Please try again later."]))),
                });
                return rxjs.of([]);
            }));
        };
        CreatePaymentFieldsSetupService.prototype.loadSanctionedCurrencies = function () {
            var _this = this;
            var _a;
            return this.paymentOptionsService
                .getSanctionedCurrencies((_a = this.options) === null || _a === void 0 ? void 0 : _a.defaultCountry)
                .pipe(operators.map(function (response) {
                var result = {};
                if ('labeled' in response) {
                    var _d = i2.handleCurrenciesList(response), currencies = _d.currencies, dividerIndex = _d.dividerIndex;
                    result.currencies = currencies;
                    result.dividerIndex = dividerIndex;
                }
                return result;
            }), operators.shareReplay(1), operators.catchError(function (err) {
                _this.paymentOrderHttpService.showNotification(false, {
                    header: $localize(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject([":@omni-payment-get-countries-failed:Failed to load currencies list. Please try again later."], [":@omni-payment-get-countries-failed:Failed to load currencies list. Please try again later."]))),
                });
                return rxjs.of(err);
            }));
        };
        CreatePaymentFieldsSetupService.prototype.loadAccountByAccountId = function (id, accountNumber) {
            return this.paymentOrderHttpService
                .getAccountByAccountId(id, accountNumber)
                .pipe(operators.map(function (item) { return ({
                count: 1,
                items: [item],
            }); }), i2.accMap(this.options.defaultScheme), operators.map(function (list) { return list[0]; }), operators.catchError(function () { return rxjs.of(undefined); }));
        };
        CreatePaymentFieldsSetupService.prototype.getContacts = function () {
            var _this = this;
            return this.paymentOrderHttpService
                .getContacts({ size: this.options.pageSize, query: '' })
                .pipe(operators.tap(function (data) {
                if (!(data instanceof http.HttpErrorResponse)) {
                    _this.totalContacts = data.count;
                    _this.totalContactsItemsCount =
                        data.itemsCount && data.isLoadMore
                            ? _this.totalContactsItemsCount + data.itemsCount
                            : data.itemsCount || 0;
                }
                else {
                    _this.totalContacts = 0;
                }
            }), operators.map(function (value) { return !(value instanceof http.HttpErrorResponse) ? value.items : value; }));
        };
        CreatePaymentFieldsSetupService.prototype.getCreditAccounts = function () {
            var _this = this;
            return this.paymentOrderHttpService
                .getCreditAccounts({ size: this.options.pageSize, searchTerm: '' })
                .pipe(operators.tap(function (data) {
                _this.totalCreditAccounts = !(data instanceof http.HttpErrorResponse)
                    ? data.count
                    : 0;
            }), operators.map(function (value) { return !(value instanceof http.HttpErrorResponse)
                ? i2.mapArrangementList(value, _this.options.defaultScheme)
                : value; }));
        };
        CreatePaymentFieldsSetupService.prototype.getDebitAccounts = function () {
            var _this = this;
            return this.paymentOrderHttpService
                .getDebitAccounts({ size: this.options.pageSize, searchTerm: '' })
                .pipe(operators.map(function (arrangements) { return ({
                items: i2.mapArrangementList(arrangements, _this.options.defaultScheme),
                count: arrangements.count,
            }); }));
        };
        CreatePaymentFieldsSetupService.prototype.loadCreditorDetails = function (options) {
            var _this = this;
            this.contacts$ = i2.shouldLoadTabContent(i2.BeneficiaryList.CONTACTS, options)
                ? this.getContacts()
                : rxjs.of([]);
            this.creditAccounts$ = i2.shouldLoadTabContent(i2.BeneficiaryList.ACCOUNTS, options)
                ? this.getCreditAccounts()
                : rxjs.of([]);
            return rxjs.combineLatest([this.creditAccounts$, this.contacts$]).pipe(operators.map(function (_d) {
                var _e = __read(_d, 2), accounts = _e[0], contacts = _e[1];
                return ({
                    accounts: accounts,
                    contacts: contacts,
                    totalCreditAccounts: _this.totalCreditAccounts,
                    totalContacts: _this.totalContacts,
                    totalContactsItemsCount: _this.totalContactsItemsCount,
                });
            }));
        };
        CreatePaymentFieldsSetupService.prototype.setPaymentOptions = function (options) {
            this.paymentOptionsSub$.next(options);
        };
        CreatePaymentFieldsSetupService.prototype.setPaymentOptionsError = function (error) {
            this.paymentOptionsErrorSub$.next(error);
        };
        CreatePaymentFieldsSetupService.prototype.clearPaymentOptions = function () {
            this.paymentOptionsService.resetPaymentOptions();
            this.setPaymentOptionsError(false);
        };
        CreatePaymentFieldsSetupService.prototype.injectData = function (fields, paymentTypeOptions) {
            var _this = this;
            fields.forEach(function (field) {
                var _a, _b, _c;
                field.options = field.options || {};
                field.options.isTemplateMode = _this.options.isTemplateMode;
                field.options.templateModeType = _this.options.templateModeType;
                field.options.isModalView = _this.options.isModalView;
                field.options.checkClosedPaymentsAccess =
                    (_a = _this.options.checkClosedPaymentsAccess) !== null && _a !== void 0 ? _a : _this.checkClosedPaymentsAccess;
                field.options.isWizardMode = ((_b = _this.configs) === null || _b === void 0 ? void 0 : _b.length) > 1;
                if (field.fields instanceof Array) {
                    _this.injectData(field.fields, paymentTypeOptions);
                }
                else {
                    switch (field.type) {
                        case i2.PaymentComponents.debitAccountSelector:
                            field.options.items$ = _this.getDebitAccounts();
                            field.options.fetchItems$ = _this.fetchDebitAccounts$;
                            field.options.loadAccountByAccountId =
                                _this.loadAccountByAccountId.bind(_this);
                            field.options.fetchArrangementPermissions$ =
                                _this.fetchDebitItemPermissions$;
                            field.options.arrangementPermissions$ =
                                _this.paymentOrderHttpService.arrangementUserPermissions$;
                            field.options.checkClosedPaymentsAccess =
                                _this.options.checkClosedPaymentsAccess;
                            break;
                        case i2.PaymentComponents.beneficiarySelector:
                            field.options.items$ = _this.loadCreditorDetails(field.options);
                            field.options.fetchItems$ = _this.fetchBeneficiaries$;
                            break;
                        case i2.PaymentComponents.internalAccountSelector:
                            field.options.paymentTypeOptions = paymentTypeOptions;
                            field.options.connectedItems$ = _this.connectedAccounts$;
                            field.options.items$ =
                                field.name === i2.InitiatorFields.initiatorAccountGroup
                                    ? _this.debitAccounts$
                                    : _this.getCreditAccounts();
                            break;
                        case i2.PaymentComponents.accountSelector:
                            field.options.paymentTypeOptions = paymentTypeOptions;
                            field.options.connectedItems$ = _this.connectedAccounts$;
                            if (field.name === i2.CounterPartyFields.counterPartyAccountGroup ||
                                _this.options.isDebitPayment) {
                                field.options.fetchItems$ = _this.fetchCreditAccounts$;
                                field.options.items$ = _this.creditAccountList$;
                            }
                            else {
                                field.options.items$ = _this.getDebitAccounts();
                                field.options.fetchItems$ = _this.fetchDebitAccounts$;
                            }
                            break;
                        case i2.PaymentComponents.contactSelector:
                            field.options.items$ = _this.getContacts();
                            field.options.fetchItems$ = _this.fetchBeneficiaries$;
                            break;
                        case i2.PaymentComponents.selectPaymentOption:
                            field.options.items$ = _this.paymentOptions$;
                            break;
                        case i2.PaymentComponents.sanctionedCountrySelector:
                        case i2.PaymentComponents.address:
                            field.options.items$ = _this.countries$;
                            break;
                        case i2.PaymentComponents.sanctionedCurrencyAmount:
                            field.options.items$ = _this.currencies$;
                            field.options.getExchangeRate$ = _this.getExchangeRate$;
                            field.options.exchangeRate$ = _this.exchangeRate$;
                            field.options.exchangeRateError$ = _this.exchangeRateError$;
                            break;
                        case i2.PaymentComponents.select:
                            if (field.name === i2.ScheduleFields.frequency &&
                                ((_c = _this.options) === null || _c === void 0 ? void 0 : _c.paymentMode) === i2.PaymentMode.EDIT_PAYMENT) {
                                _this.frequencyFieldSub$.next(field);
                            }
                            break;
                    }
                }
            });
        };
        return CreatePaymentFieldsSetupService;
    }());
    /** @nocollapse */ CreatePaymentFieldsSetupService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFieldsSetupService, deps: [{ token: CreatePaymentConfigSetupService }, { token: i2__namespace.PaymentOptionsService }, { token: i2__namespace.PaymentOrderHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ CreatePaymentFieldsSetupService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFieldsSetupService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFieldsSetupService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: CreatePaymentConfigSetupService }, { type: i2__namespace.PaymentOptionsService }, { type: i2__namespace.PaymentOrderHttpService }]; } });
    var templateObject_1$2, templateObject_2$2;

    /* eslint-disable max-len */
    var formI18n = {
        unknownErrorHeader: $localize(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([":@@initiate-payment-unknown-error-header:Server error"], [":@@initiate-payment-unknown-error-header:Server error"]))),
        unknownError: $localize(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([":@@initiate-payment-unknown-error:Unknown error occured."], [":@@initiate-payment-unknown-error:Unknown error occured."]))),
        validateFailed: $localize(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([":@@initiate-payment-validate-failed:Payment data error"], [":@@initiate-payment-validate-failed:Payment data error"]))),
    };
    var commonI18n = {
        templateSaveFailed: $localize(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject([":@@initiate-payment-save-template-failed-message:Failed to save the template. Please try again."], [":@@initiate-payment-save-template-failed-message:Failed to save the template. Please try again."]))),
        templateSaveSuccess: function (templateName) { return $localize(templateObject_5$1 || (templateObject_5$1 = __makeTemplateObject([":@@initiate-payment-create-payment-template-success-message:Template \"", "\" has been saved"], [":@@initiate-payment-create-payment-template-success-message:Template \"", "\" has been saved"])), templateName); },
    };
    var reviewI18n = {
        defaultPayment: {
            submitSuccess: $localize(templateObject_6$1 || (templateObject_6$1 = __makeTemplateObject([":@@initiate-payment-submit-success-notification:Payment submitted successfully"], [":@@initiate-payment-submit-success-notification:Payment submitted successfully"]))),
            submitSuccessPendingApproval: $localize(templateObject_7$1 || (templateObject_7$1 = __makeTemplateObject([":@@initiate-payment-submit-success-pendingApproval-notification:Payment is submitted successfully,   and pending further approval(s)"], [":@@initiate-payment-submit-success-pendingApproval-notification:Payment is submitted successfully, \\\n  and pending further approval(s)"]))),
            editSubmitSuccess: $localize(templateObject_8$1 || (templateObject_8$1 = __makeTemplateObject([":@@initiate-payment-edit-submit-success-notification:Edited payment submitted successfully"], [":@@initiate-payment-edit-submit-success-notification:Edited payment submitted successfully"]))),
        },
        debitPayment: {
            submitSuccess: $localize(templateObject_9$1 || (templateObject_9$1 = __makeTemplateObject([":@@initiate-debit-submit-success-notification:Debit request submitted successfully"], [":@@initiate-debit-submit-success-notification:Debit request submitted successfully"]))),
            submitSuccessPendingApproval: $localize(templateObject_10 || (templateObject_10 = __makeTemplateObject([":@@initiate-debit-submit-success-pendingApproval-notification:Debit request is submitted successfully, and pending further approval(s)"], [":@@initiate-debit-submit-success-pendingApproval-notification:Debit request is submitted successfully, and pending further approval(s)"]))),
            editSubmitSuccess: $localize(templateObject_11 || (templateObject_11 = __makeTemplateObject([":@@initiate-payment-edit-submit-success-notification:Edited debit request submitted successfully"], [":@@initiate-payment-edit-submit-success-notification:Edited debit request submitted successfully"]))),
        },
        paymentSubmitSuccess: $localize(templateObject_12 || (templateObject_12 = __makeTemplateObject([":@@initiate-payment-submit-success-notification:Payment submitted successfully"], [":@@initiate-payment-submit-success-notification:Payment submitted successfully"]))),
        editPaymentSubmitSuccess: $localize(templateObject_13 || (templateObject_13 = __makeTemplateObject([":@@initiate-payment-edit-submit-success-notification:Edited payment submitted successfully"], [":@@initiate-payment-edit-submit-success-notification:Edited payment submitted successfully"]))),
        paymentSubmitSuccessPendingApproval: $localize(templateObject_14 || (templateObject_14 = __makeTemplateObject([":@@initiate-payment-submit-success-pendingApproval-notification:Payment is submitted successfully,   and pending further approval(s)"], [":@@initiate-payment-submit-success-pendingApproval-notification:Payment is submitted successfully, \\\n  and pending further approval(s)"]))),
        newContactSubmitSuccess: $localize(templateObject_15 || (templateObject_15 = __makeTemplateObject([":@@initiate-payment-newContact-submit-success-notification:Contact saved successfully"], [":@@initiate-payment-newContact-submit-success-notification:Contact saved successfully"]))),
        newContactSubmitFailure: $localize(templateObject_16 || (templateObject_16 = __makeTemplateObject([":@@initiate-payment-newContact-submit-failure-notification:Failed to save contact. Please try again later."], [":@@initiate-payment-newContact-submit-failure-notification:Failed to save contact. Please try again later."]))),
        newContactSubmitSuccessPendingApproval: $localize(templateObject_17 || (templateObject_17 = __makeTemplateObject([":@@initiate-payment-newContact-submit-success-pendingApproval-notification:Contact submitted successfully,   and pending further approval(s)"], [":@@initiate-payment-newContact-submit-success-pendingApproval-notification:Contact submitted successfully, \\\n  and pending further approval(s)"]))),
        submitPaymentFailure: $localize(templateObject_18 || (templateObject_18 = __makeTemplateObject([":@@initiate-payment-submit-failure-notification:Payment data error"], [":@@initiate-payment-submit-failure-notification:Payment data error"]))),
        debitSubmitSuccess: $localize(templateObject_19 || (templateObject_19 = __makeTemplateObject([":@@initiate-debit-submit-success-notification:Debit request submitted successfully"], [":@@initiate-debit-submit-success-notification:Debit request submitted successfully"]))),
        editdebitSubmitSuccess: $localize(templateObject_20 || (templateObject_20 = __makeTemplateObject([":@@initiate-payment-edit-submit-success-notification:Edited debit request submitted successfully"], [":@@initiate-payment-edit-submit-success-notification:Edited debit request submitted successfully"]))),
        debitSubmitSuccessPendingApproval: $localize(templateObject_21 || (templateObject_21 = __makeTemplateObject([":@@initiate-debit-submit-success-pendingApproval-notification:Debit request is submitted successfully, and pending further approval(s)"], [":@@initiate-debit-submit-success-pendingApproval-notification:Debit request is submitted successfully, and pending further approval(s)"]))),
        submitDebitFailure: $localize(templateObject_22 || (templateObject_22 = __makeTemplateObject([":@@initiate-debit-submit-failure-notification:Debit request data error"], [":@@initiate-debit-submit-failure-notification:Debit request data error"]))),
        submitPaymentFailureUnknownError: $localize(templateObject_23 || (templateObject_23 = __makeTemplateObject([":@@initiate-payment-submit-unknown-failure-notification:Unknown error occurred."], [":@@initiate-payment-submit-unknown-failure-notification:Unknown error occurred."]))),
        submitPaymentFailureUnknownErrorHeader: $localize(templateObject_24 || (templateObject_24 = __makeTemplateObject([":@@initiate-payment-submit-unknown-failure-header-notification:Server error"], [":@@initiate-payment-submit-unknown-failure-header-notification:Server error"]))),
        submitPaymentApprovalFailureCOED: {
            header: $localize(templateObject_25 || (templateObject_25 = __makeTemplateObject([":@@edited-payment-submit-ts-failure-header-notification:Payment not submitted"], [":@@edited-payment-submit-ts-failure-header-notification:Payment not submitted"]))),
            message: $localize(templateObject_26 || (templateObject_26 = __makeTemplateObject([":@@edited-payment-submit-ts-failure-message-notification:Payment is already edited by another user"], [":@@edited-payment-submit-ts-failure-message-notification:Payment is already edited by another user"]))),
        },
    };
    var templateObject_1$1, templateObject_2$1, templateObject_3$1, templateObject_4$1, templateObject_5$1, templateObject_6$1, templateObject_7$1, templateObject_8$1, templateObject_9$1, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26;

    var CreatePaymentService = /** @class */ (function () {
        function CreatePaymentService(paymentOptionsService) {
            this.paymentOptionsService = paymentOptionsService;
            this.selectedPaymentOptionSub$ = new rxjs.BehaviorSubject(undefined);
            this.selectedPaymentConfigSub$ = new rxjs.BehaviorSubject(undefined);
            this.selectedPaymentOption$ = this.selectedPaymentOptionSub$
                .asObservable()
                .pipe(operators.distinctUntilChanged());
            this.selectedPaymentConfig$ = this.selectedPaymentConfigSub$
                .asObservable()
                .pipe(operators.distinctUntilChanged());
        }
        Object.defineProperty(CreatePaymentService.prototype, "selectedPaymentConfigValue", {
            get: function () {
                return this.selectedPaymentConfigSub$.value;
            },
            enumerable: false,
            configurable: true
        });
        CreatePaymentService.getCriticalFieldValues = function (formValue) {
            var _a, _b;
            var _c = formValue || {}, initiator = _c.initiator, counterparty = _c.counterparty, remittanceInfo = _c.remittanceInfo;
            return {
                debitAccountNumber: initiator === null || initiator === void 0 ? void 0 : initiator.accountNumber,
                creditAccountNumber: counterparty === null || counterparty === void 0 ? void 0 : counterparty.accountNumber,
                amount: remittanceInfo === null || remittanceInfo === void 0 ? void 0 : remittanceInfo.amountGroup,
                country: (_b = (_a = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _a === void 0 ? void 0 : _a.postalAddress) === null || _b === void 0 ? void 0 : _b.country,
            };
        };
        CreatePaymentService.prototype.selectPaymentConfig = function (config) {
            this.selectedPaymentConfigSub$.next(config);
        };
        CreatePaymentService.prototype.selectPaymentOption = function (paymentOption) {
            this.selectedPaymentOptionSub$.next(paymentOption);
        };
        CreatePaymentService.prototype.getPaymentOptionsRequest = function (configs) {
            var optionsReq;
            if (configs.length === 1) {
                var config_1 = configs[0];
                // TODO: find a better solution for this
                if (config_1.paymentType !== 'INTERNATIONAL_TRANSFER') {
                    return rxjs.EMPTY;
                }
                optionsReq = this.paymentOptionsService
                    .getPaymentOptionsRecordByPaymentType(config_1.paymentType)
                    .pipe(operators.map(function (response) {
                    var _c;
                    return i2.mapPaymentOptions(response, (_c = {}, _c[config_1.paymentType] = config_1.name, _c));
                }));
            }
            else {
                optionsReq = this.paymentOptionsService.paymentOptions$.pipe(operators.filter(function (options) { return !!options; }), operators.map(function (options) { return i2.mapPaymentOptions(options || []); }));
            }
            return optionsReq;
        };
        CreatePaymentService.prototype.resetRedundantFields = function (paymentTypeConfig, form) {
            resetBeneficiaryAddress(paymentTypeConfig, form);
            resetBankDetails(paymentTypeConfig, form);
        };
        return CreatePaymentService;
    }());
    /** @nocollapse */ CreatePaymentService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentService, deps: [{ token: i2__namespace.PaymentOptionsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ CreatePaymentService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i2__namespace.PaymentOptionsService }]; } });

    var CreatePaymentFormComponent = /** @class */ (function () {
        function CreatePaymentFormComponent(paymentOrderHttpService, paymentOptionsService, createPaymentService, navigationService, stateService, cdRef, createPaymentSetup, fieldSetupService, formEl, modalService, eventBus, paymentErrors) {
            var _this = this;
            var _a, _b;
            this.paymentOrderHttpService = paymentOrderHttpService;
            this.paymentOptionsService = paymentOptionsService;
            this.createPaymentService = createPaymentService;
            this.navigationService = navigationService;
            this.stateService = stateService;
            this.cdRef = cdRef;
            this.createPaymentSetup = createPaymentSetup;
            this.fieldSetupService = fieldSetupService;
            this.formEl = formEl;
            this.modalService = modalService;
            this.eventBus = eventBus;
            this.paymentErrors = paymentErrors;
            this.destroyed$ = new rxjs.Subject();
            this.paymentTemplate = null;
            this.shouldResetPaymentOptions = false;
            this.formValue = (_a = this.stateService.formInstance) === null || _a === void 0 ? void 0 : _a.value;
            this.paymentTemplateSearch = new i1.FormControl();
            this.fetchOptions$ = new rxjs.Subject();
            this.submitting$ = new rxjs.BehaviorSubject(false);
            this.paymentState$ = this.stateService.paymentState$;
            this.paymentTemplates$ = this.paymentOrderHttpService.paymentTemplates$;
            this.loadingTemplates$ = this.paymentOrderHttpService.loading$;
            this.fetchingPaymentOptions$ = new rxjs.BehaviorSubject(false);
            this.paymentOptions$ = this.fieldSetupService.paymentOptions$;
            this.paymentOptionsError$ = this.fieldSetupService.paymentOptionsError$;
            this.selectedPaymentConfig$ = this.createPaymentService.selectedPaymentConfig$;
            this.selectedPaymentOption$ = this.createPaymentService.selectedPaymentOption$;
            this.fetchPaymentOptionsListener$ = this.createPaymentSetup.fetchPaymentOptionsListener$;
            this.baseFields$ = this.createPaymentSetup.baseFields$.pipe(operators.map(function (baseFields) {
                _this.fieldSetupService.injectData(baseFields);
                return baseFields;
            }));
            this.options = {};
            this.configs = [];
            this.templateNameControl = (_b = this.stateService.formInstance) === null || _b === void 0 ? void 0 : _b.get('templateName');
            this.errors = [];
            this.isEditPaymentConfirmationDialogOpen = false;
            this.enablePaymentTemplateSelector = true;
            this.editPaymentHasNoChanges = false;
            this.isErrorTitleDisplayed = true;
            this.shouldApplyTemplate = false;
            this.showApiError = false;
            this.paymentMode = i2.PaymentMode;
        }
        CreatePaymentFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            rxjs.combineLatest([
                this.createPaymentSetup.configs$,
                this.createPaymentSetup.options$,
                this.stateService.paymentEditState$,
            ])
                .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                .subscribe(function (_g) {
                var _h = __read(_g, 3), configs = _h[0], options = _h[1], editedPaymentDetails = _h[2];
                var _a, _b, _c;
                _this.options = options;
                _this.editedPaymentDetails = editedPaymentDetails;
                _this.isErrorTitleDisplayed =
                    (_a = options.isErrorTitleDisplayed) !== null && _a !== void 0 ? _a : _this.isErrorTitleDisplayed;
                _this.enablePaymentTemplateSelector =
                    (_b = options.enablePaymentTemplateSelector) !== null && _b !== void 0 ? _b : _this.enablePaymentTemplateSelector;
                if (configs.length === 1) {
                    // TODO: find a better solution for this
                    _this.setArrangementBusFunctions((_c = configs[0].options) === null || _c === void 0 ? void 0 : _c.closedPaymentBusFns, configs[0].businessFunction);
                    _this.onSelectConfig(configs[0]);
                }
                var isOneOffToRecurrentAllowed = options.isOneOffToRecurrentAllowed, isRecurrentToOneOffAllowed = options.isRecurrentToOneOffAllowed;
                _this.configs = configs.map(function (config) {
                    var _config = options.isTemplateMode
                        ? i2.removeScheduleFromConfig(config)
                        : config;
                    if (editedPaymentDetails) {
                        _config = i2.setFrequencyOptionsPerConfig(config, !!editedPaymentDetails.schedule, {
                            isOneOffToRecurrentAllowed: isOneOffToRecurrentAllowed,
                            isRecurrentToOneOffAllowed: isRecurrentToOneOffAllowed,
                        });
                    }
                    _this.fieldSetupService.injectData(_config.fields, _config.options);
                    return _config;
                });
                _this.setupPaymentTypes(_this.configs);
                _this.header = _this.createPaymentSetup.getHeader(i2.InitiatePaymentHeaderStates.FORM);
            });
            this.listen();
            if (this.stateService.currentState !== i2.PaymentState.EDIT) {
                this.fieldSetupService.clearPaymentOptions();
                this.shouldResetPaymentOptions = true;
            }
            this.createPaymentService
                .getPaymentOptionsRequest(this.configs)
                .pipe(operators.tap(function (options) {
                if (!_this.shouldResetPaymentOptions && !(options === null || options === void 0 ? void 0 : options.length)) {
                    _this.fieldSetupService.setPaymentOptionsError(true);
                }
                _this.shouldResetPaymentOptions = false;
                _this.onPaymentTypeChange(options);
            }, operators.catchError(function () {
                _this.fieldSetupService.setPaymentOptionsError(true);
                return rxjs.of([]);
            })), operators.takeUntil(this.destroyed$))
                .subscribe();
            i2.triggerPaymentHook(this.createPaymentSetup.hooks, i2.PaymentHooks.onInit);
        };
        CreatePaymentFormComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.stateService.paymentTemplateState$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (template) {
                if (template) {
                    _this.onSelectPaymentTemplate(template);
                }
            });
            if (this.editedPaymentDetails) {
                this.setEditFormValues(this.editedPaymentDetails);
                this.stateService.setEditPayment(undefined); // This is to prevent overwrite manual edits on return from review screen
            }
        };
        CreatePaymentFormComponent.prototype.ngAfterContentInit = function () {
            this.renderView();
        };
        CreatePaymentFormComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            i2.triggerPaymentHook(this.createPaymentSetup.hooks, i2.PaymentHooks.onDestroy);
        };
        CreatePaymentFormComponent.prototype.setArrangementBusFunctions = function (closedFunctions, businessFunction) {
            if ((closedFunctions === null || closedFunctions === void 0 ? void 0 : closedFunctions.length) && businessFunction) {
                // TODO: temporary solution, need to find better way do not mutate object
                var setOfBusFun = new Set(__spreadArray(__spreadArray([], __read(closedFunctions)), [businessFunction]));
                closedFunctions = Array.from(setOfBusFun);
                this.paymentOrderHttpService.arrangementBusFunctions =
                    closedFunctions.toString();
            }
        };
        CreatePaymentFormComponent.prototype.setEditFormValues = function (payment) {
            var form = this.stateService.formInstance;
            var counterparty = form.get(i2.PaymentBaseFields.counterparty);
            i7.registerFormControl(counterparty, i2.CounterPartyFields.schemeName, [], [], 'BBAN');
            i7.registerFormControl(form, 'paymentOrderId', [], [], payment.id);
            this.isPaymentCopyControl = i7.registerFormControl(form, i2.HiddenFields.isPaymentCopy);
            this.isPaymentCopyControl.patchValue(this.options.paymentMode === this.paymentMode.COPY_PAYMENT);
            var editForm = i2.setFormDetailsFromService(form, payment);
            this.stateService.initialEditFormValue = editForm.value;
            this.setForm(editForm);
        };
        CreatePaymentFormComponent.prototype.setupPaymentTypes = function (configs) {
            this.paymentTypes = configs.map(function (config) { return config.paymentType; }).join(',');
            this.paymentOrderHttpService.paymentType = this.paymentTypes;
        };
        CreatePaymentFormComponent.prototype.renderView = function () {
            this.outletRef.clear();
            this.outletRef.createEmbeddedView(this.contentRef);
        };
        CreatePaymentFormComponent.prototype.setTemplateValues = function (form, paymentTemplate) {
            this.setFormValues(normalisePaymentTemplate(paymentTemplate), form);
            this.paymentTemplate = null;
            this.stateService.setPaymentTemplate(undefined);
        };
        CreatePaymentFormComponent.prototype.prepareForTemplateApply = function () {
            var formGroup = new i1.FormGroup({});
            this.formValue = null;
            this.fieldSetupService.setPaymentOptions([]);
            this.templateNameControl = i7.registerFormControl(formGroup, 'templateName');
            this.stateService.saveForm(formGroup);
        };
        CreatePaymentFormComponent.prototype.getPaymentConfig = function (paymentType) {
            if (paymentType) {
                return this.configs.filter(function (paymentConfig) { return paymentType === paymentConfig.paymentType; })[0];
            }
            return;
        };
        CreatePaymentFormComponent.prototype.setFormValues = function (_g, form) {
            var details = _g.details, name = _g.name, id = _g.id;
            var _a;
            var _form = form || this.stateService.formInstance;
            var templateForm = i2.setFormDetailsFromResponse(_form, details, {
                name: name,
                id: id,
            });
            this.templateSelectorName = name;
            (_a = this.templateNameControl) === null || _a === void 0 ? void 0 : _a.setValue(name);
            this.setForm(templateForm);
            _form.markAllAsTouched();
        };
        CreatePaymentFormComponent.prototype.listen = function () {
            var _this = this;
            this.fetchOptions$
                .pipe(operators.filter(function (form) { return JSON.stringify(CreatePaymentService.getCriticalFieldValues(_this.formValue)) !==
                JSON.stringify(CreatePaymentService.getCriticalFieldValues(form.getRawValue())); }), operators.switchMap(function (form) {
                _this.formValue = form.getRawValue();
                return _this.fetchPaymentOptions(form);
            }), operators.takeUntil(this.destroyed$))
                .subscribe();
        };
        CreatePaymentFormComponent.prototype.setForm = function (formInstance) {
            this.stateService.setPaymentState(i2.PaymentState.EDIT);
            this.stateService.saveForm(formInstance);
            this.renderView();
            this.cdRef.detectChanges();
        };
        /**
         * Callback triggered when the payment type changes
         */
        CreatePaymentFormComponent.prototype.onPaymentTypeChange = function (paymentOptions) {
            if (paymentOptions === void 0) { paymentOptions = []; }
            if (paymentOptions && paymentOptions.length) {
                this.fieldSetupService.setPaymentOptionsError(false);
            }
            this.fieldSetupService.setPaymentOptions(paymentOptions);
            this.fetchingPaymentOptions$.next(false);
        };
        CreatePaymentFormComponent.prototype.validatePayment = function (form) {
            var _this = this;
            this.paymentOrderHttpService
                .validatePayment(i2.toPostRequest(form.getRawValue()))
                .pipe(operators.take(1))
                .subscribe(function (response) {
                var control = form.get('isIntraLegalEntity') ||
                    i7.registerFormControl(form, 'isIntraLegalEntity');
                _this.templateNameControl =
                    _this.templateNameControl ||
                        i7.registerFormControl(form, 'templateName');
                control.setValue(response.isIntraLegalEntityPaymentOrder);
                _this.templateNameControl.setValue(_this.templateSelectorName);
                _this.submitting$.next(false);
                _this.navigationService.review();
                _this.stateService.canApprove = response.canApprove;
            }, function (_g) {
                var error = _g.error;
                var _a;
                _this.submitting$.next(false);
                _this.errors = error.errors;
                if (!_this.isP2PLimitError(error)) {
                    _this.genericError = error.message;
                    _this.showApiError = true;
                    if (((_a = _this.errors) === null || _a === void 0 ? void 0 : _a.length) || _this.genericError) {
                        var errorObject = {
                            errorResponse: error,
                            errors: _this.errors,
                            paymentErrors: _this.paymentErrors,
                            notificationHeader: formI18n.validateFailed,
                            genericMessage: _this.genericError,
                        };
                        _this.paymentOrderHttpService.manageErrorResponse(errorObject);
                    }
                    else {
                        _this.paymentOrderHttpService.showNotification(false, {
                            header: formI18n.unknownErrorHeader,
                            message: formI18n.unknownError,
                            headerContext: error,
                        });
                    }
                    _this.scrollIntoAlertView();
                }
                else {
                    _this.showApiError = false;
                    _this.handleP2PErrors(_this.errors[0]);
                }
            });
        };
        CreatePaymentFormComponent.prototype.handleP2PErrors = function (error) {
            var _g;
            var _a, _b, _c, _d, _e, _f;
            if (error === null || error === void 0 ? void 0 : error.key) {
                var amountGroupConfig = i2.getConfig(i2.RemittanceInfoFields.amountCurrencyGroup, this.configs[0]);
                var validationMsg = (_b = (_a = amountGroupConfig === null || amountGroupConfig === void 0 ? void 0 : amountGroupConfig.options) === null || _a === void 0 ? void 0 : _a.validationMessages) === null || _b === void 0 ? void 0 : _b.find(function (validationMessage) { return validationMessage.name === error.key; });
                if (validationMsg === null || validationMsg === void 0 ? void 0 : validationMsg.message) {
                    validationMsg.message = validationMsg.message.replace('#amount#', (_c = error.context) === null || _c === void 0 ? void 0 : _c.limit);
                    var amountGroup = (_d = this.stateService.formInstance
                        .get(i2.PaymentBaseFields.remittanceInfo)) === null || _d === void 0 ? void 0 : _d.get(i2.RemittanceInfoFields.amountCurrencyGroup);
                    amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.setErrors((_g = {}, _g[error.key] = true, _g));
                    (_e = amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.get(i2.RemittanceInfoFields.amount)) === null || _e === void 0 ? void 0 : _e.setErrors({ invalid: true });
                    i2.focusErrorElement((_f = this.formEl) === null || _f === void 0 ? void 0 : _f.nativeElement, 'small.bb-input-validation-message');
                }
            }
        };
        CreatePaymentFormComponent.prototype.scrollIntoAlertView = function () {
            var _a;
            (_a = this.alertContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollIntoView(false, {
                behavior: 'smooth',
                block: 'start',
            });
        };
        CreatePaymentFormComponent.prototype.isP2PLimitError = function (error) {
            var _a;
            if (!Array.isArray(error.errors))
                return false;
            var errKey = (_a = error.errors[0]) === null || _a === void 0 ? void 0 : _a.key;
            return Object.values(i2.P2PLimitErrorKeys).includes(errKey);
        };
        CreatePaymentFormComponent.prototype.saveTemplate = function (form) {
            if (this.options.paymentMode === i2.PaymentMode.EDIT_TEMPLATE) {
                this.editPaymentTemplate(form);
            }
            else {
                this.createPaymentTemplate(form);
            }
        };
        CreatePaymentFormComponent.prototype.editPaymentTemplate = function (form) {
            var _a, _b;
            var templateName = (_a = form.get(i2.PaymentTemplateFields.templateName)) === null || _a === void 0 ? void 0 : _a.value;
            var paymentTemplateId = (_b = form.get(i2.PaymentTemplateFields.paymentTemplateId)) === null || _b === void 0 ? void 0 : _b.value;
            if (paymentTemplateId) {
                this.paymentOrderHttpService
                    .editPaymentTemplate(paymentTemplateId, i2.toPostPaymentTemplate(form.getRawValue()))
                    .pipe(operators.takeUntil(this.destroyed$))
                    .subscribe(this.saveTemplateSuccessCallback.bind(this, templateName), this.saveTemplateErrorCallback.bind(this));
            }
        };
        CreatePaymentFormComponent.prototype.createPaymentTemplate = function (form) {
            var _a;
            var templateName = (_a = form.get(i2.PaymentTemplateFields.templateName)) === null || _a === void 0 ? void 0 : _a.value;
            this.paymentOrderHttpService
                .postPaymentTemplate(i2.toPostPaymentTemplate(form.getRawValue()))
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(this.saveTemplateSuccessCallback.bind(this, templateName), this.saveTemplateErrorCallback.bind(this));
        };
        CreatePaymentFormComponent.prototype.saveTemplateSuccessCallback = function (templateName) {
            var _a;
            this.paymentOrderHttpService.showNotification(true, {
                header: commonI18n.templateSaveSuccess(templateName),
                headerContext: { name: templateName },
            });
            this.submitting$.next(false);
            if (this.options.isModalView) {
                (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
            }
            else {
                this.stateService.resetForm();
                this.renderView();
            }
            this.eventBus.publish((this.options.successEventName || i2.defaultPaymentSuccessEventName), true);
        };
        CreatePaymentFormComponent.prototype.saveTemplateErrorCallback = function (response) {
            var error = response.error;
            this.paymentOrderHttpService.showNotification(false, {
                header: (error === null || error === void 0 ? void 0 : error.message) || commonI18n.templateSaveFailed,
            });
            this.submitting$.next(false);
        };
        CreatePaymentFormComponent.prototype.onHooksDone = function (form, success) {
            if (success === void 0) { success = true; }
            if (success) {
                if (this.options.isTemplateMode) {
                    this.saveTemplate(form);
                }
                else {
                    this.validatePayment(form);
                }
            }
            else {
                this.submitting$.next(false);
            }
        };
        CreatePaymentFormComponent.prototype.isEditFormNotChanged = function (form) {
            return !i7.isEditFormDirty(form.value, this.stateService.initialEditFormValue);
        };
        CreatePaymentFormComponent.prototype.onSelectPaymentTemplate = function (paymentTemplateData) {
            var config = this.getPaymentConfig(normalizePaymentType(paymentTemplateData));
            if (this.configs.length > 1 && config) {
                this.prepareForTemplateApply();
                this.paymentTemplate = normalisePaymentTemplate(paymentTemplateData);
                this.shouldApplyTemplate = true;
                this.stateService.setPaymentState(i2.PaymentState.EDIT);
                this.onSelectConfig(config);
                this.renderView();
            }
            else {
                this.setFormValues(paymentTemplateData);
            }
        };
        CreatePaymentFormComponent.prototype.clearTemplateName = function () {
            this.templateSelectorName = '';
            if (this.templateNameControl) {
                this.templateNameControl.setValue('');
            }
        };
        CreatePaymentFormComponent.prototype.onLoadingMoreTemplates = function (page) {
            this.paymentOrderHttpService.loadMore(page);
        };
        CreatePaymentFormComponent.prototype.search = function (text) {
            this.paymentOrderHttpService.search(text);
        };
        CreatePaymentFormComponent.prototype.onSelectConfig = function (config) {
            this.createPaymentService.selectPaymentConfig(config);
        };
        CreatePaymentFormComponent.prototype.onPaymentOptionSelect = function (paymentOption) {
            this.createPaymentService.selectPaymentOption(paymentOption);
        };
        CreatePaymentFormComponent.prototype.onApplyTemplate = function (form) {
            var _this = this;
            this.shouldApplyTemplate = false;
            if (this.paymentTemplate) {
                this.setTemplateValues(form, this.paymentTemplate);
            }
            else {
                this.stateService.paymentTemplateState$
                    .pipe(operators.takeUntil(this.destroyed$))
                    .subscribe(function (template) {
                    if (template) {
                        _this.setTemplateValues(form, template);
                    }
                });
            }
        };
        /**
         * Fetches the payment options for provided payment details
         */
        CreatePaymentFormComponent.prototype.fetchPaymentOptions = function (form) {
            this.fetchingPaymentOptions$.next(true);
            return this.paymentOptionsService.fetchPaymentOptions(mapPaymentOptionRequest(form.getRawValue()));
        };
        CreatePaymentFormComponent.prototype.discardEditPaymentChanges = function () {
            var _a;
            (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
        };
        CreatePaymentFormComponent.prototype.cancelEditPaymentConfirmationDialog = function () {
            this.isEditPaymentConfirmationDialogOpen = false;
        };
        CreatePaymentFormComponent.prototype.onSubmit = function (form) {
            var _a;
            var configVal = this.createPaymentService.selectedPaymentConfigValue;
            if (configVal) {
                this.createPaymentService.resetRedundantFields(configVal, form);
            }
            this.stateService.saveForm(form);
            this.submitting$.next(true);
            if ((_a = this.createPaymentSetup.hooks) === null || _a === void 0 ? void 0 : _a[i2.PaymentHooks.onSave]) {
                i2.triggerPaymentHook(this.createPaymentSetup.hooks, i2.PaymentHooks.onSave, this.onHooksDone.bind(this, form), form);
            }
            else {
                this.onHooksDone(form);
            }
        };
        CreatePaymentFormComponent.prototype.onClear = function () {
            this.fieldSetupService.clearPaymentOptions();
            this.stateService.setPaymentState(i2.PaymentState.INITIAL);
            this.stateService.resetForm();
            this.clearTemplateName();
            this.formValue = null;
            this.searchValue = '';
            this.showApiError = false;
            this.renderView();
        };
        CreatePaymentFormComponent.prototype.onEditCancel = function (form) {
            var _a;
            if (this.isEditFormNotChanged(form)) {
                (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
            }
            else {
                this.isEditPaymentConfirmationDialogOpen = true;
            }
        };
        CreatePaymentFormComponent.prototype.onEditSubmit = function (form) {
            if (this.isEditFormNotChanged(form)) {
                this.editPaymentHasNoChanges = true;
                this.scrollIntoAlertView();
            }
            else {
                this.editPaymentHasNoChanges = false;
                this.onSubmit(form);
            }
        };
        CreatePaymentFormComponent.prototype.getForm = function (paymentState) {
            if (paymentState === i2.PaymentState.REVIEW) {
                this.stateService.resetForm();
                this.stateService.setPaymentState(i2.PaymentState.INITIAL);
            }
            return this.stateService.form$;
        };
        return CreatePaymentFormComponent;
    }());
    /** @nocollapse */ CreatePaymentFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFormComponent, deps: [{ token: i2__namespace.PaymentOrderHttpService }, { token: i2__namespace.PaymentOptionsService }, { token: CreatePaymentService }, { token: i2__namespace.NavigationService }, { token: i2__namespace.StateService }, { token: i0__namespace.ChangeDetectorRef }, { token: CreatePaymentConfigSetupService }, { token: CreatePaymentFieldsSetupService }, { token: i0__namespace.ElementRef }, { token: i2__namespace.RoutableModalService, optional: true }, { token: webSdk.PUBSUB }, { token: i2.BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CreatePaymentFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreatePaymentFormComponent, selector: "bb-create-payment-form", providers: [CreatePaymentFieldsSetupService], viewQueries: [{ propertyName: "outletRef", first: true, predicate: ["outlet"], descendants: true, read: i0.ViewContainerRef, static: true }, { propertyName: "contentRef", first: true, predicate: ["content"], descendants: true, read: i0.TemplateRef, static: true }, { propertyName: "alertContainer", first: true, predicate: ["alertContainer"], descendants: true }], ngImport: i0__namespace, template: "<bb-header-ui\n  *ngIf=\"header\"\n  headingClasses=\"bb-block bb-block--lg\"\n  headingType=\"h2\"\n  [heading]=\"header\"\n></bb-header-ui>\n<div #alertContainer>\n  <ng-container *ngIf=\"errors?.length; else noSpecificError\">\n    <ng-container *ngFor=\"let error of errors\">\n      <ng-container *ngIf=\"error.message; else noSpecificError\">\n        <bb-alert-ui *ngIf=\"showApiError\" title=\"\" modifier=\"error\">\n          <div class=\"bb-text-bold bb-text-default d-inline-flex\">\n            <ng-container *ngIf=\"isErrorTitleDisplayed\">\n              <span i18n=\"@@initiate-payment-payments-error-alert-title\">\n                Payment data error: </span\n              >&nbsp;\n            </ng-container>\n            <span>{{ $any(error)?.message }}</span>\n          </div>\n        </bb-alert-ui>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <ng-template #noSpecificError>\n    <ng-container *ngIf=\"genericError; else unknownError\">\n      <bb-alert-ui *ngIf=\"showApiError\" title=\"\" modifier=\"error\">\n        <div class=\"bb-text-bold bb-text-default\">\n          <ng-container *ngIf=\"isErrorTitleDisplayed\">\n            <span\n              i18n=\"@@initiate-payment-payments-generic-message-alert-title\"\n            >\n              Payment data error:\n            </span>\n          </ng-container>\n          <span>{{ genericError }}</span>\n        </div>\n      </bb-alert-ui>\n    </ng-container>\n  </ng-template>\n  <ng-template #unknownError>\n    <div class=\"bb-text-bold bb-text-default\">\n      <bb-alert-ui\n        *ngIf=\"showApiError\"\n        i18n-title=\"@@initiate-payment-payments-unknown-error-alert-title\"\n        title=\"Server error: Unknown error occurred\"\n        modifier=\"error\"\n      >\n      </bb-alert-ui>\n    </div>\n  </ng-template>\n  <bb-alert-ui\n    *ngIf=\"editPaymentHasNoChanges\"\n    i18n-title=\"\n      @@initiate-payment-payments-edit-paymet-no-changes-warning-alert-title\"\n    title=\"Please make changes to continue.\"\n    modifier=\"warning\"\n  ></bb-alert-ui>\n</div>\n\n<ng-container\n  *ngIf=\"\n    enablePaymentTemplateSelector &&\n    !options?.isTemplateMode &&\n    options?.paymentMode !== paymentMode.EDIT_PAYMENT &&\n    options?.paymentMode !== paymentMode.COPY_PAYMENT\n  \"\n>\n  <bb-payment-template-selector\n    [paymentTemplateSearch]=\"paymentTemplateSearch\"\n    [items]=\"paymentTemplates$\"\n    [loading]=\"loadingTemplates$ | async\"\n    [templateName]=\"templateSelectorName || templateNameControl?.value\"\n    [searchValue]=\"searchValue\"\n    (setValues)=\"onSelectPaymentTemplate($event)\"\n    (loadMoreTemplates)=\"onLoadingMoreTemplates($event)\"\n    (searchTemplates)=\"search($event)\"\n    (clear)=\"clearTemplateName()\"\n  >\n  </bb-payment-template-selector>\n</ng-container>\n\n<ng-container #outlet></ng-container>\n<ng-template #content>\n  <ng-container *ngIf=\"paymentState$ | async as paymentState\">\n    <ng-container *ngIf=\"configs.length === 1; else adaptiveFormTmpl\">\n      <bb-payord-form\n        [config]=\"configs[0]\"\n        [formItem]=\"getForm(paymentState) | async\"\n        [submitting]=\"submitting$ | async\"\n        [isModalView]=\"options.isModalView\"\n        [isTemplateMode]=\"options.isTemplateMode\"\n        [isDebitPayment]=\"options.isDebitPayment\"\n        [paymentMode]=\"options.paymentMode\"\n        [templateModeType]=\"options.templateModeType\"\n        (clear)=\"onClear()\"\n        (submitted)=\"onSubmit($event)\"\n        (editPaymentCancel)=\"onEditCancel($event)\"\n        (editPaymentSubmit)=\"onEditSubmit($event)\"\n      >\n      </bb-payord-form>\n\n      <bb-confirmation-dialog\n        data-role=\"discard-payment-edit-confirmation-dialog\"\n        confirmButtonColor=\"danger\"\n        (confirm)=\"discardEditPaymentChanges()\"\n        [isOpen]=\"isEditPaymentConfirmationDialogOpen\"\n        (cancel)=\"cancelEditPaymentConfirmationDialog()\"\n      >\n        <span title i18n=\"@@confirmation-dialog.edit.payment.title.discard\"\n          >Discard edited data?</span\n        >\n        <span body i18n=\"@@confirmation-dialog.edit.payment.body.discard\">\n          Are you sure you want to exit and discard all changes? Edited data\n          will be lost.\n        </span>\n        <span\n          confirmActionName\n          i18n=\"@@confirmation-dialog.edit.payment.action.discard.confirm\"\n          >Discard</span\n        >\n        <span\n          cancelActionName\n          i18n=\"@@confirmation-dialog.edit.payment.action.discard.cancel\"\n          >Not now</span\n        >\n      </bb-confirmation-dialog>\n    </ng-container>\n    <ng-template #adaptiveFormTmpl>\n      <bb-adaptive-form\n        [formItem]=\"getForm(paymentState) | async\"\n        [paymentState]=\"paymentState\"\n        [paymentTypes]=\"configs\"\n        [baseFields]=\"baseFields$ | async\"\n        [fetchOptions$]=\"fetchOptions$\"\n        [fetchingOptions]=\"fetchingPaymentOptions$ | async\"\n        [paymentOptions$]=\"paymentOptions$\"\n        [paymentOptionsError]=\"paymentOptionsError$ | async\"\n        [selectedPaymentConfig]=\"selectedPaymentConfig$ | async\"\n        [selectedPaymentOption]=\"selectedPaymentOption$ | async\"\n        [fetchPaymentOptionsListener]=\"fetchPaymentOptionsListener$ | async\"\n        [shouldApplyTemplate]=\"shouldApplyTemplate\"\n        [checkClosedPaymentsAccess]=\"!!options.checkClosedPaymentsAccess\"\n        [submitting]=\"submitting$ | async\"\n        [isModalView]=\"options.isModalView\"\n        [isDebitPayment]=\"options.isDebitPayment\"\n        (selectConfig)=\"onSelectConfig($event)\"\n        (submitted)=\"onSubmit($event)\"\n        (selectPaymentOption)=\"onPaymentOptionSelect($event)\"\n        (clear)=\"onClear()\"\n        (applyPaymentTemplate)=\"onApplyTemplate($event)\"\n      ></bb-adaptive-form>\n    </ng-template>\n  </ng-container>\n</ng-template>\n", components: [{ type: i5__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i6__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2__namespace.ӨPaymentTemplateSelectorComponent, selector: "bb-payment-template-selector", inputs: ["items", "templatesList", "paymentTemplateSearch", "loading", "templateName", "searchValue"], outputs: ["setValues", "loadMoreTemplates", "searchTemplates", "clear"] }, { type: i7__namespace.ӨPayordFormComponent, selector: "bb-payord-form", inputs: ["config", "isModalView", "isTemplateMode", "isDebitPayment", "isEditPaymentModal", "templateModeType", "formItem", "submitting", "paymentMode"], outputs: ["submitted", "clear", "editPaymentCancel", "editPaymentSubmit"] }, { type: i2__namespace.ӨConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }, { type: i7__namespace.ӨAdaptiveFormComponent, selector: "bb-adaptive-form", inputs: ["formItem", "baseFields", "paymentTypes", "paymentState", "isDebitPayment", "selectedPaymentConfig", "selectedPaymentOption", "paymentOptionsError", "checkClosedPaymentsAccess", "paymentOptions$", "fetchingOptions", "fetchPaymentOptionsListener", "submitting", "fetchOptions$", "shouldApplyTemplate", "isModalView"], outputs: ["applyPaymentTemplate", "submitted", "selectPaymentOption", "clear", "selectConfig"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-create-payment-form',
                        templateUrl: './create-payment-form.component.html',
                        providers: [CreatePaymentFieldsSetupService],
                    }]
            }], ctorParameters: function () {
            return [{ type: i2__namespace.PaymentOrderHttpService }, { type: i2__namespace.PaymentOptionsService }, { type: CreatePaymentService }, { type: i2__namespace.NavigationService }, { type: i2__namespace.StateService }, { type: i0__namespace.ChangeDetectorRef }, { type: CreatePaymentConfigSetupService }, { type: CreatePaymentFieldsSetupService }, { type: i0__namespace.ElementRef }, { type: i2__namespace.RoutableModalService, decorators: [{
                            type: i0.Optional
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i2.BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN]
                        }] }];
        }, propDecorators: { outletRef: [{
                    type: i0.ViewChild,
                    args: ['outlet', { read: i0.ViewContainerRef, static: true }]
                }], contentRef: [{
                    type: i0.ViewChild,
                    args: ['content', { read: i0.TemplateRef, static: true }]
                }], alertContainer: [{
                    type: i0.ViewChild,
                    args: ['alertContainer']
                }] } });

    var components$1 = [CreatePaymentFormComponent];
    var CreatePaymentFormModule = /** @class */ (function () {
        function CreatePaymentFormModule() {
        }
        return CreatePaymentFormModule;
    }());
    /** @nocollapse */ CreatePaymentFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ CreatePaymentFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFormModule, declarations: [CreatePaymentFormComponent], imports: [i14.CommonModule, i7.PayordFormBuilderAngModule], exports: [CreatePaymentFormComponent] });
    /** @nocollapse */ CreatePaymentFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFormModule, imports: [[i14.CommonModule, i7.PayordFormBuilderAngModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreatePaymentFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i14.CommonModule, i7.PayordFormBuilderAngModule],
                        declarations: __spreadArray([], __read(components$1)),
                        exports: __spreadArray([], __read(components$1)),
                    }]
            }] });

    var P2PLimitReasonCodes;
    (function (P2PLimitReasonCodes) {
        P2PLimitReasonCodes["MIN_TRANSFER"] = "PL01";
        P2PLimitReasonCodes["MAX_TRANSFER"] = "PL02";
        P2PLimitReasonCodes["DAILY"] = "PL03";
        P2PLimitReasonCodes["MONTHLY"] = "PL04";
    })(P2PLimitReasonCodes || (P2PLimitReasonCodes = {}));

    var InitiatorDetailsComponent = /** @class */ (function () {
        function InitiatorDetailsComponent() {
        }
        return InitiatorDetailsComponent;
    }());
    /** @nocollapse */ InitiatorDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InitiatorDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ InitiatorDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InitiatorDetailsComponent, selector: "bb-payment-initiator-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0__namespace, template: "<div class=\"bb-text-bold bb-block bb-block--sm\">\n  <bb-payord-dynamic-label\n    name=\"initiator\"\n    [config]=\"paymentConfig\"\n    defaultLabel=\"From\"\n    i18n-defaultLabel=\"@@omni-payment-review-initiator.from-account.label\"\n  ></bb-payord-dynamic-label>\n</div>\n\n<div *ngIf=\"data?.accountNumber\">\n  <div\n    class=\"break-word bb-text-bold bb-block bb-block--xs\"\n    data-role=\"debit-account-name\"\n  >\n    {{ data?.alias || data?.name }}\n  </div>\n  <div\n    data-role=\"debit-account-number\"\n    class=\"bb-text-support break-word contextual-alternates-off\"\n  >\n    {{ data?.accountNumber }}\n  </div>\n</div>\n", components: [{ type: i2__namespace.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InitiatorDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-initiator-details',
                        templateUrl: './initiator-details.component.html',
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }], paymentConfig: [{
                    type: i0.Input
                }] } });

    var CreditorAccountComponent = /** @class */ (function () {
        function CreditorAccountComponent() {
        }
        return CreditorAccountComponent;
    }());
    /** @nocollapse */ CreditorAccountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreditorAccountComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CreditorAccountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditorAccountComponent, selector: "bb-creditor-account", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0__namespace, template: "<div class=\"bb-text-bold bb-block bb-block--sm\">\n  <bb-payord-dynamic-label\n    name=\"counterparty\"\n    [config]=\"paymentConfig\"\n    defaultLabel=\"To\"\n    i18n-defaultLabel=\"@@omni-payment-review-counterparty.transfer-to.label\"\n  ></bb-payord-dynamic-label>\n</div>\n<div *ngIf=\"data?.accountNumber || data?.creditorBank?.bankBranchCode\">\n  <div\n    class=\"bb-text-bold bb-block bb-block--xs\"\n    data-role=\"beneficiary-account-name\"\n  >\n    {{ data?.alias || data?.name }}\n  </div>\n  <div class=\"bb-text-support break-word contextual-alternates-off\">\n    <span data-role=\"beneficiary-account-number\">\n      {{\n        data?.creditorBank?.bankBranchCode\n          ? data?.creditorBank?.bankBranchCode + ' / ' + data?.accountNumber\n          : data?.accountNumber\n      }}\n    </span>\n  </div>\n</div>\n", components: [{ type: i2__namespace.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreditorAccountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-creditor-account',
                        templateUrl: './creditor-account.component.html',
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }], paymentConfig: [{
                    type: i0.Input
                }] } });

    var RemittanceDetailsComponent = /** @class */ (function () {
        function RemittanceDetailsComponent() {
        }
        return RemittanceDetailsComponent;
    }());
    /** @nocollapse */ RemittanceDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RemittanceDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ RemittanceDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RemittanceDetailsComponent, selector: "bb-payment-remittance-details", inputs: { data: "data", paymentConfig: "paymentConfig", forexDetails: "forexDetails", transferFee: "transferFee", chargeBearer: "chargeBearer" }, ngImport: i0__namespace, template: "<div class=\"bb-text-bold bb-block bb-block--sm\">\n  <bb-payord-dynamic-label\n    name=\"amountGroup\"\n    [config]=\"paymentConfig\"\n    defaultLabel=\"Amount\"\n    i18n-defaultLabel=\"@@omni-payment-review-remittance-details.amount.label\"\n  ></bb-payord-dynamic-label>\n</div>\n<div class=\"bb-highlight break-word\" data-role=\"transfer-amount\">\n  <bb-amount-ui\n    class=\"bb-heading-1\"\n    [amount]=\"data?.amountGroup?.amount\"\n    [currency]=\"data?.amountGroup?.currency\"\n    [mapCurrency]=\"false\"\n  ></bb-amount-ui>\n</div>\n\n<div data-role=\"payment-is-urgent\" class=\"bb-stack\" *ngIf=\"data?.urgent\">\n  <bb-icon-ui color=\"secondary\" name=\"info\" size=\"md\"> </bb-icon-ui>\n  &nbsp;\n  <span i18n=\"@@omni-payment-review-remittance-details.urgent-payment.label\"\n    >Urgent payment</span\n  >\n</div>\n\n<div class=\"bb-stack bb-text-support\" *ngIf=\"data?.amountOptionLabel\">\n  <span>{{ data?.amountOptionLabel }}</span>\n</div>\n", components: [{ type: i2__namespace.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2__namespace$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RemittanceDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-remittance-details',
                        templateUrl: './remittance-details.component.html',
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }], paymentConfig: [{
                    type: i0.Input
                }], forexDetails: [{
                    type: i0.Input
                }], transferFee: [{
                    type: i0.Input
                }], chargeBearer: [{
                    type: i0.Input
                }] } });

    var CreditorDetailsComponent = /** @class */ (function () {
        function CreditorDetailsComponent() {
        }
        return CreditorDetailsComponent;
    }());
    /** @nocollapse */ CreditorDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreditorDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CreditorDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditorDetailsComponent, selector: "bb-payment-creditor-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0__namespace, template: "<ng-container\n  *ngIf=\"\n    data?.entryClass ||\n    data?.accountType ||\n    data?.recipientId ||\n    data?.postalAddress?.addressLine1 ||\n    data?.postalAddress?.addressLine2 ||\n    data?.postalAddress?.streetName\n  \"\n>\n  <div\n    class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  >\n    <div class=\"card-body\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--md\"\n        i18n=\"@@counterparty-details.beneficiary-details.title\"\n      >\n        Beneficiary details\n      </div>\n      <div\n        class=\"row bb-block bb-block--md\"\n        *ngIf=\"data?.entryClass || data?.accountType\"\n      >\n        <div\n          class=\"col-md-6 bb-block bb-block--md\"\n          *ngIf=\"\n            data?.accountType &&\n            (data?.accountType === 'SAVINGS' ||\n              data?.accountType === 'CHECKING')\n          \"\n        >\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"accountType\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Account type\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.account-type-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            [ngSwitch]=\"data?.accountType\"\n            data-role=\"beneficiary-account-type\"\n          >\n            <ng-container\n              i18n=\"@@counterparty-details.account-type-savings\"\n              *ngSwitchCase=\"'SAVINGS'\"\n            >\n              Savings\n            </ng-container>\n            <ng-container\n              i18n=\"@@counterparty-details.account-type-checking\"\n              *ngSwitchCase=\"'CHECKING'\"\n            >\n              Checking\n            </ng-container>\n          </div>\n        </div>\n\n        <div class=\"col-md-6 bb-block bb-block--md\" *ngIf=\"data?.entryClass\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"entryClass\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Standard entry class (SEC Type)\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.entryClass-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            [ngSwitch]=\"data?.entryClass\"\n            data-role=\"beneficiary-standard-entry-class\"\n          >\n            <ng-container\n              i18n=\"@@counterparty-details.entryClass-ppd\"\n              *ngSwitchCase=\"'PPD'\"\n            >\n              Personal (PPD)\n            </ng-container>\n            <ng-container\n              i18n=\"@@counterparty-details.entryClass-ccd\"\n              *ngSwitchCase=\"'CCD'\"\n            >\n              Business (CCD)\n            </ng-container>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row bb-block bb-block--md\" *ngIf=\"data?.recipientId\">\n        <div class=\"col-md-6 bb-block bb-block--md\">\n          <div\n            class=\"bb-text-bold break-word\"\n            data-role=\"payment-counterparty-recipient-id-label\"\n          >\n            <bb-payord-dynamic-label\n              name=\"recipientId\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Recipient ID\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.recipientId-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div data-role=\"payment-counterparty-recipient-id\">\n            {{ data?.recipientId }}\n          </div>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"\n          data?.postalAddress?.addressLine1 ||\n          data?.postalAddress?.addressLine2 ||\n          data?.postalAddress?.streetName\n        \"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@counterparty-details.beneficiary-address.title\"\n        >\n          Beneficiary Address\n        </div>\n        <div class=\"break-word\">\n          <bb-full-address [address]=\"data?.postalAddress\"></bb-full-address>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n", components: [{ type: i2__namespace.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2__namespace.ӨFullAddressComponent, selector: "bb-full-address", inputs: ["address"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CreditorDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-creditor-details',
                        templateUrl: './creditor-details.component.html',
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }], paymentConfig: [{
                    type: i0.Input
                }] } });

    var CounterpartyDetailsComponent = /** @class */ (function () {
        function CounterpartyDetailsComponent() {
        }
        return CounterpartyDetailsComponent;
    }());
    /** @nocollapse */ CounterpartyDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CounterpartyDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CounterpartyDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CounterpartyDetailsComponent, selector: "bb-payment-counterparty-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0__namespace, template: "<div\n  class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  *ngIf=\"\n    data?.creditorBank?.bankName ||\n    data?.creditorBank?.bic ||\n    data?.creditorBank?.postalAddress?.addressLine1 ||\n    data?.creditorBank?.postalAddress?.addressLine2 ||\n    data?.creditorBank?.postalAddress?.streetName\n  \"\n>\n  <div class=\"card-body\">\n    <div\n      class=\"bb-text-bold bb-block bb-block--md\"\n      i18n=\"@@counterparty-details.bank-details.title\"\n    >\n      Beneficiary bank details\n    </div>\n\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"data?.creditorBank?.bankName || data?.creditorBank?.bic\"\n    >\n      <div class=\"row\">\n        <div class=\"col-6\" *ngIf=\"data?.creditorBank?.bic\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bic\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"SWIFT/BIC code\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.creditor-bank-bic-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            class=\"break-word\"\n            *ngIf=\"data?.creditorBank?.bic\"\n            data-role=\"counterparty-bic-code\"\n          >\n            {{ data?.creditorBank?.bic }}\n          </div>\n        </div>\n        <div class=\"col-6\" *ngIf=\"data?.creditorBank?.bankName\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bankName\"\n              [config]=\"paymentConfig\"\n              parentName=\"creditorBank\"\n              defaultLabel=\"Bank name\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.creditor-bank-name-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ data?.creditorBank?.bankName }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"\n        data?.creditorBank?.postalAddress?.addressLine1 ||\n        data?.creditorBank?.postalAddress?.addressLine2 ||\n        data?.creditorBank?.postalAddress?.streetName\n      \"\n    >\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@counterparty-details.bank-address.title\"\n      >\n        Bank address\n      </div>\n      <div class=\"break-word\">\n        <bb-full-address\n          [address]=\"data?.creditorBank?.postalAddress\"\n        ></bb-full-address>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  *ngIf=\"\n    data?.correspondentBank?.bankName ||\n    data?.correspondentBank?.bic ||\n    data?.correspondentBank?.bankBranchCode ||\n    data?.correspondentBank?.postalAddress?.addressLine1 ||\n    data?.correspondentBank?.postalAddress?.addressLine2 ||\n    data?.correspondentBank?.postalAddress?.streetName\n  \"\n>\n  <div class=\"card-body\">\n    <div\n      class=\"bb-text-bold bb-block bb-block--md\"\n      i18n=\"@@counterparty-details.correspondant-bank-details.title\"\n    >\n      Correspondent bank details\n    </div>\n\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"\n        data?.correspondentBank?.bankName ||\n        data?.correspondentBank?.bankBranchCode ||\n        data?.correspondentBank?.bic\n      \"\n    >\n      <div class=\"row\">\n        <div class=\"col-6\" *ngIf=\"data?.correspondentBank?.bankBranchCode\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bankBranchCode\"\n              [config]=\"paymentConfig\"\n              parentName=\"correspondentBank\"\n              defaultLabel=\"Routing transit number (ABA)\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.routing-transit-number-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"bb-text-support\">\n            {{ data?.correspondentBank?.bankBranchCode }}\n          </div>\n        </div>\n\n        <div class=\"col-6\" *ngIf=\"data?.correspondentBank?.bic\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bic\"\n              [config]=\"paymentConfig\"\n              parentName=\"correspondentBank\"\n              defaultLabel=\"SWIFT/BIC code\"\n              i18n-defaultLabel=\"@@counterparty-details.bic-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            class=\"break-word\"\n            *ngIf=\"data?.correspondentBank?.bic\"\n            data-role=\"correspondent-bic-code\"\n          >\n            {{ data?.correspondentBank?.bic }}\n          </div>\n        </div>\n\n        <div class=\"col-6\" *ngIf=\"data?.correspondentBank?.bankName\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bankName\"\n              [config]=\"paymentConfig\"\n              parentName=\"correspondentBank\"\n              defaultLabel=\"Bank name\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.correspondent.bank-name-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ data?.correspondentBank?.bankName }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"\n        data?.correspondentBank?.postalAddress?.addressLine1 ||\n        data?.correspondentBank?.postalAddress?.addressLine2 ||\n        data?.correspondentBank?.postalAddress?.streetName\n      \"\n    >\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@counterparty-details.correspondant.bank-address.title\"\n      >\n        Bank address\n      </div>\n      <div class=\"break-word\">\n        <bb-full-address\n          [address]=\"data?.correspondentBank?.postalAddress\"\n        ></bb-full-address>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  *ngIf=\"\n    data?.intermediaryBank?.bankName ||\n    data?.intermediaryBank?.bic ||\n    data?.intermediaryBank?.bankBranchCode ||\n    data?.intermediaryBank?.postalAddress?.addressLine1 ||\n    data?.intermediaryBank?.postalAddress?.addressLine2 ||\n    data?.intermediaryBank?.postalAddress?.streetName\n  \"\n>\n  <div class=\"card-body\">\n    <div\n      class=\"bb-text-bold bb-block bb-block--md\"\n      i18n=\"@@counterparty-details.intermediary-bank-details.title\"\n    >\n      Intermediary bank details\n    </div>\n\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"\n        data?.intermediaryBank?.bankName ||\n        data?.intermediaryBank?.bankBranchCode ||\n        data?.intermediaryBank?.bic\n      \"\n    >\n      <div class=\"row\">\n        <div class=\"col-6\" *ngIf=\"data?.intermediaryBank?.bankBranchCode\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bankBranchCode\"\n              [config]=\"paymentConfig\"\n              parentName=\"intermediaryBank\"\n              defaultLabel=\"Routing transit number (ABA)\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.routing-transit-number-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"bb-text-support\">\n            {{ data?.intermediaryBank?.bankBranchCode }}\n          </div>\n        </div>\n\n        <div class=\"col-6\" *ngIf=\"data?.intermediaryBank?.bic\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"bic\"\n              [config]=\"paymentConfig\"\n              parentName=\"intermediaryBank\"\n              defaultLabel=\"SWIFT/BIC code\"\n              i18n-defaultLabel=\"@@counterparty-details.bic-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div\n            class=\"break-word\"\n            *ngIf=\"data?.intermediaryBank?.bic\"\n            data-role=\"correspondent-bic-code\"\n          >\n            {{ data?.intermediaryBank?.bic }}\n          </div>\n        </div>\n\n        <div class=\"col-6\">\n          <div class=\"bb-text-bold\" *ngIf=\"data?.intermediaryBank?.bankName\">\n            <bb-payord-dynamic-label\n              name=\"bankName\"\n              [config]=\"paymentConfig\"\n              parentName=\"intermediaryBank\"\n              defaultLabel=\"Bank name\"\n              i18n-defaultLabel=\"\n                @@counterparty-details.intermediary-bank-name-default-label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ data?.intermediaryBank?.bankName }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"\n        data?.intermediaryBank?.postalAddress?.addressLine1 ||\n        data?.intermediaryBank?.postalAddress?.addressLine2 ||\n        data?.intermediaryBank?.postalAddress?.streetName\n      \"\n    >\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@counterparty-details.intermediary-bank-address.title\"\n      >\n        Bank address\n      </div>\n      <div class=\"break-word\">\n        <bb-full-address\n          [address]=\"data?.intermediaryBank?.postalAddress\"\n        ></bb-full-address>\n      </div>\n    </div>\n  </div>\n</div>\n\n<hr\n  *ngIf=\"\n    data?.creditorBank?.bankName ||\n    data?.creditorBank?.bic ||\n    data?.creditorBank?.postalAddress?.addressLine1 ||\n    data?.creditorBank?.postalAddress?.addressLine2 ||\n    data?.creditorBank?.postalAddress?.streetName ||\n    data?.correspondentBank?.bankName ||\n    data?.correspondentBank?.bic ||\n    data?.correspondentBank?.bankBranchCode ||\n    data?.correspondentBank?.postalAddress?.addressLine1 ||\n    data?.correspondentBank?.postalAddress?.addressLine2 ||\n    data?.correspondentBank?.postalAddress?.streetName ||\n    data?.intermediaryBank?.bankName ||\n    data?.intermediaryBank?.bic ||\n    data?.intermediaryBank?.bankBranchCode ||\n    data?.intermediaryBank?.postalAddress?.addressLine1 ||\n    data?.intermediaryBank?.postalAddress?.addressLine2 ||\n    data?.intermediaryBank?.postalAddress?.streetName\n  \"\n/>\n", components: [{ type: i2__namespace.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2__namespace.ӨFullAddressComponent, selector: "bb-full-address", inputs: ["address"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CounterpartyDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-counterparty-details',
                        templateUrl: './counterparty-details.component.html',
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }], paymentConfig: [{
                    type: i0.Input
                }] } });

    var ScheduleDetailsComponent = /** @class */ (function () {
        function ScheduleDetailsComponent() {
        }
        return ScheduleDetailsComponent;
    }());
    /** @nocollapse */ ScheduleDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ScheduleDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleDetailsComponent, selector: "bb-payment-schedule-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0__namespace, template: "<div\n  class=\"bb-block bb-block--md bb-stack bb-stack--align-top\"\n  *ngIf=\"data?.frequency?.value || data?.frequency as freq\"\n>\n  <bb-icon-ui\n    name=\"cached\"\n    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n  ></bb-icon-ui>\n  <div class=\"bb-stack__item\">\n    <div class=\"bb-text-bold bb-block bb-block--xs\">\n      <bb-payord-dynamic-label\n        name=\"frequency\"\n        [config]=\"paymentConfig\"\n        parentName=\"schedule\"\n        defaultLabel=\"Frequency\"\n        i18n-defaultLabel=\"\n          @@omni-payment-review-schedule-details.frequency.label\"\n      ></bb-payord-dynamic-label>\n    </div>\n    <div\n      data-role=\"frequency-value\"\n      i18n=\"@@omni-payment-review-schedule-details.frequency\"\n    >\n      {freq, select, other {Once} DAILY {Daily} WEEKLY {Weekly} BIWEEKLY\n      {Bi-Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Annually}}\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"bb-block bb-block--md bb-stack bb-stack--align-top\"\n  *ngIf=\"data?.startDate\"\n>\n  <bb-icon-ui\n    name=\"today\"\n    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n  ></bb-icon-ui>\n  <div class=\"bb-stack__item\">\n    <div class=\"bb-text-bold bb-block bb-block--xs\">\n      <bb-payord-dynamic-label\n        name=\"startDate\"\n        [config]=\"paymentConfig\"\n        parentName=\"schedule\"\n        defaultLabel=\"Start date\"\n        i18n-defaultLabel=\"\n          @@omni-payment-review-schedule-details.start-date.label\"\n      ></bb-payord-dynamic-label>\n    </div>\n    <div data-role=\"execution-date\">\n      {{ data?.startDate | date: 'mediumDate' }}\n    </div>\n    <div class=\"row\">\n      <span class=\"bb-text-support bb-subtitle col-md-6\">{{\n        data?.scheduleInfo\n      }}</span>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"data?.frequency?.value || data?.frequency as freq\">\n  <ng-container *ngIf=\"freq !== 'ONCE'\">\n    <div\n      class=\"bb-block bb-block--md bb-stack bb-stack--align-top\"\n      *ngIf=\"data?.endType === 'after' && data?.repeat\"\n    >\n      <bb-icon-ui\n        name=\"today\"\n        class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      ></bb-icon-ui>\n      <div class=\"bb-stack__item\">\n        <div\n          class=\"bb-text-bold bb-block bb-block--xs\"\n          data-role=\"end-after-label\"\n        >\n          <bb-payord-dynamic-label\n            name=\"repeat\"\n            [config]=\"paymentConfig\"\n            parentName=\"schedule\"\n            defaultLabel=\"End after\"\n            i18n-defaultLabel=\"\n              @@omni-payment-review-schedule-details.end-after.label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div data-role=\"end-after\">\n          {{ data?.repeat }}\n          <span i18n=\"@@omni-payment-review-schedule-details.occurances.label\"\n            >occurrences</span\n          >\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"bb-block bb-block--md bb-stack bb-stack--align-top\"\n      *ngIf=\"data?.endType === 'on' && data?.endDate\"\n    >\n      <bb-icon-ui\n        name=\"today\"\n        class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      ></bb-icon-ui>\n      <div class=\"bb-stack__item\">\n        <div\n          class=\"bb-text-bold bb-block bb-block--xs\"\n          data-role=\"end-date-label\"\n        >\n          <bb-payord-dynamic-label\n            name=\"endDate\"\n            [config]=\"paymentConfig\"\n            parentName=\"schedule\"\n            defaultLabel=\"End date\"\n            i18n-defaultLabel=\"\n              @@omni-payment-review-schedule-details.end-date.label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div data-role=\"end-date\">\n          {{ data?.endDate | date: 'mediumDate' }}\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i14__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-schedule-details',
                        templateUrl: './schedule-details.component.html',
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }], paymentConfig: [{
                    type: i0.Input
                }] } });

    var AdaptedReviewComponent = /** @class */ (function () {
        function AdaptedReviewComponent(assetsService, identityService) {
            this.assetsService = assetsService;
            this.identityService = identityService;
            /**
             * Asset resolver for quick-transfer widget
             */
            this.resolveAsset = this.assetsService.createAssetsResolver({
                widgetName: 'bb-payord-omni-payment-widget-ang',
                getURIFromAssetID: function (assetId) { return "" + assetId; },
            });
            /**
             * Stream of resolved success image path
             */
            this.successImg = this.resolveAsset('succeed.svg');
            /**
             * Stream of resolved success image path
             */
            this.successImgNoMotion = this.resolveAsset('no-motion.svg');
            /**
             * unique time to reload animated svg image everytime
             */
            this.timestamp = new Date().getTime();
        }
        AdaptedReviewComponent.prototype.ngOnInit = function () {
            var _a, _b;
            this.isLoading$ = rxjs.merge((_a = this.methods) === null || _a === void 0 ? void 0 : _a.isSubmitting$(), (_b = this.identityService) === null || _b === void 0 ? void 0 : _b.requestSubject.pipe(operators.mapTo(false)));
        };
        Object.defineProperty(AdaptedReviewComponent.prototype, "errorText", {
            /*
             * Text for alert error content for server errors
             */
            get: function () {
                var _a, _b, _c;
                var amount = (_b = (_a = this.breachError) === null || _a === void 0 ? void 0 : _a.reasonText) === null || _b === void 0 ? void 0 : _b.split('|')[1];
                if (this.isUserDeclined) {
                    return $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@initiate-payment.adapted-review.user-decline-error-message:"], [":@@initiate-payment.adapted-review.user-decline-error-message:"])));
                }
                switch ((_c = this.breachError) === null || _c === void 0 ? void 0 : _c.reasonCode) {
                    case P2PLimitReasonCodes.DAILY:
                        return $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":@@initiate-payment.adapted-review.P2P-daily-limit-error-message:The amount exceeds the daily limit of ", ""], [":@@initiate-payment.adapted-review.P2P-daily-limit-error-message:The amount exceeds the daily limit of ", ""])), amount);
                    case P2PLimitReasonCodes.MONTHLY:
                        return $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@initiate-payment.adapted-review.P2P-monthly-limit-error-message:The amount exceeds the monthly limit of ", ""], [":@@initiate-payment.adapted-review.P2P-monthly-limit-error-message:The amount exceeds the monthly limit of ", ""])), amount);
                    case P2PLimitReasonCodes.MAX_TRANSFER:
                        return $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@initiate-payment.adapted-review.P2P-max-limit-error-message:This amount can't exceed ", ""], [":@@initiate-payment.adapted-review.P2P-max-limit-error-message:This amount can't exceed ", ""])), amount);
                    case P2PLimitReasonCodes.MIN_TRANSFER:
                        return $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":@@initiate-payment.adapted-review.P2P-max-limit-daily-error-message:This amount can't be lower than ", ""], [":@@initiate-payment.adapted-review.P2P-max-limit-daily-error-message:This amount can't be lower than ", ""])), amount);
                    default:
                        return $localize(templateObject_6 || (templateObject_6 = __makeTemplateObject([":@@initiate-payment.adapted-review.default-error-message:Failed to submit payment. Please try again later."], [":@@initiate-payment.adapted-review.default-error-message:Failed to submit payment. Please try again later."])));
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptedReviewComponent.prototype, "errorTitle", {
            /*
             * Title for alert error content for server errors
             */
            get: function () {
                if (this.breachError) {
                    return $localize(templateObject_7 || (templateObject_7 = __makeTemplateObject([":@@initiate-payment.adapted-review.P2P-limit-error-title:Payment Failed Due to an Exceeding Limit"], [":@@initiate-payment.adapted-review.P2P-limit-error-title:Payment Failed Due to an Exceeding Limit"])));
                }
                else if (this.isUserDeclined) {
                    return $localize(templateObject_8 || (templateObject_8 = __makeTemplateObject([":@@initiate-payment.adapted-review.user-declined-error-title:Your Transfer Has Been Cancelled."], [":@@initiate-payment.adapted-review.user-declined-error-title:Your Transfer Has Been Cancelled."])));
                }
                else {
                    return $localize(templateObject_9 || (templateObject_9 = __makeTemplateObject([":@@initiate-payment.adapted-review.generic-error-title:"], [":@@initiate-payment.adapted-review.generic-error-title:"])));
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptedReviewComponent.prototype, "isScheduledTransfer", {
            /*
             * Boolean flag to display whether transfer date is for future
             */
            get: function () {
                var _a;
                var today = i2.datePart();
                var transferDate = i2.datePart((_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule.startDate);
                return new Date(transferDate) > new Date(today);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptedReviewComponent.prototype, "isUserDeclined", {
            get: function () {
                return this.status === i2$2.ProgressStatus.USER_DECLINED;
            },
            enumerable: false,
            configurable: true
        });
        return AdaptedReviewComponent;
    }());
    /** @nocollapse */ AdaptedReviewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AdaptedReviewComponent, deps: [{ token: i1__namespace$1.AssetsService }, { token: i2__namespace$2.TransactionSigningService, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AdaptedReviewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AdaptedReviewComponent, selector: "bb-adapted-review-container", inputs: { payment: "payment", status: "status", paymentConfig: "paymentConfig", methods: "methods", breachError: "breachError" }, ngImport: i0__namespace, template: "<ng-container *ngTemplateOutlet=\"status === 'SUCCESS' ? successScreen : reviewTemplate\"> </ng-container>\n\n<ng-template #reviewTemplate>\n  <div\n    *ngIf=\"isLoading$ | async\"\n    data-role=\"adapted-review-loader\"\n    class=\"bb-loading-indicator-wrapper bb-loading-indicator-wrapper--overlay\"\n  >\n    <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </div>\n\n  <fieldset class=\"bb-fieldset omni-payment-adapted-review\">\n    <legend class=\"bb-label bb-block bb-block--lg\" i18n=\"@@omni-payment-wrapper-review-page-title.label\">\n      Review your transfer\n    </legend>\n    <ng-container *ngIf=\"payment\">\n      <bb-alert-ui\n        *ngIf=\"status === 'ERROR' || status === 'USER_DECLINED' || breachError\"\n        [title]=\"errorTitle\"\n        (close)=\"(false)\"\n        modifier=\"error\"\n      >\n        <span data-role=\"failure-message\">{{ errorText }}</span>\n      </bb-alert-ui>\n\n      <div *ngIf=\"payment?.isIntraLegalEntity\" class=\"bb-block bb-block--sm bb-inline-stack bb-text-support\">\n        <div class=\"bb-inline-stack__item\">\n          <bb-icon-ui name=\"domain\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"bb-inline-stack__item bb-text-bold\"\n          i18n=\"@@omni-payment-wrapper-review-payment-intra-company-payment.label\"\n        >\n          Intracompany payment\n        </div>\n      </div>\n\n      <div class=\"bb-item-log bb-block bb-block--lg\">\n        <div class=\"bb-item-log__record item-log__record--has-bullet\">\n          <div class=\"bb-stack bb-stack--align-top\">\n            <div\n              class=\"bb-item-log-record__bullet-icon bb-item-log-record__bullet-icon--filled bb-stack__item bb-stack__item--spacing-md\"\n            ></div>\n            <div class=\"bb-item-log-record__details\">\n              <bb-payment-initiator-details [data]=\"payment?.initiator\" [paymentConfig]=\"paymentConfig\">\n              </bb-payment-initiator-details>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-item-log__record item-log__record--has-bullet\">\n          <div class=\"bb-stack bb-stack--align-top\">\n            <div class=\"bb-item-log-record__bullet-icon bb-stack__item bb-stack__item--spacing-md\"></div>\n            <div class=\"bb-item-log-record__details\">\n              <bb-creditor-account [data]=\"payment?.counterparty\" [paymentConfig]=\"paymentConfig\">\n              </bb-creditor-account>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-block bb-block--lg\">\n        <bb-payment-remittance-details\n          [data]=\"payment?.remittanceInfo\"\n          [transferFee]=\"payment?.transferFee\"\n          [chargeBearer]=\"payment?.chargeBearer\"\n          [forexDetails]=\"methods?.getForexDetails(payment)\"\n          [paymentConfig]=\"paymentConfig\"\n        ></bb-payment-remittance-details>\n      </div>\n\n      <bb-payment-creditor-details\n        [data]=\"payment?.counterparty\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-creditor-details>\n\n      <bb-payment-counterparty-details\n        [data]=\"payment?.counterparty\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-counterparty-details>\n\n      <bb-payment-schedule-details\n        [data]=\"payment?.schedule\"\n        [paymentConfig]=\"paymentConfig\"\n      ></bb-payment-schedule-details>\n\n      <div\n        *ngIf=\"\n          payment?.remittanceInfo?.description ||\n          payment?.remittanceInfo?.paymentReference ||\n          payment?.counterparty.messageToBank ||\n          payment?.counterparty.remittanceInformation\n        \"\n      >\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.paymentReference\">\n          <div class=\"bb-text-bold\" data-role=\"payment-reference-label\">\n            <bb-payord-dynamic-label\n              name=\"paymentReference\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Payment reference\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-remittance-info-payment-reference.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-reference\">\n            {{ payment?.remittanceInfo?.paymentReference }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md bb-inline-stack bb-stack--align-top\">\n          <bb-icon-ui name=\"subject\" class=\"bb-stack__item bb-stack__item--spacing-sm\"></bb-icon-ui>\n          <div class=\"bb-stack__item\">\n            <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n              <bb-payord-dynamic-label\n                name=\"description\"\n                parentName=\"remittanceInfo\"\n                defaultLabel=\"Memo\"\n                i18n-defaultLabel=\"@@omni-payment-wrapper-review-remittance-info-description.label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"payment-description\">\n              {{ payment?.remittanceInfo?.description }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty.remittanceInformation\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-counterparty-message-to-beneficiary.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ payment?.counterparty?.remittanceInformation }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.messageToBank || payment?.counterparty?.messageToBank\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary bank\"\n              i18n-defaultLabel=\"@@omni-payment-wrapper-review-message-to-bank.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\">\n            {{ payment?.counterparty?.messageToBank || payment?.messageToBank }}\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </fieldset>\n\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      class=\"bb-button-bar__button\"\n      data-role=\"submit-button\"\n      (click)=\"methods?.submit()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      *ngIf=\"!methods?.isApprovalEnabled()\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-submit-payment.label\"\n    >\n      Confirm and Send Money\n    </button>\n    <div class=\"btn-group bb-button-bar__button\" data-role=\"button-group\" *ngIf=\"methods?.isApprovalEnabled()\">\n      <bb-load-button-ui\n        color=\"primary\"\n        [isLoading]=\"methods?.isSubmitting$() | async\"\n        (click)=\"methods?.submit()\"\n        i18n=\"@@omni-payment-wrapper-review-btn-group-submit-payment.label\"\n      >\n        Submit\n      </bb-load-button-ui>\n\n      <bb-dropdown-menu-ui\n        class=\"btn-group\"\n        btnColor=\"primary\"\n        icon=\"caret-down\"\n        data-role=\"dropdown-menu\"\n        container=\"body\"\n        position=\"top-right\"\n      >\n        <ng-template bbDropdownMenuItem>\n          <button\n            role=\"menuitem\"\n            type=\"button\"\n            class=\"dropdown-item\"\n            data-role=\"bus-submit-and-approve-button\"\n            [disabled]=\"methods?.isSubmitting$() | async\"\n            (bbKeyboardClick)=\"methods?.submit(true)\"\n            i18n=\"@@omni-payment-wrapper-review-btn-group-submit-and-approve-payment.label\"\n          >\n            Submit and Approve\n          </button>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n    <button\n      class=\"bb-button-bar__button\"\n      bbButton\n      color=\"secondary\"\n      data-role=\"edit-button\"\n      (click)=\"methods?.edit()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-edit-payment.label\"\n    >\n      Edit\n    </button>\n    <button\n      bbButton\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n      data-role=\"cancel-button\"\n      (click)=\"methods?.toggleDiscardDialog()\"\n      [disabled]=\"methods?.isSubmitting$() | async\"\n      i18n=\"@@omni-payment-wrapper-review-btn-group-discard-payment.label\"\n    >\n      Cancel\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #successScreen>\n  <div class=\"bb-text-align-center bb-block--xl\">\n    <picture>\n      <source srcset=\"{{ successImgNoMotion | async }}\" media=\"(prefers-reduced-motion: reduce)\" />\n      <img\n        srcset=\"{{ (successImg | async) + '?' + timestamp }}\"\n        alt=\"Success!\"\n        i18n-alt=\"Success!|Text for transfer succeeded@@omni-payment-wrapper.complete.transfer-succeeded\"\n        data-role=\"transfer-success-anim\"\n        class=\"img-fluid\"\n      />\n    </picture>\n    <div></div>\n    <bb-header-ui\n      headingClasses=\"bb-text-semi-bold\"\n      headingType=\"h2\"\n      heading=\"Success!\"\n      i18n-heading=\"Success!|Text for success@@omni-payment-wrapper.complete.success\"\n    ></bb-header-ui>\n    <div data-role=\"adapted-success-message\" *ngIf=\"!payment?.paymentOrderId; else editPaymentMessageTemplate\">\n      <span\n        *ngIf=\"!isScheduledTransfer\"\n        class=\"bb-text-support\"\n        i18n=\"Success Transfer|Text for success transfer@@omni-payment-wrapper.complete.success-message\"\n      >\n        You\u2019ve just transferred\n        {{ payment?.remittanceInfo?.amountGroup.currency }}\n        {{ payment?.remittanceInfo?.amountGroup.amount }} to {{ payment?.counterparty.name }}'s.\n      </span>\n      <span\n        *ngIf=\"isScheduledTransfer\"\n        class=\"bb-text-support\"\n        i18n=\"\n          Success Scheduled Transfer|Text for success scheduled\n          transfer@@omni-payment-wrapper.scheduled-transfer.complete.success-message\"\n      >\n        You\u2019ve just scheduled transfer to {{ payment?.counterparty.name }}'s.\n      </span>\n    </div>\n    <ng-template #editPaymentMessageTemplate>\n      <span\n        class=\"bb-text-support\"\n        i18n=\"Success edit transfer|Text for edit transfer success@@omni-payment-wrapper.complete.success-edit-message\"\n        data-role=\"adapted-success-edit-message\"\n      >\n        You\u2019ve just edited the scheduled transfer to\n        {{ payment?.counterparty.name }}'s.\n      </span>\n    </ng-template>\n  </div>\n  <div class=\"bb-text-align-center bb-block bb-block--xl\" *ngIf=\"payment?.counterparty?.saveNewContact\">\n    <div class=\"bb-payment-account-details-card bb-inline-stack\">\n      <div class=\"bb-inline-stack\">\n        <ng-container *ngIf=\"!!(methods?.getSaveContactResponse$ | async)?.id; else saveContactFail\">\n          <bb-icon-ui name=\"success\" color=\"success\" class=\"bb-stack__item bb-stack__item--spacing-sm\"></bb-icon-ui>\n          <span\n            i18n=\"\n              Success Save Contact|Text for success save contact@@omni-payment-wrapper.complete.success-save-contact\"\n            >{{ payment?.counterparty?.name }} is saved to your contacts</span\n          >\n        </ng-container>\n        <ng-template #saveContactFail>\n          <bb-icon-ui\n            name=\"error-outline\"\n            color=\"danger\"\n            class=\"bb-stack__item bb-stack__item--spacing-sm\"\n          ></bb-icon-ui>\n          <span i18n=\"Fail Save Contact|Text for fail save contact@@omni-payment-wrapper.complete.fail-save-contact\"\n            >Can\u2019t save {{ payment?.counterparty?.name }} to your contacts. Please try again later.</span\n          >\n        </ng-template>\n      </div>\n    </div>\n  </div>\n  <div class=\"bb-text-align-center\">\n    <div class=\"bb-block bb-block--md\">\n      <button\n        *ngIf=\"!payment?.paymentOrderId\"\n        bbButton\n        color=\"primary\"\n        (click)=\"methods?.reset()\"\n        i18n=\"Make another transfer button|Make another transfer@@omni-payment-wrapper.complete.button.transfer-done\"\n      >\n        Make another transfer\n      </button>\n      <button\n        *ngIf=\"payment?.paymentOrderId\"\n        bbButton\n        color=\"primary\"\n        (click)=\"methods?.navigateToAfterSuccessPage()\"\n        i18n=\"\n          View scheduled transfers button|View scheduled\n          transfers@@omni-payment-wrapper.complete.button.scheduled-transfer-done\"\n      >\n        View scheduled transfers\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<bb-modal-ui\n  [isOpen]=\"methods?.showDiscardDialog()\"\n  (cancel)=\"methods?.toggleDiscardDialog()\"\n  (confirm)=\"methods?.reset()\"\n>\n  <bb-modal-header-ui\n    title=\"Discard entered data?\"\n    i18n-title=\"omni-payment-adapted-review-discard-modal-title\"\n  ></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-container i18n=\"@@omni-payment-adapted-review-discard-modal-content\">\n        Are you sure to exit and discard all changes? Entered data will be lost.\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"methods?.reset()\"\n          data-role=\"discard-action-btn\"\n          i18n=\"@@omni-payment-adapted-review-discard-modal-discard-btn\"\n        >\n          Discard\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"methods?.toggleDiscardDialog()\"\n          data-role=\"cancel-action-btn\"\n          i18n=\"@@omni-payment-adapted-review-discard-modal-cancel-btn\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i3__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: InitiatorDetailsComponent, selector: "bb-payment-initiator-details", inputs: ["data", "paymentConfig"] }, { type: CreditorAccountComponent, selector: "bb-creditor-account", inputs: ["data", "paymentConfig"] }, { type: RemittanceDetailsComponent, selector: "bb-payment-remittance-details", inputs: ["data", "paymentConfig", "forexDetails", "transferFee", "chargeBearer"] }, { type: CreditorDetailsComponent, selector: "bb-payment-creditor-details", inputs: ["data", "paymentConfig"] }, { type: CounterpartyDetailsComponent, selector: "bb-payment-counterparty-details", inputs: ["data", "paymentConfig"] }, { type: ScheduleDetailsComponent, selector: "bb-payment-schedule-details", inputs: ["data", "paymentConfig"] }, { type: i2__namespace.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i13__namespace.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i2__namespace$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i5__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i13__namespace$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i13__namespace$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i13__namespace$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i13__namespace$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i18__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i19__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i13__namespace$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i13__namespace$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i14__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AdaptedReviewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-adapted-review-container',
                        templateUrl: './adapted-review.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.AssetsService }, { type: i2__namespace$2.TransactionSigningService, decorators: [{
                            type: i0.Optional
                        }] }];
        }, propDecorators: { payment: [{
                    type: i0.Input
                }], status: [{
                    type: i0.Input
                }], paymentConfig: [{
                    type: i0.Input
                }], methods: [{
                    type: i0.Input
                }], breachError: [{
                    type: i0.Input
                }] } });
    var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9;

    var ReviewPaymentContainerComponent = /** @class */ (function () {
        function ReviewPaymentContainerComponent(formBuilder, stateService, eventBus, navigationService, createPaymentService, modalService, paymentOrderHttpService, createPaymentSetup, transactionSigningHelper, paymentErrors) {
            this.formBuilder = formBuilder;
            this.stateService = stateService;
            this.eventBus = eventBus;
            this.navigationService = navigationService;
            this.createPaymentService = createPaymentService;
            this.modalService = modalService;
            this.paymentOrderHttpService = paymentOrderHttpService;
            this.createPaymentSetup = createPaymentSetup;
            this.transactionSigningHelper = transactionSigningHelper;
            this.paymentErrors = paymentErrors;
            this.showConfirmation = false;
            this.gc$ = new rxjs.Subject();
            this.saveContactResponse$ = new rxjs.BehaviorSubject(null);
            this.paymentOrderId = '';
            this.approvalPending = false;
            this.enablePaymentTemplate = true;
            this.saveTemplate = false;
            this.canApprove = false;
            this.showBreachDetails = false;
            this.paymentMode = i2.PaymentMode;
            this.isErrorTitleDisplayed = true;
            this.reviewScreens = i2.ReviewScreens;
            this.widgetOptions = {};
            this.errors = [];
            this.submitting$ = new rxjs.BehaviorSubject(false);
            this.savingTemplate$ = new rxjs.BehaviorSubject(false);
            this.paymentStatus$ = new rxjs.BehaviorSubject(undefined);
            this.selectedPaymentConfig$ = this.createPaymentService.selectedPaymentConfig$;
            this.paymentTemplateModalState = new rxjs.BehaviorSubject(undefined);
            this.methods = {
                edit: this.onEdit.bind(this),
                submit: this.submitPayment.bind(this),
                reset: this.resetPayment.bind(this),
                discard: this.discardPayment.bind(this),
                toggleDiscardDialog: this.toggleConfirmationDialog.bind(this),
                showDiscardDialog: this.showDiscardDialog.bind(this),
                isApprovalEnabled: this.isApprovalEnabled.bind(this),
                isPaymentTemplateEnabled: this.isPaymentTemplateEnabled.bind(this),
                isNewPaymentEnabled: this.isNewPaymentEnabled.bind(this),
                isSavingTemplate$: this.isSavingTemplate$.bind(this),
                getPaymentMessage: this.getPaymentMessage.bind(this),
                getPurposeDescription: this.getPurposeDescription.bind(this),
                isSubmitting$: this.isSubmitting$.bind(this),
                getLabelText: i2.getLabelFromPaymentConfig,
                getForexDetails: this.getForexDetails.bind(this),
                showBreachModal: this.showBreachModal.bind(this),
                isTemplateSaved: this.isTemplateSaved.bind(this),
                openTemplateModal: this.openTemplateModal.bind(this),
                doneEditing: this.doneEditing.bind(this),
                navigateToAfterSuccessPage: this.navigateToAfterSuccessPage.bind(this),
                getPaymentResponse: this.getPaymentResponse.bind(this),
                getSaveContactResponse$: this.saveContactResponse$,
                getPaymentStatusType: this.getPaymentStatusType.bind(this),
            };
            this.createTemplatePermission$ = this.paymentOrderHttpService.createPermission$.pipe(operators.map(function () { return true; }), operators.catchError(function (error) { return rxjs.of(false); }));
        }
        ReviewPaymentContainerComponent.prototype.onEdit = function () {
            this.stateService.setPaymentState(i2.PaymentState.EDIT);
            this.navigationService.form();
        };
        ReviewPaymentContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.stateService.setPaymentState(i2.PaymentState.REVIEW);
            this.canApprove = this.stateService.canApprove;
            this.createPaymentSetup.reviewTemplate$
                .pipe(operators.takeUntil(this.gc$), operators.filter(function (template) { return !!template; }))
                .subscribe(function (template) { return (_this.reviewTemplate = template); });
            this.createPaymentSetup.options$.pipe(operators.takeUntil(this.gc$)).subscribe(function (options) {
                _this.isErrorTitleDisplayed = Boolean(options.isErrorTitleDisplayed);
                _this.widgetOptions = options;
                _this.header = _this.createPaymentSetup.getHeader(i2.InitiatePaymentHeaderStates.REVIEW);
            });
            this.paymentItem$ = this.stateService.form$.pipe(operators.takeUntil(this.gc$), operators.tap(function (form) { return (_this.paymentForm = form); }), operators.map(function (form) { return (form === null || form === void 0 ? void 0 : form.getRawValue()) || {}; }));
            this.paymentItem$.pipe(operators.takeUntil(this.gc$)).subscribe(function (data) {
                if (data && i2.isObjectTruthy(data)) {
                    _this.paymentItem = data;
                }
                else {
                    _this.stateService.setPaymentState(i2.PaymentState.INITIAL);
                    _this.navigationService.form();
                }
            });
            this.paymentTemplateForm = this.buildPaymentTemplateForm();
        };
        ReviewPaymentContainerComponent.prototype.isSavingTemplate$ = function () {
            return this.savingTemplate$;
        };
        ReviewPaymentContainerComponent.prototype.onSubmit = function (approved) {
            if (approved === void 0) { approved = false; }
            this.submitting$.next(true);
            if (this.paymentItem.counterparty.saveNewContact) {
                this.saveNewContact();
            }
            this.postPaymentOrder(approved);
        };
        ReviewPaymentContainerComponent.prototype.saveNewContact = function () {
            var _this = this;
            this.paymentOrderHttpService
                .saveNewContact(Object.assign(Object.assign({}, i2.contactItemToService(this.paymentItem.counterparty)), { accessContextScope: this.widgetOptions.accessContextScope }))
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(function (response) {
                var _d = response || {}, id = _d.id, status = _d.status;
                _this.saveContactResponse$.next(response);
                var contactSaved = !!id;
                _this.paymentOrderHttpService.showNotification(contactSaved, {
                    header: contactSaved
                        ? status === contactManager.ActiveContactStatus.PENDINGAPPROVAL
                            ? reviewI18n.newContactSubmitSuccessPendingApproval
                            : reviewI18n.newContactSubmitSuccess
                        : reviewI18n.newContactSubmitFailure,
                });
            });
        };
        ReviewPaymentContainerComponent.prototype.handlePaymentError = function (error) {
            var _a, _b, _c;
            this.genericError = (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.message;
            this.errors = (_b = error === null || error === void 0 ? void 0 : error.error) === null || _b === void 0 ? void 0 : _b.errors;
            if (((_c = this.errors) === null || _c === void 0 ? void 0 : _c.length) || this.genericError) {
                var errorObject = {
                    errorResponse: error,
                    genericMessage: this.genericError,
                    errors: this.errors,
                    paymentErrors: this.paymentErrors,
                    notificationHeader: reviewI18n.submitPaymentFailure,
                };
                this.paymentOrderHttpService.manageErrorResponse(errorObject);
            }
            else {
                this.paymentOrderHttpService.showNotification(false, {
                    header: reviewI18n.submitPaymentFailureUnknownErrorHeader,
                    message: reviewI18n.submitPaymentFailureUnknownError,
                });
            }
            var message = error === null || error === void 0 ? void 0 : error.statusText;
            var status;
            switch (message) {
                case 'rejected_by_user':
                    status = i2.ProgressStatus.USER_DECLINED;
                    break;
                default:
                    status = 'ERROR';
            }
            this.paymentStatus$.next(status);
            this.submitting$.next(false);
        };
        ReviewPaymentContainerComponent.prototype.putOrPostPaymentOrder = function (post) {
            var _a;
            var isCopyPayment = ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === i2.PaymentMode.COPY_PAYMENT;
            var paymentOrderId = this.paymentItem.paymentOrderId;
            return paymentOrderId && !isCopyPayment
                ? this.paymentOrderHttpService.putPaymentOrder(Object.assign(Object.assign({}, post), { id: paymentOrderId }), paymentOrderId)
                : this.paymentOrderHttpService.postPaymentOrder(post);
        };
        ReviewPaymentContainerComponent.prototype.postPaymentOrder = function (approved) {
            var _this = this;
            var shouldApprove = approved ? { approved: approved } : null;
            this.putOrPostPaymentOrder(i2.toPostRequest(Object.assign(Object.assign({}, this.paymentItem), shouldApprove)))
                .pipe(operators.takeUntil(this.gc$), operators.catchError(function (error) {
                var _a;
                (_a = _this.alertContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollIntoView(false);
                if (_this.hasLimitBreach(error)) {
                    _this.paymentStatus$.next('LIMIT_BREACH');
                    _this.breachError = error.error || error;
                    _this.submitting$.next(false);
                }
                else {
                    _this.handlePaymentError(error);
                }
                return rxjs.EMPTY;
            }))
                .subscribe(function (response) {
                var _a;
                if ((_a = _this.transactionSigningHelper) === null || _a === void 0 ? void 0 : _a.isTransactionSigningResponse(response)) {
                    _this.handleTransactionSigning(response);
                }
                else {
                    _this.handlePaymentSubmit(response);
                }
            });
        };
        ReviewPaymentContainerComponent.prototype.handlePaymentSubmit = function (response) {
            var _a;
            var _paymentStatus = response.status;
            var isApprovalRejected = _paymentStatus === i2.ApprovalStatus.REJECTED;
            var status = !!response.id && !isApprovalRejected ? 'SUCCESS' : _paymentStatus || 'ERROR';
            this.paymentOrderId = response === null || response === void 0 ? void 0 : response.id;
            this.approvalPending = _paymentStatus === i2.Status.ENTERED || _paymentStatus === i2.ProgressStatus.PENDING_APPROVAL;
            if (!!response.id && !isApprovalRejected) {
                var isEditPayment = ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === i2.PaymentMode.EDIT_PAYMENT;
                var _d = this.widgetOptions.isDebitPayment
                    ? reviewI18n.debitPayment
                    : reviewI18n.defaultPayment, submitSuccess = _d.submitSuccess, submitSuccessPendingApproval = _d.submitSuccessPendingApproval, editSubmitSuccess = _d.editSubmitSuccess;
                var header = isEditPayment
                    ? editSubmitSuccess
                    : this.approvalPending
                        ? submitSuccessPendingApproval
                        : submitSuccess;
                this.paymentOrderHttpService.showNotification(true, { header: header });
                this.eventBus.publish(this.widgetOptions.successEventName || i2.defaultPaymentSuccessEventName, true);
                this.header = this.createPaymentSetup.getHeader(i2.InitiatePaymentHeaderStates.SUBMITTED);
            }
            this.paymentResponse = response;
            this.paymentStatus$.next(status);
            this.submitting$.next(false);
        };
        ReviewPaymentContainerComponent.prototype.handleTransactionSigning = function (response) {
            if (!this.transactionSigningHelper) {
                return;
            }
            var paymentOrderId = response['payment-order-id'];
            if (paymentOrderId) {
                this.transactionSigningHelper.getTransactionInfo({
                    data: response,
                    asyncPollingOptions: {
                        pollInterval: this.widgetOptions.pollInterval,
                        maxRetries: 3,
                        pollUntilFn: this.isPaymentConfirmed,
                        complete$: this.gc$,
                    },
                    fetchFn: this.getPaymentProgressStatus.bind(this),
                    onSuccess: this.onTransactionSigningSuccess.bind(this, paymentOrderId),
                    onRejected: this.onTransactionSigningReject.bind(this, paymentOrderId),
                    onDeclined: this.onTransactionSigningDecline.bind(this),
                    onError: this.onTransactionSigningError.bind(this),
                });
            }
        };
        ReviewPaymentContainerComponent.prototype.onTransactionSigningSuccess = function (paymentOrderId) {
            this.paymentOrderHttpService
                .getPayment(paymentOrderId)
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(this.handlePaymentSubmit.bind(this));
        };
        ReviewPaymentContainerComponent.prototype.onTransactionSigningReject = function (paymentOrderId, _) {
            this.handleRejectedPayment(paymentOrderId);
        };
        ReviewPaymentContainerComponent.prototype.onTransactionSigningDecline = function (_d) {
            var status = _d.status;
            var header = this.widgetOptions.isDebitPayment ? reviewI18n.submitDebitFailure : reviewI18n.submitPaymentFailure;
            this.paymentStatus$.next(status);
            this.submitting$.next(false);
            this.paymentOrderHttpService.showNotification(false, { header: header });
        };
        ReviewPaymentContainerComponent.prototype.onTransactionSigningError = function (_d) {
            var status = _d.status;
            var header = this.widgetOptions.isDebitPayment ? reviewI18n.submitDebitFailure : reviewI18n.submitPaymentFailure;
            var errorMessage = status === 'COED' ? reviewI18n.submitPaymentApprovalFailureCOED : { header: header };
            this.submitting$.next(false);
            this.paymentStatus$.next(status === 'COED' ? 'COED' : 'ERROR');
            this.paymentOrderHttpService.showNotification(false, Object.assign({}, errorMessage));
        };
        ReviewPaymentContainerComponent.prototype.handleRejectedPayment = function (paymentOrderId) {
            var _this = this;
            this.paymentOrderHttpService
                .getPayment(paymentOrderId)
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(function (response) {
                if (response.reasonCode === 'LTBR') {
                    _this.paymentStatus$.next('LIMIT_BREACH');
                    _this.breachError = {
                        message: '',
                        breachReport: response.breachReports,
                    };
                }
                else {
                    var header = _this.widgetOptions.isDebitPayment
                        ? reviewI18n.submitDebitFailure
                        : reviewI18n.submitPaymentFailure;
                    _this.paymentOrderHttpService.showNotification(false, { header: header });
                    _this.paymentStatus$.next('ERROR');
                }
                _this.submitting$.next(false);
            });
        };
        ReviewPaymentContainerComponent.prototype.getPaymentProgressStatus = function (data) {
            return this.paymentOrderHttpService.getPaymentProgressStatus((data === null || data === void 0 ? void 0 : data['payment-order-id']) || '').pipe(operators.map(function (res) {
                if ((res === null || res === void 0 ? void 0 : res.progressStatus) === paymentOrder.PaymentOrderProgressStatusGet.ProgressStatusEnum.REJECTED &&
                    res.reasonCode === 'COED') {
                    res = Object.assign(Object.assign({}, res), { progressStatus: res.reasonCode });
                }
                return res;
            }), operators.pluck('progressStatus'));
        };
        ReviewPaymentContainerComponent.prototype.isPaymentConfirmed = function (status) {
            return !!status && status !== i2.ProgressStatus.CONFIRMATION_PENDING && status !== i2.ProgressStatus.SENDING;
        };
        ReviewPaymentContainerComponent.prototype.onHooksDone = function (approved, success) {
            if (success === void 0) { success = true; }
            if (success) {
                this.onSubmit(approved);
            }
            else {
                this.submitting$.next(false);
            }
        };
        ReviewPaymentContainerComponent.prototype.hasLimitBreach = function (response) {
            var _a;
            var isP2PLimitBreach = Object.values(P2PLimitReasonCodes).includes(response.reasonCode);
            return !!(response === null || response === void 0 ? void 0 : response.breachReport) || !!((_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.breachReport) || isP2PLimitBreach;
        };
        ReviewPaymentContainerComponent.prototype.showBreachModal = function () {
            this.showBreachDetails = true;
        };
        ReviewPaymentContainerComponent.prototype.getPaymentResponse = function () {
            return this.paymentResponse;
        };
        ReviewPaymentContainerComponent.prototype.hideBreachModal = function () {
            this.showBreachDetails = false;
        };
        ReviewPaymentContainerComponent.prototype.isTemplateSaved = function () {
            return this.saveTemplate;
        };
        ReviewPaymentContainerComponent.prototype.buildPaymentTemplateForm = function () {
            return this.formBuilder.group({
                templateName: ['', [i1.Validators.required, i2.noWhitespaceValidator]],
            });
        };
        ReviewPaymentContainerComponent.prototype.openTemplateModal = function () {
            this.paymentTemplateModalState.next(i2.ModalState.Preview);
        };
        ReviewPaymentContainerComponent.prototype.closeTemplateModal = function () {
            this.paymentTemplateModalState.next(i2.ModalState.Hidden);
            this.paymentTemplateForm.reset();
        };
        ReviewPaymentContainerComponent.prototype.submitPaymentTemplate = function (templateName) {
            var _this = this;
            if (templateName === void 0) { templateName = ''; }
            if (this.paymentOrderId) {
                var paymentOrderId = this.paymentOrderId;
                var name_1 = templateName || this.paymentTemplateForm.controls['templateName'].value;
                var templateObject = {
                    paymentOrderId: paymentOrderId,
                    name: name_1,
                };
                if (this.paymentTemplateForm.invalid) {
                    return;
                }
                this.savingTemplate$.next(true);
                this.paymentOrderHttpService
                    .postPaymentTemplate(templateObject)
                    .pipe(operators.takeUntil(this.gc$))
                    .subscribe(function () {
                    _this.saveTemplate = true;
                    _this.savingTemplate$.next(false);
                    _this.paymentOrderHttpService.showNotification(true, {
                        header: commonI18n.templateSaveSuccess(name_1),
                        headerContext: { name: name_1 },
                    });
                    _this.paymentTemplateForm.reset();
                    _this.paymentTemplateModalState.next(i2.ModalState.Hidden);
                    _this.eventBus.publish((_this.widgetOptions.successEventName || i2.defaultPaymentSuccessEventName), true);
                }, function () {
                    _this.paymentOrderHttpService.showNotification(false, {
                        header: commonI18n.templateSaveFailed,
                    });
                    _this.savingTemplate$.next(false);
                });
            }
        };
        ReviewPaymentContainerComponent.prototype.submitPayment = function (approved) {
            if (approved === void 0) { approved = false; }
            var hasHooks = this.createPaymentSetup.hooks && this.createPaymentSetup.hooks[i2.PaymentHooks.onSubmit];
            this.submitting$.next(true);
            if (hasHooks) {
                i2.triggerPaymentHook(this.createPaymentSetup.hooks, i2.PaymentHooks.onSubmit, this.onHooksDone.bind(this, approved), this.paymentForm);
            }
            else {
                this.onSubmit(approved);
            }
        };
        ReviewPaymentContainerComponent.prototype.getForexDetails = function (payment) {
            return i2.getForexDetailsFromPayment(payment);
        };
        ReviewPaymentContainerComponent.prototype.isApprovalEnabled = function () {
            return !!this.widgetOptions.enableApprovals && this.canApprove;
        };
        ReviewPaymentContainerComponent.prototype.isPaymentTemplateEnabled = function () {
            return !!this.widgetOptions.enableSavePaymentAsTemplate && this.enablePaymentTemplate;
        };
        ReviewPaymentContainerComponent.prototype.isNewPaymentEnabled = function () {
            return this.widgetOptions.enableNewPaymentButton !== false;
        };
        ReviewPaymentContainerComponent.prototype.discardPayment = function () {
            var _a, _b;
            if ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.isModalView) {
                (_b = this.modalService) === null || _b === void 0 ? void 0 : _b.closeModal();
            }
            else {
                this.resetPayment();
            }
        };
        ReviewPaymentContainerComponent.prototype.resetPayment = function () {
            this.showConfirmation = false;
            this.widgetOptions.paymentMode = i2.PaymentMode.CREATE_PAYMENT;
            this.stateService.resetForm();
            this.stateService.setPaymentState(i2.PaymentState.INITIAL);
            this.navigationService.form();
        };
        ReviewPaymentContainerComponent.prototype.toggleConfirmationDialog = function () {
            this.showConfirmation = !this.showConfirmation;
        };
        ReviewPaymentContainerComponent.prototype.showDiscardDialog = function () {
            return this.showConfirmation;
        };
        ReviewPaymentContainerComponent.prototype.isApprovalPending = function () {
            return this.approvalPending;
        };
        ReviewPaymentContainerComponent.prototype.isSubmitting$ = function () {
            return this.submitting$;
        };
        ReviewPaymentContainerComponent.prototype.getPaymentStatusType = function () {
            var _a;
            return ((_a = this.widgetOptions) === null || _a === void 0 ? void 0 : _a.paymentMode) === i2.PaymentMode.EDIT_PAYMENT
                ? i2.PaymentSubmitStatuses.PENDING_EDITED
                : this.isApprovalPending()
                    ? i2.PaymentSubmitStatuses.PENDING
                    : i2.PaymentSubmitStatuses.SUCCESS;
        };
        ReviewPaymentContainerComponent.prototype.getPaymentMessage = function () {
            return this.paymentMessage;
        };
        ReviewPaymentContainerComponent.prototype.getPurposeDescription = function (purpose) {
            var _a, _b;
            var purposes = (_a = this.paymentItem.inputFormFromSettings) === null || _a === void 0 ? void 0 : _a.purposesOfPayment;
            return (purposes === null || purposes === void 0 ? void 0 : purposes.length) ? (_b = purposes.find(function (item) { return item.code === purpose; })) === null || _b === void 0 ? void 0 : _b.description : '';
        };
        ReviewPaymentContainerComponent.prototype.doneEditing = function () {
            var _a;
            (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
        };
        ReviewPaymentContainerComponent.prototype.navigateToAfterSuccessPage = function () {
            this.navigationService.afterSuccess();
        };
        ReviewPaymentContainerComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
        };
        return ReviewPaymentContainerComponent;
    }());
    /** @nocollapse */ ReviewPaymentContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ReviewPaymentContainerComponent, deps: [{ token: i1__namespace$2.FormBuilder }, { token: i2__namespace.StateService }, { token: webSdk.PUBSUB }, { token: i2__namespace.NavigationService }, { token: CreatePaymentService }, { token: i2__namespace.RoutableModalService, optional: true }, { token: i2__namespace.PaymentOrderHttpService }, { token: CreatePaymentConfigSetupService }, { token: i2__namespace$2.TransactionSigningHelperService, optional: true }, { token: i2.BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ReviewPaymentContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ReviewPaymentContainerComponent, selector: "bb-review-payment", viewQueries: [{ propertyName: "alertContainer", first: true, predicate: ["alertContainer"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"position-relative\">\n  <ng-container\n    *ngTemplateOutlet=\"\n      reviewTemplate || (widgetOptions.reviewScreenType === reviewScreens.ADAPTED ? adaptedReviewTmpl : defaultTmpl);\n      context: {\n        $implicit: paymentItem,\n        status: paymentStatus$ | async,\n        isSubmitting: submitting$ | async,\n        methods: methods,\n        paymentConfig: selectedPaymentConfig$ | async,\n        breachError: breachError\n      }\n    \"\n  ></ng-container>\n</div>\n\n<ng-template\n  let-payment\n  let-paymentConfig=\"paymentConfig\"\n  let-status=\"status\"\n  let-methods=\"methods\"\n  let-errors=\"errors\"\n  #adaptedReviewTmpl\n>\n  <bb-adapted-review-container\n    [payment]=\"payment\"\n    [paymentConfig]=\"paymentConfig\"\n    [status]=\"status\"\n    [methods]=\"methods\"\n    [breachError]=\"breachError\"\n  ></bb-adapted-review-container>\n</ng-template>\n\n<ng-template\n  let-payment\n  let-paymentConfig=\"paymentConfig\"\n  let-status=\"status\"\n  let-methods=\"methods\"\n  let-isSubmitting=\"isSubmitting\"\n  let-breachError=\"breachError\"\n  #defaultTmpl\n>\n  <fieldset class=\"bb-fieldset bb-fieldset__no-outline\">\n    <bb-header-ui\n      *ngIf=\"header\"\n      data-role=\"page-title\"\n      headingClasses=\"bb-block bb-block--lg\"\n      headingType=\"h2\"\n      [heading]=\"header\"\n    ></bb-header-ui>\n    <div #alertContainer></div>\n    <ng-container *ngIf=\"payment\">\n      <div class=\"bb-block bb-block--md\" *ngIf=\"status\">\n        <bb-payord-status-card\n          [status]=\"methods.getPaymentStatusType()\"\n          [isDebitPayment]=\"widgetOptions.isDebitPayment\"\n          *ngIf=\"status === 'SUCCESS'\"\n        ></bb-payord-status-card>\n\n        <ng-container *ngIf=\"!!status && status !== 'SUCCESS'\">\n          <ng-container *ngIf=\"errors?.length; else noSpecificError\">\n            <ng-container *ngFor=\"let error of errors\">\n              <ng-container *ngIf=\"error.message; else noSpecificError\">\n                <bb-alert-ui title=\"\" (close)=\"(false)\" modifier=\"error\">\n                  <div data-role=\"failure-message\" class=\"bb-text-bold bb-text-default d-inline-flex\">\n                    <ng-container *ngIf=\"isErrorTitleDisplayed\">\n                      <span>\n                        <ng-container\n                          *ngIf=\"!widgetOptions.isDebitPayment\"\n                          i18n=\"@@initiate-payment.review.payment-failed-alert.title\"\n                          >Payment data error:</ng-container\n                        >\n                        <ng-container\n                          *ngIf=\"widgetOptions.isDebitPayment\"\n                          i18n=\"@@initiate-payment.review.debit-failed-alert.title\"\n                          >Debit data error:</ng-container\n                        > </span\n                      >&nbsp;\n                    </ng-container>\n                    <span>{{ $any(error)?.message }}</span>\n                  </div>\n                </bb-alert-ui>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #noSpecificError>\n            <ng-container *ngIf=\"genericError; else unknownError\">\n              <bb-alert-ui title=\"\" modifier=\"error\">\n                <div class=\"bb-text-bold bb-text-default\">\n                  <ng-container *ngIf=\"isErrorTitleDisplayed\">\n                    <span>\n                      <ng-container\n                        *ngIf=\"!widgetOptions.isDebitPayment\"\n                        i18n=\"@@initiate-payment-payments-generic-message-alert-title\"\n                        >Payment data error:</ng-container\n                      >\n                      <ng-container\n                        *ngIf=\"widgetOptions.isDebitPayment\"\n                        i18n=\"@@initiate-payment-debit-generic-message-alert-title\"\n                        >Debit data error:</ng-container\n                      >\n                    </span>\n                  </ng-container>\n                  <span>{{ genericError }}</span>\n                </div>\n              </bb-alert-ui>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #unknownError>\n            <ng-container *ngIf=\"status !== 'USER_DECLINED' && status !== 'LIMIT_BREACH' && status !== 'COED'\">\n              <div class=\"bb-stack__item bb-text-bold\">\n                <bb-alert-ui\n                  i18n-title=\"@@initiate-payment-review.payments-unknown-error-alert-title\"\n                  title=\"Server error: Unknown error occurred.\"\n                  modifier=\"error\"\n                >\n                </bb-alert-ui>\n              </div>\n            </ng-container>\n          </ng-template>\n\n          <ng-container *ngIf=\"status === 'USER_DECLINED' || status === 'LIMIT_BREACH' || status === 'COED'\">\n            <ng-container [ngSwitch]=\"status\">\n              <bb-alert-ui title=\"\" (close)=\"(false)\" modifier=\"error\" [ngSwitch]=\"status\">\n                <div class=\"bb-stack bb-text-default\" *ngSwitchCase=\"'LIMIT_BREACH'\">\n                  <div\n                    class=\"bb-stack__item bb-text-bold\"\n                    data-role=\"failure-message\"\n                    i18n=\"@@initiate-payment.review.limit-breach-error\"\n                  >\n                    Payment cannot be submitted because your limits have been breached\n                  </div>\n                  <button\n                    bbButton\n                    color=\"unstyled\"\n                    buttonSize=\"sm\"\n                    i18n=\"@@initiate-payment.review.limit-breach-error-see-details-button\"\n                    class=\"bb-stack__item bb-stack__item--push-right alert-link\"\n                    data-role=\"failure-see-details\"\n                    (click)=\"methods.showBreachModal()\"\n                  >\n                    See details\n                  </button>\n                </div>\n                <div *ngSwitchCase=\"'USER_DECLINED'\" data-role=\"failure-message\">\n                  <div\n                    i18n=\"@@initiate-payment.review.txn-signing-cancelled-error-title\"\n                    class=\"bb-text-bold bb-text-default\"\n                  >\n                    Payment not submitted\n                  </div>\n                  <div i18n=\"@@initiate-payment.review.txn-signing-cancelled-error-msg\" class=\"bb-text-default\">\n                    The transaction signing request was cancelled\n                  </div>\n                </div>\n                <div *ngSwitchCase=\"'COED'\" data-role=\"failure-message\">\n                  <div i18n=\"@@edit-payment.review.txn-signing-coed-error-title\" class=\"bb-text-bold bb-text-default\">\n                    Payment not submitted\n                  </div>\n                  <div i18n=\"@@edit-payment.review.txn-signing-coed-error-msg\" class=\"bb-text-default\">\n                    Payment is already edited by another user\n                  </div>\n                </div>\n              </bb-alert-ui>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div\n        *ngIf=\"payment?.isIntraLegalEntity || payment?.remittanceInfo?.urgent\"\n        class=\"bb-block bb-block--md bb-inline-stack bb-text-support\"\n      >\n        <div class=\"bb-inline-stack bb-inline-stack__item\" *ngIf=\"payment?.isIntraLegalEntity\">\n          <bb-icon-ui name=\"domain\"></bb-icon-ui>\n          <div class=\"bb-inline-stack__item\"></div>\n          <div\n            class=\"bb-inline-stack__item bb-text-bold bb-inline-stack__item--spacing-sm\"\n            i18n=\"@@initiate-payment.review.intra-company-transfer-label\"\n          >\n            Intracompany payment\n          </div>\n        </div>\n        <div *ngIf=\"payment?.remittanceInfo?.urgent\" class=\"bb-inline-stack bb-inline-stack__item\">\n          <bb-icon-ui name=\"priority-high\"></bb-icon-ui>\n          <div class=\"bb-inline-stack__item\"></div>\n          <div\n            class=\"bb-inline-stack__item bb-text-bold\"\n            data-role=\"payment-is-urgent\"\n            i18n=\"@@initiate-payment.review.urgent-transfer-label\"\n          >\n            Urgent payment\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-payment-account-details-card__container d-none d-md-flex\">\n        <div class=\"bb-text-bold w-md-50\">\n          <ng-container *ngTemplateOutlet=\"dynamicLabelInitiator\"></ng-container>\n        </div>\n        <div class=\"mr-3\">&nbsp;</div>\n        <div class=\"bb-text-bold w-md-50\">\n          <ng-container *ngTemplateOutlet=\"dynamicLabelCounterparty\"></ng-container>\n        </div>\n      </div>\n\n      <div\n        class=\"bb-payment-account-details-card__container bb-block bb-block--md break-word\"\n        [ngClass]=\"{\n          'flex-column-reverse flex-md-row-reverse': widgetOptions.isDebitPayment\n        }\"\n      >\n        <div class=\"w-md-50\">\n          <div class=\"bb-text-bold d-md-none\">\n            <ng-container\n              *ngTemplateOutlet=\"widgetOptions.isDebitPayment ? dynamicLabelCounterparty : dynamicLabelInitiator\"\n            ></ng-container>\n          </div>\n          <bb-debitor-details-card [details]=\"payment?.initiator\"></bb-debitor-details-card>\n        </div>\n\n        <div class=\"justify-content-center align-items-center d-md-flex d-none\">\n          <bb-icon-ui class=\"bb-account-transfer-icon\" name=\"arrow-forward\"></bb-icon-ui>\n        </div>\n        <div class=\"d-md-none\">&nbsp;</div>\n\n        <div class=\"w-md-50\">\n          <div class=\"bb-text-bold d-md-none\">\n            <ng-container\n              *ngTemplateOutlet=\"widgetOptions.isDebitPayment ? dynamicLabelInitiator : dynamicLabelCounterparty\"\n            ></ng-container>\n          </div>\n          <bb-creditor-details-card [details]=\"payment?.counterparty\"></bb-creditor-details-card>\n        </div>\n      </div>\n\n      <ng-template #dynamicLabelInitiator>\n        <ng-container *ngIf=\"widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            name=\"counterparty\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"Collect from\"\n            i18n-defaultLabel=\"@@initiate-payment.review.debit-counterparty-title\"\n            data-role=\"initiator-label\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n        <ng-container *ngIf=\"!widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            name=\"initiator\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"From\"\n            i18n-defaultLabel=\"@@initiate-payment.review.initiator-title\"\n            data-role=\"initiator-label\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n      </ng-template>\n\n      <ng-template #dynamicLabelCounterparty>\n        <ng-container *ngIf=\"widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            data-role=\"payee-label\"\n            name=\"initiator\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"Transfer to\"\n            i18n-defaultLabel=\"@@initiate-payment.review.debit-initiator-title\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n        <ng-container *ngIf=\"!widgetOptions.isDebitPayment\">\n          <bb-payord-dynamic-label\n            data-role=\"payee-label\"\n            name=\"counterparty\"\n            [config]=\"paymentConfig\"\n            defaultLabel=\"To\"\n            i18n-defaultLabel=\"@@initiate-payment.review.counterparty-title\"\n          ></bb-payord-dynamic-label>\n        </ng-container>\n      </ng-template>\n\n      <bb-payord-amount-details\n        [config]=\"paymentConfig\"\n        [details]=\"payment?.remittanceInfo\"\n        [transferFee]=\"payment?.transferFee\"\n        [chargeBearer]=\"payment?.chargeBearer\"\n        [forexDetails]=\"methods.getForexDetails(payment)\"\n      ></bb-payord-amount-details>\n\n      <bb-payord-counterparty-details\n        [details]=\"payment?.counterparty\"\n        [config]=\"paymentConfig\"\n        [isDebitPayment]=\"payment?.isDebitPayment\"\n      ></bb-payord-counterparty-details>\n\n      <div\n        *ngIf=\"\n          payment?.messageToBank ||\n          payment?.remittanceInfo?.description ||\n          payment?.remittanceInfo?.paymentReference ||\n          payment?.counterparty.messageToBank ||\n          payment?.counterparty.remittanceInformation ||\n          payment?.remittanceInfo?.purposeOfPayment ||\n          payment?.counterparty?.mandateIdentifier\n        \"\n      >\n        <hr />\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty?.mandateIdentifier\">\n          <div class=\"bb-text-bold\" data-role=\"mandate-identifier-label\">\n            <bb-payord-dynamic-label\n              name=\"mandateIdentifier\"\n              [config]=\"paymentConfig\"\n              parentName=\"counterparty\"\n              defaultLabel=\"Mandate identifier\"\n              i18n-defaultLabel=\"@@initiate-payment.review.mandate-identifier-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"mandate-identifier\">\n            {{ payment?.counterparty?.mandateIdentifier }}\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.paymentReference\">\n          <div class=\"bb-text-bold\" data-role=\"payment-reference-label\">\n            <bb-payord-dynamic-label\n              name=\"paymentReference\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Payment reference\"\n              i18n-defaultLabel=\"@@initiate-payment.review.payment-reference-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-reference\">\n            {{ payment?.remittanceInfo?.paymentReference }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.description\">\n          <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n            <bb-payord-dynamic-label\n              name=\"description\"\n              [config]=\"paymentConfig\"\n              parentName=\"remittanceInfo\"\n              defaultLabel=\"Description\"\n              i18n-defaultLabel=\"@@initiate-payment.review.description-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"payment-description\">\n            {{ payment?.remittanceInfo?.description }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.counterparty.remittanceInformation\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              *ngIf=\"!payment.isDebitPayment\"\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-beneficiary-title\"\n            ></bb-payord-dynamic-label>\n            <bb-payord-dynamic-label\n              *ngIf=\"payment.isDebitPayment\"\n              name=\"remittanceInformation\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to client\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-client-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div data-role=\"description\" class=\"break-word\">\n            {{ payment?.counterparty?.remittanceInformation }}\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.remittanceInfo?.purposeOfPayment\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              name=\"purposeOfPayment\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Purpose of payment\"\n              i18n-defaultLabel=\"@@initiate-payment.review.purpose-of-payment-title\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"bb-stack\">\n            <div data-role=\"purpose-of-payment\" class=\"bb-stack__item bb-stack__item--align-top\">\n              {{ payment?.remittanceInfo?.purposeOfPayment }}\n            </div>\n            <div data-role=\"purpose-of-payment-description\" class=\"bb-stack__item bb-text-support\">\n              {{ methods.getPurposeDescription(payment?.remittanceInfo?.purposeOfPayment) }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--md\" *ngIf=\"payment?.messageToBank || payment?.counterparty?.messageToBank\">\n          <div class=\"bb-text-bold\">\n            <bb-payord-dynamic-label\n              *ngIf=\"!payment.isDebitPayment\"\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to beneficiary bank\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-bank.label\"\n            ></bb-payord-dynamic-label>\n            <bb-payord-dynamic-label\n              *ngIf=\"payment.isDebitPayment\"\n              name=\"messageToBank\"\n              [config]=\"paymentConfig\"\n              defaultLabel=\"Message to client bank\"\n              i18n-defaultLabel=\"@@initiate-payment.review.message-to-client-bank.label\"\n            ></bb-payord-dynamic-label>\n          </div>\n          <div class=\"break-word\" data-role=\"message-to-bank\">\n            {{ payment?.counterparty?.messageToBank || payment?.messageToBank }}\n          </div>\n        </div>\n        <hr />\n      </div>\n\n      <bb-payord-schedule-details [paymentConfig]=\"paymentConfig\" [data]=\"payment?.schedule\">\n      </bb-payord-schedule-details>\n    </ng-container>\n  </fieldset>\n\n  <ng-container *ngIf=\"status !== 'SUCCESS'; else closureSwitch\">\n    <div class=\"bb-button-bar\" [class.bb-button-bar--reverse]=\"!widgetOptions?.isModalView\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        data-role=\"submit-button\"\n        (click)=\"methods.submit()\"\n        *ngIf=\"!methods.isApprovalEnabled()\"\n        [disabled]=\"isSubmitting\"\n        i18n=\"@@initiate-payment.review.submit-dropdown-btn\"\n      >\n        Submit\n      </button>\n      <div class=\"btn-group bb-button-bar__button\" data-role=\"button-group\" *ngIf=\"methods.isApprovalEnabled()\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          data-role=\"submit-button\"\n          [isLoading]=\"isSubmitting\"\n          (click)=\"methods.submit()\"\n          i18n=\"@@initiate-payment.review.submit-btn\"\n        >\n          Submit\n        </bb-load-button-ui>\n\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          btnColor=\"primary\"\n          icon=\"caret-down\"\n          data-role=\"dropdown-menu\"\n          position=\"top-right\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <button\n              role=\"menuitem\"\n              type=\"button\"\n              class=\"dropdown-item\"\n              data-role=\"bus-submit-and-approve-button\"\n              [disabled]=\"isSubmitting\"\n              (bbKeyboardClick)=\"methods.submit(true)\"\n              i18n=\"@@initiate-payment.review.submit-and-approve-btn\"\n            >\n              Submit and Approve\n            </button>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n      </div>\n      <button\n        class=\"bb-button-bar__button\"\n        bbButton\n        color=\"secondary\"\n        (click)=\"methods.edit()\"\n        [disabled]=\"isSubmitting\"\n        data-role=\"edit-button\"\n        i18n=\"@@initiate-payment.review.edit-btn\"\n      >\n        Edit\n      </button>\n\n      <button\n        bbButton\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        color=\"link\"\n        data-role=\"cancel-button\"\n        (click)=\"methods.toggleDiscardDialog()\"\n        [disabled]=\"isSubmitting\"\n        i18n=\"@@initiate-payment.review.discard-btn\"\n      >\n        Discard\n      </button>\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"isSubmitting\" class=\"position-absolute w-100 h-100 top-0 fixed-top bg-white\" [style.opacity]=\"0.6\">\n    <bb-loading-indicator-ui loaderSize=\"lg\" class=\"absolute-center\"></bb-loading-indicator-ui>\n  </div>\n\n  <ng-template #closureSwitch>\n    <ng-container *ngIf=\"widgetOptions?.isModalView; else newPayment\">\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          data-role=\"done-payment-edit-button\"\n          *ngIf=\"status\"\n          (click)=\"methods.doneEditing()\"\n          i18n=\"@@initiate-payment.review.btn-done-edit-payment.label\"\n        >\n          Done\n        </button>\n\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"export-payment-button\"\n          *ngIf=\"methods.getPaymentResponse()?.exportAllowed\"\n          [bbExportPdf]=\"methods.getPaymentResponse()?.id\"\n        >\n          <bb-icon-ui class=\"mr-2\" name=\"file-download\"></bb-icon-ui>\n          <span i18n=\"@@initiate-payment.review.btn-export-payment.label\">Export PDF</span>\n        </button>\n\n        <ng-container *ngIf=\"widgetOptions?.paymentMode !== paymentMode.EDIT_PAYMENT\">\n          <ng-container *ngTemplateOutlet=\"newPaymentButton; context: { color: 'secondary' }\"></ng-container>\n          <div class=\"bb-button-bar__button bb-button-bar__button--across\">\n            <ng-container *ngTemplateOutlet=\"saveTemplateButton; context: { color: 'link' }\"></ng-container>\n          </div>\n        </ng-container>\n      </div>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #newPayment>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <ng-container *ngTemplateOutlet=\"newPaymentButton; context: { color: 'primary' }\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"saveTemplateButton; context: { color: 'secondary' }\"></ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template #newPaymentButton let-color=\"color\">\n    <button\n      *ngIf=\"status && methods.isNewPaymentEnabled()\"\n      bbButton\n      [color]=\"color\"\n      class=\"bb-button-bar__button\"\n      data-role=\"new-payment-button\"\n      (click)=\"methods.reset()\"\n      [disabled]=\"methods.isSavingTemplate$() | async\"\n    >\n      <ng-container *ngIf=\"!widgetOptions.isDebitPayment\" i18n=\"@@initiate-payment.review.btn-group-new-payment.label\"\n        >New Payment</ng-container\n      >\n      <ng-container *ngIf=\"widgetOptions.isDebitPayment\" i18n=\"@@initiate-payment.review.btn-group-new-debit.label\"\n        >New debit request</ng-container\n      >\n    </button>\n  </ng-template>\n\n  <ng-template #saveTemplateButton let-color=\"color\">\n    <button\n      *ngIf=\"status === 'SUCCESS' && methods.isPaymentTemplateEnabled() && (createTemplatePermission$ | async)\"\n      bbButton\n      [color]=\"color\"\n      class=\"bb-button-bar__button\"\n      data-role=\"save-as-template-button\"\n      (click)=\"methods.openTemplateModal()\"\n      [disabled]=\"methods.isTemplateSaved()\"\n      i18n=\"@@initiate-payment.review.btn-group-save-as-template.label\"\n    >\n      Save as a template\n    </button>\n  </ng-template>\n\n  <bb-modal-ui\n    [isOpen]=\"methods.showDiscardDialog()\"\n    (cancel)=\"methods.toggleDiscardDialog()\"\n    (confirm)=\"methods.discard()\"\n  >\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <div data-role=\"modal-header\">\n          <h2 class=\"modal-title\" i18n=\"omni-payment-edit-review-discard-modal-title\">\n            Discard {widgetOptions?.paymentMode === paymentMode.EDIT_PAYMENT, select, true {edited} other {entered}}\n            data?\n          </h2>\n        </div>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container i18n=\"@@initiate-payment.review.discard-modal-content\">\n          Are you sure you want to exit and discard all changes? {widgetOptions?.paymentMode ===\n          paymentMode.EDIT_PAYMENT, select, true {Edited} other {Entered}} data will be lost.\n        </ng-container>\n      </ng-template>\n    </bb-modal-body-ui>\n\n    <bb-modal-footer-ui #modalFooterRef>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"danger\"\n            class=\"bb-button-bar__button\"\n            (click)=\"methods.discard()\"\n            data-role=\"discard-action-btn\"\n            i18n=\"@@initiate-payment.review.discard-modal-discard-btn\"\n          >\n            Discard\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"methods.toggleDiscardDialog()\"\n            data-role=\"cancel-action-btn\"\n            i18n=\"@@initiate-payment.review.discard-modal-cancel-btn\"\n          >\n            Not now\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <bb-breach-limit-details\n    [paymentDetails]=\"paymentItem\"\n    [error]=\"breachError\"\n    [isOpen]=\"showBreachDetails\"\n    (close)=\"hideBreachModal()\"\n  ></bb-breach-limit-details>\n</ng-template>\n\n<bb-payment-template-form\n  [paymentTemplateForm]=\"paymentTemplateForm\"\n  [isSavingTemplate]=\"savingTemplate$ | async\"\n  [modalState]=\"paymentTemplateModalState\"\n  (closeModal)=\"closeTemplateModal()\"\n  (openModal)=\"openTemplateModal()\"\n  (submitForm)=\"submitPaymentTemplate()\"\n></bb-payment-template-form>\n", components: [{ type: AdaptedReviewComponent, selector: "bb-adapted-review-container", inputs: ["payment", "status", "paymentConfig", "methods", "breachError"] }, { type: i5__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2__namespace.ӨPayordStatusComponent, selector: "bb-payord-status-card", inputs: ["status", "message", "isDebitPayment"] }, { type: i6__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace.ӨPaymentDebitorDetailsCardComponent, selector: "bb-debitor-details-card", inputs: ["details"] }, { type: i2__namespace.ӨPaymentCreditorDetailsCardComponent, selector: "bb-creditor-details-card", inputs: ["details"] }, { type: i2__namespace.ӨPayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2__namespace.ӨPayordAmountDetailsComponent, selector: "bb-payord-amount-details", inputs: ["config", "details", "transferFee", "chargeBearer", "forexDetails"] }, { type: i2__namespace.ӨPayordCounterpartyDetailsComponent, selector: "bb-payord-counterparty-details", inputs: ["config", "details", "isDebitPayment"] }, { type: i2__namespace.ӨPayordScheduleDetailsComponent, selector: "bb-payord-schedule-details", inputs: ["data", "paymentConfig"] }, { type: i13__namespace.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i2__namespace$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i13__namespace$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i13__namespace$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i13__namespace$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i13__namespace$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i2__namespace.ӨBreachLimitDetailsModalComponent, selector: "bb-breach-limit-details", inputs: ["paymentDetails", "error", "isOpen"], outputs: ["close"] }, { type: i2__namespace.ӨPaymentTemplateComponent, selector: "bb-payment-template-form", inputs: ["modalState", "paymentTemplateForm", "isSavingTemplate"], outputs: ["closeModal", "openModal", "submitForm"] }], directives: [{ type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i18__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i19__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2__namespace.ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }, { type: i13__namespace$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i13__namespace$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i13__namespace$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ReviewPaymentContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-review-payment',
                        templateUrl: 'review-payment.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$2.FormBuilder }, { type: i2__namespace.StateService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }, { type: i2__namespace.NavigationService }, { type: CreatePaymentService }, { type: i2__namespace.RoutableModalService, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.PaymentOrderHttpService }, { type: CreatePaymentConfigSetupService }, { type: i2__namespace$2.TransactionSigningHelperService, decorators: [{
                            type: i0.Optional
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i2.BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN]
                        }] }];
        }, propDecorators: { alertContainer: [{
                    type: i0.ViewChild,
                    args: ['alertContainer']
                }] } });

    var components = [
        ReviewPaymentContainerComponent,
        RemittanceDetailsComponent,
        CounterpartyDetailsComponent,
        InitiatorDetailsComponent,
        ScheduleDetailsComponent,
        CreditorAccountComponent,
        CreditorDetailsComponent,
        AdaptedReviewComponent,
    ];
    var uiAngComponentModules = [
        i13$1.ModalModule,
        i2$3.DropdownMenuModule,
        i19.KeyboardClickModule,
        notification.NotificationModule,
        i6.AlertModule,
        i5.HeaderModule,
        focus.FocusModule,
    ];
    var ReviewPaymentModule = /** @class */ (function () {
        function ReviewPaymentModule() {
        }
        return ReviewPaymentModule;
    }());
    /** @nocollapse */ ReviewPaymentModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ReviewPaymentModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ReviewPaymentModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ReviewPaymentModule, declarations: [ReviewPaymentContainerComponent,
            RemittanceDetailsComponent,
            CounterpartyDetailsComponent,
            InitiatorDetailsComponent,
            ScheduleDetailsComponent,
            CreditorAccountComponent,
            CreditorDetailsComponent,
            AdaptedReviewComponent], imports: [i14.CommonModule, i2.PaymentOrdersUiModule, i13$1.ModalModule,
            i2$3.DropdownMenuModule,
            i19.KeyboardClickModule,
            notification.NotificationModule,
            i6.AlertModule,
            i5.HeaderModule,
            focus.FocusModule], exports: [ReviewPaymentContainerComponent,
            RemittanceDetailsComponent,
            CounterpartyDetailsComponent,
            InitiatorDetailsComponent,
            ScheduleDetailsComponent,
            CreditorAccountComponent,
            CreditorDetailsComponent,
            AdaptedReviewComponent, i13$1.ModalModule,
            i2$3.DropdownMenuModule,
            i19.KeyboardClickModule,
            notification.NotificationModule,
            i6.AlertModule,
            i5.HeaderModule,
            focus.FocusModule] });
    /** @nocollapse */ ReviewPaymentModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ReviewPaymentModule, imports: [__spreadArray([i14.CommonModule, i2.PaymentOrdersUiModule], __read(uiAngComponentModules)), i13$1.ModalModule,
            i2$3.DropdownMenuModule,
            i19.KeyboardClickModule,
            notification.NotificationModule,
            i6.AlertModule,
            i5.HeaderModule,
            focus.FocusModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ReviewPaymentModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([i14.CommonModule, i2.PaymentOrdersUiModule], __read(uiAngComponentModules)),
                        exports: __spreadArray(__spreadArray([], __read(components)), __read(uiAngComponentModules)),
                        declarations: __spreadArray([], __read(components)),
                    }]
            }] });

    var HeaderDropdownComponent = /** @class */ (function () {
        function HeaderDropdownComponent() {
            /**
             * Array of representation of the link menu object
             */
            this.menu = [];
            /**
             * Flag to denote if the first link from buttons array should be used as default target
             */
            this.useFirstLinkAsDefault = false;
            /**
             * Flag to denote if the first link from buttons array should be used as default target
             */
            this.position = 'bottom-right';
            /**
             * Color of the button. Default `primary`
             */
            this.buttonColor = 'primary';
            /**
             * Size of the button. Allowed values are `sm` or `md`. Default `md`
             */
            this.buttonSize = 'md';
            /**
             * Event on item click
             */
            this.navigationAction = new i0.EventEmitter();
        }
        HeaderDropdownComponent.prototype.onClick = function (event, value) {
            event.preventDefault();
            this.navigationAction.emit(value);
        };
        return HeaderDropdownComponent;
    }());
    /** @nocollapse */ HeaderDropdownComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HeaderDropdownComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ HeaderDropdownComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HeaderDropdownComponent, selector: "bb-header-dropdown", inputs: { menu: "menu", useFirstLinkAsDefault: "useFirstLinkAsDefault", position: "position", buttonLabel: "buttonLabel", buttonIcon: "buttonIcon", buttonColor: "buttonColor", buttonSize: "buttonSize" }, outputs: { navigationAction: "navigationAction" }, ngImport: i0__namespace, template: "<div class=\"btn-group bb-button-bar__button\">\n  <button\n    *ngIf=\"useFirstLinkAsDefault || menu.length === 1\"\n    class=\"bb-button-bar__button\"\n    bbButton\n    [color]=\"buttonColor\"\n    [buttonSize]=\"buttonSize\"\n    (click)=\"onClick($event, menu[0].value)\"\n  >\n    <bb-icon-ui *ngIf=\"menu[0].iconName\" [name]=\"menu[0].iconName\"></bb-icon-ui>\n    <span>{{ menu[0].label }}</span>\n  </button>\n  <ng-container *ngIf=\"menu.length > 1\">\n    <bb-dropdown-menu-ui\n      container=\"body\"\n      icon=\"caret-down\"\n      [btnColor]=\"buttonColor\"\n      [buttonSize]=\"buttonSize\"\n      [position]=\"position\"\n      [class.btn-group]=\"useFirstLinkAsDefault\"\n    >\n      <ng-template bbDropdownLabel>\n        <span class=\"d-flex align-items-center\" *ngIf=\"!useFirstLinkAsDefault\">\n          <bb-icon-ui *ngIf=\"buttonIcon\" [name]=\"buttonIcon\"></bb-icon-ui>\n          <span>{{ buttonLabel }}</span>\n        </span>\n      </ng-template>\n\n      <ng-template bbDropdownMenuItem>\n        <ng-container *ngFor=\"let item of menu; let i = index\">\n          <ng-container *ngIf=\"!(useFirstLinkAsDefault && i === 0)\">\n            <a\n              rel=\"noopener\"\n              role=\"menuitem\"\n              href=\"#\"\n              class=\"dropdown-item\"\n              (click)=\"onClick($event, item.value)\"\n            >\n              <span class=\"bb-stack\">\n                <bb-icon-ui\n                  *ngIf=\"item.iconName\"\n                  class=\"bb-stack__item bb-stack__item--align-top\"\n                  [name]=\"item.iconName ? item.iconName : undefined\"\n                  color=\"dark\"\n                ></bb-icon-ui>\n                <div class=\"bb-stack__item\">\n                  <span>{{ item.label }}</span>\n                  <div\n                    *ngIf=\"item.description\"\n                    class=\"bb-subtitle bb-text-support mr-4\"\n                  >\n                    {{ item.description }}\n                  </div>\n                </div>\n              </span>\n            </a>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </ng-container>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i18__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace$3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2__namespace$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HeaderDropdownComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-header-dropdown',
                        templateUrl: './header-dropdown.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { menu: [{
                    type: i0.Input
                }], useFirstLinkAsDefault: [{
                    type: i0.Input
                }], position: [{
                    type: i0.Input
                }], buttonLabel: [{
                    type: i0.Input
                }], buttonIcon: [{
                    type: i0.Input
                }], buttonColor: [{
                    type: i0.Input
                }], buttonSize: [{
                    type: i0.Input
                }], navigationAction: [{
                    type: i0.Output
                }] } });

    var PaymentsHeaderComponent = /** @class */ (function () {
        function PaymentsHeaderComponent(conditions) {
            this.conditions = conditions;
            /**
             * Custom class name
             */
            this.customClassName = '';
            /**
             * Heading Classes
             */
            this.headingClasses = '';
            /**
             * Heading type (h1-h6)
             */
            this.headingType = '';
            /**
             * Heading
             */
            this.heading = '';
            /**
             * Show right side button / dropdown
             */
            this.showNavigation = true;
            /**
             * Array of representation of the link menu object
             */
            this.navigationItems = [];
            /**
             * Flag to denote if the first link from buttons array should be used as default target
             */
            this.useFirstLinkAsDefault = false;
            /**
             * Flag to denote if the first link from buttons array should be used as default target
             */
            this.position = 'bottom-right';
            /**
             * Color of the button. Default `primary`
             */
            this.buttonColor = 'primary';
            /**
             * Size of the button. Allowed values are `sm` or `md`. Default `md`
             */
            this.buttonSize = 'md';
            /**
             * Event on item click
             */
            this.navigationAction = new i0.EventEmitter();
        }
        PaymentsHeaderComponent.prototype.hasPermissions = function (item) {
            var hasPermissionsPromise = item.canView
                ? this.conditions.resolveEntitlements(item.canView)
                : rxjs.of(true);
            return rxjs.from(hasPermissionsPromise).pipe(operators.map(function (hasPermissions) { return (Object.assign({ hasPermissions: hasPermissions }, item)); }));
        };
        PaymentsHeaderComponent.prototype.menuSetup = function () {
            return rxjs.from(this.navigationItems).pipe(operators.concatMap(this.hasPermissions.bind(this)), operators.reduce(function (acc, _a) {
                var hasPermissions = _a.hasPermissions, item = __rest(_a, ["hasPermissions"]);
                if (hasPermissions) {
                    acc.push(Object.assign({}, item));
                }
                return acc;
            }, []));
        };
        PaymentsHeaderComponent.prototype.ngOnInit = function () {
            this.menuItems = this.menuSetup();
        };
        PaymentsHeaderComponent.prototype.onClick = function (value) {
            this.navigationAction.emit(value);
        };
        return PaymentsHeaderComponent;
    }());
    /** @nocollapse */ PaymentsHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsHeaderComponent, deps: [{ token: webSdk.CONDITIONS }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentsHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsHeaderComponent, selector: "bb-payments-header", inputs: { customClassName: "customClassName", headingClasses: "headingClasses", headingType: "headingType", heading: "heading", showNavigation: "showNavigation", navigationItems: "navigationItems", useFirstLinkAsDefault: "useFirstLinkAsDefault", position: "position", buttonLabel: "buttonLabel", buttonIcon: "buttonIcon", buttonColor: "buttonColor", buttonSize: "buttonSize" }, outputs: { navigationAction: "navigationAction" }, ngImport: i0__namespace, template: "<div class=\"heading-widget bb-heading-widget {{ customClassName }}\">\n  <bb-header-ui\n    headingClasses=\"bb-heading-widget__heading {{ headingClasses }}\"\n    [headingType]=\"headingType\"\n    [heading]=\"heading\"\n  ></bb-header-ui>\n\n  <ng-container *ngIf=\"showNavigation\">\n    <ng-container *ngIf=\"menuItems | async as menu\">\n      <ng-container *ngIf=\"menu.length\">\n        <bb-header-dropdown\n          [menu]=\"menu\"\n          [useFirstLinkAsDefault]=\"useFirstLinkAsDefault\"\n          [position]=\"position\"\n          [buttonLabel]=\"buttonLabel\"\n          [buttonIcon]=\"buttonIcon\"\n          [buttonColor]=\"buttonColor\"\n          [buttonSize]=\"buttonSize\"\n          (navigationAction)=\"onClick($event)\"\n        >\n        </bb-header-dropdown>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n", components: [{ type: i5__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: HeaderDropdownComponent, selector: "bb-header-dropdown", inputs: ["menu", "useFirstLinkAsDefault", "position", "buttonLabel", "buttonIcon", "buttonColor", "buttonSize"], outputs: ["navigationAction"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i14__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payments-header',
                        templateUrl: './payments-header.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.CONDITIONS]
                        }] }];
        }, propDecorators: { customClassName: [{
                    type: i0.Input
                }], headingClasses: [{
                    type: i0.Input
                }], headingType: [{
                    type: i0.Input
                }], heading: [{
                    type: i0.Input
                }], showNavigation: [{
                    type: i0.Input
                }], navigationItems: [{
                    type: i0.Input
                }], useFirstLinkAsDefault: [{
                    type: i0.Input
                }], position: [{
                    type: i0.Input
                }], buttonLabel: [{
                    type: i0.Input
                }], buttonIcon: [{
                    type: i0.Input
                }], buttonColor: [{
                    type: i0.Input
                }], buttonSize: [{
                    type: i0.Input
                }], navigationAction: [{
                    type: i0.Output
                }] } });

    var PaymentsHeaderModule = /** @class */ (function () {
        function PaymentsHeaderModule() {
        }
        return PaymentsHeaderModule;
    }());
    /** @nocollapse */ PaymentsHeaderModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsHeaderModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PaymentsHeaderModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsHeaderModule, declarations: [PaymentsHeaderComponent, HeaderDropdownComponent], imports: [i14.CommonModule,
            i5.HeaderModule,
            i2$3.DropdownMenuModule,
            i1$1.IconModule,
            router.RouterModule,
            i18.ButtonModule], exports: [PaymentsHeaderComponent] });
    /** @nocollapse */ PaymentsHeaderModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsHeaderModule, imports: [[
                i14.CommonModule,
                i5.HeaderModule,
                i2$3.DropdownMenuModule,
                i1$1.IconModule,
                router.RouterModule,
                i18.ButtonModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsHeaderModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [PaymentsHeaderComponent, HeaderDropdownComponent],
                        exports: [PaymentsHeaderComponent],
                        imports: [
                            i14.CommonModule,
                            i5.HeaderModule,
                            i2$3.DropdownMenuModule,
                            i1$1.IconModule,
                            router.RouterModule,
                            i18.ButtonModule,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BaseFields = BaseFields;
    exports.CreatePaymentConfigSetupService = CreatePaymentConfigSetupService;
    exports.CreatePaymentFieldsSetupService = CreatePaymentFieldsSetupService;
    exports.CreatePaymentFormComponent = CreatePaymentFormComponent;
    exports.CreatePaymentFormModule = CreatePaymentFormModule;
    exports.CreatePaymentService = CreatePaymentService;
    exports.PaymentsHeaderComponent = PaymentsHeaderComponent;
    exports.PaymentsHeaderModule = PaymentsHeaderModule;
    exports.ReviewPaymentContainerComponent = ReviewPaymentContainerComponent;
    exports.ReviewPaymentModule = ReviewPaymentModule;
    exports["ӨAdaptedReviewComponent"] = AdaptedReviewComponent;
    exports["ӨCounterpartyDetailsComponent"] = CounterpartyDetailsComponent;
    exports["ӨCreditorAccountComponent"] = CreditorAccountComponent;
    exports["ӨCreditorDetailsComponent"] = CreditorDetailsComponent;
    exports["ӨInitiatorDetailsComponent"] = InitiatorDetailsComponent;
    exports["ӨRemittanceDetailsComponent"] = RemittanceDetailsComponent;
    exports["ӨScheduleDetailsComponent"] = ScheduleDetailsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payments-collection-ui-ang.umd.js.map
