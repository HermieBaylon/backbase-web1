import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileTypeEnum } from '../model/models';
import { PortfolioPositionsList } from '../model/models';
import { PortfolioPositionsStream } from '../model/models';
import { SortingDirectionDescending } from '../model/models';
import { PortfolioSummaryInstrumentViewConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface ExportPortfolioPositionsRequestParams {
    ["portfolioId"]: string;
    ["fileType"]: FileTypeEnum;
}
export interface ListPortfolioPositionsRequestParams {
    ["portfolioId"]: string;
    ["from"]?: number;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: SortingDirectionDescending;
    ["currencyCode"]?: string;
}
export interface StreamPortfolioPositionsRequestParams {
    ["portfolioId"]: string;
    ["cursor"]?: string;
    ["size"]?: number;
    ["search"]?: string;
    ["currencyCode"]?: string;
}
export declare class PortfolioPositionsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PortfolioSummaryInstrumentViewConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PortfolioSummaryInstrumentViewConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<Blob>;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<Blob>>;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<Blob>>;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<Blob>;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<HttpResponse<Blob>>;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<HttpEvent<Blob>>;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    exportPortfolioPositions(requestParameters: ExportPortfolioPositionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    exportPortfolioPositionsUrl(requestParameters: ExportPortfolioPositionsRequestParams): string;
    listPortfolioPositions(requestParameters: ListPortfolioPositionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PortfolioPositionsList>;
    listPortfolioPositions(requestParameters: ListPortfolioPositionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PortfolioPositionsList>>;
    listPortfolioPositions(requestParameters: ListPortfolioPositionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PortfolioPositionsList>>;
    listPortfolioPositionsUrl(requestParameters: ListPortfolioPositionsRequestParams): string;
    streamPortfolioPositions(requestParameters: StreamPortfolioPositionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PortfolioPositionsStream>;
    streamPortfolioPositions(requestParameters: StreamPortfolioPositionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PortfolioPositionsStream>>;
    streamPortfolioPositions(requestParameters: StreamPortfolioPositionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PortfolioPositionsStream>>;
    streamPortfolioPositionsUrl(requestParameters: StreamPortfolioPositionsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PortfolioPositionsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PortfolioPositionsHttpService>;
}
