import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const DirectionDefaultDesc = {
    ASC: 'ASC',
    DESC: 'DESC'
};

const FileTypeEnum = {
    CSV: 'CSV',
    XLSX: 'XLSX'
};

const SortingDirectionDescending = {
    ASC: 'ASC',
    DESC: 'DESC'
};

const PORTFOLIO_SUMMARY_INSTRUMENT_VIEW_BASE_PATH = new InjectionToken('PORTFOLIO_SUMMARY_INSTRUMENT_VIEW_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PortfolioSummaryInstrumentViewConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PortfolioSummaryInstrumentViewConfiguration');

class PortfolioSummaryInstrumentViewApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PortfolioSummaryInstrumentViewApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PortfolioSummaryInstrumentViewApiModule,
            providers: [{ provide: PortfolioSummaryInstrumentViewConfiguration, useFactory: configurationFactory }]
        };
    }
}
PortfolioSummaryInstrumentViewApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioSummaryInstrumentViewApiModule, deps: [{ token: PortfolioSummaryInstrumentViewApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PortfolioSummaryInstrumentViewConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PortfolioSummaryInstrumentViewApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioSummaryInstrumentViewApiModule });
PortfolioSummaryInstrumentViewApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioSummaryInstrumentViewApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioSummaryInstrumentViewApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PortfolioSummaryInstrumentViewApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PortfolioSummaryInstrumentViewConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class InstrumentViewHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PortfolioSummaryInstrumentViewConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getInstrumentChartDataByPositionId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _positionID = requestParameters["positionID"];
        if (_positionID === null || _positionID === undefined) {
            throw new Error('Required parameter positionID was null or undefined when calling getInstrumentChartDataByPositionId.');
        }
        const _fromDate = requestParameters["fromDate"];
        if (_fromDate === null || _fromDate === undefined) {
            throw new Error('Required parameter fromDate was null or undefined when calling getInstrumentChartDataByPositionId.');
        }
        const _toDate = requestParameters["toDate"];
        if (_toDate === null || _toDate === undefined) {
            throw new Error('Required parameter toDate was null or undefined when calling getInstrumentChartDataByPositionId.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/positions/${encodeURIComponent(String(_positionID))}/instruments/charts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getInstrumentChartDataByPositionIdUrl(requestParameters) {
        const _positionID = requestParameters["positionID"];
        if (_positionID === null || _positionID === undefined) {
            throw new Error('Required parameter positionID was null or undefined when calling getInstrumentChartDataByPositionId.');
        }
        const _fromDate = requestParameters["fromDate"];
        if (_fromDate === null || _fromDate === undefined) {
            throw new Error('Required parameter fromDate was null or undefined when calling getInstrumentChartDataByPositionId.');
        }
        const _toDate = requestParameters["toDate"];
        if (_toDate === null || _toDate === undefined) {
            throw new Error('Required parameter toDate was null or undefined when calling getInstrumentChartDataByPositionId.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/positions/${encodeURIComponent(String(_positionID))}/instruments/charts${queryString ? `?${queryString}` : ''}`;
    }
    getInstrumentViewByPositionId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _positionID = requestParameters["positionID"];
        if (_positionID === null || _positionID === undefined) {
            throw new Error('Required parameter positionID was null or undefined when calling getInstrumentViewByPositionId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/positions/${encodeURIComponent(String(_positionID))}/instruments/views`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getInstrumentViewByPositionIdUrl(requestParameters) {
        const _positionID = requestParameters["positionID"];
        if (_positionID === null || _positionID === undefined) {
            throw new Error('Required parameter positionID was null or undefined when calling getInstrumentViewByPositionId.');
        }
        return `${this.configuration.basePath}/client-api/v1/positions/${encodeURIComponent(String(_positionID))}/instruments/views`;
    }
}
InstrumentViewHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: InstrumentViewHttpService, deps: [{ token: i1.HttpClient }, { token: PORTFOLIO_SUMMARY_INSTRUMENT_VIEW_BASE_PATH, optional: true }, { token: PortfolioSummaryInstrumentViewConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
InstrumentViewHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: InstrumentViewHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: InstrumentViewHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PORTFOLIO_SUMMARY_INSTRUMENT_VIEW_BASE_PATH]
                }] }, { type: PortfolioSummaryInstrumentViewConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const InstrumentViewHttpServiceGetInstrumentChartDataByPositionIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/positions/{positionID}/instruments/charts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "chartData": [{
                            "date": "2020-01-01",
                            "price": 125.01,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-02-01",
                            "price": 129.04,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-03-01",
                            "price": 134.18,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-04-01",
                            "price": 131.4,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-05-01",
                            "price": 120.88,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-06-01",
                            "price": 112.82,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-07-01",
                            "price": 115.54,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-08-01",
                            "price": 110.34,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-09-01",
                            "price": 106.84,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-10-01",
                            "price": 108.22,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-11-01",
                            "price": 116.5,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-12-01",
                            "price": 114.97,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-01-01",
                            "price": 124.4,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-02-01",
                            "price": 120.71,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-03-01",
                            "price": 116.6,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-04-01",
                            "price": 111.2,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-05-01",
                            "price": 115.32,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-06-01",
                            "price": 108.77,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-07-01",
                            "price": 114.95,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-08-01",
                            "price": 119.03,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-09-01",
                            "price": 118.69,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-10-01",
                            "price": 116.32,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-11-01",
                            "price": 115.97,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-12-01",
                            "price": 119.49,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-01-01",
                            "price": 118.64,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-02-01",
                            "price": 113.85,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-03-01",
                            "price": 115.17,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-04-01",
                            "price": 116.03,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-05-01",
                            "price": 116.59,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-06-01",
                            "price": 119.05,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-07-01",
                            "price": 122.72,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-08-01",
                            "price": 123.08,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-09-01",
                            "price": 122.94,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-10-01",
                            "price": 122.25,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-11-01",
                            "price": 123.75,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-12-01",
                            "price": 124.3,
                            "currency": "USD",
                            "type": "closing"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const InstrumentViewHttpServiceGetInstrumentViewByPositionIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/positions/{positionID}/instruments/views",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "f6739265-aed1-47b6-8423-63518ce9caa5",
                    "name": "Apple",
                    "code": "US0378331005",
                    "absolutePerformance": 1.46,
                    "relativePerformance": 1.2,
                    "price": 123.24,
                    "currency": "USD",
                    "pricePerformance": 7.81,
                    "pricePerformanceAbs": {
                        "amount": 1.48,
                        "currency": "USD"
                    },
                    "assetClassName": "Equity",
                    "subAssetClassName": "Tech Sector",
                    "ticker": "AAPL",
                    "exchange": "NASDAQ",
                    "countryCode": "USA",
                    "about": {
                        "about": "about",
                        "address": "address",
                        "phoneNumber": "phoneNumber",
                        "link": "link"
                    },
                    "keyStatistics": {
                        "country": "United States of America",
                        "purchasePrice": 118.34,
                        "exchangeRate": 1.21,
                        "unrealizedPLPct": 4.14,
                        "unrealizedPL": 4.9,
                        "changeInNetAssetValue": 7.81,
                        "fundStatus": "open-ended fund",
                        "totalAssets": 134.3,
                        "trailingTwelveMonthsYield": 1.4,
                        "oneYearReturn": 68.97,
                        "effectiveDuration": 4.51,
                        "portfolioAssetsAllocation": "Equity",
                        "quantity": 187,
                        "turnover": 30,
                        "creditRating": "AAA",
                        "priceToEarningsRatio": 37.59,
                        "estPriceToEarningsRatio": 31.06,
                        "priceToEarningsToGrowthRatio": 3.09,
                        "sharesOutstanding": 17.002,
                        "priceToBookRatio": 32.07,
                        "earningsPerShare": 1.39,
                        "dividendYield": 0.66,
                        "lastDividendReported": 0.2,
                        "nextEarningsAnnouncement": "2021-01-26",
                        "coupon": 5.63,
                        "accruedInterestOnBond": 5.52,
                        "maturity": "2028-01-04",
                        "yieldToMaturity": 0,
                        "duration": 7.63,
                        "couponFrequency": "annually",
                        "additionalKeyStatistics": {
                            "purchasePrice": "118.34",
                            "totalAssets": "50",
                            "coupon": "false"
                        }
                    },
                    "additions": {
                        "someKey": "someValue"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const InstrumentViewHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/positions/{positionID}/instruments/charts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "chartData": [{
                            "date": "2020-01-01",
                            "price": 125.01,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-02-01",
                            "price": 129.04,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-03-01",
                            "price": 134.18,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-04-01",
                            "price": 131.4,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-05-01",
                            "price": 120.88,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-06-01",
                            "price": 112.82,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-07-01",
                            "price": 115.54,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-08-01",
                            "price": 110.34,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-09-01",
                            "price": 106.84,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-10-01",
                            "price": 108.22,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-11-01",
                            "price": 116.5,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2020-12-01",
                            "price": 114.97,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-01-01",
                            "price": 124.4,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-02-01",
                            "price": 120.71,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-03-01",
                            "price": 116.6,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-04-01",
                            "price": 111.2,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-05-01",
                            "price": 115.32,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-06-01",
                            "price": 108.77,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-07-01",
                            "price": 114.95,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-08-01",
                            "price": 119.03,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-09-01",
                            "price": 118.69,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-10-01",
                            "price": 116.32,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-11-01",
                            "price": 115.97,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2021-12-01",
                            "price": 119.49,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-01-01",
                            "price": 118.64,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-02-01",
                            "price": 113.85,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-03-01",
                            "price": 115.17,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-04-01",
                            "price": 116.03,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-05-01",
                            "price": 116.59,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-06-01",
                            "price": 119.05,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-07-01",
                            "price": 122.72,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-08-01",
                            "price": 123.08,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-09-01",
                            "price": 122.94,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-10-01",
                            "price": 122.25,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-11-01",
                            "price": 123.75,
                            "currency": "USD",
                            "type": "closing"
                        }, {
                            "date": "2022-12-01",
                            "price": 124.3,
                            "currency": "USD",
                            "type": "closing"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/positions/{positionID}/instruments/views",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "f6739265-aed1-47b6-8423-63518ce9caa5",
                    "name": "Apple",
                    "code": "US0378331005",
                    "absolutePerformance": 1.46,
                    "relativePerformance": 1.2,
                    "price": 123.24,
                    "currency": "USD",
                    "pricePerformance": 7.81,
                    "pricePerformanceAbs": {
                        "amount": 1.48,
                        "currency": "USD"
                    },
                    "assetClassName": "Equity",
                    "subAssetClassName": "Tech Sector",
                    "ticker": "AAPL",
                    "exchange": "NASDAQ",
                    "countryCode": "USA",
                    "about": {
                        "about": "about",
                        "address": "address",
                        "phoneNumber": "phoneNumber",
                        "link": "link"
                    },
                    "keyStatistics": {
                        "country": "United States of America",
                        "purchasePrice": 118.34,
                        "exchangeRate": 1.21,
                        "unrealizedPLPct": 4.14,
                        "unrealizedPL": 4.9,
                        "changeInNetAssetValue": 7.81,
                        "fundStatus": "open-ended fund",
                        "totalAssets": 134.3,
                        "trailingTwelveMonthsYield": 1.4,
                        "oneYearReturn": 68.97,
                        "effectiveDuration": 4.51,
                        "portfolioAssetsAllocation": "Equity",
                        "quantity": 187,
                        "turnover": 30,
                        "creditRating": "AAA",
                        "priceToEarningsRatio": 37.59,
                        "estPriceToEarningsRatio": 31.06,
                        "priceToEarningsToGrowthRatio": 3.09,
                        "sharesOutstanding": 17.002,
                        "priceToBookRatio": 32.07,
                        "earningsPerShare": 1.39,
                        "dividendYield": 0.66,
                        "lastDividendReported": 0.2,
                        "nextEarningsAnnouncement": "2021-01-26",
                        "coupon": 5.63,
                        "accruedInterestOnBond": 5.52,
                        "maturity": "2028-01-04",
                        "yieldToMaturity": 0,
                        "duration": 7.63,
                        "couponFrequency": "annually",
                        "additionalKeyStatistics": {
                            "purchasePrice": "118.34",
                            "totalAssets": "50",
                            "coupon": "false"
                        }
                    },
                    "additions": {
                        "someKey": "someValue"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class PortfolioPositionsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PortfolioSummaryInstrumentViewConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    exportPortfolioPositions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _portfolioId = requestParameters["portfolioId"];
        if (_portfolioId === null || _portfolioId === undefined) {
            throw new Error('Required parameter portfolioId was null or undefined when calling exportPortfolioPositions.');
        }
        const _fileType = requestParameters["fileType"];
        if (_fileType === null || _fileType === undefined) {
            throw new Error('Required parameter fileType was null or undefined when calling exportPortfolioPositions.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_fileType !== undefined && _fileType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fileType, 'fileType');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'text/csv',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/portfolios/${encodeURIComponent(String(_portfolioId))}/positions/export`, {
            params: queryParameters,
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    exportPortfolioPositionsUrl(requestParameters) {
        const _portfolioId = requestParameters["portfolioId"];
        if (_portfolioId === null || _portfolioId === undefined) {
            throw new Error('Required parameter portfolioId was null or undefined when calling exportPortfolioPositions.');
        }
        const _fileType = requestParameters["fileType"];
        if (_fileType === null || _fileType === undefined) {
            throw new Error('Required parameter fileType was null or undefined when calling exportPortfolioPositions.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_fileType !== undefined && _fileType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fileType, 'fileType');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/portfolios/${encodeURIComponent(String(_portfolioId))}/positions/export${queryString ? `?${queryString}` : ''}`;
    }
    listPortfolioPositions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _portfolioId = requestParameters["portfolioId"];
        if (_portfolioId === null || _portfolioId === undefined) {
            throw new Error('Required parameter portfolioId was null or undefined when calling listPortfolioPositions.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        const _currencyCode = requestParameters["currencyCode"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        if (_currencyCode !== undefined && _currencyCode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currencyCode, 'currencyCode');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/portfolios/${encodeURIComponent(String(_portfolioId))}/positions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    listPortfolioPositionsUrl(requestParameters) {
        const _portfolioId = requestParameters["portfolioId"];
        if (_portfolioId === null || _portfolioId === undefined) {
            throw new Error('Required parameter portfolioId was null or undefined when calling listPortfolioPositions.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        const _currencyCode = requestParameters["currencyCode"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        if (_currencyCode !== undefined && _currencyCode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currencyCode, 'currencyCode');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/portfolios/${encodeURIComponent(String(_portfolioId))}/positions${queryString ? `?${queryString}` : ''}`;
    }
    streamPortfolioPositions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _portfolioId = requestParameters["portfolioId"];
        if (_portfolioId === null || _portfolioId === undefined) {
            throw new Error('Required parameter portfolioId was null or undefined when calling streamPortfolioPositions.');
        }
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _search = requestParameters["search"];
        const _currencyCode = requestParameters["currencyCode"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_search !== undefined && _search !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
        }
        if (_currencyCode !== undefined && _currencyCode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currencyCode, 'currencyCode');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/portfolios/${encodeURIComponent(String(_portfolioId))}/positions/stream`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    streamPortfolioPositionsUrl(requestParameters) {
        const _portfolioId = requestParameters["portfolioId"];
        if (_portfolioId === null || _portfolioId === undefined) {
            throw new Error('Required parameter portfolioId was null or undefined when calling streamPortfolioPositions.');
        }
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _search = requestParameters["search"];
        const _currencyCode = requestParameters["currencyCode"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_search !== undefined && _search !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _search, 'search');
        }
        if (_currencyCode !== undefined && _currencyCode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currencyCode, 'currencyCode');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/portfolios/${encodeURIComponent(String(_portfolioId))}/positions/stream${queryString ? `?${queryString}` : ''}`;
    }
}
PortfolioPositionsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioPositionsHttpService, deps: [{ token: i1.HttpClient }, { token: PORTFOLIO_SUMMARY_INSTRUMENT_VIEW_BASE_PATH, optional: true }, { token: PortfolioSummaryInstrumentViewConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PortfolioPositionsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioPositionsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PortfolioPositionsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PORTFOLIO_SUMMARY_INSTRUMENT_VIEW_BASE_PATH]
                }] }, { type: PortfolioSummaryInstrumentViewConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PortfolioPositionsHttpServiceExportPortfolioPositionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/portfolios/{portfolioId}/positions/export",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PortfolioPositionsHttpServiceListPortfolioPositionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/portfolios/{portfolioId}/positions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "positions": [{
                            "id": "51c9d6e7-c3fa-40e2-a500-4b4e2f11cbd3",
                            "instrument": {
                                "id": "6163a37e-6148-46ac-bd46-f62f563dfa7e",
                                "name": "Apples and Pears",
                                "code": "UAPL",
                                "ticker": "UAPL",
                                "exchange": "NASDAQ",
                                "currency": "UAH",
                                "available": true,
                                "assetClass": {
                                    "id": "6153577f-ad4c-47a4-bab2-b2e7c7b172cd",
                                    "name": "Equities"
                                }
                            },
                            "quantity": 120,
                            "price": {
                                "currency": "UAH",
                                "amount": 1030
                            },
                            "exchangeRate": 0.99,
                            "valuation": {
                                "currency": "USD",
                                "amount": 1028
                            },
                            "accruedInterest": {
                                "amount": 12,
                                "currency": "USD"
                            },
                            "costPrice": {
                                "amount": 1001,
                                "currency": "UAH"
                            },
                            "costExchangeRate": 1.01,
                            "unrealizedPL": {
                                "amount": 0.2,
                                "currency": "USD"
                            },
                            "unrealizedPLPct": 0.02,
                            "assetClassPct": 0.4,
                            "portfolioPct": 0.33,
                            "country": {
                                "id": "87a87cfc-81a2-4193-aafb-fa08e699ba70",
                                "name": "Ukraine",
                                "code": "UA"
                            },
                            "additions": {
                                "someKey": "someValue"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PortfolioPositionsHttpServiceStreamPortfolioPositionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/portfolios/{portfolioId}/positions/stream",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "cursor": "554e02e5-67fb-4434-9c97-91fde8ec3ce4",
                    "hasMoreItems": false,
                    "positions": [{
                            "id": "554e02e5-67fb-4434-9c97-91fde8ec3ce4",
                            "region": {
                                "id": "96821684-70c0-46a9-8e05-2c1f0526cdd9",
                                "name": "Europe"
                            },
                            "country": {
                                "id": "51a95a45-63e0-4e43-9619-8ffb679f5d9b",
                                "name": "Ukraine",
                                "code": "UA"
                            },
                            "instrument": {
                                "id": "3e35104b-03e9-42be-b58f-8ee5d23d6ca8",
                                "name": "Apples and Plums",
                                "ticker": "UAPL",
                                "exchange": "NASDAQ",
                                "assetClass": {
                                    "id": "6153577f-ad4c-47a4-bab2-b2e7c7b172cd",
                                    "name": "Equities"
                                }
                            },
                            "assetClassPct": 0.24,
                            "valuation": {
                                "amount": 43630,
                                "currency": "USD"
                            },
                            "additions": {
                                "someKey": "someValue"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PortfolioPositionsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/portfolios/{portfolioId}/positions/export",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/portfolios/{portfolioId}/positions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "positions": [{
                            "id": "51c9d6e7-c3fa-40e2-a500-4b4e2f11cbd3",
                            "instrument": {
                                "id": "6163a37e-6148-46ac-bd46-f62f563dfa7e",
                                "name": "Apples and Pears",
                                "code": "UAPL",
                                "ticker": "UAPL",
                                "exchange": "NASDAQ",
                                "currency": "UAH",
                                "available": true,
                                "assetClass": {
                                    "id": "6153577f-ad4c-47a4-bab2-b2e7c7b172cd",
                                    "name": "Equities"
                                }
                            },
                            "quantity": 120,
                            "price": {
                                "currency": "UAH",
                                "amount": 1030
                            },
                            "exchangeRate": 0.99,
                            "valuation": {
                                "currency": "USD",
                                "amount": 1028
                            },
                            "accruedInterest": {
                                "amount": 12,
                                "currency": "USD"
                            },
                            "costPrice": {
                                "amount": 1001,
                                "currency": "UAH"
                            },
                            "costExchangeRate": 1.01,
                            "unrealizedPL": {
                                "amount": 0.2,
                                "currency": "USD"
                            },
                            "unrealizedPLPct": 0.02,
                            "assetClassPct": 0.4,
                            "portfolioPct": 0.33,
                            "country": {
                                "id": "87a87cfc-81a2-4193-aafb-fa08e699ba70",
                                "name": "Ukraine",
                                "code": "UA"
                            },
                            "additions": {
                                "someKey": "someValue"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/portfolios/{portfolioId}/positions/stream",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "cursor": "554e02e5-67fb-4434-9c97-91fde8ec3ce4",
                    "hasMoreItems": false,
                    "positions": [{
                            "id": "554e02e5-67fb-4434-9c97-91fde8ec3ce4",
                            "region": {
                                "id": "96821684-70c0-46a9-8e05-2c1f0526cdd9",
                                "name": "Europe"
                            },
                            "country": {
                                "id": "51a95a45-63e0-4e43-9619-8ffb679f5d9b",
                                "name": "Ukraine",
                                "code": "UA"
                            },
                            "instrument": {
                                "id": "3e35104b-03e9-42be-b58f-8ee5d23d6ca8",
                                "name": "Apples and Plums",
                                "ticker": "UAPL",
                                "exchange": "NASDAQ",
                                "assetClass": {
                                    "id": "6153577f-ad4c-47a4-bab2-b2e7c7b172cd",
                                    "name": "Equities"
                                }
                            },
                            "assetClassPct": 0.24,
                            "valuation": {
                                "amount": 43630,
                                "currency": "USD"
                            },
                            "additions": {
                                "someKey": "someValue"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, DirectionDefaultDesc, FileTypeEnum, InstrumentViewHttpService, InstrumentViewHttpServiceGetInstrumentChartDataByPositionIdMocksProvider, InstrumentViewHttpServiceGetInstrumentViewByPositionIdMocksProvider, InstrumentViewHttpServiceMocksProvider, PORTFOLIO_SUMMARY_INSTRUMENT_VIEW_BASE_PATH, PortfolioPositionsHttpService, PortfolioPositionsHttpServiceExportPortfolioPositionsMocksProvider, PortfolioPositionsHttpServiceListPortfolioPositionsMocksProvider, PortfolioPositionsHttpServiceMocksProvider, PortfolioPositionsHttpServiceStreamPortfolioPositionsMocksProvider, PortfolioSummaryInstrumentViewApiModule, PortfolioSummaryInstrumentViewConfiguration, SortingDirectionDescending };
//# sourceMappingURL=backbase-portfolio-summary-instrument-view-http-ang.js.map
