import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BreachableOperationResponse } from '../model/models';
import { CreateLimitRequestBody } from '../model/models';
import { CurrencyGetResponseBody } from '../model/models';
import { CurrentLimitsConsumptionsRetrievalPostRequestBody } from '../model/models';
import { LimitApprovalDetailsResponse } from '../model/models';
import { LimitApprovalRequest } from '../model/models';
import { LimitApprovalResponse } from '../model/models';
import { LimitByUuidPutResponseBody } from '../model/models';
import { LimitConsumption } from '../model/models';
import { LimitsPostResponseBody } from '../model/models';
import { LimitsRetrievalPostRequestBody } from '../model/models';
import { LimitsRetrievalPostResponseBody } from '../model/models';
import { ListGlobalLimitsResponseBody } from '../model/models';
import { PeriodicLimitSoftCheckPostRequestBody } from '../model/models';
import { SupportedPeriodsGetResponseBody } from '../model/models';
import { TransactionalLimitSoftCheckPostRequestBody } from '../model/models';
import { UpdateLimitRequestBody } from '../model/models';
import { UpsertGlobalLimitsRequestBody } from '../model/models';
import { UpsertGlobalLimitsResponseBody } from '../model/models';
import { LimitConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetApprovalsRequestParams {
    ["approvalId"]: string;
}
export interface GetBreachableOperationByPaymentRefRequestParams {
    ["paymentRef"]: string;
}
export interface PostCurrentLimitsConsumptionsRetrievalRequestParams {
    ["currentLimitsConsumptionsRetrievalPostRequestBody"]?: CurrentLimitsConsumptionsRetrievalPostRequestBody;
}
export interface PostLimitsRequestParams {
    ["createLimitRequestBody"]?: CreateLimitRequestBody;
}
export interface PostLimitsRetrievalRequestParams {
    ["limitsRetrievalPostRequestBody"]?: LimitsRetrievalPostRequestBody;
}
export interface PostPeriodicLimitSoftCheckRequestParams {
    ["periodicLimitSoftCheckPostRequestBody"]?: PeriodicLimitSoftCheckPostRequestBody;
}
export interface PostTransactionalLimitSoftCheckRequestParams {
    ["transactionalLimitSoftCheckPostRequestBody"]?: TransactionalLimitSoftCheckPostRequestBody;
}
export interface PutApprovalsRequestParams {
    ["approvalId"]: string;
    ["limitApprovalRequest"]?: LimitApprovalRequest;
}
export interface PutGlobalLimitsRequestParams {
    ["upsertGlobalLimitsRequestBody"]?: UpsertGlobalLimitsRequestBody;
}
export interface PutLimitByUuidRequestParams {
    ["uuid"]: string;
    ["updateLimitRequestBody"]?: UpdateLimitRequestBody;
}
export declare class LimitsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: LimitConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: LimitConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LimitApprovalDetailsResponse>;
    getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LimitApprovalDetailsResponse>>;
    getApprovals(requestParameters: GetApprovalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LimitApprovalDetailsResponse>>;
    getApprovalsUrl(requestParameters: GetApprovalsRequestParams): string;
    getBreachableOperationByPaymentRef(requestParameters: GetBreachableOperationByPaymentRefRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<BreachableOperationResponse>>;
    getBreachableOperationByPaymentRef(requestParameters: GetBreachableOperationByPaymentRefRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<BreachableOperationResponse>>>;
    getBreachableOperationByPaymentRef(requestParameters: GetBreachableOperationByPaymentRefRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<BreachableOperationResponse>>>;
    getBreachableOperationByPaymentRefUrl(requestParameters: GetBreachableOperationByPaymentRefRequestParams): string;
    getCurrency(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CurrencyGetResponseBody>;
    getCurrency(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CurrencyGetResponseBody>>;
    getCurrency(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CurrencyGetResponseBody>>;
    getCurrencyUrl(): string;
    getGlobalLimits(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ListGlobalLimitsResponseBody>;
    getGlobalLimits(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ListGlobalLimitsResponseBody>>;
    getGlobalLimits(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ListGlobalLimitsResponseBody>>;
    getGlobalLimitsUrl(): string;
    getSupportedPeriods(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<SupportedPeriodsGetResponseBody>>;
    getSupportedPeriods(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<SupportedPeriodsGetResponseBody>>>;
    getSupportedPeriods(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<SupportedPeriodsGetResponseBody>>>;
    getSupportedPeriodsUrl(): string;
    postCurrentLimitsConsumptionsRetrieval(requestParameters: PostCurrentLimitsConsumptionsRetrievalRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<LimitConsumption>>;
    postCurrentLimitsConsumptionsRetrieval(requestParameters: PostCurrentLimitsConsumptionsRetrievalRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<LimitConsumption>>>;
    postCurrentLimitsConsumptionsRetrieval(requestParameters: PostCurrentLimitsConsumptionsRetrievalRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<LimitConsumption>>>;
    postCurrentLimitsConsumptionsRetrievalUrl(requestParameters: PostCurrentLimitsConsumptionsRetrievalRequestParams): string;
    postLimits(requestParameters: PostLimitsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LimitsPostResponseBody>;
    postLimits(requestParameters: PostLimitsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LimitsPostResponseBody>>;
    postLimits(requestParameters: PostLimitsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LimitsPostResponseBody>>;
    postLimitsUrl(requestParameters: PostLimitsRequestParams): string;
    postLimitsRetrieval(requestParameters: PostLimitsRetrievalRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<LimitsRetrievalPostResponseBody>>;
    postLimitsRetrieval(requestParameters: PostLimitsRetrievalRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<LimitsRetrievalPostResponseBody>>>;
    postLimitsRetrieval(requestParameters: PostLimitsRetrievalRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<LimitsRetrievalPostResponseBody>>>;
    postLimitsRetrievalUrl(requestParameters: PostLimitsRetrievalRequestParams): string;
    postPeriodicLimitSoftCheck(requestParameters: PostPeriodicLimitSoftCheckRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postPeriodicLimitSoftCheck(requestParameters: PostPeriodicLimitSoftCheckRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postPeriodicLimitSoftCheck(requestParameters: PostPeriodicLimitSoftCheckRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postPeriodicLimitSoftCheckUrl(requestParameters: PostPeriodicLimitSoftCheckRequestParams): string;
    postTransactionalLimitSoftCheck(requestParameters: PostTransactionalLimitSoftCheckRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postTransactionalLimitSoftCheck(requestParameters: PostTransactionalLimitSoftCheckRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postTransactionalLimitSoftCheck(requestParameters: PostTransactionalLimitSoftCheckRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postTransactionalLimitSoftCheckUrl(requestParameters: PostTransactionalLimitSoftCheckRequestParams): string;
    putApprovals(requestParameters: PutApprovalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LimitApprovalResponse>;
    putApprovals(requestParameters: PutApprovalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LimitApprovalResponse>>;
    putApprovals(requestParameters: PutApprovalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LimitApprovalResponse>>;
    putApprovalsUrl(requestParameters: PutApprovalsRequestParams): string;
    putGlobalLimits(requestParameters: PutGlobalLimitsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UpsertGlobalLimitsResponseBody>;
    putGlobalLimits(requestParameters: PutGlobalLimitsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UpsertGlobalLimitsResponseBody>>;
    putGlobalLimits(requestParameters: PutGlobalLimitsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UpsertGlobalLimitsResponseBody>>;
    putGlobalLimitsUrl(requestParameters: PutGlobalLimitsRequestParams): string;
    putLimitByUuid(requestParameters: PutLimitByUuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LimitByUuidPutResponseBody>;
    putLimitByUuid(requestParameters: PutLimitByUuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LimitByUuidPutResponseBody>>;
    putLimitByUuid(requestParameters: PutLimitByUuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LimitByUuidPutResponseBody>>;
    putLimitByUuidUrl(requestParameters: PutLimitByUuidRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<LimitsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LimitsHttpService>;
}
