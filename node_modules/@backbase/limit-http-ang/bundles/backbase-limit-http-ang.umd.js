(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/limit-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["limit-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ApprovalStatus = {
        EFFECTIVE: 'EFFECTIVE',
        PENDING: 'PENDING',
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED'
    };

    var BreachType = {
        THRESHOLD: 'THRESHOLD',
        CONSUMPTION: 'CONSUMPTION'
    };

    var BreachedLimitType = {
        PERIODIC: 'PERIODIC',
        TRANSACTIONAL: 'TRANSACTIONAL'
    };

    exports.Consumption = void 0;
    (function (Consumption) {
        Consumption.StateEnum = {
            CONSUMED: 'CONSUMED',
            ROLLEDBACK: 'ROLLED_BACK'
        };
    })(exports.Consumption || (exports.Consumption = {}));

    var PaymentState = {
        APPROVED: 'APPROVED',
        NEW: 'NEW',
        PARTIALLYAPPROVED: 'PARTIALLY_APPROVED'
    };

    var LIMIT_BASE_PATH = new i0.InjectionToken('LIMIT_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var LimitConfiguration = /** @class */ (function () {
        function LimitConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        LimitConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        LimitConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        LimitConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        LimitConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return LimitConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module LimitConfiguration');

    var LimitApiModule = /** @class */ (function () {
        function LimitApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('LimitApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        LimitApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: LimitApiModule,
                providers: [{ provide: LimitConfiguration, useFactory: configurationFactory }]
            };
        };
        return LimitApiModule;
    }());
    LimitApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LimitApiModule, deps: [{ token: LimitApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: LimitConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    LimitApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LimitApiModule });
    LimitApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LimitApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LimitApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: LimitApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: LimitConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var GlobalLimitsApprovalHttpService = /** @class */ (function () {
        function GlobalLimitsApprovalHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new LimitConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        GlobalLimitsApprovalHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        GlobalLimitsApprovalHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        GlobalLimitsApprovalHttpService.prototype.getGlobalLimitsApprovalDetails = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getGlobalLimitsApprovalDetails.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/limits/global/approvals/" + encodeURIComponent(String(_approvalId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        GlobalLimitsApprovalHttpService.prototype.getGlobalLimitsApprovalDetailsUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getGlobalLimitsApprovalDetails.');
            }
            return this.configuration.basePath + "/client-api/v2/limits/global/approvals/" + encodeURIComponent(String(_approvalId));
        };
        GlobalLimitsApprovalHttpService.prototype.postGlobalLimitsApprovalStatus = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling postGlobalLimitsApprovalStatus.');
            }
            var _limitApprovalRequest = requestParameters["limitApprovalRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/limits/global/approvals/" + encodeURIComponent(String(_approvalId)) + "/status", _limitApprovalRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        GlobalLimitsApprovalHttpService.prototype.postGlobalLimitsApprovalStatusUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling postGlobalLimitsApprovalStatus.');
            }
            var _limitApprovalRequest = requestParameters["limitApprovalRequest"];
            return this.configuration.basePath + "/client-api/v2/limits/global/approvals/" + encodeURIComponent(String(_approvalId)) + "/status";
        };
        return GlobalLimitsApprovalHttpService;
    }());
    GlobalLimitsApprovalHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: GlobalLimitsApprovalHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: LIMIT_BASE_PATH, optional: true }, { token: LimitConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    GlobalLimitsApprovalHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: GlobalLimitsApprovalHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: GlobalLimitsApprovalHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LIMIT_BASE_PATH]
                        }] }, { type: LimitConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                        "currency": "EUR",
                        "limits": [{
                                "alias": "Personal",
                                "uuid": "e211eded-572f-48b1-8940-ae7a301838cb",
                                "entities": [{
                                        "type": "USER"
                                    }],
                                "bounds": [{
                                        "type": "daily",
                                        "effectiveAmount": "200.00",
                                        "pendingAmount": "300.00"
                                    }, {
                                        "type": "weekly",
                                        "effectiveAmount": "1000.00",
                                        "pendingAmount": ""
                                    }, {
                                        "type": "transactional",
                                        "effectiveAmount": "",
                                        "pendingAmount": "300.00"
                                    }]
                            }, {
                                "alias": "Service Agreement",
                                "uuid": "ac825135-96ac-4883-8f46-aa5bd9497745",
                                "entities": [{
                                        "type": "SA"
                                    }],
                                "bounds": [{
                                        "type": "daily",
                                        "effectiveAmount": "400.00",
                                        "pendingAmount": ""
                                    }, {
                                        "type": "weekly",
                                        "effectiveAmount": "800.00",
                                        "pendingAmount": "600"
                                    }, {
                                        "type": "transactional",
                                        "effectiveAmount": "300.00",
                                        "pendingAmount": "300.00"
                                    }]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}/status",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var GlobalLimitsApprovalHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                        "currency": "EUR",
                        "limits": [{
                                "alias": "Personal",
                                "uuid": "e211eded-572f-48b1-8940-ae7a301838cb",
                                "entities": [{
                                        "type": "USER"
                                    }],
                                "bounds": [{
                                        "type": "daily",
                                        "effectiveAmount": "200.00",
                                        "pendingAmount": "300.00"
                                    }, {
                                        "type": "weekly",
                                        "effectiveAmount": "1000.00",
                                        "pendingAmount": ""
                                    }, {
                                        "type": "transactional",
                                        "effectiveAmount": "",
                                        "pendingAmount": "300.00"
                                    }]
                            }, {
                                "alias": "Service Agreement",
                                "uuid": "ac825135-96ac-4883-8f46-aa5bd9497745",
                                "entities": [{
                                        "type": "SA"
                                    }],
                                "bounds": [{
                                        "type": "daily",
                                        "effectiveAmount": "400.00",
                                        "pendingAmount": ""
                                    }, {
                                        "type": "weekly",
                                        "effectiveAmount": "800.00",
                                        "pendingAmount": "600"
                                    }, {
                                        "type": "transactional",
                                        "effectiveAmount": "300.00",
                                        "pendingAmount": "300.00"
                                    }]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}/status",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var LimitsHttpService = /** @class */ (function () {
        function LimitsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new LimitConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        LimitsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        LimitsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        LimitsHttpService.prototype.getApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getApprovals.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/limits/" + encodeURIComponent(String(_approvalId)) + "/approvals", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.getApprovalsUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getApprovals.');
            }
            return this.configuration.basePath + "/client-api/v2/limits/" + encodeURIComponent(String(_approvalId)) + "/approvals";
        };
        LimitsHttpService.prototype.getBreachableOperationByPaymentRef = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentRef = requestParameters["paymentRef"];
            if (_paymentRef === null || _paymentRef === undefined) {
                throw new Error('Required parameter paymentRef was null or undefined when calling getBreachableOperationByPaymentRef.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/limits/" + encodeURIComponent(String(_paymentRef)) + "/breachreport", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.getBreachableOperationByPaymentRefUrl = function (requestParameters) {
            var _paymentRef = requestParameters["paymentRef"];
            if (_paymentRef === null || _paymentRef === undefined) {
                throw new Error('Required parameter paymentRef was null or undefined when calling getBreachableOperationByPaymentRef.');
            }
            return this.configuration.basePath + "/client-api/v2/limits/" + encodeURIComponent(String(_paymentRef)) + "/breachreport";
        };
        LimitsHttpService.prototype.getCurrency = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/limits/currency", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.getCurrencyUrl = function () {
            return this.configuration.basePath + "/client-api/v2/limits/currency";
        };
        LimitsHttpService.prototype.getGlobalLimits = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/limits/global", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.getGlobalLimitsUrl = function () {
            return this.configuration.basePath + "/client-api/v2/limits/global";
        };
        LimitsHttpService.prototype.getSupportedPeriods = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/limits/periods", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.getSupportedPeriodsUrl = function () {
            return this.configuration.basePath + "/client-api/v2/limits/periods";
        };
        LimitsHttpService.prototype.postCurrentLimitsConsumptionsRetrieval = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _currentLimitsConsumptionsRetrievalPostRequestBody = requestParameters["currentLimitsConsumptionsRetrievalPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/limits/consumptions", _currentLimitsConsumptionsRetrievalPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.postCurrentLimitsConsumptionsRetrievalUrl = function (requestParameters) {
            var _currentLimitsConsumptionsRetrievalPostRequestBody = requestParameters["currentLimitsConsumptionsRetrievalPostRequestBody"];
            return this.configuration.basePath + "/client-api/v2/limits/consumptions";
        };
        LimitsHttpService.prototype.postLimits = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _createLimitRequestBody = requestParameters["createLimitRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/limits", _createLimitRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.postLimitsUrl = function (requestParameters) {
            var _createLimitRequestBody = requestParameters["createLimitRequestBody"];
            return this.configuration.basePath + "/client-api/v2/limits";
        };
        LimitsHttpService.prototype.postLimitsRetrieval = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _limitsRetrievalPostRequestBody = requestParameters["limitsRetrievalPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/limits/retrieval", _limitsRetrievalPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.postLimitsRetrievalUrl = function (requestParameters) {
            var _limitsRetrievalPostRequestBody = requestParameters["limitsRetrievalPostRequestBody"];
            return this.configuration.basePath + "/client-api/v2/limits/retrieval";
        };
        LimitsHttpService.prototype.postPeriodicLimitSoftCheck = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _periodicLimitSoftCheckPostRequestBody = requestParameters["periodicLimitSoftCheckPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/limits/periodic/soft-check", _periodicLimitSoftCheckPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.postPeriodicLimitSoftCheckUrl = function (requestParameters) {
            var _periodicLimitSoftCheckPostRequestBody = requestParameters["periodicLimitSoftCheckPostRequestBody"];
            return this.configuration.basePath + "/client-api/v2/limits/periodic/soft-check";
        };
        LimitsHttpService.prototype.postTransactionalLimitSoftCheck = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _transactionalLimitSoftCheckPostRequestBody = requestParameters["transactionalLimitSoftCheckPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/limits/transactional/soft-check", _transactionalLimitSoftCheckPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.postTransactionalLimitSoftCheckUrl = function (requestParameters) {
            var _transactionalLimitSoftCheckPostRequestBody = requestParameters["transactionalLimitSoftCheckPostRequestBody"];
            return this.configuration.basePath + "/client-api/v2/limits/transactional/soft-check";
        };
        LimitsHttpService.prototype.putApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling putApprovals.');
            }
            var _limitApprovalRequest = requestParameters["limitApprovalRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/limits/" + encodeURIComponent(String(_approvalId)) + "/approvals", _limitApprovalRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.putApprovalsUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling putApprovals.');
            }
            var _limitApprovalRequest = requestParameters["limitApprovalRequest"];
            return this.configuration.basePath + "/client-api/v2/limits/" + encodeURIComponent(String(_approvalId)) + "/approvals";
        };
        LimitsHttpService.prototype.putGlobalLimits = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _upsertGlobalLimitsRequestBody = requestParameters["upsertGlobalLimitsRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/limits/global", _upsertGlobalLimitsRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.putGlobalLimitsUrl = function (requestParameters) {
            var _upsertGlobalLimitsRequestBody = requestParameters["upsertGlobalLimitsRequestBody"];
            return this.configuration.basePath + "/client-api/v2/limits/global";
        };
        LimitsHttpService.prototype.putLimitByUuid = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _uuid = requestParameters["uuid"];
            if (_uuid === null || _uuid === undefined) {
                throw new Error('Required parameter uuid was null or undefined when calling putLimitByUuid.');
            }
            var _updateLimitRequestBody = requestParameters["updateLimitRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/limits/" + encodeURIComponent(String(_uuid)), _updateLimitRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LimitsHttpService.prototype.putLimitByUuidUrl = function (requestParameters) {
            var _uuid = requestParameters["uuid"];
            if (_uuid === null || _uuid === undefined) {
                throw new Error('Required parameter uuid was null or undefined when calling putLimitByUuid.');
            }
            var _updateLimitRequestBody = requestParameters["updateLimitRequestBody"];
            return this.configuration.basePath + "/client-api/v2/limits/" + encodeURIComponent(String(_uuid));
        };
        return LimitsHttpService;
    }());
    LimitsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LimitsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: LIMIT_BASE_PATH, optional: true }, { token: LimitConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    LimitsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LimitsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LimitsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LIMIT_BASE_PATH]
                        }] }, { type: LimitConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var LimitsHttpServiceGetApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/{approvalId}/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "alias": "Personal Service Agreement Limit",
                        "uuid": "1234-5678-9101-1121",
                        "user-BBID": "uuid-user-id",
                        "userName": "Full Username",
                        "entities": [{
                                "etype": "SA",
                                "eref": "550e8400-e29b-41d4-a716-446655440000",
                                "name": "Service agreement #1"
                            }],
                        "currency": "EUR",
                        "approval-currency": "EUR",
                        "periodic-limits-bounds": {
                            "daily": "100.0",
                            "weekly": "120.0",
                            "monthly": "300.0",
                            "quarterly": "600.0"
                        },
                        "approval-periodic-limits-bounds": {
                            "daily": "200.0",
                            "weekly": "300.0",
                            "monthly": "500.0",
                            "quarterly": "1000.0"
                        },
                        "shadow": true,
                        "approvalStatus": "PENDING"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/{paymentRef}/breachreport",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "payment": {
                                "refNo": "4563-3474-34553-24556",
                                "user-BBID": "550e8400-e29b-41d4-a716-446655440000",
                                "amount": "599.99",
                                "effectiveDate": "2017-01-31T12:12:12.000Z",
                                "currency": "EUR",
                                "paymentType": "Domestic Payments",
                                "state": "NEW"
                            },
                            "matchedLimits": 1,
                            "consumption": [{
                                    "limitId": "4563-3474-34553-24556",
                                    "limitCcy": "EUR",
                                    "consumedAmount": "599.99",
                                    "consumedOn": "2017-01-31T12:12:12.000Z",
                                    "state": "CONSUMED"
                                }],
                            "checkTime": "2017-01-31T12:12:12.000Z",
                            "breachReport": [{
                                    "alias": "Personal Service Agreement Limit",
                                    "user-BBID": "oleksii",
                                    "limitedEntity": [{
                                            "ref": "1234567-12312-123123",
                                            "type": "Service Agreement",
                                            "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                        }],
                                    "shadow": false,
                                    "currency": "EUR",
                                    "breachInfo": [{
                                            "breachType": "THRESHOLD",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "daily",
                                                "startTime": "2017-01-31T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "250.0",
                                            "currentThreshold": "499.9"
                                        }, {
                                            "breachType": "CONSUMPTION",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "monthly",
                                                "startTime": "2017-01-01T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "9950.0",
                                            "currentThreshold": "10000.0"
                                        }]
                                }, {
                                    "alias": "Personal Limit",
                                    "user-BBID": "oleksii",
                                    "shadow": false,
                                    "currency": "EUR",
                                    "breachInfo": [{
                                            "breachType": "CONSUMPTION",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "daily",
                                                "startTime": "2017-01-31T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "500.0",
                                            "currentThreshold": "1000.0"
                                        }]
                                }, {
                                    "alias": "Common Job Profile Limit",
                                    "limitedEntity": [{
                                            "ref": "1234567-12312-123123",
                                            "type": "Function Access Group",
                                            "description": "Payments approvers"
                                        }, {
                                            "ref": "1234567-12312-123123",
                                            "type": "Function",
                                            "description": "Domestic payments"
                                        }, {
                                            "ref": "Approve",
                                            "type": "Privilege",
                                            "description": "Approve"
                                        }, {
                                            "ref": "1234567-12312-123123",
                                            "type": "Service Agreement",
                                            "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                        }],
                                    "shadow": false,
                                    "currency": "EUR",
                                    "breachInfo": [{
                                            "breachType": "THRESHOLD",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "daily",
                                                "startTime": "2017-01-31T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "250.0",
                                            "currentThreshold": "499.9"
                                        }]
                                }, {
                                    "alias": "",
                                    "limitedEntity": [{
                                            "ref": "1234567-12312-123123",
                                            "type": "Legal Entity",
                                            "description": "Kuhic, Gislason and Kemmer"
                                        }],
                                    "shadow": false,
                                    "currency": "EUR",
                                    "breachInfo": [{
                                            "breachType": "CONSUMPTION",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "quarterly",
                                                "startTime": "2017-01-01T00:00:00.000Z",
                                                "endTime": "2017-03-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "99950.0",
                                            "currentThreshold": "100000.0"
                                        }, {
                                            "breachType": "THRESHOLD",
                                            "breachedLimitType": "TRANSACTIONAL",
                                            "currentThreshold": "499.9"
                                        }]
                                }],
                            "globalBreachReport": [{
                                    "alias": "Service Agreement Limit",
                                    "currency": "EUR",
                                    "limitedEntity": [{
                                            "type": "Service Agreement"
                                        }],
                                    "breachInfo": [{
                                            "breachType": "THRESHOLD",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "daily",
                                                "startTime": "2017-01-31T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "250.0",
                                            "currentThreshold": "499.9"
                                        }, {
                                            "breachType": "CONSUMPTION",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "monthly",
                                                "startTime": "2017-01-01T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "9950.0",
                                            "currentThreshold": "10000.0"
                                        }]
                                }]
                        }]
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServiceGetCurrencyMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/currency",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "defaultCurrency": "EUR",
                        "allowedCurrencyList": ["EUR", "USD", "AED"]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServiceGetGlobalLimitsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/global",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "limits": [{
                                "alias": "User Limit",
                                "uuid": "dfab7e60-064e-4af5-b54d-96d28fef0573",
                                "entities": [{
                                        "type": "USER"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "100.0",
                                    "weekly": "120.0",
                                    "monthly": "300.0",
                                    "quarterly": "600.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "100"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "100.0"
                                }
                            }, {
                                "alias": "Service Agreement Limit",
                                "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                                "entities": [{
                                        "type": "SA"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "1000.0",
                                    "weekly": "1200.0",
                                    "monthly": "3000.0",
                                    "quarterly": "6000.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "1000"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "1000.0"
                                }
                            }, {
                                "alias": "Legal Entity Limit",
                                "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                                "entities": [{
                                        "type": "LE"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "1000.0",
                                    "weekly": "1200.0",
                                    "monthly": "3000.0",
                                    "quarterly": "6000.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "1000"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "1000.0"
                                }
                            }],
                        "currency": "EUR"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServiceGetSupportedPeriodsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/periods",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "name": "DAILY"
                        }, {
                            "name": "WEEKLY"
                        }, {
                            "name": "MONTHLY"
                        }, {
                            "name": "QUARTERLY"
                        }, {
                            "name": "YEARLY"
                        }]
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/consumptions",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "limit": {
                                "alias": "",
                                "uuid": "1234-5678-9101-1121",
                                "user-BBID": "uuid-user-id",
                                "entities": [{
                                        "etype": "LE",
                                        "eref": "550e8400-e29b-41d4-a716-446655440000"
                                    }],
                                "currency": "EUR",
                                "periodic-limits-bounds": {
                                    "daily": "100.0",
                                    "weekly": "120.0",
                                    "monthly": "300.0",
                                    "quarterly": "600.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "100"
                                        }]
                                },
                                "shadow": true
                            },
                            "consumptions": {
                                "daily": "0.0",
                                "weekly": "50.0",
                                "monthly": "60.0",
                                "quarterly": "160.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "50"
                                    }]
                            },
                            "checkTime": "2017-01-31T12:12:12.000Z"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServicePostLimitsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "uuid": "1234-1234-1312-5434"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServicePostLimitsRetrievalMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/retrieval",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "alias": "Personal Service Agreement Limit",
                            "uuid": "1234-5678-9101-1121",
                            "user-BBID": "uuid-user-id",
                            "entities": [{
                                    "etype": "SA",
                                    "eref": "550e8400-e29b-41d4-a716-446655440000"
                                }],
                            "approvalId": "710d559b-a922-424d-a21c-7e63b6351661",
                            "currency": "EUR",
                            "periodic-limits-bounds": {
                                "daily": "100.0",
                                "weekly": "120.0",
                                "monthly": "300.0",
                                "quarterly": "600.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "100"
                                    }]
                            },
                            "shadow": true
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/periodic/soft-check",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/transactional/soft-check",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServicePutApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/{approvalId}/approvals",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "alias": "Personal Service Agreement Limit",
                        "uuid": "1234-5678-9101-1121",
                        "user-BBID": "uuid-user-id",
                        "entities": [{
                                "etype": "SA",
                                "eref": "550e8400-e29b-41d4-a716-446655440000"
                            }],
                        "currency": "EUR",
                        "periodic-limits-bounds": {
                            "daily": "100.0",
                            "weekly": "120.0",
                            "monthly": "300.0",
                            "quarterly": "600.0",
                            "customPeriods": [{
                                    "period": "biweekly",
                                    "amount": "100"
                                }]
                        },
                        "shadow": true,
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServicePutGlobalLimitsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/global",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "limits": [{
                                "alias": "User Limit",
                                "uuid": "dfab7e60-064e-4af5-b54d-96d28fef0573",
                                "entities": [{
                                        "type": "USER"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "100.0",
                                    "weekly": "120.0",
                                    "monthly": "300.0",
                                    "quarterly": "600.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "100"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "100.0"
                                }
                            }, {
                                "alias": "Service Agreement Limit",
                                "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                                "entities": [{
                                        "type": "SA"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "1000.0",
                                    "weekly": "1200.0",
                                    "monthly": "3000.0",
                                    "quarterly": "6000.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "1000"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "1000.0"
                                }
                            }],
                        "currency": "EUR",
                        "approvalId": "911c07d1-7f0c-4437-b27b-ae0d2bcf9e5c"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServicePutLimitByUuidMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/limits/{uuid}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "alias": "Personal Service Agreement Limit",
                        "uuid": "1234-5678-9101-1121",
                        "user-BBID": "uuid-user-id",
                        "entities": [{
                                "etype": "SA",
                                "eref": "550e8400-e29b-41d4-a716-446655440000"
                            }],
                        "approvalId": "d1d0e7d0-30a4-472b-a8c0-3908b9e3847a",
                        "approvalStatus": "PENDING",
                        "currency": "EUR",
                        "periodic-limits-bounds": {
                            "daily": "100.0",
                            "weekly": "120.0",
                            "monthly": "300.0",
                            "quarterly": "600.0",
                            "customPeriods": [{
                                    "period": "biweekly",
                                    "amount": "100"
                                }]
                        },
                        "shadow": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LimitsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/limits/{approvalId}/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "alias": "Personal Service Agreement Limit",
                        "uuid": "1234-5678-9101-1121",
                        "user-BBID": "uuid-user-id",
                        "userName": "Full Username",
                        "entities": [{
                                "etype": "SA",
                                "eref": "550e8400-e29b-41d4-a716-446655440000",
                                "name": "Service agreement #1"
                            }],
                        "currency": "EUR",
                        "approval-currency": "EUR",
                        "periodic-limits-bounds": {
                            "daily": "100.0",
                            "weekly": "120.0",
                            "monthly": "300.0",
                            "quarterly": "600.0"
                        },
                        "approval-periodic-limits-bounds": {
                            "daily": "200.0",
                            "weekly": "300.0",
                            "monthly": "500.0",
                            "quarterly": "1000.0"
                        },
                        "shadow": true,
                        "approvalStatus": "PENDING"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/{paymentRef}/breachreport",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "payment": {
                                "refNo": "4563-3474-34553-24556",
                                "user-BBID": "550e8400-e29b-41d4-a716-446655440000",
                                "amount": "599.99",
                                "effectiveDate": "2017-01-31T12:12:12.000Z",
                                "currency": "EUR",
                                "paymentType": "Domestic Payments",
                                "state": "NEW"
                            },
                            "matchedLimits": 1,
                            "consumption": [{
                                    "limitId": "4563-3474-34553-24556",
                                    "limitCcy": "EUR",
                                    "consumedAmount": "599.99",
                                    "consumedOn": "2017-01-31T12:12:12.000Z",
                                    "state": "CONSUMED"
                                }],
                            "checkTime": "2017-01-31T12:12:12.000Z",
                            "breachReport": [{
                                    "alias": "Personal Service Agreement Limit",
                                    "user-BBID": "oleksii",
                                    "limitedEntity": [{
                                            "ref": "1234567-12312-123123",
                                            "type": "Service Agreement",
                                            "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                        }],
                                    "shadow": false,
                                    "currency": "EUR",
                                    "breachInfo": [{
                                            "breachType": "THRESHOLD",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "daily",
                                                "startTime": "2017-01-31T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "250.0",
                                            "currentThreshold": "499.9"
                                        }, {
                                            "breachType": "CONSUMPTION",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "monthly",
                                                "startTime": "2017-01-01T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "9950.0",
                                            "currentThreshold": "10000.0"
                                        }]
                                }, {
                                    "alias": "Personal Limit",
                                    "user-BBID": "oleksii",
                                    "shadow": false,
                                    "currency": "EUR",
                                    "breachInfo": [{
                                            "breachType": "CONSUMPTION",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "daily",
                                                "startTime": "2017-01-31T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "500.0",
                                            "currentThreshold": "1000.0"
                                        }]
                                }, {
                                    "alias": "Common Job Profile Limit",
                                    "limitedEntity": [{
                                            "ref": "1234567-12312-123123",
                                            "type": "Function Access Group",
                                            "description": "Payments approvers"
                                        }, {
                                            "ref": "1234567-12312-123123",
                                            "type": "Function",
                                            "description": "Domestic payments"
                                        }, {
                                            "ref": "Approve",
                                            "type": "Privilege",
                                            "description": "Approve"
                                        }, {
                                            "ref": "1234567-12312-123123",
                                            "type": "Service Agreement",
                                            "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                        }],
                                    "shadow": false,
                                    "currency": "EUR",
                                    "breachInfo": [{
                                            "breachType": "THRESHOLD",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "daily",
                                                "startTime": "2017-01-31T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "250.0",
                                            "currentThreshold": "499.9"
                                        }]
                                }, {
                                    "alias": "",
                                    "limitedEntity": [{
                                            "ref": "1234567-12312-123123",
                                            "type": "Legal Entity",
                                            "description": "Kuhic, Gislason and Kemmer"
                                        }],
                                    "shadow": false,
                                    "currency": "EUR",
                                    "breachInfo": [{
                                            "breachType": "CONSUMPTION",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "quarterly",
                                                "startTime": "2017-01-01T00:00:00.000Z",
                                                "endTime": "2017-03-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "99950.0",
                                            "currentThreshold": "100000.0"
                                        }, {
                                            "breachType": "THRESHOLD",
                                            "breachedLimitType": "TRANSACTIONAL",
                                            "currentThreshold": "499.9"
                                        }]
                                }],
                            "globalBreachReport": [{
                                    "alias": "Service Agreement Limit",
                                    "currency": "EUR",
                                    "limitedEntity": [{
                                            "type": "Service Agreement"
                                        }],
                                    "breachInfo": [{
                                            "breachType": "THRESHOLD",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "daily",
                                                "startTime": "2017-01-31T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "250.0",
                                            "currentThreshold": "499.9"
                                        }, {
                                            "breachType": "CONSUMPTION",
                                            "breachedLimitType": "PERIODIC",
                                            "timeframe": {
                                                "period": "monthly",
                                                "startTime": "2017-01-01T00:00:00.000Z",
                                                "endTime": "2017-01-31T23:59:59.000Z"
                                            },
                                            "currentConsumption": "9950.0",
                                            "currentThreshold": "10000.0"
                                        }]
                                }]
                        }]
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/currency",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "defaultCurrency": "EUR",
                        "allowedCurrencyList": ["EUR", "USD", "AED"]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/global",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "limits": [{
                                "alias": "User Limit",
                                "uuid": "dfab7e60-064e-4af5-b54d-96d28fef0573",
                                "entities": [{
                                        "type": "USER"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "100.0",
                                    "weekly": "120.0",
                                    "monthly": "300.0",
                                    "quarterly": "600.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "100"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "100.0"
                                }
                            }, {
                                "alias": "Service Agreement Limit",
                                "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                                "entities": [{
                                        "type": "SA"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "1000.0",
                                    "weekly": "1200.0",
                                    "monthly": "3000.0",
                                    "quarterly": "6000.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "1000"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "1000.0"
                                }
                            }, {
                                "alias": "Legal Entity Limit",
                                "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                                "entities": [{
                                        "type": "LE"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "1000.0",
                                    "weekly": "1200.0",
                                    "monthly": "3000.0",
                                    "quarterly": "6000.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "1000"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "1000.0"
                                }
                            }],
                        "currency": "EUR"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/periods",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "name": "DAILY"
                        }, {
                            "name": "WEEKLY"
                        }, {
                            "name": "MONTHLY"
                        }, {
                            "name": "QUARTERLY"
                        }, {
                            "name": "YEARLY"
                        }]
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/consumptions",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "limit": {
                                "alias": "",
                                "uuid": "1234-5678-9101-1121",
                                "user-BBID": "uuid-user-id",
                                "entities": [{
                                        "etype": "LE",
                                        "eref": "550e8400-e29b-41d4-a716-446655440000"
                                    }],
                                "currency": "EUR",
                                "periodic-limits-bounds": {
                                    "daily": "100.0",
                                    "weekly": "120.0",
                                    "monthly": "300.0",
                                    "quarterly": "600.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "100"
                                        }]
                                },
                                "shadow": true
                            },
                            "consumptions": {
                                "daily": "0.0",
                                "weekly": "50.0",
                                "monthly": "60.0",
                                "quarterly": "160.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "50"
                                    }]
                            },
                            "checkTime": "2017-01-31T12:12:12.000Z"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "uuid": "1234-1234-1312-5434"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/retrieval",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "alias": "Personal Service Agreement Limit",
                            "uuid": "1234-5678-9101-1121",
                            "user-BBID": "uuid-user-id",
                            "entities": [{
                                    "etype": "SA",
                                    "eref": "550e8400-e29b-41d4-a716-446655440000"
                                }],
                            "approvalId": "710d559b-a922-424d-a21c-7e63b6351661",
                            "currency": "EUR",
                            "periodic-limits-bounds": {
                                "daily": "100.0",
                                "weekly": "120.0",
                                "monthly": "300.0",
                                "quarterly": "600.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "100"
                                    }]
                            },
                            "shadow": true
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/periodic/soft-check",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/transactional/soft-check",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/{approvalId}/approvals",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "alias": "Personal Service Agreement Limit",
                        "uuid": "1234-5678-9101-1121",
                        "user-BBID": "uuid-user-id",
                        "entities": [{
                                "etype": "SA",
                                "eref": "550e8400-e29b-41d4-a716-446655440000"
                            }],
                        "currency": "EUR",
                        "periodic-limits-bounds": {
                            "daily": "100.0",
                            "weekly": "120.0",
                            "monthly": "300.0",
                            "quarterly": "600.0",
                            "customPeriods": [{
                                    "period": "biweekly",
                                    "amount": "100"
                                }]
                        },
                        "shadow": true,
                        "approvalStatus": "APPROVED"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/global",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "limits": [{
                                "alias": "User Limit",
                                "uuid": "dfab7e60-064e-4af5-b54d-96d28fef0573",
                                "entities": [{
                                        "type": "USER"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "100.0",
                                    "weekly": "120.0",
                                    "monthly": "300.0",
                                    "quarterly": "600.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "100"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "100.0"
                                }
                            }, {
                                "alias": "Service Agreement Limit",
                                "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                                "entities": [{
                                        "type": "SA"
                                    }],
                                "periodic-limits-bounds": {
                                    "daily": "1000.0",
                                    "weekly": "1200.0",
                                    "monthly": "3000.0",
                                    "quarterly": "6000.0",
                                    "customPeriods": [{
                                            "period": "biweekly",
                                            "amount": "1000"
                                        }]
                                },
                                "transactional-limits-bound": {
                                    "amount": "1000.0"
                                }
                            }],
                        "currency": "EUR",
                        "approvalId": "911c07d1-7f0c-4437-b27b-ae0d2bcf9e5c"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/limits/{uuid}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "alias": "Personal Service Agreement Limit",
                        "uuid": "1234-5678-9101-1121",
                        "user-BBID": "uuid-user-id",
                        "entities": [{
                                "etype": "SA",
                                "eref": "550e8400-e29b-41d4-a716-446655440000"
                            }],
                        "approvalId": "d1d0e7d0-30a4-472b-a8c0-3908b9e3847a",
                        "approvalStatus": "PENDING",
                        "currency": "EUR",
                        "periodic-limits-bounds": {
                            "daily": "100.0",
                            "weekly": "120.0",
                            "monthly": "300.0",
                            "quarterly": "600.0",
                            "customPeriods": [{
                                    "period": "biweekly",
                                    "amount": "100"
                                }]
                        },
                        "shadow": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 422,
                    body: {
                        "message": "Unprocessable Entity",
                        "errors": [{
                                "message": "Array size is over {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "100"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.ApprovalStatus = ApprovalStatus;
    exports.BreachType = BreachType;
    exports.BreachedLimitType = BreachedLimitType;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.GlobalLimitsApprovalHttpService = GlobalLimitsApprovalHttpService;
    exports.GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider = GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider;
    exports.GlobalLimitsApprovalHttpServiceMocksProvider = GlobalLimitsApprovalHttpServiceMocksProvider;
    exports.GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider = GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider;
    exports.LIMIT_BASE_PATH = LIMIT_BASE_PATH;
    exports.LimitApiModule = LimitApiModule;
    exports.LimitConfiguration = LimitConfiguration;
    exports.LimitsHttpService = LimitsHttpService;
    exports.LimitsHttpServiceGetApprovalsMocksProvider = LimitsHttpServiceGetApprovalsMocksProvider;
    exports.LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider = LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider;
    exports.LimitsHttpServiceGetCurrencyMocksProvider = LimitsHttpServiceGetCurrencyMocksProvider;
    exports.LimitsHttpServiceGetGlobalLimitsMocksProvider = LimitsHttpServiceGetGlobalLimitsMocksProvider;
    exports.LimitsHttpServiceGetSupportedPeriodsMocksProvider = LimitsHttpServiceGetSupportedPeriodsMocksProvider;
    exports.LimitsHttpServiceMocksProvider = LimitsHttpServiceMocksProvider;
    exports.LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider = LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider;
    exports.LimitsHttpServicePostLimitsMocksProvider = LimitsHttpServicePostLimitsMocksProvider;
    exports.LimitsHttpServicePostLimitsRetrievalMocksProvider = LimitsHttpServicePostLimitsRetrievalMocksProvider;
    exports.LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider = LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider;
    exports.LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider = LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider;
    exports.LimitsHttpServicePutApprovalsMocksProvider = LimitsHttpServicePutApprovalsMocksProvider;
    exports.LimitsHttpServicePutGlobalLimitsMocksProvider = LimitsHttpServicePutGlobalLimitsMocksProvider;
    exports.LimitsHttpServicePutLimitByUuidMocksProvider = LimitsHttpServicePutLimitByUuidMocksProvider;
    exports.PaymentState = PaymentState;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-limit-http-ang.umd.js.map
