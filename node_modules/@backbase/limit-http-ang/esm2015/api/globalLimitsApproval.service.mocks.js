import { createMocks } from '@backbase/foundation-ang/data-http';
export const GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                    "currency": "EUR",
                    "limits": [{
                            "alias": "Personal",
                            "uuid": "e211eded-572f-48b1-8940-ae7a301838cb",
                            "entities": [{
                                    "type": "USER"
                                }],
                            "bounds": [{
                                    "type": "daily",
                                    "effectiveAmount": "200.00",
                                    "pendingAmount": "300.00"
                                }, {
                                    "type": "weekly",
                                    "effectiveAmount": "1000.00",
                                    "pendingAmount": ""
                                }, {
                                    "type": "transactional",
                                    "effectiveAmount": "",
                                    "pendingAmount": "300.00"
                                }]
                        }, {
                            "alias": "Service Agreement",
                            "uuid": "ac825135-96ac-4883-8f46-aa5bd9497745",
                            "entities": [{
                                    "type": "SA"
                                }],
                            "bounds": [{
                                    "type": "daily",
                                    "effectiveAmount": "400.00",
                                    "pendingAmount": ""
                                }, {
                                    "type": "weekly",
                                    "effectiveAmount": "800.00",
                                    "pendingAmount": "600"
                                }, {
                                    "type": "transactional",
                                    "effectiveAmount": "300.00",
                                    "pendingAmount": "300.00"
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
export const GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}/status",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                    "approvalStatus": "APPROVED"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
export const GlobalLimitsApprovalHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                    "currency": "EUR",
                    "limits": [{
                            "alias": "Personal",
                            "uuid": "e211eded-572f-48b1-8940-ae7a301838cb",
                            "entities": [{
                                    "type": "USER"
                                }],
                            "bounds": [{
                                    "type": "daily",
                                    "effectiveAmount": "200.00",
                                    "pendingAmount": "300.00"
                                }, {
                                    "type": "weekly",
                                    "effectiveAmount": "1000.00",
                                    "pendingAmount": ""
                                }, {
                                    "type": "transactional",
                                    "effectiveAmount": "",
                                    "pendingAmount": "300.00"
                                }]
                        }, {
                            "alias": "Service Agreement",
                            "uuid": "ac825135-96ac-4883-8f46-aa5bd9497745",
                            "entities": [{
                                    "type": "SA"
                                }],
                            "bounds": [{
                                    "type": "daily",
                                    "effectiveAmount": "400.00",
                                    "pendingAmount": ""
                                }, {
                                    "type": "weekly",
                                    "effectiveAmount": "800.00",
                                    "pendingAmount": "600"
                                }, {
                                    "type": "transactional",
                                    "effectiveAmount": "300.00",
                                    "pendingAmount": "300.00"
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}/status",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                    "approvalStatus": "APPROVED"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,