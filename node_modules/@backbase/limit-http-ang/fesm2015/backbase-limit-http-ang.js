import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const ApprovalStatus = {
    EFFECTIVE: 'EFFECTIVE',
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED'
};

const BreachType = {
    THRESHOLD: 'THRESHOLD',
    CONSUMPTION: 'CONSUMPTION'
};

const BreachedLimitType = {
    PERIODIC: 'PERIODIC',
    TRANSACTIONAL: 'TRANSACTIONAL'
};

var Consumption;
(function (Consumption) {
    Consumption.StateEnum = {
        CONSUMED: 'CONSUMED',
        ROLLEDBACK: 'ROLLED_BACK'
    };
})(Consumption || (Consumption = {}));

const PaymentState = {
    APPROVED: 'APPROVED',
    NEW: 'NEW',
    PARTIALLYAPPROVED: 'PARTIALLY_APPROVED'
};

const LIMIT_BASE_PATH = new InjectionToken('LIMIT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class LimitConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module LimitConfiguration');

class LimitApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('LimitApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: LimitApiModule,
            providers: [{ provide: LimitConfiguration, useFactory: configurationFactory }]
        };
    }
}
LimitApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LimitApiModule, deps: [{ token: LimitApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: LimitConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
LimitApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LimitApiModule });
LimitApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LimitApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LimitApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: LimitApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: LimitConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class GlobalLimitsApprovalHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new LimitConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getGlobalLimitsApprovalDetails(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getGlobalLimitsApprovalDetails.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getGlobalLimitsApprovalDetailsUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getGlobalLimitsApprovalDetails.');
        }
        return `${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}`;
    }
    postGlobalLimitsApprovalStatus(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling postGlobalLimitsApprovalStatus.');
        }
        const _limitApprovalRequest = requestParameters["limitApprovalRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}/status`, _limitApprovalRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postGlobalLimitsApprovalStatusUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling postGlobalLimitsApprovalStatus.');
        }
        const _limitApprovalRequest = requestParameters["limitApprovalRequest"];
        return `${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}/status`;
    }
}
GlobalLimitsApprovalHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GlobalLimitsApprovalHttpService, deps: [{ token: i1.HttpClient }, { token: LIMIT_BASE_PATH, optional: true }, { token: LimitConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
GlobalLimitsApprovalHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GlobalLimitsApprovalHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GlobalLimitsApprovalHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LIMIT_BASE_PATH]
                }] }, { type: LimitConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                    "currency": "EUR",
                    "limits": [{
                            "alias": "Personal",
                            "uuid": "e211eded-572f-48b1-8940-ae7a301838cb",
                            "entities": [{
                                    "type": "USER"
                                }],
                            "bounds": [{
                                    "type": "daily",
                                    "effectiveAmount": "200.00",
                                    "pendingAmount": "300.00"
                                }, {
                                    "type": "weekly",
                                    "effectiveAmount": "1000.00",
                                    "pendingAmount": ""
                                }, {
                                    "type": "transactional",
                                    "effectiveAmount": "",
                                    "pendingAmount": "300.00"
                                }]
                        }, {
                            "alias": "Service Agreement",
                            "uuid": "ac825135-96ac-4883-8f46-aa5bd9497745",
                            "entities": [{
                                    "type": "SA"
                                }],
                            "bounds": [{
                                    "type": "daily",
                                    "effectiveAmount": "400.00",
                                    "pendingAmount": ""
                                }, {
                                    "type": "weekly",
                                    "effectiveAmount": "800.00",
                                    "pendingAmount": "600"
                                }, {
                                    "type": "transactional",
                                    "effectiveAmount": "300.00",
                                    "pendingAmount": "300.00"
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}/status",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                    "approvalStatus": "APPROVED"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const GlobalLimitsApprovalHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                    "currency": "EUR",
                    "limits": [{
                            "alias": "Personal",
                            "uuid": "e211eded-572f-48b1-8940-ae7a301838cb",
                            "entities": [{
                                    "type": "USER"
                                }],
                            "bounds": [{
                                    "type": "daily",
                                    "effectiveAmount": "200.00",
                                    "pendingAmount": "300.00"
                                }, {
                                    "type": "weekly",
                                    "effectiveAmount": "1000.00",
                                    "pendingAmount": ""
                                }, {
                                    "type": "transactional",
                                    "effectiveAmount": "",
                                    "pendingAmount": "300.00"
                                }]
                        }, {
                            "alias": "Service Agreement",
                            "uuid": "ac825135-96ac-4883-8f46-aa5bd9497745",
                            "entities": [{
                                    "type": "SA"
                                }],
                            "bounds": [{
                                    "type": "daily",
                                    "effectiveAmount": "400.00",
                                    "pendingAmount": ""
                                }, {
                                    "type": "weekly",
                                    "effectiveAmount": "800.00",
                                    "pendingAmount": "600"
                                }, {
                                    "type": "transactional",
                                    "effectiveAmount": "300.00",
                                    "pendingAmount": "300.00"
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/global/approvals/{approvalId}/status",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "approvalId": "bc1c03f2-6483-46ca-a7ec-192a2d963a8d",
                    "approvalStatus": "APPROVED"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class LimitsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new LimitConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getApprovals.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalsUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getApprovals.');
        }
        return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`;
    }
    getBreachableOperationByPaymentRef(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentRef = requestParameters["paymentRef"];
        if (_paymentRef === null || _paymentRef === undefined) {
            throw new Error('Required parameter paymentRef was null or undefined when calling getBreachableOperationByPaymentRef.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_paymentRef))}/breachreport`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBreachableOperationByPaymentRefUrl(requestParameters) {
        const _paymentRef = requestParameters["paymentRef"];
        if (_paymentRef === null || _paymentRef === undefined) {
            throw new Error('Required parameter paymentRef was null or undefined when calling getBreachableOperationByPaymentRef.');
        }
        return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_paymentRef))}/breachreport`;
    }
    getCurrency(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/currency`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCurrencyUrl() {
        return `${this.configuration.basePath}/client-api/v2/limits/currency`;
    }
    getGlobalLimits(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/global`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getGlobalLimitsUrl() {
        return `${this.configuration.basePath}/client-api/v2/limits/global`;
    }
    getSupportedPeriods(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/periods`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSupportedPeriodsUrl() {
        return `${this.configuration.basePath}/client-api/v2/limits/periods`;
    }
    postCurrentLimitsConsumptionsRetrieval(requestParameters, observe = 'body', reportProgress = false, options) {
        const _currentLimitsConsumptionsRetrievalPostRequestBody = requestParameters["currentLimitsConsumptionsRetrievalPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/consumptions`, _currentLimitsConsumptionsRetrievalPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postCurrentLimitsConsumptionsRetrievalUrl(requestParameters) {
        const _currentLimitsConsumptionsRetrievalPostRequestBody = requestParameters["currentLimitsConsumptionsRetrievalPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/limits/consumptions`;
    }
    postLimits(requestParameters, observe = 'body', reportProgress = false, options) {
        const _createLimitRequestBody = requestParameters["createLimitRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits`, _createLimitRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postLimitsUrl(requestParameters) {
        const _createLimitRequestBody = requestParameters["createLimitRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/limits`;
    }
    postLimitsRetrieval(requestParameters, observe = 'body', reportProgress = false, options) {
        const _limitsRetrievalPostRequestBody = requestParameters["limitsRetrievalPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/retrieval`, _limitsRetrievalPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postLimitsRetrievalUrl(requestParameters) {
        const _limitsRetrievalPostRequestBody = requestParameters["limitsRetrievalPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/limits/retrieval`;
    }
    postPeriodicLimitSoftCheck(requestParameters, observe = 'body', reportProgress = false, options) {
        const _periodicLimitSoftCheckPostRequestBody = requestParameters["periodicLimitSoftCheckPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/periodic/soft-check`, _periodicLimitSoftCheckPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postPeriodicLimitSoftCheckUrl(requestParameters) {
        const _periodicLimitSoftCheckPostRequestBody = requestParameters["periodicLimitSoftCheckPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/limits/periodic/soft-check`;
    }
    postTransactionalLimitSoftCheck(requestParameters, observe = 'body', reportProgress = false, options) {
        const _transactionalLimitSoftCheckPostRequestBody = requestParameters["transactionalLimitSoftCheckPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/transactional/soft-check`, _transactionalLimitSoftCheckPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postTransactionalLimitSoftCheckUrl(requestParameters) {
        const _transactionalLimitSoftCheckPostRequestBody = requestParameters["transactionalLimitSoftCheckPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/limits/transactional/soft-check`;
    }
    putApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling putApprovals.');
        }
        const _limitApprovalRequest = requestParameters["limitApprovalRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`, _limitApprovalRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putApprovalsUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling putApprovals.');
        }
        const _limitApprovalRequest = requestParameters["limitApprovalRequest"];
        return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`;
    }
    putGlobalLimits(requestParameters, observe = 'body', reportProgress = false, options) {
        const _upsertGlobalLimitsRequestBody = requestParameters["upsertGlobalLimitsRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/global`, _upsertGlobalLimitsRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putGlobalLimitsUrl(requestParameters) {
        const _upsertGlobalLimitsRequestBody = requestParameters["upsertGlobalLimitsRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/limits/global`;
    }
    putLimitByUuid(requestParameters, observe = 'body', reportProgress = false, options) {
        const _uuid = requestParameters["uuid"];
        if (_uuid === null || _uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling putLimitByUuid.');
        }
        const _updateLimitRequestBody = requestParameters["updateLimitRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_uuid))}`, _updateLimitRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putLimitByUuidUrl(requestParameters) {
        const _uuid = requestParameters["uuid"];
        if (_uuid === null || _uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling putLimitByUuid.');
        }
        const _updateLimitRequestBody = requestParameters["updateLimitRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_uuid))}`;
    }
}
LimitsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LimitsHttpService, deps: [{ token: i1.HttpClient }, { token: LIMIT_BASE_PATH, optional: true }, { token: LimitConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
LimitsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LimitsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LimitsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LIMIT_BASE_PATH]
                }] }, { type: LimitConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const LimitsHttpServiceGetApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/{approvalId}/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "alias": "Personal Service Agreement Limit",
                    "uuid": "1234-5678-9101-1121",
                    "user-BBID": "uuid-user-id",
                    "userName": "Full Username",
                    "entities": [{
                            "etype": "SA",
                            "eref": "550e8400-e29b-41d4-a716-446655440000",
                            "name": "Service agreement #1"
                        }],
                    "currency": "EUR",
                    "approval-currency": "EUR",
                    "periodic-limits-bounds": {
                        "daily": "100.0",
                        "weekly": "120.0",
                        "monthly": "300.0",
                        "quarterly": "600.0"
                    },
                    "approval-periodic-limits-bounds": {
                        "daily": "200.0",
                        "weekly": "300.0",
                        "monthly": "500.0",
                        "quarterly": "1000.0"
                    },
                    "shadow": true,
                    "approvalStatus": "PENDING"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/{paymentRef}/breachreport",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "payment": {
                            "refNo": "4563-3474-34553-24556",
                            "user-BBID": "550e8400-e29b-41d4-a716-446655440000",
                            "amount": "599.99",
                            "effectiveDate": "2017-01-31T12:12:12.000Z",
                            "currency": "EUR",
                            "paymentType": "Domestic Payments",
                            "state": "NEW"
                        },
                        "matchedLimits": 1,
                        "consumption": [{
                                "limitId": "4563-3474-34553-24556",
                                "limitCcy": "EUR",
                                "consumedAmount": "599.99",
                                "consumedOn": "2017-01-31T12:12:12.000Z",
                                "state": "CONSUMED"
                            }],
                        "checkTime": "2017-01-31T12:12:12.000Z",
                        "breachReport": [{
                                "alias": "Personal Service Agreement Limit",
                                "user-BBID": "oleksii",
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "alias": "Personal Limit",
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "alias": "Common Job Profile Limit",
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Payments approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic payments"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "alias": "",
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2017-01-01T00:00:00.000Z",
                                            "endTime": "2017-03-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }, {
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "TRANSACTIONAL",
                                        "currentThreshold": "499.9"
                                    }]
                            }],
                        "globalBreachReport": [{
                                "alias": "Service Agreement Limit",
                                "currency": "EUR",
                                "limitedEntity": [{
                                        "type": "Service Agreement"
                                    }],
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }]
                    }]
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServiceGetCurrencyMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/currency",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "defaultCurrency": "EUR",
                    "allowedCurrencyList": ["EUR", "USD", "AED"]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServiceGetGlobalLimitsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/global",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "limits": [{
                            "alias": "User Limit",
                            "uuid": "dfab7e60-064e-4af5-b54d-96d28fef0573",
                            "entities": [{
                                    "type": "USER"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "100.0",
                                "weekly": "120.0",
                                "monthly": "300.0",
                                "quarterly": "600.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "100"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "100.0"
                            }
                        }, {
                            "alias": "Service Agreement Limit",
                            "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                            "entities": [{
                                    "type": "SA"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "1000.0",
                                "weekly": "1200.0",
                                "monthly": "3000.0",
                                "quarterly": "6000.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "1000"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "1000.0"
                            }
                        }, {
                            "alias": "Legal Entity Limit",
                            "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                            "entities": [{
                                    "type": "LE"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "1000.0",
                                "weekly": "1200.0",
                                "monthly": "3000.0",
                                "quarterly": "6000.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "1000"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "1000.0"
                            }
                        }],
                    "currency": "EUR"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServiceGetSupportedPeriodsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/periods",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "name": "DAILY"
                    }, {
                        "name": "WEEKLY"
                    }, {
                        "name": "MONTHLY"
                    }, {
                        "name": "QUARTERLY"
                    }, {
                        "name": "YEARLY"
                    }]
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/consumptions",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "limit": {
                            "alias": "",
                            "uuid": "1234-5678-9101-1121",
                            "user-BBID": "uuid-user-id",
                            "entities": [{
                                    "etype": "LE",
                                    "eref": "550e8400-e29b-41d4-a716-446655440000"
                                }],
                            "currency": "EUR",
                            "periodic-limits-bounds": {
                                "daily": "100.0",
                                "weekly": "120.0",
                                "monthly": "300.0",
                                "quarterly": "600.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "100"
                                    }]
                            },
                            "shadow": true
                        },
                        "consumptions": {
                            "daily": "0.0",
                            "weekly": "50.0",
                            "monthly": "60.0",
                            "quarterly": "160.0",
                            "customPeriods": [{
                                    "period": "biweekly",
                                    "amount": "50"
                                }]
                        },
                        "checkTime": "2017-01-31T12:12:12.000Z"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServicePostLimitsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "uuid": "1234-1234-1312-5434"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServicePostLimitsRetrievalMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/retrieval",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "alias": "Personal Service Agreement Limit",
                        "uuid": "1234-5678-9101-1121",
                        "user-BBID": "uuid-user-id",
                        "entities": [{
                                "etype": "SA",
                                "eref": "550e8400-e29b-41d4-a716-446655440000"
                            }],
                        "approvalId": "710d559b-a922-424d-a21c-7e63b6351661",
                        "currency": "EUR",
                        "periodic-limits-bounds": {
                            "daily": "100.0",
                            "weekly": "120.0",
                            "monthly": "300.0",
                            "quarterly": "600.0",
                            "customPeriods": [{
                                    "period": "biweekly",
                                    "amount": "100"
                                }]
                        },
                        "shadow": true
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/periodic/soft-check",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/transactional/soft-check",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServicePutApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/{approvalId}/approvals",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "alias": "Personal Service Agreement Limit",
                    "uuid": "1234-5678-9101-1121",
                    "user-BBID": "uuid-user-id",
                    "entities": [{
                            "etype": "SA",
                            "eref": "550e8400-e29b-41d4-a716-446655440000"
                        }],
                    "currency": "EUR",
                    "periodic-limits-bounds": {
                        "daily": "100.0",
                        "weekly": "120.0",
                        "monthly": "300.0",
                        "quarterly": "600.0",
                        "customPeriods": [{
                                "period": "biweekly",
                                "amount": "100"
                            }]
                    },
                    "shadow": true,
                    "approvalStatus": "APPROVED"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServicePutGlobalLimitsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/global",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "limits": [{
                            "alias": "User Limit",
                            "uuid": "dfab7e60-064e-4af5-b54d-96d28fef0573",
                            "entities": [{
                                    "type": "USER"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "100.0",
                                "weekly": "120.0",
                                "monthly": "300.0",
                                "quarterly": "600.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "100"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "100.0"
                            }
                        }, {
                            "alias": "Service Agreement Limit",
                            "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                            "entities": [{
                                    "type": "SA"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "1000.0",
                                "weekly": "1200.0",
                                "monthly": "3000.0",
                                "quarterly": "6000.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "1000"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "1000.0"
                            }
                        }],
                    "currency": "EUR",
                    "approvalId": "911c07d1-7f0c-4437-b27b-ae0d2bcf9e5c"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServicePutLimitByUuidMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/limits/{uuid}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "alias": "Personal Service Agreement Limit",
                    "uuid": "1234-5678-9101-1121",
                    "user-BBID": "uuid-user-id",
                    "entities": [{
                            "etype": "SA",
                            "eref": "550e8400-e29b-41d4-a716-446655440000"
                        }],
                    "approvalId": "d1d0e7d0-30a4-472b-a8c0-3908b9e3847a",
                    "approvalStatus": "PENDING",
                    "currency": "EUR",
                    "periodic-limits-bounds": {
                        "daily": "100.0",
                        "weekly": "120.0",
                        "monthly": "300.0",
                        "quarterly": "600.0",
                        "customPeriods": [{
                                "period": "biweekly",
                                "amount": "100"
                            }]
                    },
                    "shadow": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LimitsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/limits/{approvalId}/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "alias": "Personal Service Agreement Limit",
                    "uuid": "1234-5678-9101-1121",
                    "user-BBID": "uuid-user-id",
                    "userName": "Full Username",
                    "entities": [{
                            "etype": "SA",
                            "eref": "550e8400-e29b-41d4-a716-446655440000",
                            "name": "Service agreement #1"
                        }],
                    "currency": "EUR",
                    "approval-currency": "EUR",
                    "periodic-limits-bounds": {
                        "daily": "100.0",
                        "weekly": "120.0",
                        "monthly": "300.0",
                        "quarterly": "600.0"
                    },
                    "approval-periodic-limits-bounds": {
                        "daily": "200.0",
                        "weekly": "300.0",
                        "monthly": "500.0",
                        "quarterly": "1000.0"
                    },
                    "shadow": true,
                    "approvalStatus": "PENDING"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/{paymentRef}/breachreport",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "payment": {
                            "refNo": "4563-3474-34553-24556",
                            "user-BBID": "550e8400-e29b-41d4-a716-446655440000",
                            "amount": "599.99",
                            "effectiveDate": "2017-01-31T12:12:12.000Z",
                            "currency": "EUR",
                            "paymentType": "Domestic Payments",
                            "state": "NEW"
                        },
                        "matchedLimits": 1,
                        "consumption": [{
                                "limitId": "4563-3474-34553-24556",
                                "limitCcy": "EUR",
                                "consumedAmount": "599.99",
                                "consumedOn": "2017-01-31T12:12:12.000Z",
                                "state": "CONSUMED"
                            }],
                        "checkTime": "2017-01-31T12:12:12.000Z",
                        "breachReport": [{
                                "alias": "Personal Service Agreement Limit",
                                "user-BBID": "oleksii",
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "alias": "Personal Limit",
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "alias": "Common Job Profile Limit",
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Payments approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic payments"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "alias": "",
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2017-01-01T00:00:00.000Z",
                                            "endTime": "2017-03-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }, {
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "TRANSACTIONAL",
                                        "currentThreshold": "499.9"
                                    }]
                            }],
                        "globalBreachReport": [{
                                "alias": "Service Agreement Limit",
                                "currency": "EUR",
                                "limitedEntity": [{
                                        "type": "Service Agreement"
                                    }],
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2017-01-31T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2017-01-01T00:00:00.000Z",
                                            "endTime": "2017-01-31T23:59:59.000Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }]
                    }]
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/currency",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "defaultCurrency": "EUR",
                    "allowedCurrencyList": ["EUR", "USD", "AED"]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/global",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "limits": [{
                            "alias": "User Limit",
                            "uuid": "dfab7e60-064e-4af5-b54d-96d28fef0573",
                            "entities": [{
                                    "type": "USER"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "100.0",
                                "weekly": "120.0",
                                "monthly": "300.0",
                                "quarterly": "600.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "100"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "100.0"
                            }
                        }, {
                            "alias": "Service Agreement Limit",
                            "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                            "entities": [{
                                    "type": "SA"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "1000.0",
                                "weekly": "1200.0",
                                "monthly": "3000.0",
                                "quarterly": "6000.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "1000"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "1000.0"
                            }
                        }, {
                            "alias": "Legal Entity Limit",
                            "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                            "entities": [{
                                    "type": "LE"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "1000.0",
                                "weekly": "1200.0",
                                "monthly": "3000.0",
                                "quarterly": "6000.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "1000"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "1000.0"
                            }
                        }],
                    "currency": "EUR"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/periods",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "name": "DAILY"
                    }, {
                        "name": "WEEKLY"
                    }, {
                        "name": "MONTHLY"
                    }, {
                        "name": "QUARTERLY"
                    }, {
                        "name": "YEARLY"
                    }]
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/consumptions",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "limit": {
                            "alias": "",
                            "uuid": "1234-5678-9101-1121",
                            "user-BBID": "uuid-user-id",
                            "entities": [{
                                    "etype": "LE",
                                    "eref": "550e8400-e29b-41d4-a716-446655440000"
                                }],
                            "currency": "EUR",
                            "periodic-limits-bounds": {
                                "daily": "100.0",
                                "weekly": "120.0",
                                "monthly": "300.0",
                                "quarterly": "600.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "100"
                                    }]
                            },
                            "shadow": true
                        },
                        "consumptions": {
                            "daily": "0.0",
                            "weekly": "50.0",
                            "monthly": "60.0",
                            "quarterly": "160.0",
                            "customPeriods": [{
                                    "period": "biweekly",
                                    "amount": "50"
                                }]
                        },
                        "checkTime": "2017-01-31T12:12:12.000Z"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "uuid": "1234-1234-1312-5434"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/retrieval",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "alias": "Personal Service Agreement Limit",
                        "uuid": "1234-5678-9101-1121",
                        "user-BBID": "uuid-user-id",
                        "entities": [{
                                "etype": "SA",
                                "eref": "550e8400-e29b-41d4-a716-446655440000"
                            }],
                        "approvalId": "710d559b-a922-424d-a21c-7e63b6351661",
                        "currency": "EUR",
                        "periodic-limits-bounds": {
                            "daily": "100.0",
                            "weekly": "120.0",
                            "monthly": "300.0",
                            "quarterly": "600.0",
                            "customPeriods": [{
                                    "period": "biweekly",
                                    "amount": "100"
                                }]
                        },
                        "shadow": true
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/periodic/soft-check",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/transactional/soft-check",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/{approvalId}/approvals",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "alias": "Personal Service Agreement Limit",
                    "uuid": "1234-5678-9101-1121",
                    "user-BBID": "uuid-user-id",
                    "entities": [{
                            "etype": "SA",
                            "eref": "550e8400-e29b-41d4-a716-446655440000"
                        }],
                    "currency": "EUR",
                    "periodic-limits-bounds": {
                        "daily": "100.0",
                        "weekly": "120.0",
                        "monthly": "300.0",
                        "quarterly": "600.0",
                        "customPeriods": [{
                                "period": "biweekly",
                                "amount": "100"
                            }]
                    },
                    "shadow": true,
                    "approvalStatus": "APPROVED"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/global",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "limits": [{
                            "alias": "User Limit",
                            "uuid": "dfab7e60-064e-4af5-b54d-96d28fef0573",
                            "entities": [{
                                    "type": "USER"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "100.0",
                                "weekly": "120.0",
                                "monthly": "300.0",
                                "quarterly": "600.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "100"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "100.0"
                            }
                        }, {
                            "alias": "Service Agreement Limit",
                            "uuid": "a93cf136-ef7a-48eb-bde8-7f50e42540c8",
                            "entities": [{
                                    "type": "SA"
                                }],
                            "periodic-limits-bounds": {
                                "daily": "1000.0",
                                "weekly": "1200.0",
                                "monthly": "3000.0",
                                "quarterly": "6000.0",
                                "customPeriods": [{
                                        "period": "biweekly",
                                        "amount": "1000"
                                    }]
                            },
                            "transactional-limits-bound": {
                                "amount": "1000.0"
                            }
                        }],
                    "currency": "EUR",
                    "approvalId": "911c07d1-7f0c-4437-b27b-ae0d2bcf9e5c"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/limits/{uuid}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "alias": "Personal Service Agreement Limit",
                    "uuid": "1234-5678-9101-1121",
                    "user-BBID": "uuid-user-id",
                    "entities": [{
                            "etype": "SA",
                            "eref": "550e8400-e29b-41d4-a716-446655440000"
                        }],
                    "approvalId": "d1d0e7d0-30a4-472b-a8c0-3908b9e3847a",
                    "approvalStatus": "PENDING",
                    "currency": "EUR",
                    "periodic-limits-bounds": {
                        "daily": "100.0",
                        "weekly": "120.0",
                        "monthly": "300.0",
                        "quarterly": "600.0",
                        "customPeriods": [{
                                "period": "biweekly",
                                "amount": "100"
                            }]
                    },
                    "shadow": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 422,
                body: {
                    "message": "Unprocessable Entity",
                    "errors": [{
                            "message": "Array size is over {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "100"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { ApprovalStatus, BreachType, BreachedLimitType, COLLECTION_FORMATS, CONFIG_TOKEN, Consumption, GlobalLimitsApprovalHttpService, GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider, GlobalLimitsApprovalHttpServiceMocksProvider, GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider, LIMIT_BASE_PATH, LimitApiModule, LimitConfiguration, LimitsHttpService, LimitsHttpServiceGetApprovalsMocksProvider, LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider, LimitsHttpServiceGetCurrencyMocksProvider, LimitsHttpServiceGetGlobalLimitsMocksProvider, LimitsHttpServiceGetSupportedPeriodsMocksProvider, LimitsHttpServiceMocksProvider, LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider, LimitsHttpServicePostLimitsMocksProvider, LimitsHttpServicePostLimitsRetrievalMocksProvider, LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider, LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider, LimitsHttpServicePutApprovalsMocksProvider, LimitsHttpServicePutGlobalLimitsMocksProvider, LimitsHttpServicePutLimitByUuidMocksProvider, PaymentState };
//# sourceMappingURL=backbase-limit-http-ang.js.map
