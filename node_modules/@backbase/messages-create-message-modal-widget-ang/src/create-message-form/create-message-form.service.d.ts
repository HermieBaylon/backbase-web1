import { Observable } from 'rxjs';
import { BaseCreateMessageFormService } from '@backbase/messages-common';
import { DeleteDraftsResponseBody, DraftPostResponseBody, MessageDraftGetResponseBody, MessageDraftPutRequestBody, MessageDraftsPostRequestBody, PresentationMessagePostRequestBody, PresentationMessagePostResponseBody, TopicsGetResponseBody, MessagecenterHttpService } from '@backbase/messages-v5-http-ang';
import * as i0 from "@angular/core";
export declare class CreateMessageFormService implements BaseCreateMessageFormService<PresentationMessagePostRequestBody> {
    private readonly messagesService;
    constructor(messagesService: MessagecenterHttpService);
    /**
     * Get topics
     *
     * @returns Topics stream
     */
    getTopics(): Observable<TopicsGetResponseBody[] | null>;
    /**
     * Create message
     *
     * @param params Create message request body
     * @returns Post message stream
     */
    createMessage(params: PresentationMessagePostRequestBody): Observable<PresentationMessagePostResponseBody | null>;
    /**
     * Save message draft
     *
     * @param body Save draft request body
     * @returns Safe draft stream
     */
    saveDraft(body: MessageDraftsPostRequestBody): Observable<DraftPostResponseBody | null>;
    /**
     * Get message draft
     *
     * @param draftId Draft id
     * @returns Draft stream
     */
    getDraft(draftId: string): Observable<MessageDraftGetResponseBody | null>;
    /**
     * Delete draft
     *
     * @param draftId Draft id
     * @returns Delete draft stream
     */
    deleteDraft(draftId: string): Observable<DeleteDraftsResponseBody | null>;
    /**
     * Update draft
     *
     * @param draftId Draft id
     * @param body Update draft request body
     * @returns Update draft stream
     */
    updateDraft(draftId: string, body: MessageDraftPutRequestBody): Observable<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<CreateMessageFormService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CreateMessageFormService>;
}
