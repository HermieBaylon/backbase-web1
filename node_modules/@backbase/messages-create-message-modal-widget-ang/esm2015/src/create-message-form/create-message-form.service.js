import { Injectable } from '@angular/core';
import { catchError } from 'rxjs/operators';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-v5-http-ang";
export class CreateMessageFormService {
    constructor(messagesService) {
        this.messagesService = messagesService;
    }
    /**
     * Get topics
     *
     * @returns Topics stream
     */
    getTopics() {
        return this.messagesService.getTopics().pipe(catchError(() => of([])));
    }
    /**
     * Create message
     *
     * @param params Create message request body
     * @returns Post message stream
     */
    createMessage(params) {
        return this.messagesService.postMessages({ presentationMessagePostRequestBody: params });
    }
    /**
     * Save message draft
     *
     * @param body Save draft request body
     * @returns Safe draft stream
     */
    saveDraft(body) {
        return this.messagesService.postMessageDrafts({ messageDraftsPostRequestBody: body });
    }
    /**
     * Get message draft
     *
     * @param draftId Draft id
     * @returns Draft stream
     */
    getDraft(draftId) {
        return this.messagesService.getMessageDraft({ draftId });
    }
    /**
     * Delete draft
     *
     * @param draftId Draft id
     * @returns Delete draft stream
     */
    deleteDraft(draftId) {
        return this.messagesService.deleteMessageDrafts({ ids: [draftId] });
    }
    /**
     * Update draft
     *
     * @param draftId Draft id
     * @param body Update draft request body
     * @returns Update draft stream
     */
    updateDraft(draftId, body) {
        return this.messagesService.putMessageDraft({ draftId, messageDraftPutRequestBody: body });
    }
}
CreateMessageFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormService, deps: [{ token: i1.MessagecenterHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
CreateMessageFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagecenterHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLW1lc3NhZ2UtZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tZXNzYWdlcy1jcmVhdGUtbWVzc2FnZS1tb2RhbC13aWRnZXQtYW5nL3NyYy9jcmVhdGUtbWVzc2FnZS1mb3JtL2NyZWF0ZS1tZXNzYWdlLWZvcm0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFldEMsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQyxZQUE2QixlQUF5QztRQUF6QyxvQkFBZSxHQUFmLGVBQWUsQ0FBMEI7SUFBRyxDQUFDO0lBRTFFOzs7O09BSUc7SUFDSCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxhQUFhLENBQUMsTUFBMEM7UUFDdEQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsU0FBUyxDQUFDLElBQWtDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLDRCQUE0QixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsUUFBUSxDQUFDLE9BQWU7UUFDdEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsV0FBVyxDQUFDLE9BQWU7UUFDekIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxXQUFXLENBQUMsT0FBZSxFQUFFLElBQWdDO1FBQzNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM3RixDQUFDOztzSEE3RFUsd0JBQXdCOzBIQUF4Qix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFEcEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQmFzZUNyZWF0ZU1lc3NhZ2VGb3JtU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9tZXNzYWdlcy1jb21tb24nO1xuaW1wb3J0IHtcbiAgRGVsZXRlRHJhZnRzUmVzcG9uc2VCb2R5LFxuICBEcmFmdFBvc3RSZXNwb25zZUJvZHksXG4gIE1lc3NhZ2VEcmFmdEdldFJlc3BvbnNlQm9keSxcbiAgTWVzc2FnZURyYWZ0UHV0UmVxdWVzdEJvZHksXG4gIE1lc3NhZ2VEcmFmdHNQb3N0UmVxdWVzdEJvZHksXG4gIFByZXNlbnRhdGlvbk1lc3NhZ2VQb3N0UmVxdWVzdEJvZHksXG4gIFByZXNlbnRhdGlvbk1lc3NhZ2VQb3N0UmVzcG9uc2VCb2R5LFxuICBUb3BpY3NHZXRSZXNwb25zZUJvZHksXG4gIE1lc3NhZ2VjZW50ZXJIdHRwU2VydmljZSxcbn0gZnJvbSAnQGJhY2tiYXNlL21lc3NhZ2VzLXY1LWh0dHAtYW5nJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENyZWF0ZU1lc3NhZ2VGb3JtU2VydmljZSBpbXBsZW1lbnRzIEJhc2VDcmVhdGVNZXNzYWdlRm9ybVNlcnZpY2U8UHJlc2VudGF0aW9uTWVzc2FnZVBvc3RSZXF1ZXN0Qm9keT4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1lc3NhZ2VzU2VydmljZTogTWVzc2FnZWNlbnRlckh0dHBTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBHZXQgdG9waWNzXG4gICAqXG4gICAqIEByZXR1cm5zIFRvcGljcyBzdHJlYW1cbiAgICovXG4gIGdldFRvcGljcygpOiBPYnNlcnZhYmxlPFRvcGljc0dldFJlc3BvbnNlQm9keVtdIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzU2VydmljZS5nZXRUb3BpY3MoKS5waXBlKGNhdGNoRXJyb3IoKCkgPT4gb2YoW10pKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIG1lc3NhZ2VcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyBDcmVhdGUgbWVzc2FnZSByZXF1ZXN0IGJvZHlcbiAgICogQHJldHVybnMgUG9zdCBtZXNzYWdlIHN0cmVhbVxuICAgKi9cbiAgY3JlYXRlTWVzc2FnZShwYXJhbXM6IFByZXNlbnRhdGlvbk1lc3NhZ2VQb3N0UmVxdWVzdEJvZHkpOiBPYnNlcnZhYmxlPFByZXNlbnRhdGlvbk1lc3NhZ2VQb3N0UmVzcG9uc2VCb2R5IHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzU2VydmljZS5wb3N0TWVzc2FnZXMoeyBwcmVzZW50YXRpb25NZXNzYWdlUG9zdFJlcXVlc3RCb2R5OiBwYXJhbXMgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSBtZXNzYWdlIGRyYWZ0XG4gICAqXG4gICAqIEBwYXJhbSBib2R5IFNhdmUgZHJhZnQgcmVxdWVzdCBib2R5XG4gICAqIEByZXR1cm5zIFNhZmUgZHJhZnQgc3RyZWFtXG4gICAqL1xuICBzYXZlRHJhZnQoYm9keTogTWVzc2FnZURyYWZ0c1Bvc3RSZXF1ZXN0Qm9keSk6IE9ic2VydmFibGU8RHJhZnRQb3N0UmVzcG9uc2VCb2R5IHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzU2VydmljZS5wb3N0TWVzc2FnZURyYWZ0cyh7IG1lc3NhZ2VEcmFmdHNQb3N0UmVxdWVzdEJvZHk6IGJvZHkgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG1lc3NhZ2UgZHJhZnRcbiAgICpcbiAgICogQHBhcmFtIGRyYWZ0SWQgRHJhZnQgaWRcbiAgICogQHJldHVybnMgRHJhZnQgc3RyZWFtXG4gICAqL1xuICBnZXREcmFmdChkcmFmdElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPE1lc3NhZ2VEcmFmdEdldFJlc3BvbnNlQm9keSB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1NlcnZpY2UuZ2V0TWVzc2FnZURyYWZ0KHsgZHJhZnRJZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgZHJhZnRcbiAgICpcbiAgICogQHBhcmFtIGRyYWZ0SWQgRHJhZnQgaWRcbiAgICogQHJldHVybnMgRGVsZXRlIGRyYWZ0IHN0cmVhbVxuICAgKi9cbiAgZGVsZXRlRHJhZnQoZHJhZnRJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxEZWxldGVEcmFmdHNSZXNwb25zZUJvZHkgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXNTZXJ2aWNlLmRlbGV0ZU1lc3NhZ2VEcmFmdHMoeyBpZHM6IFtkcmFmdElkXSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgZHJhZnRcbiAgICpcbiAgICogQHBhcmFtIGRyYWZ0SWQgRHJhZnQgaWRcbiAgICogQHBhcmFtIGJvZHkgVXBkYXRlIGRyYWZ0IHJlcXVlc3QgYm9keVxuICAgKiBAcmV0dXJucyBVcGRhdGUgZHJhZnQgc3RyZWFtXG4gICAqL1xuICB1cGRhdGVEcmFmdChkcmFmdElkOiBzdHJpbmcsIGJvZHk6IE1lc3NhZ2VEcmFmdFB1dFJlcXVlc3RCb2R5KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1NlcnZpY2UucHV0TWVzc2FnZURyYWZ0KHsgZHJhZnRJZCwgbWVzc2FnZURyYWZ0UHV0UmVxdWVzdEJvZHk6IGJvZHkgfSk7XG4gIH1cbn1cbiJdfQ==