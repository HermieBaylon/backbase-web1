import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const PresentationAccountCategory = {
    Asset: 'Asset',
    Expense: 'Expense',
    Income: 'Income',
    Liability: 'Liability',
    Equity: 'Equity',
    Uncategorised: 'Uncategorised'
};

const PresentationAuthorizationStatus = {
    PendingInitialAuth: 'PendingInitialAuth',
    Authorized: 'Authorized',
    Deauthorized: 'Deauthorized'
};

const PresentationCounterpartyType = {
    Customer: 'Customer',
    Supplier: 'Supplier'
};

const PresentationPayableStatus = {
    Draft: 'Draft',
    Open: 'Open',
    PartiallyPaid: 'PartiallyPaid',
    Paid: 'Paid',
    Unknown: 'Unknown'
};

const PresentationReceivableStatus = {
    Draft: 'Draft',
    Submitted: 'Submitted',
    PartiallyPaid: 'PartiallyPaid',
    Paid: 'Paid'
};

const CASH_FLOW_BASE_PATH = new InjectionToken('CASH_FLOW_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class CashFlowConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module CashFlowConfiguration');

class CashFlowApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('CashFlowApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: CashFlowApiModule,
            providers: [{ provide: CashFlowConfiguration, useFactory: configurationFactory }]
        };
    }
}
CashFlowApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CashFlowApiModule, deps: [{ token: CashFlowApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: CashFlowConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
CashFlowApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CashFlowApiModule });
CashFlowApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CashFlowApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CashFlowApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: CashFlowApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: CashFlowConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class AccountingPlatformsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashFlowConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getAccountingPlatforms(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/accounting-platforms`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAccountingPlatformsUrl() {
        return `${this.configuration.basePath}/client-api/v1/accounting-platforms`;
    }
}
AccountingPlatformsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountingPlatformsHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_FLOW_BASE_PATH, optional: true }, { token: CashFlowConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccountingPlatformsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountingPlatformsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountingPlatformsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_FLOW_BASE_PATH]
                }] }, { type: CashFlowConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const AccountingPlatformsHttpServiceGetAccountingPlatformsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/accounting-platforms",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "quickbooks",
                        "logoUrl": "https://quickbooks.intuit.com/content/dam/intuit/quickbooks/common/qb_thumb.png",
                        "name": "QuickBooks"
                    }, {
                        "id": "xero",
                        "logoUrl": "https://www.xero.com/etc/designs/xero-cms/clientlib/assets/img/logo/logo-xero-blue.svg",
                        "name": "Xero"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const AccountingPlatformsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/accounting-platforms",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "quickbooks",
                        "logoUrl": "https://quickbooks.intuit.com/content/dam/intuit/quickbooks/common/qb_thumb.png",
                        "name": "QuickBooks"
                    }, {
                        "id": "xero",
                        "logoUrl": "https://www.xero.com/etc/designs/xero-cms/clientlib/assets/img/logo/logo-xero-blue.svg",
                        "name": "Xero"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class ChartOfAccountsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashFlowConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getChartOfAccounts(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/chart-of-accounts`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getChartOfAccountsUrl() {
        return `${this.configuration.basePath}/client-api/v1/chart-of-accounts`;
    }
}
ChartOfAccountsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChartOfAccountsHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_FLOW_BASE_PATH, optional: true }, { token: CashFlowConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ChartOfAccountsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChartOfAccountsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChartOfAccountsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_FLOW_BASE_PATH]
                }] }, { type: CashFlowConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ChartOfAccountsHttpServiceGetChartOfAccountsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/chart-of-accounts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "syncDatetime": "2020-11-05T12:06:43Z",
                    "chartOfAccounts": [{
                            "id": "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad",
                            "name": "Accounts Receivable",
                            "nominalCode": "84",
                            "category": "Asset"
                        }, {
                            "id": "77b9ba20-924e-4be8-8077-87278297d915",
                            "name": "Checking",
                            "nominalCode": "35",
                            "category": "Asset"
                        }, {
                            "id": "7e776b86-151e-4a4a-a60a-f36e682e2a50",
                            "name": "Depreciation",
                            "nominalCode": "39",
                            "category": "Asset"
                        }, {
                            "id": "1f4efcfd-4e03-49d4-b7a4-3f976f2045db",
                            "name": "Inventory Asset",
                            "nominalCode": "81",
                            "category": "Asset"
                        }, {
                            "id": "271c798c-031c-4cfc-828c-d40e37fbb003",
                            "name": "Original Cost",
                            "nominalCode": "38",
                            "category": "Asset"
                        }, {
                            "id": "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf",
                            "name": "Prepaid Expenses",
                            "nominalCode": "3",
                            "category": "Asset"
                        }, {
                            "id": "497559c7-60bf-476c-8b16-09b8952a9722",
                            "name": "Savings",
                            "nominalCode": "36",
                            "category": "Asset"
                        }, {
                            "id": "9e68b349-72af-4cf3-8ea8-abd76f31064e",
                            "name": "Truck",
                            "nominalCode": "37",
                            "category": "Asset"
                        }, {
                            "id": "5f4450f5-7d1b-4cc3-be31-af9df6488a50",
                            "name": "Uncategorized Asset",
                            "nominalCode": "32",
                            "category": "Asset"
                        }, {
                            "id": "1b953b3a-0ea7-4b87-b5ca-33598b68546b",
                            "name": "Undeposited Funds",
                            "nominalCode": "4",
                            "category": "Asset"
                        }, {
                            "id": "6b718262-6099-4f32-9795-7aae2a25eac7",
                            "name": "Opening Balance Equity",
                            "nominalCode": "34",
                            "category": "Equity"
                        }, {
                            "id": "22a92103-3ee1-41fa-9722-1fc209caa2c2",
                            "name": "Retained Earnings",
                            "nominalCode": "2",
                            "category": "Equity"
                        }, {
                            "id": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                            "name": "Accounting",
                            "nominalCode": "69",
                            "category": "Expense"
                        }, {
                            "id": "d4721d9a-d77b-4361-9807-09331ffcb6af",
                            "name": "Advertising",
                            "nominalCode": "7",
                            "category": "Expense"
                        }, {
                            "id": "b427bbbe-d104-46c5-b6a6-c13e37e5533f",
                            "name": "Automobile",
                            "nominalCode": "55",
                            "category": "Expense"
                        }, {
                            "id": "771aad7c-70d2-4f7e-9309-0ab33e11e589",
                            "name": "Bank Charges",
                            "nominalCode": "8",
                            "category": "Expense"
                        }, {
                            "id": "3d9747ce-afbf-4ff1-b23d-559206c5998c",
                            "name": "Bookkeeper",
                            "nominalCode": "70",
                            "category": "Expense"
                        }, {
                            "id": "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c",
                            "name": "Building Repairs",
                            "nominalCode": "73",
                            "category": "Expense"
                        }, {
                            "id": "4d0fca62-d1e0-48fe-8481-9410f25ea4bf",
                            "name": "Commissions & fees",
                            "nominalCode": "9",
                            "category": "Expense"
                        }, {
                            "id": "4339c2ee-4040-4996-acf5-810b6c8eb337",
                            "name": "Computer Repairs",
                            "nominalCode": "74",
                            "category": "Expense"
                        }, {
                            "id": "5270f4e2-d0e0-407d-aa12-87954a3d3e74",
                            "name": "Cost of Goods Sold",
                            "nominalCode": "80",
                            "category": "Expense"
                        }, {
                            "id": "f421c967-88eb-43c1-b19e-aa03f15f67ce",
                            "name": "Cost of Labor",
                            "nominalCode": "59",
                            "category": "Expense"
                        }, {
                            "id": "1137cd94-52b1-45b5-a573-1723c89a35f2",
                            "name": "Decks and Patios",
                            "nominalCode": "64",
                            "category": "Expense"
                        }, {
                            "id": "264c45c4-408e-4d80-ab8e-be4a3babb6c8",
                            "name": "Depreciation",
                            "nominalCode": "40",
                            "category": "Expense"
                        }, {
                            "id": "ccfb434a-b289-441c-99a2-30e05a572057",
                            "name": "Disposal Fees",
                            "nominalCode": "28",
                            "category": "Expense"
                        }, {
                            "id": "9c400ca0-009e-475a-abc6-d5a76154aa0a",
                            "name": "Dues & Subscriptions",
                            "nominalCode": "10",
                            "category": "Expense"
                        }, {
                            "id": "74d34736-f4a0-4638-9465-4f5254ddb1b5",
                            "name": "Equipment Rental",
                            "nominalCode": "29",
                            "category": "Expense"
                        }, {
                            "id": "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d",
                            "name": "Equipment Rental",
                            "nominalCode": "62",
                            "category": "Expense"
                        }, {
                            "id": "0d9d51d4-b347-480b-88f3-6107f0ba343f",
                            "name": "Equipment Repairs",
                            "nominalCode": "75",
                            "category": "Expense"
                        }, {
                            "id": "f697f236-19a0-4c4f-be80-9e9f02ec7a6f",
                            "name": "Fountain and Garden Lighting",
                            "nominalCode": "65",
                            "category": "Expense"
                        }, {
                            "id": "7877e117-f0ac-4142-841f-84e062f77128",
                            "name": "Fuel",
                            "nominalCode": "56",
                            "category": "Expense"
                        }, {
                            "id": "225f6f2a-445e-48b3-88b5-e3f9daae059a",
                            "name": "Gas and Electric",
                            "nominalCode": "76",
                            "category": "Expense"
                        }, {
                            "id": "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645",
                            "name": "Installation",
                            "nominalCode": "60",
                            "category": "Expense"
                        }, {
                            "id": "5d8860e2-a624-4009-b9a9-6f7d9add93d5",
                            "name": "Insurance",
                            "nominalCode": "11",
                            "category": "Expense"
                        }, {
                            "id": "ee810af9-3b00-4de7-9204-c0cbc9bca5f8",
                            "name": "Job Expenses",
                            "nominalCode": "58",
                            "category": "Expense"
                        }, {
                            "id": "ecc43720-0fb4-4b20-9561-73f78021a3fa",
                            "name": "Job Materials",
                            "nominalCode": "63",
                            "category": "Expense"
                        }, {
                            "id": "4a959dfe-428f-48c2-88f6-efc155f2a19c",
                            "name": "Lawyer",
                            "nominalCode": "71",
                            "category": "Expense"
                        }, {
                            "id": "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec",
                            "name": "Legal & Professional Fees",
                            "nominalCode": "12",
                            "category": "Expense"
                        }, {
                            "id": "6333a502-088a-4314-a8d1-05e5cf61e023",
                            "name": "Maintenance and Repair",
                            "nominalCode": "72",
                            "category": "Expense"
                        }, {
                            "id": "4edf486e-f6a7-45a8-9c0b-693675d0b65a",
                            "name": "Maintenance and Repairs",
                            "nominalCode": "61",
                            "category": "Expense"
                        }, {
                            "id": "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad",
                            "name": "Meals and Entertainment",
                            "nominalCode": "13",
                            "category": "Expense"
                        }, {
                            "id": "b2e758c5-92f5-4f52-b915-cc8ea0357868",
                            "name": "Miscellaneous",
                            "nominalCode": "14",
                            "category": "Expense"
                        }, {
                            "id": "1e870df7-7255-41e2-8220-e24c301af038",
                            "name": "Office Expenses",
                            "nominalCode": "15",
                            "category": "Expense"
                        }, {
                            "id": "180cc81e-5621-45f1-8b2f-a7b1aa20cee7",
                            "name": "Penalties & Settlements",
                            "nominalCode": "27",
                            "category": "Expense"
                        }, {
                            "id": "ba81920a-23b7-4634-946f-47f0067d9e1a",
                            "name": "Permits",
                            "nominalCode": "68",
                            "category": "Expense"
                        }, {
                            "id": "c4b4f130-c536-4b83-bbc7-15a7eda2fa67",
                            "name": "Plants and Soil",
                            "nominalCode": "66",
                            "category": "Expense"
                        }, {
                            "id": "8fca197a-3242-4795-8b06-48d821315ad1",
                            "name": "Promotional",
                            "nominalCode": "16",
                            "category": "Expense"
                        }, {
                            "id": "22ed0181-f38c-4a2d-a84e-c5505eb5f14c",
                            "name": "Purchases",
                            "nominalCode": "78",
                            "category": "Expense"
                        }, {
                            "id": "3b353731-f571-4854-8240-0d49cc81fecc",
                            "name": "Rent or Lease",
                            "nominalCode": "17",
                            "category": "Expense"
                        }, {
                            "id": "8e03d0a6-f172-40bd-adf1-3834e9734267",
                            "name": "Repair & Maintenance (deleted)",
                            "nominalCode": "18",
                            "category": "Expense"
                        }, {
                            "id": "bc366bf7-30db-4856-9f65-06ffc01596f5",
                            "name": "Sprinklers and Drip Systems",
                            "nominalCode": "67",
                            "category": "Expense"
                        }, {
                            "id": "c9205c03-ea6a-48a0-be07-733f894db4d8",
                            "name": "Stationery & Printing",
                            "nominalCode": "19",
                            "category": "Expense"
                        }, {
                            "id": "d61afb14-0da1-43ba-935e-4b4a08a012fe",
                            "name": "Supplies",
                            "nominalCode": "20",
                            "category": "Expense"
                        }, {
                            "id": "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8",
                            "name": "Taxes & Licenses",
                            "nominalCode": "21",
                            "category": "Expense"
                        }, {
                            "id": "acf2e2dd-cc98-4c16-a705-d0010b593083",
                            "name": "Telephone",
                            "nominalCode": "77",
                            "category": "Expense"
                        }, {
                            "id": "0e0f7942-612f-481c-8166-ea33fe398a74",
                            "name": "Travel",
                            "nominalCode": "22",
                            "category": "Expense"
                        }, {
                            "id": "1d8e3740-6e22-4908-b37e-7de8bd9a012c",
                            "name": "Travel Meals",
                            "nominalCode": "23",
                            "category": "Expense"
                        }, {
                            "id": "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea",
                            "name": "Unapplied Cash Bill Payment Expense",
                            "nominalCode": "88",
                            "category": "Expense"
                        }, {
                            "id": "3d8fed9c-8726-44fe-bdb0-da49d9457a8d",
                            "name": "Uncategorized Expense",
                            "nominalCode": "31",
                            "category": "Expense"
                        }, {
                            "id": "ca5ea429-6cc0-4870-8513-a4e696b312d4",
                            "name": "Utilities",
                            "nominalCode": "24",
                            "category": "Expense"
                        }, {
                            "id": "a3ad5046-6a41-4b55-9072-66e5872fba62",
                            "name": "Workers Compensation",
                            "nominalCode": "57",
                            "category": "Expense"
                        }, {
                            "id": "773e43aa-8505-48b9-94ef-d7bc5786609a",
                            "name": "Billable Expense Income",
                            "nominalCode": "85",
                            "category": "Income"
                        }, {
                            "id": "026dccb9-d8f6-4116-a3ff-872d0cd628f3",
                            "name": "Decks and Patios",
                            "nominalCode": "47",
                            "category": "Income"
                        }, {
                            "id": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                            "name": "Design income",
                            "nominalCode": "82",
                            "category": "Income"
                        }, {
                            "id": "587bc9dd-553d-4b3d-88d8-5256eedfb499",
                            "name": "Discounts given",
                            "nominalCode": "86",
                            "category": "Income"
                        }, {
                            "id": "ef961774-568d-4746-a790-fa8e22907db5",
                            "name": "Fees Billed",
                            "nominalCode": "5",
                            "category": "Income"
                        }, {
                            "id": "1158aa19-894e-40ea-a54f-f2c6808c879a",
                            "name": "Fountains and Garden Lighting",
                            "nominalCode": "48",
                            "category": "Income"
                        }, {
                            "id": "442e062b-8585-4f14-9763-8990c9fd6087",
                            "name": "Installation",
                            "nominalCode": "52",
                            "category": "Income"
                        }, {
                            "id": "81860ebb-997f-47b6-a1ff-30988af2520d",
                            "name": "Interest Earned",
                            "nominalCode": "25",
                            "category": "Income"
                        }, {
                            "id": "1bb12d54-9d81-4b63-b1c1-af419e47a687",
                            "name": "Job Materials",
                            "nominalCode": "46",
                            "category": "Income"
                        }, {
                            "id": "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff",
                            "name": "Labor",
                            "nominalCode": "51",
                            "category": "Income"
                        }, {
                            "id": "dc2af3cd-9c29-4c23-b081-0ceac31d4406",
                            "name": "Landscaping Services",
                            "nominalCode": "45",
                            "category": "Income"
                        }, {
                            "id": "9e66abda-69bd-460f-81e2-d540cd2bcf4b",
                            "name": "Maintenance and Repair",
                            "nominalCode": "53",
                            "category": "Income"
                        }, {
                            "id": "bbb2a004-1783-424f-8aac-d7b71d3a9ff5",
                            "name": "Other Income",
                            "nominalCode": "83",
                            "category": "Income"
                        }, {
                            "id": "45b174a0-45be-4134-95ee-27b751f29b6e",
                            "name": "Other Portfolio Income",
                            "nominalCode": "26",
                            "category": "Income"
                        }, {
                            "id": "de6e8ce5-90fc-4379-9972-951b94897fcc",
                            "name": "Pest Control Services",
                            "nominalCode": "54",
                            "category": "Income"
                        }, {
                            "id": "b94b7aca-07a3-4e49-b06c-9a89fb84793d",
                            "name": "Plants and Soil",
                            "nominalCode": "49",
                            "category": "Income"
                        }, {
                            "id": "700def49-ca84-4fa5-83d3-3de9cf393200",
                            "name": "Refunds-Allowances",
                            "nominalCode": "6",
                            "category": "Income"
                        }, {
                            "id": "b15090b5-bcea-4655-a7aa-861e6084ca8b",
                            "name": "Sales of Product Income",
                            "nominalCode": "79",
                            "category": "Income"
                        }, {
                            "id": "cfd72132-9cdc-4ca6-a106-f35d8f6bd727",
                            "name": "Services",
                            "nominalCode": "1",
                            "category": "Income"
                        }, {
                            "id": "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba",
                            "name": "Sprinklers and Drip Systems",
                            "nominalCode": "50",
                            "category": "Income"
                        }, {
                            "id": "c9c3eff9-0968-4d1f-b321-c2499c079014",
                            "name": "Unapplied Cash Payment Income",
                            "nominalCode": "87",
                            "category": "Income"
                        }, {
                            "id": "1152c41c-3dec-44e7-9fc6-b9463b9017f5",
                            "name": "Uncategorized Income",
                            "nominalCode": "30",
                            "category": "Income"
                        }, {
                            "id": "a4163fda-a2c0-4d12-93cb-e016f049fee6",
                            "name": "Accounts Payable",
                            "nominalCode": "33",
                            "category": "Liability"
                        }, {
                            "id": "e2521f1a-ab18-483f-89d9-ea0434f00989",
                            "name": "Arizona Dept. of Revenue Payable",
                            "nominalCode": "89",
                            "category": "Liability"
                        }, {
                            "id": "7ebcc80a-06b9-4007-a33d-2f0365694a4d",
                            "name": "Board of Equalization Payable",
                            "nominalCode": "90",
                            "category": "Liability"
                        }, {
                            "id": "26dfb943-b6fb-484b-82b5-85eca47fe07c",
                            "name": "Loan Payable",
                            "nominalCode": "43",
                            "category": "Liability"
                        }, {
                            "id": "109b5a2f-8b10-4953-a388-2934f4f60a6e",
                            "name": "Mastercard",
                            "nominalCode": "41",
                            "category": "Liability"
                        }, {
                            "id": "e11719b8-0ec3-4bd7-943a-72f575ef7890",
                            "name": "Notes Payable",
                            "nominalCode": "44",
                            "category": "Liability"
                        }, {
                            "id": "484ef212-372c-41bc-9a0b-9a3b64c78218",
                            "name": "Visa",
                            "nominalCode": "42",
                            "category": "Liability"
                        }, {
                            "id": "da439b63-4dc2-45c4-9cf8-d4984413403e",
                            "name": "Unknown",
                            "description": "Amounts that are not attributed to any specific account.",
                            "category": "Uncategorised"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ChartOfAccountsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/chart-of-accounts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "syncDatetime": "2020-11-05T12:06:43Z",
                    "chartOfAccounts": [{
                            "id": "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad",
                            "name": "Accounts Receivable",
                            "nominalCode": "84",
                            "category": "Asset"
                        }, {
                            "id": "77b9ba20-924e-4be8-8077-87278297d915",
                            "name": "Checking",
                            "nominalCode": "35",
                            "category": "Asset"
                        }, {
                            "id": "7e776b86-151e-4a4a-a60a-f36e682e2a50",
                            "name": "Depreciation",
                            "nominalCode": "39",
                            "category": "Asset"
                        }, {
                            "id": "1f4efcfd-4e03-49d4-b7a4-3f976f2045db",
                            "name": "Inventory Asset",
                            "nominalCode": "81",
                            "category": "Asset"
                        }, {
                            "id": "271c798c-031c-4cfc-828c-d40e37fbb003",
                            "name": "Original Cost",
                            "nominalCode": "38",
                            "category": "Asset"
                        }, {
                            "id": "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf",
                            "name": "Prepaid Expenses",
                            "nominalCode": "3",
                            "category": "Asset"
                        }, {
                            "id": "497559c7-60bf-476c-8b16-09b8952a9722",
                            "name": "Savings",
                            "nominalCode": "36",
                            "category": "Asset"
                        }, {
                            "id": "9e68b349-72af-4cf3-8ea8-abd76f31064e",
                            "name": "Truck",
                            "nominalCode": "37",
                            "category": "Asset"
                        }, {
                            "id": "5f4450f5-7d1b-4cc3-be31-af9df6488a50",
                            "name": "Uncategorized Asset",
                            "nominalCode": "32",
                            "category": "Asset"
                        }, {
                            "id": "1b953b3a-0ea7-4b87-b5ca-33598b68546b",
                            "name": "Undeposited Funds",
                            "nominalCode": "4",
                            "category": "Asset"
                        }, {
                            "id": "6b718262-6099-4f32-9795-7aae2a25eac7",
                            "name": "Opening Balance Equity",
                            "nominalCode": "34",
                            "category": "Equity"
                        }, {
                            "id": "22a92103-3ee1-41fa-9722-1fc209caa2c2",
                            "name": "Retained Earnings",
                            "nominalCode": "2",
                            "category": "Equity"
                        }, {
                            "id": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                            "name": "Accounting",
                            "nominalCode": "69",
                            "category": "Expense"
                        }, {
                            "id": "d4721d9a-d77b-4361-9807-09331ffcb6af",
                            "name": "Advertising",
                            "nominalCode": "7",
                            "category": "Expense"
                        }, {
                            "id": "b427bbbe-d104-46c5-b6a6-c13e37e5533f",
                            "name": "Automobile",
                            "nominalCode": "55",
                            "category": "Expense"
                        }, {
                            "id": "771aad7c-70d2-4f7e-9309-0ab33e11e589",
                            "name": "Bank Charges",
                            "nominalCode": "8",
                            "category": "Expense"
                        }, {
                            "id": "3d9747ce-afbf-4ff1-b23d-559206c5998c",
                            "name": "Bookkeeper",
                            "nominalCode": "70",
                            "category": "Expense"
                        }, {
                            "id": "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c",
                            "name": "Building Repairs",
                            "nominalCode": "73",
                            "category": "Expense"
                        }, {
                            "id": "4d0fca62-d1e0-48fe-8481-9410f25ea4bf",
                            "name": "Commissions & fees",
                            "nominalCode": "9",
                            "category": "Expense"
                        }, {
                            "id": "4339c2ee-4040-4996-acf5-810b6c8eb337",
                            "name": "Computer Repairs",
                            "nominalCode": "74",
                            "category": "Expense"
                        }, {
                            "id": "5270f4e2-d0e0-407d-aa12-87954a3d3e74",
                            "name": "Cost of Goods Sold",
                            "nominalCode": "80",
                            "category": "Expense"
                        }, {
                            "id": "f421c967-88eb-43c1-b19e-aa03f15f67ce",
                            "name": "Cost of Labor",
                            "nominalCode": "59",
                            "category": "Expense"
                        }, {
                            "id": "1137cd94-52b1-45b5-a573-1723c89a35f2",
                            "name": "Decks and Patios",
                            "nominalCode": "64",
                            "category": "Expense"
                        }, {
                            "id": "264c45c4-408e-4d80-ab8e-be4a3babb6c8",
                            "name": "Depreciation",
                            "nominalCode": "40",
                            "category": "Expense"
                        }, {
                            "id": "ccfb434a-b289-441c-99a2-30e05a572057",
                            "name": "Disposal Fees",
                            "nominalCode": "28",
                            "category": "Expense"
                        }, {
                            "id": "9c400ca0-009e-475a-abc6-d5a76154aa0a",
                            "name": "Dues & Subscriptions",
                            "nominalCode": "10",
                            "category": "Expense"
                        }, {
                            "id": "74d34736-f4a0-4638-9465-4f5254ddb1b5",
                            "name": "Equipment Rental",
                            "nominalCode": "29",
                            "category": "Expense"
                        }, {
                            "id": "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d",
                            "name": "Equipment Rental",
                            "nominalCode": "62",
                            "category": "Expense"
                        }, {
                            "id": "0d9d51d4-b347-480b-88f3-6107f0ba343f",
                            "name": "Equipment Repairs",
                            "nominalCode": "75",
                            "category": "Expense"
                        }, {
                            "id": "f697f236-19a0-4c4f-be80-9e9f02ec7a6f",
                            "name": "Fountain and Garden Lighting",
                            "nominalCode": "65",
                            "category": "Expense"
                        }, {
                            "id": "7877e117-f0ac-4142-841f-84e062f77128",
                            "name": "Fuel",
                            "nominalCode": "56",
                            "category": "Expense"
                        }, {
                            "id": "225f6f2a-445e-48b3-88b5-e3f9daae059a",
                            "name": "Gas and Electric",
                            "nominalCode": "76",
                            "category": "Expense"
                        }, {
                            "id": "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645",
                            "name": "Installation",
                            "nominalCode": "60",
                            "category": "Expense"
                        }, {
                            "id": "5d8860e2-a624-4009-b9a9-6f7d9add93d5",
                            "name": "Insurance",
                            "nominalCode": "11",
                            "category": "Expense"
                        }, {
                            "id": "ee810af9-3b00-4de7-9204-c0cbc9bca5f8",
                            "name": "Job Expenses",
                            "nominalCode": "58",
                            "category": "Expense"
                        }, {
                            "id": "ecc43720-0fb4-4b20-9561-73f78021a3fa",
                            "name": "Job Materials",
                            "nominalCode": "63",
                            "category": "Expense"
                        }, {
                            "id": "4a959dfe-428f-48c2-88f6-efc155f2a19c",
                            "name": "Lawyer",
                            "nominalCode": "71",
                            "category": "Expense"
                        }, {
                            "id": "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec",
                            "name": "Legal & Professional Fees",
                            "nominalCode": "12",
                            "category": "Expense"
                        }, {
                            "id": "6333a502-088a-4314-a8d1-05e5cf61e023",
                            "name": "Maintenance and Repair",
                            "nominalCode": "72",
                            "category": "Expense"
                        }, {
                            "id": "4edf486e-f6a7-45a8-9c0b-693675d0b65a",
                            "name": "Maintenance and Repairs",
                            "nominalCode": "61",
                            "category": "Expense"
                        }, {
                            "id": "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad",
                            "name": "Meals and Entertainment",
                            "nominalCode": "13",
                            "category": "Expense"
                        }, {
                            "id": "b2e758c5-92f5-4f52-b915-cc8ea0357868",
                            "name": "Miscellaneous",
                            "nominalCode": "14",
                            "category": "Expense"
                        }, {
                            "id": "1e870df7-7255-41e2-8220-e24c301af038",
                            "name": "Office Expenses",
                            "nominalCode": "15",
                            "category": "Expense"
                        }, {
                            "id": "180cc81e-5621-45f1-8b2f-a7b1aa20cee7",
                            "name": "Penalties & Settlements",
                            "nominalCode": "27",
                            "category": "Expense"
                        }, {
                            "id": "ba81920a-23b7-4634-946f-47f0067d9e1a",
                            "name": "Permits",
                            "nominalCode": "68",
                            "category": "Expense"
                        }, {
                            "id": "c4b4f130-c536-4b83-bbc7-15a7eda2fa67",
                            "name": "Plants and Soil",
                            "nominalCode": "66",
                            "category": "Expense"
                        }, {
                            "id": "8fca197a-3242-4795-8b06-48d821315ad1",
                            "name": "Promotional",
                            "nominalCode": "16",
                            "category": "Expense"
                        }, {
                            "id": "22ed0181-f38c-4a2d-a84e-c5505eb5f14c",
                            "name": "Purchases",
                            "nominalCode": "78",
                            "category": "Expense"
                        }, {
                            "id": "3b353731-f571-4854-8240-0d49cc81fecc",
                            "name": "Rent or Lease",
                            "nominalCode": "17",
                            "category": "Expense"
                        }, {
                            "id": "8e03d0a6-f172-40bd-adf1-3834e9734267",
                            "name": "Repair & Maintenance (deleted)",
                            "nominalCode": "18",
                            "category": "Expense"
                        }, {
                            "id": "bc366bf7-30db-4856-9f65-06ffc01596f5",
                            "name": "Sprinklers and Drip Systems",
                            "nominalCode": "67",
                            "category": "Expense"
                        }, {
                            "id": "c9205c03-ea6a-48a0-be07-733f894db4d8",
                            "name": "Stationery & Printing",
                            "nominalCode": "19",
                            "category": "Expense"
                        }, {
                            "id": "d61afb14-0da1-43ba-935e-4b4a08a012fe",
                            "name": "Supplies",
                            "nominalCode": "20",
                            "category": "Expense"
                        }, {
                            "id": "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8",
                            "name": "Taxes & Licenses",
                            "nominalCode": "21",
                            "category": "Expense"
                        }, {
                            "id": "acf2e2dd-cc98-4c16-a705-d0010b593083",
                            "name": "Telephone",
                            "nominalCode": "77",
                            "category": "Expense"
                        }, {
                            "id": "0e0f7942-612f-481c-8166-ea33fe398a74",
                            "name": "Travel",
                            "nominalCode": "22",
                            "category": "Expense"
                        }, {
                            "id": "1d8e3740-6e22-4908-b37e-7de8bd9a012c",
                            "name": "Travel Meals",
                            "nominalCode": "23",
                            "category": "Expense"
                        }, {
                            "id": "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea",
                            "name": "Unapplied Cash Bill Payment Expense",
                            "nominalCode": "88",
                            "category": "Expense"
                        }, {
                            "id": "3d8fed9c-8726-44fe-bdb0-da49d9457a8d",
                            "name": "Uncategorized Expense",
                            "nominalCode": "31",
                            "category": "Expense"
                        }, {
                            "id": "ca5ea429-6cc0-4870-8513-a4e696b312d4",
                            "name": "Utilities",
                            "nominalCode": "24",
                            "category": "Expense"
                        }, {
                            "id": "a3ad5046-6a41-4b55-9072-66e5872fba62",
                            "name": "Workers Compensation",
                            "nominalCode": "57",
                            "category": "Expense"
                        }, {
                            "id": "773e43aa-8505-48b9-94ef-d7bc5786609a",
                            "name": "Billable Expense Income",
                            "nominalCode": "85",
                            "category": "Income"
                        }, {
                            "id": "026dccb9-d8f6-4116-a3ff-872d0cd628f3",
                            "name": "Decks and Patios",
                            "nominalCode": "47",
                            "category": "Income"
                        }, {
                            "id": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                            "name": "Design income",
                            "nominalCode": "82",
                            "category": "Income"
                        }, {
                            "id": "587bc9dd-553d-4b3d-88d8-5256eedfb499",
                            "name": "Discounts given",
                            "nominalCode": "86",
                            "category": "Income"
                        }, {
                            "id": "ef961774-568d-4746-a790-fa8e22907db5",
                            "name": "Fees Billed",
                            "nominalCode": "5",
                            "category": "Income"
                        }, {
                            "id": "1158aa19-894e-40ea-a54f-f2c6808c879a",
                            "name": "Fountains and Garden Lighting",
                            "nominalCode": "48",
                            "category": "Income"
                        }, {
                            "id": "442e062b-8585-4f14-9763-8990c9fd6087",
                            "name": "Installation",
                            "nominalCode": "52",
                            "category": "Income"
                        }, {
                            "id": "81860ebb-997f-47b6-a1ff-30988af2520d",
                            "name": "Interest Earned",
                            "nominalCode": "25",
                            "category": "Income"
                        }, {
                            "id": "1bb12d54-9d81-4b63-b1c1-af419e47a687",
                            "name": "Job Materials",
                            "nominalCode": "46",
                            "category": "Income"
                        }, {
                            "id": "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff",
                            "name": "Labor",
                            "nominalCode": "51",
                            "category": "Income"
                        }, {
                            "id": "dc2af3cd-9c29-4c23-b081-0ceac31d4406",
                            "name": "Landscaping Services",
                            "nominalCode": "45",
                            "category": "Income"
                        }, {
                            "id": "9e66abda-69bd-460f-81e2-d540cd2bcf4b",
                            "name": "Maintenance and Repair",
                            "nominalCode": "53",
                            "category": "Income"
                        }, {
                            "id": "bbb2a004-1783-424f-8aac-d7b71d3a9ff5",
                            "name": "Other Income",
                            "nominalCode": "83",
                            "category": "Income"
                        }, {
                            "id": "45b174a0-45be-4134-95ee-27b751f29b6e",
                            "name": "Other Portfolio Income",
                            "nominalCode": "26",
                            "category": "Income"
                        }, {
                            "id": "de6e8ce5-90fc-4379-9972-951b94897fcc",
                            "name": "Pest Control Services",
                            "nominalCode": "54",
                            "category": "Income"
                        }, {
                            "id": "b94b7aca-07a3-4e49-b06c-9a89fb84793d",
                            "name": "Plants and Soil",
                            "nominalCode": "49",
                            "category": "Income"
                        }, {
                            "id": "700def49-ca84-4fa5-83d3-3de9cf393200",
                            "name": "Refunds-Allowances",
                            "nominalCode": "6",
                            "category": "Income"
                        }, {
                            "id": "b15090b5-bcea-4655-a7aa-861e6084ca8b",
                            "name": "Sales of Product Income",
                            "nominalCode": "79",
                            "category": "Income"
                        }, {
                            "id": "cfd72132-9cdc-4ca6-a106-f35d8f6bd727",
                            "name": "Services",
                            "nominalCode": "1",
                            "category": "Income"
                        }, {
                            "id": "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba",
                            "name": "Sprinklers and Drip Systems",
                            "nominalCode": "50",
                            "category": "Income"
                        }, {
                            "id": "c9c3eff9-0968-4d1f-b321-c2499c079014",
                            "name": "Unapplied Cash Payment Income",
                            "nominalCode": "87",
                            "category": "Income"
                        }, {
                            "id": "1152c41c-3dec-44e7-9fc6-b9463b9017f5",
                            "name": "Uncategorized Income",
                            "nominalCode": "30",
                            "category": "Income"
                        }, {
                            "id": "a4163fda-a2c0-4d12-93cb-e016f049fee6",
                            "name": "Accounts Payable",
                            "nominalCode": "33",
                            "category": "Liability"
                        }, {
                            "id": "e2521f1a-ab18-483f-89d9-ea0434f00989",
                            "name": "Arizona Dept. of Revenue Payable",
                            "nominalCode": "89",
                            "category": "Liability"
                        }, {
                            "id": "7ebcc80a-06b9-4007-a33d-2f0365694a4d",
                            "name": "Board of Equalization Payable",
                            "nominalCode": "90",
                            "category": "Liability"
                        }, {
                            "id": "26dfb943-b6fb-484b-82b5-85eca47fe07c",
                            "name": "Loan Payable",
                            "nominalCode": "43",
                            "category": "Liability"
                        }, {
                            "id": "109b5a2f-8b10-4953-a388-2934f4f60a6e",
                            "name": "Mastercard",
                            "nominalCode": "41",
                            "category": "Liability"
                        }, {
                            "id": "e11719b8-0ec3-4bd7-943a-72f575ef7890",
                            "name": "Notes Payable",
                            "nominalCode": "44",
                            "category": "Liability"
                        }, {
                            "id": "484ef212-372c-41bc-9a0b-9a3b64c78218",
                            "name": "Visa",
                            "nominalCode": "42",
                            "category": "Liability"
                        }, {
                            "id": "da439b63-4dc2-45c4-9cf8-d4984413403e",
                            "name": "Unknown",
                            "description": "Amounts that are not attributed to any specific account.",
                            "category": "Uncategorised"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class DefaultCurrencyHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashFlowConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getDefaultCurrency(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/default-currency`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getDefaultCurrencyUrl() {
        return `${this.configuration.basePath}/client-api/v1/default-currency`;
    }
}
DefaultCurrencyHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DefaultCurrencyHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_FLOW_BASE_PATH, optional: true }, { token: CashFlowConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
DefaultCurrencyHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DefaultCurrencyHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DefaultCurrencyHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_FLOW_BASE_PATH]
                }] }, { type: CashFlowConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const DefaultCurrencyHttpServiceGetDefaultCurrencyMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/default-currency",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": "USD"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const DefaultCurrencyHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/default-currency",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": "USD"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class ForecastConfigurationsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashFlowConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getForecastConfigurationById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _configurationId = requestParameters["configurationId"];
        if (_configurationId === null || _configurationId === undefined) {
            throw new Error('Required parameter configurationId was null or undefined when calling getForecastConfigurationById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/forecast-configurations/${encodeURIComponent(String(_configurationId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getForecastConfigurationByIdUrl(requestParameters) {
        const _configurationId = requestParameters["configurationId"];
        if (_configurationId === null || _configurationId === undefined) {
            throw new Error('Required parameter configurationId was null or undefined when calling getForecastConfigurationById.');
        }
        return `${this.configuration.basePath}/client-api/v1/forecast-configurations/${encodeURIComponent(String(_configurationId))}`;
    }
    getForecastConfigurations(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/forecast-configurations`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getForecastConfigurationsUrl() {
        return `${this.configuration.basePath}/client-api/v1/forecast-configurations`;
    }
    postForecastConfigurations(requestParameters, observe = 'body', reportProgress = false, options) {
        const _presentationForecastConfiguration = requestParameters["presentationForecastConfiguration"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/forecast-configurations`, _presentationForecastConfiguration, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postForecastConfigurationsUrl(requestParameters) {
        const _presentationForecastConfiguration = requestParameters["presentationForecastConfiguration"];
        return `${this.configuration.basePath}/client-api/v1/forecast-configurations`;
    }
    putForecastConfigurationById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _configurationId = requestParameters["configurationId"];
        if (_configurationId === null || _configurationId === undefined) {
            throw new Error('Required parameter configurationId was null or undefined when calling putForecastConfigurationById.');
        }
        const _presentationForecastConfiguration = requestParameters["presentationForecastConfiguration"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/forecast-configurations/${encodeURIComponent(String(_configurationId))}`, _presentationForecastConfiguration, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putForecastConfigurationByIdUrl(requestParameters) {
        const _configurationId = requestParameters["configurationId"];
        if (_configurationId === null || _configurationId === undefined) {
            throw new Error('Required parameter configurationId was null or undefined when calling putForecastConfigurationById.');
        }
        const _presentationForecastConfiguration = requestParameters["presentationForecastConfiguration"];
        return `${this.configuration.basePath}/client-api/v1/forecast-configurations/${encodeURIComponent(String(_configurationId))}`;
    }
}
ForecastConfigurationsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ForecastConfigurationsHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_FLOW_BASE_PATH, optional: true }, { token: CashFlowConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ForecastConfigurationsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ForecastConfigurationsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ForecastConfigurationsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_FLOW_BASE_PATH]
                }] }, { type: CashFlowConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ForecastConfigurationsHttpServiceGetForecastConfigurationByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/forecast-configurations/{configurationId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "58c844ae-2bf1-419e-aeb6-487f6a18c92b",
                    "currencyCode": "USD",
                    "bankAccountIds": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4600", "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697", "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696"],
                    "chartOfAccountIds": ["a3ad5046-6a41-4b55-9072-66e5872fba62", "6b718262-6099-4f32-9795-7aae2a25eac7", "b2e758c5-92f5-4f52-b915-cc8ea0357868", "700def49-ca84-4fa5-83d3-3de9cf393200", "264c45c4-408e-4d80-ab8e-be4a3babb6c8", "d4721d9a-d77b-4361-9807-09331ffcb6af", "6333a502-088a-4314-a8d1-05e5cf61e023", "1152c41c-3dec-44e7-9fc6-b9463b9017f5", "5f4450f5-7d1b-4cc3-be31-af9df6488a50", "773e43aa-8505-48b9-94ef-d7bc5786609a", "e11719b8-0ec3-4bd7-943a-72f575ef7890", "1d8e3740-6e22-4908-b37e-7de8bd9a012c", "109b5a2f-8b10-4953-a388-2934f4f60a6e", "8e03d0a6-f172-40bd-adf1-3834e9734267", "4a959dfe-428f-48c2-88f6-efc155f2a19c", "1bb12d54-9d81-4b63-b1c1-af419e47a687", "d61afb14-0da1-43ba-935e-4b4a08a012fe", "f421c967-88eb-43c1-b19e-aa03f15f67ce", "8fca197a-3242-4795-8b06-48d821315ad1", "8c48192a-723f-4f76-b3a7-c2be76c3bdc8", "26dfb943-b6fb-484b-82b5-85eca47fe07c", "dc2af3cd-9c29-4c23-b081-0ceac31d4406", "4339c2ee-4040-4996-acf5-810b6c8eb337", "77b9ba20-924e-4be8-8077-87278297d915", "0e0f7942-612f-481c-8166-ea33fe398a74", "81860ebb-997f-47b6-a1ff-30988af2520d", "4d0fca62-d1e0-48fe-8481-9410f25ea4bf", "c9c3eff9-0968-4d1f-b321-c2499c079014", "271c798c-031c-4cfc-828c-d40e37fbb003", "180cc81e-5621-45f1-8b2f-a7b1aa20cee7", "587bc9dd-553d-4b3d-88d8-5256eedfb499", "ccfb434a-b289-441c-99a2-30e05a572057", "484ef212-372c-41bc-9a0b-9a3b64c78218", "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8", "7ebcc80a-06b9-4007-a33d-2f0365694a4d", "b15090b5-bcea-4655-a7aa-861e6084ca8b", "497559c7-60bf-476c-8b16-09b8952a9722", "9e66abda-69bd-460f-81e2-d540cd2bcf4b", "9c400ca0-009e-475a-abc6-d5a76154aa0a", "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad", "9e68b349-72af-4cf3-8ea8-abd76f31064e", "771aad7c-70d2-4f7e-9309-0ab33e11e589", "45b174a0-45be-4134-95ee-27b751f29b6e", "026dccb9-d8f6-4116-a3ff-872d0cd628f3", "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec", "ee810af9-3b00-4de7-9204-c0cbc9bca5f8", "3d8fed9c-8726-44fe-bdb0-da49d9457a8d", "3d9747ce-afbf-4ff1-b23d-559206c5998c", "1158aa19-894e-40ea-a54f-f2c6808c879a", "1e870df7-7255-41e2-8220-e24c301af038", "e2521f1a-ab18-483f-89d9-ea0434f00989", "b94b7aca-07a3-4e49-b06c-9a89fb84793d", "1137cd94-52b1-45b5-a573-1723c89a35f2", "1b953b3a-0ea7-4b87-b5ca-33598b68546b", "c4b4f130-c536-4b83-bbc7-15a7eda2fa67", "22ed0181-f38c-4a2d-a84e-c5505eb5f14c", "0d9d51d4-b347-480b-88f3-6107f0ba343f", "bc366bf7-30db-4856-9f65-06ffc01596f5", "1f4efcfd-4e03-49d4-b7a4-3f976f2045db", "7877e117-f0ac-4142-841f-84e062f77128", "ca5ea429-6cc0-4870-8513-a4e696b312d4", "ba81920a-23b7-4634-946f-47f0067d9e1a", "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff", "bbb2a004-1783-424f-8aac-d7b71d3a9ff5", "5270f4e2-d0e0-407d-aa12-87954a3d3e74", "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba", "74d34736-f4a0-4638-9465-4f5254ddb1b5", "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf", "ef961774-568d-4746-a790-fa8e22907db5", "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d", "cfd72132-9cdc-4ca6-a106-f35d8f6bd727", "442e062b-8585-4f14-9763-8990c9fd6087", "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645", "5d8860e2-a624-4009-b9a9-6f7d9add93d5", "da439b63-4dc2-45c4-9cf8-d4984413403e", "3b353731-f571-4854-8240-0d49cc81fecc", "ecc43720-0fb4-4b20-9561-73f78021a3fa", "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c", "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad", "22a92103-3ee1-41fa-9722-1fc209caa2c2", "f934846d-8461-44dd-89be-3d4cc7b59a53", "a4163fda-a2c0-4d12-93cb-e016f049fee6", "225f6f2a-445e-48b3-88b5-e3f9daae059a", "acf2e2dd-cc98-4c16-a705-d0010b593083", "de6e8ce5-90fc-4379-9972-951b94897fcc", "b427bbbe-d104-46c5-b6a6-c13e37e5533f", "c9205c03-ea6a-48a0-be07-733f894db4d8", "7e776b86-151e-4a4a-a60a-f36e682e2a50", "4edf486e-f6a7-45a8-9c0b-693675d0b65a", "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea", "f697f236-19a0-4c4f-be80-9e9f02ec7a6f"]
                }
            },
            {
                status: 200,
                body: {
                    "chartOfAccountIds": ["chartOfAccountIds", "chartOfAccountIds"],
                    "id": "id",
                    "currencyCode": "currencyCode",
                    "bankAccountIds": ["bankAccountIds", "bankAccountIds"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ForecastConfigurationsHttpServiceGetForecastConfigurationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/forecast-configurations",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "configurations": [{
                            "currencyCode": "EUR",
                            "bankAccountIds": ["99bae364-1aa4-45a7-87e5-249d5b22242c", "4d3740af-11f3-4bd8-915e-4850184ede9f", "473ec899-85a7-49f0-9fca-961bfb133d9c"],
                            "chartOfAccountIds": ["43032a1e-f466-40fd-8ed7-f92acbd0ecb6", "846bdab7-5b95-4977-a71f-3a8fdd28770b", "860acb60-ddcb-4a56-a773-947b1883eaf0"]
                        }, {
                            "currencyCode": "USD",
                            "bankAccountIds": ["fecfcdc6-8675-457d-b3b1-07b254bc7445", "02556b90-d759-4efe-ac74-4fa6286b07ab", "2c04b8e1-4fdf-4317-870e-d2caf5474b75"],
                            "chartOfAccountIds": ["0bd55bdb-f407-4b1b-a049-995a534a6877", "6e37e319-c753-4f70-8842-50dec650ed67", "0f52a8d1-66a7-4a0c-94fb-3f7f3644c913"]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ForecastConfigurationsHttpServicePostForecastConfigurationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/forecast-configurations",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "58c844ae-2bf1-419e-aeb6-487f6a18c92b",
                    "currencyCode": "USD",
                    "bankAccountIds": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4600", "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697", "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696"],
                    "chartOfAccountIds": ["a3ad5046-6a41-4b55-9072-66e5872fba62", "6b718262-6099-4f32-9795-7aae2a25eac7", "b2e758c5-92f5-4f52-b915-cc8ea0357868", "700def49-ca84-4fa5-83d3-3de9cf393200", "264c45c4-408e-4d80-ab8e-be4a3babb6c8", "d4721d9a-d77b-4361-9807-09331ffcb6af", "6333a502-088a-4314-a8d1-05e5cf61e023", "1152c41c-3dec-44e7-9fc6-b9463b9017f5", "5f4450f5-7d1b-4cc3-be31-af9df6488a50", "773e43aa-8505-48b9-94ef-d7bc5786609a", "e11719b8-0ec3-4bd7-943a-72f575ef7890", "1d8e3740-6e22-4908-b37e-7de8bd9a012c", "109b5a2f-8b10-4953-a388-2934f4f60a6e", "8e03d0a6-f172-40bd-adf1-3834e9734267", "4a959dfe-428f-48c2-88f6-efc155f2a19c", "1bb12d54-9d81-4b63-b1c1-af419e47a687", "d61afb14-0da1-43ba-935e-4b4a08a012fe", "f421c967-88eb-43c1-b19e-aa03f15f67ce", "8fca197a-3242-4795-8b06-48d821315ad1", "8c48192a-723f-4f76-b3a7-c2be76c3bdc8", "26dfb943-b6fb-484b-82b5-85eca47fe07c", "dc2af3cd-9c29-4c23-b081-0ceac31d4406", "4339c2ee-4040-4996-acf5-810b6c8eb337", "77b9ba20-924e-4be8-8077-87278297d915", "0e0f7942-612f-481c-8166-ea33fe398a74", "81860ebb-997f-47b6-a1ff-30988af2520d", "4d0fca62-d1e0-48fe-8481-9410f25ea4bf", "c9c3eff9-0968-4d1f-b321-c2499c079014", "271c798c-031c-4cfc-828c-d40e37fbb003", "180cc81e-5621-45f1-8b2f-a7b1aa20cee7", "587bc9dd-553d-4b3d-88d8-5256eedfb499", "ccfb434a-b289-441c-99a2-30e05a572057", "484ef212-372c-41bc-9a0b-9a3b64c78218", "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8", "7ebcc80a-06b9-4007-a33d-2f0365694a4d", "b15090b5-bcea-4655-a7aa-861e6084ca8b", "497559c7-60bf-476c-8b16-09b8952a9722", "9e66abda-69bd-460f-81e2-d540cd2bcf4b", "9c400ca0-009e-475a-abc6-d5a76154aa0a", "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad", "9e68b349-72af-4cf3-8ea8-abd76f31064e", "771aad7c-70d2-4f7e-9309-0ab33e11e589", "45b174a0-45be-4134-95ee-27b751f29b6e", "026dccb9-d8f6-4116-a3ff-872d0cd628f3", "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec", "ee810af9-3b00-4de7-9204-c0cbc9bca5f8", "3d8fed9c-8726-44fe-bdb0-da49d9457a8d", "3d9747ce-afbf-4ff1-b23d-559206c5998c", "1158aa19-894e-40ea-a54f-f2c6808c879a", "1e870df7-7255-41e2-8220-e24c301af038", "e2521f1a-ab18-483f-89d9-ea0434f00989", "b94b7aca-07a3-4e49-b06c-9a89fb84793d", "1137cd94-52b1-45b5-a573-1723c89a35f2", "1b953b3a-0ea7-4b87-b5ca-33598b68546b", "c4b4f130-c536-4b83-bbc7-15a7eda2fa67", "22ed0181-f38c-4a2d-a84e-c5505eb5f14c", "0d9d51d4-b347-480b-88f3-6107f0ba343f", "bc366bf7-30db-4856-9f65-06ffc01596f5", "1f4efcfd-4e03-49d4-b7a4-3f976f2045db", "7877e117-f0ac-4142-841f-84e062f77128", "ca5ea429-6cc0-4870-8513-a4e696b312d4", "ba81920a-23b7-4634-946f-47f0067d9e1a", "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff", "bbb2a004-1783-424f-8aac-d7b71d3a9ff5", "5270f4e2-d0e0-407d-aa12-87954a3d3e74", "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba", "74d34736-f4a0-4638-9465-4f5254ddb1b5", "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf", "ef961774-568d-4746-a790-fa8e22907db5", "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d", "cfd72132-9cdc-4ca6-a106-f35d8f6bd727", "442e062b-8585-4f14-9763-8990c9fd6087", "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645", "5d8860e2-a624-4009-b9a9-6f7d9add93d5", "da439b63-4dc2-45c4-9cf8-d4984413403e", "3b353731-f571-4854-8240-0d49cc81fecc", "ecc43720-0fb4-4b20-9561-73f78021a3fa", "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c", "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad", "22a92103-3ee1-41fa-9722-1fc209caa2c2", "f934846d-8461-44dd-89be-3d4cc7b59a53", "a4163fda-a2c0-4d12-93cb-e016f049fee6", "225f6f2a-445e-48b3-88b5-e3f9daae059a", "acf2e2dd-cc98-4c16-a705-d0010b593083", "de6e8ce5-90fc-4379-9972-951b94897fcc", "b427bbbe-d104-46c5-b6a6-c13e37e5533f", "c9205c03-ea6a-48a0-be07-733f894db4d8", "7e776b86-151e-4a4a-a60a-f36e682e2a50", "4edf486e-f6a7-45a8-9c0b-693675d0b65a", "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea", "f697f236-19a0-4c4f-be80-9e9f02ec7a6f"]
                }
            },
            {
                status: 201,
                body: {
                    "chartOfAccountIds": ["chartOfAccountIds", "chartOfAccountIds"],
                    "id": "id",
                    "currencyCode": "currencyCode",
                    "bankAccountIds": ["bankAccountIds", "bankAccountIds"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ForecastConfigurationsHttpServicePutForecastConfigurationByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/forecast-configurations/{configurationId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "58c844ae-2bf1-419e-aeb6-487f6a18c92b",
                    "currencyCode": "USD",
                    "bankAccountIds": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4600", "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697", "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696"],
                    "chartOfAccountIds": ["a3ad5046-6a41-4b55-9072-66e5872fba62", "6b718262-6099-4f32-9795-7aae2a25eac7", "b2e758c5-92f5-4f52-b915-cc8ea0357868", "700def49-ca84-4fa5-83d3-3de9cf393200", "264c45c4-408e-4d80-ab8e-be4a3babb6c8", "d4721d9a-d77b-4361-9807-09331ffcb6af", "6333a502-088a-4314-a8d1-05e5cf61e023", "1152c41c-3dec-44e7-9fc6-b9463b9017f5", "5f4450f5-7d1b-4cc3-be31-af9df6488a50", "773e43aa-8505-48b9-94ef-d7bc5786609a", "e11719b8-0ec3-4bd7-943a-72f575ef7890", "1d8e3740-6e22-4908-b37e-7de8bd9a012c", "109b5a2f-8b10-4953-a388-2934f4f60a6e", "8e03d0a6-f172-40bd-adf1-3834e9734267", "4a959dfe-428f-48c2-88f6-efc155f2a19c", "1bb12d54-9d81-4b63-b1c1-af419e47a687", "d61afb14-0da1-43ba-935e-4b4a08a012fe", "f421c967-88eb-43c1-b19e-aa03f15f67ce", "8fca197a-3242-4795-8b06-48d821315ad1", "8c48192a-723f-4f76-b3a7-c2be76c3bdc8", "26dfb943-b6fb-484b-82b5-85eca47fe07c", "dc2af3cd-9c29-4c23-b081-0ceac31d4406", "4339c2ee-4040-4996-acf5-810b6c8eb337", "77b9ba20-924e-4be8-8077-87278297d915", "0e0f7942-612f-481c-8166-ea33fe398a74", "81860ebb-997f-47b6-a1ff-30988af2520d", "4d0fca62-d1e0-48fe-8481-9410f25ea4bf", "c9c3eff9-0968-4d1f-b321-c2499c079014", "271c798c-031c-4cfc-828c-d40e37fbb003", "180cc81e-5621-45f1-8b2f-a7b1aa20cee7", "587bc9dd-553d-4b3d-88d8-5256eedfb499", "ccfb434a-b289-441c-99a2-30e05a572057", "484ef212-372c-41bc-9a0b-9a3b64c78218", "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8", "7ebcc80a-06b9-4007-a33d-2f0365694a4d", "b15090b5-bcea-4655-a7aa-861e6084ca8b", "497559c7-60bf-476c-8b16-09b8952a9722", "9e66abda-69bd-460f-81e2-d540cd2bcf4b", "9c400ca0-009e-475a-abc6-d5a76154aa0a", "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad", "9e68b349-72af-4cf3-8ea8-abd76f31064e", "771aad7c-70d2-4f7e-9309-0ab33e11e589", "45b174a0-45be-4134-95ee-27b751f29b6e", "026dccb9-d8f6-4116-a3ff-872d0cd628f3", "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec", "ee810af9-3b00-4de7-9204-c0cbc9bca5f8", "3d8fed9c-8726-44fe-bdb0-da49d9457a8d", "3d9747ce-afbf-4ff1-b23d-559206c5998c", "1158aa19-894e-40ea-a54f-f2c6808c879a", "1e870df7-7255-41e2-8220-e24c301af038", "e2521f1a-ab18-483f-89d9-ea0434f00989", "b94b7aca-07a3-4e49-b06c-9a89fb84793d", "1137cd94-52b1-45b5-a573-1723c89a35f2", "1b953b3a-0ea7-4b87-b5ca-33598b68546b", "c4b4f130-c536-4b83-bbc7-15a7eda2fa67", "22ed0181-f38c-4a2d-a84e-c5505eb5f14c", "0d9d51d4-b347-480b-88f3-6107f0ba343f", "bc366bf7-30db-4856-9f65-06ffc01596f5", "1f4efcfd-4e03-49d4-b7a4-3f976f2045db", "7877e117-f0ac-4142-841f-84e062f77128", "ca5ea429-6cc0-4870-8513-a4e696b312d4", "ba81920a-23b7-4634-946f-47f0067d9e1a", "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff", "bbb2a004-1783-424f-8aac-d7b71d3a9ff5", "5270f4e2-d0e0-407d-aa12-87954a3d3e74", "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba", "74d34736-f4a0-4638-9465-4f5254ddb1b5", "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf", "ef961774-568d-4746-a790-fa8e22907db5", "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d", "cfd72132-9cdc-4ca6-a106-f35d8f6bd727", "442e062b-8585-4f14-9763-8990c9fd6087", "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645", "5d8860e2-a624-4009-b9a9-6f7d9add93d5", "da439b63-4dc2-45c4-9cf8-d4984413403e", "3b353731-f571-4854-8240-0d49cc81fecc", "ecc43720-0fb4-4b20-9561-73f78021a3fa", "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c", "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad", "22a92103-3ee1-41fa-9722-1fc209caa2c2", "f934846d-8461-44dd-89be-3d4cc7b59a53", "a4163fda-a2c0-4d12-93cb-e016f049fee6", "225f6f2a-445e-48b3-88b5-e3f9daae059a", "acf2e2dd-cc98-4c16-a705-d0010b593083", "de6e8ce5-90fc-4379-9972-951b94897fcc", "b427bbbe-d104-46c5-b6a6-c13e37e5533f", "c9205c03-ea6a-48a0-be07-733f894db4d8", "7e776b86-151e-4a4a-a60a-f36e682e2a50", "4edf486e-f6a7-45a8-9c0b-693675d0b65a", "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea", "f697f236-19a0-4c4f-be80-9e9f02ec7a6f"]
                }
            },
            {
                status: 200,
                body: {
                    "chartOfAccountIds": ["chartOfAccountIds", "chartOfAccountIds"],
                    "id": "id",
                    "currencyCode": "currencyCode",
                    "bankAccountIds": ["bankAccountIds", "bankAccountIds"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ForecastConfigurationsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/forecast-configurations/{configurationId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "58c844ae-2bf1-419e-aeb6-487f6a18c92b",
                    "currencyCode": "USD",
                    "bankAccountIds": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4600", "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697", "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696"],
                    "chartOfAccountIds": ["a3ad5046-6a41-4b55-9072-66e5872fba62", "6b718262-6099-4f32-9795-7aae2a25eac7", "b2e758c5-92f5-4f52-b915-cc8ea0357868", "700def49-ca84-4fa5-83d3-3de9cf393200", "264c45c4-408e-4d80-ab8e-be4a3babb6c8", "d4721d9a-d77b-4361-9807-09331ffcb6af", "6333a502-088a-4314-a8d1-05e5cf61e023", "1152c41c-3dec-44e7-9fc6-b9463b9017f5", "5f4450f5-7d1b-4cc3-be31-af9df6488a50", "773e43aa-8505-48b9-94ef-d7bc5786609a", "e11719b8-0ec3-4bd7-943a-72f575ef7890", "1d8e3740-6e22-4908-b37e-7de8bd9a012c", "109b5a2f-8b10-4953-a388-2934f4f60a6e", "8e03d0a6-f172-40bd-adf1-3834e9734267", "4a959dfe-428f-48c2-88f6-efc155f2a19c", "1bb12d54-9d81-4b63-b1c1-af419e47a687", "d61afb14-0da1-43ba-935e-4b4a08a012fe", "f421c967-88eb-43c1-b19e-aa03f15f67ce", "8fca197a-3242-4795-8b06-48d821315ad1", "8c48192a-723f-4f76-b3a7-c2be76c3bdc8", "26dfb943-b6fb-484b-82b5-85eca47fe07c", "dc2af3cd-9c29-4c23-b081-0ceac31d4406", "4339c2ee-4040-4996-acf5-810b6c8eb337", "77b9ba20-924e-4be8-8077-87278297d915", "0e0f7942-612f-481c-8166-ea33fe398a74", "81860ebb-997f-47b6-a1ff-30988af2520d", "4d0fca62-d1e0-48fe-8481-9410f25ea4bf", "c9c3eff9-0968-4d1f-b321-c2499c079014", "271c798c-031c-4cfc-828c-d40e37fbb003", "180cc81e-5621-45f1-8b2f-a7b1aa20cee7", "587bc9dd-553d-4b3d-88d8-5256eedfb499", "ccfb434a-b289-441c-99a2-30e05a572057", "484ef212-372c-41bc-9a0b-9a3b64c78218", "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8", "7ebcc80a-06b9-4007-a33d-2f0365694a4d", "b15090b5-bcea-4655-a7aa-861e6084ca8b", "497559c7-60bf-476c-8b16-09b8952a9722", "9e66abda-69bd-460f-81e2-d540cd2bcf4b", "9c400ca0-009e-475a-abc6-d5a76154aa0a", "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad", "9e68b349-72af-4cf3-8ea8-abd76f31064e", "771aad7c-70d2-4f7e-9309-0ab33e11e589", "45b174a0-45be-4134-95ee-27b751f29b6e", "026dccb9-d8f6-4116-a3ff-872d0cd628f3", "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec", "ee810af9-3b00-4de7-9204-c0cbc9bca5f8", "3d8fed9c-8726-44fe-bdb0-da49d9457a8d", "3d9747ce-afbf-4ff1-b23d-559206c5998c", "1158aa19-894e-40ea-a54f-f2c6808c879a", "1e870df7-7255-41e2-8220-e24c301af038", "e2521f1a-ab18-483f-89d9-ea0434f00989", "b94b7aca-07a3-4e49-b06c-9a89fb84793d", "1137cd94-52b1-45b5-a573-1723c89a35f2", "1b953b3a-0ea7-4b87-b5ca-33598b68546b", "c4b4f130-c536-4b83-bbc7-15a7eda2fa67", "22ed0181-f38c-4a2d-a84e-c5505eb5f14c", "0d9d51d4-b347-480b-88f3-6107f0ba343f", "bc366bf7-30db-4856-9f65-06ffc01596f5", "1f4efcfd-4e03-49d4-b7a4-3f976f2045db", "7877e117-f0ac-4142-841f-84e062f77128", "ca5ea429-6cc0-4870-8513-a4e696b312d4", "ba81920a-23b7-4634-946f-47f0067d9e1a", "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff", "bbb2a004-1783-424f-8aac-d7b71d3a9ff5", "5270f4e2-d0e0-407d-aa12-87954a3d3e74", "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba", "74d34736-f4a0-4638-9465-4f5254ddb1b5", "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf", "ef961774-568d-4746-a790-fa8e22907db5", "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d", "cfd72132-9cdc-4ca6-a106-f35d8f6bd727", "442e062b-8585-4f14-9763-8990c9fd6087", "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645", "5d8860e2-a624-4009-b9a9-6f7d9add93d5", "da439b63-4dc2-45c4-9cf8-d4984413403e", "3b353731-f571-4854-8240-0d49cc81fecc", "ecc43720-0fb4-4b20-9561-73f78021a3fa", "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c", "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad", "22a92103-3ee1-41fa-9722-1fc209caa2c2", "f934846d-8461-44dd-89be-3d4cc7b59a53", "a4163fda-a2c0-4d12-93cb-e016f049fee6", "225f6f2a-445e-48b3-88b5-e3f9daae059a", "acf2e2dd-cc98-4c16-a705-d0010b593083", "de6e8ce5-90fc-4379-9972-951b94897fcc", "b427bbbe-d104-46c5-b6a6-c13e37e5533f", "c9205c03-ea6a-48a0-be07-733f894db4d8", "7e776b86-151e-4a4a-a60a-f36e682e2a50", "4edf486e-f6a7-45a8-9c0b-693675d0b65a", "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea", "f697f236-19a0-4c4f-be80-9e9f02ec7a6f"]
                }
            },
            {
                status: 200,
                body: {
                    "chartOfAccountIds": ["chartOfAccountIds", "chartOfAccountIds"],
                    "id": "id",
                    "currencyCode": "currencyCode",
                    "bankAccountIds": ["bankAccountIds", "bankAccountIds"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/forecast-configurations",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "configurations": [{
                            "currencyCode": "EUR",
                            "bankAccountIds": ["99bae364-1aa4-45a7-87e5-249d5b22242c", "4d3740af-11f3-4bd8-915e-4850184ede9f", "473ec899-85a7-49f0-9fca-961bfb133d9c"],
                            "chartOfAccountIds": ["43032a1e-f466-40fd-8ed7-f92acbd0ecb6", "846bdab7-5b95-4977-a71f-3a8fdd28770b", "860acb60-ddcb-4a56-a773-947b1883eaf0"]
                        }, {
                            "currencyCode": "USD",
                            "bankAccountIds": ["fecfcdc6-8675-457d-b3b1-07b254bc7445", "02556b90-d759-4efe-ac74-4fa6286b07ab", "2c04b8e1-4fdf-4317-870e-d2caf5474b75"],
                            "chartOfAccountIds": ["0bd55bdb-f407-4b1b-a049-995a534a6877", "6e37e319-c753-4f70-8842-50dec650ed67", "0f52a8d1-66a7-4a0c-94fb-3f7f3644c913"]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/forecast-configurations",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "58c844ae-2bf1-419e-aeb6-487f6a18c92b",
                    "currencyCode": "USD",
                    "bankAccountIds": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4600", "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697", "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696"],
                    "chartOfAccountIds": ["a3ad5046-6a41-4b55-9072-66e5872fba62", "6b718262-6099-4f32-9795-7aae2a25eac7", "b2e758c5-92f5-4f52-b915-cc8ea0357868", "700def49-ca84-4fa5-83d3-3de9cf393200", "264c45c4-408e-4d80-ab8e-be4a3babb6c8", "d4721d9a-d77b-4361-9807-09331ffcb6af", "6333a502-088a-4314-a8d1-05e5cf61e023", "1152c41c-3dec-44e7-9fc6-b9463b9017f5", "5f4450f5-7d1b-4cc3-be31-af9df6488a50", "773e43aa-8505-48b9-94ef-d7bc5786609a", "e11719b8-0ec3-4bd7-943a-72f575ef7890", "1d8e3740-6e22-4908-b37e-7de8bd9a012c", "109b5a2f-8b10-4953-a388-2934f4f60a6e", "8e03d0a6-f172-40bd-adf1-3834e9734267", "4a959dfe-428f-48c2-88f6-efc155f2a19c", "1bb12d54-9d81-4b63-b1c1-af419e47a687", "d61afb14-0da1-43ba-935e-4b4a08a012fe", "f421c967-88eb-43c1-b19e-aa03f15f67ce", "8fca197a-3242-4795-8b06-48d821315ad1", "8c48192a-723f-4f76-b3a7-c2be76c3bdc8", "26dfb943-b6fb-484b-82b5-85eca47fe07c", "dc2af3cd-9c29-4c23-b081-0ceac31d4406", "4339c2ee-4040-4996-acf5-810b6c8eb337", "77b9ba20-924e-4be8-8077-87278297d915", "0e0f7942-612f-481c-8166-ea33fe398a74", "81860ebb-997f-47b6-a1ff-30988af2520d", "4d0fca62-d1e0-48fe-8481-9410f25ea4bf", "c9c3eff9-0968-4d1f-b321-c2499c079014", "271c798c-031c-4cfc-828c-d40e37fbb003", "180cc81e-5621-45f1-8b2f-a7b1aa20cee7", "587bc9dd-553d-4b3d-88d8-5256eedfb499", "ccfb434a-b289-441c-99a2-30e05a572057", "484ef212-372c-41bc-9a0b-9a3b64c78218", "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8", "7ebcc80a-06b9-4007-a33d-2f0365694a4d", "b15090b5-bcea-4655-a7aa-861e6084ca8b", "497559c7-60bf-476c-8b16-09b8952a9722", "9e66abda-69bd-460f-81e2-d540cd2bcf4b", "9c400ca0-009e-475a-abc6-d5a76154aa0a", "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad", "9e68b349-72af-4cf3-8ea8-abd76f31064e", "771aad7c-70d2-4f7e-9309-0ab33e11e589", "45b174a0-45be-4134-95ee-27b751f29b6e", "026dccb9-d8f6-4116-a3ff-872d0cd628f3", "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec", "ee810af9-3b00-4de7-9204-c0cbc9bca5f8", "3d8fed9c-8726-44fe-bdb0-da49d9457a8d", "3d9747ce-afbf-4ff1-b23d-559206c5998c", "1158aa19-894e-40ea-a54f-f2c6808c879a", "1e870df7-7255-41e2-8220-e24c301af038", "e2521f1a-ab18-483f-89d9-ea0434f00989", "b94b7aca-07a3-4e49-b06c-9a89fb84793d", "1137cd94-52b1-45b5-a573-1723c89a35f2", "1b953b3a-0ea7-4b87-b5ca-33598b68546b", "c4b4f130-c536-4b83-bbc7-15a7eda2fa67", "22ed0181-f38c-4a2d-a84e-c5505eb5f14c", "0d9d51d4-b347-480b-88f3-6107f0ba343f", "bc366bf7-30db-4856-9f65-06ffc01596f5", "1f4efcfd-4e03-49d4-b7a4-3f976f2045db", "7877e117-f0ac-4142-841f-84e062f77128", "ca5ea429-6cc0-4870-8513-a4e696b312d4", "ba81920a-23b7-4634-946f-47f0067d9e1a", "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff", "bbb2a004-1783-424f-8aac-d7b71d3a9ff5", "5270f4e2-d0e0-407d-aa12-87954a3d3e74", "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba", "74d34736-f4a0-4638-9465-4f5254ddb1b5", "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf", "ef961774-568d-4746-a790-fa8e22907db5", "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d", "cfd72132-9cdc-4ca6-a106-f35d8f6bd727", "442e062b-8585-4f14-9763-8990c9fd6087", "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645", "5d8860e2-a624-4009-b9a9-6f7d9add93d5", "da439b63-4dc2-45c4-9cf8-d4984413403e", "3b353731-f571-4854-8240-0d49cc81fecc", "ecc43720-0fb4-4b20-9561-73f78021a3fa", "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c", "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad", "22a92103-3ee1-41fa-9722-1fc209caa2c2", "f934846d-8461-44dd-89be-3d4cc7b59a53", "a4163fda-a2c0-4d12-93cb-e016f049fee6", "225f6f2a-445e-48b3-88b5-e3f9daae059a", "acf2e2dd-cc98-4c16-a705-d0010b593083", "de6e8ce5-90fc-4379-9972-951b94897fcc", "b427bbbe-d104-46c5-b6a6-c13e37e5533f", "c9205c03-ea6a-48a0-be07-733f894db4d8", "7e776b86-151e-4a4a-a60a-f36e682e2a50", "4edf486e-f6a7-45a8-9c0b-693675d0b65a", "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea", "f697f236-19a0-4c4f-be80-9e9f02ec7a6f"]
                }
            },
            {
                status: 201,
                body: {
                    "chartOfAccountIds": ["chartOfAccountIds", "chartOfAccountIds"],
                    "id": "id",
                    "currencyCode": "currencyCode",
                    "bankAccountIds": ["bankAccountIds", "bankAccountIds"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/forecast-configurations/{configurationId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "58c844ae-2bf1-419e-aeb6-487f6a18c92b",
                    "currencyCode": "USD",
                    "bankAccountIds": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4600", "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697", "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696"],
                    "chartOfAccountIds": ["a3ad5046-6a41-4b55-9072-66e5872fba62", "6b718262-6099-4f32-9795-7aae2a25eac7", "b2e758c5-92f5-4f52-b915-cc8ea0357868", "700def49-ca84-4fa5-83d3-3de9cf393200", "264c45c4-408e-4d80-ab8e-be4a3babb6c8", "d4721d9a-d77b-4361-9807-09331ffcb6af", "6333a502-088a-4314-a8d1-05e5cf61e023", "1152c41c-3dec-44e7-9fc6-b9463b9017f5", "5f4450f5-7d1b-4cc3-be31-af9df6488a50", "773e43aa-8505-48b9-94ef-d7bc5786609a", "e11719b8-0ec3-4bd7-943a-72f575ef7890", "1d8e3740-6e22-4908-b37e-7de8bd9a012c", "109b5a2f-8b10-4953-a388-2934f4f60a6e", "8e03d0a6-f172-40bd-adf1-3834e9734267", "4a959dfe-428f-48c2-88f6-efc155f2a19c", "1bb12d54-9d81-4b63-b1c1-af419e47a687", "d61afb14-0da1-43ba-935e-4b4a08a012fe", "f421c967-88eb-43c1-b19e-aa03f15f67ce", "8fca197a-3242-4795-8b06-48d821315ad1", "8c48192a-723f-4f76-b3a7-c2be76c3bdc8", "26dfb943-b6fb-484b-82b5-85eca47fe07c", "dc2af3cd-9c29-4c23-b081-0ceac31d4406", "4339c2ee-4040-4996-acf5-810b6c8eb337", "77b9ba20-924e-4be8-8077-87278297d915", "0e0f7942-612f-481c-8166-ea33fe398a74", "81860ebb-997f-47b6-a1ff-30988af2520d", "4d0fca62-d1e0-48fe-8481-9410f25ea4bf", "c9c3eff9-0968-4d1f-b321-c2499c079014", "271c798c-031c-4cfc-828c-d40e37fbb003", "180cc81e-5621-45f1-8b2f-a7b1aa20cee7", "587bc9dd-553d-4b3d-88d8-5256eedfb499", "ccfb434a-b289-441c-99a2-30e05a572057", "484ef212-372c-41bc-9a0b-9a3b64c78218", "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8", "7ebcc80a-06b9-4007-a33d-2f0365694a4d", "b15090b5-bcea-4655-a7aa-861e6084ca8b", "497559c7-60bf-476c-8b16-09b8952a9722", "9e66abda-69bd-460f-81e2-d540cd2bcf4b", "9c400ca0-009e-475a-abc6-d5a76154aa0a", "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad", "9e68b349-72af-4cf3-8ea8-abd76f31064e", "771aad7c-70d2-4f7e-9309-0ab33e11e589", "45b174a0-45be-4134-95ee-27b751f29b6e", "026dccb9-d8f6-4116-a3ff-872d0cd628f3", "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec", "ee810af9-3b00-4de7-9204-c0cbc9bca5f8", "3d8fed9c-8726-44fe-bdb0-da49d9457a8d", "3d9747ce-afbf-4ff1-b23d-559206c5998c", "1158aa19-894e-40ea-a54f-f2c6808c879a", "1e870df7-7255-41e2-8220-e24c301af038", "e2521f1a-ab18-483f-89d9-ea0434f00989", "b94b7aca-07a3-4e49-b06c-9a89fb84793d", "1137cd94-52b1-45b5-a573-1723c89a35f2", "1b953b3a-0ea7-4b87-b5ca-33598b68546b", "c4b4f130-c536-4b83-bbc7-15a7eda2fa67", "22ed0181-f38c-4a2d-a84e-c5505eb5f14c", "0d9d51d4-b347-480b-88f3-6107f0ba343f", "bc366bf7-30db-4856-9f65-06ffc01596f5", "1f4efcfd-4e03-49d4-b7a4-3f976f2045db", "7877e117-f0ac-4142-841f-84e062f77128", "ca5ea429-6cc0-4870-8513-a4e696b312d4", "ba81920a-23b7-4634-946f-47f0067d9e1a", "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff", "bbb2a004-1783-424f-8aac-d7b71d3a9ff5", "5270f4e2-d0e0-407d-aa12-87954a3d3e74", "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba", "74d34736-f4a0-4638-9465-4f5254ddb1b5", "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf", "ef961774-568d-4746-a790-fa8e22907db5", "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d", "cfd72132-9cdc-4ca6-a106-f35d8f6bd727", "442e062b-8585-4f14-9763-8990c9fd6087", "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645", "5d8860e2-a624-4009-b9a9-6f7d9add93d5", "da439b63-4dc2-45c4-9cf8-d4984413403e", "3b353731-f571-4854-8240-0d49cc81fecc", "ecc43720-0fb4-4b20-9561-73f78021a3fa", "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c", "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad", "22a92103-3ee1-41fa-9722-1fc209caa2c2", "f934846d-8461-44dd-89be-3d4cc7b59a53", "a4163fda-a2c0-4d12-93cb-e016f049fee6", "225f6f2a-445e-48b3-88b5-e3f9daae059a", "acf2e2dd-cc98-4c16-a705-d0010b593083", "de6e8ce5-90fc-4379-9972-951b94897fcc", "b427bbbe-d104-46c5-b6a6-c13e37e5533f", "c9205c03-ea6a-48a0-be07-733f894db4d8", "7e776b86-151e-4a4a-a60a-f36e682e2a50", "4edf486e-f6a7-45a8-9c0b-693675d0b65a", "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea", "f697f236-19a0-4c4f-be80-9e9f02ec7a6f"]
                }
            },
            {
                status: 200,
                body: {
                    "chartOfAccountIds": ["chartOfAccountIds", "chartOfAccountIds"],
                    "id": "id",
                    "currencyCode": "currencyCode",
                    "bankAccountIds": ["bankAccountIds", "bankAccountIds"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class ForecastsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashFlowConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getForecastById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _forecastId = requestParameters["forecastId"];
        if (_forecastId === null || _forecastId === undefined) {
            throw new Error('Required parameter forecastId was null or undefined when calling getForecastById.');
        }
        const _cadenceType = requestParameters["cadenceType"];
        if (_cadenceType === null || _cadenceType === undefined) {
            throw new Error('Required parameter cadenceType was null or undefined when calling getForecastById.');
        }
        const _projectionAmount = requestParameters["projectionAmount"];
        const _historyAmount = requestParameters["historyAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cadenceType !== undefined && _cadenceType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cadenceType, 'cadenceType');
        }
        if (_projectionAmount !== undefined && _projectionAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _projectionAmount, 'projectionAmount');
        }
        if (_historyAmount !== undefined && _historyAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _historyAmount, 'historyAmount');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/forecasts/${encodeURIComponent(String(_forecastId))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getForecastByIdUrl(requestParameters) {
        const _forecastId = requestParameters["forecastId"];
        if (_forecastId === null || _forecastId === undefined) {
            throw new Error('Required parameter forecastId was null or undefined when calling getForecastById.');
        }
        const _cadenceType = requestParameters["cadenceType"];
        if (_cadenceType === null || _cadenceType === undefined) {
            throw new Error('Required parameter cadenceType was null or undefined when calling getForecastById.');
        }
        const _projectionAmount = requestParameters["projectionAmount"];
        const _historyAmount = requestParameters["historyAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cadenceType !== undefined && _cadenceType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cadenceType, 'cadenceType');
        }
        if (_projectionAmount !== undefined && _projectionAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _projectionAmount, 'projectionAmount');
        }
        if (_historyAmount !== undefined && _historyAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _historyAmount, 'historyAmount');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/forecasts/${encodeURIComponent(String(_forecastId))}${queryString ? `?${queryString}` : ''}`;
    }
    getForecasts(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/forecasts`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getForecastsUrl() {
        return `${this.configuration.basePath}/client-api/v1/forecasts`;
    }
}
ForecastsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ForecastsHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_FLOW_BASE_PATH, optional: true }, { token: CashFlowConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ForecastsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ForecastsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ForecastsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_FLOW_BASE_PATH]
                }] }, { type: CashFlowConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ForecastsHttpServiceGetForecastByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/forecasts/{forecastId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "configurationId": "58c844ae-2bf1-419e-aeb6-487f6a18c92b",
                    "syncDatetime": "2020-11-05T11:56:15Z",
                    "currentBalance": "10575882.77283",
                    "currencyCode": "USD",
                    "history": [{
                            "startDate": "2020-11-03",
                            "endDate": "2020-11-03",
                            "openingBalance": "-20500.00000",
                            "closingBalance": "-15500.00000",
                            "netChange": "5000.00000"
                        }, {
                            "startDate": "2020-11-04",
                            "endDate": "2020-11-04",
                            "openingBalance": "-15500.00000",
                            "closingBalance": "0",
                            "netChange": "15500.00000"
                        }],
                    "projection": [{
                            "startDate": "2020-11-05",
                            "endDate": "2020-11-05",
                            "openingBalance": "0",
                            "closingBalance": "6682.33000",
                            "netChange": "6682.33000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-1412.67000",
                                    "accountBalanceChanges": [{
                                            "accountId": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                                            "balanceChange": "-1085.00000"
                                        }, {
                                            "accountId": "225f6f2a-445e-48b3-88b5-e3f9daae059a",
                                            "balanceChange": "-86.44000"
                                        }, {
                                            "accountId": "5d8860e2-a624-4009-b9a9-6f7d9add93d5",
                                            "balanceChange": "-241.23000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "8300.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "8300.00000"
                                        }]
                                }, {
                                    "categoryName": "Uncategorised",
                                    "balanceChange": "-205.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "da439b63-4dc2-45c4-9cf8-d4984413403e",
                                            "balanceChange": "-205.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-06",
                            "endDate": "2020-11-06",
                            "openingBalance": "6682.33000",
                            "closingBalance": "2337.33000",
                            "netChange": "-4345.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-14840.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad",
                                            "balanceChange": "-14840.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "10495.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "10495.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-07",
                            "endDate": "2020-11-07",
                            "openingBalance": "2337.33000",
                            "closingBalance": "-447.67000",
                            "netChange": "-2785.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-17785.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "0d9d51d4-b347-480b-88f3-6107f0ba343f",
                                            "balanceChange": "-755.00000"
                                        }, {
                                            "accountId": "8fca197a-3242-4795-8b06-48d821315ad1",
                                            "balanceChange": "-17030.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "15000.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "1158aa19-894e-40ea-a54f-f2c6808c879a",
                                            "balanceChange": "15000.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-08",
                            "endDate": "2020-11-08",
                            "openingBalance": "-447.67000",
                            "closingBalance": "38332.33000",
                            "netChange": "38780.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-200.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "8fca197a-3242-4795-8b06-48d821315ad1",
                                            "balanceChange": "-200.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "38980.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "38980.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-09",
                            "endDate": "2020-11-09",
                            "openingBalance": "38332.33000",
                            "closingBalance": "62587.33000",
                            "netChange": "24255.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-945.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "8fca197a-3242-4795-8b06-48d821315ad1",
                                            "balanceChange": "-945.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "25200.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "25200.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-10",
                            "endDate": "2020-11-10",
                            "openingBalance": "62587.33000",
                            "closingBalance": "76977.33000",
                            "netChange": "14390.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-12760.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "b427bbbe-d104-46c5-b6a6-c13e37e5533f",
                                            "balanceChange": "-12760.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "27150.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "1158aa19-894e-40ea-a54f-f2c6808c879a",
                                            "balanceChange": "27150.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-11",
                            "endDate": "2020-11-11",
                            "openingBalance": "76977.33000",
                            "closingBalance": "72327.33000",
                            "netChange": "-4650.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Asset",
                                    "balanceChange": "-18900.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "7e776b86-151e-4a4a-a60a-f36e682e2a50",
                                            "balanceChange": "-18900.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "14250.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "dc2af3cd-9c29-4c23-b081-0ceac31d4406",
                                            "balanceChange": "14250.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-12",
                            "endDate": "2020-11-12",
                            "openingBalance": "72327.33000",
                            "closingBalance": "86627.33000",
                            "netChange": "14300.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-4600.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec",
                                            "balanceChange": "-4600.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "18900.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "18900.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-13",
                            "endDate": "2020-11-13",
                            "openingBalance": "86627.33000",
                            "closingBalance": "87837.33000",
                            "netChange": "1210.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-5800.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec",
                                            "balanceChange": "-5800.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "7010.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "9e66abda-69bd-460f-81e2-d540cd2bcf4b",
                                            "balanceChange": "7010.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-14",
                            "endDate": "2020-11-14",
                            "openingBalance": "87837.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "22100.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-900.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "4339c2ee-4040-4996-acf5-810b6c8eb337",
                                            "balanceChange": "-300.00000"
                                        }, {
                                            "accountId": "3b353731-f571-4854-8240-0d49cc81fecc",
                                            "balanceChange": "-600.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "23000.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "23000.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-15",
                            "endDate": "2020-11-15",
                            "openingBalance": "109937.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "0.00000",
                            "categoryBalanceChanges": []
                        }, {
                            "startDate": "2020-11-16",
                            "endDate": "2020-11-16",
                            "openingBalance": "109937.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "0.00000",
                            "categoryBalanceChanges": []
                        }, {
                            "startDate": "2020-11-17",
                            "endDate": "2020-11-17",
                            "openingBalance": "109937.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "0.00000",
                            "categoryBalanceChanges": []
                        }, {
                            "startDate": "2020-11-18",
                            "endDate": "2020-11-18",
                            "openingBalance": "109937.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "0.00000",
                            "categoryBalanceChanges": []
                        }],
                    "chartOfAccounts": [{
                            "id": "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad",
                            "name": "Accounts Receivable (A/R)",
                            "nominalCode": "84",
                            "category": "Asset"
                        }, {
                            "id": "77b9ba20-924e-4be8-8077-87278297d915",
                            "name": "Checking",
                            "nominalCode": "35",
                            "category": "Asset"
                        }, {
                            "id": "7e776b86-151e-4a4a-a60a-f36e682e2a50",
                            "name": "Depreciation",
                            "nominalCode": "39",
                            "category": "Asset"
                        }, {
                            "id": "1f4efcfd-4e03-49d4-b7a4-3f976f2045db",
                            "name": "Inventory Asset",
                            "nominalCode": "81",
                            "category": "Asset"
                        }, {
                            "id": "271c798c-031c-4cfc-828c-d40e37fbb003",
                            "name": "Original Cost",
                            "nominalCode": "38",
                            "category": "Asset"
                        }, {
                            "id": "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf",
                            "name": "Prepaid Expenses",
                            "nominalCode": "3",
                            "category": "Asset"
                        }, {
                            "id": "497559c7-60bf-476c-8b16-09b8952a9722",
                            "name": "Savings",
                            "nominalCode": "36",
                            "category": "Asset"
                        }, {
                            "id": "9e68b349-72af-4cf3-8ea8-abd76f31064e",
                            "name": "Truck",
                            "nominalCode": "37",
                            "category": "Asset"
                        }, {
                            "id": "5f4450f5-7d1b-4cc3-be31-af9df6488a50",
                            "name": "Uncategorized Asset",
                            "nominalCode": "32",
                            "category": "Asset"
                        }, {
                            "id": "1b953b3a-0ea7-4b87-b5ca-33598b68546b",
                            "name": "Undeposited Funds",
                            "nominalCode": "4",
                            "category": "Asset"
                        }, {
                            "id": "6b718262-6099-4f32-9795-7aae2a25eac7",
                            "name": "Opening Balance Equity",
                            "nominalCode": "34",
                            "category": "Equity"
                        }, {
                            "id": "22a92103-3ee1-41fa-9722-1fc209caa2c2",
                            "name": "Retained Earnings",
                            "nominalCode": "2",
                            "category": "Equity"
                        }, {
                            "id": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                            "name": "Accounting",
                            "nominalCode": "69",
                            "category": "Expense"
                        }, {
                            "id": "d4721d9a-d77b-4361-9807-09331ffcb6af",
                            "name": "Advertising",
                            "nominalCode": "7",
                            "category": "Expense"
                        }, {
                            "id": "b427bbbe-d104-46c5-b6a6-c13e37e5533f",
                            "name": "Automobile",
                            "nominalCode": "55",
                            "category": "Expense"
                        }, {
                            "id": "771aad7c-70d2-4f7e-9309-0ab33e11e589",
                            "name": "Bank Charges",
                            "nominalCode": "8",
                            "category": "Expense"
                        }, {
                            "id": "3d9747ce-afbf-4ff1-b23d-559206c5998c",
                            "name": "Bookkeeper",
                            "nominalCode": "70",
                            "category": "Expense"
                        }, {
                            "id": "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c",
                            "name": "Building Repairs",
                            "nominalCode": "73",
                            "category": "Expense"
                        }, {
                            "id": "4d0fca62-d1e0-48fe-8481-9410f25ea4bf",
                            "name": "Commissions & fees",
                            "nominalCode": "9",
                            "category": "Expense"
                        }, {
                            "id": "4339c2ee-4040-4996-acf5-810b6c8eb337",
                            "name": "Computer Repairs",
                            "nominalCode": "74",
                            "category": "Expense"
                        }, {
                            "id": "5270f4e2-d0e0-407d-aa12-87954a3d3e74",
                            "name": "Cost of Goods Sold",
                            "nominalCode": "80",
                            "category": "Expense"
                        }, {
                            "id": "f421c967-88eb-43c1-b19e-aa03f15f67ce",
                            "name": "Cost of Labor",
                            "nominalCode": "59",
                            "category": "Expense"
                        }, {
                            "id": "1137cd94-52b1-45b5-a573-1723c89a35f2",
                            "name": "Decks and Patios",
                            "nominalCode": "64",
                            "category": "Expense"
                        }, {
                            "id": "264c45c4-408e-4d80-ab8e-be4a3babb6c8",
                            "name": "Depreciation",
                            "nominalCode": "40",
                            "category": "Expense"
                        }, {
                            "id": "ccfb434a-b289-441c-99a2-30e05a572057",
                            "name": "Disposal Fees",
                            "nominalCode": "28",
                            "category": "Expense"
                        }, {
                            "id": "9c400ca0-009e-475a-abc6-d5a76154aa0a",
                            "name": "Dues & Subscriptions",
                            "nominalCode": "10",
                            "category": "Expense"
                        }, {
                            "id": "74d34736-f4a0-4638-9465-4f5254ddb1b5",
                            "name": "Equipment Rental",
                            "nominalCode": "29",
                            "category": "Expense"
                        }, {
                            "id": "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d",
                            "name": "Equipment Rental",
                            "nominalCode": "62",
                            "category": "Expense"
                        }, {
                            "id": "0d9d51d4-b347-480b-88f3-6107f0ba343f",
                            "name": "Equipment Repairs",
                            "nominalCode": "75",
                            "category": "Expense"
                        }, {
                            "id": "f697f236-19a0-4c4f-be80-9e9f02ec7a6f",
                            "name": "Fountain and Garden Lighting",
                            "nominalCode": "65",
                            "category": "Expense"
                        }, {
                            "id": "7877e117-f0ac-4142-841f-84e062f77128",
                            "name": "Fuel",
                            "nominalCode": "56",
                            "category": "Expense"
                        }, {
                            "id": "225f6f2a-445e-48b3-88b5-e3f9daae059a",
                            "name": "Gas and Electric",
                            "nominalCode": "76",
                            "category": "Expense"
                        }, {
                            "id": "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645",
                            "name": "Installation",
                            "nominalCode": "60",
                            "category": "Expense"
                        }, {
                            "id": "5d8860e2-a624-4009-b9a9-6f7d9add93d5",
                            "name": "Insurance",
                            "nominalCode": "11",
                            "category": "Expense"
                        }, {
                            "id": "ee810af9-3b00-4de7-9204-c0cbc9bca5f8",
                            "name": "Job Expenses",
                            "nominalCode": "58",
                            "category": "Expense"
                        }, {
                            "id": "ecc43720-0fb4-4b20-9561-73f78021a3fa",
                            "name": "Job Materials",
                            "nominalCode": "63",
                            "category": "Expense"
                        }, {
                            "id": "4a959dfe-428f-48c2-88f6-efc155f2a19c",
                            "name": "Lawyer",
                            "nominalCode": "71",
                            "category": "Expense"
                        }, {
                            "id": "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec",
                            "name": "Legal & Professional Fees",
                            "nominalCode": "12",
                            "category": "Expense"
                        }, {
                            "id": "6333a502-088a-4314-a8d1-05e5cf61e023",
                            "name": "Maintenance and Repair",
                            "nominalCode": "72",
                            "category": "Expense"
                        }, {
                            "id": "4edf486e-f6a7-45a8-9c0b-693675d0b65a",
                            "name": "Maintenance and Repairs",
                            "nominalCode": "61",
                            "category": "Expense"
                        }, {
                            "id": "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad",
                            "name": "Meals and Entertainment",
                            "nominalCode": "13",
                            "category": "Expense"
                        }, {
                            "id": "b2e758c5-92f5-4f52-b915-cc8ea0357868",
                            "name": "Miscellaneous",
                            "nominalCode": "14",
                            "category": "Expense"
                        }, {
                            "id": "1e870df7-7255-41e2-8220-e24c301af038",
                            "name": "Office Expenses",
                            "nominalCode": "15",
                            "category": "Expense"
                        }, {
                            "id": "180cc81e-5621-45f1-8b2f-a7b1aa20cee7",
                            "name": "Penalties & Settlements",
                            "nominalCode": "27",
                            "category": "Expense"
                        }, {
                            "id": "ba81920a-23b7-4634-946f-47f0067d9e1a",
                            "name": "Permits",
                            "nominalCode": "68",
                            "category": "Expense"
                        }, {
                            "id": "c4b4f130-c536-4b83-bbc7-15a7eda2fa67",
                            "name": "Plants and Soil",
                            "nominalCode": "66",
                            "category": "Expense"
                        }, {
                            "id": "8fca197a-3242-4795-8b06-48d821315ad1",
                            "name": "Promotional",
                            "nominalCode": "16",
                            "category": "Expense"
                        }, {
                            "id": "22ed0181-f38c-4a2d-a84e-c5505eb5f14c",
                            "name": "Purchases",
                            "nominalCode": "78",
                            "category": "Expense"
                        }, {
                            "id": "3b353731-f571-4854-8240-0d49cc81fecc",
                            "name": "Rent or Lease",
                            "nominalCode": "17",
                            "category": "Expense"
                        }, {
                            "id": "8e03d0a6-f172-40bd-adf1-3834e9734267",
                            "name": "Repair & Maintenance (deleted)",
                            "nominalCode": "18",
                            "category": "Expense"
                        }, {
                            "id": "bc366bf7-30db-4856-9f65-06ffc01596f5",
                            "name": "Sprinklers and Drip Systems",
                            "nominalCode": "67",
                            "category": "Expense"
                        }, {
                            "id": "c9205c03-ea6a-48a0-be07-733f894db4d8",
                            "name": "Stationery & Printing",
                            "nominalCode": "19",
                            "category": "Expense"
                        }, {
                            "id": "d61afb14-0da1-43ba-935e-4b4a08a012fe",
                            "name": "Supplies",
                            "nominalCode": "20",
                            "category": "Expense"
                        }, {
                            "id": "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8",
                            "name": "Taxes & Licenses",
                            "nominalCode": "21",
                            "category": "Expense"
                        }, {
                            "id": "acf2e2dd-cc98-4c16-a705-d0010b593083",
                            "name": "Telephone",
                            "nominalCode": "77",
                            "category": "Expense"
                        }, {
                            "id": "0e0f7942-612f-481c-8166-ea33fe398a74",
                            "name": "Travel",
                            "nominalCode": "22",
                            "category": "Expense"
                        }, {
                            "id": "1d8e3740-6e22-4908-b37e-7de8bd9a012c",
                            "name": "Travel Meals",
                            "nominalCode": "23",
                            "category": "Expense"
                        }, {
                            "id": "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea",
                            "name": "Unapplied Cash Bill Payment Expense",
                            "nominalCode": "88",
                            "category": "Expense"
                        }, {
                            "id": "3d8fed9c-8726-44fe-bdb0-da49d9457a8d",
                            "name": "Uncategorized Expense",
                            "nominalCode": "31",
                            "category": "Expense"
                        }, {
                            "id": "ca5ea429-6cc0-4870-8513-a4e696b312d4",
                            "name": "Utilities",
                            "nominalCode": "24",
                            "category": "Expense"
                        }, {
                            "id": "a3ad5046-6a41-4b55-9072-66e5872fba62",
                            "name": "Workers Compensation",
                            "nominalCode": "57",
                            "category": "Expense"
                        }, {
                            "id": "773e43aa-8505-48b9-94ef-d7bc5786609a",
                            "name": "Billable Expense Income",
                            "nominalCode": "85",
                            "category": "Income"
                        }, {
                            "id": "026dccb9-d8f6-4116-a3ff-872d0cd628f3",
                            "name": "Decks and Patios",
                            "nominalCode": "47",
                            "category": "Income"
                        }, {
                            "id": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                            "name": "Design income",
                            "nominalCode": "82",
                            "category": "Income"
                        }, {
                            "id": "587bc9dd-553d-4b3d-88d8-5256eedfb499",
                            "name": "Discounts given",
                            "nominalCode": "86",
                            "category": "Income"
                        }, {
                            "id": "ef961774-568d-4746-a790-fa8e22907db5",
                            "name": "Fees Billed",
                            "nominalCode": "5",
                            "category": "Income"
                        }, {
                            "id": "1158aa19-894e-40ea-a54f-f2c6808c879a",
                            "name": "Fountains and Garden Lighting",
                            "nominalCode": "48",
                            "category": "Income"
                        }, {
                            "id": "442e062b-8585-4f14-9763-8990c9fd6087",
                            "name": "Installation",
                            "nominalCode": "52",
                            "category": "Income"
                        }, {
                            "id": "81860ebb-997f-47b6-a1ff-30988af2520d",
                            "name": "Interest Earned",
                            "nominalCode": "25",
                            "category": "Income"
                        }, {
                            "id": "1bb12d54-9d81-4b63-b1c1-af419e47a687",
                            "name": "Job Materials",
                            "nominalCode": "46",
                            "category": "Income"
                        }, {
                            "id": "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff",
                            "name": "Labor",
                            "nominalCode": "51",
                            "category": "Income"
                        }, {
                            "id": "dc2af3cd-9c29-4c23-b081-0ceac31d4406",
                            "name": "Landscaping Services",
                            "nominalCode": "45",
                            "category": "Income"
                        }, {
                            "id": "9e66abda-69bd-460f-81e2-d540cd2bcf4b",
                            "name": "Maintenance and Repair",
                            "nominalCode": "53",
                            "category": "Income"
                        }, {
                            "id": "bbb2a004-1783-424f-8aac-d7b71d3a9ff5",
                            "name": "Other Income",
                            "nominalCode": "83",
                            "category": "Income"
                        }, {
                            "id": "45b174a0-45be-4134-95ee-27b751f29b6e",
                            "name": "Other Portfolio Income",
                            "nominalCode": "26",
                            "category": "Income"
                        }, {
                            "id": "de6e8ce5-90fc-4379-9972-951b94897fcc",
                            "name": "Pest Control Services",
                            "nominalCode": "54",
                            "category": "Income"
                        }, {
                            "id": "b94b7aca-07a3-4e49-b06c-9a89fb84793d",
                            "name": "Plants and Soil",
                            "nominalCode": "49",
                            "category": "Income"
                        }, {
                            "id": "700def49-ca84-4fa5-83d3-3de9cf393200",
                            "name": "Refunds-Allowances",
                            "nominalCode": "6",
                            "category": "Income"
                        }, {
                            "id": "b15090b5-bcea-4655-a7aa-861e6084ca8b",
                            "name": "Sales of Product Income",
                            "nominalCode": "79",
                            "category": "Income"
                        }, {
                            "id": "cfd72132-9cdc-4ca6-a106-f35d8f6bd727",
                            "name": "Services",
                            "nominalCode": "1",
                            "category": "Income"
                        }, {
                            "id": "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba",
                            "name": "Sprinklers and Drip Systems",
                            "nominalCode": "50",
                            "category": "Income"
                        }, {
                            "id": "c9c3eff9-0968-4d1f-b321-c2499c079014",
                            "name": "Unapplied Cash Payment Income",
                            "nominalCode": "87",
                            "category": "Income"
                        }, {
                            "id": "1152c41c-3dec-44e7-9fc6-b9463b9017f5",
                            "name": "Uncategorized Income",
                            "nominalCode": "30",
                            "category": "Income"
                        }, {
                            "id": "a4163fda-a2c0-4d12-93cb-e016f049fee6",
                            "name": "Accounts Payable (A/P)",
                            "nominalCode": "33",
                            "category": "Liability"
                        }, {
                            "id": "e2521f1a-ab18-483f-89d9-ea0434f00989",
                            "name": "Arizona Dept. of Revenue Payable",
                            "nominalCode": "89",
                            "category": "Liability"
                        }, {
                            "id": "7ebcc80a-06b9-4007-a33d-2f0365694a4d",
                            "name": "Board of Equalization Payable",
                            "nominalCode": "90",
                            "category": "Liability"
                        }, {
                            "id": "26dfb943-b6fb-484b-82b5-85eca47fe07c",
                            "name": "Loan Payable",
                            "nominalCode": "43",
                            "category": "Liability"
                        }, {
                            "id": "109b5a2f-8b10-4953-a388-2934f4f60a6e",
                            "name": "Mastercard",
                            "nominalCode": "41",
                            "category": "Liability"
                        }, {
                            "id": "e11719b8-0ec3-4bd7-943a-72f575ef7890",
                            "name": "Notes Payable",
                            "nominalCode": "44",
                            "category": "Liability"
                        }, {
                            "id": "484ef212-372c-41bc-9a0b-9a3b64c78218",
                            "name": "Visa",
                            "nominalCode": "42",
                            "category": "Liability"
                        }, {
                            "id": "da439b63-4dc2-45c4-9cf8-d4984413403e",
                            "name": "Unknown",
                            "description": "Amounts that are not attributed to any specific account.",
                            "category": "Uncategorised"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ForecastsHttpServiceGetForecastsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/forecasts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "references": [{
                            "id": "58c844ae-2bf1-419e-aeb6-487f6a18c92b"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ForecastsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/forecasts/{forecastId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "configurationId": "58c844ae-2bf1-419e-aeb6-487f6a18c92b",
                    "syncDatetime": "2020-11-05T11:56:15Z",
                    "currentBalance": "10575882.77283",
                    "currencyCode": "USD",
                    "history": [{
                            "startDate": "2020-11-03",
                            "endDate": "2020-11-03",
                            "openingBalance": "-20500.00000",
                            "closingBalance": "-15500.00000",
                            "netChange": "5000.00000"
                        }, {
                            "startDate": "2020-11-04",
                            "endDate": "2020-11-04",
                            "openingBalance": "-15500.00000",
                            "closingBalance": "0",
                            "netChange": "15500.00000"
                        }],
                    "projection": [{
                            "startDate": "2020-11-05",
                            "endDate": "2020-11-05",
                            "openingBalance": "0",
                            "closingBalance": "6682.33000",
                            "netChange": "6682.33000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-1412.67000",
                                    "accountBalanceChanges": [{
                                            "accountId": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                                            "balanceChange": "-1085.00000"
                                        }, {
                                            "accountId": "225f6f2a-445e-48b3-88b5-e3f9daae059a",
                                            "balanceChange": "-86.44000"
                                        }, {
                                            "accountId": "5d8860e2-a624-4009-b9a9-6f7d9add93d5",
                                            "balanceChange": "-241.23000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "8300.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "8300.00000"
                                        }]
                                }, {
                                    "categoryName": "Uncategorised",
                                    "balanceChange": "-205.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "da439b63-4dc2-45c4-9cf8-d4984413403e",
                                            "balanceChange": "-205.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-06",
                            "endDate": "2020-11-06",
                            "openingBalance": "6682.33000",
                            "closingBalance": "2337.33000",
                            "netChange": "-4345.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-14840.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad",
                                            "balanceChange": "-14840.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "10495.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "10495.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-07",
                            "endDate": "2020-11-07",
                            "openingBalance": "2337.33000",
                            "closingBalance": "-447.67000",
                            "netChange": "-2785.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-17785.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "0d9d51d4-b347-480b-88f3-6107f0ba343f",
                                            "balanceChange": "-755.00000"
                                        }, {
                                            "accountId": "8fca197a-3242-4795-8b06-48d821315ad1",
                                            "balanceChange": "-17030.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "15000.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "1158aa19-894e-40ea-a54f-f2c6808c879a",
                                            "balanceChange": "15000.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-08",
                            "endDate": "2020-11-08",
                            "openingBalance": "-447.67000",
                            "closingBalance": "38332.33000",
                            "netChange": "38780.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-200.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "8fca197a-3242-4795-8b06-48d821315ad1",
                                            "balanceChange": "-200.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "38980.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "38980.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-09",
                            "endDate": "2020-11-09",
                            "openingBalance": "38332.33000",
                            "closingBalance": "62587.33000",
                            "netChange": "24255.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-945.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "8fca197a-3242-4795-8b06-48d821315ad1",
                                            "balanceChange": "-945.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "25200.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "25200.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-10",
                            "endDate": "2020-11-10",
                            "openingBalance": "62587.33000",
                            "closingBalance": "76977.33000",
                            "netChange": "14390.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-12760.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "b427bbbe-d104-46c5-b6a6-c13e37e5533f",
                                            "balanceChange": "-12760.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "27150.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "1158aa19-894e-40ea-a54f-f2c6808c879a",
                                            "balanceChange": "27150.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-11",
                            "endDate": "2020-11-11",
                            "openingBalance": "76977.33000",
                            "closingBalance": "72327.33000",
                            "netChange": "-4650.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Asset",
                                    "balanceChange": "-18900.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "7e776b86-151e-4a4a-a60a-f36e682e2a50",
                                            "balanceChange": "-18900.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "14250.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "dc2af3cd-9c29-4c23-b081-0ceac31d4406",
                                            "balanceChange": "14250.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-12",
                            "endDate": "2020-11-12",
                            "openingBalance": "72327.33000",
                            "closingBalance": "86627.33000",
                            "netChange": "14300.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-4600.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec",
                                            "balanceChange": "-4600.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "18900.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "18900.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-13",
                            "endDate": "2020-11-13",
                            "openingBalance": "86627.33000",
                            "closingBalance": "87837.33000",
                            "netChange": "1210.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-5800.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec",
                                            "balanceChange": "-5800.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "7010.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "9e66abda-69bd-460f-81e2-d540cd2bcf4b",
                                            "balanceChange": "7010.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-14",
                            "endDate": "2020-11-14",
                            "openingBalance": "87837.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "22100.00000",
                            "categoryBalanceChanges": [{
                                    "categoryName": "Expense",
                                    "balanceChange": "-900.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "4339c2ee-4040-4996-acf5-810b6c8eb337",
                                            "balanceChange": "-300.00000"
                                        }, {
                                            "accountId": "3b353731-f571-4854-8240-0d49cc81fecc",
                                            "balanceChange": "-600.00000"
                                        }]
                                }, {
                                    "categoryName": "Income",
                                    "balanceChange": "23000.00000",
                                    "accountBalanceChanges": [{
                                            "accountId": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                                            "balanceChange": "23000.00000"
                                        }]
                                }]
                        }, {
                            "startDate": "2020-11-15",
                            "endDate": "2020-11-15",
                            "openingBalance": "109937.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "0.00000",
                            "categoryBalanceChanges": []
                        }, {
                            "startDate": "2020-11-16",
                            "endDate": "2020-11-16",
                            "openingBalance": "109937.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "0.00000",
                            "categoryBalanceChanges": []
                        }, {
                            "startDate": "2020-11-17",
                            "endDate": "2020-11-17",
                            "openingBalance": "109937.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "0.00000",
                            "categoryBalanceChanges": []
                        }, {
                            "startDate": "2020-11-18",
                            "endDate": "2020-11-18",
                            "openingBalance": "109937.33000",
                            "closingBalance": "109937.33000",
                            "netChange": "0.00000",
                            "categoryBalanceChanges": []
                        }],
                    "chartOfAccounts": [{
                            "id": "d37dcefc-f5ef-482d-b59a-bad2af1cb9ad",
                            "name": "Accounts Receivable (A/R)",
                            "nominalCode": "84",
                            "category": "Asset"
                        }, {
                            "id": "77b9ba20-924e-4be8-8077-87278297d915",
                            "name": "Checking",
                            "nominalCode": "35",
                            "category": "Asset"
                        }, {
                            "id": "7e776b86-151e-4a4a-a60a-f36e682e2a50",
                            "name": "Depreciation",
                            "nominalCode": "39",
                            "category": "Asset"
                        }, {
                            "id": "1f4efcfd-4e03-49d4-b7a4-3f976f2045db",
                            "name": "Inventory Asset",
                            "nominalCode": "81",
                            "category": "Asset"
                        }, {
                            "id": "271c798c-031c-4cfc-828c-d40e37fbb003",
                            "name": "Original Cost",
                            "nominalCode": "38",
                            "category": "Asset"
                        }, {
                            "id": "e987c68b-6fd9-4a86-bc9b-bac1040fbbbf",
                            "name": "Prepaid Expenses",
                            "nominalCode": "3",
                            "category": "Asset"
                        }, {
                            "id": "497559c7-60bf-476c-8b16-09b8952a9722",
                            "name": "Savings",
                            "nominalCode": "36",
                            "category": "Asset"
                        }, {
                            "id": "9e68b349-72af-4cf3-8ea8-abd76f31064e",
                            "name": "Truck",
                            "nominalCode": "37",
                            "category": "Asset"
                        }, {
                            "id": "5f4450f5-7d1b-4cc3-be31-af9df6488a50",
                            "name": "Uncategorized Asset",
                            "nominalCode": "32",
                            "category": "Asset"
                        }, {
                            "id": "1b953b3a-0ea7-4b87-b5ca-33598b68546b",
                            "name": "Undeposited Funds",
                            "nominalCode": "4",
                            "category": "Asset"
                        }, {
                            "id": "6b718262-6099-4f32-9795-7aae2a25eac7",
                            "name": "Opening Balance Equity",
                            "nominalCode": "34",
                            "category": "Equity"
                        }, {
                            "id": "22a92103-3ee1-41fa-9722-1fc209caa2c2",
                            "name": "Retained Earnings",
                            "nominalCode": "2",
                            "category": "Equity"
                        }, {
                            "id": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                            "name": "Accounting",
                            "nominalCode": "69",
                            "category": "Expense"
                        }, {
                            "id": "d4721d9a-d77b-4361-9807-09331ffcb6af",
                            "name": "Advertising",
                            "nominalCode": "7",
                            "category": "Expense"
                        }, {
                            "id": "b427bbbe-d104-46c5-b6a6-c13e37e5533f",
                            "name": "Automobile",
                            "nominalCode": "55",
                            "category": "Expense"
                        }, {
                            "id": "771aad7c-70d2-4f7e-9309-0ab33e11e589",
                            "name": "Bank Charges",
                            "nominalCode": "8",
                            "category": "Expense"
                        }, {
                            "id": "3d9747ce-afbf-4ff1-b23d-559206c5998c",
                            "name": "Bookkeeper",
                            "nominalCode": "70",
                            "category": "Expense"
                        }, {
                            "id": "2c7ba8c3-8c1d-4e95-b641-e78cbba8c45c",
                            "name": "Building Repairs",
                            "nominalCode": "73",
                            "category": "Expense"
                        }, {
                            "id": "4d0fca62-d1e0-48fe-8481-9410f25ea4bf",
                            "name": "Commissions & fees",
                            "nominalCode": "9",
                            "category": "Expense"
                        }, {
                            "id": "4339c2ee-4040-4996-acf5-810b6c8eb337",
                            "name": "Computer Repairs",
                            "nominalCode": "74",
                            "category": "Expense"
                        }, {
                            "id": "5270f4e2-d0e0-407d-aa12-87954a3d3e74",
                            "name": "Cost of Goods Sold",
                            "nominalCode": "80",
                            "category": "Expense"
                        }, {
                            "id": "f421c967-88eb-43c1-b19e-aa03f15f67ce",
                            "name": "Cost of Labor",
                            "nominalCode": "59",
                            "category": "Expense"
                        }, {
                            "id": "1137cd94-52b1-45b5-a573-1723c89a35f2",
                            "name": "Decks and Patios",
                            "nominalCode": "64",
                            "category": "Expense"
                        }, {
                            "id": "264c45c4-408e-4d80-ab8e-be4a3babb6c8",
                            "name": "Depreciation",
                            "nominalCode": "40",
                            "category": "Expense"
                        }, {
                            "id": "ccfb434a-b289-441c-99a2-30e05a572057",
                            "name": "Disposal Fees",
                            "nominalCode": "28",
                            "category": "Expense"
                        }, {
                            "id": "9c400ca0-009e-475a-abc6-d5a76154aa0a",
                            "name": "Dues & Subscriptions",
                            "nominalCode": "10",
                            "category": "Expense"
                        }, {
                            "id": "74d34736-f4a0-4638-9465-4f5254ddb1b5",
                            "name": "Equipment Rental",
                            "nominalCode": "29",
                            "category": "Expense"
                        }, {
                            "id": "6b90b48e-d8b6-4dc5-8ed4-eb509141e39d",
                            "name": "Equipment Rental",
                            "nominalCode": "62",
                            "category": "Expense"
                        }, {
                            "id": "0d9d51d4-b347-480b-88f3-6107f0ba343f",
                            "name": "Equipment Repairs",
                            "nominalCode": "75",
                            "category": "Expense"
                        }, {
                            "id": "f697f236-19a0-4c4f-be80-9e9f02ec7a6f",
                            "name": "Fountain and Garden Lighting",
                            "nominalCode": "65",
                            "category": "Expense"
                        }, {
                            "id": "7877e117-f0ac-4142-841f-84e062f77128",
                            "name": "Fuel",
                            "nominalCode": "56",
                            "category": "Expense"
                        }, {
                            "id": "225f6f2a-445e-48b3-88b5-e3f9daae059a",
                            "name": "Gas and Electric",
                            "nominalCode": "76",
                            "category": "Expense"
                        }, {
                            "id": "35f1c9d8-2ce4-4f9e-9b34-ac7a0d802645",
                            "name": "Installation",
                            "nominalCode": "60",
                            "category": "Expense"
                        }, {
                            "id": "5d8860e2-a624-4009-b9a9-6f7d9add93d5",
                            "name": "Insurance",
                            "nominalCode": "11",
                            "category": "Expense"
                        }, {
                            "id": "ee810af9-3b00-4de7-9204-c0cbc9bca5f8",
                            "name": "Job Expenses",
                            "nominalCode": "58",
                            "category": "Expense"
                        }, {
                            "id": "ecc43720-0fb4-4b20-9561-73f78021a3fa",
                            "name": "Job Materials",
                            "nominalCode": "63",
                            "category": "Expense"
                        }, {
                            "id": "4a959dfe-428f-48c2-88f6-efc155f2a19c",
                            "name": "Lawyer",
                            "nominalCode": "71",
                            "category": "Expense"
                        }, {
                            "id": "ecff9789-dff3-44a7-8ffa-72fa0af8a7ec",
                            "name": "Legal & Professional Fees",
                            "nominalCode": "12",
                            "category": "Expense"
                        }, {
                            "id": "6333a502-088a-4314-a8d1-05e5cf61e023",
                            "name": "Maintenance and Repair",
                            "nominalCode": "72",
                            "category": "Expense"
                        }, {
                            "id": "4edf486e-f6a7-45a8-9c0b-693675d0b65a",
                            "name": "Maintenance and Repairs",
                            "nominalCode": "61",
                            "category": "Expense"
                        }, {
                            "id": "cfeb44c9-9e25-4fbc-9648-a49b7cf82dad",
                            "name": "Meals and Entertainment",
                            "nominalCode": "13",
                            "category": "Expense"
                        }, {
                            "id": "b2e758c5-92f5-4f52-b915-cc8ea0357868",
                            "name": "Miscellaneous",
                            "nominalCode": "14",
                            "category": "Expense"
                        }, {
                            "id": "1e870df7-7255-41e2-8220-e24c301af038",
                            "name": "Office Expenses",
                            "nominalCode": "15",
                            "category": "Expense"
                        }, {
                            "id": "180cc81e-5621-45f1-8b2f-a7b1aa20cee7",
                            "name": "Penalties & Settlements",
                            "nominalCode": "27",
                            "category": "Expense"
                        }, {
                            "id": "ba81920a-23b7-4634-946f-47f0067d9e1a",
                            "name": "Permits",
                            "nominalCode": "68",
                            "category": "Expense"
                        }, {
                            "id": "c4b4f130-c536-4b83-bbc7-15a7eda2fa67",
                            "name": "Plants and Soil",
                            "nominalCode": "66",
                            "category": "Expense"
                        }, {
                            "id": "8fca197a-3242-4795-8b06-48d821315ad1",
                            "name": "Promotional",
                            "nominalCode": "16",
                            "category": "Expense"
                        }, {
                            "id": "22ed0181-f38c-4a2d-a84e-c5505eb5f14c",
                            "name": "Purchases",
                            "nominalCode": "78",
                            "category": "Expense"
                        }, {
                            "id": "3b353731-f571-4854-8240-0d49cc81fecc",
                            "name": "Rent or Lease",
                            "nominalCode": "17",
                            "category": "Expense"
                        }, {
                            "id": "8e03d0a6-f172-40bd-adf1-3834e9734267",
                            "name": "Repair & Maintenance (deleted)",
                            "nominalCode": "18",
                            "category": "Expense"
                        }, {
                            "id": "bc366bf7-30db-4856-9f65-06ffc01596f5",
                            "name": "Sprinklers and Drip Systems",
                            "nominalCode": "67",
                            "category": "Expense"
                        }, {
                            "id": "c9205c03-ea6a-48a0-be07-733f894db4d8",
                            "name": "Stationery & Printing",
                            "nominalCode": "19",
                            "category": "Expense"
                        }, {
                            "id": "d61afb14-0da1-43ba-935e-4b4a08a012fe",
                            "name": "Supplies",
                            "nominalCode": "20",
                            "category": "Expense"
                        }, {
                            "id": "bb4a5e05-87bd-4373-9b8a-b1dbbd6ec3c8",
                            "name": "Taxes & Licenses",
                            "nominalCode": "21",
                            "category": "Expense"
                        }, {
                            "id": "acf2e2dd-cc98-4c16-a705-d0010b593083",
                            "name": "Telephone",
                            "nominalCode": "77",
                            "category": "Expense"
                        }, {
                            "id": "0e0f7942-612f-481c-8166-ea33fe398a74",
                            "name": "Travel",
                            "nominalCode": "22",
                            "category": "Expense"
                        }, {
                            "id": "1d8e3740-6e22-4908-b37e-7de8bd9a012c",
                            "name": "Travel Meals",
                            "nominalCode": "23",
                            "category": "Expense"
                        }, {
                            "id": "fb3ced8a-8bd5-41e6-8f6d-7c74fcb5aaea",
                            "name": "Unapplied Cash Bill Payment Expense",
                            "nominalCode": "88",
                            "category": "Expense"
                        }, {
                            "id": "3d8fed9c-8726-44fe-bdb0-da49d9457a8d",
                            "name": "Uncategorized Expense",
                            "nominalCode": "31",
                            "category": "Expense"
                        }, {
                            "id": "ca5ea429-6cc0-4870-8513-a4e696b312d4",
                            "name": "Utilities",
                            "nominalCode": "24",
                            "category": "Expense"
                        }, {
                            "id": "a3ad5046-6a41-4b55-9072-66e5872fba62",
                            "name": "Workers Compensation",
                            "nominalCode": "57",
                            "category": "Expense"
                        }, {
                            "id": "773e43aa-8505-48b9-94ef-d7bc5786609a",
                            "name": "Billable Expense Income",
                            "nominalCode": "85",
                            "category": "Income"
                        }, {
                            "id": "026dccb9-d8f6-4116-a3ff-872d0cd628f3",
                            "name": "Decks and Patios",
                            "nominalCode": "47",
                            "category": "Income"
                        }, {
                            "id": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                            "name": "Design income",
                            "nominalCode": "82",
                            "category": "Income"
                        }, {
                            "id": "587bc9dd-553d-4b3d-88d8-5256eedfb499",
                            "name": "Discounts given",
                            "nominalCode": "86",
                            "category": "Income"
                        }, {
                            "id": "ef961774-568d-4746-a790-fa8e22907db5",
                            "name": "Fees Billed",
                            "nominalCode": "5",
                            "category": "Income"
                        }, {
                            "id": "1158aa19-894e-40ea-a54f-f2c6808c879a",
                            "name": "Fountains and Garden Lighting",
                            "nominalCode": "48",
                            "category": "Income"
                        }, {
                            "id": "442e062b-8585-4f14-9763-8990c9fd6087",
                            "name": "Installation",
                            "nominalCode": "52",
                            "category": "Income"
                        }, {
                            "id": "81860ebb-997f-47b6-a1ff-30988af2520d",
                            "name": "Interest Earned",
                            "nominalCode": "25",
                            "category": "Income"
                        }, {
                            "id": "1bb12d54-9d81-4b63-b1c1-af419e47a687",
                            "name": "Job Materials",
                            "nominalCode": "46",
                            "category": "Income"
                        }, {
                            "id": "c9927ae1-eaeb-4b02-baeb-d6bcd64a20ff",
                            "name": "Labor",
                            "nominalCode": "51",
                            "category": "Income"
                        }, {
                            "id": "dc2af3cd-9c29-4c23-b081-0ceac31d4406",
                            "name": "Landscaping Services",
                            "nominalCode": "45",
                            "category": "Income"
                        }, {
                            "id": "9e66abda-69bd-460f-81e2-d540cd2bcf4b",
                            "name": "Maintenance and Repair",
                            "nominalCode": "53",
                            "category": "Income"
                        }, {
                            "id": "bbb2a004-1783-424f-8aac-d7b71d3a9ff5",
                            "name": "Other Income",
                            "nominalCode": "83",
                            "category": "Income"
                        }, {
                            "id": "45b174a0-45be-4134-95ee-27b751f29b6e",
                            "name": "Other Portfolio Income",
                            "nominalCode": "26",
                            "category": "Income"
                        }, {
                            "id": "de6e8ce5-90fc-4379-9972-951b94897fcc",
                            "name": "Pest Control Services",
                            "nominalCode": "54",
                            "category": "Income"
                        }, {
                            "id": "b94b7aca-07a3-4e49-b06c-9a89fb84793d",
                            "name": "Plants and Soil",
                            "nominalCode": "49",
                            "category": "Income"
                        }, {
                            "id": "700def49-ca84-4fa5-83d3-3de9cf393200",
                            "name": "Refunds-Allowances",
                            "nominalCode": "6",
                            "category": "Income"
                        }, {
                            "id": "b15090b5-bcea-4655-a7aa-861e6084ca8b",
                            "name": "Sales of Product Income",
                            "nominalCode": "79",
                            "category": "Income"
                        }, {
                            "id": "cfd72132-9cdc-4ca6-a106-f35d8f6bd727",
                            "name": "Services",
                            "nominalCode": "1",
                            "category": "Income"
                        }, {
                            "id": "6d9c8716-fee0-4da2-a3dc-3abd5afbfdba",
                            "name": "Sprinklers and Drip Systems",
                            "nominalCode": "50",
                            "category": "Income"
                        }, {
                            "id": "c9c3eff9-0968-4d1f-b321-c2499c079014",
                            "name": "Unapplied Cash Payment Income",
                            "nominalCode": "87",
                            "category": "Income"
                        }, {
                            "id": "1152c41c-3dec-44e7-9fc6-b9463b9017f5",
                            "name": "Uncategorized Income",
                            "nominalCode": "30",
                            "category": "Income"
                        }, {
                            "id": "a4163fda-a2c0-4d12-93cb-e016f049fee6",
                            "name": "Accounts Payable (A/P)",
                            "nominalCode": "33",
                            "category": "Liability"
                        }, {
                            "id": "e2521f1a-ab18-483f-89d9-ea0434f00989",
                            "name": "Arizona Dept. of Revenue Payable",
                            "nominalCode": "89",
                            "category": "Liability"
                        }, {
                            "id": "7ebcc80a-06b9-4007-a33d-2f0365694a4d",
                            "name": "Board of Equalization Payable",
                            "nominalCode": "90",
                            "category": "Liability"
                        }, {
                            "id": "26dfb943-b6fb-484b-82b5-85eca47fe07c",
                            "name": "Loan Payable",
                            "nominalCode": "43",
                            "category": "Liability"
                        }, {
                            "id": "109b5a2f-8b10-4953-a388-2934f4f60a6e",
                            "name": "Mastercard",
                            "nominalCode": "41",
                            "category": "Liability"
                        }, {
                            "id": "e11719b8-0ec3-4bd7-943a-72f575ef7890",
                            "name": "Notes Payable",
                            "nominalCode": "44",
                            "category": "Liability"
                        }, {
                            "id": "484ef212-372c-41bc-9a0b-9a3b64c78218",
                            "name": "Visa",
                            "nominalCode": "42",
                            "category": "Liability"
                        }, {
                            "id": "da439b63-4dc2-45c4-9cf8-d4984413403e",
                            "name": "Unknown",
                            "description": "Amounts that are not attributed to any specific account.",
                            "category": "Uncategorised"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/forecasts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "references": [{
                            "id": "58c844ae-2bf1-419e-aeb6-487f6a18c92b"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class PayablesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashFlowConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getPayableById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _payableId = requestParameters["payableId"];
        if (_payableId === null || _payableId === undefined) {
            throw new Error('Required parameter payableId was null or undefined when calling getPayableById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/payables/${encodeURIComponent(String(_payableId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPayableByIdUrl(requestParameters) {
        const _payableId = requestParameters["payableId"];
        if (_payableId === null || _payableId === undefined) {
            throw new Error('Required parameter payableId was null or undefined when calling getPayableById.');
        }
        return `${this.configuration.basePath}/client-api/v1/payables/${encodeURIComponent(String(_payableId))}`;
    }
    getPayables(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _statuses = requestParameters["statuses"];
        const _sort = requestParameters["sort"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_statuses) {
            _statuses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'statuses');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/payables`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPayablesUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _statuses = requestParameters["statuses"];
        const _sort = requestParameters["sort"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_statuses) {
            _statuses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'statuses');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/payables${queryString ? `?${queryString}` : ''}`;
    }
    putExpectedDateByPayableId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _payableId = requestParameters["payableId"];
        if (_payableId === null || _payableId === undefined) {
            throw new Error('Required parameter payableId was null or undefined when calling putExpectedDateByPayableId.');
        }
        const _putPaymentRequestExpectedDateRequest = requestParameters["putPaymentRequestExpectedDateRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/payables/${encodeURIComponent(String(_payableId))}/expected-date`, _putPaymentRequestExpectedDateRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putExpectedDateByPayableIdUrl(requestParameters) {
        const _payableId = requestParameters["payableId"];
        if (_payableId === null || _payableId === undefined) {
            throw new Error('Required parameter payableId was null or undefined when calling putExpectedDateByPayableId.');
        }
        const _putPaymentRequestExpectedDateRequest = requestParameters["putPaymentRequestExpectedDateRequest"];
        return `${this.configuration.basePath}/client-api/v1/payables/${encodeURIComponent(String(_payableId))}/expected-date`;
    }
}
PayablesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayablesHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_FLOW_BASE_PATH, optional: true }, { token: CashFlowConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PayablesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayablesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayablesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_FLOW_BASE_PATH]
                }] }, { type: CashFlowConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PayablesHttpServiceGetPayableByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/payables/{payableId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "status": "Open",
                    "id": "c041aa5f-8d64-4c03-b7a4-9f84bb030811",
                    "referenceNumber": "SEP00-1",
                    "issueDate": "2020-11-05T00:00:00Z",
                    "dueDate": "2020-12-02T00:00:00Z",
                    "expectedDate": "2020-12-02T00:00:00Z",
                    "dueAmount": "770.00000",
                    "paidAmount": "0.00000",
                    "totalAmount": "770.00000",
                    "currencyCode": "USD",
                    "counterparty": {
                        "id": "f8dbd544-ea7c-48b1-96a4-fffee569f236",
                        "name": "Robertson & Associates",
                        "type": "Supplier"
                    },
                    "chartOfAccounts": [{
                            "id": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                            "name": "Accounting",
                            "nominalCode": "69",
                            "category": "Expense"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PayablesHttpServiceGetPayablesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/payables",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "syncDatetime": "2020-01-31T12:12:12Z",
                    "payables": [{
                            "id": "1234-5678-9012-3457",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-02-24T12:12:12Z",
                            "dueAmount": "2.00",
                            "paidAmount": "0.00",
                            "totalAmount": "2.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-bill-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3333",
                                "name": "Richard Brautigan",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7effsfr52",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }],
                            "status": "Open"
                        }, {
                            "id": "1234-5678-9012-3458",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-02-12T12:12:12Z",
                            "dueAmount": "10.00",
                            "paidAmount": "0.00",
                            "totalAmount": "10.00",
                            "currencyCode": "CAD",
                            "referenceNumber": "125-bill-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3334",
                                "name": "Walt Whitman",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7eff72345",
                                    "name": "Accounts Payable",
                                    "category": "Asset"
                                }, {
                                    "id": "b068a7bb-917d-4484-8dd6-71cb2a9c9873",
                                    "name": "It Consults",
                                    "category": "Expenses"
                                }],
                            "status": "Draft"
                        }, {
                            "id": "1234-5678-9012-3459",
                            "dueDate": "2019-12-31T12:12:12Z",
                            "expectedDate": "2020-03-13T12:12:12Z",
                            "dueAmount": "0",
                            "paidAmount": "155.00",
                            "totalAmount": "155.00",
                            "currencyCode": "EUR",
                            "referenceNumber": "124-bill-number",
                            "issueDate": "2019-10-10T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3335",
                                "name": "Paul Celan",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7eff98fh6",
                                    "name": "Accounts Payable",
                                    "category": "Liability"
                                }],
                            "status": "Paid"
                        }, {
                            "id": "1234-5678-9012-3460",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-04-15T12:12:12Z",
                            "dueAmount": "20020.00",
                            "paidAmount": "20000.00",
                            "totalAmount": "40020.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-bill-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3336",
                                "name": "Sylvia Plath",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "b068a7bb-917d-4484-8dd6-71cb2ad8t528",
                                    "name": "Accounts Payable",
                                    "category": "Liability"
                                }, {
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7ef0nfh67",
                                    "name": "It Consults",
                                    "category": "Expenses"
                                }, {
                                    "id": "6hfy2e6d-bb31-463a-802f-65a7eff98fh6",
                                    "name": "Business Bank Account",
                                    "category": "Asset"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3461",
                            "dueDate": "2020-02-28T12:12:12Z",
                            "expectedDate": "2020-05-15T12:12:12Z",
                            "dueAmount": "10000.00",
                            "paidAmount": "10000.00",
                            "totalAmount": "20000.00",
                            "currencyCode": "USD",
                            "referenceNumber": "125-bill-number",
                            "issueDate": "2019-12-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3337",
                                "name": "Jeff Beck",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7eff9ufy6",
                                    "name": "Accounts Payable",
                                    "category": "Liability"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3462",
                            "dueDate": "2019-12-21T12:12:12Z",
                            "expectedDate": "2020-06-17T12:12:12Z",
                            "dueAmount": "10000.00",
                            "paidAmount": "20000.00",
                            "totalAmount": "30000.00",
                            "currencyCode": "RUB",
                            "referenceNumber": "124-bill-number",
                            "issueDate": "2019-11-10T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3338",
                                "name": "Boris Ryzhyi",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-78ahy3f98fh6",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3463",
                            "dueDate": "2020-01-19T12:12:12Z",
                            "expectedDate": "2019-11-30T12:12:12Z",
                            "dueAmount": "0",
                            "paidAmount": "400000.00",
                            "totalAmount": "400000.00",
                            "currencyCode": "CAD",
                            "referenceNumber": "125-bill-number",
                            "issueDate": "2019-11-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3339",
                                "name": "Emily Dickinson",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "7hn1f542-bb31-463a-802f-78ahy3f98fh6",
                                    "name": "It Consults",
                                    "category": "Expenses"
                                }],
                            "status": "Paid"
                        }, {
                            "id": "1234-5678-9012-3464",
                            "dueDate": "2019-12-26T12:12:12Z",
                            "expectedDate": "2020-07-17T12:12:12Z",
                            "dueAmount": "2000.00",
                            "paidAmount": "8000.00",
                            "totalAmount": "10000.00",
                            "currencyCode": "EUR",
                            "referenceNumber": "124-bill-number",
                            "issueDate": "2019-10-15T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3340",
                                "name": "Mary Jane",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "13bgf542-bb31-463a-802f-78ahy3f98fh6",
                                    "name": "It Consults",
                                    "category": "Expenses"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3465",
                            "dueDate": "2019-11-30T12:12:12Z",
                            "expectedDate": "2019-11-30T12:12:12Z",
                            "dueAmount": "20020.00",
                            "paidAmount": "0.00",
                            "totalAmount": "20020.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-bill-number",
                            "issueDate": "2019-10-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3341",
                                "name": "William Yeats",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "7hn1f542-bb31-463a-802f-1gtr23f98fh6",
                                    "name": "Business Bank Account",
                                    "category": "Asset"
                                }],
                            "status": "Unknown"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PayablesHttpServicePutExpectedDateByPayableIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/payables/{payableId}/expected-date",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "status": "Open",
                    "id": "c041aa5f-8d64-4c03-b7a4-9f84bb030811",
                    "referenceNumber": "SEP00-1",
                    "issueDate": "2020-11-05T00:00:00Z",
                    "dueDate": "2020-12-02T00:00:00Z",
                    "expectedDate": "2020-12-02T00:00:00Z",
                    "dueAmount": "770.00000",
                    "paidAmount": "0.00000",
                    "totalAmount": "770.00000",
                    "currencyCode": "USD",
                    "counterparty": {
                        "id": "f8dbd544-ea7c-48b1-96a4-fffee569f236",
                        "name": "Robertson & Associates",
                        "type": "Supplier"
                    },
                    "chartOfAccounts": [{
                            "id": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                            "name": "Accounting",
                            "nominalCode": "69",
                            "category": "Expense"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PayablesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/payables/{payableId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "status": "Open",
                    "id": "c041aa5f-8d64-4c03-b7a4-9f84bb030811",
                    "referenceNumber": "SEP00-1",
                    "issueDate": "2020-11-05T00:00:00Z",
                    "dueDate": "2020-12-02T00:00:00Z",
                    "expectedDate": "2020-12-02T00:00:00Z",
                    "dueAmount": "770.00000",
                    "paidAmount": "0.00000",
                    "totalAmount": "770.00000",
                    "currencyCode": "USD",
                    "counterparty": {
                        "id": "f8dbd544-ea7c-48b1-96a4-fffee569f236",
                        "name": "Robertson & Associates",
                        "type": "Supplier"
                    },
                    "chartOfAccounts": [{
                            "id": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                            "name": "Accounting",
                            "nominalCode": "69",
                            "category": "Expense"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/payables",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "syncDatetime": "2020-01-31T12:12:12Z",
                    "payables": [{
                            "id": "1234-5678-9012-3457",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-02-24T12:12:12Z",
                            "dueAmount": "2.00",
                            "paidAmount": "0.00",
                            "totalAmount": "2.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-bill-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3333",
                                "name": "Richard Brautigan",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7effsfr52",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }],
                            "status": "Open"
                        }, {
                            "id": "1234-5678-9012-3458",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-02-12T12:12:12Z",
                            "dueAmount": "10.00",
                            "paidAmount": "0.00",
                            "totalAmount": "10.00",
                            "currencyCode": "CAD",
                            "referenceNumber": "125-bill-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3334",
                                "name": "Walt Whitman",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7eff72345",
                                    "name": "Accounts Payable",
                                    "category": "Asset"
                                }, {
                                    "id": "b068a7bb-917d-4484-8dd6-71cb2a9c9873",
                                    "name": "It Consults",
                                    "category": "Expenses"
                                }],
                            "status": "Draft"
                        }, {
                            "id": "1234-5678-9012-3459",
                            "dueDate": "2019-12-31T12:12:12Z",
                            "expectedDate": "2020-03-13T12:12:12Z",
                            "dueAmount": "0",
                            "paidAmount": "155.00",
                            "totalAmount": "155.00",
                            "currencyCode": "EUR",
                            "referenceNumber": "124-bill-number",
                            "issueDate": "2019-10-10T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3335",
                                "name": "Paul Celan",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7eff98fh6",
                                    "name": "Accounts Payable",
                                    "category": "Liability"
                                }],
                            "status": "Paid"
                        }, {
                            "id": "1234-5678-9012-3460",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-04-15T12:12:12Z",
                            "dueAmount": "20020.00",
                            "paidAmount": "20000.00",
                            "totalAmount": "40020.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-bill-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3336",
                                "name": "Sylvia Plath",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "b068a7bb-917d-4484-8dd6-71cb2ad8t528",
                                    "name": "Accounts Payable",
                                    "category": "Liability"
                                }, {
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7ef0nfh67",
                                    "name": "It Consults",
                                    "category": "Expenses"
                                }, {
                                    "id": "6hfy2e6d-bb31-463a-802f-65a7eff98fh6",
                                    "name": "Business Bank Account",
                                    "category": "Asset"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3461",
                            "dueDate": "2020-02-28T12:12:12Z",
                            "expectedDate": "2020-05-15T12:12:12Z",
                            "dueAmount": "10000.00",
                            "paidAmount": "10000.00",
                            "totalAmount": "20000.00",
                            "currencyCode": "USD",
                            "referenceNumber": "125-bill-number",
                            "issueDate": "2019-12-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3337",
                                "name": "Jeff Beck",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7eff9ufy6",
                                    "name": "Accounts Payable",
                                    "category": "Liability"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3462",
                            "dueDate": "2019-12-21T12:12:12Z",
                            "expectedDate": "2020-06-17T12:12:12Z",
                            "dueAmount": "10000.00",
                            "paidAmount": "20000.00",
                            "totalAmount": "30000.00",
                            "currencyCode": "RUB",
                            "referenceNumber": "124-bill-number",
                            "issueDate": "2019-11-10T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3338",
                                "name": "Boris Ryzhyi",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-78ahy3f98fh6",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3463",
                            "dueDate": "2020-01-19T12:12:12Z",
                            "expectedDate": "2019-11-30T12:12:12Z",
                            "dueAmount": "0",
                            "paidAmount": "400000.00",
                            "totalAmount": "400000.00",
                            "currencyCode": "CAD",
                            "referenceNumber": "125-bill-number",
                            "issueDate": "2019-11-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3339",
                                "name": "Emily Dickinson",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "7hn1f542-bb31-463a-802f-78ahy3f98fh6",
                                    "name": "It Consults",
                                    "category": "Expenses"
                                }],
                            "status": "Paid"
                        }, {
                            "id": "1234-5678-9012-3464",
                            "dueDate": "2019-12-26T12:12:12Z",
                            "expectedDate": "2020-07-17T12:12:12Z",
                            "dueAmount": "2000.00",
                            "paidAmount": "8000.00",
                            "totalAmount": "10000.00",
                            "currencyCode": "EUR",
                            "referenceNumber": "124-bill-number",
                            "issueDate": "2019-10-15T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3340",
                                "name": "Mary Jane",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "13bgf542-bb31-463a-802f-78ahy3f98fh6",
                                    "name": "It Consults",
                                    "category": "Expenses"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3465",
                            "dueDate": "2019-11-30T12:12:12Z",
                            "expectedDate": "2019-11-30T12:12:12Z",
                            "dueAmount": "20020.00",
                            "paidAmount": "0.00",
                            "totalAmount": "20020.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-bill-number",
                            "issueDate": "2019-10-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3341",
                                "name": "William Yeats",
                                "type": "Supplier"
                            },
                            "chartOfAccounts": [{
                                    "id": "7hn1f542-bb31-463a-802f-1gtr23f98fh6",
                                    "name": "Business Bank Account",
                                    "category": "Asset"
                                }],
                            "status": "Unknown"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/payables/{payableId}/expected-date",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "status": "Open",
                    "id": "c041aa5f-8d64-4c03-b7a4-9f84bb030811",
                    "referenceNumber": "SEP00-1",
                    "issueDate": "2020-11-05T00:00:00Z",
                    "dueDate": "2020-12-02T00:00:00Z",
                    "expectedDate": "2020-12-02T00:00:00Z",
                    "dueAmount": "770.00000",
                    "paidAmount": "0.00000",
                    "totalAmount": "770.00000",
                    "currencyCode": "USD",
                    "counterparty": {
                        "id": "f8dbd544-ea7c-48b1-96a4-fffee569f236",
                        "name": "Robertson & Associates",
                        "type": "Supplier"
                    },
                    "chartOfAccounts": [{
                            "id": "8c48192a-723f-4f76-b3a7-c2be76c3bdc8",
                            "name": "Accounting",
                            "nominalCode": "69",
                            "category": "Expense"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class ReceivablesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashFlowConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getReceivableById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _receivableId = requestParameters["receivableId"];
        if (_receivableId === null || _receivableId === undefined) {
            throw new Error('Required parameter receivableId was null or undefined when calling getReceivableById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/receivables/${encodeURIComponent(String(_receivableId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getReceivableByIdUrl(requestParameters) {
        const _receivableId = requestParameters["receivableId"];
        if (_receivableId === null || _receivableId === undefined) {
            throw new Error('Required parameter receivableId was null or undefined when calling getReceivableById.');
        }
        return `${this.configuration.basePath}/client-api/v1/receivables/${encodeURIComponent(String(_receivableId))}`;
    }
    getReceivables(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _statuses = requestParameters["statuses"];
        const _sort = requestParameters["sort"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_statuses) {
            _statuses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'statuses');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/receivables`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getReceivablesUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _statuses = requestParameters["statuses"];
        const _sort = requestParameters["sort"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_statuses) {
            _statuses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'statuses');
            });
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/receivables${queryString ? `?${queryString}` : ''}`;
    }
    putExpectedDateByReceivableId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _receivableId = requestParameters["receivableId"];
        if (_receivableId === null || _receivableId === undefined) {
            throw new Error('Required parameter receivableId was null or undefined when calling putExpectedDateByReceivableId.');
        }
        const _putPaymentRequestExpectedDateRequest = requestParameters["putPaymentRequestExpectedDateRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/receivables/${encodeURIComponent(String(_receivableId))}/expected-date`, _putPaymentRequestExpectedDateRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putExpectedDateByReceivableIdUrl(requestParameters) {
        const _receivableId = requestParameters["receivableId"];
        if (_receivableId === null || _receivableId === undefined) {
            throw new Error('Required parameter receivableId was null or undefined when calling putExpectedDateByReceivableId.');
        }
        const _putPaymentRequestExpectedDateRequest = requestParameters["putPaymentRequestExpectedDateRequest"];
        return `${this.configuration.basePath}/client-api/v1/receivables/${encodeURIComponent(String(_receivableId))}/expected-date`;
    }
}
ReceivablesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ReceivablesHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_FLOW_BASE_PATH, optional: true }, { token: CashFlowConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ReceivablesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ReceivablesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ReceivablesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_FLOW_BASE_PATH]
                }] }, { type: CashFlowConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ReceivablesHttpServiceGetReceivableByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/receivables/{receivableId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "status": "Submitted",
                    "id": "08849602-262b-40b4-a7be-ecd9db00d048",
                    "referenceNumber": "1050",
                    "issueDate": "2020-08-13T00:00:00Z",
                    "dueDate": "2020-12-02T00:00:00Z",
                    "expectedDate": "2020-12-02T00:00:00Z",
                    "dueAmount": "9055.30000",
                    "paidAmount": "0.00000",
                    "totalAmount": "9055.30000",
                    "currencyCode": "USD",
                    "counterparty": {
                        "id": "85c069ea-4f65-45de-9e56-a3f3592e0db7",
                        "name": "Cool Cars",
                        "type": "Customer"
                    },
                    "chartOfAccounts": [{
                            "id": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                            "name": "Design income",
                            "nominalCode": "82",
                            "category": "Income"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ReceivablesHttpServiceGetReceivablesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/receivables",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "syncDatetime": "2020-01-31T12:12:12Z",
                    "receivables": [{
                            "id": "1234-5678-9012-3457",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-02-13T12:12:12Z",
                            "dueAmount": "2.00",
                            "paidAmount": "0.00",
                            "totalAmount": "2.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-invoice-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3333",
                                "name": "Richard Brautigan",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7eff70536",
                                    "name": "Sales",
                                    "category": "Income"
                                }, {
                                    "id": "b068a7bb-917d-4484-8dd6-71cb2a9c9723",
                                    "name": "Accounts Receivable",
                                    "category": "Asset"
                                }],
                            "status": "Draft"
                        }, {
                            "id": "1234-5678-9012-3458",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-03-14T12:12:12Z",
                            "dueAmount": "10.00",
                            "paidAmount": "0.00",
                            "totalAmount": "10.00",
                            "currencyCode": "CAD",
                            "referenceNumber": "125-invoice-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3334",
                                "name": "Walt Whitman",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "2th355ar-bb31-463a-802f-65a7eff70536",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }, {
                                    "id": "abr256dr-917d-4484-8dd6-71cb2a9c9723",
                                    "name": "Accounts Receivable",
                                    "category": "Asset"
                                }, {
                                    "id": "4a0a5e6d-bb31-463a-802f-1hnf56at0536",
                                    "name": "Sales",
                                    "category": "Income"
                                }],
                            "status": "Submitted"
                        }, {
                            "id": "1234-5678-9012-3459",
                            "dueDate": "2019-12-31T12:12:12Z",
                            "expectedDate": "2020-04-14T12:12:12Z",
                            "dueAmount": "155.00",
                            "paidAmount": "145.00",
                            "totalAmount": "300.00",
                            "currencyCode": "EUR",
                            "referenceNumber": "124-invoice-number",
                            "issueDate": "2019-10-10T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3335",
                                "name": "Paul Celan",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "3gt6jka1-bb31-463a-802f-65a7eff70536",
                                    "name": "Sales",
                                    "category": "Income"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3460",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-05-15T12:12:12Z",
                            "dueAmount": "20020.00",
                            "paidAmount": "0.00",
                            "totalAmount": "20020.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-invoice-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3336",
                                "name": "Sylvia Plath",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "bg2ya541-bb31-463a-802f-65a7eff70536",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }],
                            "status": "Submitted"
                        }, {
                            "id": "1234-5678-9012-3461",
                            "dueDate": "2020-02-28T12:12:12Z",
                            "expectedDate": "2020-06-16T12:12:12Z",
                            "dueAmount": "5000.00",
                            "paidAmount": "5000.00",
                            "totalAmount": "10000.00",
                            "currencyCode": "USD",
                            "referenceNumber": "125-invoice-number",
                            "issueDate": "2019-12-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3337",
                                "name": "Jeff Beck",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "aa54f12y-bb31-463a-802f-65a7eff70536",
                                    "name": "Accounts Receivable",
                                    "category": "Asset"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3462",
                            "dueDate": "2019-12-21T12:12:12Z",
                            "expectedDate": "2020-07-17T12:12:12Z",
                            "dueAmount": "0",
                            "paidAmount": "10000.00",
                            "totalAmount": "10000.00",
                            "currencyCode": "RUB",
                            "referenceNumber": "124-invoice-number",
                            "issueDate": "2019-11-10T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3338",
                                "name": "Boris Ryzhyi",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "h1t45dre-bb31-463a-802f-65a7eff70536",
                                    "name": "Accounts Receivable",
                                    "category": "Asset"
                                }],
                            "status": "Paid"
                        }, {
                            "id": "1234-5678-9012-3463",
                            "dueDate": "2020-01-19T12:12:12Z",
                            "expectedDate": "2020-08-18T12:12:12Z",
                            "dueAmount": "120000.00",
                            "paidAmount": "0.00",
                            "totalAmount": "120000.00",
                            "currencyCode": "CAD",
                            "referenceNumber": "125-invoice-number",
                            "issueDate": "2019-11-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3339",
                                "name": "Emily Dickinson",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "11bg3rp7-bb31-463a-802f-65a7ef1htr56",
                                    "name": "Sales",
                                    "category": "Income"
                                }],
                            "status": "Submitted"
                        }, {
                            "id": "1234-5678-9012-3464",
                            "dueDate": "2019-12-26T12:12:12Z",
                            "expectedDate": "2020-09-19T12:12:12Z",
                            "dueAmount": "10000.00",
                            "paidAmount": "0.00",
                            "totalAmount": "10000.00",
                            "currencyCode": "EUR",
                            "referenceNumber": "124-invoice-number",
                            "issueDate": "2019-10-15T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3340",
                                "name": "Mary Jane",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "aa5gpm67-bb31-463a-802f-65a7ef1ht1gt",
                                    "name": "Sales",
                                    "category": "Income"
                                }, {
                                    "id": "ba784pt1-bb31-463a-802f-65a7ef1htr56",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3465",
                            "dueDate": "2019-11-30T12:12:12Z",
                            "expectedDate": "2020-10-20T12:12:12Z",
                            "dueAmount": "20020.00",
                            "paidAmount": "0.00",
                            "totalAmount": "20020.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-invoice-number",
                            "issueDate": "2019-10-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3341",
                                "name": "William Yeats",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "ee79mn61-bb31-463a-802f-65a7ef1htr56",
                                    "name": "Sales",
                                    "category": "Income"
                                }],
                            "status": "Draft"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ReceivablesHttpServicePutExpectedDateByReceivableIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/receivables/{receivableId}/expected-date",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ReceivablesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/receivables/{receivableId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "status": "Submitted",
                    "id": "08849602-262b-40b4-a7be-ecd9db00d048",
                    "referenceNumber": "1050",
                    "issueDate": "2020-08-13T00:00:00Z",
                    "dueDate": "2020-12-02T00:00:00Z",
                    "expectedDate": "2020-12-02T00:00:00Z",
                    "dueAmount": "9055.30000",
                    "paidAmount": "0.00000",
                    "totalAmount": "9055.30000",
                    "currencyCode": "USD",
                    "counterparty": {
                        "id": "85c069ea-4f65-45de-9e56-a3f3592e0db7",
                        "name": "Cool Cars",
                        "type": "Customer"
                    },
                    "chartOfAccounts": [{
                            "id": "f934846d-8461-44dd-89be-3d4cc7b59a53",
                            "name": "Design income",
                            "nominalCode": "82",
                            "category": "Income"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/receivables",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "syncDatetime": "2020-01-31T12:12:12Z",
                    "receivables": [{
                            "id": "1234-5678-9012-3457",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-02-13T12:12:12Z",
                            "dueAmount": "2.00",
                            "paidAmount": "0.00",
                            "totalAmount": "2.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-invoice-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3333",
                                "name": "Richard Brautigan",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "4a0a5e6d-bb31-463a-802f-65a7eff70536",
                                    "name": "Sales",
                                    "category": "Income"
                                }, {
                                    "id": "b068a7bb-917d-4484-8dd6-71cb2a9c9723",
                                    "name": "Accounts Receivable",
                                    "category": "Asset"
                                }],
                            "status": "Draft"
                        }, {
                            "id": "1234-5678-9012-3458",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-03-14T12:12:12Z",
                            "dueAmount": "10.00",
                            "paidAmount": "0.00",
                            "totalAmount": "10.00",
                            "currencyCode": "CAD",
                            "referenceNumber": "125-invoice-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3334",
                                "name": "Walt Whitman",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "2th355ar-bb31-463a-802f-65a7eff70536",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }, {
                                    "id": "abr256dr-917d-4484-8dd6-71cb2a9c9723",
                                    "name": "Accounts Receivable",
                                    "category": "Asset"
                                }, {
                                    "id": "4a0a5e6d-bb31-463a-802f-1hnf56at0536",
                                    "name": "Sales",
                                    "category": "Income"
                                }],
                            "status": "Submitted"
                        }, {
                            "id": "1234-5678-9012-3459",
                            "dueDate": "2019-12-31T12:12:12Z",
                            "expectedDate": "2020-04-14T12:12:12Z",
                            "dueAmount": "155.00",
                            "paidAmount": "145.00",
                            "totalAmount": "300.00",
                            "currencyCode": "EUR",
                            "referenceNumber": "124-invoice-number",
                            "issueDate": "2019-10-10T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3335",
                                "name": "Paul Celan",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "3gt6jka1-bb31-463a-802f-65a7eff70536",
                                    "name": "Sales",
                                    "category": "Income"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3460",
                            "dueDate": "2020-01-31T12:12:12Z",
                            "expectedDate": "2020-05-15T12:12:12Z",
                            "dueAmount": "20020.00",
                            "paidAmount": "0.00",
                            "totalAmount": "20020.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-invoice-number",
                            "issueDate": "2020-01-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3336",
                                "name": "Sylvia Plath",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "bg2ya541-bb31-463a-802f-65a7eff70536",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }],
                            "status": "Submitted"
                        }, {
                            "id": "1234-5678-9012-3461",
                            "dueDate": "2020-02-28T12:12:12Z",
                            "expectedDate": "2020-06-16T12:12:12Z",
                            "dueAmount": "5000.00",
                            "paidAmount": "5000.00",
                            "totalAmount": "10000.00",
                            "currencyCode": "USD",
                            "referenceNumber": "125-invoice-number",
                            "issueDate": "2019-12-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3337",
                                "name": "Jeff Beck",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "aa54f12y-bb31-463a-802f-65a7eff70536",
                                    "name": "Accounts Receivable",
                                    "category": "Asset"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3462",
                            "dueDate": "2019-12-21T12:12:12Z",
                            "expectedDate": "2020-07-17T12:12:12Z",
                            "dueAmount": "0",
                            "paidAmount": "10000.00",
                            "totalAmount": "10000.00",
                            "currencyCode": "RUB",
                            "referenceNumber": "124-invoice-number",
                            "issueDate": "2019-11-10T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3338",
                                "name": "Boris Ryzhyi",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "h1t45dre-bb31-463a-802f-65a7eff70536",
                                    "name": "Accounts Receivable",
                                    "category": "Asset"
                                }],
                            "status": "Paid"
                        }, {
                            "id": "1234-5678-9012-3463",
                            "dueDate": "2020-01-19T12:12:12Z",
                            "expectedDate": "2020-08-18T12:12:12Z",
                            "dueAmount": "120000.00",
                            "paidAmount": "0.00",
                            "totalAmount": "120000.00",
                            "currencyCode": "CAD",
                            "referenceNumber": "125-invoice-number",
                            "issueDate": "2019-11-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3339",
                                "name": "Emily Dickinson",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "11bg3rp7-bb31-463a-802f-65a7ef1htr56",
                                    "name": "Sales",
                                    "category": "Income"
                                }],
                            "status": "Submitted"
                        }, {
                            "id": "1234-5678-9012-3464",
                            "dueDate": "2019-12-26T12:12:12Z",
                            "expectedDate": "2020-09-19T12:12:12Z",
                            "dueAmount": "10000.00",
                            "paidAmount": "0.00",
                            "totalAmount": "10000.00",
                            "currencyCode": "EUR",
                            "referenceNumber": "124-invoice-number",
                            "issueDate": "2019-10-15T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4443-3340",
                                "name": "Mary Jane",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "aa5gpm67-bb31-463a-802f-65a7ef1ht1gt",
                                    "name": "Sales",
                                    "category": "Income"
                                }, {
                                    "id": "ba784pt1-bb31-463a-802f-65a7ef1htr56",
                                    "name": "Unknown",
                                    "category": "Uncategorised"
                                }],
                            "status": "PartiallyPaid"
                        }, {
                            "id": "1234-5678-9012-3465",
                            "dueDate": "2019-11-30T12:12:12Z",
                            "expectedDate": "2020-10-20T12:12:12Z",
                            "dueAmount": "20020.00",
                            "paidAmount": "0.00",
                            "totalAmount": "20020.00",
                            "currencyCode": "USD",
                            "referenceNumber": "123-invoice-number",
                            "issueDate": "2019-10-20T12:12:12Z",
                            "counterparty": {
                                "id": "1234-4444-4444-3341",
                                "name": "William Yeats",
                                "type": "Customer"
                            },
                            "chartOfAccounts": [{
                                    "id": "ee79mn61-bb31-463a-802f-65a7ef1htr56",
                                    "name": "Sales",
                                    "category": "Income"
                                }],
                            "status": "Draft"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/receivables/{receivableId}/expected-date",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class SmeHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashFlowConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getAccountingAuthorization(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sme/accounting-authorization`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAccountingAuthorizationUrl() {
        return `${this.configuration.basePath}/client-api/v1/sme/accounting-authorization`;
    }
    getSme(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sme`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSmeUrl() {
        return `${this.configuration.basePath}/client-api/v1/sme`;
    }
    postSme(requestParameters, observe = 'body', reportProgress = false, options) {
        const _presentationCreateSmeRequest = requestParameters["presentationCreateSmeRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/sme`, _presentationCreateSmeRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSmeUrl(requestParameters) {
        const _presentationCreateSmeRequest = requestParameters["presentationCreateSmeRequest"];
        return `${this.configuration.basePath}/client-api/v1/sme`;
    }
}
SmeHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SmeHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_FLOW_BASE_PATH, optional: true }, { token: CashFlowConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
SmeHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SmeHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SmeHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_FLOW_BASE_PATH]
                }] }, { type: CashFlowConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const SmeHttpServiceGetAccountingAuthorizationMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/sme/accounting-authorization",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "type": "OAuth",
                    "authorizationUrl": "https://authorization.url"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SmeHttpServiceGetSmeMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/sme",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "name": "Test SME",
                    "accountingPlatformId": "quickbooks",
                    "accountingAuthorizationStatus": "Authorized"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SmeHttpServicePostSmeMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/sme",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "name": "Test SME",
                    "accountingPlatformId": "quickbooks",
                    "accountingAuthorizationStatus": "Authorized"
                }
            },
            {
                status: 200,
                body: {
                    "accountingPlatformId": "accountingPlatformId",
                    "name": "name"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SmeHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/sme/accounting-authorization",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "type": "OAuth",
                    "authorizationUrl": "https://authorization.url"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/sme",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "name": "Test SME",
                    "accountingPlatformId": "quickbooks",
                    "accountingAuthorizationStatus": "Authorized"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/sme",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "name": "Test SME",
                    "accountingPlatformId": "quickbooks",
                    "accountingAuthorizationStatus": "Authorized"
                }
            },
            {
                status: 200,
                body: {
                    "accountingPlatformId": "accountingPlatformId",
                    "name": "name"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { AccountingPlatformsHttpService, AccountingPlatformsHttpServiceGetAccountingPlatformsMocksProvider, AccountingPlatformsHttpServiceMocksProvider, CASH_FLOW_BASE_PATH, COLLECTION_FORMATS, CONFIG_TOKEN, CashFlowApiModule, CashFlowConfiguration, ChartOfAccountsHttpService, ChartOfAccountsHttpServiceGetChartOfAccountsMocksProvider, ChartOfAccountsHttpServiceMocksProvider, DefaultCurrencyHttpService, DefaultCurrencyHttpServiceGetDefaultCurrencyMocksProvider, DefaultCurrencyHttpServiceMocksProvider, ForecastConfigurationsHttpService, ForecastConfigurationsHttpServiceGetForecastConfigurationByIdMocksProvider, ForecastConfigurationsHttpServiceGetForecastConfigurationsMocksProvider, ForecastConfigurationsHttpServiceMocksProvider, ForecastConfigurationsHttpServicePostForecastConfigurationsMocksProvider, ForecastConfigurationsHttpServicePutForecastConfigurationByIdMocksProvider, ForecastsHttpService, ForecastsHttpServiceGetForecastByIdMocksProvider, ForecastsHttpServiceGetForecastsMocksProvider, ForecastsHttpServiceMocksProvider, PayablesHttpService, PayablesHttpServiceGetPayableByIdMocksProvider, PayablesHttpServiceGetPayablesMocksProvider, PayablesHttpServiceMocksProvider, PayablesHttpServicePutExpectedDateByPayableIdMocksProvider, PresentationAccountCategory, PresentationAuthorizationStatus, PresentationCounterpartyType, PresentationPayableStatus, PresentationReceivableStatus, ReceivablesHttpService, ReceivablesHttpServiceGetReceivableByIdMocksProvider, ReceivablesHttpServiceGetReceivablesMocksProvider, ReceivablesHttpServiceMocksProvider, ReceivablesHttpServicePutExpectedDateByReceivableIdMocksProvider, SmeHttpService, SmeHttpServiceGetAccountingAuthorizationMocksProvider, SmeHttpServiceGetSmeMocksProvider, SmeHttpServiceMocksProvider, SmeHttpServicePostSmeMocksProvider };
//# sourceMappingURL=backbase-cashflow-http-ang.js.map
