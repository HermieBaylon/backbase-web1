import { createMocks } from '@backbase/foundation-ang/data-http';
export const DefaultCurrencyHttpServiceGetDefaultCurrencyMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/default-currency",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": "USD"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
export const DefaultCurrencyHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/default-currency",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": "USD"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdEN1cnJlbmN5LnNlcnZpY2UubW9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hcGkvZGVmYXVsdEN1cnJlbmN5LnNlcnZpY2UubW9ja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBTWpFLE1BQU0sQ0FBQyxNQUFNLHlEQUF5RCxHQUFhLFdBQVcsQ0FBQyxDQUFDO1FBQ3hGLFVBQVUsRUFBRSxpQ0FBaUM7UUFDN0MsTUFBTSxFQUFFLEtBQUs7UUFDYixTQUFTLEVBQUU7WUFDSDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3hCLE9BQU8sRUFBRyxLQUFLO2lCQUNoQjthQUNnQjtZQUNEO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDeEIsU0FBUyxFQUFHLGFBQWE7b0JBQ3pCLFFBQVEsRUFBRyxDQUFFOzRCQUNYLFNBQVMsRUFBRyxrREFBa0Q7NEJBQzlELEtBQUssRUFBRyxxQkFBcUI7NEJBQzdCLFNBQVMsRUFBRztnQ0FDVixLQUFLLEVBQUcsSUFBSTtnQ0FDWixLQUFLLEVBQUcsR0FBRzs2QkFDWjt5QkFDRixDQUFFO2lCQUNKO2FBQ2dCO1lBQ0Q7Z0JBQ0ksTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFO29CQUN4QixTQUFTLEVBQUcsc0NBQXNDO29CQUNsRCxRQUFRLEVBQUcsQ0FBRTs0QkFDWCxTQUFTLEVBQUcsb0RBQW9EOzRCQUNoRSxLQUFLLEVBQUcsa0JBQWtCOzRCQUMxQixTQUFTLEVBQUc7Z0NBQ1YsYUFBYSxFQUFHLFNBQVM7NkJBQzFCO3lCQUNGLENBQUU7aUJBQ0o7YUFDZ0I7WUFDRDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3hCLFNBQVMsRUFBRyxzQ0FBc0M7b0JBQ2xELFFBQVEsRUFBRyxDQUFFOzRCQUNYLFNBQVMsRUFBRyxzRUFBc0U7NEJBQ2xGLEtBQUssRUFBRyxrQkFBa0I7NEJBQzFCLFNBQVMsRUFBRztnQ0FDVixPQUFPLEVBQUcsV0FBVzs2QkFDdEI7eUJBQ0YsQ0FBRTtpQkFDSjthQUNnQjtZQUNEO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDeEIsU0FBUyxFQUFHLHNCQUFzQjtpQkFDbkM7YUFDZ0I7U0FDWjtLQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sdUNBQXVDLEdBQWEsV0FBVyxDQUN4RTtJQUNBO1FBQ0ksVUFBVSxFQUFFLGlDQUFpQztRQUM3QyxNQUFNLEVBQUUsS0FBSztRQUNiLFNBQVMsRUFBRTtZQUVQO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDcEIsT0FBTyxFQUFHLEtBQUs7aUJBQ2hCO2FBQ1k7WUFFRDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3BCLFNBQVMsRUFBRyxhQUFhO29CQUN6QixRQUFRLEVBQUcsQ0FBRTs0QkFDWCxTQUFTLEVBQUcsa0RBQWtEOzRCQUM5RCxLQUFLLEVBQUcscUJBQXFCOzRCQUM3QixTQUFTLEVBQUc7Z0NBQ1YsS0FBSyxFQUFHLElBQUk7Z0NBQ1osS0FBSyxFQUFHLEdBQUc7NkJBQ1o7eUJBQ0YsQ0FBRTtpQkFDSjthQUNZO1lBRUQ7Z0JBQ0ksTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFO29CQUNwQixTQUFTLEVBQUcsc0NBQXNDO29CQUNsRCxRQUFRLEVBQUcsQ0FBRTs0QkFDWCxTQUFTLEVBQUcsb0RBQW9EOzRCQUNoRSxLQUFLLEVBQUcsa0JBQWtCOzRCQUMxQixTQUFTLEVBQUc7Z0NBQ1YsYUFBYSxFQUFHLFNBQVM7NkJBQzFCO3lCQUNGLENBQUU7aUJBQ0o7YUFDWTtZQUVEO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDcEIsU0FBUyxFQUFHLHNDQUFzQztvQkFDbEQsUUFBUSxFQUFHLENBQUU7NEJBQ1gsU0FBUyxFQUFHLHNFQUFzRTs0QkFDbEYsS0FBSyxFQUFHLGtCQUFrQjs0QkFDMUIsU0FBUyxFQUFHO2dDQUNWLE9BQU8sRUFBRyxXQUFXOzZCQUN0Qjt5QkFDRixDQUFFO2lCQUNKO2FBQ1k7WUFFRDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3BCLFNBQVMsRUFBRyxzQkFBc0I7aUJBQ25DO2FBQ1k7U0FDUjtLQUNKO0NBQ0EsQ0FDQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTW9ja3MgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZGF0YS1odHRwJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuKiBNb2NrcyBwcm92aWRlciBmb3IgL2NsaWVudC1hcGkvdjEvZGVmYXVsdC1jdXJyZW5jeSBVUkwgcGF0dGVyblxuKi9cbmV4cG9ydCBjb25zdCBEZWZhdWx0Q3VycmVuY3lIdHRwU2VydmljZUdldERlZmF1bHRDdXJyZW5jeU1vY2tzUHJvdmlkZXI6IFByb3ZpZGVyID0gY3JlYXRlTW9ja3MoW3tcbiAgICAgICAgdXJsUGF0dGVybjogXCIvY2xpZW50LWFwaS92MS9kZWZhdWx0LWN1cnJlbmN5XCIsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgcmVzcG9uc2VzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICBcInZhbHVlXCIgOiBcIlVTRFwiXG59XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwibWVzc2FnZVwiIDogXCJCYWQgUmVxdWVzdFwiLFxuICBcImVycm9yc1wiIDogWyB7XG4gICAgXCJtZXNzYWdlXCIgOiBcIlZhbHVlIEV4Y2VlZGVkLiBNdXN0IGJlIGJldHdlZW4ge21pbn0gYW5kIHttYXh9LlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkuc2hvZXNpemVcIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwibWF4XCIgOiBcIjUwXCIsXG4gICAgICBcIm1pblwiIDogXCIxXCJcbiAgICB9XG4gIH0gXVxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiQWNjZXNzIHRvIHJlcXVlc3RlZCByZXNvdXJjZSBkZW5pZWQuXCIsXG4gIFwiZXJyb3JzXCIgOiBbIHtcbiAgICBcIm1lc3NhZ2VcIiA6IFwiUmVzb3VyY2UgYWNjZXNzIGRlbmllZCBkdWUgdG8gaW52YWxpZCBjcmVkZW50aWFscy5cIixcbiAgICBcImtleVwiIDogXCJjb21tb24uYXBpLnRva2VuXCIsXG4gICAgXCJjb250ZXh0XCIgOiB7XG4gICAgICBcImFjY2Vzc1Rva2VuXCIgOiBcImV4cGlyZWRcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwibWVzc2FnZVwiIDogXCJBY2Nlc3MgdG8gcmVxdWVzdGVkIHJlc291cmNlIGRlbmllZC5cIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJSZXNvdXJjZSBhY2Nlc3MgZGVuaWVkIGR1ZSB0byBhbiBpbnN1ZmZpY2llbnQgdXNlciBxdW90YSBvZiB7cXVvdGF9LlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkucXVvdGFcIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwicXVvdGFcIiA6IFwic29tZVF1b3RhXCJcbiAgICB9XG4gIH0gXVxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiRGVzY3JpcHRpb24gb2YgZXJyb3JcIlxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgXVxufV0pO1xuXG5leHBvcnQgY29uc3QgRGVmYXVsdEN1cnJlbmN5SHR0cFNlcnZpY2VNb2Nrc1Byb3ZpZGVyOiBQcm92aWRlciA9IGNyZWF0ZU1vY2tzKFxuICAgIFtcbiAgICB7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2NsaWVudC1hcGkvdjEvZGVmYXVsdC1jdXJyZW5jeVwiLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHJlc3BvbnNlczogW1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcInZhbHVlXCIgOiBcIlVTRFwiXG59XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiQmFkIFJlcXVlc3RcIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJWYWx1ZSBFeGNlZWRlZC4gTXVzdCBiZSBiZXR3ZWVuIHttaW59IGFuZCB7bWF4fS5cIixcbiAgICBcImtleVwiIDogXCJjb21tb24uYXBpLnNob2VzaXplXCIsXG4gICAgXCJjb250ZXh0XCIgOiB7XG4gICAgICBcIm1heFwiIDogXCI1MFwiLFxuICAgICAgXCJtaW5cIiA6IFwiMVwiXG4gICAgfVxuICB9IF1cbn1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwibWVzc2FnZVwiIDogXCJBY2Nlc3MgdG8gcmVxdWVzdGVkIHJlc291cmNlIGRlbmllZC5cIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJSZXNvdXJjZSBhY2Nlc3MgZGVuaWVkIGR1ZSB0byBpbnZhbGlkIGNyZWRlbnRpYWxzLlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkudG9rZW5cIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwiYWNjZXNzVG9rZW5cIiA6IFwiZXhwaXJlZFwiXG4gICAgfVxuICB9IF1cbn1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwibWVzc2FnZVwiIDogXCJBY2Nlc3MgdG8gcmVxdWVzdGVkIHJlc291cmNlIGRlbmllZC5cIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJSZXNvdXJjZSBhY2Nlc3MgZGVuaWVkIGR1ZSB0byBhbiBpbnN1ZmZpY2llbnQgdXNlciBxdW90YSBvZiB7cXVvdGF9LlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkucXVvdGFcIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwicXVvdGFcIiA6IFwic29tZVF1b3RhXCJcbiAgICB9XG4gIH0gXVxufVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIkRlc2NyaXB0aW9uIG9mIGVycm9yXCJcbn1cbiAgICAgICAgICAgIH0sXG4gICAgXVxufSxcbl1cbik7XG5cblxuIl19