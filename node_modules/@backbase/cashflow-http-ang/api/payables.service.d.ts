import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PresentationPayable } from '../model/models';
import { PresentationPayables } from '../model/models';
import { PutPaymentRequestExpectedDateRequest } from '../model/models';
import { CashFlowConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetPayableByIdRequestParams {
    ["payableId"]: string;
}
export interface GetPayablesRequestParams {
    ["query"]?: string;
    ["statuses"]?: Array<string>;
    ["sort"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface PutExpectedDateByPayableIdRequestParams {
    ["payableId"]: string;
    ["putPaymentRequestExpectedDateRequest"]?: PutPaymentRequestExpectedDateRequest;
}
export declare class PayablesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: CashFlowConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: CashFlowConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getPayableById(requestParameters: GetPayableByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationPayable>;
    getPayableById(requestParameters: GetPayableByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationPayable>>;
    getPayableById(requestParameters: GetPayableByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationPayable>>;
    getPayableByIdUrl(requestParameters: GetPayableByIdRequestParams): string;
    getPayables(requestParameters: GetPayablesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationPayables>;
    getPayables(requestParameters: GetPayablesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationPayables>>;
    getPayables(requestParameters: GetPayablesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationPayables>>;
    getPayablesUrl(requestParameters: GetPayablesRequestParams): string;
    putExpectedDateByPayableId(requestParameters: PutExpectedDateByPayableIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationPayable>;
    putExpectedDateByPayableId(requestParameters: PutExpectedDateByPayableIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationPayable>>;
    putExpectedDateByPayableId(requestParameters: PutExpectedDateByPayableIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationPayable>>;
    putExpectedDateByPayableIdUrl(requestParameters: PutExpectedDateByPayableIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PayablesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PayablesHttpService>;
}
