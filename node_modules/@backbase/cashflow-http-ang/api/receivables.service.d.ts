import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PresentationReceivable } from '../model/models';
import { PresentationReceivables } from '../model/models';
import { PutPaymentRequestExpectedDateRequest } from '../model/models';
import { CashFlowConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetReceivableByIdRequestParams {
    ["receivableId"]: string;
}
export interface GetReceivablesRequestParams {
    ["query"]?: string;
    ["statuses"]?: Array<string>;
    ["sort"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface PutExpectedDateByReceivableIdRequestParams {
    ["receivableId"]: string;
    ["putPaymentRequestExpectedDateRequest"]?: PutPaymentRequestExpectedDateRequest;
}
export declare class ReceivablesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: CashFlowConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: CashFlowConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getReceivableById(requestParameters: GetReceivableByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationReceivable>;
    getReceivableById(requestParameters: GetReceivableByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationReceivable>>;
    getReceivableById(requestParameters: GetReceivableByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationReceivable>>;
    getReceivableByIdUrl(requestParameters: GetReceivableByIdRequestParams): string;
    getReceivables(requestParameters: GetReceivablesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationReceivables>;
    getReceivables(requestParameters: GetReceivablesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationReceivables>>;
    getReceivables(requestParameters: GetReceivablesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationReceivables>>;
    getReceivablesUrl(requestParameters: GetReceivablesRequestParams): string;
    putExpectedDateByReceivableId(requestParameters: PutExpectedDateByReceivableIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationReceivable>;
    putExpectedDateByReceivableId(requestParameters: PutExpectedDateByReceivableIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationReceivable>>;
    putExpectedDateByReceivableId(requestParameters: PutExpectedDateByReceivableIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationReceivable>>;
    putExpectedDateByReceivableIdUrl(requestParameters: PutExpectedDateByReceivableIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReceivablesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ReceivablesHttpService>;
}
