import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PresentationAccountingAuthorization } from '../model/models';
import { PresentationCreateSmeRequest } from '../model/models';
import { PresentationSme } from '../model/models';
import { CashFlowConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface PostSmeRequestParams {
    ["presentationCreateSmeRequest"]?: PresentationCreateSmeRequest;
}
export declare class SmeHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: CashFlowConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: CashFlowConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getAccountingAuthorization(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationAccountingAuthorization>;
    getAccountingAuthorization(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationAccountingAuthorization>>;
    getAccountingAuthorization(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationAccountingAuthorization>>;
    getAccountingAuthorizationUrl(): string;
    getSme(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationSme>;
    getSme(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationSme>>;
    getSme(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationSme>>;
    getSmeUrl(): string;
    postSme(requestParameters: PostSmeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationSme>;
    postSme(requestParameters: PostSmeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationSme>>;
    postSme(requestParameters: PostSmeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationSme>>;
    postSmeUrl(requestParameters: PostSmeRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SmeHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SmeHttpService>;
}
