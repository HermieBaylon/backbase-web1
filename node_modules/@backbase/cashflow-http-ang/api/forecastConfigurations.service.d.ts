import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PresentationForecastConfiguration } from '../model/models';
import { PresentationForecastConfigurations } from '../model/models';
import { CashFlowConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetForecastConfigurationByIdRequestParams {
    ["configurationId"]: string;
}
export interface PostForecastConfigurationsRequestParams {
    ["presentationForecastConfiguration"]?: PresentationForecastConfiguration;
}
export interface PutForecastConfigurationByIdRequestParams {
    ["configurationId"]: string;
    ["presentationForecastConfiguration"]?: PresentationForecastConfiguration;
}
export declare class ForecastConfigurationsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: CashFlowConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: CashFlowConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getForecastConfigurationById(requestParameters: GetForecastConfigurationByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationForecastConfiguration>;
    getForecastConfigurationById(requestParameters: GetForecastConfigurationByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationForecastConfiguration>>;
    getForecastConfigurationById(requestParameters: GetForecastConfigurationByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationForecastConfiguration>>;
    getForecastConfigurationByIdUrl(requestParameters: GetForecastConfigurationByIdRequestParams): string;
    getForecastConfigurations(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationForecastConfigurations>;
    getForecastConfigurations(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationForecastConfigurations>>;
    getForecastConfigurations(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationForecastConfigurations>>;
    getForecastConfigurationsUrl(): string;
    postForecastConfigurations(requestParameters: PostForecastConfigurationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationForecastConfiguration>;
    postForecastConfigurations(requestParameters: PostForecastConfigurationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationForecastConfiguration>>;
    postForecastConfigurations(requestParameters: PostForecastConfigurationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationForecastConfiguration>>;
    postForecastConfigurationsUrl(requestParameters: PostForecastConfigurationsRequestParams): string;
    putForecastConfigurationById(requestParameters: PutForecastConfigurationByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationForecastConfiguration>;
    putForecastConfigurationById(requestParameters: PutForecastConfigurationByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationForecastConfiguration>>;
    putForecastConfigurationById(requestParameters: PutForecastConfigurationByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationForecastConfiguration>>;
    putForecastConfigurationByIdUrl(requestParameters: PutForecastConfigurationByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ForecastConfigurationsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ForecastConfigurationsHttpService>;
}
