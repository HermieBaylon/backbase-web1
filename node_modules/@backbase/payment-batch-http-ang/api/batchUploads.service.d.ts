import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BatchUploadGetResponse } from '../model/models';
import { BatchUploadPutRequest } from '../model/models';
import { BatchUploadPutResponse } from '../model/models';
import { BatchUploadsGetResponse } from '../model/models';
import { StartUploadBatchOrdersPostRequest } from '../model/models';
import { StartUploadBatchOrdersPostResponse } from '../model/models';
import { UploadBatchOrdersPostResponse } from '../model/models';
import { PaymentBatchConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CreateBatchOrdersForIdRequestParams {
    ["batchUploadId"]: string;
    ["confidentialType"]?: string;
    ["file"]?: Blob;
}
export interface DeleteBatchUploadByIdRequestParams {
    ["batchUploadId"]: string;
}
export interface GetBatchUploadByIdRequestParams {
    ["batchUploadId"]: string;
}
export interface GetBatchUploadsRequestParams {
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface PutBatchUploadIdByBatchUploadIdRequestParams {
    ["batchUploadId"]: string;
    ["batchUploadPutRequest"]: BatchUploadPutRequest;
}
export interface StartBatchUploadRequestParams {
    ["startUploadBatchOrdersPostRequest"]: StartUploadBatchOrdersPostRequest;
}
export declare class BatchUploadsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentBatchConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentBatchConfiguration);
    private canConsumeForm;
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createBatchOrdersForId(requestParameters: CreateBatchOrdersForIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UploadBatchOrdersPostResponse>;
    createBatchOrdersForId(requestParameters: CreateBatchOrdersForIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UploadBatchOrdersPostResponse>>;
    createBatchOrdersForId(requestParameters: CreateBatchOrdersForIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UploadBatchOrdersPostResponse>>;
    createBatchOrdersForIdUrl(requestParameters: CreateBatchOrdersForIdRequestParams): string;
    deleteBatchUploadById(requestParameters: DeleteBatchUploadByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteBatchUploadById(requestParameters: DeleteBatchUploadByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteBatchUploadById(requestParameters: DeleteBatchUploadByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteBatchUploadByIdUrl(requestParameters: DeleteBatchUploadByIdRequestParams): string;
    getBatchUploadById(requestParameters: GetBatchUploadByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchUploadGetResponse>;
    getBatchUploadById(requestParameters: GetBatchUploadByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchUploadGetResponse>>;
    getBatchUploadById(requestParameters: GetBatchUploadByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchUploadGetResponse>>;
    getBatchUploadByIdUrl(requestParameters: GetBatchUploadByIdRequestParams): string;
    getBatchUploads(requestParameters: GetBatchUploadsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchUploadsGetResponse>;
    getBatchUploads(requestParameters: GetBatchUploadsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchUploadsGetResponse>>;
    getBatchUploads(requestParameters: GetBatchUploadsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchUploadsGetResponse>>;
    getBatchUploadsUrl(requestParameters: GetBatchUploadsRequestParams): string;
    putBatchUploadIdByBatchUploadId(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchUploadPutResponse>;
    putBatchUploadIdByBatchUploadId(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchUploadPutResponse>>;
    putBatchUploadIdByBatchUploadId(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchUploadPutResponse>>;
    putBatchUploadIdByBatchUploadIdUrl(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams): string;
    startBatchUpload(requestParameters: StartBatchUploadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<StartUploadBatchOrdersPostResponse>;
    startBatchUpload(requestParameters: StartBatchUploadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<StartUploadBatchOrdersPostResponse>>;
    startBatchUpload(requestParameters: StartBatchUploadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<StartUploadBatchOrdersPostResponse>>;
    startBatchUploadUrl(requestParameters: StartBatchUploadRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<BatchUploadsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BatchUploadsHttpService>;
}
