import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BatchOrderApprovalPutRequest } from '../model/models';
import { BatchOrderApprovalPutResponse } from '../model/models';
import { BatchOrderGetResponse } from '../model/models';
import { BatchOrderPutRequest } from '../model/models';
import { BatchOrderPutResponse } from '../model/models';
import { BatchOrdersGetResponse } from '../model/models';
import { BatchOrdersPostRequest } from '../model/models';
import { BatchOrdersPostResponse } from '../model/models';
import { BatchPaymentGetResponse } from '../model/models';
import { BatchPaymentsGetResponse } from '../model/models';
import { BatchPaymentsPostRequest } from '../model/models';
import { BatchPaymentsPostResponse } from '../model/models';
import { BatchPaymentsPutRequest } from '../model/models';
import { BatchPaymentsPutResponse } from '../model/models';
import { PaymentBatchConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteBatchOrderIdByBatchOrderIdRequestParams {
    ["batchOrderId"]: string;
}
export interface DeleteBatchPaymentByIdRequestParams {
    ["batchOrderId"]: string;
    ["batchPaymentId"]: string;
}
export interface GetBatchOrdersRequestParams {
    ["query"]?: string;
    ["amountFrom"]?: number;
    ["amountTo"]?: number;
    ["executionDate"]?: string;
    ["executionDateFrom"]?: string;
    ["executionDateTo"]?: string;
    ["status"]?: Array<'ENTERED' | 'READY' | 'ACCEPTED' | 'PROCESSED' | 'REJECTED' | 'CANCELLED' | 'ACKNOWLEDGED' | 'DOWNLOADING'>;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
    ["dynamicCreditDebitMixedIndicator"]?: boolean;
}
export interface GetBatchOrdersByIdRequestParams {
    ["batchOrderId"]: string;
}
export interface GetBatchPaymentByIdRequestParams {
    ["batchOrderId"]: string;
    ["batchPaymentId"]: string;
}
export interface GetBatchPaymentsByIdRequestParams {
    ["batchOrderId"]: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface PostBatchOrdersRequestParams {
    ["batchOrdersPostRequest"]: BatchOrdersPostRequest;
}
export interface PostBatchPaymentsRequestParams {
    ["batchOrderId"]: string;
    ["batchPaymentsPostRequest"]: BatchPaymentsPostRequest;
}
export interface PutApprovalsByIdRequestParams {
    ["batchOrderId"]: string;
    ["batchOrderApprovalPutRequest"]: BatchOrderApprovalPutRequest;
}
export interface PutBatchPaymentByIdRequestParams {
    ["batchOrderId"]: string;
    ["batchPaymentId"]: string;
    ["batchPaymentsPutRequest"]: BatchPaymentsPutRequest;
}
export interface UpdateBatchOrderByIdRequestParams {
    ["batchOrderId"]: string;
    ["batchOrderPutRequest"]: BatchOrderPutRequest;
    ["dryRun"]?: boolean;
    ["intendedCreditTransactionsCount"]?: number;
    ["intendedDebitTransactionsCount"]?: number;
    ["intendedCreditAmount"]?: number;
    ["intendedDebitAmount"]?: number;
}
export declare class BatchOrdersHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentBatchConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentBatchConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteBatchOrderIdByBatchOrderId(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteBatchOrderIdByBatchOrderId(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteBatchOrderIdByBatchOrderId(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteBatchOrderIdByBatchOrderIdUrl(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams): string;
    deleteBatchPaymentById(requestParameters: DeleteBatchPaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteBatchPaymentById(requestParameters: DeleteBatchPaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteBatchPaymentById(requestParameters: DeleteBatchPaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteBatchPaymentByIdUrl(requestParameters: DeleteBatchPaymentByIdRequestParams): string;
    getBatchOrders(requestParameters: GetBatchOrdersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchOrdersGetResponse>;
    getBatchOrders(requestParameters: GetBatchOrdersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchOrdersGetResponse>>;
    getBatchOrders(requestParameters: GetBatchOrdersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchOrdersGetResponse>>;
    getBatchOrdersUrl(requestParameters: GetBatchOrdersRequestParams): string;
    getBatchOrdersById(requestParameters: GetBatchOrdersByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchOrderGetResponse>;
    getBatchOrdersById(requestParameters: GetBatchOrdersByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchOrderGetResponse>>;
    getBatchOrdersById(requestParameters: GetBatchOrdersByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchOrderGetResponse>>;
    getBatchOrdersByIdUrl(requestParameters: GetBatchOrdersByIdRequestParams): string;
    getBatchPaymentById(requestParameters: GetBatchPaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchPaymentGetResponse>;
    getBatchPaymentById(requestParameters: GetBatchPaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchPaymentGetResponse>>;
    getBatchPaymentById(requestParameters: GetBatchPaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchPaymentGetResponse>>;
    getBatchPaymentByIdUrl(requestParameters: GetBatchPaymentByIdRequestParams): string;
    getBatchPaymentsById(requestParameters: GetBatchPaymentsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchPaymentsGetResponse>;
    getBatchPaymentsById(requestParameters: GetBatchPaymentsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchPaymentsGetResponse>>;
    getBatchPaymentsById(requestParameters: GetBatchPaymentsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchPaymentsGetResponse>>;
    getBatchPaymentsByIdUrl(requestParameters: GetBatchPaymentsByIdRequestParams): string;
    postBatchOrders(requestParameters: PostBatchOrdersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchOrdersPostResponse>;
    postBatchOrders(requestParameters: PostBatchOrdersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchOrdersPostResponse>>;
    postBatchOrders(requestParameters: PostBatchOrdersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchOrdersPostResponse>>;
    postBatchOrdersUrl(requestParameters: PostBatchOrdersRequestParams): string;
    postBatchPayments(requestParameters: PostBatchPaymentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchPaymentsPostResponse>;
    postBatchPayments(requestParameters: PostBatchPaymentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchPaymentsPostResponse>>;
    postBatchPayments(requestParameters: PostBatchPaymentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchPaymentsPostResponse>>;
    postBatchPaymentsUrl(requestParameters: PostBatchPaymentsRequestParams): string;
    putApprovalsById(requestParameters: PutApprovalsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchOrderApprovalPutResponse>;
    putApprovalsById(requestParameters: PutApprovalsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchOrderApprovalPutResponse>>;
    putApprovalsById(requestParameters: PutApprovalsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchOrderApprovalPutResponse>>;
    putApprovalsByIdUrl(requestParameters: PutApprovalsByIdRequestParams): string;
    putBatchPaymentById(requestParameters: PutBatchPaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchPaymentsPutResponse>;
    putBatchPaymentById(requestParameters: PutBatchPaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchPaymentsPutResponse>>;
    putBatchPaymentById(requestParameters: PutBatchPaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchPaymentsPutResponse>>;
    putBatchPaymentByIdUrl(requestParameters: PutBatchPaymentByIdRequestParams): string;
    updateBatchOrderById(requestParameters: UpdateBatchOrderByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchOrderPutResponse>;
    updateBatchOrderById(requestParameters: UpdateBatchOrderByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchOrderPutResponse>>;
    updateBatchOrderById(requestParameters: UpdateBatchOrderByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchOrderPutResponse>>;
    updateBatchOrderByIdUrl(requestParameters: UpdateBatchOrderByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<BatchOrdersHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BatchOrdersHttpService>;
}
