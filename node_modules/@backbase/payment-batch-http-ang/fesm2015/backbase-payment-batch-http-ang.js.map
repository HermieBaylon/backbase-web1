{"version":3,"file":"backbase-payment-batch-http-ang.js","sources":["../../model/approvalStatus.ts","../../model/batchPaymentStatus.ts","../../model/batchStatus.ts","../../model/breachInfo.ts","../../model/chargeBearer.ts","../../model/creditDebitIndicator.ts","../../model/creditDebitMixedIndicator.ts","../../model/exchangeRateInformation.ts","../../model/instructionPriority.ts","../../model/involvedPartyRole.ts","../../model/paymentAction.ts","../../model/paymentMode.ts","../../model/recordStatus.ts","../../model/remittanceInformation.ts","../../model/schedule.ts","../../model/schemeNames.ts","../../model/status.ts","../../model/uploadStatus.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/batchOrders.service.ts","../../api/batchOrders.service.mocks.ts","../../api/batchUploads.service.ts","../../api/batchUploads.service.mocks.ts"],"sourcesContent":["/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The status of the approval.\n */\nexport type ApprovalStatus = 'PENDING' | 'APPROVED' | 'REJECTED' | 'CANCELLED';\n\nexport const ApprovalStatus = {\n    PENDING: 'PENDING' as ApprovalStatus,\n    APPROVED: 'APPROVED' as ApprovalStatus,\n    REJECTED: 'REJECTED' as ApprovalStatus,\n    CANCELLED: 'CANCELLED' as ApprovalStatus\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Batch payments are considered to be in status of the batch order unless they get their own status which overrides the status of the batch order.\n */\nexport type BatchPaymentStatus = 'REJECTED';\n\nexport const BatchPaymentStatus = {\n    REJECTED: 'REJECTED' as BatchPaymentStatus\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The status of the batch order. PROCESSED, REJECTED, INVALID and CANCELLED are end states. The uploaded batch order happy flow is OPEN - CLOSED - VALID - [ENTERED] - READY - [ACKNOWLEDGED] - [DOWNLOADING] - ACCEPTED - PROCESSED. The manually edited batch order happy flow is DRAFT - VALID - [ENTERED] - READY - [ACKNOWLEDGED] - [DOWNLOADING] - ACCEPTED - PROCESSED. \n */\nexport type BatchStatus = 'OPEN' | 'CLOSED' | 'DRAFT' | 'INVALID' | 'VALID' | 'ENTERED' | 'REJECTED' | 'CANCELLED' | 'READY' | 'ACKNOWLEDGED' | 'DOWNLOADING' | 'ACCEPTED' | 'PROCESSED';\n\nexport const BatchStatus = {\n    OPEN: 'OPEN' as BatchStatus,\n    CLOSED: 'CLOSED' as BatchStatus,\n    DRAFT: 'DRAFT' as BatchStatus,\n    INVALID: 'INVALID' as BatchStatus,\n    VALID: 'VALID' as BatchStatus,\n    ENTERED: 'ENTERED' as BatchStatus,\n    REJECTED: 'REJECTED' as BatchStatus,\n    CANCELLED: 'CANCELLED' as BatchStatus,\n    READY: 'READY' as BatchStatus,\n    ACKNOWLEDGED: 'ACKNOWLEDGED' as BatchStatus,\n    DOWNLOADING: 'DOWNLOADING' as BatchStatus,\n    ACCEPTED: 'ACCEPTED' as BatchStatus,\n    PROCESSED: 'PROCESSED' as BatchStatus\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { TimeFrame } from './timeFrame';\n\n\nexport interface BreachInfo { \n    [\"breachType\"]: BreachInfo.BreachTypeEnum;\n    [\"breachedLimitType\"]?: BreachInfo.BreachedLimitTypeEnum;\n    [\"timeframe\"]?: TimeFrame;\n    /**\n     * The amount in the specified currency\n     */\n    [\"currentConsumption\"]: string;\n    /**\n     * The amount in the specified currency\n     */\n    [\"currentThreshold\"]: string;\n    /**\n     * Additional properties\n     */\n    [\"additions\"]?: { [key: string]: string; };\n}\nexport namespace BreachInfo {\n    export type BreachTypeEnum = 'THRESHOLD' | 'CONSUMPTION';\n    export const BreachTypeEnum = {\n        THRESHOLD: 'THRESHOLD' as BreachTypeEnum,\n        CONSUMPTION: 'CONSUMPTION' as BreachTypeEnum\n    };\n    export type BreachedLimitTypeEnum = 'PERIODIC' | 'TRANSACTIONAL';\n    export const BreachedLimitTypeEnum = {\n        PERIODIC: 'PERIODIC' as BreachedLimitTypeEnum,\n        TRANSACTIONAL: 'TRANSACTIONAL' as BreachedLimitTypeEnum\n    };\n}\n\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Indicated who pays the fees for an international transfer. Possible values: OUR(originator), BEN(beneficiary or SHA(shared).\n */\nexport type ChargeBearer = 'OUR' | 'BEN' | 'SHA';\n\nexport const ChargeBearer = {\n    OUR: 'OUR' as ChargeBearer,\n    BEN: 'BEN' as ChargeBearer,\n    SHA: 'SHA' as ChargeBearer\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Payment can be either debit or credit.\n */\nexport type CreditDebitIndicator = 'CREDIT' | 'DEBIT';\n\nexport const CreditDebitIndicator = {\n    CREDIT: 'CREDIT' as CreditDebitIndicator,\n    DEBIT: 'DEBIT' as CreditDebitIndicator\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Batch order(s) can contain only credit records, only debit records or mixed credit and debit records.\n */\nexport type CreditDebitMixedIndicator = 'CREDIT' | 'DEBIT' | 'MIXED';\n\nexport const CreditDebitMixedIndicator = {\n    CREDIT: 'CREDIT' as CreditDebitMixedIndicator,\n    DEBIT: 'DEBIT' as CreditDebitMixedIndicator,\n    MIXED: 'MIXED' as CreditDebitMixedIndicator\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The detailed information on the exchange rate that has been used in the payment transaction.\n */\nexport interface ExchangeRateInformation { \n    /**\n     * Currency in which the rate of exchange is expressed in a currency exchange.\n     */\n    [\"currencyCode\"]?: string;\n    /**\n     * The factor used for conversion of an amount from one currency to another.\n     */\n    [\"rate\"]?: string;\n    /**\n     * Specifies the type used to complete the currency exchange.\n     */\n    [\"rateType\"]?: ExchangeRateInformation.RateTypeEnum;\n    /**\n     * Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.\n     */\n    [\"contractIdentification\"]?: string;\n    /**\n     * Additional properties\n     */\n    [\"additions\"]?: { [key: string]: string; };\n}\nexport namespace ExchangeRateInformation {\n    export type RateTypeEnum = 'ACTUAL' | 'INDICATIVE' | 'AGREED';\n    export const RateTypeEnum = {\n        ACTUAL: 'ACTUAL' as RateTypeEnum,\n        INDICATIVE: 'INDICATIVE' as RateTypeEnum,\n        AGREED: 'AGREED' as RateTypeEnum\n    };\n}\n\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Specify the priority of execution of the payment order.\n */\nexport type InstructionPriority = 'NORM' | 'HIGH';\n\nexport const InstructionPriority = {\n    NORM: 'NORM' as InstructionPriority,\n    HIGH: 'HIGH' as InstructionPriority\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * These are the possible values the role of an involved party can  have.\n */\nexport type InvolvedPartyRole = 'CREDITOR' | 'DEBTOR';\n\nexport const InvolvedPartyRole = {\n    CREDITOR: 'CREDITOR' as InvolvedPartyRole,\n    DEBTOR: 'DEBTOR' as InvolvedPartyRole\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The actions that can be performed by the user (with the current context). This field is not evaluated when payment is requested by support employee on behalf of another user.\n */\nexport type PaymentAction = 'APPROVE' | 'FINAL_APPROVE' | 'REJECT' | 'CANCEL' | 'DELETE' | 'EDIT';\n\nexport const PaymentAction = {\n    APPROVE: 'APPROVE' as PaymentAction,\n    FINALAPPROVE: 'FINAL_APPROVE' as PaymentAction,\n    REJECT: 'REJECT' as PaymentAction,\n    CANCEL: 'CANCEL' as PaymentAction,\n    DELETE: 'DELETE' as PaymentAction,\n    EDIT: 'EDIT' as PaymentAction\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Denotes whether payment will be single or will be recurring\n */\nexport type PaymentMode = 'SINGLE' | 'RECURRING';\n\nexport const PaymentMode = {\n    SINGLE: 'SINGLE' as PaymentMode,\n    RECURRING: 'RECURRING' as PaymentMode\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The list of accepted statuses that a user can request to update an approval to.\n */\nexport type RecordStatus = 'APPROVED' | 'REJECTED';\n\nexport const RecordStatus = {\n    APPROVED: 'APPROVED' as RecordStatus,\n    REJECTED: 'REJECTED' as RecordStatus\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * This is the object representation of the remittance info and can contain different types of remittance info. It is only used in responses, not for input requests!\n */\nexport interface RemittanceInformation { \n    /**\n     * When type is structured it consists of some XML tags used when the transaction was uploaded.\n     */\n    [\"type\"]: RemittanceInformation.TypeEnum;\n    /**\n     * The content of the remittance information.\n     */\n    [\"content\"]: string;\n    /**\n     * Additional properties\n     */\n    [\"additions\"]?: { [key: string]: string; };\n}\nexport namespace RemittanceInformation {\n    export type TypeEnum = 'STRUCTURED' | 'UNSTRUCTURED';\n    export const TypeEnum = {\n        STRUCTURED: 'STRUCTURED' as TypeEnum,\n        UNSTRUCTURED: 'UNSTRUCTURED' as TypeEnum\n    };\n}\n\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Schedule for recurring transfer. Mandatory if paymentMode is RECURRING\n */\nexport interface Schedule { \n    /**\n     * Strategy for executing payments on non-working days\n     */\n    [\"nonWorkingDayExecutionStrategy\"]?: Schedule.NonWorkingDayExecutionStrategyEnum;\n    /**\n     * Denotes how frequently the transfer should be made\n     */\n    [\"transferFrequency\"]: Schedule.TransferFrequencyEnum;\n    /**\n     * Denotes day on which transfer should be executed. For WEEKLY transferFrequency it will be 1..7 indicating weekday. For BIWEEKLY it will be 1..14 indicating the day of the two week period. For MONTHLY it will be 1..31 indicating day of month. For YEARLY it will be 1..12 indicating month of the year.\n     */\n    [\"on\"]: number;\n    /**\n     * When to start executing the schedule. First transfer will be executed on first calculated date by schedule after this date.\n     */\n    [\"startDate\"]: string;\n    /**\n     * When to stop transfers. Transfers will not be executed after this date. Only one of endDate and repeat is possible. If neither repeat nor endDate is provided transfer will be executed until canceled\n     */\n    [\"endDate\"]?: string;\n    /**\n     * Number of transfer to be executed. Only one of endDate and repeat is possible. If neither repeat nor endDate is provided transfer will be executed until canceled\n     */\n    [\"repeat\"]?: number;\n    /**\n     * Indicates skip interval of transfer. 1 would mean execute every time, 2 - every other time\n     */\n    [\"every\"]: Schedule.EveryEnum;\n    /**\n     * Date when the next payment will be executed, taking in consideration bank holidays and cut-off times. It will be only retrieved when getting payments, it will be dismissed when creating or updating.\n     */\n    [\"nextExecutionDate\"]?: string;\n    /**\n     * Additional properties\n     */\n    [\"additions\"]?: { [key: string]: string; };\n}\nexport namespace Schedule {\n    export type NonWorkingDayExecutionStrategyEnum = 'BEFORE' | 'AFTER' | 'NONE';\n    export const NonWorkingDayExecutionStrategyEnum = {\n        BEFORE: 'BEFORE' as NonWorkingDayExecutionStrategyEnum,\n        AFTER: 'AFTER' as NonWorkingDayExecutionStrategyEnum,\n        NONE: 'NONE' as NonWorkingDayExecutionStrategyEnum\n    };\n    export type TransferFrequencyEnum = 'ONCE' | 'DAILY' | 'WEEKLY' | 'BIWEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY';\n    export const TransferFrequencyEnum = {\n        ONCE: 'ONCE' as TransferFrequencyEnum,\n        DAILY: 'DAILY' as TransferFrequencyEnum,\n        WEEKLY: 'WEEKLY' as TransferFrequencyEnum,\n        BIWEEKLY: 'BIWEEKLY' as TransferFrequencyEnum,\n        MONTHLY: 'MONTHLY' as TransferFrequencyEnum,\n        QUARTERLY: 'QUARTERLY' as TransferFrequencyEnum,\n        YEARLY: 'YEARLY' as TransferFrequencyEnum\n    };\n    export type EveryEnum = '1' | '2';\n    export const EveryEnum = {\n        _1: '1' as EveryEnum,\n        _2: '2' as EveryEnum\n    };\n}\n\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * This describes the type of the account identifier. ID will mean it refers to an account known within DBS.\n */\nexport type SchemeNames = 'IBAN' | 'BBAN' | 'ID' | 'EXTERNAL_ID' | 'EMAIL' | 'MOBILE';\n\nexport const SchemeNames = {\n    IBAN: 'IBAN' as SchemeNames,\n    BBAN: 'BBAN' as SchemeNames,\n    ID: 'ID' as SchemeNames,\n    EXTERNALID: 'EXTERNAL_ID' as SchemeNames,\n    EMAIL: 'EMAIL' as SchemeNames,\n    MOBILE: 'MOBILE' as SchemeNames\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The internal DBS status of the payment order..\n */\nexport type Status = 'DRAFT' | 'ENTERED' | 'READY' | 'ACCEPTED' | 'PROCESSED' | 'REJECTED' | 'CANCELLED' | 'CANCELLATION_PENDING' | 'CONFIRMATION_PENDING' | 'CONFIRMATION_DECLINED' | 'REPLACED';\n\nexport const Status = {\n    DRAFT: 'DRAFT' as Status,\n    ENTERED: 'ENTERED' as Status,\n    READY: 'READY' as Status,\n    ACCEPTED: 'ACCEPTED' as Status,\n    PROCESSED: 'PROCESSED' as Status,\n    REJECTED: 'REJECTED' as Status,\n    CANCELLED: 'CANCELLED' as Status,\n    CANCELLATIONPENDING: 'CANCELLATION_PENDING' as Status,\n    CONFIRMATIONPENDING: 'CONFIRMATION_PENDING' as Status,\n    CONFIRMATIONDECLINED: 'CONFIRMATION_DECLINED' as Status,\n    REPLACED: 'REPLACED' as Status\n};\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The status of the upload. Both FAILED and DONE are end states. The happy flow is OPEN - UPLOADING - UPLOADED - VALID - DONE.\n */\nexport type UploadStatus = 'OPEN' | 'UPLOADING' | 'UPLOADED' | 'VALID' | 'DUPLICATE' | 'DONE' | 'FAILED';\n\nexport const UploadStatus = {\n    OPEN: 'OPEN' as UploadStatus,\n    UPLOADING: 'UPLOADING' as UploadStatus,\n    UPLOADED: 'UPLOADED' as UploadStatus,\n    VALID: 'VALID' as UploadStatus,\n    DUPLICATE: 'DUPLICATE' as UploadStatus,\n    DONE: 'DONE' as UploadStatus,\n    FAILED: 'FAILED' as UploadStatus\n};\n\n","import { InjectionToken } from '@angular/core';\n\nexport const PAYMENT_BATCH_BASE_PATH = new InjectionToken<string>('PAYMENT_BATCH_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface PaymentBatchConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class PaymentBatchConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: PaymentBatchConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link PaymentBatchConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link PaymentBatchConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentBatchConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { PaymentBatchConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class PaymentBatchApiModule {\n    public static forRoot(configurationFactory: () => PaymentBatchConfiguration): ModuleWithProviders<PaymentBatchApiModule> {\n        return {\n            ngModule: PaymentBatchApiModule,\n            providers: [ { provide: PaymentBatchConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: PaymentBatchApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: PaymentBatchConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('PaymentBatchApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { BatchOrderApprovalPutRequest } from '../model/models';\nimport { BatchOrderApprovalPutResponse } from '../model/models';\nimport { BatchOrderGetResponse } from '../model/models';\nimport { BatchOrderPutRequest } from '../model/models';\nimport { BatchOrderPutResponse } from '../model/models';\nimport { BatchOrdersGetResponse } from '../model/models';\nimport { BatchOrdersPostRequest } from '../model/models';\nimport { BatchOrdersPostResponse } from '../model/models';\nimport { BatchPaymentGetResponse } from '../model/models';\nimport { BatchPaymentsGetResponse } from '../model/models';\nimport { BatchPaymentsPostRequest } from '../model/models';\nimport { BatchPaymentsPostResponse } from '../model/models';\nimport { BatchPaymentsPutRequest } from '../model/models';\nimport { BatchPaymentsPutResponse } from '../model/models';\nimport { BreachReportError } from '../model/models';\nimport { ConflictError } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { NotFoundError } from '../model/models';\n\nimport { PAYMENT_BATCH_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { PaymentBatchConfiguration }                                     from '../configuration';\n\n\nexport interface DeleteBatchOrderIdByBatchOrderIdRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n}\n\nexport interface DeleteBatchPaymentByIdRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n    /** No description available */\n    [\"batchPaymentId\"]: string;\n}\n\nexport interface GetBatchOrdersRequestParams {\n    /** Minimum length is 3. The search term used to make partial search on properties account name and iban/bban. Additions for batch-orders only: full search on currency, partial on batch name.  */\n    [\"query\"]?: string;\n    /** Lower value of the range search. The value is inclusive so this is acting as &gt;&#x3D;. */\n    [\"amountFrom\"]?: number;\n    /** Upper value of the range search. The value is inclusive so this is acting as &lt;&#x3D;. */\n    [\"amountTo\"]?: number;\n    /** Exact value to match against the requested execution date. */\n    [\"executionDate\"]?: string;\n    /** Lower value of the range search. The value is inclusive so this is acting as &gt;&#x3D;. */\n    [\"executionDateFrom\"]?: string;\n    /** Upper value of the range search. The value is inclusive so this is acting as &lt;&#x3D;. */\n    [\"executionDateTo\"]?: string;\n    /** No description available */\n    [\"status\"]?: Array<'ENTERED' | 'READY' | 'ACCEPTED' | 'PROCESSED' | 'REJECTED' | 'CANCELLED' | 'ACKNOWLEDGED' | 'DOWNLOADING'>;\n    /** Page Number. Skip over pages of elements by specifying a start value for the query */\n    [\"from\"]?: number;\n    /** Record UUID. As an alternative for specifying \\&#39;from\\&#39; this allows to point to the record to start the selection from.  */\n    [\"cursor\"]?: string;\n    /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */\n    [\"size\"]?: number;\n    /** If true: The creditDebitMixedIndicator value will be dynamically calculated based on entire available batch list. If false: The creditDebitMixedIndicator value will be taken from configured supported-batch-directions  */\n    [\"dynamicCreditDebitMixedIndicator\"]?: boolean;\n}\n\nexport interface GetBatchOrdersByIdRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n}\n\nexport interface GetBatchPaymentByIdRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n    /** No description available */\n    [\"batchPaymentId\"]: string;\n}\n\nexport interface GetBatchPaymentsByIdRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n    /** Page Number. Skip over pages of elements by specifying a start value for the query */\n    [\"from\"]?: number;\n    /** Record UUID. As an alternative for specifying \\&#39;from\\&#39; this allows to point to the record to start the selection from.  */\n    [\"cursor\"]?: string;\n    /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */\n    [\"size\"]?: number;\n}\n\nexport interface PostBatchOrdersRequestParams {\n    /** Request for new batch order. */\n    [\"batchOrdersPostRequest\"]: BatchOrdersPostRequest;\n}\n\nexport interface PostBatchPaymentsRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n    /** Request for new batch payment. */\n    [\"batchPaymentsPostRequest\"]: BatchPaymentsPostRequest;\n}\n\nexport interface PutApprovalsByIdRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n    /** Approves or rejects a given batch order */\n    [\"batchOrderApprovalPutRequest\"]: BatchOrderApprovalPutRequest;\n}\n\nexport interface PutBatchPaymentByIdRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n    /** No description available */\n    [\"batchPaymentId\"]: string;\n    /** Batch payment update. */\n    [\"batchPaymentsPutRequest\"]: BatchPaymentsPutRequest;\n}\n\nexport interface UpdateBatchOrderByIdRequestParams {\n    /** No description available */\n    [\"batchOrderId\"]: string;\n    /** Updates batch order. */\n    [\"batchOrderPutRequest\"]: BatchOrderPutRequest;\n    /** Set this parameter to true to run the update without changes on the server (e.g. when transitioning batch order to VALID status, the validations are run, but the processing flow is not triggered and the batch order is not persisted).  */\n    [\"dryRun\"]?: boolean;\n    /** Set this parameter to validate the total persisted credit transactions count against the intended credit transactions count.  */\n    [\"intendedCreditTransactionsCount\"]?: number;\n    /** Set this parameter to validate the total persisted debit transactions count against the intended debit transactions count.  */\n    [\"intendedDebitTransactionsCount\"]?: number;\n    /** Set this parameter to validate the total persisted credit amount against the intended credit amount.  */\n    [\"intendedCreditAmount\"]?: number;\n    /** Set this parameter to validate the total persisted debit amount against the intended debit amount.  */\n    [\"intendedDebitAmount\"]?: number;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatchOrdersHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new PaymentBatchConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(PAYMENT_BATCH_BASE_PATH) basePath: string, @Optional() configuration: PaymentBatchConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Deletes a batch order.\n     * Deletes a batch order. Only the initiator of the batch can delete it. Only batch orders in status ENTERED (with zero given approvals) and DRAFT are eligible for deletion.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchOrderIdByBatchOrderId(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Deletes a batch order.\n     * Deletes a batch order. Only the initiator of the batch can delete it. Only batch orders in status ENTERED (with zero given approvals) and DRAFT are eligible for deletion.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchOrderIdByBatchOrderId(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Deletes a batch order.\n     * Deletes a batch order. Only the initiator of the batch can delete it. Only batch orders in status ENTERED (with zero given approvals) and DRAFT are eligible for deletion.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchOrderIdByBatchOrderId(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Deletes a batch order.\n     * Deletes a batch order. Only the initiator of the batch can delete it. Only batch orders in status ENTERED (with zero given approvals) and DRAFT are eligible for deletion.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchOrderIdByBatchOrderId(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchOrderIdByBatchOrderId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deleteBatchOrderIdByBatchOrderIdUrl(requestParameters: DeleteBatchOrderIdByBatchOrderIdRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchOrderIdByBatchOrderId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`;\n    }\n\n    /**\n     * Deletes a batch payment.\n     * Deletes a batch payment. Only the creator of the batch order can delete it. Only batch orders in status DRAFT payments can be deleted.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchPaymentById(requestParameters: DeleteBatchPaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Deletes a batch payment.\n     * Deletes a batch payment. Only the creator of the batch order can delete it. Only batch orders in status DRAFT payments can be deleted.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchPaymentById(requestParameters: DeleteBatchPaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Deletes a batch payment.\n     * Deletes a batch payment. Only the creator of the batch order can delete it. Only batch orders in status DRAFT payments can be deleted.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchPaymentById(requestParameters: DeleteBatchPaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Deletes a batch payment.\n     * Deletes a batch payment. Only the creator of the batch order can delete it. Only batch orders in status DRAFT payments can be deleted.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchPaymentById(requestParameters: DeleteBatchPaymentByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchPaymentById.');\n        }\n        const _batchPaymentId = requestParameters[\"batchPaymentId\"];\n        if (_batchPaymentId === null || _batchPaymentId === undefined) {\n            throw new Error('Required parameter batchPaymentId was null or undefined when calling deleteBatchPaymentById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deleteBatchPaymentByIdUrl(requestParameters: DeleteBatchPaymentByIdRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchPaymentById.');\n        }\n        const _batchPaymentId = requestParameters[\"batchPaymentId\"];\n        if (_batchPaymentId === null || _batchPaymentId === undefined) {\n            throw new Error('Required parameter batchPaymentId was null or undefined when calling deleteBatchPaymentById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;\n    }\n\n    /**\n     * Retrieve list of batch orders.\n     * Retrieve list of batch orders\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchOrders(requestParameters: GetBatchOrdersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchOrdersGetResponse>;\n    /**\n     * Retrieve list of batch orders.\n     * Retrieve list of batch orders\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchOrders(requestParameters: GetBatchOrdersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchOrdersGetResponse>>;\n    /**\n     * Retrieve list of batch orders.\n     * Retrieve list of batch orders\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchOrders(requestParameters: GetBatchOrdersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchOrdersGetResponse>>;\n    /**\n     * Retrieve list of batch orders.\n     * Retrieve list of batch orders\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchOrders(requestParameters: GetBatchOrdersRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _query = requestParameters[\"query\"];\n        const _amountFrom = requestParameters[\"amountFrom\"];\n        const _amountTo = requestParameters[\"amountTo\"];\n        const _executionDate = requestParameters[\"executionDate\"];\n        const _executionDateFrom = requestParameters[\"executionDateFrom\"];\n        const _executionDateTo = requestParameters[\"executionDateTo\"];\n        const _status = requestParameters[\"status\"];\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n        const _dynamicCreditDebitMixedIndicator = requestParameters[\"dynamicCreditDebitMixedIndicator\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_amountFrom !== undefined && _amountFrom !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_amountFrom, 'amountFrom');\n        }\n        if (_amountTo !== undefined && _amountTo !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_amountTo, 'amountTo');\n        }\n        if (_executionDate !== undefined && _executionDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_executionDate, 'executionDate');\n        }\n        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_executionDateFrom, 'executionDateFrom');\n        }\n        if (_executionDateTo !== undefined && _executionDateTo !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_executionDateTo, 'executionDateTo');\n        }\n        if (_status) {\n            _status.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'status');\n            })\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_dynamicCreditDebitMixedIndicator !== undefined && _dynamicCreditDebitMixedIndicator !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_dynamicCreditDebitMixedIndicator, 'dynamicCreditDebitMixedIndicator');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BatchOrdersGetResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getBatchOrdersUrl(requestParameters: GetBatchOrdersRequestParams): string {\n        const _query = requestParameters[\"query\"];\n        const _amountFrom = requestParameters[\"amountFrom\"];\n        const _amountTo = requestParameters[\"amountTo\"];\n        const _executionDate = requestParameters[\"executionDate\"];\n        const _executionDateFrom = requestParameters[\"executionDateFrom\"];\n        const _executionDateTo = requestParameters[\"executionDateTo\"];\n        const _status = requestParameters[\"status\"];\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n        const _dynamicCreditDebitMixedIndicator = requestParameters[\"dynamicCreditDebitMixedIndicator\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_amountFrom !== undefined && _amountFrom !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_amountFrom, 'amountFrom');\n        }\n        if (_amountTo !== undefined && _amountTo !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_amountTo, 'amountTo');\n        }\n        if (_executionDate !== undefined && _executionDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_executionDate, 'executionDate');\n        }\n        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_executionDateFrom, 'executionDateFrom');\n        }\n        if (_executionDateTo !== undefined && _executionDateTo !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_executionDateTo, 'executionDateTo');\n        }\n        if (_status) {\n            _status.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'status');\n            })\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_dynamicCreditDebitMixedIndicator !== undefined && _dynamicCreditDebitMixedIndicator !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_dynamicCreditDebitMixedIndicator, 'dynamicCreditDebitMixedIndicator');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/batch-orders${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get details of a batch order.\n     * Get details of a batch order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchOrdersById(requestParameters: GetBatchOrdersByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchOrderGetResponse>;\n    /**\n     * Get details of a batch order.\n     * Get details of a batch order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchOrdersById(requestParameters: GetBatchOrdersByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchOrderGetResponse>>;\n    /**\n     * Get details of a batch order.\n     * Get details of a batch order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchOrdersById(requestParameters: GetBatchOrdersByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchOrderGetResponse>>;\n    /**\n     * Get details of a batch order.\n     * Get details of a batch order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchOrdersById(requestParameters: GetBatchOrdersByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchOrdersById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BatchOrderGetResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getBatchOrdersByIdUrl(requestParameters: GetBatchOrdersByIdRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchOrdersById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`;\n    }\n\n    /**\n     * Displays details of a batch payment\n     * Get batch payments details\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchPaymentById(requestParameters: GetBatchPaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchPaymentGetResponse>;\n    /**\n     * Displays details of a batch payment\n     * Get batch payments details\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchPaymentById(requestParameters: GetBatchPaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchPaymentGetResponse>>;\n    /**\n     * Displays details of a batch payment\n     * Get batch payments details\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchPaymentById(requestParameters: GetBatchPaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchPaymentGetResponse>>;\n    /**\n     * Displays details of a batch payment\n     * Get batch payments details\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchPaymentById(requestParameters: GetBatchPaymentByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentById.');\n        }\n        const _batchPaymentId = requestParameters[\"batchPaymentId\"];\n        if (_batchPaymentId === null || _batchPaymentId === undefined) {\n            throw new Error('Required parameter batchPaymentId was null or undefined when calling getBatchPaymentById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BatchPaymentGetResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getBatchPaymentByIdUrl(requestParameters: GetBatchPaymentByIdRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentById.');\n        }\n        const _batchPaymentId = requestParameters[\"batchPaymentId\"];\n        if (_batchPaymentId === null || _batchPaymentId === undefined) {\n            throw new Error('Required parameter batchPaymentId was null or undefined when calling getBatchPaymentById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;\n    }\n\n    /**\n     * Get batch payments.\n     * Get batch payments\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchPaymentsById(requestParameters: GetBatchPaymentsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchPaymentsGetResponse>;\n    /**\n     * Get batch payments.\n     * Get batch payments\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchPaymentsById(requestParameters: GetBatchPaymentsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchPaymentsGetResponse>>;\n    /**\n     * Get batch payments.\n     * Get batch payments\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchPaymentsById(requestParameters: GetBatchPaymentsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchPaymentsGetResponse>>;\n    /**\n     * Get batch payments.\n     * Get batch payments\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchPaymentsById(requestParameters: GetBatchPaymentsByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentsById.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BatchPaymentsGetResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getBatchPaymentsByIdUrl(requestParameters: GetBatchPaymentsByIdRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentsById.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Creates new batch order with status DRAFT.\n     * Creates new batch order with status DRAFT.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchOrders(requestParameters: PostBatchOrdersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchOrdersPostResponse>;\n    /**\n     * Creates new batch order with status DRAFT.\n     * Creates new batch order with status DRAFT.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchOrders(requestParameters: PostBatchOrdersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchOrdersPostResponse>>;\n    /**\n     * Creates new batch order with status DRAFT.\n     * Creates new batch order with status DRAFT.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchOrders(requestParameters: PostBatchOrdersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchOrdersPostResponse>>;\n    /**\n     * Creates new batch order with status DRAFT.\n     * Creates new batch order with status DRAFT.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchOrders(requestParameters: PostBatchOrdersRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrdersPostRequest = requestParameters[\"batchOrdersPostRequest\"];\n        if (_batchOrdersPostRequest === null || _batchOrdersPostRequest === undefined) {\n            throw new Error('Required parameter batchOrdersPostRequest was null or undefined when calling postBatchOrders.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<BatchOrdersPostResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders`,\n            _batchOrdersPostRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postBatchOrdersUrl(requestParameters: PostBatchOrdersRequestParams): string {\n        const _batchOrdersPostRequest = requestParameters[\"batchOrdersPostRequest\"];\n        if (_batchOrdersPostRequest === null || _batchOrdersPostRequest === undefined) {\n            throw new Error('Required parameter batchOrdersPostRequest was null or undefined when calling postBatchOrders.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-orders`;\n    }\n\n    /**\n     * Creates new batch payment.\n     * Adds new batch payment under the batch order in status DRAFT. Only the creator of the batch order can add payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the create fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchPayments(requestParameters: PostBatchPaymentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchPaymentsPostResponse>;\n    /**\n     * Creates new batch payment.\n     * Adds new batch payment under the batch order in status DRAFT. Only the creator of the batch order can add payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the create fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchPayments(requestParameters: PostBatchPaymentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchPaymentsPostResponse>>;\n    /**\n     * Creates new batch payment.\n     * Adds new batch payment under the batch order in status DRAFT. Only the creator of the batch order can add payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the create fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchPayments(requestParameters: PostBatchPaymentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchPaymentsPostResponse>>;\n    /**\n     * Creates new batch payment.\n     * Adds new batch payment under the batch order in status DRAFT. Only the creator of the batch order can add payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the create fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchPayments(requestParameters: PostBatchPaymentsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling postBatchPayments.');\n        }\n        const _batchPaymentsPostRequest = requestParameters[\"batchPaymentsPostRequest\"];\n        if (_batchPaymentsPostRequest === null || _batchPaymentsPostRequest === undefined) {\n            throw new Error('Required parameter batchPaymentsPostRequest was null or undefined when calling postBatchPayments.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<BatchPaymentsPostResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`,\n            _batchPaymentsPostRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postBatchPaymentsUrl(requestParameters: PostBatchPaymentsRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling postBatchPayments.');\n        }\n        const _batchPaymentsPostRequest = requestParameters[\"batchPaymentsPostRequest\"];\n        if (_batchPaymentsPostRequest === null || _batchPaymentsPostRequest === undefined) {\n            throw new Error('Required parameter batchPaymentsPostRequest was null or undefined when calling postBatchPayments.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`;\n    }\n\n    /**\n     * Approves or rejects a given batch order.\n     * Approves or rejects a given batch order\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putApprovalsById(requestParameters: PutApprovalsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchOrderApprovalPutResponse>;\n    /**\n     * Approves or rejects a given batch order.\n     * Approves or rejects a given batch order\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putApprovalsById(requestParameters: PutApprovalsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchOrderApprovalPutResponse>>;\n    /**\n     * Approves or rejects a given batch order.\n     * Approves or rejects a given batch order\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putApprovalsById(requestParameters: PutApprovalsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchOrderApprovalPutResponse>>;\n    /**\n     * Approves or rejects a given batch order.\n     * Approves or rejects a given batch order\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putApprovalsById(requestParameters: PutApprovalsByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling putApprovalsById.');\n        }\n        const _batchOrderApprovalPutRequest = requestParameters[\"batchOrderApprovalPutRequest\"];\n        if (_batchOrderApprovalPutRequest === null || _batchOrderApprovalPutRequest === undefined) {\n            throw new Error('Required parameter batchOrderApprovalPutRequest was null or undefined when calling putApprovalsById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<BatchOrderApprovalPutResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/approvals`,\n            _batchOrderApprovalPutRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public putApprovalsByIdUrl(requestParameters: PutApprovalsByIdRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling putApprovalsById.');\n        }\n        const _batchOrderApprovalPutRequest = requestParameters[\"batchOrderApprovalPutRequest\"];\n        if (_batchOrderApprovalPutRequest === null || _batchOrderApprovalPutRequest === undefined) {\n            throw new Error('Required parameter batchOrderApprovalPutRequest was null or undefined when calling putApprovalsById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/approvals`;\n    }\n\n    /**\n     * Updates a given batch payment.\n     * Updates a batch payment identified by batch order id and batch payment id pair. Only batch orders in status DRAFT payments can be updated. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. Only the creator of the batch order can update payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the update fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchPaymentById(requestParameters: PutBatchPaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchPaymentsPutResponse>;\n    /**\n     * Updates a given batch payment.\n     * Updates a batch payment identified by batch order id and batch payment id pair. Only batch orders in status DRAFT payments can be updated. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. Only the creator of the batch order can update payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the update fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchPaymentById(requestParameters: PutBatchPaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchPaymentsPutResponse>>;\n    /**\n     * Updates a given batch payment.\n     * Updates a batch payment identified by batch order id and batch payment id pair. Only batch orders in status DRAFT payments can be updated. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. Only the creator of the batch order can update payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the update fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchPaymentById(requestParameters: PutBatchPaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchPaymentsPutResponse>>;\n    /**\n     * Updates a given batch payment.\n     * Updates a batch payment identified by batch order id and batch payment id pair. Only batch orders in status DRAFT payments can be updated. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. Only the creator of the batch order can update payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the update fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchPaymentById(requestParameters: PutBatchPaymentByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling putBatchPaymentById.');\n        }\n        const _batchPaymentId = requestParameters[\"batchPaymentId\"];\n        if (_batchPaymentId === null || _batchPaymentId === undefined) {\n            throw new Error('Required parameter batchPaymentId was null or undefined when calling putBatchPaymentById.');\n        }\n        const _batchPaymentsPutRequest = requestParameters[\"batchPaymentsPutRequest\"];\n        if (_batchPaymentsPutRequest === null || _batchPaymentsPutRequest === undefined) {\n            throw new Error('Required parameter batchPaymentsPutRequest was null or undefined when calling putBatchPaymentById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<BatchPaymentsPutResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`,\n            _batchPaymentsPutRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public putBatchPaymentByIdUrl(requestParameters: PutBatchPaymentByIdRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling putBatchPaymentById.');\n        }\n        const _batchPaymentId = requestParameters[\"batchPaymentId\"];\n        if (_batchPaymentId === null || _batchPaymentId === undefined) {\n            throw new Error('Required parameter batchPaymentId was null or undefined when calling putBatchPaymentById.');\n        }\n        const _batchPaymentsPutRequest = requestParameters[\"batchPaymentsPutRequest\"];\n        if (_batchPaymentsPutRequest === null || _batchPaymentsPutRequest === undefined) {\n            throw new Error('Required parameter batchPaymentsPutRequest was null or undefined when calling putBatchPaymentById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;\n    }\n\n    /**\n     * Updates batch order.\n     * Updates batch order. Only batch orders with status ENTERED or DRAFT can be updated. Valid transition from status ENTERED is CANCELLED. Only status can be updated for ENTERED batch order. Valid transition from status DRAFT is VALID. All available field can be updated for DRAFT batch order. The update is partial, meaning the new state is written over the existing state (not replacing it). By setting status to VALID with dryRun &#x3D; false, the batch order is validated and submitted for processing (create approvals, consume limits, send to core bank) and the final status in the response can be different from VALID. By setting status to VALID with dryRun &#x3D; true, the batch order is validated but not submitted for processing. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchOrderById(requestParameters: UpdateBatchOrderByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchOrderPutResponse>;\n    /**\n     * Updates batch order.\n     * Updates batch order. Only batch orders with status ENTERED or DRAFT can be updated. Valid transition from status ENTERED is CANCELLED. Only status can be updated for ENTERED batch order. Valid transition from status DRAFT is VALID. All available field can be updated for DRAFT batch order. The update is partial, meaning the new state is written over the existing state (not replacing it). By setting status to VALID with dryRun &#x3D; false, the batch order is validated and submitted for processing (create approvals, consume limits, send to core bank) and the final status in the response can be different from VALID. By setting status to VALID with dryRun &#x3D; true, the batch order is validated but not submitted for processing. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchOrderById(requestParameters: UpdateBatchOrderByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchOrderPutResponse>>;\n    /**\n     * Updates batch order.\n     * Updates batch order. Only batch orders with status ENTERED or DRAFT can be updated. Valid transition from status ENTERED is CANCELLED. Only status can be updated for ENTERED batch order. Valid transition from status DRAFT is VALID. All available field can be updated for DRAFT batch order. The update is partial, meaning the new state is written over the existing state (not replacing it). By setting status to VALID with dryRun &#x3D; false, the batch order is validated and submitted for processing (create approvals, consume limits, send to core bank) and the final status in the response can be different from VALID. By setting status to VALID with dryRun &#x3D; true, the batch order is validated but not submitted for processing. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchOrderById(requestParameters: UpdateBatchOrderByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchOrderPutResponse>>;\n    /**\n     * Updates batch order.\n     * Updates batch order. Only batch orders with status ENTERED or DRAFT can be updated. Valid transition from status ENTERED is CANCELLED. Only status can be updated for ENTERED batch order. Valid transition from status DRAFT is VALID. All available field can be updated for DRAFT batch order. The update is partial, meaning the new state is written over the existing state (not replacing it). By setting status to VALID with dryRun &#x3D; false, the batch order is validated and submitted for processing (create approvals, consume limits, send to core bank) and the final status in the response can be different from VALID. By setting status to VALID with dryRun &#x3D; true, the batch order is validated but not submitted for processing. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchOrderById(requestParameters: UpdateBatchOrderByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling updateBatchOrderById.');\n        }\n        const _batchOrderPutRequest = requestParameters[\"batchOrderPutRequest\"];\n        if (_batchOrderPutRequest === null || _batchOrderPutRequest === undefined) {\n            throw new Error('Required parameter batchOrderPutRequest was null or undefined when calling updateBatchOrderById.');\n        }\n        const _dryRun = requestParameters[\"dryRun\"];\n        const _intendedCreditTransactionsCount = requestParameters[\"intendedCreditTransactionsCount\"];\n        const _intendedDebitTransactionsCount = requestParameters[\"intendedDebitTransactionsCount\"];\n        const _intendedCreditAmount = requestParameters[\"intendedCreditAmount\"];\n        const _intendedDebitAmount = requestParameters[\"intendedDebitAmount\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_dryRun !== undefined && _dryRun !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_dryRun, 'dryRun');\n        }\n        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');\n        }\n        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');\n        }\n        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditAmount, 'intendedCreditAmount');\n        }\n        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitAmount, 'intendedDebitAmount');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<BatchOrderPutResponse>(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`,\n            _batchOrderPutRequest,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public updateBatchOrderByIdUrl(requestParameters: UpdateBatchOrderByIdRequestParams): string {\n        const _batchOrderId = requestParameters[\"batchOrderId\"];\n        if (_batchOrderId === null || _batchOrderId === undefined) {\n            throw new Error('Required parameter batchOrderId was null or undefined when calling updateBatchOrderById.');\n        }\n        const _batchOrderPutRequest = requestParameters[\"batchOrderPutRequest\"];\n        if (_batchOrderPutRequest === null || _batchOrderPutRequest === undefined) {\n            throw new Error('Required parameter batchOrderPutRequest was null or undefined when calling updateBatchOrderById.');\n        }\n        const _dryRun = requestParameters[\"dryRun\"];\n        const _intendedCreditTransactionsCount = requestParameters[\"intendedCreditTransactionsCount\"];\n        const _intendedDebitTransactionsCount = requestParameters[\"intendedDebitTransactionsCount\"];\n        const _intendedCreditAmount = requestParameters[\"intendedCreditAmount\"];\n        const _intendedDebitAmount = requestParameters[\"intendedDebitAmount\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_dryRun !== undefined && _dryRun !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_dryRun, 'dryRun');\n        }\n        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');\n        }\n        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');\n        }\n        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditAmount, 'intendedCreditAmount');\n        }\n        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitAmount, 'intendedDebitAmount');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId} URL pattern\n*/\nexport const BatchOrdersHttpServiceDeleteBatchOrderIdByBatchOrderIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId} URL pattern\n*/\nexport const BatchOrdersHttpServiceDeleteBatchPaymentByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch order not found\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch payment not found\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders URL pattern\n*/\nexport const BatchOrdersHttpServiceGetBatchOrdersMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"batchOrders\" : [ {\n    \"id\" : \"2f3a6d96-f671-4f03-994d-8f6caaa53cab\",\n    \"name\" : \"Employee salaries\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ACCEPTED\",\n    \"totalTransactionsCount\" : 73500,\n    \"totalCreditTransactionsCount\" : 73500,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"2400123.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"2400123.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Main Current\",\n      \"identification\" : {\n        \"identification\" : \"CH8739215260566920524\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-02-18\",\n    \"canDelete\" : false,\n    \"canCancel\" : false\n  }, {\n    \"id\" : \"33295f9c-95ec-42f9-9817-64f7d48be023\",\n    \"name\" : \"Employee salaries\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ACCEPTED\",\n    \"totalTransactionsCount\" : 75930,\n    \"totalCreditTransactionsCount\" : 75930,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"2479474.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"2479474.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Main Current\",\n      \"identification\" : {\n        \"identification\" : \"CH8739215260566920524\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-03-18\",\n    \"canDelete\" : false,\n    \"canCancel\" : false\n  }, {\n    \"id\" : \"f3da0418-c801-4db1-ae52-597f1459b525\",\n    \"name\" : \"Employee salaries\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ENTERED\",\n    \"totalTransactionsCount\" : 78791,\n    \"totalCreditTransactionsCount\" : 78791,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"2552947.15\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"2552947.15\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Main Current\",\n      \"identification\" : {\n        \"identification\" : \"CH8739215260566920524\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-04-18\",\n    \"canDelete\" : true,\n    \"canCancel\" : false\n  } ],\n  \"totalBatchOrders\" : 3,\n  \"creditDebitMixedIndicator\" : \"CREDIT\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"batchOrders\" : [ {\n    \"id\" : \"a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71\",\n    \"name\" : \"Employees salaries May\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ENTERED\",\n    \"totalTransactionsCount\" : 71,\n    \"totalCreditTransactionsCount\" : 71,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"191056.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"191056.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Salaries Account\",\n      \"identification\" : {\n        \"identification\" : \"ST42353317399261373273497\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-05-27\",\n    \"approval\" : {\n      \"id\" : \"9bb143b1-bdb3-4ca5-9631-e02e743d6a10\",\n      \"userId\" : \"23b8a2ac-e8bb-46b1-98d2-a2da71dfd646\",\n      \"externalUserId\" : \"judi-miles\",\n      \"userFullName\" : \"Judi Miles\",\n      \"serviceAgreementId\" : \"e3e718d8-8f2e-4ef4-bf27-22580759b742\",\n      \"itemId\" : \"a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71\",\n      \"dataAccessItemId\" : \"ac59c1a1-3729-4514-8051-5015dd0aadef\",\n      \"resource\" : \"Batches\",\n      \"function\" : \"SEPACT\",\n      \"status\" : \"PENDING\",\n      \"createdAt\" : \"2019-05-10T10:29:10Z\",\n      \"records\" : [ ],\n      \"canApprove\" : true,\n      \"canReject\" : true,\n      \"finalApprover\" : true\n    },\n    \"canDelete\" : false,\n    \"canCancel\" : false\n  } ],\n  \"totalBatchOrders\" : 1,\n  \"creditDebitMixedIndicator\" : \"CREDIT\"\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId} URL pattern\n*/\nexport const BatchOrdersHttpServiceGetBatchOrdersByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"2f3a6d96-f671-4f03-994d-8f6caaa53cab\",\n  \"name\" : \"Employee salaries\",\n  \"type\" : \"SEPACT\",\n  \"creditDebitMixedIndicator\" : \"CREDIT\",\n  \"status\" : \"ACCEPTED\",\n  \"totalTransactionsCount\" : 73500,\n  \"totalCreditTransactionsCount\" : 73500,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"2400123.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"totalCreditInstructedAmount\" : {\n    \"amount\" : \"2400123.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"account\" : {\n    \"name\" : \"Main Current\",\n    \"identification\" : {\n      \"identification\" : \"CH8739215260566920524\",\n      \"schemeName\" : \"IBAN\"\n    }\n  },\n  \"requestedExecutionDate\" : \"2019-02-18\",\n  \"fileName\" : \"salaries-2019-02.csv\",\n  \"userFullName\" : \"Davy Jones\",\n  \"uploadCompletedAt\" : \"2019-02-22T14:08:34Z\",\n  \"canDelete\" : false,\n  \"canCancel\" : false\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"2fd15c69-c4da-4c58-986f-d46082057bf5\",\n  \"name\" : \"End of Q2 payments\",\n  \"type\" : \"SEPACT\",\n  \"status\" : \"ENTERED\",\n  \"totalTransactionsCount\" : 2109,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"280810.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"account\" : {\n    \"name\" : \"Main\",\n    \"identification\" : {\n      \"identification\" : \"NO0741575812927\",\n      \"schemeName\" : \"IBAN\"\n    }\n  },\n  \"requestedExecutionDate\" : \"2019-05-31\",\n  \"fileName\" : \"2019-Q2-payments.csv\",\n  \"userFullName\" : \"Tommy Perrotti\",\n  \"uploadCompletedAt\" : \"2019-05-16T14:09:30Z\",\n  \"approval\" : {\n    \"id\" : \"9966c07c-1547-42a5-9bc7-91986ff33993\",\n    \"userId\" : \"c3608888-faa3-4f23-9c5a-269dd39caea5\",\n    \"externalUserId\" : \"judi-miles\",\n    \"userFullName\" : \"Judi Miles\",\n    \"serviceAgreementId\" : \"64f538bf-3f5d-4dd9-8de7-ba7082da198d\",\n    \"itemId\" : \"2fd15c69-c4da-4c58-986f-d46082057bf5\",\n    \"dataAccessItemId\" : \"f094b702-e912-434c-8e49-12c56fc78551\",\n    \"resource\" : \"Batches\",\n    \"function\" : \"SEPACT\",\n    \"status\" : \"PENDING\",\n    \"createdAt\" : \"2019-05-16T14:09:40Z\",\n    \"records\" : [ {\n      \"id\" : \"9e61d96d-fea3-44a4-8903-88d95eb266a8\",\n      \"userId\" : \"f34feccc-0d0d-4365-982b-d6d1779e5aaf\",\n      \"externalUserId\" : \"bigWillie\",\n      \"userFullName\" : \"Willie Iles\",\n      \"approvalTypeId\" : \"ece87cfe-33f9-45a4-8c51-a04a9f905c66\",\n      \"status\" : \"APPROVED\",\n      \"createdAt\" : \"2019-05-17T13:44:02Z\"\n    } ],\n    \"canApprove\" : false,\n    \"canReject\" : false,\n    \"finalApprover\" : false\n  },\n  \"canDelete\" : false,\n  \"canCancel\" : true\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"b438751d-6e6a-4601-8009-a82fa22bddcc\",\n  \"name\" : \"Employee salaries\",\n  \"type\" : \"SEPACT\",\n  \"status\" : \"REJECTED\",\n  \"totalTransactionsCount\" : 9208,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"50343009.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"account\" : {\n    \"name\" : \"Main Account 8\",\n    \"identification\" : {\n      \"identification\" : \"NL18ABNA4956451237\",\n      \"schemeName\" : \"IBAN\"\n    }\n  },\n  \"requestedExecutionDate\" : \"2019-09-15\",\n  \"description\" : \"Salary Sep 2019\",\n  \"bankStatus\" : \"UNPROCESSABLE\",\n  \"reasonCode\" : \"RJ08\",\n  \"reasonText\" : \"Insufficient funds\",\n  \"errorDescription\" : \"Target account has not enough funds to execute batch payments\",\n  \"fileName\" : \"salaries-2019-02.csv\",\n  \"userFullName\" : \"Davy Jones\",\n  \"uploadCompletedAt\" : \"2019-02-22T14:08:34Z\",\n  \"canDelete\" : false,\n  \"canCancel\" : false\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"2f4c4bb6-c107-473a-adbd-7343b8f0ea80\",\n  \"name\" : \"Salaries 2020-12\",\n  \"type\" : \"ACH_CREDIT\",\n  \"status\" : \"ACCEPTED\",\n  \"totalTransactionsCount\" : 401,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"650980.25\",\n    \"currencyCode\" : \"USD\"\n  },\n  \"account\" : {\n    \"name\" : \"Current Account\",\n    \"identification\" : {\n      \"identification\" : \"7649373647\",\n      \"schemeName\" : \"BBAN\"\n    }\n  },\n  \"bankBranchCode\" : \"113105452\",\n  \"companyId\" : \"1800948594\",\n  \"companyName\" : \"Your Company\",\n  \"requestedExecutionDate\" : \"2020-12-18\",\n  \"fileName\" : \"salaries-2020-12.ach\",\n  \"userFullName\" : \"Ben Jones\",\n  \"uploadCompletedAt\" : \"2020-12-15T15:28:10Z\",\n  \"canDelete\" : false,\n  \"canCancel\" : false\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId} URL pattern\n*/\nexport const BatchOrdersHttpServiceGetBatchPaymentByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"counterpartyName\" : \"M. Frederiksen\",\n  \"counterpartyAccountNumber\" : \"DE49500105174361358418\",\n  \"instructedAmount\" : {\n    \"amount\" : \"5576.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"description\" : \"Salary Feb 2019 empl.no:068572\",\n  \"status\" : \"REJECTED\",\n  \"extendedDescription\" : \"Addenda record for the credit payment \\nAddenda record for the credit payment\",\n  \"bankStatus\" : \"UNPROCESSABLE\",\n  \"reasonCode\" : \"RJ05\",\n  \"reasonText\" : \"Rejected by counterparty bank\",\n  \"errorDescription\" : \"Target account has been closed.\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId}/batch-payments URL pattern\n*/\nexport const BatchOrdersHttpServiceGetBatchPaymentsByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"batchPayments\" : [ {\n    \"counterpartyName\" : \"A. Hamers\",\n    \"counterpartyAccountNumber\" : \"NL62ABNA0609476343\",\n    \"instructedAmount\" : {\n      \"amount\" : \"4102.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:902713\",\n    \"extendedDescriptionSize\" : 99999\n  }, {\n    \"counterpartyName\" : \"E. Gutierrez\",\n    \"counterpartyAccountNumber\" : \"NL50ABNA4418364501\",\n    \"instructedAmount\" : {\n      \"amount\" : \"5287.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:256869\",\n    \"extendedDescriptionSize\" : 0\n  }, {\n    \"counterpartyName\" : \"C.M. McAlister\",\n    \"counterpartyAccountNumber\" : \"BE98735114499693\",\n    \"instructedAmount\" : {\n      \"amount\" : \"3398.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:100642\",\n    \"extendedDescriptionSize\" : 456768\n  }, {\n    \"counterpartyName\" : \"K.C. Bennis\",\n    \"counterpartyAccountNumber\" : \"NL67ABNA5515439724\",\n    \"instructedAmount\" : {\n      \"amount\" : \"4334.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:191872\",\n    \"extendedDescriptionSize\" : 0\n  }, {\n    \"counterpartyName\" : \"M. Frederiksen\",\n    \"counterpartyAccountNumber\" : \"DE49500105174361358418\",\n    \"instructedAmount\" : {\n      \"amount\" : \"5576.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:068572\",\n    \"extendedDescriptionSize\" : 123,\n    \"status\" : \"REJECTED\",\n    \"bankStatus\" : \"UNPROCESSABLE\",\n    \"reasonCode\" : \"RJ05\",\n    \"reasonText\" : \"Rejected by counterparty bank\",\n    \"errorDescription\" : \"Target account has been closed.\"\n  } ],\n  \"totalBatchPayments\" : 5,\n  \"batchOrder\" : {\n    \"id\" : \"2f3a6d96-f671-4f03-994d-8f6caaa53cab\",\n    \"name\" : \"Employee salaries\",\n    \"type\" : \"SEPACT\",\n    \"status\" : \"ACCEPTED\",\n    \"totalTransactionsCount\" : 5,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"2400123.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Main Current\",\n      \"identification\" : {\n        \"identification\" : \"CH8739215260566920524\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-02-18\",\n    \"fileName\" : \"salaries-2019-02.csv\",\n    \"userFullName\" : \"Davy Jones\",\n    \"uploadCompletedAt\" : \"2019-02-22T14:08:34Z\",\n    \"confidentialType\" : \"confidential type\"\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders URL pattern\n*/\nexport const BatchOrdersHttpServicePostBatchOrdersMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06\",\n  \"status\" : \"DRAFT\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId}/batch-payments URL pattern\n*/\nexport const BatchOrdersHttpServicePostBatchPaymentsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"cad9e668-15a4-44bf-832d-67e7b41387ac\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch order not found\",\n  \"errors\" : [ ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId}/approvals URL pattern\n*/\nexport const BatchOrdersHttpServicePutApprovalsByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/approvals\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"batchOrder\" : {\n    \"id\" : \"72d17d02-20a9-4f0b-b2b8-f83959eb187e\",\n    \"name\" : \"Salaries May 2019\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ENTERED\",\n    \"totalTransactionsCount\" : 6504,\n    \"totalCreditTransactionsCount\" : 6504,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"14009055.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"14009055.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Salaries account\",\n      \"identification\" : {\n        \"identification\" : \"NL78ABNA3470416656\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-05-26\",\n    \"approval\" : {\n      \"id\" : \"00b5ca29-eddd-49f4-a898-c3f185ab9a3a\",\n      \"userId\" : \"4840854b-0597-47a6-8984-87cb50f970eb\",\n      \"externalUserId\" : \"judi-miles\",\n      \"userFullName\" : \"Judi Miles\",\n      \"serviceAgreementId\" : \"ea7b3dfd-29b8-4559-872a-91f5576b56ef\",\n      \"itemId\" : \"72d17d02-20a9-4f0b-b2b8-f83959eb187e\",\n      \"dataAccessItemId\" : \"606c7afa-3c8a-4210-ad25-fc83893a4e49\",\n      \"resource\" : \"Batches\",\n      \"function\" : \"SEPACT\",\n      \"status\" : \"PENDING\",\n      \"createdAt\" : \"2019-08-10T18:09:21Z\",\n      \"records\" : [ ],\n      \"canApprove\" : true,\n      \"canReject\" : true,\n      \"finalApprover\" : false\n    }\n  },\n  \"approvalStatus\" : \"PENDING\"\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Limits has been breached, check the report for more details\",\n  \"checkTime\" : \"2019-10-31T12:12:12Z\",\n  \"breachReport\" : [ {\n    \"limitedEntity\" : [ {\n      \"ref\" : \"1234567-12312-123123\",\n      \"type\" : \"Service Agreement\",\n      \"description\" : \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n    } ],\n    \"shadow\" : false,\n    \"currency\" : \"EUR\",\n    \"user-BBID\" : \"oleksii\",\n    \"breachInfo\" : [ {\n      \"breachType\" : \"THRESHOLD\",\n      \"breachedLimitType\" : \"PERIODIC\",\n      \"timeframe\" : {\n        \"period\" : \"daily\",\n        \"startTime\" : \"2019-10-31T00:00:00Z\",\n        \"endTime\" : \"2019-10-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"250.0\",\n      \"currentThreshold\" : \"499.9\"\n    }, {\n      \"breachType\" : \"CONSUMPTION\",\n      \"timeframe\" : {\n        \"period\" : \"monthly\",\n        \"startTime\" : \"2019-10-01T00:00:00Z\",\n        \"endTime\" : \"2019-10-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"9950.0\",\n      \"currentThreshold\" : \"10000.0\"\n    } ]\n  }, {\n    \"user-BBID\" : \"oleksii\",\n    \"shadow\" : false,\n    \"currency\" : \"EUR\",\n    \"breachInfo\" : [ {\n      \"breachType\" : \"CONSUMPTION\",\n      \"timeframe\" : {\n        \"period\" : \"daily\",\n        \"startTime\" : \"2019-10-31T00:00:00Z\",\n        \"endTime\" : \"2019-10-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"500.0\",\n      \"currentThreshold\" : \"1000.0\"\n    } ]\n  }, {\n    \"limitedEntity\" : [ {\n      \"ref\" : \"1234567-12312-123123\",\n      \"type\" : \"Function Access Group\",\n      \"description\" : \"Batches approvers\"\n    }, {\n      \"ref\" : \"1234567-12312-123123\",\n      \"type\" : \"Function\",\n      \"description\" : \"Domestic batches\"\n    }, {\n      \"ref\" : \"Approve\",\n      \"type\" : \"Privilege\",\n      \"description\" : \"Approve\"\n    } ],\n    \"shadow\" : false,\n    \"currency\" : \"EUR\",\n    \"breachInfo\" : [ {\n      \"breachType\" : \"THRESHOLD\",\n      \"timeframe\" : {\n        \"period\" : \"daily\",\n        \"startTime\" : \"2019-10-31T00:00:00Z\",\n        \"endTime\" : \"2019-10-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"250.0\",\n      \"currentThreshold\" : \"499.9\"\n    } ]\n  }, {\n    \"limitedEntity\" : [ {\n      \"ref\" : \"1234567-12312-123123\",\n      \"type\" : \"Legal Entity\",\n      \"description\" : \"Kuhic, Gislason and Kemmer\"\n    } ],\n    \"shadow\" : false,\n    \"currency\" : \"EUR\",\n    \"breachInfo\" : [ {\n      \"breachType\" : \"CONSUMPTION\",\n      \"timeframe\" : {\n        \"period\" : \"quarterly\",\n        \"startTime\" : \"2019-10-01T00:00:00Z\",\n        \"endTime\" : \"2019-12-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"99950.0\",\n      \"currentThreshold\" : \"100000.0\"\n    } ]\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId} URL pattern\n*/\nexport const BatchOrdersHttpServicePutBatchPaymentByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"7dc95f0a-deba-47be-8f5d-6d0454ef271c\",\n  \"counterpartyName\" : \"Uriel Johnson\",\n  \"counterpartyAccountNumber\" : \"HU65109180019369738837536884\",\n  \"instructedAmount\" : {\n    \"amount\" : \"830.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"description\" : \"Order 00023162\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch order not found\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch payment not found\",\n  \"errors\" : [ ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-orders/{batchOrderId} URL pattern\n*/\nexport const BatchOrdersHttpServiceUpdateBatchOrderByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"f7e4f0bf-6080-46be-bd5d-7dad2b054495\",\n  \"name\" : \"Employee salaries\",\n  \"type\" : \"SEPACT\",\n  \"creditDebitMixedIndicator\" : \"CREDIT\",\n  \"status\" : \"CANCELLED\",\n  \"totalTransactionsCount\" : 120,\n  \"totalCreditTransactionsCount\" : 120,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"322038.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"totalCreditInstructedAmount\" : {\n    \"amount\" : \"322038.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"account\" : {\n    \"name\" : \"Main Current\",\n    \"identification\" : {\n      \"identification\" : \"NL54ABNA2366058993\",\n      \"schemeName\" : \"IBAN\"\n    }\n  },\n  \"requestedExecutionDate\" : \"2012-01-01\",\n  \"fileName\" : \"salaries-2020-01.csv\",\n  \"userFullName\" : \"John Davis\",\n  \"uploadCompletedAt\" : \"2019-12-31T23:55:31Z\",\n  \"canDelete\" : false,\n  \"canCancel\" : false,\n  \"approval\" : {\n    \"id\" : \"ac150312-1bec-4075-934f-23600886cb4e\",\n    \"userId\" : \"64350fcf-ddd1-4cdc-b725-f6c76f89f7c2\",\n    \"externalUserId\" : \"jdavis\",\n    \"userFullName\" : \"John Davis\",\n    \"serviceAgreementId\" : \"c94dc22f-381f-4127-a9f2-db2f5a314e41\",\n    \"itemId\" : \"f7e4f0bf-6080-46be-bd5d-7dad2b054495\",\n    \"dataAccessItemId\" : \"e8daae6b-0276-4533-b64d-e3c73afb47a0\",\n    \"resource\" : \"Batches\",\n    \"function\" : \"SEPACT\",\n    \"status\" : \"PENDING\",\n    \"createdAt\" : \"2019-12-31T23:56:08Z\",\n    \"records\" : [ {\n      \"id\" : \"9e61d96d-fea3-44a4-8903-88d95eb266a8\",\n      \"userId\" : \"f34feccc-0d0d-4365-982b-d6d1779e5aaf\",\n      \"externalUserId\" : \"twilliams\",\n      \"userFullName\" : \"Tobi Williams\",\n      \"approvalTypeId\" : \"16f655f3-3abf-438d-8351-2c667d5a3c86\",\n      \"status\" : \"APPROVED\",\n      \"createdAt\" : \"2019-12-31T23:57:20Z\"\n    } ],\n    \"canApprove\" : false,\n    \"canReject\" : false,\n    \"finalApprover\" : false\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.\",\n    \"key\" : \"BatchOrderCannotBeUpdated\",\n    \"context\" : {\n      \"requestedStatus\" : \"READY\",\n      \"expectedStatus\" : \"CANCELLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict\",\n  \"errors\" : [ {\n    \"message\" : \"The current status of the batch order ({{currentStatus}}) does not allow cancellation.\",\n    \"key\" : \"BatchOrderCannotBeCancelled\",\n    \"context\" : {\n      \"currentStatus\" : \"PROCESSED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict\",\n  \"errors\" : [ {\n    \"message\" : \"Only partially approved batch orders can be cancelled.\",\n    \"key\" : \"BatchOrderWithoutApprovalsCannotBeCancelled\"\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n\nexport const BatchOrdersHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch order not found\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch payment not found\",\n  \"errors\" : [ ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"batchOrders\" : [ {\n    \"id\" : \"2f3a6d96-f671-4f03-994d-8f6caaa53cab\",\n    \"name\" : \"Employee salaries\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ACCEPTED\",\n    \"totalTransactionsCount\" : 73500,\n    \"totalCreditTransactionsCount\" : 73500,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"2400123.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"2400123.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Main Current\",\n      \"identification\" : {\n        \"identification\" : \"CH8739215260566920524\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-02-18\",\n    \"canDelete\" : false,\n    \"canCancel\" : false\n  }, {\n    \"id\" : \"33295f9c-95ec-42f9-9817-64f7d48be023\",\n    \"name\" : \"Employee salaries\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ACCEPTED\",\n    \"totalTransactionsCount\" : 75930,\n    \"totalCreditTransactionsCount\" : 75930,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"2479474.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"2479474.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Main Current\",\n      \"identification\" : {\n        \"identification\" : \"CH8739215260566920524\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-03-18\",\n    \"canDelete\" : false,\n    \"canCancel\" : false\n  }, {\n    \"id\" : \"f3da0418-c801-4db1-ae52-597f1459b525\",\n    \"name\" : \"Employee salaries\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ENTERED\",\n    \"totalTransactionsCount\" : 78791,\n    \"totalCreditTransactionsCount\" : 78791,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"2552947.15\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"2552947.15\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Main Current\",\n      \"identification\" : {\n        \"identification\" : \"CH8739215260566920524\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-04-18\",\n    \"canDelete\" : true,\n    \"canCancel\" : false\n  } ],\n  \"totalBatchOrders\" : 3,\n  \"creditDebitMixedIndicator\" : \"CREDIT\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"batchOrders\" : [ {\n    \"id\" : \"a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71\",\n    \"name\" : \"Employees salaries May\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ENTERED\",\n    \"totalTransactionsCount\" : 71,\n    \"totalCreditTransactionsCount\" : 71,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"191056.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"191056.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Salaries Account\",\n      \"identification\" : {\n        \"identification\" : \"ST42353317399261373273497\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-05-27\",\n    \"approval\" : {\n      \"id\" : \"9bb143b1-bdb3-4ca5-9631-e02e743d6a10\",\n      \"userId\" : \"23b8a2ac-e8bb-46b1-98d2-a2da71dfd646\",\n      \"externalUserId\" : \"judi-miles\",\n      \"userFullName\" : \"Judi Miles\",\n      \"serviceAgreementId\" : \"e3e718d8-8f2e-4ef4-bf27-22580759b742\",\n      \"itemId\" : \"a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71\",\n      \"dataAccessItemId\" : \"ac59c1a1-3729-4514-8051-5015dd0aadef\",\n      \"resource\" : \"Batches\",\n      \"function\" : \"SEPACT\",\n      \"status\" : \"PENDING\",\n      \"createdAt\" : \"2019-05-10T10:29:10Z\",\n      \"records\" : [ ],\n      \"canApprove\" : true,\n      \"canReject\" : true,\n      \"finalApprover\" : true\n    },\n    \"canDelete\" : false,\n    \"canCancel\" : false\n  } ],\n  \"totalBatchOrders\" : 1,\n  \"creditDebitMixedIndicator\" : \"CREDIT\"\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"2f3a6d96-f671-4f03-994d-8f6caaa53cab\",\n  \"name\" : \"Employee salaries\",\n  \"type\" : \"SEPACT\",\n  \"creditDebitMixedIndicator\" : \"CREDIT\",\n  \"status\" : \"ACCEPTED\",\n  \"totalTransactionsCount\" : 73500,\n  \"totalCreditTransactionsCount\" : 73500,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"2400123.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"totalCreditInstructedAmount\" : {\n    \"amount\" : \"2400123.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"account\" : {\n    \"name\" : \"Main Current\",\n    \"identification\" : {\n      \"identification\" : \"CH8739215260566920524\",\n      \"schemeName\" : \"IBAN\"\n    }\n  },\n  \"requestedExecutionDate\" : \"2019-02-18\",\n  \"fileName\" : \"salaries-2019-02.csv\",\n  \"userFullName\" : \"Davy Jones\",\n  \"uploadCompletedAt\" : \"2019-02-22T14:08:34Z\",\n  \"canDelete\" : false,\n  \"canCancel\" : false\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"2fd15c69-c4da-4c58-986f-d46082057bf5\",\n  \"name\" : \"End of Q2 payments\",\n  \"type\" : \"SEPACT\",\n  \"status\" : \"ENTERED\",\n  \"totalTransactionsCount\" : 2109,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"280810.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"account\" : {\n    \"name\" : \"Main\",\n    \"identification\" : {\n      \"identification\" : \"NO0741575812927\",\n      \"schemeName\" : \"IBAN\"\n    }\n  },\n  \"requestedExecutionDate\" : \"2019-05-31\",\n  \"fileName\" : \"2019-Q2-payments.csv\",\n  \"userFullName\" : \"Tommy Perrotti\",\n  \"uploadCompletedAt\" : \"2019-05-16T14:09:30Z\",\n  \"approval\" : {\n    \"id\" : \"9966c07c-1547-42a5-9bc7-91986ff33993\",\n    \"userId\" : \"c3608888-faa3-4f23-9c5a-269dd39caea5\",\n    \"externalUserId\" : \"judi-miles\",\n    \"userFullName\" : \"Judi Miles\",\n    \"serviceAgreementId\" : \"64f538bf-3f5d-4dd9-8de7-ba7082da198d\",\n    \"itemId\" : \"2fd15c69-c4da-4c58-986f-d46082057bf5\",\n    \"dataAccessItemId\" : \"f094b702-e912-434c-8e49-12c56fc78551\",\n    \"resource\" : \"Batches\",\n    \"function\" : \"SEPACT\",\n    \"status\" : \"PENDING\",\n    \"createdAt\" : \"2019-05-16T14:09:40Z\",\n    \"records\" : [ {\n      \"id\" : \"9e61d96d-fea3-44a4-8903-88d95eb266a8\",\n      \"userId\" : \"f34feccc-0d0d-4365-982b-d6d1779e5aaf\",\n      \"externalUserId\" : \"bigWillie\",\n      \"userFullName\" : \"Willie Iles\",\n      \"approvalTypeId\" : \"ece87cfe-33f9-45a4-8c51-a04a9f905c66\",\n      \"status\" : \"APPROVED\",\n      \"createdAt\" : \"2019-05-17T13:44:02Z\"\n    } ],\n    \"canApprove\" : false,\n    \"canReject\" : false,\n    \"finalApprover\" : false\n  },\n  \"canDelete\" : false,\n  \"canCancel\" : true\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"b438751d-6e6a-4601-8009-a82fa22bddcc\",\n  \"name\" : \"Employee salaries\",\n  \"type\" : \"SEPACT\",\n  \"status\" : \"REJECTED\",\n  \"totalTransactionsCount\" : 9208,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"50343009.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"account\" : {\n    \"name\" : \"Main Account 8\",\n    \"identification\" : {\n      \"identification\" : \"NL18ABNA4956451237\",\n      \"schemeName\" : \"IBAN\"\n    }\n  },\n  \"requestedExecutionDate\" : \"2019-09-15\",\n  \"description\" : \"Salary Sep 2019\",\n  \"bankStatus\" : \"UNPROCESSABLE\",\n  \"reasonCode\" : \"RJ08\",\n  \"reasonText\" : \"Insufficient funds\",\n  \"errorDescription\" : \"Target account has not enough funds to execute batch payments\",\n  \"fileName\" : \"salaries-2019-02.csv\",\n  \"userFullName\" : \"Davy Jones\",\n  \"uploadCompletedAt\" : \"2019-02-22T14:08:34Z\",\n  \"canDelete\" : false,\n  \"canCancel\" : false\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"2f4c4bb6-c107-473a-adbd-7343b8f0ea80\",\n  \"name\" : \"Salaries 2020-12\",\n  \"type\" : \"ACH_CREDIT\",\n  \"status\" : \"ACCEPTED\",\n  \"totalTransactionsCount\" : 401,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"650980.25\",\n    \"currencyCode\" : \"USD\"\n  },\n  \"account\" : {\n    \"name\" : \"Current Account\",\n    \"identification\" : {\n      \"identification\" : \"7649373647\",\n      \"schemeName\" : \"BBAN\"\n    }\n  },\n  \"bankBranchCode\" : \"113105452\",\n  \"companyId\" : \"1800948594\",\n  \"companyName\" : \"Your Company\",\n  \"requestedExecutionDate\" : \"2020-12-18\",\n  \"fileName\" : \"salaries-2020-12.ach\",\n  \"userFullName\" : \"Ben Jones\",\n  \"uploadCompletedAt\" : \"2020-12-15T15:28:10Z\",\n  \"canDelete\" : false,\n  \"canCancel\" : false\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"counterpartyName\" : \"M. Frederiksen\",\n  \"counterpartyAccountNumber\" : \"DE49500105174361358418\",\n  \"instructedAmount\" : {\n    \"amount\" : \"5576.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"description\" : \"Salary Feb 2019 empl.no:068572\",\n  \"status\" : \"REJECTED\",\n  \"extendedDescription\" : \"Addenda record for the credit payment \\nAddenda record for the credit payment\",\n  \"bankStatus\" : \"UNPROCESSABLE\",\n  \"reasonCode\" : \"RJ05\",\n  \"reasonText\" : \"Rejected by counterparty bank\",\n  \"errorDescription\" : \"Target account has been closed.\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"batchPayments\" : [ {\n    \"counterpartyName\" : \"A. Hamers\",\n    \"counterpartyAccountNumber\" : \"NL62ABNA0609476343\",\n    \"instructedAmount\" : {\n      \"amount\" : \"4102.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:902713\",\n    \"extendedDescriptionSize\" : 99999\n  }, {\n    \"counterpartyName\" : \"E. Gutierrez\",\n    \"counterpartyAccountNumber\" : \"NL50ABNA4418364501\",\n    \"instructedAmount\" : {\n      \"amount\" : \"5287.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:256869\",\n    \"extendedDescriptionSize\" : 0\n  }, {\n    \"counterpartyName\" : \"C.M. McAlister\",\n    \"counterpartyAccountNumber\" : \"BE98735114499693\",\n    \"instructedAmount\" : {\n      \"amount\" : \"3398.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:100642\",\n    \"extendedDescriptionSize\" : 456768\n  }, {\n    \"counterpartyName\" : \"K.C. Bennis\",\n    \"counterpartyAccountNumber\" : \"NL67ABNA5515439724\",\n    \"instructedAmount\" : {\n      \"amount\" : \"4334.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:191872\",\n    \"extendedDescriptionSize\" : 0\n  }, {\n    \"counterpartyName\" : \"M. Frederiksen\",\n    \"counterpartyAccountNumber\" : \"DE49500105174361358418\",\n    \"instructedAmount\" : {\n      \"amount\" : \"5576.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"description\" : \"Salaray Feb 2019 empl.no:068572\",\n    \"extendedDescriptionSize\" : 123,\n    \"status\" : \"REJECTED\",\n    \"bankStatus\" : \"UNPROCESSABLE\",\n    \"reasonCode\" : \"RJ05\",\n    \"reasonText\" : \"Rejected by counterparty bank\",\n    \"errorDescription\" : \"Target account has been closed.\"\n  } ],\n  \"totalBatchPayments\" : 5,\n  \"batchOrder\" : {\n    \"id\" : \"2f3a6d96-f671-4f03-994d-8f6caaa53cab\",\n    \"name\" : \"Employee salaries\",\n    \"type\" : \"SEPACT\",\n    \"status\" : \"ACCEPTED\",\n    \"totalTransactionsCount\" : 5,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"2400123.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Main Current\",\n      \"identification\" : {\n        \"identification\" : \"CH8739215260566920524\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-02-18\",\n    \"fileName\" : \"salaries-2019-02.csv\",\n    \"userFullName\" : \"Davy Jones\",\n    \"uploadCompletedAt\" : \"2019-02-22T14:08:34Z\",\n    \"confidentialType\" : \"confidential type\"\n  }\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06\",\n  \"status\" : \"DRAFT\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"cad9e668-15a4-44bf-832d-67e7b41387ac\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch order not found\",\n  \"errors\" : [ ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/approvals\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"batchOrder\" : {\n    \"id\" : \"72d17d02-20a9-4f0b-b2b8-f83959eb187e\",\n    \"name\" : \"Salaries May 2019\",\n    \"type\" : \"SEPACT\",\n    \"creditDebitMixedIndicator\" : \"CREDIT\",\n    \"status\" : \"ENTERED\",\n    \"totalTransactionsCount\" : 6504,\n    \"totalCreditTransactionsCount\" : 6504,\n    \"totalInstructedAmount\" : {\n      \"amount\" : \"14009055.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"totalCreditInstructedAmount\" : {\n      \"amount\" : \"14009055.00\",\n      \"currencyCode\" : \"EUR\"\n    },\n    \"account\" : {\n      \"name\" : \"Salaries account\",\n      \"identification\" : {\n        \"identification\" : \"NL78ABNA3470416656\",\n        \"schemeName\" : \"IBAN\"\n      }\n    },\n    \"requestedExecutionDate\" : \"2019-05-26\",\n    \"approval\" : {\n      \"id\" : \"00b5ca29-eddd-49f4-a898-c3f185ab9a3a\",\n      \"userId\" : \"4840854b-0597-47a6-8984-87cb50f970eb\",\n      \"externalUserId\" : \"judi-miles\",\n      \"userFullName\" : \"Judi Miles\",\n      \"serviceAgreementId\" : \"ea7b3dfd-29b8-4559-872a-91f5576b56ef\",\n      \"itemId\" : \"72d17d02-20a9-4f0b-b2b8-f83959eb187e\",\n      \"dataAccessItemId\" : \"606c7afa-3c8a-4210-ad25-fc83893a4e49\",\n      \"resource\" : \"Batches\",\n      \"function\" : \"SEPACT\",\n      \"status\" : \"PENDING\",\n      \"createdAt\" : \"2019-08-10T18:09:21Z\",\n      \"records\" : [ ],\n      \"canApprove\" : true,\n      \"canReject\" : true,\n      \"finalApprover\" : false\n    }\n  },\n  \"approvalStatus\" : \"PENDING\"\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Limits has been breached, check the report for more details\",\n  \"checkTime\" : \"2019-10-31T12:12:12Z\",\n  \"breachReport\" : [ {\n    \"limitedEntity\" : [ {\n      \"ref\" : \"1234567-12312-123123\",\n      \"type\" : \"Service Agreement\",\n      \"description\" : \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n    } ],\n    \"shadow\" : false,\n    \"currency\" : \"EUR\",\n    \"user-BBID\" : \"oleksii\",\n    \"breachInfo\" : [ {\n      \"breachType\" : \"THRESHOLD\",\n      \"breachedLimitType\" : \"PERIODIC\",\n      \"timeframe\" : {\n        \"period\" : \"daily\",\n        \"startTime\" : \"2019-10-31T00:00:00Z\",\n        \"endTime\" : \"2019-10-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"250.0\",\n      \"currentThreshold\" : \"499.9\"\n    }, {\n      \"breachType\" : \"CONSUMPTION\",\n      \"timeframe\" : {\n        \"period\" : \"monthly\",\n        \"startTime\" : \"2019-10-01T00:00:00Z\",\n        \"endTime\" : \"2019-10-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"9950.0\",\n      \"currentThreshold\" : \"10000.0\"\n    } ]\n  }, {\n    \"user-BBID\" : \"oleksii\",\n    \"shadow\" : false,\n    \"currency\" : \"EUR\",\n    \"breachInfo\" : [ {\n      \"breachType\" : \"CONSUMPTION\",\n      \"timeframe\" : {\n        \"period\" : \"daily\",\n        \"startTime\" : \"2019-10-31T00:00:00Z\",\n        \"endTime\" : \"2019-10-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"500.0\",\n      \"currentThreshold\" : \"1000.0\"\n    } ]\n  }, {\n    \"limitedEntity\" : [ {\n      \"ref\" : \"1234567-12312-123123\",\n      \"type\" : \"Function Access Group\",\n      \"description\" : \"Batches approvers\"\n    }, {\n      \"ref\" : \"1234567-12312-123123\",\n      \"type\" : \"Function\",\n      \"description\" : \"Domestic batches\"\n    }, {\n      \"ref\" : \"Approve\",\n      \"type\" : \"Privilege\",\n      \"description\" : \"Approve\"\n    } ],\n    \"shadow\" : false,\n    \"currency\" : \"EUR\",\n    \"breachInfo\" : [ {\n      \"breachType\" : \"THRESHOLD\",\n      \"timeframe\" : {\n        \"period\" : \"daily\",\n        \"startTime\" : \"2019-10-31T00:00:00Z\",\n        \"endTime\" : \"2019-10-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"250.0\",\n      \"currentThreshold\" : \"499.9\"\n    } ]\n  }, {\n    \"limitedEntity\" : [ {\n      \"ref\" : \"1234567-12312-123123\",\n      \"type\" : \"Legal Entity\",\n      \"description\" : \"Kuhic, Gislason and Kemmer\"\n    } ],\n    \"shadow\" : false,\n    \"currency\" : \"EUR\",\n    \"breachInfo\" : [ {\n      \"breachType\" : \"CONSUMPTION\",\n      \"timeframe\" : {\n        \"period\" : \"quarterly\",\n        \"startTime\" : \"2019-10-01T00:00:00Z\",\n        \"endTime\" : \"2019-12-31T23:59:59Z\"\n      },\n      \"currentConsumption\" : \"99950.0\",\n      \"currentThreshold\" : \"100000.0\"\n    } ]\n  } ]\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"7dc95f0a-deba-47be-8f5d-6d0454ef271c\",\n  \"counterpartyName\" : \"Uriel Johnson\",\n  \"counterpartyAccountNumber\" : \"HU65109180019369738837536884\",\n  \"instructedAmount\" : {\n    \"amount\" : \"830.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"description\" : \"Order 00023162\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch order not found\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch payment not found\",\n  \"errors\" : [ ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-orders/{batchOrderId}\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"f7e4f0bf-6080-46be-bd5d-7dad2b054495\",\n  \"name\" : \"Employee salaries\",\n  \"type\" : \"SEPACT\",\n  \"creditDebitMixedIndicator\" : \"CREDIT\",\n  \"status\" : \"CANCELLED\",\n  \"totalTransactionsCount\" : 120,\n  \"totalCreditTransactionsCount\" : 120,\n  \"totalInstructedAmount\" : {\n    \"amount\" : \"322038.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"totalCreditInstructedAmount\" : {\n    \"amount\" : \"322038.00\",\n    \"currencyCode\" : \"EUR\"\n  },\n  \"account\" : {\n    \"name\" : \"Main Current\",\n    \"identification\" : {\n      \"identification\" : \"NL54ABNA2366058993\",\n      \"schemeName\" : \"IBAN\"\n    }\n  },\n  \"requestedExecutionDate\" : \"2012-01-01\",\n  \"fileName\" : \"salaries-2020-01.csv\",\n  \"userFullName\" : \"John Davis\",\n  \"uploadCompletedAt\" : \"2019-12-31T23:55:31Z\",\n  \"canDelete\" : false,\n  \"canCancel\" : false,\n  \"approval\" : {\n    \"id\" : \"ac150312-1bec-4075-934f-23600886cb4e\",\n    \"userId\" : \"64350fcf-ddd1-4cdc-b725-f6c76f89f7c2\",\n    \"externalUserId\" : \"jdavis\",\n    \"userFullName\" : \"John Davis\",\n    \"serviceAgreementId\" : \"c94dc22f-381f-4127-a9f2-db2f5a314e41\",\n    \"itemId\" : \"f7e4f0bf-6080-46be-bd5d-7dad2b054495\",\n    \"dataAccessItemId\" : \"e8daae6b-0276-4533-b64d-e3c73afb47a0\",\n    \"resource\" : \"Batches\",\n    \"function\" : \"SEPACT\",\n    \"status\" : \"PENDING\",\n    \"createdAt\" : \"2019-12-31T23:56:08Z\",\n    \"records\" : [ {\n      \"id\" : \"9e61d96d-fea3-44a4-8903-88d95eb266a8\",\n      \"userId\" : \"f34feccc-0d0d-4365-982b-d6d1779e5aaf\",\n      \"externalUserId\" : \"twilliams\",\n      \"userFullName\" : \"Tobi Williams\",\n      \"approvalTypeId\" : \"16f655f3-3abf-438d-8351-2c667d5a3c86\",\n      \"status\" : \"APPROVED\",\n      \"createdAt\" : \"2019-12-31T23:57:20Z\"\n    } ],\n    \"canApprove\" : false,\n    \"canReject\" : false,\n    \"finalApprover\" : false\n  }\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.\",\n    \"key\" : \"BatchOrderCannotBeUpdated\",\n    \"context\" : {\n      \"requestedStatus\" : \"READY\",\n      \"expectedStatus\" : \"CANCELLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict\",\n  \"errors\" : [ {\n    \"message\" : \"The current status of the batch order ({{currentStatus}}) does not allow cancellation.\",\n    \"key\" : \"BatchOrderCannotBeCancelled\",\n    \"context\" : {\n      \"currentStatus\" : \"PROCESSED\"\n    }\n  } ]\n}\n            },\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict\",\n  \"errors\" : [ {\n    \"message\" : \"Only partially approved batch orders can be cancelled.\",\n    \"key\" : \"BatchOrderWithoutApprovalsCannotBeCancelled\"\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n]\n);\n\n\n","/**\n * Batches client\n * Upload batch files and manage batch orders.\n *\n * The version of the OpenAPI document: 2.7.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { BatchUploadGetResponse } from '../model/models';\nimport { BatchUploadPutRequest } from '../model/models';\nimport { BatchUploadPutResponse } from '../model/models';\nimport { BatchUploadsGetResponse } from '../model/models';\nimport { ConflictError } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { StartUploadBatchOrdersPostRequest } from '../model/models';\nimport { StartUploadBatchOrdersPostResponse } from '../model/models';\nimport { UploadBatchOrdersPostResponse } from '../model/models';\n\nimport { PAYMENT_BATCH_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { PaymentBatchConfiguration }                                     from '../configuration';\n\n\nexport interface CreateBatchOrdersForIdRequestParams {\n    /** No description available */\n    [\"batchUploadId\"]: string;\n    /** An optional type to identify if the whole batch is confidential */\n    [\"confidentialType\"]?: string;\n    /** The file to be uploaded contains one or more batches according to any structured format known by the implementing service. */\n    [\"file\"]?: Blob;\n}\n\nexport interface DeleteBatchUploadByIdRequestParams {\n    /** No description available */\n    [\"batchUploadId\"]: string;\n}\n\nexport interface GetBatchUploadByIdRequestParams {\n    /** No description available */\n    [\"batchUploadId\"]: string;\n}\n\nexport interface GetBatchUploadsRequestParams {\n    /** Page Number. Skip over pages of elements by specifying a start value for the query */\n    [\"from\"]?: number;\n    /** Record UUID. As an alternative for specifying \\&#39;from\\&#39; this allows to point to the record to start the selection from.  */\n    [\"cursor\"]?: string;\n    /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */\n    [\"size\"]?: number;\n}\n\nexport interface PutBatchUploadIdByBatchUploadIdRequestParams {\n    /** No description available */\n    [\"batchUploadId\"]: string;\n    /** Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated. */\n    [\"batchUploadPutRequest\"]: BatchUploadPutRequest;\n}\n\nexport interface StartBatchUploadRequestParams {\n    /** Start upload process to obtain a batch upload id to be used for the actual file upload */\n    [\"startUploadBatchOrdersPostRequest\"]: StartUploadBatchOrdersPostRequest;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatchUploadsHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new PaymentBatchConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(PAYMENT_BATCH_BASE_PATH) basePath: string, @Optional() configuration: PaymentBatchConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Upload new batch file.\n     * Upload new batch file\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createBatchOrdersForId(requestParameters: CreateBatchOrdersForIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UploadBatchOrdersPostResponse>;\n    /**\n     * Upload new batch file.\n     * Upload new batch file\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createBatchOrdersForId(requestParameters: CreateBatchOrdersForIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UploadBatchOrdersPostResponse>>;\n    /**\n     * Upload new batch file.\n     * Upload new batch file\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createBatchOrdersForId(requestParameters: CreateBatchOrdersForIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UploadBatchOrdersPostResponse>>;\n    /**\n     * Upload new batch file.\n     * Upload new batch file\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createBatchOrdersForId(requestParameters: CreateBatchOrdersForIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchUploadId = requestParameters[\"batchUploadId\"];\n        if (_batchUploadId === null || _batchUploadId === undefined) {\n            throw new Error('Required parameter batchUploadId was null or undefined when calling createBatchOrdersForId.');\n        }\n        const _confidentialType = requestParameters[\"confidentialType\"];\n        const _file = requestParameters[\"file\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_confidentialType !== undefined && _confidentialType !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_confidentialType, 'confidentialType');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): any; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: this.encoder});\n        }\n\n        if (_file !== undefined) {\n            formParams = formParams.append('file', <any>_file) as any || formParams;\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<UploadBatchOrdersPostResponse>(`${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}/batch-orders`,\n            convertFormParamsToString ? formParams.toString() : formParams,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public createBatchOrdersForIdUrl(requestParameters: CreateBatchOrdersForIdRequestParams): string {\n        const _batchUploadId = requestParameters[\"batchUploadId\"];\n        if (_batchUploadId === null || _batchUploadId === undefined) {\n            throw new Error('Required parameter batchUploadId was null or undefined when calling createBatchOrdersForId.');\n        }\n        const _confidentialType = requestParameters[\"confidentialType\"];\n        const _file = requestParameters[\"file\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_confidentialType !== undefined && _confidentialType !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_confidentialType, 'confidentialType');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}/batch-orders${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Deletes batch upload. Only batch uploads that were created by the user and are in status DUPLICATE or FAILED are eligible for deletion.\n     * Deletes batch upload. Only batch uploads that were created by the user and are in status DUPLICATE or FAILED are eligible for deletion.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchUploadById(requestParameters: DeleteBatchUploadByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Deletes batch upload. Only batch uploads that were created by the user and are in status DUPLICATE or FAILED are eligible for deletion.\n     * Deletes batch upload. Only batch uploads that were created by the user and are in status DUPLICATE or FAILED are eligible for deletion.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchUploadById(requestParameters: DeleteBatchUploadByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Deletes batch upload. Only batch uploads that were created by the user and are in status DUPLICATE or FAILED are eligible for deletion.\n     * Deletes batch upload. Only batch uploads that were created by the user and are in status DUPLICATE or FAILED are eligible for deletion.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchUploadById(requestParameters: DeleteBatchUploadByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Deletes batch upload. Only batch uploads that were created by the user and are in status DUPLICATE or FAILED are eligible for deletion.\n     * Deletes batch upload. Only batch uploads that were created by the user and are in status DUPLICATE or FAILED are eligible for deletion.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchUploadById(requestParameters: DeleteBatchUploadByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchUploadId = requestParameters[\"batchUploadId\"];\n        if (_batchUploadId === null || _batchUploadId === undefined) {\n            throw new Error('Required parameter batchUploadId was null or undefined when calling deleteBatchUploadById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deleteBatchUploadByIdUrl(requestParameters: DeleteBatchUploadByIdRequestParams): string {\n        const _batchUploadId = requestParameters[\"batchUploadId\"];\n        if (_batchUploadId === null || _batchUploadId === undefined) {\n            throw new Error('Required parameter batchUploadId was null or undefined when calling deleteBatchUploadById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`;\n    }\n\n    /**\n     * Get details of a batch upload. For example this operation can be called during upload to monitor progress.\n     * Get details of a batch upload. For example this operation can be called during upload to monitor progress.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchUploadById(requestParameters: GetBatchUploadByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchUploadGetResponse>;\n    /**\n     * Get details of a batch upload. For example this operation can be called during upload to monitor progress.\n     * Get details of a batch upload. For example this operation can be called during upload to monitor progress.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchUploadById(requestParameters: GetBatchUploadByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchUploadGetResponse>>;\n    /**\n     * Get details of a batch upload. For example this operation can be called during upload to monitor progress.\n     * Get details of a batch upload. For example this operation can be called during upload to monitor progress.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchUploadById(requestParameters: GetBatchUploadByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchUploadGetResponse>>;\n    /**\n     * Get details of a batch upload. For example this operation can be called during upload to monitor progress.\n     * Get details of a batch upload. For example this operation can be called during upload to monitor progress.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchUploadById(requestParameters: GetBatchUploadByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchUploadId = requestParameters[\"batchUploadId\"];\n        if (_batchUploadId === null || _batchUploadId === undefined) {\n            throw new Error('Required parameter batchUploadId was null or undefined when calling getBatchUploadById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BatchUploadGetResponse>(`${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getBatchUploadByIdUrl(requestParameters: GetBatchUploadByIdRequestParams): string {\n        const _batchUploadId = requestParameters[\"batchUploadId\"];\n        if (_batchUploadId === null || _batchUploadId === undefined) {\n            throw new Error('Required parameter batchUploadId was null or undefined when calling getBatchUploadById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`;\n    }\n\n    /**\n     * Retrieve a list of files uploaded by the logged in user.\n     * Retrieve a list of files uploaded by the logged in user\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchUploads(requestParameters: GetBatchUploadsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchUploadsGetResponse>;\n    /**\n     * Retrieve a list of files uploaded by the logged in user.\n     * Retrieve a list of files uploaded by the logged in user\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchUploads(requestParameters: GetBatchUploadsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchUploadsGetResponse>>;\n    /**\n     * Retrieve a list of files uploaded by the logged in user.\n     * Retrieve a list of files uploaded by the logged in user\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchUploads(requestParameters: GetBatchUploadsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchUploadsGetResponse>>;\n    /**\n     * Retrieve a list of files uploaded by the logged in user.\n     * Retrieve a list of files uploaded by the logged in user\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchUploads(requestParameters: GetBatchUploadsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BatchUploadsGetResponse>(`${this.configuration.basePath}/client-api/v2/batch-uploads`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getBatchUploadsUrl(requestParameters: GetBatchUploadsRequestParams): string {\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/batch-uploads${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated.\n     * Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchUploadIdByBatchUploadId(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchUploadPutResponse>;\n    /**\n     * Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated.\n     * Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchUploadIdByBatchUploadId(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchUploadPutResponse>>;\n    /**\n     * Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated.\n     * Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchUploadIdByBatchUploadId(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchUploadPutResponse>>;\n    /**\n     * Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated.\n     * Updates batch upload status. The only valid transition is changing from DUPLICATE to DONE. Only the batch uploads that were created by the user can be updated.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchUploadIdByBatchUploadId(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchUploadId = requestParameters[\"batchUploadId\"];\n        if (_batchUploadId === null || _batchUploadId === undefined) {\n            throw new Error('Required parameter batchUploadId was null or undefined when calling putBatchUploadIdByBatchUploadId.');\n        }\n        const _batchUploadPutRequest = requestParameters[\"batchUploadPutRequest\"];\n        if (_batchUploadPutRequest === null || _batchUploadPutRequest === undefined) {\n            throw new Error('Required parameter batchUploadPutRequest was null or undefined when calling putBatchUploadIdByBatchUploadId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<BatchUploadPutResponse>(`${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`,\n            _batchUploadPutRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public putBatchUploadIdByBatchUploadIdUrl(requestParameters: PutBatchUploadIdByBatchUploadIdRequestParams): string {\n        const _batchUploadId = requestParameters[\"batchUploadId\"];\n        if (_batchUploadId === null || _batchUploadId === undefined) {\n            throw new Error('Required parameter batchUploadId was null or undefined when calling putBatchUploadIdByBatchUploadId.');\n        }\n        const _batchUploadPutRequest = requestParameters[\"batchUploadPutRequest\"];\n        if (_batchUploadPutRequest === null || _batchUploadPutRequest === undefined) {\n            throw new Error('Required parameter batchUploadPutRequest was null or undefined when calling putBatchUploadIdByBatchUploadId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`;\n    }\n\n    /**\n     * Start upload process to obtain a batch upload id to be used for the actual file upload.\n     * Start upload process to obtain a batch upload id to be used for the actual file upload\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public startBatchUpload(requestParameters: StartBatchUploadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<StartUploadBatchOrdersPostResponse>;\n    /**\n     * Start upload process to obtain a batch upload id to be used for the actual file upload.\n     * Start upload process to obtain a batch upload id to be used for the actual file upload\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public startBatchUpload(requestParameters: StartBatchUploadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<StartUploadBatchOrdersPostResponse>>;\n    /**\n     * Start upload process to obtain a batch upload id to be used for the actual file upload.\n     * Start upload process to obtain a batch upload id to be used for the actual file upload\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public startBatchUpload(requestParameters: StartBatchUploadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<StartUploadBatchOrdersPostResponse>>;\n    /**\n     * Start upload process to obtain a batch upload id to be used for the actual file upload.\n     * Start upload process to obtain a batch upload id to be used for the actual file upload\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public startBatchUpload(requestParameters: StartBatchUploadRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _startUploadBatchOrdersPostRequest = requestParameters[\"startUploadBatchOrdersPostRequest\"];\n        if (_startUploadBatchOrdersPostRequest === null || _startUploadBatchOrdersPostRequest === undefined) {\n            throw new Error('Required parameter startUploadBatchOrdersPostRequest was null or undefined when calling startBatchUpload.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<StartUploadBatchOrdersPostResponse>(`${this.configuration.basePath}/client-api/v2/batch-uploads`,\n            _startUploadBatchOrdersPostRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public startBatchUploadUrl(requestParameters: StartBatchUploadRequestParams): string {\n        const _startUploadBatchOrdersPostRequest = requestParameters[\"startUploadBatchOrdersPostRequest\"];\n        if (_startUploadBatchOrdersPostRequest === null || _startUploadBatchOrdersPostRequest === undefined) {\n            throw new Error('Required parameter startUploadBatchOrdersPostRequest was null or undefined when calling startBatchUpload.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/batch-uploads`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v2/batch-uploads/{batchUploadId}/batch-orders URL pattern\n*/\nexport const BatchUploadsHttpServiceCreateBatchOrdersForIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-uploads/{batchUploadId}/batch-orders\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 202,\n                    body: {\n  \"id\" : \"b51c4261-54c9-42e5-b5ae-4c1390b890d8\",\n  \"status\" : \"DONE\",\n  \"totalBatchOrdersCount\" : 3,\n  \"totalTransactionsCount\" : 10211,\n  \"size\" : 94371840,\n  \"uploadedSize\" : 94371840\n}\n                },\n                {\n                    status: 202,\n                    body: {\n  \"id\" : \"0288dde3-9b89-4997-9e57-54684bf3c3c1\",\n  \"status\" : \"DUPLICATE\",\n  \"totalBatchOrdersCount\" : 3,\n  \"totalTransactionsCount\" : 10211,\n  \"size\" : 94371840,\n  \"uploadedSize\" : 94371840\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"The request was rejected because its size exceeds the configured maximum ({{maxSize}})\",\n    \"key\" : \"UploadExceedsMaxSize\",\n    \"context\" : {\n      \"maxSize\" : \"104857600\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"Total amount of batch ({{actual}}) does not match the expected amount ({{expected}})\",\n    \"key\" : \"TotalAmountMismatch\",\n    \"context\" : {\n      \"actual\" : \"2400123.00\",\n      \"expected\" : \"2398675.00\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"Total number of batches ({{actual}}) does not match the expected number ({{expected}})\",\n    \"key\" : \"TotalBatchMismatch\",\n    \"context\" : {\n      \"actual\" : \"3\",\n      \"expected\" : \"4\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"The integer part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of digits {{maximum}}\",\n    \"key\" : \"AmountContainsTooManyDigits\",\n    \"context\" : {\n      \"amount\" : \"1234567890123456789.123456\",\n      \"fieldName\" : \"batchTotalAmount\",\n      \"maximum\" : \"18\"\n    }\n  }, {\n    \"message\" : \"The fractional part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of decimal digits {{maximum}}\",\n    \"key\" : \"AmountContainsTooManyDecimalDigits\",\n    \"context\" : {\n      \"amount\" : \"1234567890123456789.123456\",\n      \"fieldName\" : \"batchTotalAmount\",\n      \"maximum\" : \"5\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-uploads/{batchUploadId} URL pattern\n*/\nexport const BatchUploadsHttpServiceDeleteBatchUploadByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-uploads/{batchUploadId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict\",\n  \"errors\" : [ {\n    \"message\" : \"The current status of the batch upload ({{currentStatus}}) does not allow deleting the batch upload.\",\n    \"key\" : \"BatchUploadCannotBeDeleted\",\n    \"context\" : {\n      \"currentStatus\" : \"OPEN\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-uploads/{batchUploadId} URL pattern\n*/\nexport const BatchUploadsHttpServiceGetBatchUploadByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-uploads/{batchUploadId}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"OPEN\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-02.csv\",\n    \"size\" : 94371840,\n    \"uploadedSize\" : 18874368\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 3,\n  \"createdAt\" : \"2019-02-22T13:44:02Z\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"OPEN\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-02.csv\",\n    \"size\" : 94371840,\n    \"uploadedSize\" : 42467328\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 3,\n  \"createdAt\" : \"2019-02-22T13:44:02Z\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"OPEN\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-02.csv\",\n    \"size\" : 94371840,\n    \"uploadedSize\" : 70778880\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 3,\n  \"createdAt\" : \"2019-02-22T13:44:02Z\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"UPLOADED\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-02.csv\",\n    \"size\" : 94371840,\n    \"uploadedSize\" : 94371840\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 3,\n  \"createdAt\" : \"2019-02-22T13:44:02Z\",\n  \"completedAt\" : \"2019-02-22T14:08:34Z\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"DONE\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-12.csv\",\n    \"size\" : 54371840,\n    \"uploadedSize\" : 54371840,\n    \"lastModified\" : \"2019-12-22T08:06:00Z\"\n  },\n  \"digest\" : {\n    \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n    \"algorithm\" : \"SHA-256\"\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 1,\n  \"createdAt\" : \"2019-12-24T07:09:33Z\",\n  \"completedAt\" : \"2019-12-24T07:11:09Z\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"3650f774-2a95-4bfb-9f00-1c58fc1af0c6\",\n  \"status\" : \"DUPLICATE\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-12.csv\",\n    \"size\" : 54371840,\n    \"uploadedSize\" : 54371840,\n    \"lastModified\" : \"2019-12-22T08:06:00Z\"\n  },\n  \"digest\" : {\n    \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n    \"algorithm\" : \"SHA-256\"\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 1,\n  \"createdAt\" : \"2019-12-28T09:11:13Z\",\n  \"completedAt\" : \"2019-12-28T09:13:23Z\",\n  \"duplicates\" : [ {\n    \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n    \"status\" : \"DONE\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-12.csv\",\n      \"size\" : 54371840,\n      \"uploadedSize\" : 54371840,\n      \"lastModified\" : \"2019-12-22T08:06:00Z\"\n    },\n    \"digest\" : {\n      \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n      \"algorithm\" : \"SHA-256\"\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 1,\n    \"createdAt\" : \"2019-12-24T07:09:33Z\",\n    \"completedAt\" : \"2019-12-24T07:11:09Z\"\n  } ],\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"80467759-0178-4231-af61-003bf1bc842b\",\n  \"totalBatchOrdersCount\" : 3,\n  \"size\" : 94371840,\n  \"uploadedSize\" : 94371840,\n  \"status\" : \"FAILED\",\n  \"errors\" : [ {\n    \"message\" : \"The actual total amount ({{totalAmount}}) does not match the expected total amount ({{headerTotalAmount}})\",\n    \"key\" : \"TotalAmountMismatch\",\n    \"context\" : {\n      \"totalAmount\" : \"2400123.00\",\n      \"headerTotalAmount\" : \"2398675.00\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"9151b4d0-f058-4b01-8bed-474dfc34831e\",\n  \"totalBatchOrdersCount\" : 4,\n  \"size\" : 94371840,\n  \"uploadedSize\" : 94371840,\n  \"status\" : \"FAILED\",\n  \"errors\" : [ {\n    \"message\" : \"Total number of batches ({{actual}}) does not match the expected number ({{expected}})\",\n    \"key\" : \"TotalBatchMismatch\",\n    \"context\" : {\n      \"actual\" : \"3\",\n      \"expected\" : \"4\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-uploads URL pattern\n*/\nexport const BatchUploadsHttpServiceGetBatchUploadsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-uploads\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"batchUploads\" : [ {\n    \"id\" : \"3d0e77b1-08fc-490d-898c-694169c76a2f\",\n    \"status\" : \"FAILED\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-02.csv\",\n      \"size\" : 94370816\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 3,\n    \"createdAt\" : \"2019-02-22T13:14:37Z\"\n  }, {\n    \"id\" : \"82c85c38-35af-4fa8-87e5-d8374937cac2\",\n    \"status\" : \"DONE\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-02.csv\",\n      \"size\" : 94371840,\n      \"uploadedSize\" : 94371840,\n      \"lastModified\" : \"2019-12-22T08:06:00Z\"\n    },\n    \"digest\" : {\n      \"value\" : \"d6099d20c5866e317bebbc69cc0eb681\",\n      \"algorithm\" : \"MD5\"\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 3,\n    \"createdAt\" : \"2019-02-22T13:44:02Z\",\n    \"completedAt\" : \"2019-02-22T14:08:34Z\"\n  }, {\n    \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n    \"status\" : \"DONE\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-12.csv\",\n      \"size\" : 54371840,\n      \"uploadedSize\" : 54371840,\n      \"lastModified\" : \"2019-12-22T08:06:00Z\"\n    },\n    \"digest\" : {\n      \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n      \"algorithm\" : \"SHA-256\"\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 1,\n    \"createdAt\" : \"2019-12-24T07:09:33Z\",\n    \"completedAt\" : \"2019-12-24T07:11:09Z\"\n  }, {\n    \"id\" : \"3650f774-2a95-4bfb-9f00-1c58fc1af0c6\",\n    \"status\" : \"DUPLICATE\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-12.csv\",\n      \"size\" : 54371840,\n      \"uploadedSize\" : 54371840,\n      \"lastModified\" : \"2019-12-22T08:06:00Z\"\n    },\n    \"digest\" : {\n      \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n      \"algorithm\" : \"SHA-256\"\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 1,\n    \"createdAt\" : \"2019-12-28T09:11:13Z\",\n    \"completedAt\" : \"2019-12-28T09:13:23Z\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-uploads/{batchUploadId} URL pattern\n*/\nexport const BatchUploadsHttpServicePutBatchUploadIdByBatchUploadIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-uploads/{batchUploadId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.\",\n    \"key\" : \"BatchUploadCannotBeUpdated\",\n    \"context\" : {\n      \"requestedStatus\" : \"OPEN\",\n      \"expectedStatus\" : \"DONE\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict\",\n  \"errors\" : [ {\n    \"message\" : \"The current status of the batch upload ({{currentStatus}}) does not allow updating the status.\",\n    \"key\" : \"BatchUploadCannotBeUpdated\",\n    \"context\" : {\n      \"currentStatus\" : \"OPEN\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/batch-uploads URL pattern\n*/\nexport const BatchUploadsHttpServiceStartBatchUploadMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/batch-uploads\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 202,\n                    body: {\n  \"batchUploadId\" : \"5490bc83-9ea1-4b28-a465-2bb541e7c90b\",\n  \"status\" : \"OPEN\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"File extension ({{actual}}) is not one of the supported ones {{expected}}\",\n    \"key\" : \"UploadFileExtensionInvalid\",\n    \"context\" : {\n      \"actual\" : \"xls\",\n      \"expected\" : \"{csv}\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"File size ({{actual}}) exceeds the configured maximum ({{expected}})\",\n    \"key\" : \"UploadMaxFileSize\",\n    \"context\" : {\n      \"actual\" : \"115343360\",\n      \"expected\" : \"104857600\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n\nexport const BatchUploadsHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v2/batch-uploads/{batchUploadId}/batch-orders\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 202,\n                body: {\n  \"id\" : \"b51c4261-54c9-42e5-b5ae-4c1390b890d8\",\n  \"status\" : \"DONE\",\n  \"totalBatchOrdersCount\" : 3,\n  \"totalTransactionsCount\" : 10211,\n  \"size\" : 94371840,\n  \"uploadedSize\" : 94371840\n}\n            },\n            {\n                status: 202,\n                body: {\n  \"id\" : \"0288dde3-9b89-4997-9e57-54684bf3c3c1\",\n  \"status\" : \"DUPLICATE\",\n  \"totalBatchOrdersCount\" : 3,\n  \"totalTransactionsCount\" : 10211,\n  \"size\" : 94371840,\n  \"uploadedSize\" : 94371840\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"The request was rejected because its size exceeds the configured maximum ({{maxSize}})\",\n    \"key\" : \"UploadExceedsMaxSize\",\n    \"context\" : {\n      \"maxSize\" : \"104857600\"\n    }\n  } ]\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"Total amount of batch ({{actual}}) does not match the expected amount ({{expected}})\",\n    \"key\" : \"TotalAmountMismatch\",\n    \"context\" : {\n      \"actual\" : \"2400123.00\",\n      \"expected\" : \"2398675.00\"\n    }\n  } ]\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"Total number of batches ({{actual}}) does not match the expected number ({{expected}})\",\n    \"key\" : \"TotalBatchMismatch\",\n    \"context\" : {\n      \"actual\" : \"3\",\n      \"expected\" : \"4\"\n    }\n  } ]\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"The integer part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of digits {{maximum}}\",\n    \"key\" : \"AmountContainsTooManyDigits\",\n    \"context\" : {\n      \"amount\" : \"1234567890123456789.123456\",\n      \"fieldName\" : \"batchTotalAmount\",\n      \"maximum\" : \"18\"\n    }\n  }, {\n    \"message\" : \"The fractional part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of decimal digits {{maximum}}\",\n    \"key\" : \"AmountContainsTooManyDecimalDigits\",\n    \"context\" : {\n      \"amount\" : \"1234567890123456789.123456\",\n      \"fieldName\" : \"batchTotalAmount\",\n      \"maximum\" : \"5\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-uploads/{batchUploadId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict\",\n  \"errors\" : [ {\n    \"message\" : \"The current status of the batch upload ({{currentStatus}}) does not allow deleting the batch upload.\",\n    \"key\" : \"BatchUploadCannotBeDeleted\",\n    \"context\" : {\n      \"currentStatus\" : \"OPEN\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-uploads/{batchUploadId}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"OPEN\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-02.csv\",\n    \"size\" : 94371840,\n    \"uploadedSize\" : 18874368\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 3,\n  \"createdAt\" : \"2019-02-22T13:44:02Z\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"OPEN\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-02.csv\",\n    \"size\" : 94371840,\n    \"uploadedSize\" : 42467328\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 3,\n  \"createdAt\" : \"2019-02-22T13:44:02Z\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"OPEN\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-02.csv\",\n    \"size\" : 94371840,\n    \"uploadedSize\" : 70778880\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 3,\n  \"createdAt\" : \"2019-02-22T13:44:02Z\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"UPLOADED\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-02.csv\",\n    \"size\" : 94371840,\n    \"uploadedSize\" : 94371840\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 3,\n  \"createdAt\" : \"2019-02-22T13:44:02Z\",\n  \"completedAt\" : \"2019-02-22T14:08:34Z\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n  \"status\" : \"DONE\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-12.csv\",\n    \"size\" : 54371840,\n    \"uploadedSize\" : 54371840,\n    \"lastModified\" : \"2019-12-22T08:06:00Z\"\n  },\n  \"digest\" : {\n    \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n    \"algorithm\" : \"SHA-256\"\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 1,\n  \"createdAt\" : \"2019-12-24T07:09:33Z\",\n  \"completedAt\" : \"2019-12-24T07:11:09Z\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"3650f774-2a95-4bfb-9f00-1c58fc1af0c6\",\n  \"status\" : \"DUPLICATE\",\n  \"file\" : {\n    \"name\" : \"salaries-2019-12.csv\",\n    \"size\" : 54371840,\n    \"uploadedSize\" : 54371840,\n    \"lastModified\" : \"2019-12-22T08:06:00Z\"\n  },\n  \"digest\" : {\n    \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n    \"algorithm\" : \"SHA-256\"\n  },\n  \"batchFileType\" : \"BB_SEPACT_CSV\",\n  \"totalBatchOrdersCount\" : 1,\n  \"createdAt\" : \"2019-12-28T09:11:13Z\",\n  \"completedAt\" : \"2019-12-28T09:13:23Z\",\n  \"duplicates\" : [ {\n    \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n    \"status\" : \"DONE\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-12.csv\",\n      \"size\" : 54371840,\n      \"uploadedSize\" : 54371840,\n      \"lastModified\" : \"2019-12-22T08:06:00Z\"\n    },\n    \"digest\" : {\n      \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n      \"algorithm\" : \"SHA-256\"\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 1,\n    \"createdAt\" : \"2019-12-24T07:09:33Z\",\n    \"completedAt\" : \"2019-12-24T07:11:09Z\"\n  } ],\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"80467759-0178-4231-af61-003bf1bc842b\",\n  \"totalBatchOrdersCount\" : 3,\n  \"size\" : 94371840,\n  \"uploadedSize\" : 94371840,\n  \"status\" : \"FAILED\",\n  \"errors\" : [ {\n    \"message\" : \"The actual total amount ({{totalAmount}}) does not match the expected total amount ({{headerTotalAmount}})\",\n    \"key\" : \"TotalAmountMismatch\",\n    \"context\" : {\n      \"totalAmount\" : \"2400123.00\",\n      \"headerTotalAmount\" : \"2398675.00\"\n    }\n  } ]\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"id\" : \"9151b4d0-f058-4b01-8bed-474dfc34831e\",\n  \"totalBatchOrdersCount\" : 4,\n  \"size\" : 94371840,\n  \"uploadedSize\" : 94371840,\n  \"status\" : \"FAILED\",\n  \"errors\" : [ {\n    \"message\" : \"Total number of batches ({{actual}}) does not match the expected number ({{expected}})\",\n    \"key\" : \"TotalBatchMismatch\",\n    \"context\" : {\n      \"actual\" : \"3\",\n      \"expected\" : \"4\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-uploads\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"batchUploads\" : [ {\n    \"id\" : \"3d0e77b1-08fc-490d-898c-694169c76a2f\",\n    \"status\" : \"FAILED\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-02.csv\",\n      \"size\" : 94370816\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 3,\n    \"createdAt\" : \"2019-02-22T13:14:37Z\"\n  }, {\n    \"id\" : \"82c85c38-35af-4fa8-87e5-d8374937cac2\",\n    \"status\" : \"DONE\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-02.csv\",\n      \"size\" : 94371840,\n      \"uploadedSize\" : 94371840,\n      \"lastModified\" : \"2019-12-22T08:06:00Z\"\n    },\n    \"digest\" : {\n      \"value\" : \"d6099d20c5866e317bebbc69cc0eb681\",\n      \"algorithm\" : \"MD5\"\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 3,\n    \"createdAt\" : \"2019-02-22T13:44:02Z\",\n    \"completedAt\" : \"2019-02-22T14:08:34Z\"\n  }, {\n    \"id\" : \"0e4e5d67-d7d8-4695-87ad-58746c94ec63\",\n    \"status\" : \"DONE\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-12.csv\",\n      \"size\" : 54371840,\n      \"uploadedSize\" : 54371840,\n      \"lastModified\" : \"2019-12-22T08:06:00Z\"\n    },\n    \"digest\" : {\n      \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n      \"algorithm\" : \"SHA-256\"\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 1,\n    \"createdAt\" : \"2019-12-24T07:09:33Z\",\n    \"completedAt\" : \"2019-12-24T07:11:09Z\"\n  }, {\n    \"id\" : \"3650f774-2a95-4bfb-9f00-1c58fc1af0c6\",\n    \"status\" : \"DUPLICATE\",\n    \"file\" : {\n      \"name\" : \"salaries-2019-12.csv\",\n      \"size\" : 54371840,\n      \"uploadedSize\" : 54371840,\n      \"lastModified\" : \"2019-12-22T08:06:00Z\"\n    },\n    \"digest\" : {\n      \"value\" : \"07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c\",\n      \"algorithm\" : \"SHA-256\"\n    },\n    \"batchFileType\" : \"BB_SEPACT_CSV\",\n    \"totalBatchOrdersCount\" : 1,\n    \"createdAt\" : \"2019-12-28T09:11:13Z\",\n    \"completedAt\" : \"2019-12-28T09:13:23Z\"\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-uploads/{batchUploadId}\",\n        method: \"PUT\",\n        responses: [\n\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.\",\n    \"key\" : \"BatchUploadCannotBeUpdated\",\n    \"context\" : {\n      \"requestedStatus\" : \"OPEN\",\n      \"expectedStatus\" : \"DONE\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict\",\n  \"errors\" : [ {\n    \"message\" : \"The current status of the batch upload ({{currentStatus}}) does not allow updating the status.\",\n    \"key\" : \"BatchUploadCannotBeUpdated\",\n    \"context\" : {\n      \"currentStatus\" : \"OPEN\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/batch-uploads\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 202,\n                body: {\n  \"batchUploadId\" : \"5490bc83-9ea1-4b28-a465-2bb541e7c90b\",\n  \"status\" : \"OPEN\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"File extension ({{actual}}) is not one of the supported ones {{expected}}\",\n    \"key\" : \"UploadFileExtensionInvalid\",\n    \"context\" : {\n      \"actual\" : \"xls\",\n      \"expected\" : \"{csv}\"\n    }\n  } ]\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad request\",\n  \"errors\" : [ {\n    \"message\" : \"File size ({{actual}}) exceeds the configured maximum ({{expected}})\",\n    \"key\" : \"UploadMaxFileSize\",\n    \"context\" : {\n      \"actual\" : \"115343360\",\n      \"expected\" : \"104857600\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n    ]\n},\n]\n);\n\n\n"],"names":[],"mappings":"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"}