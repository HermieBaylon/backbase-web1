import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const ApprovalStatus = {
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED'
};

const BatchPaymentStatus = {
    REJECTED: 'REJECTED'
};

const BatchStatus = {
    OPEN: 'OPEN',
    CLOSED: 'CLOSED',
    DRAFT: 'DRAFT',
    INVALID: 'INVALID',
    VALID: 'VALID',
    ENTERED: 'ENTERED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED',
    READY: 'READY',
    ACKNOWLEDGED: 'ACKNOWLEDGED',
    DOWNLOADING: 'DOWNLOADING',
    ACCEPTED: 'ACCEPTED',
    PROCESSED: 'PROCESSED'
};

var BreachInfo;
(function (BreachInfo) {
    BreachInfo.BreachTypeEnum = {
        THRESHOLD: 'THRESHOLD',
        CONSUMPTION: 'CONSUMPTION'
    };
    BreachInfo.BreachedLimitTypeEnum = {
        PERIODIC: 'PERIODIC',
        TRANSACTIONAL: 'TRANSACTIONAL'
    };
})(BreachInfo || (BreachInfo = {}));

const ChargeBearer = {
    OUR: 'OUR',
    BEN: 'BEN',
    SHA: 'SHA'
};

const CreditDebitIndicator = {
    CREDIT: 'CREDIT',
    DEBIT: 'DEBIT'
};

const CreditDebitMixedIndicator = {
    CREDIT: 'CREDIT',
    DEBIT: 'DEBIT',
    MIXED: 'MIXED'
};

var ExchangeRateInformation;
(function (ExchangeRateInformation) {
    ExchangeRateInformation.RateTypeEnum = {
        ACTUAL: 'ACTUAL',
        INDICATIVE: 'INDICATIVE',
        AGREED: 'AGREED'
    };
})(ExchangeRateInformation || (ExchangeRateInformation = {}));

const InstructionPriority = {
    NORM: 'NORM',
    HIGH: 'HIGH'
};

const InvolvedPartyRole = {
    CREDITOR: 'CREDITOR',
    DEBTOR: 'DEBTOR'
};

const PaymentAction = {
    APPROVE: 'APPROVE',
    FINALAPPROVE: 'FINAL_APPROVE',
    REJECT: 'REJECT',
    CANCEL: 'CANCEL',
    DELETE: 'DELETE',
    EDIT: 'EDIT'
};

const PaymentMode = {
    SINGLE: 'SINGLE',
    RECURRING: 'RECURRING'
};

const RecordStatus = {
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED'
};

var RemittanceInformation;
(function (RemittanceInformation) {
    RemittanceInformation.TypeEnum = {
        STRUCTURED: 'STRUCTURED',
        UNSTRUCTURED: 'UNSTRUCTURED'
    };
})(RemittanceInformation || (RemittanceInformation = {}));

var Schedule;
(function (Schedule) {
    Schedule.NonWorkingDayExecutionStrategyEnum = {
        BEFORE: 'BEFORE',
        AFTER: 'AFTER',
        NONE: 'NONE'
    };
    Schedule.TransferFrequencyEnum = {
        ONCE: 'ONCE',
        DAILY: 'DAILY',
        WEEKLY: 'WEEKLY',
        BIWEEKLY: 'BIWEEKLY',
        MONTHLY: 'MONTHLY',
        QUARTERLY: 'QUARTERLY',
        YEARLY: 'YEARLY'
    };
    Schedule.EveryEnum = {
        _1: '1',
        _2: '2'
    };
})(Schedule || (Schedule = {}));

const SchemeNames = {
    IBAN: 'IBAN',
    BBAN: 'BBAN',
    ID: 'ID',
    EXTERNALID: 'EXTERNAL_ID',
    EMAIL: 'EMAIL',
    MOBILE: 'MOBILE'
};

const Status = {
    DRAFT: 'DRAFT',
    ENTERED: 'ENTERED',
    READY: 'READY',
    ACCEPTED: 'ACCEPTED',
    PROCESSED: 'PROCESSED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED',
    CANCELLATIONPENDING: 'CANCELLATION_PENDING',
    CONFIRMATIONPENDING: 'CONFIRMATION_PENDING',
    CONFIRMATIONDECLINED: 'CONFIRMATION_DECLINED',
    REPLACED: 'REPLACED'
};

const UploadStatus = {
    OPEN: 'OPEN',
    UPLOADING: 'UPLOADING',
    UPLOADED: 'UPLOADED',
    VALID: 'VALID',
    DUPLICATE: 'DUPLICATE',
    DONE: 'DONE',
    FAILED: 'FAILED'
};

const PAYMENT_BATCH_BASE_PATH = new InjectionToken('PAYMENT_BATCH_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PaymentBatchConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentBatchConfiguration');

class PaymentBatchApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PaymentBatchApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PaymentBatchApiModule,
            providers: [{ provide: PaymentBatchConfiguration, useFactory: configurationFactory }]
        };
    }
}
PaymentBatchApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchApiModule, deps: [{ token: PaymentBatchApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentBatchConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PaymentBatchApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchApiModule });
PaymentBatchApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PaymentBatchApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PaymentBatchConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class BatchOrdersHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentBatchConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteBatchOrderIdByBatchOrderId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchOrderIdByBatchOrderId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchOrderIdByBatchOrderIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchOrderIdByBatchOrderId.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`;
    }
    deleteBatchPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling deleteBatchPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchPaymentByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling deleteBatchPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;
    }
    getBatchOrders(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _amountFrom = requestParameters["amountFrom"];
        const _amountTo = requestParameters["amountTo"];
        const _executionDate = requestParameters["executionDate"];
        const _executionDateFrom = requestParameters["executionDateFrom"];
        const _executionDateTo = requestParameters["executionDateTo"];
        const _status = requestParameters["status"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _dynamicCreditDebitMixedIndicator = requestParameters["dynamicCreditDebitMixedIndicator"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_amountFrom !== undefined && _amountFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
        }
        if (_amountTo !== undefined && _amountTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
        }
        if (_executionDate !== undefined && _executionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
        }
        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
        }
        if (_executionDateTo !== undefined && _executionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_dynamicCreditDebitMixedIndicator !== undefined && _dynamicCreditDebitMixedIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dynamicCreditDebitMixedIndicator, 'dynamicCreditDebitMixedIndicator');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-orders`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchOrdersUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _amountFrom = requestParameters["amountFrom"];
        const _amountTo = requestParameters["amountTo"];
        const _executionDate = requestParameters["executionDate"];
        const _executionDateFrom = requestParameters["executionDateFrom"];
        const _executionDateTo = requestParameters["executionDateTo"];
        const _status = requestParameters["status"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _dynamicCreditDebitMixedIndicator = requestParameters["dynamicCreditDebitMixedIndicator"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_amountFrom !== undefined && _amountFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
        }
        if (_amountTo !== undefined && _amountTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
        }
        if (_executionDate !== undefined && _executionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
        }
        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
        }
        if (_executionDateTo !== undefined && _executionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_dynamicCreditDebitMixedIndicator !== undefined && _dynamicCreditDebitMixedIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dynamicCreditDebitMixedIndicator, 'dynamicCreditDebitMixedIndicator');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/batch-orders${queryString ? `?${queryString}` : ''}`;
    }
    getBatchOrdersById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchOrdersById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchOrdersByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchOrdersById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`;
    }
    getBatchPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling getBatchPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchPaymentByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling getBatchPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;
    }
    getBatchPaymentsById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentsById.');
        }
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchPaymentsByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentsById.');
        }
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments${queryString ? `?${queryString}` : ''}`;
    }
    postBatchOrders(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrdersPostRequest = requestParameters["batchOrdersPostRequest"];
        if (_batchOrdersPostRequest === null || _batchOrdersPostRequest === undefined) {
            throw new Error('Required parameter batchOrdersPostRequest was null or undefined when calling postBatchOrders.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/batch-orders`, _batchOrdersPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchOrdersUrl(requestParameters) {
        const _batchOrdersPostRequest = requestParameters["batchOrdersPostRequest"];
        if (_batchOrdersPostRequest === null || _batchOrdersPostRequest === undefined) {
            throw new Error('Required parameter batchOrdersPostRequest was null or undefined when calling postBatchOrders.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders`;
    }
    postBatchPayments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling postBatchPayments.');
        }
        const _batchPaymentsPostRequest = requestParameters["batchPaymentsPostRequest"];
        if (_batchPaymentsPostRequest === null || _batchPaymentsPostRequest === undefined) {
            throw new Error('Required parameter batchPaymentsPostRequest was null or undefined when calling postBatchPayments.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`, _batchPaymentsPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchPaymentsUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling postBatchPayments.');
        }
        const _batchPaymentsPostRequest = requestParameters["batchPaymentsPostRequest"];
        if (_batchPaymentsPostRequest === null || _batchPaymentsPostRequest === undefined) {
            throw new Error('Required parameter batchPaymentsPostRequest was null or undefined when calling postBatchPayments.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`;
    }
    putApprovalsById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling putApprovalsById.');
        }
        const _batchOrderApprovalPutRequest = requestParameters["batchOrderApprovalPutRequest"];
        if (_batchOrderApprovalPutRequest === null || _batchOrderApprovalPutRequest === undefined) {
            throw new Error('Required parameter batchOrderApprovalPutRequest was null or undefined when calling putApprovalsById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/approvals`, _batchOrderApprovalPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putApprovalsByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling putApprovalsById.');
        }
        const _batchOrderApprovalPutRequest = requestParameters["batchOrderApprovalPutRequest"];
        if (_batchOrderApprovalPutRequest === null || _batchOrderApprovalPutRequest === undefined) {
            throw new Error('Required parameter batchOrderApprovalPutRequest was null or undefined when calling putApprovalsById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/approvals`;
    }
    putBatchPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling putBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling putBatchPaymentById.');
        }
        const _batchPaymentsPutRequest = requestParameters["batchPaymentsPutRequest"];
        if (_batchPaymentsPutRequest === null || _batchPaymentsPutRequest === undefined) {
            throw new Error('Required parameter batchPaymentsPutRequest was null or undefined when calling putBatchPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`, _batchPaymentsPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBatchPaymentByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling putBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling putBatchPaymentById.');
        }
        const _batchPaymentsPutRequest = requestParameters["batchPaymentsPutRequest"];
        if (_batchPaymentsPutRequest === null || _batchPaymentsPutRequest === undefined) {
            throw new Error('Required parameter batchPaymentsPutRequest was null or undefined when calling putBatchPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;
    }
    updateBatchOrderById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling updateBatchOrderById.');
        }
        const _batchOrderPutRequest = requestParameters["batchOrderPutRequest"];
        if (_batchOrderPutRequest === null || _batchOrderPutRequest === undefined) {
            throw new Error('Required parameter batchOrderPutRequest was null or undefined when calling updateBatchOrderById.');
        }
        const _dryRun = requestParameters["dryRun"];
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_dryRun !== undefined && _dryRun !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
        }
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`, _batchOrderPutRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateBatchOrderByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling updateBatchOrderById.');
        }
        const _batchOrderPutRequest = requestParameters["batchOrderPutRequest"];
        if (_batchOrderPutRequest === null || _batchOrderPutRequest === undefined) {
            throw new Error('Required parameter batchOrderPutRequest was null or undefined when calling updateBatchOrderById.');
        }
        const _dryRun = requestParameters["dryRun"];
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_dryRun !== undefined && _dryRun !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
        }
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}${queryString ? `?${queryString}` : ''}`;
    }
}
BatchOrdersHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchOrdersHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_BATCH_BASE_PATH, optional: true }, { token: PaymentBatchConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BatchOrdersHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchOrdersHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchOrdersHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_BATCH_BASE_PATH]
                }] }, { type: PaymentBatchConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BatchOrdersHttpServiceDeleteBatchOrderIdByBatchOrderIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServiceDeleteBatchPaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 404,
                body: {
                    "message": "Batch order not found",
                    "errors": []
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch payment not found",
                    "errors": []
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServiceGetBatchOrdersMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchOrders": [{
                            "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                            "name": "Employee salaries",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ACCEPTED",
                            "totalTransactionsCount": 73500,
                            "totalCreditTransactionsCount": 73500,
                            "totalInstructedAmount": {
                                "amount": "2400123.00",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "2400123.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "CH8739215260566920524",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-02-18",
                            "canDelete": false,
                            "canCancel": false
                        }, {
                            "id": "33295f9c-95ec-42f9-9817-64f7d48be023",
                            "name": "Employee salaries",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ACCEPTED",
                            "totalTransactionsCount": 75930,
                            "totalCreditTransactionsCount": 75930,
                            "totalInstructedAmount": {
                                "amount": "2479474.00",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "2479474.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "CH8739215260566920524",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-03-18",
                            "canDelete": false,
                            "canCancel": false
                        }, {
                            "id": "f3da0418-c801-4db1-ae52-597f1459b525",
                            "name": "Employee salaries",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ENTERED",
                            "totalTransactionsCount": 78791,
                            "totalCreditTransactionsCount": 78791,
                            "totalInstructedAmount": {
                                "amount": "2552947.15",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "2552947.15",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "CH8739215260566920524",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-04-18",
                            "canDelete": true,
                            "canCancel": false
                        }],
                    "totalBatchOrders": 3,
                    "creditDebitMixedIndicator": "CREDIT"
                }
            },
            {
                status: 200,
                body: {
                    "batchOrders": [{
                            "id": "a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71",
                            "name": "Employees salaries May",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ENTERED",
                            "totalTransactionsCount": 71,
                            "totalCreditTransactionsCount": 71,
                            "totalInstructedAmount": {
                                "amount": "191056.00",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "191056.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Salaries Account",
                                "identification": {
                                    "identification": "ST42353317399261373273497",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-05-27",
                            "approval": {
                                "id": "9bb143b1-bdb3-4ca5-9631-e02e743d6a10",
                                "userId": "23b8a2ac-e8bb-46b1-98d2-a2da71dfd646",
                                "externalUserId": "judi-miles",
                                "userFullName": "Judi Miles",
                                "serviceAgreementId": "e3e718d8-8f2e-4ef4-bf27-22580759b742",
                                "itemId": "a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71",
                                "dataAccessItemId": "ac59c1a1-3729-4514-8051-5015dd0aadef",
                                "resource": "Batches",
                                "function": "SEPACT",
                                "status": "PENDING",
                                "createdAt": "2019-05-10T10:29:10Z",
                                "records": [],
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": true
                            },
                            "canDelete": false,
                            "canCancel": false
                        }],
                    "totalBatchOrders": 1,
                    "creditDebitMixedIndicator": "CREDIT"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServiceGetBatchOrdersByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                    "name": "Employee salaries",
                    "type": "SEPACT",
                    "creditDebitMixedIndicator": "CREDIT",
                    "status": "ACCEPTED",
                    "totalTransactionsCount": 73500,
                    "totalCreditTransactionsCount": 73500,
                    "totalInstructedAmount": {
                        "amount": "2400123.00",
                        "currencyCode": "EUR"
                    },
                    "totalCreditInstructedAmount": {
                        "amount": "2400123.00",
                        "currencyCode": "EUR"
                    },
                    "account": {
                        "name": "Main Current",
                        "identification": {
                            "identification": "CH8739215260566920524",
                            "schemeName": "IBAN"
                        }
                    },
                    "requestedExecutionDate": "2019-02-18",
                    "fileName": "salaries-2019-02.csv",
                    "userFullName": "Davy Jones",
                    "uploadCompletedAt": "2019-02-22T14:08:34Z",
                    "canDelete": false,
                    "canCancel": false
                }
            },
            {
                status: 200,
                body: {
                    "id": "2fd15c69-c4da-4c58-986f-d46082057bf5",
                    "name": "End of Q2 payments",
                    "type": "SEPACT",
                    "status": "ENTERED",
                    "totalTransactionsCount": 2109,
                    "totalInstructedAmount": {
                        "amount": "280810.00",
                        "currencyCode": "EUR"
                    },
                    "account": {
                        "name": "Main",
                        "identification": {
                            "identification": "NO0741575812927",
                            "schemeName": "IBAN"
                        }
                    },
                    "requestedExecutionDate": "2019-05-31",
                    "fileName": "2019-Q2-payments.csv",
                    "userFullName": "Tommy Perrotti",
                    "uploadCompletedAt": "2019-05-16T14:09:30Z",
                    "approval": {
                        "id": "9966c07c-1547-42a5-9bc7-91986ff33993",
                        "userId": "c3608888-faa3-4f23-9c5a-269dd39caea5",
                        "externalUserId": "judi-miles",
                        "userFullName": "Judi Miles",
                        "serviceAgreementId": "64f538bf-3f5d-4dd9-8de7-ba7082da198d",
                        "itemId": "2fd15c69-c4da-4c58-986f-d46082057bf5",
                        "dataAccessItemId": "f094b702-e912-434c-8e49-12c56fc78551",
                        "resource": "Batches",
                        "function": "SEPACT",
                        "status": "PENDING",
                        "createdAt": "2019-05-16T14:09:40Z",
                        "records": [{
                                "id": "9e61d96d-fea3-44a4-8903-88d95eb266a8",
                                "userId": "f34feccc-0d0d-4365-982b-d6d1779e5aaf",
                                "externalUserId": "bigWillie",
                                "userFullName": "Willie Iles",
                                "approvalTypeId": "ece87cfe-33f9-45a4-8c51-a04a9f905c66",
                                "status": "APPROVED",
                                "createdAt": "2019-05-17T13:44:02Z"
                            }],
                        "canApprove": false,
                        "canReject": false,
                        "finalApprover": false
                    },
                    "canDelete": false,
                    "canCancel": true
                }
            },
            {
                status: 200,
                body: {
                    "id": "b438751d-6e6a-4601-8009-a82fa22bddcc",
                    "name": "Employee salaries",
                    "type": "SEPACT",
                    "status": "REJECTED",
                    "totalTransactionsCount": 9208,
                    "totalInstructedAmount": {
                        "amount": "50343009.00",
                        "currencyCode": "EUR"
                    },
                    "account": {
                        "name": "Main Account 8",
                        "identification": {
                            "identification": "NL18ABNA4956451237",
                            "schemeName": "IBAN"
                        }
                    },
                    "requestedExecutionDate": "2019-09-15",
                    "description": "Salary Sep 2019",
                    "bankStatus": "UNPROCESSABLE",
                    "reasonCode": "RJ08",
                    "reasonText": "Insufficient funds",
                    "errorDescription": "Target account has not enough funds to execute batch payments",
                    "fileName": "salaries-2019-02.csv",
                    "userFullName": "Davy Jones",
                    "uploadCompletedAt": "2019-02-22T14:08:34Z",
                    "canDelete": false,
                    "canCancel": false
                }
            },
            {
                status: 200,
                body: {
                    "id": "2f4c4bb6-c107-473a-adbd-7343b8f0ea80",
                    "name": "Salaries 2020-12",
                    "type": "ACH_CREDIT",
                    "status": "ACCEPTED",
                    "totalTransactionsCount": 401,
                    "totalInstructedAmount": {
                        "amount": "650980.25",
                        "currencyCode": "USD"
                    },
                    "account": {
                        "name": "Current Account",
                        "identification": {
                            "identification": "7649373647",
                            "schemeName": "BBAN"
                        }
                    },
                    "bankBranchCode": "113105452",
                    "companyId": "1800948594",
                    "companyName": "Your Company",
                    "requestedExecutionDate": "2020-12-18",
                    "fileName": "salaries-2020-12.ach",
                    "userFullName": "Ben Jones",
                    "uploadCompletedAt": "2020-12-15T15:28:10Z",
                    "canDelete": false,
                    "canCancel": false
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServiceGetBatchPaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "counterpartyName": "M. Frederiksen",
                    "counterpartyAccountNumber": "DE49500105174361358418",
                    "instructedAmount": {
                        "amount": "5576.00",
                        "currencyCode": "EUR"
                    },
                    "description": "Salary Feb 2019 empl.no:068572",
                    "status": "REJECTED",
                    "extendedDescription": "Addenda record for the credit payment \nAddenda record for the credit payment",
                    "bankStatus": "UNPROCESSABLE",
                    "reasonCode": "RJ05",
                    "reasonText": "Rejected by counterparty bank",
                    "errorDescription": "Target account has been closed."
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServiceGetBatchPaymentsByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchPayments": [{
                            "counterpartyName": "A. Hamers",
                            "counterpartyAccountNumber": "NL62ABNA0609476343",
                            "instructedAmount": {
                                "amount": "4102.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:902713",
                            "extendedDescriptionSize": 99999
                        }, {
                            "counterpartyName": "E. Gutierrez",
                            "counterpartyAccountNumber": "NL50ABNA4418364501",
                            "instructedAmount": {
                                "amount": "5287.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:256869",
                            "extendedDescriptionSize": 0
                        }, {
                            "counterpartyName": "C.M. McAlister",
                            "counterpartyAccountNumber": "BE98735114499693",
                            "instructedAmount": {
                                "amount": "3398.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:100642",
                            "extendedDescriptionSize": 456768
                        }, {
                            "counterpartyName": "K.C. Bennis",
                            "counterpartyAccountNumber": "NL67ABNA5515439724",
                            "instructedAmount": {
                                "amount": "4334.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:191872",
                            "extendedDescriptionSize": 0
                        }, {
                            "counterpartyName": "M. Frederiksen",
                            "counterpartyAccountNumber": "DE49500105174361358418",
                            "instructedAmount": {
                                "amount": "5576.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:068572",
                            "extendedDescriptionSize": 123,
                            "status": "REJECTED",
                            "bankStatus": "UNPROCESSABLE",
                            "reasonCode": "RJ05",
                            "reasonText": "Rejected by counterparty bank",
                            "errorDescription": "Target account has been closed."
                        }],
                    "totalBatchPayments": 5,
                    "batchOrder": {
                        "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                        "name": "Employee salaries",
                        "type": "SEPACT",
                        "status": "ACCEPTED",
                        "totalTransactionsCount": 5,
                        "totalInstructedAmount": {
                            "amount": "2400123.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main Current",
                            "identification": {
                                "identification": "CH8739215260566920524",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-02-18",
                        "fileName": "salaries-2019-02.csv",
                        "userFullName": "Davy Jones",
                        "uploadCompletedAt": "2019-02-22T14:08:34Z",
                        "confidentialType": "confidential type"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServicePostBatchOrdersMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06",
                    "status": "DRAFT"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServicePostBatchPaymentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "cad9e668-15a4-44bf-832d-67e7b41387ac"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch order not found",
                    "errors": []
                }
            },
        ]
    }]);
const BatchOrdersHttpServicePutApprovalsByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/approvals",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "batchOrder": {
                        "id": "72d17d02-20a9-4f0b-b2b8-f83959eb187e",
                        "name": "Salaries May 2019",
                        "type": "SEPACT",
                        "creditDebitMixedIndicator": "CREDIT",
                        "status": "ENTERED",
                        "totalTransactionsCount": 6504,
                        "totalCreditTransactionsCount": 6504,
                        "totalInstructedAmount": {
                            "amount": "14009055.00",
                            "currencyCode": "EUR"
                        },
                        "totalCreditInstructedAmount": {
                            "amount": "14009055.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Salaries account",
                            "identification": {
                                "identification": "NL78ABNA3470416656",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-05-26",
                        "approval": {
                            "id": "00b5ca29-eddd-49f4-a898-c3f185ab9a3a",
                            "userId": "4840854b-0597-47a6-8984-87cb50f970eb",
                            "externalUserId": "judi-miles",
                            "userFullName": "Judi Miles",
                            "serviceAgreementId": "ea7b3dfd-29b8-4559-872a-91f5576b56ef",
                            "itemId": "72d17d02-20a9-4f0b-b2b8-f83959eb187e",
                            "dataAccessItemId": "606c7afa-3c8a-4210-ad25-fc83893a4e49",
                            "resource": "Batches",
                            "function": "SEPACT",
                            "status": "PENDING",
                            "createdAt": "2019-08-10T18:09:21Z",
                            "records": [],
                            "canApprove": true,
                            "canReject": true,
                            "finalApprover": false
                        }
                    },
                    "approvalStatus": "PENDING"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Limits has been breached, check the report for more details",
                    "checkTime": "2019-10-31T12:12:12Z",
                    "breachReport": [{
                            "limitedEntity": [{
                                    "ref": "1234567-12312-123123",
                                    "type": "Service Agreement",
                                    "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                }],
                            "shadow": false,
                            "currency": "EUR",
                            "user-BBID": "oleksii",
                            "breachInfo": [{
                                    "breachType": "THRESHOLD",
                                    "breachedLimitType": "PERIODIC",
                                    "timeframe": {
                                        "period": "daily",
                                        "startTime": "2019-10-31T00:00:00Z",
                                        "endTime": "2019-10-31T23:59:59Z"
                                    },
                                    "currentConsumption": "250.0",
                                    "currentThreshold": "499.9"
                                }, {
                                    "breachType": "CONSUMPTION",
                                    "timeframe": {
                                        "period": "monthly",
                                        "startTime": "2019-10-01T00:00:00Z",
                                        "endTime": "2019-10-31T23:59:59Z"
                                    },
                                    "currentConsumption": "9950.0",
                                    "currentThreshold": "10000.0"
                                }]
                        }, {
                            "user-BBID": "oleksii",
                            "shadow": false,
                            "currency": "EUR",
                            "breachInfo": [{
                                    "breachType": "CONSUMPTION",
                                    "timeframe": {
                                        "period": "daily",
                                        "startTime": "2019-10-31T00:00:00Z",
                                        "endTime": "2019-10-31T23:59:59Z"
                                    },
                                    "currentConsumption": "500.0",
                                    "currentThreshold": "1000.0"
                                }]
                        }, {
                            "limitedEntity": [{
                                    "ref": "1234567-12312-123123",
                                    "type": "Function Access Group",
                                    "description": "Batches approvers"
                                }, {
                                    "ref": "1234567-12312-123123",
                                    "type": "Function",
                                    "description": "Domestic batches"
                                }, {
                                    "ref": "Approve",
                                    "type": "Privilege",
                                    "description": "Approve"
                                }],
                            "shadow": false,
                            "currency": "EUR",
                            "breachInfo": [{
                                    "breachType": "THRESHOLD",
                                    "timeframe": {
                                        "period": "daily",
                                        "startTime": "2019-10-31T00:00:00Z",
                                        "endTime": "2019-10-31T23:59:59Z"
                                    },
                                    "currentConsumption": "250.0",
                                    "currentThreshold": "499.9"
                                }]
                        }, {
                            "limitedEntity": [{
                                    "ref": "1234567-12312-123123",
                                    "type": "Legal Entity",
                                    "description": "Kuhic, Gislason and Kemmer"
                                }],
                            "shadow": false,
                            "currency": "EUR",
                            "breachInfo": [{
                                    "breachType": "CONSUMPTION",
                                    "timeframe": {
                                        "period": "quarterly",
                                        "startTime": "2019-10-01T00:00:00Z",
                                        "endTime": "2019-12-31T23:59:59Z"
                                    },
                                    "currentConsumption": "99950.0",
                                    "currentThreshold": "100000.0"
                                }]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServicePutBatchPaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "7dc95f0a-deba-47be-8f5d-6d0454ef271c",
                    "counterpartyName": "Uriel Johnson",
                    "counterpartyAccountNumber": "HU65109180019369738837536884",
                    "instructedAmount": {
                        "amount": "830.00",
                        "currencyCode": "EUR"
                    },
                    "description": "Order 00023162"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch order not found",
                    "errors": []
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch payment not found",
                    "errors": []
                }
            },
        ]
    }]);
const BatchOrdersHttpServiceUpdateBatchOrderByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "f7e4f0bf-6080-46be-bd5d-7dad2b054495",
                    "name": "Employee salaries",
                    "type": "SEPACT",
                    "creditDebitMixedIndicator": "CREDIT",
                    "status": "CANCELLED",
                    "totalTransactionsCount": 120,
                    "totalCreditTransactionsCount": 120,
                    "totalInstructedAmount": {
                        "amount": "322038.00",
                        "currencyCode": "EUR"
                    },
                    "totalCreditInstructedAmount": {
                        "amount": "322038.00",
                        "currencyCode": "EUR"
                    },
                    "account": {
                        "name": "Main Current",
                        "identification": {
                            "identification": "NL54ABNA2366058993",
                            "schemeName": "IBAN"
                        }
                    },
                    "requestedExecutionDate": "2012-01-01",
                    "fileName": "salaries-2020-01.csv",
                    "userFullName": "John Davis",
                    "uploadCompletedAt": "2019-12-31T23:55:31Z",
                    "canDelete": false,
                    "canCancel": false,
                    "approval": {
                        "id": "ac150312-1bec-4075-934f-23600886cb4e",
                        "userId": "64350fcf-ddd1-4cdc-b725-f6c76f89f7c2",
                        "externalUserId": "jdavis",
                        "userFullName": "John Davis",
                        "serviceAgreementId": "c94dc22f-381f-4127-a9f2-db2f5a314e41",
                        "itemId": "f7e4f0bf-6080-46be-bd5d-7dad2b054495",
                        "dataAccessItemId": "e8daae6b-0276-4533-b64d-e3c73afb47a0",
                        "resource": "Batches",
                        "function": "SEPACT",
                        "status": "PENDING",
                        "createdAt": "2019-12-31T23:56:08Z",
                        "records": [{
                                "id": "9e61d96d-fea3-44a4-8903-88d95eb266a8",
                                "userId": "f34feccc-0d0d-4365-982b-d6d1779e5aaf",
                                "externalUserId": "twilliams",
                                "userFullName": "Tobi Williams",
                                "approvalTypeId": "16f655f3-3abf-438d-8351-2c667d5a3c86",
                                "status": "APPROVED",
                                "createdAt": "2019-12-31T23:57:20Z"
                            }],
                        "canApprove": false,
                        "canReject": false,
                        "finalApprover": false
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                            "key": "BatchOrderCannotBeUpdated",
                            "context": {
                                "requestedStatus": "READY",
                                "expectedStatus": "CANCELLED"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch order ({{currentStatus}}) does not allow cancellation.",
                            "key": "BatchOrderCannotBeCancelled",
                            "context": {
                                "currentStatus": "PROCESSED"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "Only partially approved batch orders can be cancelled.",
                            "key": "BatchOrderWithoutApprovalsCannotBeCancelled"
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchOrdersHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 404,
                body: {
                    "message": "Batch order not found",
                    "errors": []
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch payment not found",
                    "errors": []
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchOrders": [{
                            "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                            "name": "Employee salaries",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ACCEPTED",
                            "totalTransactionsCount": 73500,
                            "totalCreditTransactionsCount": 73500,
                            "totalInstructedAmount": {
                                "amount": "2400123.00",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "2400123.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "CH8739215260566920524",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-02-18",
                            "canDelete": false,
                            "canCancel": false
                        }, {
                            "id": "33295f9c-95ec-42f9-9817-64f7d48be023",
                            "name": "Employee salaries",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ACCEPTED",
                            "totalTransactionsCount": 75930,
                            "totalCreditTransactionsCount": 75930,
                            "totalInstructedAmount": {
                                "amount": "2479474.00",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "2479474.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "CH8739215260566920524",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-03-18",
                            "canDelete": false,
                            "canCancel": false
                        }, {
                            "id": "f3da0418-c801-4db1-ae52-597f1459b525",
                            "name": "Employee salaries",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ENTERED",
                            "totalTransactionsCount": 78791,
                            "totalCreditTransactionsCount": 78791,
                            "totalInstructedAmount": {
                                "amount": "2552947.15",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "2552947.15",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "CH8739215260566920524",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-04-18",
                            "canDelete": true,
                            "canCancel": false
                        }],
                    "totalBatchOrders": 3,
                    "creditDebitMixedIndicator": "CREDIT"
                }
            },
            {
                status: 200,
                body: {
                    "batchOrders": [{
                            "id": "a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71",
                            "name": "Employees salaries May",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ENTERED",
                            "totalTransactionsCount": 71,
                            "totalCreditTransactionsCount": 71,
                            "totalInstructedAmount": {
                                "amount": "191056.00",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "191056.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Salaries Account",
                                "identification": {
                                    "identification": "ST42353317399261373273497",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-05-27",
                            "approval": {
                                "id": "9bb143b1-bdb3-4ca5-9631-e02e743d6a10",
                                "userId": "23b8a2ac-e8bb-46b1-98d2-a2da71dfd646",
                                "externalUserId": "judi-miles",
                                "userFullName": "Judi Miles",
                                "serviceAgreementId": "e3e718d8-8f2e-4ef4-bf27-22580759b742",
                                "itemId": "a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71",
                                "dataAccessItemId": "ac59c1a1-3729-4514-8051-5015dd0aadef",
                                "resource": "Batches",
                                "function": "SEPACT",
                                "status": "PENDING",
                                "createdAt": "2019-05-10T10:29:10Z",
                                "records": [],
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": true
                            },
                            "canDelete": false,
                            "canCancel": false
                        }],
                    "totalBatchOrders": 1,
                    "creditDebitMixedIndicator": "CREDIT"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                    "name": "Employee salaries",
                    "type": "SEPACT",
                    "creditDebitMixedIndicator": "CREDIT",
                    "status": "ACCEPTED",
                    "totalTransactionsCount": 73500,
                    "totalCreditTransactionsCount": 73500,
                    "totalInstructedAmount": {
                        "amount": "2400123.00",
                        "currencyCode": "EUR"
                    },
                    "totalCreditInstructedAmount": {
                        "amount": "2400123.00",
                        "currencyCode": "EUR"
                    },
                    "account": {
                        "name": "Main Current",
                        "identification": {
                            "identification": "CH8739215260566920524",
                            "schemeName": "IBAN"
                        }
                    },
                    "requestedExecutionDate": "2019-02-18",
                    "fileName": "salaries-2019-02.csv",
                    "userFullName": "Davy Jones",
                    "uploadCompletedAt": "2019-02-22T14:08:34Z",
                    "canDelete": false,
                    "canCancel": false
                }
            },
            {
                status: 200,
                body: {
                    "id": "2fd15c69-c4da-4c58-986f-d46082057bf5",
                    "name": "End of Q2 payments",
                    "type": "SEPACT",
                    "status": "ENTERED",
                    "totalTransactionsCount": 2109,
                    "totalInstructedAmount": {
                        "amount": "280810.00",
                        "currencyCode": "EUR"
                    },
                    "account": {
                        "name": "Main",
                        "identification": {
                            "identification": "NO0741575812927",
                            "schemeName": "IBAN"
                        }
                    },
                    "requestedExecutionDate": "2019-05-31",
                    "fileName": "2019-Q2-payments.csv",
                    "userFullName": "Tommy Perrotti",
                    "uploadCompletedAt": "2019-05-16T14:09:30Z",
                    "approval": {
                        "id": "9966c07c-1547-42a5-9bc7-91986ff33993",
                        "userId": "c3608888-faa3-4f23-9c5a-269dd39caea5",
                        "externalUserId": "judi-miles",
                        "userFullName": "Judi Miles",
                        "serviceAgreementId": "64f538bf-3f5d-4dd9-8de7-ba7082da198d",
                        "itemId": "2fd15c69-c4da-4c58-986f-d46082057bf5",
                        "dataAccessItemId": "f094b702-e912-434c-8e49-12c56fc78551",
                        "resource": "Batches",
                        "function": "SEPACT",
                        "status": "PENDING",
                        "createdAt": "2019-05-16T14:09:40Z",
                        "records": [{
                                "id": "9e61d96d-fea3-44a4-8903-88d95eb266a8",
                                "userId": "f34feccc-0d0d-4365-982b-d6d1779e5aaf",
                                "externalUserId": "bigWillie",
                                "userFullName": "Willie Iles",
                                "approvalTypeId": "ece87cfe-33f9-45a4-8c51-a04a9f905c66",
                                "status": "APPROVED",
                                "createdAt": "2019-05-17T13:44:02Z"
                            }],
                        "canApprove": false,
                        "canReject": false,
                        "finalApprover": false
                    },
                    "canDelete": false,
                    "canCancel": true
                }
            },
            {
                status: 200,
                body: {
                    "id": "b438751d-6e6a-4601-8009-a82fa22bddcc",
                    "name": "Employee salaries",
                    "type": "SEPACT",
                    "status": "REJECTED",
                    "totalTransactionsCount": 9208,
                    "totalInstructedAmount": {
                        "amount": "50343009.00",
                        "currencyCode": "EUR"
                    },
                    "account": {
                        "name": "Main Account 8",
                        "identification": {
                            "identification": "NL18ABNA4956451237",
                            "schemeName": "IBAN"
                        }
                    },
                    "requestedExecutionDate": "2019-09-15",
                    "description": "Salary Sep 2019",
                    "bankStatus": "UNPROCESSABLE",
                    "reasonCode": "RJ08",
                    "reasonText": "Insufficient funds",
                    "errorDescription": "Target account has not enough funds to execute batch payments",
                    "fileName": "salaries-2019-02.csv",
                    "userFullName": "Davy Jones",
                    "uploadCompletedAt": "2019-02-22T14:08:34Z",
                    "canDelete": false,
                    "canCancel": false
                }
            },
            {
                status: 200,
                body: {
                    "id": "2f4c4bb6-c107-473a-adbd-7343b8f0ea80",
                    "name": "Salaries 2020-12",
                    "type": "ACH_CREDIT",
                    "status": "ACCEPTED",
                    "totalTransactionsCount": 401,
                    "totalInstructedAmount": {
                        "amount": "650980.25",
                        "currencyCode": "USD"
                    },
                    "account": {
                        "name": "Current Account",
                        "identification": {
                            "identification": "7649373647",
                            "schemeName": "BBAN"
                        }
                    },
                    "bankBranchCode": "113105452",
                    "companyId": "1800948594",
                    "companyName": "Your Company",
                    "requestedExecutionDate": "2020-12-18",
                    "fileName": "salaries-2020-12.ach",
                    "userFullName": "Ben Jones",
                    "uploadCompletedAt": "2020-12-15T15:28:10Z",
                    "canDelete": false,
                    "canCancel": false
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "counterpartyName": "M. Frederiksen",
                    "counterpartyAccountNumber": "DE49500105174361358418",
                    "instructedAmount": {
                        "amount": "5576.00",
                        "currencyCode": "EUR"
                    },
                    "description": "Salary Feb 2019 empl.no:068572",
                    "status": "REJECTED",
                    "extendedDescription": "Addenda record for the credit payment \nAddenda record for the credit payment",
                    "bankStatus": "UNPROCESSABLE",
                    "reasonCode": "RJ05",
                    "reasonText": "Rejected by counterparty bank",
                    "errorDescription": "Target account has been closed."
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchPayments": [{
                            "counterpartyName": "A. Hamers",
                            "counterpartyAccountNumber": "NL62ABNA0609476343",
                            "instructedAmount": {
                                "amount": "4102.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:902713",
                            "extendedDescriptionSize": 99999
                        }, {
                            "counterpartyName": "E. Gutierrez",
                            "counterpartyAccountNumber": "NL50ABNA4418364501",
                            "instructedAmount": {
                                "amount": "5287.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:256869",
                            "extendedDescriptionSize": 0
                        }, {
                            "counterpartyName": "C.M. McAlister",
                            "counterpartyAccountNumber": "BE98735114499693",
                            "instructedAmount": {
                                "amount": "3398.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:100642",
                            "extendedDescriptionSize": 456768
                        }, {
                            "counterpartyName": "K.C. Bennis",
                            "counterpartyAccountNumber": "NL67ABNA5515439724",
                            "instructedAmount": {
                                "amount": "4334.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:191872",
                            "extendedDescriptionSize": 0
                        }, {
                            "counterpartyName": "M. Frederiksen",
                            "counterpartyAccountNumber": "DE49500105174361358418",
                            "instructedAmount": {
                                "amount": "5576.00",
                                "currencyCode": "EUR"
                            },
                            "description": "Salaray Feb 2019 empl.no:068572",
                            "extendedDescriptionSize": 123,
                            "status": "REJECTED",
                            "bankStatus": "UNPROCESSABLE",
                            "reasonCode": "RJ05",
                            "reasonText": "Rejected by counterparty bank",
                            "errorDescription": "Target account has been closed."
                        }],
                    "totalBatchPayments": 5,
                    "batchOrder": {
                        "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                        "name": "Employee salaries",
                        "type": "SEPACT",
                        "status": "ACCEPTED",
                        "totalTransactionsCount": 5,
                        "totalInstructedAmount": {
                            "amount": "2400123.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main Current",
                            "identification": {
                                "identification": "CH8739215260566920524",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-02-18",
                        "fileName": "salaries-2019-02.csv",
                        "userFullName": "Davy Jones",
                        "uploadCompletedAt": "2019-02-22T14:08:34Z",
                        "confidentialType": "confidential type"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06",
                    "status": "DRAFT"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "cad9e668-15a4-44bf-832d-67e7b41387ac"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch order not found",
                    "errors": []
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/approvals",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "batchOrder": {
                        "id": "72d17d02-20a9-4f0b-b2b8-f83959eb187e",
                        "name": "Salaries May 2019",
                        "type": "SEPACT",
                        "creditDebitMixedIndicator": "CREDIT",
                        "status": "ENTERED",
                        "totalTransactionsCount": 6504,
                        "totalCreditTransactionsCount": 6504,
                        "totalInstructedAmount": {
                            "amount": "14009055.00",
                            "currencyCode": "EUR"
                        },
                        "totalCreditInstructedAmount": {
                            "amount": "14009055.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Salaries account",
                            "identification": {
                                "identification": "NL78ABNA3470416656",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-05-26",
                        "approval": {
                            "id": "00b5ca29-eddd-49f4-a898-c3f185ab9a3a",
                            "userId": "4840854b-0597-47a6-8984-87cb50f970eb",
                            "externalUserId": "judi-miles",
                            "userFullName": "Judi Miles",
                            "serviceAgreementId": "ea7b3dfd-29b8-4559-872a-91f5576b56ef",
                            "itemId": "72d17d02-20a9-4f0b-b2b8-f83959eb187e",
                            "dataAccessItemId": "606c7afa-3c8a-4210-ad25-fc83893a4e49",
                            "resource": "Batches",
                            "function": "SEPACT",
                            "status": "PENDING",
                            "createdAt": "2019-08-10T18:09:21Z",
                            "records": [],
                            "canApprove": true,
                            "canReject": true,
                            "finalApprover": false
                        }
                    },
                    "approvalStatus": "PENDING"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Limits has been breached, check the report for more details",
                    "checkTime": "2019-10-31T12:12:12Z",
                    "breachReport": [{
                            "limitedEntity": [{
                                    "ref": "1234567-12312-123123",
                                    "type": "Service Agreement",
                                    "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                }],
                            "shadow": false,
                            "currency": "EUR",
                            "user-BBID": "oleksii",
                            "breachInfo": [{
                                    "breachType": "THRESHOLD",
                                    "breachedLimitType": "PERIODIC",
                                    "timeframe": {
                                        "period": "daily",
                                        "startTime": "2019-10-31T00:00:00Z",
                                        "endTime": "2019-10-31T23:59:59Z"
                                    },
                                    "currentConsumption": "250.0",
                                    "currentThreshold": "499.9"
                                }, {
                                    "breachType": "CONSUMPTION",
                                    "timeframe": {
                                        "period": "monthly",
                                        "startTime": "2019-10-01T00:00:00Z",
                                        "endTime": "2019-10-31T23:59:59Z"
                                    },
                                    "currentConsumption": "9950.0",
                                    "currentThreshold": "10000.0"
                                }]
                        }, {
                            "user-BBID": "oleksii",
                            "shadow": false,
                            "currency": "EUR",
                            "breachInfo": [{
                                    "breachType": "CONSUMPTION",
                                    "timeframe": {
                                        "period": "daily",
                                        "startTime": "2019-10-31T00:00:00Z",
                                        "endTime": "2019-10-31T23:59:59Z"
                                    },
                                    "currentConsumption": "500.0",
                                    "currentThreshold": "1000.0"
                                }]
                        }, {
                            "limitedEntity": [{
                                    "ref": "1234567-12312-123123",
                                    "type": "Function Access Group",
                                    "description": "Batches approvers"
                                }, {
                                    "ref": "1234567-12312-123123",
                                    "type": "Function",
                                    "description": "Domestic batches"
                                }, {
                                    "ref": "Approve",
                                    "type": "Privilege",
                                    "description": "Approve"
                                }],
                            "shadow": false,
                            "currency": "EUR",
                            "breachInfo": [{
                                    "breachType": "THRESHOLD",
                                    "timeframe": {
                                        "period": "daily",
                                        "startTime": "2019-10-31T00:00:00Z",
                                        "endTime": "2019-10-31T23:59:59Z"
                                    },
                                    "currentConsumption": "250.0",
                                    "currentThreshold": "499.9"
                                }]
                        }, {
                            "limitedEntity": [{
                                    "ref": "1234567-12312-123123",
                                    "type": "Legal Entity",
                                    "description": "Kuhic, Gislason and Kemmer"
                                }],
                            "shadow": false,
                            "currency": "EUR",
                            "breachInfo": [{
                                    "breachType": "CONSUMPTION",
                                    "timeframe": {
                                        "period": "quarterly",
                                        "startTime": "2019-10-01T00:00:00Z",
                                        "endTime": "2019-12-31T23:59:59Z"
                                    },
                                    "currentConsumption": "99950.0",
                                    "currentThreshold": "100000.0"
                                }]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "7dc95f0a-deba-47be-8f5d-6d0454ef271c",
                    "counterpartyName": "Uriel Johnson",
                    "counterpartyAccountNumber": "HU65109180019369738837536884",
                    "instructedAmount": {
                        "amount": "830.00",
                        "currencyCode": "EUR"
                    },
                    "description": "Order 00023162"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch order not found",
                    "errors": []
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch payment not found",
                    "errors": []
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "f7e4f0bf-6080-46be-bd5d-7dad2b054495",
                    "name": "Employee salaries",
                    "type": "SEPACT",
                    "creditDebitMixedIndicator": "CREDIT",
                    "status": "CANCELLED",
                    "totalTransactionsCount": 120,
                    "totalCreditTransactionsCount": 120,
                    "totalInstructedAmount": {
                        "amount": "322038.00",
                        "currencyCode": "EUR"
                    },
                    "totalCreditInstructedAmount": {
                        "amount": "322038.00",
                        "currencyCode": "EUR"
                    },
                    "account": {
                        "name": "Main Current",
                        "identification": {
                            "identification": "NL54ABNA2366058993",
                            "schemeName": "IBAN"
                        }
                    },
                    "requestedExecutionDate": "2012-01-01",
                    "fileName": "salaries-2020-01.csv",
                    "userFullName": "John Davis",
                    "uploadCompletedAt": "2019-12-31T23:55:31Z",
                    "canDelete": false,
                    "canCancel": false,
                    "approval": {
                        "id": "ac150312-1bec-4075-934f-23600886cb4e",
                        "userId": "64350fcf-ddd1-4cdc-b725-f6c76f89f7c2",
                        "externalUserId": "jdavis",
                        "userFullName": "John Davis",
                        "serviceAgreementId": "c94dc22f-381f-4127-a9f2-db2f5a314e41",
                        "itemId": "f7e4f0bf-6080-46be-bd5d-7dad2b054495",
                        "dataAccessItemId": "e8daae6b-0276-4533-b64d-e3c73afb47a0",
                        "resource": "Batches",
                        "function": "SEPACT",
                        "status": "PENDING",
                        "createdAt": "2019-12-31T23:56:08Z",
                        "records": [{
                                "id": "9e61d96d-fea3-44a4-8903-88d95eb266a8",
                                "userId": "f34feccc-0d0d-4365-982b-d6d1779e5aaf",
                                "externalUserId": "twilliams",
                                "userFullName": "Tobi Williams",
                                "approvalTypeId": "16f655f3-3abf-438d-8351-2c667d5a3c86",
                                "status": "APPROVED",
                                "createdAt": "2019-12-31T23:57:20Z"
                            }],
                        "canApprove": false,
                        "canReject": false,
                        "finalApprover": false
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                            "key": "BatchOrderCannotBeUpdated",
                            "context": {
                                "requestedStatus": "READY",
                                "expectedStatus": "CANCELLED"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch order ({{currentStatus}}) does not allow cancellation.",
                            "key": "BatchOrderCannotBeCancelled",
                            "context": {
                                "currentStatus": "PROCESSED"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "Only partially approved batch orders can be cancelled.",
                            "key": "BatchOrderWithoutApprovalsCannotBeCancelled"
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

class BatchUploadsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentBatchConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createBatchOrdersForId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchUploadId = requestParameters["batchUploadId"];
        if (_batchUploadId === null || _batchUploadId === undefined) {
            throw new Error('Required parameter batchUploadId was null or undefined when calling createBatchOrdersForId.');
        }
        const _confidentialType = requestParameters["confidentialType"];
        const _file = requestParameters["file"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_confidentialType !== undefined && _confidentialType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _confidentialType, 'confidentialType');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'multipart/form-data'
        ];
        const canConsumeForm = this.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        let convertFormParamsToString = false;
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new HttpParams({ encoder: this.encoder });
        }
        if (_file !== undefined) {
            formParams = formParams.append('file', _file) || formParams;
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}/batch-orders`, convertFormParamsToString ? formParams.toString() : formParams, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createBatchOrdersForIdUrl(requestParameters) {
        const _batchUploadId = requestParameters["batchUploadId"];
        if (_batchUploadId === null || _batchUploadId === undefined) {
            throw new Error('Required parameter batchUploadId was null or undefined when calling createBatchOrdersForId.');
        }
        const _confidentialType = requestParameters["confidentialType"];
        const _file = requestParameters["file"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_confidentialType !== undefined && _confidentialType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _confidentialType, 'confidentialType');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}/batch-orders${queryString ? `?${queryString}` : ''}`;
    }
    deleteBatchUploadById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchUploadId = requestParameters["batchUploadId"];
        if (_batchUploadId === null || _batchUploadId === undefined) {
            throw new Error('Required parameter batchUploadId was null or undefined when calling deleteBatchUploadById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchUploadByIdUrl(requestParameters) {
        const _batchUploadId = requestParameters["batchUploadId"];
        if (_batchUploadId === null || _batchUploadId === undefined) {
            throw new Error('Required parameter batchUploadId was null or undefined when calling deleteBatchUploadById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`;
    }
    getBatchUploadById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchUploadId = requestParameters["batchUploadId"];
        if (_batchUploadId === null || _batchUploadId === undefined) {
            throw new Error('Required parameter batchUploadId was null or undefined when calling getBatchUploadById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchUploadByIdUrl(requestParameters) {
        const _batchUploadId = requestParameters["batchUploadId"];
        if (_batchUploadId === null || _batchUploadId === undefined) {
            throw new Error('Required parameter batchUploadId was null or undefined when calling getBatchUploadById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`;
    }
    getBatchUploads(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-uploads`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchUploadsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/batch-uploads${queryString ? `?${queryString}` : ''}`;
    }
    putBatchUploadIdByBatchUploadId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchUploadId = requestParameters["batchUploadId"];
        if (_batchUploadId === null || _batchUploadId === undefined) {
            throw new Error('Required parameter batchUploadId was null or undefined when calling putBatchUploadIdByBatchUploadId.');
        }
        const _batchUploadPutRequest = requestParameters["batchUploadPutRequest"];
        if (_batchUploadPutRequest === null || _batchUploadPutRequest === undefined) {
            throw new Error('Required parameter batchUploadPutRequest was null or undefined when calling putBatchUploadIdByBatchUploadId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`, _batchUploadPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBatchUploadIdByBatchUploadIdUrl(requestParameters) {
        const _batchUploadId = requestParameters["batchUploadId"];
        if (_batchUploadId === null || _batchUploadId === undefined) {
            throw new Error('Required parameter batchUploadId was null or undefined when calling putBatchUploadIdByBatchUploadId.');
        }
        const _batchUploadPutRequest = requestParameters["batchUploadPutRequest"];
        if (_batchUploadPutRequest === null || _batchUploadPutRequest === undefined) {
            throw new Error('Required parameter batchUploadPutRequest was null or undefined when calling putBatchUploadIdByBatchUploadId.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-uploads/${encodeURIComponent(String(_batchUploadId))}`;
    }
    startBatchUpload(requestParameters, observe = 'body', reportProgress = false, options) {
        const _startUploadBatchOrdersPostRequest = requestParameters["startUploadBatchOrdersPostRequest"];
        if (_startUploadBatchOrdersPostRequest === null || _startUploadBatchOrdersPostRequest === undefined) {
            throw new Error('Required parameter startUploadBatchOrdersPostRequest was null or undefined when calling startBatchUpload.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/batch-uploads`, _startUploadBatchOrdersPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    startBatchUploadUrl(requestParameters) {
        const _startUploadBatchOrdersPostRequest = requestParameters["startUploadBatchOrdersPostRequest"];
        if (_startUploadBatchOrdersPostRequest === null || _startUploadBatchOrdersPostRequest === undefined) {
            throw new Error('Required parameter startUploadBatchOrdersPostRequest was null or undefined when calling startBatchUpload.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-uploads`;
    }
}
BatchUploadsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchUploadsHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_BATCH_BASE_PATH, optional: true }, { token: PaymentBatchConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BatchUploadsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchUploadsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchUploadsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_BATCH_BASE_PATH]
                }] }, { type: PaymentBatchConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BatchUploadsHttpServiceCreateBatchOrdersForIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}/batch-orders",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "id": "b51c4261-54c9-42e5-b5ae-4c1390b890d8",
                    "status": "DONE",
                    "totalBatchOrdersCount": 3,
                    "totalTransactionsCount": 10211,
                    "size": 94371840,
                    "uploadedSize": 94371840
                }
            },
            {
                status: 202,
                body: {
                    "id": "0288dde3-9b89-4997-9e57-54684bf3c3c1",
                    "status": "DUPLICATE",
                    "totalBatchOrdersCount": 3,
                    "totalTransactionsCount": 10211,
                    "size": 94371840,
                    "uploadedSize": 94371840
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The request was rejected because its size exceeds the configured maximum ({{maxSize}})",
                            "key": "UploadExceedsMaxSize",
                            "context": {
                                "maxSize": "104857600"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Total amount of batch ({{actual}}) does not match the expected amount ({{expected}})",
                            "key": "TotalAmountMismatch",
                            "context": {
                                "actual": "2400123.00",
                                "expected": "2398675.00"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                            "key": "TotalBatchMismatch",
                            "context": {
                                "actual": "3",
                                "expected": "4"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The integer part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of digits {{maximum}}",
                            "key": "AmountContainsTooManyDigits",
                            "context": {
                                "amount": "1234567890123456789.123456",
                                "fieldName": "batchTotalAmount",
                                "maximum": "18"
                            }
                        }, {
                            "message": "The fractional part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of decimal digits {{maximum}}",
                            "key": "AmountContainsTooManyDecimalDigits",
                            "context": {
                                "amount": "1234567890123456789.123456",
                                "fieldName": "batchTotalAmount",
                                "maximum": "5"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadsHttpServiceDeleteBatchUploadByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch upload ({{currentStatus}}) does not allow deleting the batch upload.",
                            "key": "BatchUploadCannotBeDeleted",
                            "context": {
                                "currentStatus": "OPEN"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadsHttpServiceGetBatchUploadByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 18874368
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 42467328
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 70778880
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "UPLOADED",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 94371840
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "completedAt": "2019-02-22T14:08:34Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "DONE",
                    "file": {
                        "name": "salaries-2019-12.csv",
                        "size": 54371840,
                        "uploadedSize": 54371840,
                        "lastModified": "2019-12-22T08:06:00Z"
                    },
                    "digest": {
                        "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                        "algorithm": "SHA-256"
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 1,
                    "createdAt": "2019-12-24T07:09:33Z",
                    "completedAt": "2019-12-24T07:11:09Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                    "status": "DUPLICATE",
                    "file": {
                        "name": "salaries-2019-12.csv",
                        "size": 54371840,
                        "uploadedSize": 54371840,
                        "lastModified": "2019-12-22T08:06:00Z"
                    },
                    "digest": {
                        "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                        "algorithm": "SHA-256"
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 1,
                    "createdAt": "2019-12-28T09:11:13Z",
                    "completedAt": "2019-12-28T09:13:23Z",
                    "duplicates": [{
                            "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-24T07:09:33Z",
                            "completedAt": "2019-12-24T07:11:09Z"
                        }],
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "80467759-0178-4231-af61-003bf1bc842b",
                    "totalBatchOrdersCount": 3,
                    "size": 94371840,
                    "uploadedSize": 94371840,
                    "status": "FAILED",
                    "errors": [{
                            "message": "The actual total amount ({{totalAmount}}) does not match the expected total amount ({{headerTotalAmount}})",
                            "key": "TotalAmountMismatch",
                            "context": {
                                "totalAmount": "2400123.00",
                                "headerTotalAmount": "2398675.00"
                            }
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "9151b4d0-f058-4b01-8bed-474dfc34831e",
                    "totalBatchOrdersCount": 4,
                    "size": 94371840,
                    "uploadedSize": 94371840,
                    "status": "FAILED",
                    "errors": [{
                            "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                            "key": "TotalBatchMismatch",
                            "context": {
                                "actual": "3",
                                "expected": "4"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadsHttpServiceGetBatchUploadsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchUploads": [{
                            "id": "3d0e77b1-08fc-490d-898c-694169c76a2f",
                            "status": "FAILED",
                            "file": {
                                "name": "salaries-2019-02.csv",
                                "size": 94370816
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 3,
                            "createdAt": "2019-02-22T13:14:37Z"
                        }, {
                            "id": "82c85c38-35af-4fa8-87e5-d8374937cac2",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-02.csv",
                                "size": 94371840,
                                "uploadedSize": 94371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "d6099d20c5866e317bebbc69cc0eb681",
                                "algorithm": "MD5"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 3,
                            "createdAt": "2019-02-22T13:44:02Z",
                            "completedAt": "2019-02-22T14:08:34Z"
                        }, {
                            "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-24T07:09:33Z",
                            "completedAt": "2019-12-24T07:11:09Z"
                        }, {
                            "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                            "status": "DUPLICATE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-28T09:11:13Z",
                            "completedAt": "2019-12-28T09:13:23Z"
                        }]
                }
            },
        ]
    }]);
const BatchUploadsHttpServicePutBatchUploadIdByBatchUploadIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                            "key": "BatchUploadCannotBeUpdated",
                            "context": {
                                "requestedStatus": "OPEN",
                                "expectedStatus": "DONE"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch upload ({{currentStatus}}) does not allow updating the status.",
                            "key": "BatchUploadCannotBeUpdated",
                            "context": {
                                "currentStatus": "OPEN"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadsHttpServiceStartBatchUploadMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "batchUploadId": "5490bc83-9ea1-4b28-a465-2bb541e7c90b",
                    "status": "OPEN"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "File extension ({{actual}}) is not one of the supported ones {{expected}}",
                            "key": "UploadFileExtensionInvalid",
                            "context": {
                                "actual": "xls",
                                "expected": "{csv}"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "File size ({{actual}}) exceeds the configured maximum ({{expected}})",
                            "key": "UploadMaxFileSize",
                            "context": {
                                "actual": "115343360",
                                "expected": "104857600"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}/batch-orders",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "id": "b51c4261-54c9-42e5-b5ae-4c1390b890d8",
                    "status": "DONE",
                    "totalBatchOrdersCount": 3,
                    "totalTransactionsCount": 10211,
                    "size": 94371840,
                    "uploadedSize": 94371840
                }
            },
            {
                status: 202,
                body: {
                    "id": "0288dde3-9b89-4997-9e57-54684bf3c3c1",
                    "status": "DUPLICATE",
                    "totalBatchOrdersCount": 3,
                    "totalTransactionsCount": 10211,
                    "size": 94371840,
                    "uploadedSize": 94371840
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The request was rejected because its size exceeds the configured maximum ({{maxSize}})",
                            "key": "UploadExceedsMaxSize",
                            "context": {
                                "maxSize": "104857600"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Total amount of batch ({{actual}}) does not match the expected amount ({{expected}})",
                            "key": "TotalAmountMismatch",
                            "context": {
                                "actual": "2400123.00",
                                "expected": "2398675.00"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                            "key": "TotalBatchMismatch",
                            "context": {
                                "actual": "3",
                                "expected": "4"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The integer part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of digits {{maximum}}",
                            "key": "AmountContainsTooManyDigits",
                            "context": {
                                "amount": "1234567890123456789.123456",
                                "fieldName": "batchTotalAmount",
                                "maximum": "18"
                            }
                        }, {
                            "message": "The fractional part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of decimal digits {{maximum}}",
                            "key": "AmountContainsTooManyDecimalDigits",
                            "context": {
                                "amount": "1234567890123456789.123456",
                                "fieldName": "batchTotalAmount",
                                "maximum": "5"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch upload ({{currentStatus}}) does not allow deleting the batch upload.",
                            "key": "BatchUploadCannotBeDeleted",
                            "context": {
                                "currentStatus": "OPEN"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 18874368
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 42467328
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 70778880
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "UPLOADED",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 94371840
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "completedAt": "2019-02-22T14:08:34Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "DONE",
                    "file": {
                        "name": "salaries-2019-12.csv",
                        "size": 54371840,
                        "uploadedSize": 54371840,
                        "lastModified": "2019-12-22T08:06:00Z"
                    },
                    "digest": {
                        "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                        "algorithm": "SHA-256"
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 1,
                    "createdAt": "2019-12-24T07:09:33Z",
                    "completedAt": "2019-12-24T07:11:09Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                    "status": "DUPLICATE",
                    "file": {
                        "name": "salaries-2019-12.csv",
                        "size": 54371840,
                        "uploadedSize": 54371840,
                        "lastModified": "2019-12-22T08:06:00Z"
                    },
                    "digest": {
                        "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                        "algorithm": "SHA-256"
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 1,
                    "createdAt": "2019-12-28T09:11:13Z",
                    "completedAt": "2019-12-28T09:13:23Z",
                    "duplicates": [{
                            "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-24T07:09:33Z",
                            "completedAt": "2019-12-24T07:11:09Z"
                        }],
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "80467759-0178-4231-af61-003bf1bc842b",
                    "totalBatchOrdersCount": 3,
                    "size": 94371840,
                    "uploadedSize": 94371840,
                    "status": "FAILED",
                    "errors": [{
                            "message": "The actual total amount ({{totalAmount}}) does not match the expected total amount ({{headerTotalAmount}})",
                            "key": "TotalAmountMismatch",
                            "context": {
                                "totalAmount": "2400123.00",
                                "headerTotalAmount": "2398675.00"
                            }
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "9151b4d0-f058-4b01-8bed-474dfc34831e",
                    "totalBatchOrdersCount": 4,
                    "size": 94371840,
                    "uploadedSize": 94371840,
                    "status": "FAILED",
                    "errors": [{
                            "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                            "key": "TotalBatchMismatch",
                            "context": {
                                "actual": "3",
                                "expected": "4"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchUploads": [{
                            "id": "3d0e77b1-08fc-490d-898c-694169c76a2f",
                            "status": "FAILED",
                            "file": {
                                "name": "salaries-2019-02.csv",
                                "size": 94370816
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 3,
                            "createdAt": "2019-02-22T13:14:37Z"
                        }, {
                            "id": "82c85c38-35af-4fa8-87e5-d8374937cac2",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-02.csv",
                                "size": 94371840,
                                "uploadedSize": 94371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "d6099d20c5866e317bebbc69cc0eb681",
                                "algorithm": "MD5"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 3,
                            "createdAt": "2019-02-22T13:44:02Z",
                            "completedAt": "2019-02-22T14:08:34Z"
                        }, {
                            "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-24T07:09:33Z",
                            "completedAt": "2019-12-24T07:11:09Z"
                        }, {
                            "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                            "status": "DUPLICATE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-28T09:11:13Z",
                            "completedAt": "2019-12-28T09:13:23Z"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                            "key": "BatchUploadCannotBeUpdated",
                            "context": {
                                "requestedStatus": "OPEN",
                                "expectedStatus": "DONE"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch upload ({{currentStatus}}) does not allow updating the status.",
                            "key": "BatchUploadCannotBeUpdated",
                            "context": {
                                "currentStatus": "OPEN"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "batchUploadId": "5490bc83-9ea1-4b28-a465-2bb541e7c90b",
                    "status": "OPEN"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "File extension ({{actual}}) is not one of the supported ones {{expected}}",
                            "key": "UploadFileExtensionInvalid",
                            "context": {
                                "actual": "xls",
                                "expected": "{csv}"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "File size ({{actual}}) exceeds the configured maximum ({{expected}})",
                            "key": "UploadMaxFileSize",
                            "context": {
                                "actual": "115343360",
                                "expected": "104857600"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);

export { ApprovalStatus, BatchOrdersHttpService, BatchOrdersHttpServiceDeleteBatchOrderIdByBatchOrderIdMocksProvider, BatchOrdersHttpServiceDeleteBatchPaymentByIdMocksProvider, BatchOrdersHttpServiceGetBatchOrdersByIdMocksProvider, BatchOrdersHttpServiceGetBatchOrdersMocksProvider, BatchOrdersHttpServiceGetBatchPaymentByIdMocksProvider, BatchOrdersHttpServiceGetBatchPaymentsByIdMocksProvider, BatchOrdersHttpServiceMocksProvider, BatchOrdersHttpServicePostBatchOrdersMocksProvider, BatchOrdersHttpServicePostBatchPaymentsMocksProvider, BatchOrdersHttpServicePutApprovalsByIdMocksProvider, BatchOrdersHttpServicePutBatchPaymentByIdMocksProvider, BatchOrdersHttpServiceUpdateBatchOrderByIdMocksProvider, BatchPaymentStatus, BatchStatus, BatchUploadsHttpService, BatchUploadsHttpServiceCreateBatchOrdersForIdMocksProvider, BatchUploadsHttpServiceDeleteBatchUploadByIdMocksProvider, BatchUploadsHttpServiceGetBatchUploadByIdMocksProvider, BatchUploadsHttpServiceGetBatchUploadsMocksProvider, BatchUploadsHttpServiceMocksProvider, BatchUploadsHttpServicePutBatchUploadIdByBatchUploadIdMocksProvider, BatchUploadsHttpServiceStartBatchUploadMocksProvider, BreachInfo, COLLECTION_FORMATS, CONFIG_TOKEN, ChargeBearer, CreditDebitIndicator, CreditDebitMixedIndicator, ExchangeRateInformation, InstructionPriority, InvolvedPartyRole, PAYMENT_BATCH_BASE_PATH, PaymentAction, PaymentBatchApiModule, PaymentBatchConfiguration, PaymentMode, RecordStatus, RemittanceInformation, Schedule, SchemeNames, Status, UploadStatus };
//# sourceMappingURL=backbase-payment-batch-http-ang.js.map
