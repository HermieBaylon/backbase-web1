import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { PAYMENT_BATCH_BASE_PATH } from '../variables';
import { PaymentBatchConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class BatchOrdersHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentBatchConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteBatchOrderIdByBatchOrderId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchOrderIdByBatchOrderId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchOrderIdByBatchOrderIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchOrderIdByBatchOrderId.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`;
    }
    deleteBatchPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling deleteBatchPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchPaymentByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling deleteBatchPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;
    }
    getBatchOrders(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _amountFrom = requestParameters["amountFrom"];
        const _amountTo = requestParameters["amountTo"];
        const _executionDate = requestParameters["executionDate"];
        const _executionDateFrom = requestParameters["executionDateFrom"];
        const _executionDateTo = requestParameters["executionDateTo"];
        const _status = requestParameters["status"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _dynamicCreditDebitMixedIndicator = requestParameters["dynamicCreditDebitMixedIndicator"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_amountFrom !== undefined && _amountFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
        }
        if (_amountTo !== undefined && _amountTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
        }
        if (_executionDate !== undefined && _executionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
        }
        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
        }
        if (_executionDateTo !== undefined && _executionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_dynamicCreditDebitMixedIndicator !== undefined && _dynamicCreditDebitMixedIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dynamicCreditDebitMixedIndicator, 'dynamicCreditDebitMixedIndicator');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-orders`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchOrdersUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _amountFrom = requestParameters["amountFrom"];
        const _amountTo = requestParameters["amountTo"];
        const _executionDate = requestParameters["executionDate"];
        const _executionDateFrom = requestParameters["executionDateFrom"];
        const _executionDateTo = requestParameters["executionDateTo"];
        const _status = requestParameters["status"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _dynamicCreditDebitMixedIndicator = requestParameters["dynamicCreditDebitMixedIndicator"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_amountFrom !== undefined && _amountFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
        }
        if (_amountTo !== undefined && _amountTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
        }
        if (_executionDate !== undefined && _executionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
        }
        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
        }
        if (_executionDateTo !== undefined && _executionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_dynamicCreditDebitMixedIndicator !== undefined && _dynamicCreditDebitMixedIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dynamicCreditDebitMixedIndicator, 'dynamicCreditDebitMixedIndicator');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/batch-orders${queryString ? `?${queryString}` : ''}`;
    }
    getBatchOrdersById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchOrdersById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchOrdersByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchOrdersById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`;
    }
    getBatchPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling getBatchPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchPaymentByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling getBatchPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;
    }
    getBatchPaymentsById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentsById.');
        }
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchPaymentsByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentsById.');
        }
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments${queryString ? `?${queryString}` : ''}`;
    }
    postBatchOrders(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrdersPostRequest = requestParameters["batchOrdersPostRequest"];
        if (_batchOrdersPostRequest === null || _batchOrdersPostRequest === undefined) {
            throw new Error('Required parameter batchOrdersPostRequest was null or undefined when calling postBatchOrders.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/batch-orders`, _batchOrdersPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchOrdersUrl(requestParameters) {
        const _batchOrdersPostRequest = requestParameters["batchOrdersPostRequest"];
        if (_batchOrdersPostRequest === null || _batchOrdersPostRequest === undefined) {
            throw new Error('Required parameter batchOrdersPostRequest was null or undefined when calling postBatchOrders.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders`;
    }
    postBatchPayments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling postBatchPayments.');
        }
        const _batchPaymentsPostRequest = requestParameters["batchPaymentsPostRequest"];
        if (_batchPaymentsPostRequest === null || _batchPaymentsPostRequest === undefined) {
            throw new Error('Required parameter batchPaymentsPostRequest was null or undefined when calling postBatchPayments.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`, _batchPaymentsPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchPaymentsUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling postBatchPayments.');
        }
        const _batchPaymentsPostRequest = requestParameters["batchPaymentsPostRequest"];
        if (_batchPaymentsPostRequest === null || _batchPaymentsPostRequest === undefined) {
            throw new Error('Required parameter batchPaymentsPostRequest was null or undefined when calling postBatchPayments.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments`;
    }
    putApprovalsById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling putApprovalsById.');
        }
        const _batchOrderApprovalPutRequest = requestParameters["batchOrderApprovalPutRequest"];
        if (_batchOrderApprovalPutRequest === null || _batchOrderApprovalPutRequest === undefined) {
            throw new Error('Required parameter batchOrderApprovalPutRequest was null or undefined when calling putApprovalsById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/approvals`, _batchOrderApprovalPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putApprovalsByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling putApprovalsById.');
        }
        const _batchOrderApprovalPutRequest = requestParameters["batchOrderApprovalPutRequest"];
        if (_batchOrderApprovalPutRequest === null || _batchOrderApprovalPutRequest === undefined) {
            throw new Error('Required parameter batchOrderApprovalPutRequest was null or undefined when calling putApprovalsById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/approvals`;
    }
    putBatchPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling putBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling putBatchPaymentById.');
        }
        const _batchPaymentsPutRequest = requestParameters["batchPaymentsPutRequest"];
        if (_batchPaymentsPutRequest === null || _batchPaymentsPutRequest === undefined) {
            throw new Error('Required parameter batchPaymentsPutRequest was null or undefined when calling putBatchPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`, _batchPaymentsPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBatchPaymentByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling putBatchPaymentById.');
        }
        const _batchPaymentId = requestParameters["batchPaymentId"];
        if (_batchPaymentId === null || _batchPaymentId === undefined) {
            throw new Error('Required parameter batchPaymentId was null or undefined when calling putBatchPaymentById.');
        }
        const _batchPaymentsPutRequest = requestParameters["batchPaymentsPutRequest"];
        if (_batchPaymentsPutRequest === null || _batchPaymentsPutRequest === undefined) {
            throw new Error('Required parameter batchPaymentsPutRequest was null or undefined when calling putBatchPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}/batch-payments/${encodeURIComponent(String(_batchPaymentId))}`;
    }
    updateBatchOrderById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling updateBatchOrderById.');
        }
        const _batchOrderPutRequest = requestParameters["batchOrderPutRequest"];
        if (_batchOrderPutRequest === null || _batchOrderPutRequest === undefined) {
            throw new Error('Required parameter batchOrderPutRequest was null or undefined when calling updateBatchOrderById.');
        }
        const _dryRun = requestParameters["dryRun"];
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_dryRun !== undefined && _dryRun !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
        }
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}`, _batchOrderPutRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateBatchOrderByIdUrl(requestParameters) {
        const _batchOrderId = requestParameters["batchOrderId"];
        if (_batchOrderId === null || _batchOrderId === undefined) {
            throw new Error('Required parameter batchOrderId was null or undefined when calling updateBatchOrderById.');
        }
        const _batchOrderPutRequest = requestParameters["batchOrderPutRequest"];
        if (_batchOrderPutRequest === null || _batchOrderPutRequest === undefined) {
            throw new Error('Required parameter batchOrderPutRequest was null or undefined when calling updateBatchOrderById.');
        }
        const _dryRun = requestParameters["dryRun"];
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_dryRun !== undefined && _dryRun !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
        }
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/batch-orders/${encodeURIComponent(String(_batchOrderId))}${queryString ? `?${queryString}` : ''}`;
    }
}
BatchOrdersHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchOrdersHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_BATCH_BASE_PATH, optional: true }, { token: i2.PaymentBatchConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BatchOrdersHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchOrdersHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchOrdersHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_BATCH_BASE_PATH]
                }] }, { type: i2.PaymentBatchConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,