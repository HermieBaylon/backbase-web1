import { createMocks } from '@backbase/foundation-ang/data-http';
export const BatchUploadsHttpServiceCreateBatchOrdersForIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}/batch-orders",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "id": "b51c4261-54c9-42e5-b5ae-4c1390b890d8",
                    "status": "DONE",
                    "totalBatchOrdersCount": 3,
                    "totalTransactionsCount": 10211,
                    "size": 94371840,
                    "uploadedSize": 94371840
                }
            },
            {
                status: 202,
                body: {
                    "id": "0288dde3-9b89-4997-9e57-54684bf3c3c1",
                    "status": "DUPLICATE",
                    "totalBatchOrdersCount": 3,
                    "totalTransactionsCount": 10211,
                    "size": 94371840,
                    "uploadedSize": 94371840
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The request was rejected because its size exceeds the configured maximum ({{maxSize}})",
                            "key": "UploadExceedsMaxSize",
                            "context": {
                                "maxSize": "104857600"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Total amount of batch ({{actual}}) does not match the expected amount ({{expected}})",
                            "key": "TotalAmountMismatch",
                            "context": {
                                "actual": "2400123.00",
                                "expected": "2398675.00"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                            "key": "TotalBatchMismatch",
                            "context": {
                                "actual": "3",
                                "expected": "4"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The integer part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of digits {{maximum}}",
                            "key": "AmountContainsTooManyDigits",
                            "context": {
                                "amount": "1234567890123456789.123456",
                                "fieldName": "batchTotalAmount",
                                "maximum": "18"
                            }
                        }, {
                            "message": "The fractional part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of decimal digits {{maximum}}",
                            "key": "AmountContainsTooManyDecimalDigits",
                            "context": {
                                "amount": "1234567890123456789.123456",
                                "fieldName": "batchTotalAmount",
                                "maximum": "5"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadsHttpServiceDeleteBatchUploadByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch upload ({{currentStatus}}) does not allow deleting the batch upload.",
                            "key": "BatchUploadCannotBeDeleted",
                            "context": {
                                "currentStatus": "OPEN"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadsHttpServiceGetBatchUploadByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 18874368
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 42467328
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 70778880
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "UPLOADED",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 94371840
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "completedAt": "2019-02-22T14:08:34Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "DONE",
                    "file": {
                        "name": "salaries-2019-12.csv",
                        "size": 54371840,
                        "uploadedSize": 54371840,
                        "lastModified": "2019-12-22T08:06:00Z"
                    },
                    "digest": {
                        "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                        "algorithm": "SHA-256"
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 1,
                    "createdAt": "2019-12-24T07:09:33Z",
                    "completedAt": "2019-12-24T07:11:09Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                    "status": "DUPLICATE",
                    "file": {
                        "name": "salaries-2019-12.csv",
                        "size": 54371840,
                        "uploadedSize": 54371840,
                        "lastModified": "2019-12-22T08:06:00Z"
                    },
                    "digest": {
                        "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                        "algorithm": "SHA-256"
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 1,
                    "createdAt": "2019-12-28T09:11:13Z",
                    "completedAt": "2019-12-28T09:13:23Z",
                    "duplicates": [{
                            "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-24T07:09:33Z",
                            "completedAt": "2019-12-24T07:11:09Z"
                        }],
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "80467759-0178-4231-af61-003bf1bc842b",
                    "totalBatchOrdersCount": 3,
                    "size": 94371840,
                    "uploadedSize": 94371840,
                    "status": "FAILED",
                    "errors": [{
                            "message": "The actual total amount ({{totalAmount}}) does not match the expected total amount ({{headerTotalAmount}})",
                            "key": "TotalAmountMismatch",
                            "context": {
                                "totalAmount": "2400123.00",
                                "headerTotalAmount": "2398675.00"
                            }
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "9151b4d0-f058-4b01-8bed-474dfc34831e",
                    "totalBatchOrdersCount": 4,
                    "size": 94371840,
                    "uploadedSize": 94371840,
                    "status": "FAILED",
                    "errors": [{
                            "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                            "key": "TotalBatchMismatch",
                            "context": {
                                "actual": "3",
                                "expected": "4"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadsHttpServiceGetBatchUploadsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchUploads": [{
                            "id": "3d0e77b1-08fc-490d-898c-694169c76a2f",
                            "status": "FAILED",
                            "file": {
                                "name": "salaries-2019-02.csv",
                                "size": 94370816
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 3,
                            "createdAt": "2019-02-22T13:14:37Z"
                        }, {
                            "id": "82c85c38-35af-4fa8-87e5-d8374937cac2",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-02.csv",
                                "size": 94371840,
                                "uploadedSize": 94371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "d6099d20c5866e317bebbc69cc0eb681",
                                "algorithm": "MD5"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 3,
                            "createdAt": "2019-02-22T13:44:02Z",
                            "completedAt": "2019-02-22T14:08:34Z"
                        }, {
                            "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-24T07:09:33Z",
                            "completedAt": "2019-12-24T07:11:09Z"
                        }, {
                            "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                            "status": "DUPLICATE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-28T09:11:13Z",
                            "completedAt": "2019-12-28T09:13:23Z"
                        }]
                }
            },
        ]
    }]);
export const BatchUploadsHttpServicePutBatchUploadIdByBatchUploadIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                            "key": "BatchUploadCannotBeUpdated",
                            "context": {
                                "requestedStatus": "OPEN",
                                "expectedStatus": "DONE"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch upload ({{currentStatus}}) does not allow updating the status.",
                            "key": "BatchUploadCannotBeUpdated",
                            "context": {
                                "currentStatus": "OPEN"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadsHttpServiceStartBatchUploadMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/batch-uploads",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "batchUploadId": "5490bc83-9ea1-4b28-a465-2bb541e7c90b",
                    "status": "OPEN"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "File extension ({{actual}}) is not one of the supported ones {{expected}}",
                            "key": "UploadFileExtensionInvalid",
                            "context": {
                                "actual": "xls",
                                "expected": "{csv}"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "File size ({{actual}}) exceeds the configured maximum ({{expected}})",
                            "key": "UploadMaxFileSize",
                            "context": {
                                "actual": "115343360",
                                "expected": "104857600"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}/batch-orders",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "id": "b51c4261-54c9-42e5-b5ae-4c1390b890d8",
                    "status": "DONE",
                    "totalBatchOrdersCount": 3,
                    "totalTransactionsCount": 10211,
                    "size": 94371840,
                    "uploadedSize": 94371840
                }
            },
            {
                status: 202,
                body: {
                    "id": "0288dde3-9b89-4997-9e57-54684bf3c3c1",
                    "status": "DUPLICATE",
                    "totalBatchOrdersCount": 3,
                    "totalTransactionsCount": 10211,
                    "size": 94371840,
                    "uploadedSize": 94371840
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The request was rejected because its size exceeds the configured maximum ({{maxSize}})",
                            "key": "UploadExceedsMaxSize",
                            "context": {
                                "maxSize": "104857600"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Total amount of batch ({{actual}}) does not match the expected amount ({{expected}})",
                            "key": "TotalAmountMismatch",
                            "context": {
                                "actual": "2400123.00",
                                "expected": "2398675.00"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                            "key": "TotalBatchMismatch",
                            "context": {
                                "actual": "3",
                                "expected": "4"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The integer part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of digits {{maximum}}",
                            "key": "AmountContainsTooManyDigits",
                            "context": {
                                "amount": "1234567890123456789.123456",
                                "fieldName": "batchTotalAmount",
                                "maximum": "18"
                            }
                        }, {
                            "message": "The fractional part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of decimal digits {{maximum}}",
                            "key": "AmountContainsTooManyDecimalDigits",
                            "context": {
                                "amount": "1234567890123456789.123456",
                                "fieldName": "batchTotalAmount",
                                "maximum": "5"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch upload ({{currentStatus}}) does not allow deleting the batch upload.",
                            "key": "BatchUploadCannotBeDeleted",
                            "context": {
                                "currentStatus": "OPEN"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 18874368
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 42467328
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "OPEN",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 70778880
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "UPLOADED",
                    "file": {
                        "name": "salaries-2019-02.csv",
                        "size": 94371840,
                        "uploadedSize": 94371840
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 3,
                    "createdAt": "2019-02-22T13:44:02Z",
                    "completedAt": "2019-02-22T14:08:34Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                    "status": "DONE",
                    "file": {
                        "name": "salaries-2019-12.csv",
                        "size": 54371840,
                        "uploadedSize": 54371840,
                        "lastModified": "2019-12-22T08:06:00Z"
                    },
                    "digest": {
                        "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                        "algorithm": "SHA-256"
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 1,
                    "createdAt": "2019-12-24T07:09:33Z",
                    "completedAt": "2019-12-24T07:11:09Z",
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                    "status": "DUPLICATE",
                    "file": {
                        "name": "salaries-2019-12.csv",
                        "size": 54371840,
                        "uploadedSize": 54371840,
                        "lastModified": "2019-12-22T08:06:00Z"
                    },
                    "digest": {
                        "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                        "algorithm": "SHA-256"
                    },
                    "batchFileType": "BB_SEPACT_CSV",
                    "totalBatchOrdersCount": 1,
                    "createdAt": "2019-12-28T09:11:13Z",
                    "completedAt": "2019-12-28T09:13:23Z",
                    "duplicates": [{
                            "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-24T07:09:33Z",
                            "completedAt": "2019-12-24T07:11:09Z"
                        }],
                    "errors": []
                }
            },
            {
                status: 200,
                body: {
                    "id": "80467759-0178-4231-af61-003bf1bc842b",
                    "totalBatchOrdersCount": 3,
                    "size": 94371840,
                    "uploadedSize": 94371840,
                    "status": "FAILED",
                    "errors": [{
                            "message": "The actual total amount ({{totalAmount}}) does not match the expected total amount ({{headerTotalAmount}})",
                            "key": "TotalAmountMismatch",
                            "context": {
                                "totalAmount": "2400123.00",
                                "headerTotalAmount": "2398675.00"
                            }
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "9151b4d0-f058-4b01-8bed-474dfc34831e",
                    "totalBatchOrdersCount": 4,
                    "size": 94371840,
                    "uploadedSize": 94371840,
                    "status": "FAILED",
                    "errors": [{
                            "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                            "key": "TotalBatchMismatch",
                            "context": {
                                "actual": "3",
                                "expected": "4"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchUploads": [{
                            "id": "3d0e77b1-08fc-490d-898c-694169c76a2f",
                            "status": "FAILED",
                            "file": {
                                "name": "salaries-2019-02.csv",
                                "size": 94370816
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 3,
                            "createdAt": "2019-02-22T13:14:37Z"
                        }, {
                            "id": "82c85c38-35af-4fa8-87e5-d8374937cac2",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-02.csv",
                                "size": 94371840,
                                "uploadedSize": 94371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "d6099d20c5866e317bebbc69cc0eb681",
                                "algorithm": "MD5"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 3,
                            "createdAt": "2019-02-22T13:44:02Z",
                            "completedAt": "2019-02-22T14:08:34Z"
                        }, {
                            "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                            "status": "DONE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-24T07:09:33Z",
                            "completedAt": "2019-12-24T07:11:09Z"
                        }, {
                            "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                            "status": "DUPLICATE",
                            "file": {
                                "name": "salaries-2019-12.csv",
                                "size": 54371840,
                                "uploadedSize": 54371840,
                                "lastModified": "2019-12-22T08:06:00Z"
                            },
                            "digest": {
                                "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                "algorithm": "SHA-256"
                            },
                            "batchFileType": "BB_SEPACT_CSV",
                            "totalBatchOrdersCount": 1,
                            "createdAt": "2019-12-28T09:11:13Z",
                            "completedAt": "2019-12-28T09:13:23Z"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                            "key": "BatchUploadCannotBeUpdated",
                            "context": {
                                "requestedStatus": "OPEN",
                                "expectedStatus": "DONE"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict",
                    "errors": [{
                            "message": "The current status of the batch upload ({{currentStatus}}) does not allow updating the status.",
                            "key": "BatchUploadCannotBeUpdated",
                            "context": {
                                "currentStatus": "OPEN"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/batch-uploads",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "batchUploadId": "5490bc83-9ea1-4b28-a465-2bb541e7c90b",
                    "status": "OPEN"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "File extension ({{actual}}) is not one of the supported ones {{expected}}",
                            "key": "UploadFileExtensionInvalid",
                            "context": {
                                "actual": "xls",
                                "expected": "{csv}"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "File size ({{actual}}) exceeds the configured maximum ({{expected}})",
                            "key": "UploadMaxFileSize",
                            "context": {
                                "actual": "115343360",
                                "expected": "104857600"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,