(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/payment-batch-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payment-batch-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ApprovalStatus = {
        PENDING: 'PENDING',
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED'
    };

    var BatchPaymentStatus = {
        REJECTED: 'REJECTED'
    };

    var BatchStatus = {
        OPEN: 'OPEN',
        CLOSED: 'CLOSED',
        DRAFT: 'DRAFT',
        INVALID: 'INVALID',
        VALID: 'VALID',
        ENTERED: 'ENTERED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED',
        READY: 'READY',
        ACKNOWLEDGED: 'ACKNOWLEDGED',
        DOWNLOADING: 'DOWNLOADING',
        ACCEPTED: 'ACCEPTED',
        PROCESSED: 'PROCESSED'
    };

    exports.BreachInfo = void 0;
    (function (BreachInfo) {
        BreachInfo.BreachTypeEnum = {
            THRESHOLD: 'THRESHOLD',
            CONSUMPTION: 'CONSUMPTION'
        };
        BreachInfo.BreachedLimitTypeEnum = {
            PERIODIC: 'PERIODIC',
            TRANSACTIONAL: 'TRANSACTIONAL'
        };
    })(exports.BreachInfo || (exports.BreachInfo = {}));

    var ChargeBearer = {
        OUR: 'OUR',
        BEN: 'BEN',
        SHA: 'SHA'
    };

    var CreditDebitIndicator = {
        CREDIT: 'CREDIT',
        DEBIT: 'DEBIT'
    };

    var CreditDebitMixedIndicator = {
        CREDIT: 'CREDIT',
        DEBIT: 'DEBIT',
        MIXED: 'MIXED'
    };

    exports.ExchangeRateInformation = void 0;
    (function (ExchangeRateInformation) {
        ExchangeRateInformation.RateTypeEnum = {
            ACTUAL: 'ACTUAL',
            INDICATIVE: 'INDICATIVE',
            AGREED: 'AGREED'
        };
    })(exports.ExchangeRateInformation || (exports.ExchangeRateInformation = {}));

    var InstructionPriority = {
        NORM: 'NORM',
        HIGH: 'HIGH'
    };

    var InvolvedPartyRole = {
        CREDITOR: 'CREDITOR',
        DEBTOR: 'DEBTOR'
    };

    var PaymentAction = {
        APPROVE: 'APPROVE',
        FINALAPPROVE: 'FINAL_APPROVE',
        REJECT: 'REJECT',
        CANCEL: 'CANCEL',
        DELETE: 'DELETE',
        EDIT: 'EDIT'
    };

    var PaymentMode = {
        SINGLE: 'SINGLE',
        RECURRING: 'RECURRING'
    };

    var RecordStatus = {
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED'
    };

    exports.RemittanceInformation = void 0;
    (function (RemittanceInformation) {
        RemittanceInformation.TypeEnum = {
            STRUCTURED: 'STRUCTURED',
            UNSTRUCTURED: 'UNSTRUCTURED'
        };
    })(exports.RemittanceInformation || (exports.RemittanceInformation = {}));

    exports.Schedule = void 0;
    (function (Schedule) {
        Schedule.NonWorkingDayExecutionStrategyEnum = {
            BEFORE: 'BEFORE',
            AFTER: 'AFTER',
            NONE: 'NONE'
        };
        Schedule.TransferFrequencyEnum = {
            ONCE: 'ONCE',
            DAILY: 'DAILY',
            WEEKLY: 'WEEKLY',
            BIWEEKLY: 'BIWEEKLY',
            MONTHLY: 'MONTHLY',
            QUARTERLY: 'QUARTERLY',
            YEARLY: 'YEARLY'
        };
        Schedule.EveryEnum = {
            _1: '1',
            _2: '2'
        };
    })(exports.Schedule || (exports.Schedule = {}));

    var SchemeNames = {
        IBAN: 'IBAN',
        BBAN: 'BBAN',
        ID: 'ID',
        EXTERNALID: 'EXTERNAL_ID',
        EMAIL: 'EMAIL',
        MOBILE: 'MOBILE'
    };

    var Status = {
        DRAFT: 'DRAFT',
        ENTERED: 'ENTERED',
        READY: 'READY',
        ACCEPTED: 'ACCEPTED',
        PROCESSED: 'PROCESSED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED',
        CANCELLATIONPENDING: 'CANCELLATION_PENDING',
        CONFIRMATIONPENDING: 'CONFIRMATION_PENDING',
        CONFIRMATIONDECLINED: 'CONFIRMATION_DECLINED',
        REPLACED: 'REPLACED'
    };

    var UploadStatus = {
        OPEN: 'OPEN',
        UPLOADING: 'UPLOADING',
        UPLOADED: 'UPLOADED',
        VALID: 'VALID',
        DUPLICATE: 'DUPLICATE',
        DONE: 'DONE',
        FAILED: 'FAILED'
    };

    var PAYMENT_BATCH_BASE_PATH = new i0.InjectionToken('PAYMENT_BATCH_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var PaymentBatchConfiguration = /** @class */ (function () {
        function PaymentBatchConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        PaymentBatchConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        PaymentBatchConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        PaymentBatchConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        PaymentBatchConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return PaymentBatchConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module PaymentBatchConfiguration');

    var PaymentBatchApiModule = /** @class */ (function () {
        function PaymentBatchApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('PaymentBatchApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        PaymentBatchApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: PaymentBatchApiModule,
                providers: [{ provide: PaymentBatchConfiguration, useFactory: configurationFactory }]
            };
        };
        return PaymentBatchApiModule;
    }());
    PaymentBatchApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchApiModule, deps: [{ token: PaymentBatchApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: PaymentBatchConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentBatchApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchApiModule });
    PaymentBatchApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: PaymentBatchApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: PaymentBatchConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var BatchOrdersHttpService = /** @class */ (function () {
        function BatchOrdersHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentBatchConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        BatchOrdersHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        BatchOrdersHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        BatchOrdersHttpService.prototype.deleteBatchOrderIdByBatchOrderId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchOrderIdByBatchOrderId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.deleteBatchOrderIdByBatchOrderIdUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchOrderIdByBatchOrderId.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId));
        };
        BatchOrdersHttpService.prototype.deleteBatchPaymentById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchPaymentById.');
            }
            var _batchPaymentId = requestParameters["batchPaymentId"];
            if (_batchPaymentId === null || _batchPaymentId === undefined) {
                throw new Error('Required parameter batchPaymentId was null or undefined when calling deleteBatchPaymentById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments/" + encodeURIComponent(String(_batchPaymentId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.deleteBatchPaymentByIdUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling deleteBatchPaymentById.');
            }
            var _batchPaymentId = requestParameters["batchPaymentId"];
            if (_batchPaymentId === null || _batchPaymentId === undefined) {
                throw new Error('Required parameter batchPaymentId was null or undefined when calling deleteBatchPaymentById.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments/" + encodeURIComponent(String(_batchPaymentId));
        };
        BatchOrdersHttpService.prototype.getBatchOrders = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _query = requestParameters["query"];
            var _amountFrom = requestParameters["amountFrom"];
            var _amountTo = requestParameters["amountTo"];
            var _executionDate = requestParameters["executionDate"];
            var _executionDateFrom = requestParameters["executionDateFrom"];
            var _executionDateTo = requestParameters["executionDateTo"];
            var _status = requestParameters["status"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var _dynamicCreditDebitMixedIndicator = requestParameters["dynamicCreditDebitMixedIndicator"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_amountFrom !== undefined && _amountFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
            }
            if (_amountTo !== undefined && _amountTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
            }
            if (_executionDate !== undefined && _executionDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
            }
            if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
            }
            if (_executionDateTo !== undefined && _executionDateTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
            }
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_dynamicCreditDebitMixedIndicator !== undefined && _dynamicCreditDebitMixedIndicator !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dynamicCreditDebitMixedIndicator, 'dynamicCreditDebitMixedIndicator');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/batch-orders", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.getBatchOrdersUrl = function (requestParameters) {
            var _this = this;
            var _query = requestParameters["query"];
            var _amountFrom = requestParameters["amountFrom"];
            var _amountTo = requestParameters["amountTo"];
            var _executionDate = requestParameters["executionDate"];
            var _executionDateFrom = requestParameters["executionDateFrom"];
            var _executionDateTo = requestParameters["executionDateTo"];
            var _status = requestParameters["status"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var _dynamicCreditDebitMixedIndicator = requestParameters["dynamicCreditDebitMixedIndicator"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_amountFrom !== undefined && _amountFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
            }
            if (_amountTo !== undefined && _amountTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
            }
            if (_executionDate !== undefined && _executionDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
            }
            if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
            }
            if (_executionDateTo !== undefined && _executionDateTo !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
            }
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_dynamicCreditDebitMixedIndicator !== undefined && _dynamicCreditDebitMixedIndicator !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dynamicCreditDebitMixedIndicator, 'dynamicCreditDebitMixedIndicator');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/batch-orders" + (queryString ? "?" + queryString : '');
        };
        BatchOrdersHttpService.prototype.getBatchOrdersById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchOrdersById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.getBatchOrdersByIdUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchOrdersById.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId));
        };
        BatchOrdersHttpService.prototype.getBatchPaymentById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentById.');
            }
            var _batchPaymentId = requestParameters["batchPaymentId"];
            if (_batchPaymentId === null || _batchPaymentId === undefined) {
                throw new Error('Required parameter batchPaymentId was null or undefined when calling getBatchPaymentById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments/" + encodeURIComponent(String(_batchPaymentId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.getBatchPaymentByIdUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentById.');
            }
            var _batchPaymentId = requestParameters["batchPaymentId"];
            if (_batchPaymentId === null || _batchPaymentId === undefined) {
                throw new Error('Required parameter batchPaymentId was null or undefined when calling getBatchPaymentById.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments/" + encodeURIComponent(String(_batchPaymentId));
        };
        BatchOrdersHttpService.prototype.getBatchPaymentsById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentsById.');
            }
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.getBatchPaymentsByIdUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling getBatchPaymentsById.');
            }
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments" + (queryString ? "?" + queryString : '');
        };
        BatchOrdersHttpService.prototype.postBatchOrders = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrdersPostRequest = requestParameters["batchOrdersPostRequest"];
            if (_batchOrdersPostRequest === null || _batchOrdersPostRequest === undefined) {
                throw new Error('Required parameter batchOrdersPostRequest was null or undefined when calling postBatchOrders.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/batch-orders", _batchOrdersPostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.postBatchOrdersUrl = function (requestParameters) {
            var _batchOrdersPostRequest = requestParameters["batchOrdersPostRequest"];
            if (_batchOrdersPostRequest === null || _batchOrdersPostRequest === undefined) {
                throw new Error('Required parameter batchOrdersPostRequest was null or undefined when calling postBatchOrders.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-orders";
        };
        BatchOrdersHttpService.prototype.postBatchPayments = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling postBatchPayments.');
            }
            var _batchPaymentsPostRequest = requestParameters["batchPaymentsPostRequest"];
            if (_batchPaymentsPostRequest === null || _batchPaymentsPostRequest === undefined) {
                throw new Error('Required parameter batchPaymentsPostRequest was null or undefined when calling postBatchPayments.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments", _batchPaymentsPostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.postBatchPaymentsUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling postBatchPayments.');
            }
            var _batchPaymentsPostRequest = requestParameters["batchPaymentsPostRequest"];
            if (_batchPaymentsPostRequest === null || _batchPaymentsPostRequest === undefined) {
                throw new Error('Required parameter batchPaymentsPostRequest was null or undefined when calling postBatchPayments.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments";
        };
        BatchOrdersHttpService.prototype.putApprovalsById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling putApprovalsById.');
            }
            var _batchOrderApprovalPutRequest = requestParameters["batchOrderApprovalPutRequest"];
            if (_batchOrderApprovalPutRequest === null || _batchOrderApprovalPutRequest === undefined) {
                throw new Error('Required parameter batchOrderApprovalPutRequest was null or undefined when calling putApprovalsById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/approvals", _batchOrderApprovalPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.putApprovalsByIdUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling putApprovalsById.');
            }
            var _batchOrderApprovalPutRequest = requestParameters["batchOrderApprovalPutRequest"];
            if (_batchOrderApprovalPutRequest === null || _batchOrderApprovalPutRequest === undefined) {
                throw new Error('Required parameter batchOrderApprovalPutRequest was null or undefined when calling putApprovalsById.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/approvals";
        };
        BatchOrdersHttpService.prototype.putBatchPaymentById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling putBatchPaymentById.');
            }
            var _batchPaymentId = requestParameters["batchPaymentId"];
            if (_batchPaymentId === null || _batchPaymentId === undefined) {
                throw new Error('Required parameter batchPaymentId was null or undefined when calling putBatchPaymentById.');
            }
            var _batchPaymentsPutRequest = requestParameters["batchPaymentsPutRequest"];
            if (_batchPaymentsPutRequest === null || _batchPaymentsPutRequest === undefined) {
                throw new Error('Required parameter batchPaymentsPutRequest was null or undefined when calling putBatchPaymentById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments/" + encodeURIComponent(String(_batchPaymentId)), _batchPaymentsPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.putBatchPaymentByIdUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling putBatchPaymentById.');
            }
            var _batchPaymentId = requestParameters["batchPaymentId"];
            if (_batchPaymentId === null || _batchPaymentId === undefined) {
                throw new Error('Required parameter batchPaymentId was null or undefined when calling putBatchPaymentById.');
            }
            var _batchPaymentsPutRequest = requestParameters["batchPaymentsPutRequest"];
            if (_batchPaymentsPutRequest === null || _batchPaymentsPutRequest === undefined) {
                throw new Error('Required parameter batchPaymentsPutRequest was null or undefined when calling putBatchPaymentById.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + "/batch-payments/" + encodeURIComponent(String(_batchPaymentId));
        };
        BatchOrdersHttpService.prototype.updateBatchOrderById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling updateBatchOrderById.');
            }
            var _batchOrderPutRequest = requestParameters["batchOrderPutRequest"];
            if (_batchOrderPutRequest === null || _batchOrderPutRequest === undefined) {
                throw new Error('Required parameter batchOrderPutRequest was null or undefined when calling updateBatchOrderById.');
            }
            var _dryRun = requestParameters["dryRun"];
            var _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
            var _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
            var _intendedCreditAmount = requestParameters["intendedCreditAmount"];
            var _intendedDebitAmount = requestParameters["intendedDebitAmount"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_dryRun !== undefined && _dryRun !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
            }
            if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
            }
            if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
            }
            if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
            }
            if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)), _batchOrderPutRequest, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchOrdersHttpService.prototype.updateBatchOrderByIdUrl = function (requestParameters) {
            var _batchOrderId = requestParameters["batchOrderId"];
            if (_batchOrderId === null || _batchOrderId === undefined) {
                throw new Error('Required parameter batchOrderId was null or undefined when calling updateBatchOrderById.');
            }
            var _batchOrderPutRequest = requestParameters["batchOrderPutRequest"];
            if (_batchOrderPutRequest === null || _batchOrderPutRequest === undefined) {
                throw new Error('Required parameter batchOrderPutRequest was null or undefined when calling updateBatchOrderById.');
            }
            var _dryRun = requestParameters["dryRun"];
            var _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
            var _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
            var _intendedCreditAmount = requestParameters["intendedCreditAmount"];
            var _intendedDebitAmount = requestParameters["intendedDebitAmount"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_dryRun !== undefined && _dryRun !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
            }
            if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
            }
            if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
            }
            if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
            }
            if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/batch-orders/" + encodeURIComponent(String(_batchOrderId)) + (queryString ? "?" + queryString : '');
        };
        return BatchOrdersHttpService;
    }());
    BatchOrdersHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchOrdersHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_BATCH_BASE_PATH, optional: true }, { token: PaymentBatchConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BatchOrdersHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchOrdersHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchOrdersHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_BATCH_BASE_PATH]
                        }] }, { type: PaymentBatchConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var BatchOrdersHttpServiceDeleteBatchOrderIdByBatchOrderIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServiceDeleteBatchPaymentByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch order not found",
                        "errors": []
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch payment not found",
                        "errors": []
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServiceGetBatchOrdersMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchOrders": [{
                                "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                                "name": "Employee salaries",
                                "type": "SEPACT",
                                "creditDebitMixedIndicator": "CREDIT",
                                "status": "ACCEPTED",
                                "totalTransactionsCount": 73500,
                                "totalCreditTransactionsCount": 73500,
                                "totalInstructedAmount": {
                                    "amount": "2400123.00",
                                    "currencyCode": "EUR"
                                },
                                "totalCreditInstructedAmount": {
                                    "amount": "2400123.00",
                                    "currencyCode": "EUR"
                                },
                                "account": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "CH8739215260566920524",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "requestedExecutionDate": "2019-02-18",
                                "canDelete": false,
                                "canCancel": false
                            }, {
                                "id": "33295f9c-95ec-42f9-9817-64f7d48be023",
                                "name": "Employee salaries",
                                "type": "SEPACT",
                                "creditDebitMixedIndicator": "CREDIT",
                                "status": "ACCEPTED",
                                "totalTransactionsCount": 75930,
                                "totalCreditTransactionsCount": 75930,
                                "totalInstructedAmount": {
                                    "amount": "2479474.00",
                                    "currencyCode": "EUR"
                                },
                                "totalCreditInstructedAmount": {
                                    "amount": "2479474.00",
                                    "currencyCode": "EUR"
                                },
                                "account": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "CH8739215260566920524",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "requestedExecutionDate": "2019-03-18",
                                "canDelete": false,
                                "canCancel": false
                            }, {
                                "id": "f3da0418-c801-4db1-ae52-597f1459b525",
                                "name": "Employee salaries",
                                "type": "SEPACT",
                                "creditDebitMixedIndicator": "CREDIT",
                                "status": "ENTERED",
                                "totalTransactionsCount": 78791,
                                "totalCreditTransactionsCount": 78791,
                                "totalInstructedAmount": {
                                    "amount": "2552947.15",
                                    "currencyCode": "EUR"
                                },
                                "totalCreditInstructedAmount": {
                                    "amount": "2552947.15",
                                    "currencyCode": "EUR"
                                },
                                "account": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "CH8739215260566920524",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "requestedExecutionDate": "2019-04-18",
                                "canDelete": true,
                                "canCancel": false
                            }],
                        "totalBatchOrders": 3,
                        "creditDebitMixedIndicator": "CREDIT"
                    }
                },
                {
                    status: 200,
                    body: {
                        "batchOrders": [{
                                "id": "a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71",
                                "name": "Employees salaries May",
                                "type": "SEPACT",
                                "creditDebitMixedIndicator": "CREDIT",
                                "status": "ENTERED",
                                "totalTransactionsCount": 71,
                                "totalCreditTransactionsCount": 71,
                                "totalInstructedAmount": {
                                    "amount": "191056.00",
                                    "currencyCode": "EUR"
                                },
                                "totalCreditInstructedAmount": {
                                    "amount": "191056.00",
                                    "currencyCode": "EUR"
                                },
                                "account": {
                                    "name": "Salaries Account",
                                    "identification": {
                                        "identification": "ST42353317399261373273497",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "requestedExecutionDate": "2019-05-27",
                                "approval": {
                                    "id": "9bb143b1-bdb3-4ca5-9631-e02e743d6a10",
                                    "userId": "23b8a2ac-e8bb-46b1-98d2-a2da71dfd646",
                                    "externalUserId": "judi-miles",
                                    "userFullName": "Judi Miles",
                                    "serviceAgreementId": "e3e718d8-8f2e-4ef4-bf27-22580759b742",
                                    "itemId": "a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71",
                                    "dataAccessItemId": "ac59c1a1-3729-4514-8051-5015dd0aadef",
                                    "resource": "Batches",
                                    "function": "SEPACT",
                                    "status": "PENDING",
                                    "createdAt": "2019-05-10T10:29:10Z",
                                    "records": [],
                                    "canApprove": true,
                                    "canReject": true,
                                    "finalApprover": true
                                },
                                "canDelete": false,
                                "canCancel": false
                            }],
                        "totalBatchOrders": 1,
                        "creditDebitMixedIndicator": "CREDIT"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServiceGetBatchOrdersByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                        "name": "Employee salaries",
                        "type": "SEPACT",
                        "creditDebitMixedIndicator": "CREDIT",
                        "status": "ACCEPTED",
                        "totalTransactionsCount": 73500,
                        "totalCreditTransactionsCount": 73500,
                        "totalInstructedAmount": {
                            "amount": "2400123.00",
                            "currencyCode": "EUR"
                        },
                        "totalCreditInstructedAmount": {
                            "amount": "2400123.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main Current",
                            "identification": {
                                "identification": "CH8739215260566920524",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-02-18",
                        "fileName": "salaries-2019-02.csv",
                        "userFullName": "Davy Jones",
                        "uploadCompletedAt": "2019-02-22T14:08:34Z",
                        "canDelete": false,
                        "canCancel": false
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "2fd15c69-c4da-4c58-986f-d46082057bf5",
                        "name": "End of Q2 payments",
                        "type": "SEPACT",
                        "status": "ENTERED",
                        "totalTransactionsCount": 2109,
                        "totalInstructedAmount": {
                            "amount": "280810.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main",
                            "identification": {
                                "identification": "NO0741575812927",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-05-31",
                        "fileName": "2019-Q2-payments.csv",
                        "userFullName": "Tommy Perrotti",
                        "uploadCompletedAt": "2019-05-16T14:09:30Z",
                        "approval": {
                            "id": "9966c07c-1547-42a5-9bc7-91986ff33993",
                            "userId": "c3608888-faa3-4f23-9c5a-269dd39caea5",
                            "externalUserId": "judi-miles",
                            "userFullName": "Judi Miles",
                            "serviceAgreementId": "64f538bf-3f5d-4dd9-8de7-ba7082da198d",
                            "itemId": "2fd15c69-c4da-4c58-986f-d46082057bf5",
                            "dataAccessItemId": "f094b702-e912-434c-8e49-12c56fc78551",
                            "resource": "Batches",
                            "function": "SEPACT",
                            "status": "PENDING",
                            "createdAt": "2019-05-16T14:09:40Z",
                            "records": [{
                                    "id": "9e61d96d-fea3-44a4-8903-88d95eb266a8",
                                    "userId": "f34feccc-0d0d-4365-982b-d6d1779e5aaf",
                                    "externalUserId": "bigWillie",
                                    "userFullName": "Willie Iles",
                                    "approvalTypeId": "ece87cfe-33f9-45a4-8c51-a04a9f905c66",
                                    "status": "APPROVED",
                                    "createdAt": "2019-05-17T13:44:02Z"
                                }],
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        },
                        "canDelete": false,
                        "canCancel": true
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "b438751d-6e6a-4601-8009-a82fa22bddcc",
                        "name": "Employee salaries",
                        "type": "SEPACT",
                        "status": "REJECTED",
                        "totalTransactionsCount": 9208,
                        "totalInstructedAmount": {
                            "amount": "50343009.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main Account 8",
                            "identification": {
                                "identification": "NL18ABNA4956451237",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-09-15",
                        "description": "Salary Sep 2019",
                        "bankStatus": "UNPROCESSABLE",
                        "reasonCode": "RJ08",
                        "reasonText": "Insufficient funds",
                        "errorDescription": "Target account has not enough funds to execute batch payments",
                        "fileName": "salaries-2019-02.csv",
                        "userFullName": "Davy Jones",
                        "uploadCompletedAt": "2019-02-22T14:08:34Z",
                        "canDelete": false,
                        "canCancel": false
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "2f4c4bb6-c107-473a-adbd-7343b8f0ea80",
                        "name": "Salaries 2020-12",
                        "type": "ACH_CREDIT",
                        "status": "ACCEPTED",
                        "totalTransactionsCount": 401,
                        "totalInstructedAmount": {
                            "amount": "650980.25",
                            "currencyCode": "USD"
                        },
                        "account": {
                            "name": "Current Account",
                            "identification": {
                                "identification": "7649373647",
                                "schemeName": "BBAN"
                            }
                        },
                        "bankBranchCode": "113105452",
                        "companyId": "1800948594",
                        "companyName": "Your Company",
                        "requestedExecutionDate": "2020-12-18",
                        "fileName": "salaries-2020-12.ach",
                        "userFullName": "Ben Jones",
                        "uploadCompletedAt": "2020-12-15T15:28:10Z",
                        "canDelete": false,
                        "canCancel": false
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServiceGetBatchPaymentByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "counterpartyName": "M. Frederiksen",
                        "counterpartyAccountNumber": "DE49500105174361358418",
                        "instructedAmount": {
                            "amount": "5576.00",
                            "currencyCode": "EUR"
                        },
                        "description": "Salary Feb 2019 empl.no:068572",
                        "status": "REJECTED",
                        "extendedDescription": "Addenda record for the credit payment \nAddenda record for the credit payment",
                        "bankStatus": "UNPROCESSABLE",
                        "reasonCode": "RJ05",
                        "reasonText": "Rejected by counterparty bank",
                        "errorDescription": "Target account has been closed."
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServiceGetBatchPaymentsByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchPayments": [{
                                "counterpartyName": "A. Hamers",
                                "counterpartyAccountNumber": "NL62ABNA0609476343",
                                "instructedAmount": {
                                    "amount": "4102.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:902713",
                                "extendedDescriptionSize": 99999
                            }, {
                                "counterpartyName": "E. Gutierrez",
                                "counterpartyAccountNumber": "NL50ABNA4418364501",
                                "instructedAmount": {
                                    "amount": "5287.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:256869",
                                "extendedDescriptionSize": 0
                            }, {
                                "counterpartyName": "C.M. McAlister",
                                "counterpartyAccountNumber": "BE98735114499693",
                                "instructedAmount": {
                                    "amount": "3398.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:100642",
                                "extendedDescriptionSize": 456768
                            }, {
                                "counterpartyName": "K.C. Bennis",
                                "counterpartyAccountNumber": "NL67ABNA5515439724",
                                "instructedAmount": {
                                    "amount": "4334.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:191872",
                                "extendedDescriptionSize": 0
                            }, {
                                "counterpartyName": "M. Frederiksen",
                                "counterpartyAccountNumber": "DE49500105174361358418",
                                "instructedAmount": {
                                    "amount": "5576.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:068572",
                                "extendedDescriptionSize": 123,
                                "status": "REJECTED",
                                "bankStatus": "UNPROCESSABLE",
                                "reasonCode": "RJ05",
                                "reasonText": "Rejected by counterparty bank",
                                "errorDescription": "Target account has been closed."
                            }],
                        "totalBatchPayments": 5,
                        "batchOrder": {
                            "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                            "name": "Employee salaries",
                            "type": "SEPACT",
                            "status": "ACCEPTED",
                            "totalTransactionsCount": 5,
                            "totalInstructedAmount": {
                                "amount": "2400123.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "CH8739215260566920524",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-02-18",
                            "fileName": "salaries-2019-02.csv",
                            "userFullName": "Davy Jones",
                            "uploadCompletedAt": "2019-02-22T14:08:34Z",
                            "confidentialType": "confidential type"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServicePostBatchOrdersMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06",
                        "status": "DRAFT"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServicePostBatchPaymentsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "cad9e668-15a4-44bf-832d-67e7b41387ac"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch order not found",
                        "errors": []
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServicePutApprovalsByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/approvals",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchOrder": {
                            "id": "72d17d02-20a9-4f0b-b2b8-f83959eb187e",
                            "name": "Salaries May 2019",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ENTERED",
                            "totalTransactionsCount": 6504,
                            "totalCreditTransactionsCount": 6504,
                            "totalInstructedAmount": {
                                "amount": "14009055.00",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "14009055.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Salaries account",
                                "identification": {
                                    "identification": "NL78ABNA3470416656",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-05-26",
                            "approval": {
                                "id": "00b5ca29-eddd-49f4-a898-c3f185ab9a3a",
                                "userId": "4840854b-0597-47a6-8984-87cb50f970eb",
                                "externalUserId": "judi-miles",
                                "userFullName": "Judi Miles",
                                "serviceAgreementId": "ea7b3dfd-29b8-4559-872a-91f5576b56ef",
                                "itemId": "72d17d02-20a9-4f0b-b2b8-f83959eb187e",
                                "dataAccessItemId": "606c7afa-3c8a-4210-ad25-fc83893a4e49",
                                "resource": "Batches",
                                "function": "SEPACT",
                                "status": "PENDING",
                                "createdAt": "2019-08-10T18:09:21Z",
                                "records": [],
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": false
                            }
                        },
                        "approvalStatus": "PENDING"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Limits has been breached, check the report for more details",
                        "checkTime": "2019-10-31T12:12:12Z",
                        "breachReport": [{
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "user-BBID": "oleksii",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2019-10-31T00:00:00Z",
                                            "endTime": "2019-10-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2019-10-01T00:00:00Z",
                                            "endTime": "2019-10-31T23:59:59Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2019-10-31T00:00:00Z",
                                            "endTime": "2019-10-31T23:59:59Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Batches approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic batches"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2019-10-31T00:00:00Z",
                                            "endTime": "2019-10-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2019-10-01T00:00:00Z",
                                            "endTime": "2019-12-31T23:59:59Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }]
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServicePutBatchPaymentByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "7dc95f0a-deba-47be-8f5d-6d0454ef271c",
                        "counterpartyName": "Uriel Johnson",
                        "counterpartyAccountNumber": "HU65109180019369738837536884",
                        "instructedAmount": {
                            "amount": "830.00",
                            "currencyCode": "EUR"
                        },
                        "description": "Order 00023162"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch order not found",
                        "errors": []
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch payment not found",
                        "errors": []
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServiceUpdateBatchOrderByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "f7e4f0bf-6080-46be-bd5d-7dad2b054495",
                        "name": "Employee salaries",
                        "type": "SEPACT",
                        "creditDebitMixedIndicator": "CREDIT",
                        "status": "CANCELLED",
                        "totalTransactionsCount": 120,
                        "totalCreditTransactionsCount": 120,
                        "totalInstructedAmount": {
                            "amount": "322038.00",
                            "currencyCode": "EUR"
                        },
                        "totalCreditInstructedAmount": {
                            "amount": "322038.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main Current",
                            "identification": {
                                "identification": "NL54ABNA2366058993",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2012-01-01",
                        "fileName": "salaries-2020-01.csv",
                        "userFullName": "John Davis",
                        "uploadCompletedAt": "2019-12-31T23:55:31Z",
                        "canDelete": false,
                        "canCancel": false,
                        "approval": {
                            "id": "ac150312-1bec-4075-934f-23600886cb4e",
                            "userId": "64350fcf-ddd1-4cdc-b725-f6c76f89f7c2",
                            "externalUserId": "jdavis",
                            "userFullName": "John Davis",
                            "serviceAgreementId": "c94dc22f-381f-4127-a9f2-db2f5a314e41",
                            "itemId": "f7e4f0bf-6080-46be-bd5d-7dad2b054495",
                            "dataAccessItemId": "e8daae6b-0276-4533-b64d-e3c73afb47a0",
                            "resource": "Batches",
                            "function": "SEPACT",
                            "status": "PENDING",
                            "createdAt": "2019-12-31T23:56:08Z",
                            "records": [{
                                    "id": "9e61d96d-fea3-44a4-8903-88d95eb266a8",
                                    "userId": "f34feccc-0d0d-4365-982b-d6d1779e5aaf",
                                    "externalUserId": "twilliams",
                                    "userFullName": "Tobi Williams",
                                    "approvalTypeId": "16f655f3-3abf-438d-8351-2c667d5a3c86",
                                    "status": "APPROVED",
                                    "createdAt": "2019-12-31T23:57:20Z"
                                }],
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                                "key": "BatchOrderCannotBeUpdated",
                                "context": {
                                    "requestedStatus": "READY",
                                    "expectedStatus": "CANCELLED"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict",
                        "errors": [{
                                "message": "The current status of the batch order ({{currentStatus}}) does not allow cancellation.",
                                "key": "BatchOrderCannotBeCancelled",
                                "context": {
                                    "currentStatus": "PROCESSED"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict",
                        "errors": [{
                                "message": "Only partially approved batch orders can be cancelled.",
                                "key": "BatchOrderWithoutApprovalsCannotBeCancelled"
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchOrdersHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch order not found",
                        "errors": []
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch payment not found",
                        "errors": []
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchOrders": [{
                                "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                                "name": "Employee salaries",
                                "type": "SEPACT",
                                "creditDebitMixedIndicator": "CREDIT",
                                "status": "ACCEPTED",
                                "totalTransactionsCount": 73500,
                                "totalCreditTransactionsCount": 73500,
                                "totalInstructedAmount": {
                                    "amount": "2400123.00",
                                    "currencyCode": "EUR"
                                },
                                "totalCreditInstructedAmount": {
                                    "amount": "2400123.00",
                                    "currencyCode": "EUR"
                                },
                                "account": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "CH8739215260566920524",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "requestedExecutionDate": "2019-02-18",
                                "canDelete": false,
                                "canCancel": false
                            }, {
                                "id": "33295f9c-95ec-42f9-9817-64f7d48be023",
                                "name": "Employee salaries",
                                "type": "SEPACT",
                                "creditDebitMixedIndicator": "CREDIT",
                                "status": "ACCEPTED",
                                "totalTransactionsCount": 75930,
                                "totalCreditTransactionsCount": 75930,
                                "totalInstructedAmount": {
                                    "amount": "2479474.00",
                                    "currencyCode": "EUR"
                                },
                                "totalCreditInstructedAmount": {
                                    "amount": "2479474.00",
                                    "currencyCode": "EUR"
                                },
                                "account": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "CH8739215260566920524",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "requestedExecutionDate": "2019-03-18",
                                "canDelete": false,
                                "canCancel": false
                            }, {
                                "id": "f3da0418-c801-4db1-ae52-597f1459b525",
                                "name": "Employee salaries",
                                "type": "SEPACT",
                                "creditDebitMixedIndicator": "CREDIT",
                                "status": "ENTERED",
                                "totalTransactionsCount": 78791,
                                "totalCreditTransactionsCount": 78791,
                                "totalInstructedAmount": {
                                    "amount": "2552947.15",
                                    "currencyCode": "EUR"
                                },
                                "totalCreditInstructedAmount": {
                                    "amount": "2552947.15",
                                    "currencyCode": "EUR"
                                },
                                "account": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "CH8739215260566920524",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "requestedExecutionDate": "2019-04-18",
                                "canDelete": true,
                                "canCancel": false
                            }],
                        "totalBatchOrders": 3,
                        "creditDebitMixedIndicator": "CREDIT"
                    }
                },
                {
                    status: 200,
                    body: {
                        "batchOrders": [{
                                "id": "a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71",
                                "name": "Employees salaries May",
                                "type": "SEPACT",
                                "creditDebitMixedIndicator": "CREDIT",
                                "status": "ENTERED",
                                "totalTransactionsCount": 71,
                                "totalCreditTransactionsCount": 71,
                                "totalInstructedAmount": {
                                    "amount": "191056.00",
                                    "currencyCode": "EUR"
                                },
                                "totalCreditInstructedAmount": {
                                    "amount": "191056.00",
                                    "currencyCode": "EUR"
                                },
                                "account": {
                                    "name": "Salaries Account",
                                    "identification": {
                                        "identification": "ST42353317399261373273497",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "requestedExecutionDate": "2019-05-27",
                                "approval": {
                                    "id": "9bb143b1-bdb3-4ca5-9631-e02e743d6a10",
                                    "userId": "23b8a2ac-e8bb-46b1-98d2-a2da71dfd646",
                                    "externalUserId": "judi-miles",
                                    "userFullName": "Judi Miles",
                                    "serviceAgreementId": "e3e718d8-8f2e-4ef4-bf27-22580759b742",
                                    "itemId": "a8e1ba16-d9be-4dd4-92b8-e2fbfe138b71",
                                    "dataAccessItemId": "ac59c1a1-3729-4514-8051-5015dd0aadef",
                                    "resource": "Batches",
                                    "function": "SEPACT",
                                    "status": "PENDING",
                                    "createdAt": "2019-05-10T10:29:10Z",
                                    "records": [],
                                    "canApprove": true,
                                    "canReject": true,
                                    "finalApprover": true
                                },
                                "canDelete": false,
                                "canCancel": false
                            }],
                        "totalBatchOrders": 1,
                        "creditDebitMixedIndicator": "CREDIT"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                        "name": "Employee salaries",
                        "type": "SEPACT",
                        "creditDebitMixedIndicator": "CREDIT",
                        "status": "ACCEPTED",
                        "totalTransactionsCount": 73500,
                        "totalCreditTransactionsCount": 73500,
                        "totalInstructedAmount": {
                            "amount": "2400123.00",
                            "currencyCode": "EUR"
                        },
                        "totalCreditInstructedAmount": {
                            "amount": "2400123.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main Current",
                            "identification": {
                                "identification": "CH8739215260566920524",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-02-18",
                        "fileName": "salaries-2019-02.csv",
                        "userFullName": "Davy Jones",
                        "uploadCompletedAt": "2019-02-22T14:08:34Z",
                        "canDelete": false,
                        "canCancel": false
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "2fd15c69-c4da-4c58-986f-d46082057bf5",
                        "name": "End of Q2 payments",
                        "type": "SEPACT",
                        "status": "ENTERED",
                        "totalTransactionsCount": 2109,
                        "totalInstructedAmount": {
                            "amount": "280810.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main",
                            "identification": {
                                "identification": "NO0741575812927",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-05-31",
                        "fileName": "2019-Q2-payments.csv",
                        "userFullName": "Tommy Perrotti",
                        "uploadCompletedAt": "2019-05-16T14:09:30Z",
                        "approval": {
                            "id": "9966c07c-1547-42a5-9bc7-91986ff33993",
                            "userId": "c3608888-faa3-4f23-9c5a-269dd39caea5",
                            "externalUserId": "judi-miles",
                            "userFullName": "Judi Miles",
                            "serviceAgreementId": "64f538bf-3f5d-4dd9-8de7-ba7082da198d",
                            "itemId": "2fd15c69-c4da-4c58-986f-d46082057bf5",
                            "dataAccessItemId": "f094b702-e912-434c-8e49-12c56fc78551",
                            "resource": "Batches",
                            "function": "SEPACT",
                            "status": "PENDING",
                            "createdAt": "2019-05-16T14:09:40Z",
                            "records": [{
                                    "id": "9e61d96d-fea3-44a4-8903-88d95eb266a8",
                                    "userId": "f34feccc-0d0d-4365-982b-d6d1779e5aaf",
                                    "externalUserId": "bigWillie",
                                    "userFullName": "Willie Iles",
                                    "approvalTypeId": "ece87cfe-33f9-45a4-8c51-a04a9f905c66",
                                    "status": "APPROVED",
                                    "createdAt": "2019-05-17T13:44:02Z"
                                }],
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        },
                        "canDelete": false,
                        "canCancel": true
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "b438751d-6e6a-4601-8009-a82fa22bddcc",
                        "name": "Employee salaries",
                        "type": "SEPACT",
                        "status": "REJECTED",
                        "totalTransactionsCount": 9208,
                        "totalInstructedAmount": {
                            "amount": "50343009.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main Account 8",
                            "identification": {
                                "identification": "NL18ABNA4956451237",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2019-09-15",
                        "description": "Salary Sep 2019",
                        "bankStatus": "UNPROCESSABLE",
                        "reasonCode": "RJ08",
                        "reasonText": "Insufficient funds",
                        "errorDescription": "Target account has not enough funds to execute batch payments",
                        "fileName": "salaries-2019-02.csv",
                        "userFullName": "Davy Jones",
                        "uploadCompletedAt": "2019-02-22T14:08:34Z",
                        "canDelete": false,
                        "canCancel": false
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "2f4c4bb6-c107-473a-adbd-7343b8f0ea80",
                        "name": "Salaries 2020-12",
                        "type": "ACH_CREDIT",
                        "status": "ACCEPTED",
                        "totalTransactionsCount": 401,
                        "totalInstructedAmount": {
                            "amount": "650980.25",
                            "currencyCode": "USD"
                        },
                        "account": {
                            "name": "Current Account",
                            "identification": {
                                "identification": "7649373647",
                                "schemeName": "BBAN"
                            }
                        },
                        "bankBranchCode": "113105452",
                        "companyId": "1800948594",
                        "companyName": "Your Company",
                        "requestedExecutionDate": "2020-12-18",
                        "fileName": "salaries-2020-12.ach",
                        "userFullName": "Ben Jones",
                        "uploadCompletedAt": "2020-12-15T15:28:10Z",
                        "canDelete": false,
                        "canCancel": false
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "counterpartyName": "M. Frederiksen",
                        "counterpartyAccountNumber": "DE49500105174361358418",
                        "instructedAmount": {
                            "amount": "5576.00",
                            "currencyCode": "EUR"
                        },
                        "description": "Salary Feb 2019 empl.no:068572",
                        "status": "REJECTED",
                        "extendedDescription": "Addenda record for the credit payment \nAddenda record for the credit payment",
                        "bankStatus": "UNPROCESSABLE",
                        "reasonCode": "RJ05",
                        "reasonText": "Rejected by counterparty bank",
                        "errorDescription": "Target account has been closed."
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchPayments": [{
                                "counterpartyName": "A. Hamers",
                                "counterpartyAccountNumber": "NL62ABNA0609476343",
                                "instructedAmount": {
                                    "amount": "4102.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:902713",
                                "extendedDescriptionSize": 99999
                            }, {
                                "counterpartyName": "E. Gutierrez",
                                "counterpartyAccountNumber": "NL50ABNA4418364501",
                                "instructedAmount": {
                                    "amount": "5287.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:256869",
                                "extendedDescriptionSize": 0
                            }, {
                                "counterpartyName": "C.M. McAlister",
                                "counterpartyAccountNumber": "BE98735114499693",
                                "instructedAmount": {
                                    "amount": "3398.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:100642",
                                "extendedDescriptionSize": 456768
                            }, {
                                "counterpartyName": "K.C. Bennis",
                                "counterpartyAccountNumber": "NL67ABNA5515439724",
                                "instructedAmount": {
                                    "amount": "4334.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:191872",
                                "extendedDescriptionSize": 0
                            }, {
                                "counterpartyName": "M. Frederiksen",
                                "counterpartyAccountNumber": "DE49500105174361358418",
                                "instructedAmount": {
                                    "amount": "5576.00",
                                    "currencyCode": "EUR"
                                },
                                "description": "Salaray Feb 2019 empl.no:068572",
                                "extendedDescriptionSize": 123,
                                "status": "REJECTED",
                                "bankStatus": "UNPROCESSABLE",
                                "reasonCode": "RJ05",
                                "reasonText": "Rejected by counterparty bank",
                                "errorDescription": "Target account has been closed."
                            }],
                        "totalBatchPayments": 5,
                        "batchOrder": {
                            "id": "2f3a6d96-f671-4f03-994d-8f6caaa53cab",
                            "name": "Employee salaries",
                            "type": "SEPACT",
                            "status": "ACCEPTED",
                            "totalTransactionsCount": 5,
                            "totalInstructedAmount": {
                                "amount": "2400123.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "CH8739215260566920524",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-02-18",
                            "fileName": "salaries-2019-02.csv",
                            "userFullName": "Davy Jones",
                            "uploadCompletedAt": "2019-02-22T14:08:34Z",
                            "confidentialType": "confidential type"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06",
                        "status": "DRAFT"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "cad9e668-15a4-44bf-832d-67e7b41387ac"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch order not found",
                        "errors": []
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/approvals",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchOrder": {
                            "id": "72d17d02-20a9-4f0b-b2b8-f83959eb187e",
                            "name": "Salaries May 2019",
                            "type": "SEPACT",
                            "creditDebitMixedIndicator": "CREDIT",
                            "status": "ENTERED",
                            "totalTransactionsCount": 6504,
                            "totalCreditTransactionsCount": 6504,
                            "totalInstructedAmount": {
                                "amount": "14009055.00",
                                "currencyCode": "EUR"
                            },
                            "totalCreditInstructedAmount": {
                                "amount": "14009055.00",
                                "currencyCode": "EUR"
                            },
                            "account": {
                                "name": "Salaries account",
                                "identification": {
                                    "identification": "NL78ABNA3470416656",
                                    "schemeName": "IBAN"
                                }
                            },
                            "requestedExecutionDate": "2019-05-26",
                            "approval": {
                                "id": "00b5ca29-eddd-49f4-a898-c3f185ab9a3a",
                                "userId": "4840854b-0597-47a6-8984-87cb50f970eb",
                                "externalUserId": "judi-miles",
                                "userFullName": "Judi Miles",
                                "serviceAgreementId": "ea7b3dfd-29b8-4559-872a-91f5576b56ef",
                                "itemId": "72d17d02-20a9-4f0b-b2b8-f83959eb187e",
                                "dataAccessItemId": "606c7afa-3c8a-4210-ad25-fc83893a4e49",
                                "resource": "Batches",
                                "function": "SEPACT",
                                "status": "PENDING",
                                "createdAt": "2019-08-10T18:09:21Z",
                                "records": [],
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": false
                            }
                        },
                        "approvalStatus": "PENDING"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Limits has been breached, check the report for more details",
                        "checkTime": "2019-10-31T12:12:12Z",
                        "breachReport": [{
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Service Agreement",
                                        "description": "Kuhic, Gislason and Kemmer. SERVICE AGREEMENT"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "user-BBID": "oleksii",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "breachedLimitType": "PERIODIC",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2019-10-31T00:00:00Z",
                                            "endTime": "2019-10-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }, {
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "monthly",
                                            "startTime": "2019-10-01T00:00:00Z",
                                            "endTime": "2019-10-31T23:59:59Z"
                                        },
                                        "currentConsumption": "9950.0",
                                        "currentThreshold": "10000.0"
                                    }]
                            }, {
                                "user-BBID": "oleksii",
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2019-10-31T00:00:00Z",
                                            "endTime": "2019-10-31T23:59:59Z"
                                        },
                                        "currentConsumption": "500.0",
                                        "currentThreshold": "1000.0"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Function Access Group",
                                        "description": "Batches approvers"
                                    }, {
                                        "ref": "1234567-12312-123123",
                                        "type": "Function",
                                        "description": "Domestic batches"
                                    }, {
                                        "ref": "Approve",
                                        "type": "Privilege",
                                        "description": "Approve"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "THRESHOLD",
                                        "timeframe": {
                                            "period": "daily",
                                            "startTime": "2019-10-31T00:00:00Z",
                                            "endTime": "2019-10-31T23:59:59Z"
                                        },
                                        "currentConsumption": "250.0",
                                        "currentThreshold": "499.9"
                                    }]
                            }, {
                                "limitedEntity": [{
                                        "ref": "1234567-12312-123123",
                                        "type": "Legal Entity",
                                        "description": "Kuhic, Gislason and Kemmer"
                                    }],
                                "shadow": false,
                                "currency": "EUR",
                                "breachInfo": [{
                                        "breachType": "CONSUMPTION",
                                        "timeframe": {
                                            "period": "quarterly",
                                            "startTime": "2019-10-01T00:00:00Z",
                                            "endTime": "2019-12-31T23:59:59Z"
                                        },
                                        "currentConsumption": "99950.0",
                                        "currentThreshold": "100000.0"
                                    }]
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}/batch-payments/{batchPaymentId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "7dc95f0a-deba-47be-8f5d-6d0454ef271c",
                        "counterpartyName": "Uriel Johnson",
                        "counterpartyAccountNumber": "HU65109180019369738837536884",
                        "instructedAmount": {
                            "amount": "830.00",
                            "currencyCode": "EUR"
                        },
                        "description": "Order 00023162"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch order not found",
                        "errors": []
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch payment not found",
                        "errors": []
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-orders/{batchOrderId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "f7e4f0bf-6080-46be-bd5d-7dad2b054495",
                        "name": "Employee salaries",
                        "type": "SEPACT",
                        "creditDebitMixedIndicator": "CREDIT",
                        "status": "CANCELLED",
                        "totalTransactionsCount": 120,
                        "totalCreditTransactionsCount": 120,
                        "totalInstructedAmount": {
                            "amount": "322038.00",
                            "currencyCode": "EUR"
                        },
                        "totalCreditInstructedAmount": {
                            "amount": "322038.00",
                            "currencyCode": "EUR"
                        },
                        "account": {
                            "name": "Main Current",
                            "identification": {
                                "identification": "NL54ABNA2366058993",
                                "schemeName": "IBAN"
                            }
                        },
                        "requestedExecutionDate": "2012-01-01",
                        "fileName": "salaries-2020-01.csv",
                        "userFullName": "John Davis",
                        "uploadCompletedAt": "2019-12-31T23:55:31Z",
                        "canDelete": false,
                        "canCancel": false,
                        "approval": {
                            "id": "ac150312-1bec-4075-934f-23600886cb4e",
                            "userId": "64350fcf-ddd1-4cdc-b725-f6c76f89f7c2",
                            "externalUserId": "jdavis",
                            "userFullName": "John Davis",
                            "serviceAgreementId": "c94dc22f-381f-4127-a9f2-db2f5a314e41",
                            "itemId": "f7e4f0bf-6080-46be-bd5d-7dad2b054495",
                            "dataAccessItemId": "e8daae6b-0276-4533-b64d-e3c73afb47a0",
                            "resource": "Batches",
                            "function": "SEPACT",
                            "status": "PENDING",
                            "createdAt": "2019-12-31T23:56:08Z",
                            "records": [{
                                    "id": "9e61d96d-fea3-44a4-8903-88d95eb266a8",
                                    "userId": "f34feccc-0d0d-4365-982b-d6d1779e5aaf",
                                    "externalUserId": "twilliams",
                                    "userFullName": "Tobi Williams",
                                    "approvalTypeId": "16f655f3-3abf-438d-8351-2c667d5a3c86",
                                    "status": "APPROVED",
                                    "createdAt": "2019-12-31T23:57:20Z"
                                }],
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                                "key": "BatchOrderCannotBeUpdated",
                                "context": {
                                    "requestedStatus": "READY",
                                    "expectedStatus": "CANCELLED"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict",
                        "errors": [{
                                "message": "The current status of the batch order ({{currentStatus}}) does not allow cancellation.",
                                "key": "BatchOrderCannotBeCancelled",
                                "context": {
                                    "currentStatus": "PROCESSED"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict",
                        "errors": [{
                                "message": "Only partially approved batch orders can be cancelled.",
                                "key": "BatchOrderWithoutApprovalsCannotBeCancelled"
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var BatchUploadsHttpService = /** @class */ (function () {
        function BatchUploadsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentBatchConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        BatchUploadsHttpService.prototype.canConsumeForm = function (consumes) {
            var e_1, _a;
            var form = 'multipart/form-data';
            try {
                for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                    var consume = consumes_1_1.value;
                    if (form === consume) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return)) _a.call(consumes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        };
        BatchUploadsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        BatchUploadsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        BatchUploadsHttpService.prototype.createBatchOrdersForId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchUploadId = requestParameters["batchUploadId"];
            if (_batchUploadId === null || _batchUploadId === undefined) {
                throw new Error('Required parameter batchUploadId was null or undefined when calling createBatchOrdersForId.');
            }
            var _confidentialType = requestParameters["confidentialType"];
            var _file = requestParameters["file"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_confidentialType !== undefined && _confidentialType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _confidentialType, 'confidentialType');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'multipart/form-data'
            ];
            var canConsumeForm = this.canConsumeForm(consumes);
            var formParams;
            var useForm = false;
            var convertFormParamsToString = false;
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new i1.HttpParams({ encoder: this.encoder });
            }
            if (_file !== undefined) {
                formParams = formParams.append('file', _file) || formParams;
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/batch-uploads/" + encodeURIComponent(String(_batchUploadId)) + "/batch-orders", convertFormParamsToString ? formParams.toString() : formParams, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadsHttpService.prototype.createBatchOrdersForIdUrl = function (requestParameters) {
            var _batchUploadId = requestParameters["batchUploadId"];
            if (_batchUploadId === null || _batchUploadId === undefined) {
                throw new Error('Required parameter batchUploadId was null or undefined when calling createBatchOrdersForId.');
            }
            var _confidentialType = requestParameters["confidentialType"];
            var _file = requestParameters["file"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_confidentialType !== undefined && _confidentialType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _confidentialType, 'confidentialType');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/batch-uploads/" + encodeURIComponent(String(_batchUploadId)) + "/batch-orders" + (queryString ? "?" + queryString : '');
        };
        BatchUploadsHttpService.prototype.deleteBatchUploadById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchUploadId = requestParameters["batchUploadId"];
            if (_batchUploadId === null || _batchUploadId === undefined) {
                throw new Error('Required parameter batchUploadId was null or undefined when calling deleteBatchUploadById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/batch-uploads/" + encodeURIComponent(String(_batchUploadId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadsHttpService.prototype.deleteBatchUploadByIdUrl = function (requestParameters) {
            var _batchUploadId = requestParameters["batchUploadId"];
            if (_batchUploadId === null || _batchUploadId === undefined) {
                throw new Error('Required parameter batchUploadId was null or undefined when calling deleteBatchUploadById.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-uploads/" + encodeURIComponent(String(_batchUploadId));
        };
        BatchUploadsHttpService.prototype.getBatchUploadById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchUploadId = requestParameters["batchUploadId"];
            if (_batchUploadId === null || _batchUploadId === undefined) {
                throw new Error('Required parameter batchUploadId was null or undefined when calling getBatchUploadById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/batch-uploads/" + encodeURIComponent(String(_batchUploadId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadsHttpService.prototype.getBatchUploadByIdUrl = function (requestParameters) {
            var _batchUploadId = requestParameters["batchUploadId"];
            if (_batchUploadId === null || _batchUploadId === undefined) {
                throw new Error('Required parameter batchUploadId was null or undefined when calling getBatchUploadById.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-uploads/" + encodeURIComponent(String(_batchUploadId));
        };
        BatchUploadsHttpService.prototype.getBatchUploads = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/batch-uploads", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadsHttpService.prototype.getBatchUploadsUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/batch-uploads" + (queryString ? "?" + queryString : '');
        };
        BatchUploadsHttpService.prototype.putBatchUploadIdByBatchUploadId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchUploadId = requestParameters["batchUploadId"];
            if (_batchUploadId === null || _batchUploadId === undefined) {
                throw new Error('Required parameter batchUploadId was null or undefined when calling putBatchUploadIdByBatchUploadId.');
            }
            var _batchUploadPutRequest = requestParameters["batchUploadPutRequest"];
            if (_batchUploadPutRequest === null || _batchUploadPutRequest === undefined) {
                throw new Error('Required parameter batchUploadPutRequest was null or undefined when calling putBatchUploadIdByBatchUploadId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/batch-uploads/" + encodeURIComponent(String(_batchUploadId)), _batchUploadPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadsHttpService.prototype.putBatchUploadIdByBatchUploadIdUrl = function (requestParameters) {
            var _batchUploadId = requestParameters["batchUploadId"];
            if (_batchUploadId === null || _batchUploadId === undefined) {
                throw new Error('Required parameter batchUploadId was null or undefined when calling putBatchUploadIdByBatchUploadId.');
            }
            var _batchUploadPutRequest = requestParameters["batchUploadPutRequest"];
            if (_batchUploadPutRequest === null || _batchUploadPutRequest === undefined) {
                throw new Error('Required parameter batchUploadPutRequest was null or undefined when calling putBatchUploadIdByBatchUploadId.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-uploads/" + encodeURIComponent(String(_batchUploadId));
        };
        BatchUploadsHttpService.prototype.startBatchUpload = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _startUploadBatchOrdersPostRequest = requestParameters["startUploadBatchOrdersPostRequest"];
            if (_startUploadBatchOrdersPostRequest === null || _startUploadBatchOrdersPostRequest === undefined) {
                throw new Error('Required parameter startUploadBatchOrdersPostRequest was null or undefined when calling startBatchUpload.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/batch-uploads", _startUploadBatchOrdersPostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadsHttpService.prototype.startBatchUploadUrl = function (requestParameters) {
            var _startUploadBatchOrdersPostRequest = requestParameters["startUploadBatchOrdersPostRequest"];
            if (_startUploadBatchOrdersPostRequest === null || _startUploadBatchOrdersPostRequest === undefined) {
                throw new Error('Required parameter startUploadBatchOrdersPostRequest was null or undefined when calling startBatchUpload.');
            }
            return this.configuration.basePath + "/client-api/v2/batch-uploads";
        };
        return BatchUploadsHttpService;
    }());
    BatchUploadsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchUploadsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_BATCH_BASE_PATH, optional: true }, { token: PaymentBatchConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BatchUploadsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchUploadsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchUploadsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_BATCH_BASE_PATH]
                        }] }, { type: PaymentBatchConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var BatchUploadsHttpServiceCreateBatchOrdersForIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}/batch-orders",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "b51c4261-54c9-42e5-b5ae-4c1390b890d8",
                        "status": "DONE",
                        "totalBatchOrdersCount": 3,
                        "totalTransactionsCount": 10211,
                        "size": 94371840,
                        "uploadedSize": 94371840
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "0288dde3-9b89-4997-9e57-54684bf3c3c1",
                        "status": "DUPLICATE",
                        "totalBatchOrdersCount": 3,
                        "totalTransactionsCount": 10211,
                        "size": 94371840,
                        "uploadedSize": 94371840
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "The request was rejected because its size exceeds the configured maximum ({{maxSize}})",
                                "key": "UploadExceedsMaxSize",
                                "context": {
                                    "maxSize": "104857600"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Total amount of batch ({{actual}}) does not match the expected amount ({{expected}})",
                                "key": "TotalAmountMismatch",
                                "context": {
                                    "actual": "2400123.00",
                                    "expected": "2398675.00"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                                "key": "TotalBatchMismatch",
                                "context": {
                                    "actual": "3",
                                    "expected": "4"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "The integer part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of digits {{maximum}}",
                                "key": "AmountContainsTooManyDigits",
                                "context": {
                                    "amount": "1234567890123456789.123456",
                                    "fieldName": "batchTotalAmount",
                                    "maximum": "18"
                                }
                            }, {
                                "message": "The fractional part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of decimal digits {{maximum}}",
                                "key": "AmountContainsTooManyDecimalDigits",
                                "context": {
                                    "amount": "1234567890123456789.123456",
                                    "fieldName": "batchTotalAmount",
                                    "maximum": "5"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadsHttpServiceDeleteBatchUploadByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict",
                        "errors": [{
                                "message": "The current status of the batch upload ({{currentStatus}}) does not allow deleting the batch upload.",
                                "key": "BatchUploadCannotBeDeleted",
                                "context": {
                                    "currentStatus": "OPEN"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadsHttpServiceGetBatchUploadByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "OPEN",
                        "file": {
                            "name": "salaries-2019-02.csv",
                            "size": 94371840,
                            "uploadedSize": 18874368
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 3,
                        "createdAt": "2019-02-22T13:44:02Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "OPEN",
                        "file": {
                            "name": "salaries-2019-02.csv",
                            "size": 94371840,
                            "uploadedSize": 42467328
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 3,
                        "createdAt": "2019-02-22T13:44:02Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "OPEN",
                        "file": {
                            "name": "salaries-2019-02.csv",
                            "size": 94371840,
                            "uploadedSize": 70778880
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 3,
                        "createdAt": "2019-02-22T13:44:02Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "UPLOADED",
                        "file": {
                            "name": "salaries-2019-02.csv",
                            "size": 94371840,
                            "uploadedSize": 94371840
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 3,
                        "createdAt": "2019-02-22T13:44:02Z",
                        "completedAt": "2019-02-22T14:08:34Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "DONE",
                        "file": {
                            "name": "salaries-2019-12.csv",
                            "size": 54371840,
                            "uploadedSize": 54371840,
                            "lastModified": "2019-12-22T08:06:00Z"
                        },
                        "digest": {
                            "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                            "algorithm": "SHA-256"
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 1,
                        "createdAt": "2019-12-24T07:09:33Z",
                        "completedAt": "2019-12-24T07:11:09Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                        "status": "DUPLICATE",
                        "file": {
                            "name": "salaries-2019-12.csv",
                            "size": 54371840,
                            "uploadedSize": 54371840,
                            "lastModified": "2019-12-22T08:06:00Z"
                        },
                        "digest": {
                            "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                            "algorithm": "SHA-256"
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 1,
                        "createdAt": "2019-12-28T09:11:13Z",
                        "completedAt": "2019-12-28T09:13:23Z",
                        "duplicates": [{
                                "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                                "status": "DONE",
                                "file": {
                                    "name": "salaries-2019-12.csv",
                                    "size": 54371840,
                                    "uploadedSize": 54371840,
                                    "lastModified": "2019-12-22T08:06:00Z"
                                },
                                "digest": {
                                    "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                    "algorithm": "SHA-256"
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 1,
                                "createdAt": "2019-12-24T07:09:33Z",
                                "completedAt": "2019-12-24T07:11:09Z"
                            }],
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "80467759-0178-4231-af61-003bf1bc842b",
                        "totalBatchOrdersCount": 3,
                        "size": 94371840,
                        "uploadedSize": 94371840,
                        "status": "FAILED",
                        "errors": [{
                                "message": "The actual total amount ({{totalAmount}}) does not match the expected total amount ({{headerTotalAmount}})",
                                "key": "TotalAmountMismatch",
                                "context": {
                                    "totalAmount": "2400123.00",
                                    "headerTotalAmount": "2398675.00"
                                }
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "9151b4d0-f058-4b01-8bed-474dfc34831e",
                        "totalBatchOrdersCount": 4,
                        "size": 94371840,
                        "uploadedSize": 94371840,
                        "status": "FAILED",
                        "errors": [{
                                "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                                "key": "TotalBatchMismatch",
                                "context": {
                                    "actual": "3",
                                    "expected": "4"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadsHttpServiceGetBatchUploadsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-uploads",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchUploads": [{
                                "id": "3d0e77b1-08fc-490d-898c-694169c76a2f",
                                "status": "FAILED",
                                "file": {
                                    "name": "salaries-2019-02.csv",
                                    "size": 94370816
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 3,
                                "createdAt": "2019-02-22T13:14:37Z"
                            }, {
                                "id": "82c85c38-35af-4fa8-87e5-d8374937cac2",
                                "status": "DONE",
                                "file": {
                                    "name": "salaries-2019-02.csv",
                                    "size": 94371840,
                                    "uploadedSize": 94371840,
                                    "lastModified": "2019-12-22T08:06:00Z"
                                },
                                "digest": {
                                    "value": "d6099d20c5866e317bebbc69cc0eb681",
                                    "algorithm": "MD5"
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 3,
                                "createdAt": "2019-02-22T13:44:02Z",
                                "completedAt": "2019-02-22T14:08:34Z"
                            }, {
                                "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                                "status": "DONE",
                                "file": {
                                    "name": "salaries-2019-12.csv",
                                    "size": 54371840,
                                    "uploadedSize": 54371840,
                                    "lastModified": "2019-12-22T08:06:00Z"
                                },
                                "digest": {
                                    "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                    "algorithm": "SHA-256"
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 1,
                                "createdAt": "2019-12-24T07:09:33Z",
                                "completedAt": "2019-12-24T07:11:09Z"
                            }, {
                                "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                                "status": "DUPLICATE",
                                "file": {
                                    "name": "salaries-2019-12.csv",
                                    "size": 54371840,
                                    "uploadedSize": 54371840,
                                    "lastModified": "2019-12-22T08:06:00Z"
                                },
                                "digest": {
                                    "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                    "algorithm": "SHA-256"
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 1,
                                "createdAt": "2019-12-28T09:11:13Z",
                                "completedAt": "2019-12-28T09:13:23Z"
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadsHttpServicePutBatchUploadIdByBatchUploadIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                                "key": "BatchUploadCannotBeUpdated",
                                "context": {
                                    "requestedStatus": "OPEN",
                                    "expectedStatus": "DONE"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict",
                        "errors": [{
                                "message": "The current status of the batch upload ({{currentStatus}}) does not allow updating the status.",
                                "key": "BatchUploadCannotBeUpdated",
                                "context": {
                                    "currentStatus": "OPEN"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadsHttpServiceStartBatchUploadMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/batch-uploads",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "batchUploadId": "5490bc83-9ea1-4b28-a465-2bb541e7c90b",
                        "status": "OPEN"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "File extension ({{actual}}) is not one of the supported ones {{expected}}",
                                "key": "UploadFileExtensionInvalid",
                                "context": {
                                    "actual": "xls",
                                    "expected": "{csv}"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "File size ({{actual}}) exceeds the configured maximum ({{expected}})",
                                "key": "UploadMaxFileSize",
                                "context": {
                                    "actual": "115343360",
                                    "expected": "104857600"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}/batch-orders",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "b51c4261-54c9-42e5-b5ae-4c1390b890d8",
                        "status": "DONE",
                        "totalBatchOrdersCount": 3,
                        "totalTransactionsCount": 10211,
                        "size": 94371840,
                        "uploadedSize": 94371840
                    }
                },
                {
                    status: 202,
                    body: {
                        "id": "0288dde3-9b89-4997-9e57-54684bf3c3c1",
                        "status": "DUPLICATE",
                        "totalBatchOrdersCount": 3,
                        "totalTransactionsCount": 10211,
                        "size": 94371840,
                        "uploadedSize": 94371840
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "The request was rejected because its size exceeds the configured maximum ({{maxSize}})",
                                "key": "UploadExceedsMaxSize",
                                "context": {
                                    "maxSize": "104857600"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Total amount of batch ({{actual}}) does not match the expected amount ({{expected}})",
                                "key": "TotalAmountMismatch",
                                "context": {
                                    "actual": "2400123.00",
                                    "expected": "2398675.00"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                                "key": "TotalBatchMismatch",
                                "context": {
                                    "actual": "3",
                                    "expected": "4"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "The integer part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of digits {{maximum}}",
                                "key": "AmountContainsTooManyDigits",
                                "context": {
                                    "amount": "1234567890123456789.123456",
                                    "fieldName": "batchTotalAmount",
                                    "maximum": "18"
                                }
                            }, {
                                "message": "The fractional part of '{{amount}}' for '{{fieldName}}' exceeds the maximum number of decimal digits {{maximum}}",
                                "key": "AmountContainsTooManyDecimalDigits",
                                "context": {
                                    "amount": "1234567890123456789.123456",
                                    "fieldName": "batchTotalAmount",
                                    "maximum": "5"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict",
                        "errors": [{
                                "message": "The current status of the batch upload ({{currentStatus}}) does not allow deleting the batch upload.",
                                "key": "BatchUploadCannotBeDeleted",
                                "context": {
                                    "currentStatus": "OPEN"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "OPEN",
                        "file": {
                            "name": "salaries-2019-02.csv",
                            "size": 94371840,
                            "uploadedSize": 18874368
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 3,
                        "createdAt": "2019-02-22T13:44:02Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "OPEN",
                        "file": {
                            "name": "salaries-2019-02.csv",
                            "size": 94371840,
                            "uploadedSize": 42467328
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 3,
                        "createdAt": "2019-02-22T13:44:02Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "OPEN",
                        "file": {
                            "name": "salaries-2019-02.csv",
                            "size": 94371840,
                            "uploadedSize": 70778880
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 3,
                        "createdAt": "2019-02-22T13:44:02Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "UPLOADED",
                        "file": {
                            "name": "salaries-2019-02.csv",
                            "size": 94371840,
                            "uploadedSize": 94371840
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 3,
                        "createdAt": "2019-02-22T13:44:02Z",
                        "completedAt": "2019-02-22T14:08:34Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                        "status": "DONE",
                        "file": {
                            "name": "salaries-2019-12.csv",
                            "size": 54371840,
                            "uploadedSize": 54371840,
                            "lastModified": "2019-12-22T08:06:00Z"
                        },
                        "digest": {
                            "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                            "algorithm": "SHA-256"
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 1,
                        "createdAt": "2019-12-24T07:09:33Z",
                        "completedAt": "2019-12-24T07:11:09Z",
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                        "status": "DUPLICATE",
                        "file": {
                            "name": "salaries-2019-12.csv",
                            "size": 54371840,
                            "uploadedSize": 54371840,
                            "lastModified": "2019-12-22T08:06:00Z"
                        },
                        "digest": {
                            "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                            "algorithm": "SHA-256"
                        },
                        "batchFileType": "BB_SEPACT_CSV",
                        "totalBatchOrdersCount": 1,
                        "createdAt": "2019-12-28T09:11:13Z",
                        "completedAt": "2019-12-28T09:13:23Z",
                        "duplicates": [{
                                "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                                "status": "DONE",
                                "file": {
                                    "name": "salaries-2019-12.csv",
                                    "size": 54371840,
                                    "uploadedSize": 54371840,
                                    "lastModified": "2019-12-22T08:06:00Z"
                                },
                                "digest": {
                                    "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                    "algorithm": "SHA-256"
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 1,
                                "createdAt": "2019-12-24T07:09:33Z",
                                "completedAt": "2019-12-24T07:11:09Z"
                            }],
                        "errors": []
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "80467759-0178-4231-af61-003bf1bc842b",
                        "totalBatchOrdersCount": 3,
                        "size": 94371840,
                        "uploadedSize": 94371840,
                        "status": "FAILED",
                        "errors": [{
                                "message": "The actual total amount ({{totalAmount}}) does not match the expected total amount ({{headerTotalAmount}})",
                                "key": "TotalAmountMismatch",
                                "context": {
                                    "totalAmount": "2400123.00",
                                    "headerTotalAmount": "2398675.00"
                                }
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "9151b4d0-f058-4b01-8bed-474dfc34831e",
                        "totalBatchOrdersCount": 4,
                        "size": 94371840,
                        "uploadedSize": 94371840,
                        "status": "FAILED",
                        "errors": [{
                                "message": "Total number of batches ({{actual}}) does not match the expected number ({{expected}})",
                                "key": "TotalBatchMismatch",
                                "context": {
                                    "actual": "3",
                                    "expected": "4"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-uploads",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchUploads": [{
                                "id": "3d0e77b1-08fc-490d-898c-694169c76a2f",
                                "status": "FAILED",
                                "file": {
                                    "name": "salaries-2019-02.csv",
                                    "size": 94370816
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 3,
                                "createdAt": "2019-02-22T13:14:37Z"
                            }, {
                                "id": "82c85c38-35af-4fa8-87e5-d8374937cac2",
                                "status": "DONE",
                                "file": {
                                    "name": "salaries-2019-02.csv",
                                    "size": 94371840,
                                    "uploadedSize": 94371840,
                                    "lastModified": "2019-12-22T08:06:00Z"
                                },
                                "digest": {
                                    "value": "d6099d20c5866e317bebbc69cc0eb681",
                                    "algorithm": "MD5"
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 3,
                                "createdAt": "2019-02-22T13:44:02Z",
                                "completedAt": "2019-02-22T14:08:34Z"
                            }, {
                                "id": "0e4e5d67-d7d8-4695-87ad-58746c94ec63",
                                "status": "DONE",
                                "file": {
                                    "name": "salaries-2019-12.csv",
                                    "size": 54371840,
                                    "uploadedSize": 54371840,
                                    "lastModified": "2019-12-22T08:06:00Z"
                                },
                                "digest": {
                                    "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                    "algorithm": "SHA-256"
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 1,
                                "createdAt": "2019-12-24T07:09:33Z",
                                "completedAt": "2019-12-24T07:11:09Z"
                            }, {
                                "id": "3650f774-2a95-4bfb-9f00-1c58fc1af0c6",
                                "status": "DUPLICATE",
                                "file": {
                                    "name": "salaries-2019-12.csv",
                                    "size": 54371840,
                                    "uploadedSize": 54371840,
                                    "lastModified": "2019-12-22T08:06:00Z"
                                },
                                "digest": {
                                    "value": "07c8445c33bba054e7abc463cd351db465e6b90f00d2e658d0250d13aba8fe4c",
                                    "algorithm": "SHA-256"
                                },
                                "batchFileType": "BB_SEPACT_CSV",
                                "totalBatchOrdersCount": 1,
                                "createdAt": "2019-12-28T09:11:13Z",
                                "completedAt": "2019-12-28T09:13:23Z"
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-uploads/{batchUploadId}",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "The requested status ({{requestedStatus}}) is not valid. The status can be set to {{expectedStatus}}.",
                                "key": "BatchUploadCannotBeUpdated",
                                "context": {
                                    "requestedStatus": "OPEN",
                                    "expectedStatus": "DONE"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict",
                        "errors": [{
                                "message": "The current status of the batch upload ({{currentStatus}}) does not allow updating the status.",
                                "key": "BatchUploadCannotBeUpdated",
                                "context": {
                                    "currentStatus": "OPEN"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/batch-uploads",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "batchUploadId": "5490bc83-9ea1-4b28-a465-2bb541e7c90b",
                        "status": "OPEN"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "File extension ({{actual}}) is not one of the supported ones {{expected}}",
                                "key": "UploadFileExtensionInvalid",
                                "context": {
                                    "actual": "xls",
                                    "expected": "{csv}"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "File size ({{actual}}) exceeds the configured maximum ({{expected}})",
                                "key": "UploadMaxFileSize",
                                "context": {
                                    "actual": "115343360",
                                    "expected": "104857600"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.ApprovalStatus = ApprovalStatus;
    exports.BatchOrdersHttpService = BatchOrdersHttpService;
    exports.BatchOrdersHttpServiceDeleteBatchOrderIdByBatchOrderIdMocksProvider = BatchOrdersHttpServiceDeleteBatchOrderIdByBatchOrderIdMocksProvider;
    exports.BatchOrdersHttpServiceDeleteBatchPaymentByIdMocksProvider = BatchOrdersHttpServiceDeleteBatchPaymentByIdMocksProvider;
    exports.BatchOrdersHttpServiceGetBatchOrdersByIdMocksProvider = BatchOrdersHttpServiceGetBatchOrdersByIdMocksProvider;
    exports.BatchOrdersHttpServiceGetBatchOrdersMocksProvider = BatchOrdersHttpServiceGetBatchOrdersMocksProvider;
    exports.BatchOrdersHttpServiceGetBatchPaymentByIdMocksProvider = BatchOrdersHttpServiceGetBatchPaymentByIdMocksProvider;
    exports.BatchOrdersHttpServiceGetBatchPaymentsByIdMocksProvider = BatchOrdersHttpServiceGetBatchPaymentsByIdMocksProvider;
    exports.BatchOrdersHttpServiceMocksProvider = BatchOrdersHttpServiceMocksProvider;
    exports.BatchOrdersHttpServicePostBatchOrdersMocksProvider = BatchOrdersHttpServicePostBatchOrdersMocksProvider;
    exports.BatchOrdersHttpServicePostBatchPaymentsMocksProvider = BatchOrdersHttpServicePostBatchPaymentsMocksProvider;
    exports.BatchOrdersHttpServicePutApprovalsByIdMocksProvider = BatchOrdersHttpServicePutApprovalsByIdMocksProvider;
    exports.BatchOrdersHttpServicePutBatchPaymentByIdMocksProvider = BatchOrdersHttpServicePutBatchPaymentByIdMocksProvider;
    exports.BatchOrdersHttpServiceUpdateBatchOrderByIdMocksProvider = BatchOrdersHttpServiceUpdateBatchOrderByIdMocksProvider;
    exports.BatchPaymentStatus = BatchPaymentStatus;
    exports.BatchStatus = BatchStatus;
    exports.BatchUploadsHttpService = BatchUploadsHttpService;
    exports.BatchUploadsHttpServiceCreateBatchOrdersForIdMocksProvider = BatchUploadsHttpServiceCreateBatchOrdersForIdMocksProvider;
    exports.BatchUploadsHttpServiceDeleteBatchUploadByIdMocksProvider = BatchUploadsHttpServiceDeleteBatchUploadByIdMocksProvider;
    exports.BatchUploadsHttpServiceGetBatchUploadByIdMocksProvider = BatchUploadsHttpServiceGetBatchUploadByIdMocksProvider;
    exports.BatchUploadsHttpServiceGetBatchUploadsMocksProvider = BatchUploadsHttpServiceGetBatchUploadsMocksProvider;
    exports.BatchUploadsHttpServiceMocksProvider = BatchUploadsHttpServiceMocksProvider;
    exports.BatchUploadsHttpServicePutBatchUploadIdByBatchUploadIdMocksProvider = BatchUploadsHttpServicePutBatchUploadIdByBatchUploadIdMocksProvider;
    exports.BatchUploadsHttpServiceStartBatchUploadMocksProvider = BatchUploadsHttpServiceStartBatchUploadMocksProvider;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.ChargeBearer = ChargeBearer;
    exports.CreditDebitIndicator = CreditDebitIndicator;
    exports.CreditDebitMixedIndicator = CreditDebitMixedIndicator;
    exports.InstructionPriority = InstructionPriority;
    exports.InvolvedPartyRole = InvolvedPartyRole;
    exports.PAYMENT_BATCH_BASE_PATH = PAYMENT_BATCH_BASE_PATH;
    exports.PaymentAction = PaymentAction;
    exports.PaymentBatchApiModule = PaymentBatchApiModule;
    exports.PaymentBatchConfiguration = PaymentBatchConfiguration;
    exports.PaymentMode = PaymentMode;
    exports.RecordStatus = RecordStatus;
    exports.SchemeNames = SchemeNames;
    exports.Status = Status;
    exports.UploadStatus = UploadStatus;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payment-batch-http-ang.umd.js.map
