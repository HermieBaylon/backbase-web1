import { AfterViewInit, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BbTemplate, FeaturesService } from '@backbase/foundation-ang/core';
import { InquireAndDisputeTopics, LoadingState, PaginationType, Transaction, TransactionCheckImageResponse, TransactionsDetailsLoading, TransactionsList } from '@backbase/transactions-common-ang';
import * as i0 from "@angular/core";
export declare class TransactionsListComponent implements OnChanges, AfterViewInit, OnDestroy {
    private readonly featureService;
    showDetailsConfig: boolean;
    /**
     * The TransactionsList this component displays the transactions of.
     */
    transactionsList: TransactionsList | undefined;
    /**
     * The current page of transactions that is being displayed.
     */
    currentPage: number | undefined;
    /**
     * The page size.
     */
    pageSize: number | undefined;
    /**
     * Whether new transactions are being loaded.  By default, this is `LoadingState.Loaded`.
     */
    loadingState: LoadingState;
    /**
     * The maximum number of pages to show (only relevant when using pagination).
     */
    maxNavPages: number | undefined;
    /**
     * The pagination type (`load-more`, `pagination` or undefined).
     */
    paginationType: PaginationType | undefined;
    /**
     * Number of results found after filtering or searching.
     */
    numberOfResultsFound: number | undefined;
    /**
     * Boolean that decides if the Change Category will be displayed.
     */
    showChangeCategory: boolean | undefined;
    /**
     * Event emitter for loading the next page of transactions.
     */
    readonly loadMore: EventEmitter<any>;
    /**
     * Event emitter for loading a specific page of transactions.
     */
    readonly pageChange: EventEmitter<number>;
    checkImagesList: TransactionCheckImageResponse | undefined;
    inquireAndDisputeTopics: InquireAndDisputeTopics | undefined;
    transactionDetailsLoadingStatus: TransactionsDetailsLoading | undefined;
    readonly detailsOpen: EventEmitter<Transaction>;
    constructor(featureService: FeaturesService, showDetailsConfig: boolean);
    /**
     * Reference to instance of customizable component.
     */
    readonly hostRef: this;
    /**
     * Whether the transaction details are shown or not.
     */
    isDetailsOpen: boolean;
    transactionsGroupedByDate: any[] | undefined;
    transaction: Transaction | undefined;
    private unsubscribeSubject$;
    /**
     * Whether there are any loaded transactions.
     */
    hasItems(): boolean | undefined;
    get hasModal(): boolean;
    /**
     * Whether transactions are loading.
     */
    get isLoading(): boolean;
    get isLoadingMore(): boolean;
    /**
     * Whether pagination is configured to be paged.
     */
    get isPaginationPaged(): boolean;
    /**
     * Whether pagination is configured to be a load-more button.
     */
    get isPaginationLoadMore(): boolean;
    /**
     * Whether pagination is configured to be a infinite-scroll.
     */
    get isInfiniteScrollPagination(): boolean;
    /**
     * Returns whether all transactions have been loaded or not.
     */
    hasLoadedAll(): boolean | undefined;
    onLoadMore(): void;
    onPageChange(page: number): void;
    onDetailOpen(transaction: Transaction): void;
    /**
     * Hide the transaction details.
     */
    closeDetails(): void;
    ngOnChanges(changes: SimpleChanges): void;
    trackByFn(_index: number, group: Array<any>): any;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsListComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TransactionsListComponent, "bb-transactions-list", never, { "transactionsList": "transactionsList"; "currentPage": "currentPage"; "pageSize": "pageSize"; "loadingState": "loadingState"; "maxNavPages": "maxNavPages"; "paginationType": "paginationType"; "numberOfResultsFound": "numberOfResultsFound"; "showChangeCategory": "showChangeCategory"; "checkImagesList": "checkImagesList"; "inquireAndDisputeTopics": "inquireAndDisputeTopics"; "transactionDetailsLoadingStatus": "transactionDetailsLoadingStatus"; }, { "loadMore": "loadMore"; "pageChange": "pageChange"; "detailsOpen": "detailsOpen"; }, never, never>;
}
export declare class TransactionsListPaginationCustomizableDirective extends BbTemplate<TransactionsListComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsListPaginationCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TransactionsListPaginationCustomizableDirective, "[bbTransactionsListPaginationCustomizable]", never, {}, {}, never>;
}
export declare class TransactionsListListCustomizableDirective extends BbTemplate<TransactionsListComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsListListCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TransactionsListListCustomizableDirective, "[bbTransactionsListListCustomizable]", never, {}, {}, never>;
}
export declare class TransactionsListEmptyStateCustomizableDirective extends BbTemplate<TransactionsListComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsListEmptyStateCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TransactionsListEmptyStateCustomizableDirective, "[bbTransactionsListEmptyStateCustomizable]", never, {}, {}, never>;
}
