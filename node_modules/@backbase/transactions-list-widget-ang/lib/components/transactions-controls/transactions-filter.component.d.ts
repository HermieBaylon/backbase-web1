import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { AbstractControl, FormGroup } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { Observable } from 'rxjs';
import { AvailableFilterEnum, AvailableFilters, EnumValuesService, TransactionsEnumValue, TransactionsFilterOptions } from '@backbase/transactions-common-ang';
import * as i0 from "@angular/core";
export declare class TransactionsFilterComponent implements OnInit, OnDestroy {
    private readonly enumValuesService;
    /**
     * EventEmitter for triggering a filter action.
     */
    readonly filter: EventEmitter<TransactionsFilterOptions>;
    /**
     * EventEmitter to hide the filter options
     */
    readonly closeFilter: EventEmitter<any>;
    /**
     * EventEmitter with the amount of active filters
     */
    readonly filterCount: EventEmitter<number>;
    /**
     * Configuration parameter to show/hide billing status filter
     */
    hideBillingStatus: boolean;
    /**
     * Configuration parameter to show/hide filters
     */
    availableFilters: AvailableFilters;
    /**
     * Reference to instance of customizable component.
     */
    readonly hostRef: this;
    readonly availableFilterEnum: typeof AvailableFilterEnum;
    transactionsFilterForm: FormGroup;
    creditDebitIndicatorOptions: Array<TransactionsEnumValue>;
    transactionTypeOptions: Observable<Array<TransactionsEnumValue>>;
    billingStatusOptions: Observable<Array<TransactionsEnumValue>>;
    private subscriptions;
    ngOnInit(): void;
    ngOnDestroy(): void;
    compareByValue(optionListedValue: any, placeholderValue: any): boolean | undefined;
    private readonly setDefaultAllOption;
    /**
     * Emit event to apply filter.
     *
     * @param filterParams - Options to filter transactions list with.
     */
    onFilter(filterParams: TransactionsFilterOptions): void;
    /**
     * Checks all the form fields and looks for differences with a default model to define if a filter was applied or not
     */
    private get activeFilterCounter();
    private isFilterApplied;
    /**
     * Clear filter form and reset values to default.
     */
    onClearFilter(): void;
    /**
     * Emit event to close this filter form.
     */
    onCloseFilter(): void;
    private get dateFormGroup();
    get fromDate(): AbstractControl | null | undefined;
    get toDate(): AbstractControl | null | undefined;
    private get amountFormGroup();
    private get fromAmount();
    private get toAmount();
    private get serialNumberFormGroup();
    private get fromSerialNumber();
    private get toSerialNumber();
    private get creditDebitIndicator();
    private get transactionType();
    private get billingStatus();
    formatDateToString(dateArg?: string | null | undefined): string | undefined;
    isFieldValid(fieldGroup: string, fieldName: string): boolean;
    constructor(enumValuesService: EnumValuesService);
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsFilterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TransactionsFilterComponent, "bb-transactions-filter", never, { "hideBillingStatus": "hideBillingStatus"; "availableFilters": "availableFilters"; }, { "filter": "filter"; "closeFilter": "closeFilter"; "filterCount": "filterCount"; }, never, never>;
}
export declare class TransactionsListFilterCustomizableDirective extends BbTemplate<TransactionsFilterComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsListFilterCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TransactionsListFilterCustomizableDirective, "[bbTransactionsListFilterCustomizable]", never, {}, {}, never>;
}
