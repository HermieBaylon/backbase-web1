import { OnInit, ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { Transaction, TransactionUpdateService, TransactionCheckImageResponse, TransactionsDetailsLoading, TransactionsDetailsLoadingState, InquireAndDisputeTopics, TransactionsInquireAndDisputeUIService, MessageForm, MessagesService, InquireAndDisputeFile, SubjectReport } from '@backbase/transactions-common-ang';
import * as i0 from "@angular/core";
export declare class TransactionDetailsComponent implements OnInit, OnDestroy {
    private readonly transactionUpdate;
    private readonly messagesService;
    private readonly transactionsInquireAndDispute;
    private readonly cd;
    /**
     * Reference to instance of customizable component.
     */
    readonly hostRef: this;
    /**
     * The transaction this component shows the details of.
     */
    transaction: Transaction | undefined;
    /**
     * Whether to show the account number (for example, when transactions of multiple accounts are
     * shown) or not.
     */
    showAccountNumber: boolean;
    /**
     * Whether the notes editing form is shown or not.
     */
    isEditingNotes: boolean;
    checkImagesList: TransactionCheckImageResponse | undefined;
    transactionDetailsLoadingStatus: TransactionsDetailsLoading | undefined;
    isPending: boolean;
    showInquiryAndDispute: boolean;
    inquireAndDisputeTopics: InquireAndDisputeTopics;
    /**
     * EventEmitter for triggering an isEditingNotesChange event.
     */
    readonly isEditingNotesChange: EventEmitter<boolean>;
    readonly showInquiryAndDisputeChange: EventEmitter<boolean>;
    readonly onNotesUpdateSuccess: EventEmitter<string>;
    readonly onNotesUpdateError: EventEmitter<string>;
    private unsubscribeSubject;
    showReportForm: (display: boolean) => void;
    isSavingNotes: boolean;
    deleteNoteModalActive: boolean;
    readonly loadingStateEnum: typeof TransactionsDetailsLoadingState;
    get reportState(): TransactionsDetailsLoadingState;
    get message(): MessageForm;
    set message(value: MessageForm);
    savedReportType: SubjectReport | undefined;
    constructor(transactionUpdate: TransactionUpdateService, messagesService: MessagesService, transactionsInquireAndDispute: TransactionsInquireAndDisputeUIService, cd: ChangeDetectorRef);
    /**
     * Handler function after user changes notes for the transaction.  Calls service to update the
     * backend.
     *
     * @param notes - The new notes for the transaction.
     */
    onChangeNotes(notes: string): void;
    openEditNotes(): void;
    handleDelete(data: string): void;
    closeModal(): void;
    submitDeleteNote(): void;
    private updateNotes;
    private updateNotesState;
    ngOnInit(): void;
    ngOnDestroy(): void;
    saveReport(messageForm: MessageForm): void;
    cancelReport(): void;
    fileChange(file: File): void;
    fileRemoved(attachment: InquireAndDisputeFile): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionDetailsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TransactionDetailsComponent, "bb-transaction-details", never, { "transaction": "transaction"; "showAccountNumber": "showAccountNumber"; "isEditingNotes": "isEditingNotes"; "checkImagesList": "checkImagesList"; "transactionDetailsLoadingStatus": "transactionDetailsLoadingStatus"; "isPending": "isPending"; "showInquiryAndDispute": "showInquiryAndDispute"; "inquireAndDisputeTopics": "inquireAndDisputeTopics"; }, { "isEditingNotesChange": "isEditingNotesChange"; "showInquiryAndDisputeChange": "showInquiryAndDisputeChange"; "onNotesUpdateSuccess": "onNotesUpdateSuccess"; "onNotesUpdateError": "onNotesUpdateError"; }, never, never>;
}
export declare class TransactionsListItemDetailsCustomizableDirective extends BbTemplate<TransactionDetailsComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsListItemDetailsCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TransactionsListItemDetailsCustomizableDirective, "[bbTransactionsListItemDetailsCustomizable]", never, {}, {}, never>;
}
export declare class TransactionsListConfirmationModalCustomizableDirective extends BbTemplate<TransactionDetailsComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsListConfirmationModalCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TransactionsListConfirmationModalCustomizableDirective, "[bbTransactionsListConfirmationModalCustomizable]", never, {}, {}, never>;
}
