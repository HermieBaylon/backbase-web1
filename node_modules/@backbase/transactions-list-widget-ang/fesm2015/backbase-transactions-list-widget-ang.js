import * as i0 from '@angular/core';
import { EventEmitter, Component, Input, Output, Directive, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule, FutureFeaturesModule } from '@backbase/foundation-ang/core';
import * as i1 from '@backbase/transactions-common-ang';
import { TransactionIconType, TransactionsDetailsLoadingState, TransactionsInquireAndDisputeUIService, BillingStatusEnum, showDetailsConfigToken, LoadingState, PaginationType, TransactionsList, TransactionsGroupedByDate, AvailableFilterEnum, creditDebitIndicatorEnumValues, defaultTransactionTypeEnumValues, defaultBillingStatusEnumValues, BaseTransactionsControls, BaseTransactionsContainer, TransactionsService, PendingTransactionsService, TransactionDetailsService, BaseTransactionsWidget, NavigationService, WidgetPropertiesService, TransactionsCommonModule } from '@backbase/transactions-common-ang';
import * as i1$1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i4 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i6 from '@angular/forms';
import { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';
import * as i3 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i8 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6$1 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i6$2 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i3$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import { Subject, of, fromEvent, Subscription } from 'rxjs';
import { takeUntil, switchMap, map, catchError } from 'rxjs/operators';
import * as i2$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i7 from '@backbase/ui-ang/focus';
import { FocusModule } from '@backbase/ui-ang/focus';
import * as i7$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i10 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i5 from '@backbase/ui-ang/pagination';
import { PaginatorModule } from '@backbase/ui-ang/pagination';
import * as i7$2 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i1$3 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i2$2 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i3$2 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i4$1 from '@backbase/ui-ang/input-number';
import { InputNumberModule } from '@backbase/ui-ang/input-number';
import * as i5$1 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i4$2 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i2$3 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i1$4 from '@angular/router';
import { RouterModule } from '@angular/router';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { TextareaModule } from '@backbase/ui-ang/textarea';

const TRANSACTIONS_DETAILS_SHARE_MODAL = {
    name: 'TRANSACTIONS_DETAILS_SHARE_MODAL',
    description: 'Modal dialog containing transaction details is moved to the list component and reused for different transaction selections',
};

class TransactionsCategoriesComponent {
    constructor(fb, categoriesService, transactionUpdateService) {
        this.fb = fb;
        this.categoriesService = categoriesService;
        this.transactionUpdateService = transactionUpdateService;
        this.categoryChange = new EventEmitter();
        this.changeTransactionsCategoryForm = this.fb.group({
            categoryName: [],
        });
        this.hostRef = this;
        this.categoriesList = this.categoriesService.getCategories();
    }
    cancelSaveCategory() {
        this.changeTransactionsCategoryForm.reset({
            categoryName: this.transaction && this.transaction.category,
        });
        this.categoryChange.emit();
    }
    changeCategory() {
        const newCategoryControl = this.changeTransactionsCategoryForm.get('categoryName');
        if (this.transaction && newCategoryControl) {
            this.transactionUpdateService.update(this.transaction, { category: newCategoryControl.value }).subscribe(() => {
                if (this.transaction) {
                    this.transaction.category = newCategoryControl.value;
                    this.categoryChange.emit('success');
                }
                else {
                    this.categoryChange.emit('error');
                }
            }, () => this.categoryChange.emit('error'));
        }
    }
    getCategoryIconClass(transactionCategory) {
        return `${transactionCategory.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-') || 'uncategorized'}`;
    }
    ngOnInit() {
        this.changeTransactionsCategoryForm.reset({
            categoryName: this.transaction && this.transaction.category,
        });
    }
}
TransactionsCategoriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsCategoriesComponent, deps: [{ token: i6.FormBuilder }, { token: i1.CategoriesService }, { token: i1.TransactionUpdateService }], target: i0.ɵɵFactoryTarget.Component });
TransactionsCategoriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsCategoriesComponent, selector: "bb-transactions-categories", inputs: { transaction: "transaction" }, outputs: { categoryChange: "categoryChange" }, ngImport: i0, template: "<ng-container bbTransactionsCategoryCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsCategoryCustomizable let-hostRef>\n  <form [formGroup]=\"hostRef.changeTransactionsCategoryForm\" (ngSubmit)=\"hostRef.changeCategory()\">\n    <div class=\"modal-header\">\n      <div class=\"form-group col-12 col-md-9\">\n        <bb-header-ui\n          headingType=\"h3\"\n          heading=\"Change Category\"\n          i18n-heading=\"Change Category|Change Category in change transactions category form@@transactions.form.name\"\n        ></bb-header-ui>\n      </div>\n      <button\n        type=\"button\"\n        class=\"close\"\n        color=\"muted\"\n        aria-label=\"Close\"\n        i18n-aria-label=\"Close button@@transactions.form.close\"\n        (click)=\"hostRef.cancelSaveCategory()\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    <div class=\"modal-body modal-body-scrollable\">\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item--no-separator\" *ngFor=\"let category of categoriesList | async\">\n          <label class=\"bb-stack\" [for]=\"hostRef.getCategoryIconClass(category.categoryName)\">\n            <bb-icon-ui\n              class=\"bb-stack__item\"\n              name=\"category-{{ hostRef.getCategoryIconClass(category.categoryName) }}\"\n              backgroundType=\"circle\"\n              size=\"sm\"\n            ></bb-icon-ui>\n            <span class=\"font-weight-bold bb-stack__item\">{{ category.categoryName }}</span>\n            <div class=\"bb-stack__item bb-stack__item--fill bb-text-align-right\">\n              <input\n                [id]=\"hostRef.getCategoryIconClass(category.categoryName)\"\n                type=\"radio\"\n                name=\"categoryName\"\n                formControlName=\"categoryName\"\n                [value]=\"category.categoryName\"\n              />\n            </div>\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button\n        bbButton\n        data-role=\"cancel\"\n        color=\"secondary\"\n        (click)=\"hostRef.cancelSaveCategory()\"\n        i18n=\"Cancel|Cancel button label@@transactions.category.modal.cancel.button\"\n      >\n        Cancel\n      </button>\n\n      <button\n        bbButton\n        type=\"submit\"\n        color=\"primary\"\n        [disabled]=\"hostRef.transaction.category === hostRef.changeTransactionsCategoryForm.value.categoryName\"\n        i18n=\"Save|Save button label@@transactions.category.modal.save.button\"\n      >\n        Save\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsCategoriesCustomizableDirective; }), selector: "[bbTransactionsCategoryCustomizable]" }, { type: i0.forwardRef(function () { return i6.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i6.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i6.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i6.RadioControlValueAccessor; }), selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { type: i0.forwardRef(function () { return i6.DefaultValueAccessor; }), selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i0.forwardRef(function () { return i6.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i6.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i6$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i8.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsCategoriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-categories',
                    templateUrl: 'transactions-categories.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i6.FormBuilder }, { type: i1.CategoriesService }, { type: i1.TransactionUpdateService }]; }, propDecorators: { transaction: [{
                type: Input
            }], categoryChange: [{
                type: Output
            }] } });
class TransactionsCategoriesCustomizableDirective extends BbTemplate {
}
TransactionsCategoriesCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsCategoriesCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsCategoriesCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsCategoriesCustomizableDirective, selector: "[bbTransactionsCategoryCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsCategoriesCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsCategoryCustomizable]',
                }]
        }] });

class TransactionDetailCategoryComponent {
    constructor(transactionsIconCategoriesFactory) {
        this.transactionsIconCategoriesFactory = transactionsIconCategoriesFactory;
        this.categoryChange = new EventEmitter();
        this.hostRef = this;
        this.isTransactionsCategoryOpen = false;
        this.transactionIconType = TransactionIconType;
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        this.transactionCategoryIcon = this.transactionsIconCategoriesFactory.create(this.transaction);
    }
    get categoryTitle() {
        if (this.transactionCategoryIcon) {
            return this.transactionCategoryIcon.title;
        }
        return '';
    }
    openTransactionsCategory() {
        this.isTransactionsCategoryOpen = true;
    }
    closeTransactionsCategory(categoryChangeStatus) {
        this.categoryChange.emit(categoryChangeStatus);
        this.isTransactionsCategoryOpen = false;
    }
}
TransactionDetailCategoryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailCategoryComponent, deps: [{ token: i1.TransactionsIconCategoriesFactoryService }], target: i0.ɵɵFactoryTarget.Component });
TransactionDetailCategoryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailCategoryComponent, selector: "bb-transaction-detail-category", inputs: { transaction: "transaction", displayChangeCategory: "displayChangeCategory" }, outputs: { categoryChange: "categoryChange" }, ngImport: i0, template: "<ng-container bbTransactionDetailCategoryCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionDetailCategoryCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.displayChangeCategory && !hostRef.transaction.isPending\">\n    <ng-container *ngIf=\"hostRef.transactionCategoryIcon.type === transactionIconType.category; else fallbackCategory\">\n      <button\n        bbButton\n        class=\"bb-transaction-list-item-detail-header__category-badge\"\n        (click)=\"hostRef.openTransactionsCategory()\"\n        buttonSize=\"sm\"\n      >\n        <span data-role=\"list-details-category\">{{ hostRef.categoryTitle | bbCapitalizePipe }}</span>\n        <span>\n          <bb-icon-ui\n            class=\"bb-transactions-list-pending-header__tooltip\"\n            name=\"edit\"\n            size=\"sm\"\n            color=\"muted\"\n          ></bb-icon-ui>\n          <span\n            class=\"sr-only\"\n            i18n=\"Change transaction category|Change the category of a transaction@@transactions.details.changeCategory\"\n          >\n            Change category\n          </span>\n        </span>\n      </button>\n    </ng-container>\n    <ng-template #fallbackCategory>\n      <div\n        class=\"\n          bb-transaction-list-item-detail-header__category-badge-fallback\n          bb-transaction-list-item-detail-header__category-badge\n        \"\n      >\n        <span data-role=\"list-details-category\">{{ hostRef.categoryTitle | titlecase }}</span>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isTransactionsCategoryOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.closeTransactionsCategory()\"\n  >\n    <bb-transactions-categories\n      [transaction]=\"hostRef.transaction\"\n      (categoryChange)=\"hostRef.closeTransactionsCategory($event)\"\n    ></bb-transactions-categories>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i1$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return TransactionsCategoriesComponent; }), selector: "bb-transactions-categories", inputs: ["transaction"], outputs: ["categoryChange"] }], directives: [{ type: i0.forwardRef(function () { return TransactionDetailCategoryCustomizableDirective; }), selector: "[bbTransactionDetailCategoryCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "bbCapitalizePipe": i0.forwardRef(function () { return i1.CapitalizePipe; }), "titlecase": i0.forwardRef(function () { return i8.TitleCasePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailCategoryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-detail-category',
                    templateUrl: 'transaction-detail-category.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionsIconCategoriesFactoryService }]; }, propDecorators: { transaction: [{
                type: Input
            }], categoryChange: [{
                type: Output
            }], displayChangeCategory: [{
                type: Input
            }] } });
class TransactionDetailCategoryCustomizableDirective extends BbTemplate {
}
TransactionDetailCategoryCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailCategoryCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionDetailCategoryCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailCategoryCustomizableDirective, selector: "[bbTransactionDetailCategoryCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailCategoryCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionDetailCategoryCustomizable]',
                }]
        }] });

class TransactionNotesComponent {
    constructor() {
        /**
         * Whether the notes editing form is shown or not.
         */
        this.isEditingNotes = false;
        /**
         * Whether the notes editing form is saving or not.
         */
        this.isSavingNotes = false;
        /**
         * EventEmitter for triggering an isEditingNotesChange event.
         */
        this.isEditingNotesChange = new EventEmitter();
        /**
         * EventEmitter for triggering a change notes event.
         */
        this.changeNotes = new EventEmitter();
        /**
         * EventEmitter for triggering a deleteNote event.
         */
        this.deleteNote = new EventEmitter();
        this.transactionNotesForm = new FormGroup({
            notes: new FormControl(),
        });
    }
    toggleEdit(display) {
        var _a, _b;
        const isEditingNotes = typeof display === 'boolean' ? display : !this.isEditingNotes;
        if (isEditingNotes) {
            (_a = this.transactionNotesForm.get('notes')) === null || _a === void 0 ? void 0 : _a.setValue((_b = this.transaction) === null || _b === void 0 ? void 0 : _b.notes);
        }
        this.isEditingNotesChange.emit(isEditingNotes);
    }
    onSave(notesParams) {
        this.changeNotes.emit(notesParams.notes);
    }
    triggerDeleteNote(notesParams) {
        this.deleteNote.emit(notesParams.notes);
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        this.transactionNotesForm.setValue({
            notes: this.transaction.notes || '',
        });
    }
}
TransactionNotesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionNotesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionNotesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionNotesComponent, selector: "bb-transaction-notes", inputs: { transaction: "transaction", isEditingNotes: "isEditingNotes", isSavingNotes: "isSavingNotes" }, outputs: { isEditingNotesChange: "isEditingNotesChange", changeNotes: "changeNotes", deleteNote: "deleteNote" }, ngImport: i0, template: "<div class=\"bb-stack\" [ngClass]=\"{ 'bb-block bb-block--xs': !!transaction?.notes }\">\n  <div class=\"bb-stack__item\">\n    <label\n      class=\"bb-block bb-block--sm\"\n      data-role=\"transaction-note-label\"\n      bbDynamicId\n      #noteLabel\n      i18n=\"Note of the selected transaction@@transactions.details.label.note\"\n    >\n      Note\n    </label>\n  </div>\n  <div *ngIf=\"!isEditingNotes\" class=\"bb-stack__item--push-right\">\n    <ng-container *ngIf=\"!!transaction?.notes; then editIconSet\"></ng-container>\n  </div>\n</div>\n<ng-container *ngIf=\"isEditingNotes; then editNotes; else displayNotes\"></ng-container>\n\n<ng-template #editIconSet>\n  <div class=\"bb-stack bb-stack--density-sm bb-transaction-notes-editIconSet\">\n    <button\n      bbButton\n      class=\"bb-transaction-notes-editIconSet-button\"\n      data-role=\"transaction-note-edit-button\"\n      color=\"link-dark\"\n      buttonSize=\"sm\"\n      [circle]=\"true\"\n      aria-label=\"Edit note\"\n      i18n-aria-label=\"Edit note button@@transactions.list.edit.button.ariaLabel\"\n      (click)=\"toggleEdit()\"\n    >\n      <bb-icon-ui name=\"edit\"></bb-icon-ui>\n    </button>\n    <button\n      bbButton\n      color=\"link-dark\"\n      class=\"bb-transaction-notes-editIconSet-button\"\n      data-role=\"transaction-note-delete-button\"\n      buttonSize=\"sm\"\n      [circle]=\"true\"\n      aria-label=\"Delete note\"\n      i18n-aria-label=\"Delete note button@@transactions.list.notes.delete.button.ariaLabel\"\n      (click)=\"triggerDeleteNote(transactionNotesForm.value)\"\n    >\n      <bb-icon-ui name=\"delete\"></bb-icon-ui>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #editNotes>\n  <form [formGroup]=\"transactionNotesForm\" (ngSubmit)=\"onSave(transactionNotesForm.value)\">\n    <div class=\"form-group\">\n      <textarea\n        class=\"form-control\"\n        name=\"notes\"\n        data-role=\"transaction-note-textarea\"\n        [attr.aria-labelledby]=\"noteLabel?.id\"\n        placeholder=\"Enter note\"\n        i18n-placeholder=\"Write a note for this transaction@@transactions.notes.input.placeholder\"\n        formControlName=\"notes\"\n        maxlength=\"4000\"\n        bbFocus\n      ></textarea>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        color=\"primary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"transaction-note-save-button\"\n        [isLoading]=\"isSavingNotes\"\n        (click)=\"!isSavingNotes && onSave(transactionNotesForm.value)\"\n        i18n=\"Save button@@transactions.list.notes.button.save\"\n      >\n        Save\n      </bb-load-button-ui>\n      <button\n        *ngIf=\"!isSavingNotes\"\n        bbButton\n        type=\"button\"\n        color=\"secondary\"\n        data-role=\"transaction-note-cancel-button\"\n        class=\"bb-button-bar__button\"\n        (click)=\"toggleEdit(false)\"\n        i18n=\"Cancel button@@transactions.notes.button.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #displayNotes>\n  <span data-role=\"transaction-note\">{{ transaction?.notes }}</span>\n</ng-template>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.DynamicIdDirective, selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i6.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i7.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionNotesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-notes',
                    templateUrl: './transaction-notes.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { transaction: [{
                type: Input
            }], isEditingNotes: [{
                type: Input
            }], isSavingNotes: [{
                type: Input
            }], isEditingNotesChange: [{
                type: Output
            }], changeNotes: [{
                type: Output
            }], deleteNote: [{
                type: Output
            }] } });

class TransactionDetailsComponent {
    constructor(transactionUpdate, messagesService, transactionsInquireAndDispute, cd) {
        this.transactionUpdate = transactionUpdate;
        this.messagesService = messagesService;
        this.transactionsInquireAndDispute = transactionsInquireAndDispute;
        this.cd = cd;
        /* eslint-enable */
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Whether to show the account number (for example, when transactions of multiple accounts are
         * shown) or not.
         */
        this.showAccountNumber = false;
        /**
         * Whether the notes editing form is shown or not.
         */
        this.isEditingNotes = false;
        this.isPending = false;
        this.showInquiryAndDispute = false;
        this.inquireAndDisputeTopics = {
            inquire: '',
            dispute: '',
        };
        /**
         * EventEmitter for triggering an isEditingNotesChange event.
         */
        this.isEditingNotesChange = new EventEmitter();
        this.showInquiryAndDisputeChange = new EventEmitter();
        /* eslint-disable */
        this.onNotesUpdateSuccess = new EventEmitter();
        this.onNotesUpdateError = new EventEmitter();
        this.unsubscribeSubject = new Subject();
        this.showReportForm = (display) => {
            if (display) {
                this.isEditingNotes = false;
            }
            this.showInquiryAndDisputeChange.emit(display);
        };
        this.isSavingNotes = false;
        this.deleteNoteModalActive = false;
        this.loadingStateEnum = TransactionsDetailsLoadingState;
    }
    //Inquire and dispute variables
    get reportState() {
        return this.transactionsInquireAndDispute.reportState;
    }
    get message() {
        return this.transactionsInquireAndDispute.message;
    }
    set message(value) {
        this.transactionsInquireAndDispute.message = value;
    }
    /**
     * Handler function after user changes notes for the transaction.  Calls service to update the
     * backend.
     *
     * @param notes - The new notes for the transaction.
     */
    onChangeNotes(notes) {
        if (typeof this.transaction === 'undefined') {
            return;
        }
        this.updateNotes(this.transaction, notes);
    }
    openEditNotes() {
        this.isEditingNotes = true;
        this.transactionsInquireAndDispute.showReportForm(false);
    }
    handleDelete(data) {
        this.deleteNoteModalActive = true;
        if (this.transaction) {
            this.transaction.notes = data;
        }
    }
    closeModal() {
        this.deleteNoteModalActive = false;
    }
    submitDeleteNote() {
        if (this.transaction) {
            this.updateNotes(this.transaction, '');
        }
    }
    updateNotes(transaction, note) {
        this.isSavingNotes = true;
        this.transactionUpdate.updateNotes(transaction, note).subscribe(() => {
            transaction.notes = note;
            this.deleteNoteModalActive = false;
            this.onNotesUpdateSuccess.emit(note);
            this.updateNotesState();
        }, (error) => {
            this.onNotesUpdateError.emit(error);
            this.updateNotesState();
        });
    }
    updateNotesState() {
        this.isSavingNotes = false;
        this.isEditingNotes = false;
        this.cd.markForCheck();
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        if (this.inquireAndDisputeTopics) {
            this.transactionsInquireAndDispute.showReport.subscribe({
                next: this.showReportForm,
            });
        }
    }
    ngOnDestroy() {
        this.transactionsInquireAndDispute.removeAllFiles();
        this.unsubscribeSubject.next();
        this.unsubscribeSubject.complete();
    }
    saveReport(messageForm) {
        const defaultBody = this.transaction ? this.messagesService.createDefaultBody(this.transaction) : '';
        this.transactionsInquireAndDispute
            .saveReport(this.transactionsInquireAndDispute.formatMessage(messageForm, defaultBody, this.inquireAndDisputeTopics, this.transaction))
            .pipe(takeUntil(this.unsubscribeSubject), switchMap(() => {
            if (this.transaction && messageForm.topic === 'dispute') {
                return this.transactionUpdate.setDisputeStatus(this.transaction, 'PENDING');
            }
            return of(undefined);
        }))
            .subscribe({
            next: (result) => {
                this.savedReportType = result !== undefined ? messageForm.topic : undefined;
                if (this.transaction && messageForm.topic === 'dispute') {
                    this.transaction.disputeStatus = 'PENDING';
                }
                if (this.transaction && messageForm.topic === 'inquire') {
                    this.savedReportType = messageForm.topic;
                }
                this.cd.markForCheck();
            },
        });
    }
    cancelReport() {
        this.transactionsInquireAndDispute.cancelReport();
    }
    fileChange(file) {
        this.transactionsInquireAndDispute
            .fileChange(file)
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe({
            next: () => {
                this.cd.markForCheck();
            },
        });
    }
    fileRemoved(attachment) {
        this.transactionsInquireAndDispute
            .fileRemoved(attachment)
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe({
            next: () => {
                this.cd.markForCheck();
            },
        });
    }
}
TransactionDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsComponent, deps: [{ token: i1.TransactionUpdateService }, { token: i1.MessagesService }, { token: i1.TransactionsInquireAndDisputeUIService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TransactionDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailsComponent, selector: "bb-transaction-details", inputs: { transaction: "transaction", showAccountNumber: "showAccountNumber", isEditingNotes: "isEditingNotes", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", isPending: "isPending", showInquiryAndDispute: "showInquiryAndDispute", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { isEditingNotesChange: "isEditingNotesChange", showInquiryAndDisputeChange: "showInquiryAndDisputeChange", onNotesUpdateSuccess: "onNotesUpdateSuccess", onNotesUpdateError: "onNotesUpdateError" }, providers: [TransactionsInquireAndDisputeUIService], ngImport: i0, template: "<ng-container bbTransactionsListItemDetailsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListItemDetailsCustomizable let-hostRef>\n  <div class=\"bb-transaction-list-item-details\">\n    <div class=\"bb-block bb-block--lg\">\n      <div class=\"bb-text-align-center bb-stack bb-stack--center\">\n        <!-- Add note button -->\n        <div class=\"bb-stack__item bb-transaction-list-item-details-controls-container\">\n          <button\n            bbButton\n            [circle]=\"true\"\n            data-role=\"control-note-btn\"\n            class=\"bb-block bb-block--md\"\n            [attr.aria-expanded]=\"!!hostRef.isEditingNotes\"\n            (click)=\"hostRef.openEditNotes()\"\n          >\n            <bb-icon-ui name=\"subject\"></bb-icon-ui>\n          </button>\n          <div class=\"bb-transaction-list-item-details-controls-label\">\n            <label\n              data-role=\"add-note-label\"\n              *ngIf=\"!hostRef.transaction.notes; else editNoteLabel\"\n              i18n=\"Add note to the current transaction@@transactions.list.details.addNote.label\"\n              >Add note</label\n            >\n            <ng-template #editNoteLabel>\n              <label\n                data-role=\"edit-note-label\"\n                i18n=\"Edit note of the current transaction@@transactions.list.details.editNote.label\"\n                >Edit note</label\n              >\n            </ng-template>\n          </div>\n        </div>\n        <!-- Report button -->\n        <div\n          *ngIf=\"hostRef.transactionDetailsLoadingStatus?.enableDisputeAndInquiry === hostRef.loadingStateEnum.done\"\n          class=\"bb-stack__item bb-transaction-list-item-details-controls-container\"\n        >\n          <button\n            bbButton\n            [circle]=\"true\"\n            class=\"bb-block bb-block--md\"\n            data-role=\"report-button\"\n            (click)=\"hostRef.showReportForm(true)\"\n          >\n            <bb-icon-ui name=\"sms-failed\"></bb-icon-ui>\n          </button>\n          <div class=\"bb-transaction-list-item-details-controls-label\">\n            <label\n              data-role=\"report-label\"\n              i18n=\"Report the current transaction@@transactions.list.details.report.label\"\n            >\n              Report\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dispute and inquiry alerts -->\n      <div class=\"bb-block bb-block--lg bb-text-align-left\">\n        <!-- Dispute banners -->\n        <bb-dispute-banner [transaction]=\"hostRef.transaction\"></bb-dispute-banner>\n        <!-- Inquiry banner -->\n        <ng-container *ngIf=\"hostRef.reportState === hostRef.loadingStateEnum.done\">\n          <bb-alert-ui\n            *ngIf=\"hostRef.savedReportType === 'inquire'\"\n            modifier=\"info\"\n            data-role=\"send-inquiry-success\"\n            title=\"The bank is reviewing your transaction\"\n            i18n-title=\"\n              Send inquiry report success notification|Message for a notification displayed when sending transaction\n              inquiry report request has succeed@@transactions.notification.success.send.inquiry.title\"\n            message=\"Please go to Messages to view any responses to your request.\"\n            i18n-message=\"\n              Send inquiry report success notification message@@transactions.notification.success.send.inquiry.message\"\n          ></bb-alert-ui>\n        </ng-container>\n      </div>\n\n      <!-- Dispute and inquiry component -->\n      <div *ngIf=\"hostRef.showInquiryAndDispute\">\n        <bb-transactions-inquiry-dispute\n          [(message)]=\"hostRef.message\"\n          [enableDispute]=\"\n            hostRef.transactionDetailsLoadingStatus.disputeOption === hostRef.loadingStateEnum.done &&\n            (hostRef.transaction.disputeStatus === 'UNDISPUTED' ||\n              hostRef.transaction.disputeStatus === 'REJECTED' ||\n              !hostRef.transaction.disputeStatus)\n          \"\n          [state]=\"hostRef.reportState\"\n          [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n          (submitReport)=\"hostRef.saveReport($event)\"\n          (cancelReport)=\"hostRef.cancelReport()\"\n          (fileChange)=\"hostRef.fileChange($event)\"\n          (fileRemoved)=\"hostRef.fileRemoved($event)\"\n        ></bb-transactions-inquiry-dispute>\n      </div>\n    </div>\n\n    <div class=\"bb-block--lg\">\n      <!-- Type -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.type && (!!hostRef.transaction?.category || !!hostRef.transaction.isPending)\"\n        data-role=\"list-details-type-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Type of the selected transaction@@transactions.details.label.transactionType\"\n          data-role=\"section-title\"\n        >\n          Type\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.type }}\n        </div>\n      </div>\n\n      <!-- Currency Exchange -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction.currencyExchangeAvailability\"\n        data-role=\"list-details-currency-exchange-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Transaction type of the selected transaction@@transactions.details.label.currencyExchange\"\n          data-role=\"section-title\"\n        >\n          Currency exchange\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          <bb-amount-ui\n            amount=\"1\"\n            [currency]=\"hostRef.transaction?.instructedAmountCurrency.currencyCode\"\n          ></bb-amount-ui>\n          <span> = </span>\n          <bb-amount-ui\n            [amount]=\"hostRef.transaction?.currencyExchangeRate\"\n            [currency]=\"hostRef.transaction?.transactionAmountCurrency.currencyCode\"\n            [decimalPlaces]=\"6\"\n            [trailingZeroes]=\"false\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <!-- Instructed amount -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.instructedAmountCurrency?.amount\"\n        data-role=\"list-details-instructed-amount-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Instructed Amount of the selected transaction@@transactions.details.label.instructedAmount\"\n          data-role=\"section-title\"\n        >\n          Instructed amount\n        </div>\n        <div class=\"break-word\">\n          <bb-amount-ui\n            data-role=\"section-content\"\n            [amount]=\"hostRef.transaction?.instructedAmountCurrency?.amount\"\n            [currency]=\"hostRef.transaction?.instructedAmountCurrency?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <!-- Counter party account number -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.counterPartyAccountNumber\"\n        data-role=\"list-details-counter-party-account-number-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"\n            Counter Party Account number of the selected\n            transaction@@transactions.details.label.counterPartyAccountNumber\"\n          data-role=\"section-title\"\n        >\n          Counter party account number\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.counterPartyAccountNumber }}\n        </div>\n      </div>\n\n      <!-- Description -->\n      <div class=\"bb-block--md\" *ngIf=\"hostRef.transaction?.description\" data-role=\"list-details-description-section\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Description of the selected transaction@@transactions.details.label.description\"\n          data-role=\"section-title\"\n        >\n          Description\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.description }}\n        </div>\n      </div>\n\n      <!-- Original Description -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.originalDescription\"\n        data-role=\"list-details-original-description-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Original description of the selected transaction@@transactions.details.label.originalDescription\"\n          data-role=\"section-title\"\n        >\n          Original description\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.originalDescription }}\n        </div>\n      </div>\n\n      <!-- Running balance -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.runningBalance\"\n        data-role=\"list-details-running-balance-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Running balance of the selected transaction@@transactions.details.label.runningBalance\"\n          data-role=\"section-title\"\n        >\n          Running balance\n        </div>\n        <div class=\"break-word\">\n          <bb-amount-ui\n            data-role=\"section-content\"\n            [currency]=\"hostRef.transaction?.transactionAmountCurrency?.currencyCode\"\n            [amount]=\"hostRef.transaction?.runningBalance\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </div>\n\n    <!-- Check image -->\n    <ng-container *ngIf=\"hostRef?.transactionDetailsLoadingStatus?.checkImages !== hostRef.loadingStateEnum.notStarted\">\n      <ng-container\n        *ngIf=\"hostRef?.transactionDetailsLoadingStatus?.checkImages !== hostRef.loadingStateEnum.notLoaded\"\n      >\n        <div\n          class=\"bb-block--lg\"\n          *ngIf=\"hostRef.transaction && hostRef.transaction.checkImageAvailability === 'AVAILABLE'\"\n        >\n          <span\n            class=\"bb-text-bold\"\n            i18n=\"check images of the selected transaction@@transactions.details.label.check-img\"\n          >\n            Check images\n          </span>\n          <span>\n            <bb-icon-ui\n              class=\"bb-transactions-list-pending-header__tooltip\"\n              role=\"tooltip\"\n              name=\"info\"\n              size=\"sm\"\n              [bbTooltip]=\"tipContent\"\n              triggers=\"hover click\"\n              placement=\"right\"\n              bbAccessibilityKeyboard\n            ></bb-icon-ui>\n          </span>\n          <bb-transaction-check-image\n            [transaction]=\"hostRef.transaction\"\n            [checkImagesList]=\"hostRef.checkImagesList\"\n            [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n          ></bb-transaction-check-image>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <!-- Geo location -->\n    <div *ngIf=\"hostRef.transaction?.location\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--sm\"\n        i18n=\"Geo location of the selected transaction@@transactions.details.label.geo-location\"\n      >\n        Location\n      </div>\n      <bb-transaction-geo-location-map\n        [transaction]=\"hostRef.transaction\"\n        [loadingStatus]=\"hostRef.transactionDetailsLoadingStatus?.geolocation\"\n      ></bb-transaction-geo-location-map>\n    </div>\n\n    <!-- Notes -->\n    <ng-container *ngIf=\"!!hostRef.isEditingNotes || !!hostRef.transaction.notes\">\n      <div class=\"bb-block bb-block--lg\"></div>\n      <div class=\"bb-transaction-list-item-detail-additional-info\">\n        <bb-transaction-notes\n          data-role=\"transaction-notes\"\n          [transaction]=\"hostRef.transaction\"\n          [isEditingNotes]=\"hostRef.isEditingNotes\"\n          [isSavingNotes]=\"hostRef.isSavingNotes\"\n          (isEditingNotesChange)=\"hostRef.isEditingNotes = $event; hostRef.isEditingNotesChange.emit($event)\"\n          (changeNotes)=\"hostRef.onChangeNotes($event)\"\n          (deleteNote)=\"hostRef.handleDelete($event)\"\n        ></bb-transaction-notes>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n\n<!-- Delete note -->\n<bb-modal-ui [isOpen]=\"deleteNoteModalActive\" (cancel)=\"closeModal()\">\n  <ng-container bbTransactionsListConfirmationModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</bb-modal-ui>\n\n<ng-template bbTransactionsListConfirmationModalCustomizable let-hostRef>\n  <div class=\"modal-header\">\n    <h2\n      id=\"modal-basic-title\"\n      class=\"modal-title\"\n      data-role=\"delete-note-modal-header\"\n      i18n=\"Delete note?|Delete note modal title@@transactions.list.note.delete.modal.title\"\n    >\n      Delete note?\n    </h2>\n  </div>\n\n  <div class=\"modal-body\">\n    <span\n      data-role=\"delete-note-modal-subHeader\"\n      i18n=\"Are you sure you want to delete this note?|Delete note info@@transactions.list.note.delete.modal.info\"\n    >\n      Are you sure you want to delete the attached note? Entered data will be lost.\n    </span>\n  </div>\n\n  <div class=\"modal-footer\">\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        color=\"danger\"\n        class=\"bb-button-bar__button\"\n        data-role=\"delete-note-modal-delete-button\"\n        (click)=\"hostRef.submitDeleteNote()\"\n        i18n=\"Delete note|Delete note button label@@transactions.list.note.delete.modal.delete.button\"\n      >\n        Delete note\n      </button>\n\n      <button\n        bbButton\n        color=\"link\"\n        class=\"bb-button-bar__button\"\n        data-role=\"delete-note-modal-cancel-button\"\n        (click)=\"hostRef.closeModal()\"\n        i18n=\"Cancel|Cancel button label@@transactions.list.note.confirmation.modal.cancel.button\"\n      >\n        Cancel\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #tipContent>\n  <div class=\"bb-text-align-left\">\n    <span i18n=\"Description inside a tooltip@@transactions.list.details.check-img.tooltip.description\">\n      Some images may not be available online if:\n    </span>\n    <ul>\n      <li i18n=\"Description scheduled maintenance@transactions.list.details.check-img.tooltip.description.point1\">\n        There is a scheduled maintenance in the Check Image Service.\n      </li>\n      <li i18n=\"Check deposited earlier@transactions.list.details.check-img.tooltip.description.point2\">\n        The check has been deposited earlier than 12 months ago.\n      </li>\n      <li i18n=\"Check deposited after 48 hours@transactions.list.details.check-img.tooltip.description.point3\">\n        The checks have been received or deposited within the past 48 hours.\n      </li>\n    </ul>\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i1.TransactionsDisputeBannerComponent; }), selector: "bb-dispute-banner", inputs: ["transaction"] }, { type: i0.forwardRef(function () { return i3$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1.TransactionsInquiryDisputeComponent; }), selector: "bb-transactions-inquiry-dispute", inputs: ["message", "enableDispute", "state", "inquireAndDisputeTopics"], outputs: ["submitReport", "cancelReport", "messageChange", "fileChange", "fileRemoved"] }, { type: i0.forwardRef(function () { return i4.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i1.TransactionCheckImageComponent; }), selector: "bb-transaction-check-image", inputs: ["transaction", "checkImagesList", "transactionDetailsLoadingStatus"] }, { type: i0.forwardRef(function () { return i1.TransactionGeoLocationMapComponent; }), selector: "bb-transaction-geo-location-map", inputs: ["transaction", "loadingStatus"] }, { type: i0.forwardRef(function () { return TransactionNotesComponent; }), selector: "bb-transaction-notes", inputs: ["transaction", "isEditingNotes", "isSavingNotes"], outputs: ["isEditingNotesChange", "changeNotes", "deleteNote"] }, { type: i0.forwardRef(function () { return i1$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i7$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListItemDetailsCustomizableDirective; }), selector: "[bbTransactionsListItemDetailsCustomizable]" }, { type: i0.forwardRef(function () { return i6$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0.forwardRef(function () { return i10.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return TransactionsListConfirmationModalCustomizableDirective; }), selector: "[bbTransactionsListConfirmationModalCustomizable]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-details',
                    templateUrl: 'transaction-details.component.html',
                    providers: [TransactionsInquireAndDisputeUIService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionUpdateService }, { type: i1.MessagesService }, { type: i1.TransactionsInquireAndDisputeUIService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { transaction: [{
                type: Input
            }], showAccountNumber: [{
                type: Input
            }], isEditingNotes: [{
                type: Input
            }], checkImagesList: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], isPending: [{
                type: Input
            }], showInquiryAndDispute: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], isEditingNotesChange: [{
                type: Output
            }], showInquiryAndDisputeChange: [{
                type: Output
            }], onNotesUpdateSuccess: [{
                type: Output
            }], onNotesUpdateError: [{
                type: Output
            }] } });
class TransactionsListItemDetailsCustomizableDirective extends BbTemplate {
}
TransactionsListItemDetailsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemDetailsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListItemDetailsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemDetailsCustomizableDirective, selector: "[bbTransactionsListItemDetailsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemDetailsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListItemDetailsCustomizable]',
                }]
        }] });
class TransactionsListConfirmationModalCustomizableDirective extends BbTemplate {
}
TransactionsListConfirmationModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListConfirmationModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListConfirmationModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListConfirmationModalCustomizableDirective, selector: "[bbTransactionsListConfirmationModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListConfirmationModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListConfirmationModalCustomizable]',
                }]
        }] });

class TransactionDetailsModalComponent {
    constructor() {
        this.isDetailsOpen = false;
        this.isEditingNotes = false;
        this.inquireAndDisputeTopics = {
            inquire: '',
            dispute: '',
        };
        this.detailsOpen = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        this.showInquiryAndDispute = false;
        this.alertOptions = {
            displayAlert: false,
            displayStatus: '',
        };
    }
    onAlertDismiss() {
        this.alertOptions = {
            displayAlert: false,
            displayStatus: '',
        };
    }
    closeTransactionsCategory(categoryChangeStatus) {
        if (categoryChangeStatus) {
            this.alertOptions = {
                displayAlert: true,
                displayStatus: categoryChangeStatus,
            };
        }
        else {
            this.onAlertDismiss();
        }
    }
    closeDetails() {
        this.showInquiryAndDispute = false;
        this.close.emit();
    }
    get isPending() {
        let isPending = false;
        if (this.transaction && this.transaction.billingStatus) {
            const billingStatus = this.transaction.billingStatus.toUpperCase();
            isPending = billingStatus === BillingStatusEnum.pending || billingStatus === BillingStatusEnum.unbilled;
        }
        return isPending;
    }
}
TransactionDetailsModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionDetailsModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailsModalComponent, selector: "bb-transaction-details-modal", inputs: { isDetailsOpen: "isDetailsOpen", transaction: "transaction", showBillingStatus: "showBillingStatus", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen", close: "close" }, ngImport: i0, template: "<bb-modal-ui\n  [isOpen]=\"isDetailsOpen\"\n  [modalOptions]=\"{\n    centered: true\n  }\"\n  (cancel)=\"closeDetails()\"\n>\n  <div role=\"dialog\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <button\n          type=\"button\"\n          class=\"close bb-transaction-list-item-detail-header__close-button\"\n          aria-label=\"Close dialog\"\n          i18n-aria-label=\"Close dialog button@@transactions.list.dialog.close.button\"\n          (click)=\"closeDetails()\"\n        >\n          <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n        </button>\n      </ng-template>\n    </bb-modal-header-ui>\n    <!-- Details -->\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <div class=\"bb-text-align-center\">\n          <!-- Category icon-->\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-stack bb-stack--center\">\n              <bb-transaction-category-icon\n                [transaction]=\"transaction\"\n                backgroundType=\"circle\"\n                size=\"large\"\n              ></bb-transaction-category-icon>\n            </div>\n          </div>\n          <!-- Counter party, description -->\n          <div class=\"bb-block bb-block--md\">\n            <strong>\n              {{ transaction?.merchant ? transaction?.merchant?.name : transaction?.counterPartyName }}\n            </strong>\n          </div>\n          <!-- Amount -->\n          <div class=\"bb-heading-2 bb-block bb-block--md\">\n            <bb-amount-ui\n              data-role=\"list-details-amount\"\n              [showPlusSign]=\"true\"\n              [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n              [amount]=\"transaction?.transactionAmountCurrency?.amount || 0\"\n            ></bb-amount-ui>\n            <ng-container *ngIf=\"transaction?.currencyExchangeAvailability\">\n              <bb-icon-ui\n                class=\"bb-transaction-list-item-detail-header__exchange-icon\"\n                role=\"tooltip\"\n                name=\"exchange\"\n                size=\"md\"\n                [bbTooltip]=\"tipContent\"\n                triggers=\"hover click\"\n                placement=\"right\"\n                bbAccessibilityKeyboard\n              ></bb-icon-ui>\n              <span\n                class=\"sr-only\"\n                i18n=\"An exchange rate has been applied to the current transaction@@transactions.details.exchangeRate\"\n                >An exchange rate has been applied</span\n              >\n            </ng-container>\n          </div>\n          <!-- Date -->\n          <div class=\"bb-block bb-block--md\" *ngIf=\"transaction?.bookingDate\">\n            <div class=\"break-word text-small\" data-role=\"list-details-booking-date\">\n              {{ transaction?.bookingDate | date: 'longDate' }}\n            </div>\n          </div>\n          <!-- Category name -->\n          <div class=\"bb-block bb-block--lg\">\n            <bb-transaction-detail-category\n              (categoryChange)=\"closeTransactionsCategory($event)\"\n              [displayChangeCategory]=\"showChangeCategory\"\n              [transaction]=\"transaction\"\n            >\n            </bb-transaction-detail-category>\n          </div>\n          <!-- Billing status -->\n          <div\n            class=\"bb-block bb-block--md\"\n            *ngIf=\"\n              !showBillingStatus &&\n              (transaction?.billingStatus === 'UNBILLED' || transaction?.billingStatus === 'PENDING')\n            \"\n          >\n            <bb-badge-ui\n              text=\"{{ transaction?.billingStatus }}\"\n              color=\"warning\"\n              [abbr]=\"false\"\n              [circle]=\"false\"\n            ></bb-badge-ui>\n          </div>\n          <div class=\"bb-block bb-block--md bb-text-align-left\">\n            <ng-container *ngIf=\"alertOptions.displayAlert\" [ngSwitch]=\"alertOptions.displayStatus\">\n              <bb-alert-ui\n                *ngSwitchCase=\"'error'\"\n                title=\"Transaction category was not changed\"\n                i18n-title=\"\n                  Update failed notification|Message for a notification displayed when transaction category update\n                  request has failed@@transaction.notification.error.update\"\n                [dismissible]=\"true\"\n                (close)=\"onAlertDismiss()\"\n              ></bb-alert-ui>\n\n              <bb-alert-ui\n                *ngSwitchCase=\"'success'\"\n                modifier=\"success\"\n                title=\"Transaction category changed successfully\"\n                i18n-title=\"\n                  Update notification|Message for a notification displayed when transaction category update request has\n                  been processed@@transaction.notification.success.update\"\n                [dismissible]=\"true\"\n                (close)=\"onAlertDismiss()\"\n              ></bb-alert-ui>\n            </ng-container>\n          </div>\n        </div>\n\n        <bb-transaction-details\n          *ngIf=\"isDetailsOpen\"\n          [transaction]=\"transaction\"\n          [(isEditingNotes)]=\"isEditingNotes\"\n          [(showInquiryAndDispute)]=\"showInquiryAndDispute\"\n          [checkImagesList]=\"checkImagesList\"\n          [transactionDetailsLoadingStatus]=\"transactionDetailsLoadingStatus\"\n          [inquireAndDisputeTopics]=\"inquireAndDisputeTopics\"\n          [isPending]=\"isPending\"\n        ></bb-transaction-details>\n      </ng-template>\n    </bb-modal-body-ui>\n  </div>\n</bb-modal-ui>\n<ng-template #tipContent>\n  <div class=\"bb-text-align-left\">\n    <span\n      i18n=\"\n        Description inside a tooltip describing an exchange rate has ocurred@@transactions.details.exchangeRate.tooltip\"\n    >\n      An exchange rate has been applied\n    </span>\n  </div>\n</ng-template>\n", components: [{ type: i1$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1.TransactionCategoryIconComponent, selector: "bb-transaction-category-icon", inputs: ["transaction", "circle", "size"] }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: TransactionDetailCategoryComponent, selector: "bb-transaction-detail-category", inputs: ["transaction", "displayChangeCategory"], outputs: ["categoryChange"] }, { type: i6$2.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: TransactionDetailsComponent, selector: "bb-transaction-details", inputs: ["transaction", "showAccountNumber", "isEditingNotes", "checkImagesList", "transactionDetailsLoadingStatus", "isPending", "showInquiryAndDispute", "inquireAndDisputeTopics"], outputs: ["isEditingNotesChange", "showInquiryAndDisputeChange", "onNotesUpdateSuccess", "onNotesUpdateError"] }], directives: [{ type: i1$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]" }, { type: i10.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "date": i8.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-details-modal',
                    templateUrl: 'transaction-details-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isDetailsOpen: [{
                type: Input
            }], transaction: [{
                type: Input
            }], showBillingStatus: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], checkImagesList: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }], close: [{
                type: Output
            }] } });

class TransactionHeaderComponent {
    constructor(transactionsIconCategoriesFactory) {
        this.transactionsIconCategoriesFactory = transactionsIconCategoriesFactory;
        /**
         * Weather to show pending transactions on top or not.
         */
        this.showBillingStatus = false;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    /**
     * Subtitle to display - either the category of the transaction, or the type if the category is
     * not available.
     */
    get subtitle() {
        if (typeof this.transaction === 'undefined') {
            return '';
        }
        if (this.transactionCategoryIcon) {
            return this.transactionCategoryIcon.title;
        }
        return '';
    }
    /**
     * Title to display - either the counter party name of the transaction, or the description if the
     * name is not available.
     */
    get title() {
        if (!this.transaction) {
            return '';
        }
        if (this.transaction.merchant && this.transaction.merchant.name) {
            return this.transaction.merchant.name;
        }
        else {
            return this.transaction.counterPartyName || this.transaction.description || '';
        }
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        this.transactionCategoryIcon = this.transactionsIconCategoriesFactory.create(this.transaction);
    }
    showCategory() {
        if (this.transaction) {
            return this.transaction.isPending || !!this.ownCategory;
        }
        return false;
    }
    get ownCategory() {
        return this.transaction && this.transaction.category;
    }
    // TODO change this type from model to be number (jira -> https://backbase.atlassian.net/browse/TRANS-4722)
    convertToNumber(value) {
        return Number(value);
    }
}
TransactionHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionHeaderComponent, deps: [{ token: i1.TransactionsIconCategoriesFactoryService }], target: i0.ɵɵFactoryTarget.Component });
TransactionHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionHeaderComponent, selector: "bb-transaction-header", inputs: { transaction: "transaction", showBillingStatus: "showBillingStatus" }, ngImport: i0, template: "<div class=\"bb-transaction-header bb-stack w-auto row\">\n  <div class=\"bb-stack__item col-6\">\n    <div class=\"bb-stack\">\n      <!-- Category -->\n      <div class=\"bb-transaction-item-category bb-stack__item\">\n        <ng-container\n          *ngIf=\"\n            transaction?.billingStatus === 'UNBILLED' || transaction?.billingStatus === 'PENDING';\n            else transactionIcon\n          \"\n        >\n          <bb-icon-ui\n            name=\"watch-later\"\n            class=\"bb-transaction-category bb-transaction-category--pending\"\n            color=\"inactive\"\n            backgroundType=\"square\"\n          ></bb-icon-ui>\n        </ng-container>\n        <ng-template #transactionIcon>\n          <bb-transaction-category-icon\n            [transaction]=\"transaction\"\n            backgroundType=\"circle\"\n          ></bb-transaction-category-icon>\n        </ng-template>\n      </div>\n\n      <!-- Counter party, description -->\n      <div class=\"bb-transaction-item-description bb-stack__item\">\n        <div class=\"bb-transaction-item-description__title\">\n          {{ title | titlecase }}\n        </div>\n        <div class=\"bb-transaction-item-description__subtitle\">\n          {{ subtitle | titlecase }}\n        </div>\n        <div class=\"bb-text-disabled\">\n          {{ transaction?.account?.IBAN ? transaction?.account?.IBAN : transaction?.account?.BBAN }}\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-stack__item col-6\">\n    <div class=\"bb-stack bb-transaction-list-header-amount\">\n      <div\n        class=\"bb-stack__item bb-stack__item--push-right bb-text-align-right bb-transaction-list-header-amount__wrapper\"\n      >\n        <div class=\"bb-stack bb-stack--wrap\">\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <div class=\"bb-stack bb-stack--wrap\">\n              <!-- Dispute status -->\n              <div\n                class=\"bb-stack__item bb-stack__item--push-right-lg-down bb-transaction-list-header-dispute-status-tag\"\n              >\n                <bb-dispute-status-tag [status]=\"hostRef.transaction?.disputeStatus\"></bb-dispute-status-tag>\n              </div>\n\n              <!-- Amount -->\n              <div\n                class=\"bb-stack__item bb-stack__item--push-right bb-transaction-list-header-amount__value\"\n                [ngClass]=\"{\n                  'bb-transaction-list-header-amount__value--credit':\n                    convertToNumber(transaction?.transactionAmountCurrency?.amount || '0') > 0\n                }\"\n              >\n                <bb-amount-ui\n                  [showPlusSign]=\"true\"\n                  [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n                  [amount]=\"transaction?.transactionAmountCurrency?.amount || 0\"\n                ></bb-amount-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"hostRef.transaction?.runningBalance\" class=\"bb-text-support text-small\">\n          <span class=\"sr-only\" i18n=\"Running Balance as of Transaction Date@@transactions.list.runningBalance\"\n            >Running balance</span\n          >\n          <bb-amount-ui\n            bbTooltip=\"Running balance\"\n            placement=\"left\"\n            triggers=\"hover\"\n            [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n            [amount]=\"transaction?.runningBalance || 0\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1.TransactionCategoryIconComponent, selector: "bb-transaction-category-icon", inputs: ["transaction", "circle", "size"] }, { type: i1.TransactionsDisputeStatusTagComponent, selector: "bb-dispute-status-tag", inputs: ["status"] }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i10.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }], pipes: { "titlecase": i8.TitleCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-header',
                    templateUrl: './transaction-header.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionsIconCategoriesFactoryService }]; }, propDecorators: { transaction: [{
                type: Input
            }], showBillingStatus: [{
                type: Input
            }] } });

class TransactionsListItemComponent {
    constructor(featureService, 
    // eslint-disable-next-line
    showDetailsConfig) {
        this.featureService = featureService;
        this.showDetailsConfig = showDetailsConfig;
        /**
         * Whether to show pending transactions on top or not.
         */
        this.showBillingStatus = false;
        this.detailsOpen = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Whether the transaction details are shown or not.
         */
        this.isDetailsOpen = false;
        /**
         * Whether the notes editing form is shown or not.
         */
        this.isEditingNotes = false;
        /**
         * Alert details such as visibility and type
         */
        this.alertOptions = {
            displayAlert: false,
            displayStatus: '',
        };
        if (this.showDetailsConfig === null || this.showDetailsConfig === undefined) {
            this.showDetailsConfig = true;
        }
    }
    /**
     * Show the transaction details.
     */
    openDetails() {
        this.isDetailsOpen = true;
        if (this.transaction) {
            this.detailsOpen.emit(this.transaction);
        }
    }
    /**
     * Hide the transaction details.
     */
    closeDetails() {
        this.isDetailsOpen = false;
        this.onAlertDismiss();
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
    }
    showCategory() {
        return this.isPending || !!this.ownCategory;
    }
    get hasModal() {
        // if the feature is not enabled, we are still displaying modal in the item component
        return !this.featureService.isEnabled(TRANSACTIONS_DETAILS_SHARE_MODAL);
    }
    get isPending() {
        let isPending = false;
        if (this.transaction && this.transaction.billingStatus) {
            const billingStatus = this.transaction.billingStatus.toUpperCase();
            isPending = billingStatus === BillingStatusEnum.pending || billingStatus === BillingStatusEnum.unbilled;
        }
        return isPending;
    }
    get ownCategory() {
        return this.transaction && this.transaction.category;
    }
    closeTransactionsCategory(categoryChangeStatus) {
        if (categoryChangeStatus) {
            this.alertOptions = {
                displayAlert: true,
                displayStatus: categoryChangeStatus,
            };
        }
        else {
            this.onAlertDismiss();
        }
    }
    onAlertDismiss() {
        this.alertOptions = {
            displayAlert: false,
            displayStatus: '',
        };
    }
}
TransactionsListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemComponent, deps: [{ token: i1$2.FeaturesService }, { token: showDetailsConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TransactionsListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemComponent, selector: "bb-transactions-list-item", inputs: { transaction: "transaction", showBillingStatus: "showBillingStatus", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen" }, ngImport: i0, template: "<ng-container bbTransactionsListItemCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListItemCustomizable let-hostRef>\n  <div bbAccessibilityKeyboard (click)=\"hostRef.openDetails()\">\n    <ng-container bbTransactionsListItemHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <span\n      i18n=\"Transaction selector button@@transactions.list.transaction.label\"\n      i18n-aria-label=\"Transaction selector button label@@transactions.list.transaction.label\"\n      class=\"sr-only\"\n      role=\"button\"\n    >\n      Select transaction\n    </span>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.showDetailsConfig && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showBillingStatus]=\"hostRef.showBillingStatus\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.openDetails($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListItemHeaderCustomizable let-hostRef>\n  <bb-transaction-header\n    [showBillingStatus]=\"hostRef.showBillingStatus\"\n    [transaction]=\"hostRef.transaction\"\n  ></bb-transaction-header>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return TransactionDetailsModalComponent; }), selector: "bb-transaction-details-modal", inputs: ["isDetailsOpen", "transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen", "close"] }, { type: i0.forwardRef(function () { return TransactionHeaderComponent; }), selector: "bb-transaction-header", inputs: ["transaction", "showBillingStatus"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListItemCustomizableDirective; }), selector: "[bbTransactionsListItemCustomizable]" }, { type: i0.forwardRef(function () { return i1.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0.forwardRef(function () { return TransactionsListItemHeaderCustomizableDirective; }), selector: "[bbTransactionsListItemHeaderCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-list-item',
                    templateUrl: './transactions-list-item.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FeaturesService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [showDetailsConfigToken]
                }] }]; }, propDecorators: { transaction: [{
                type: Input
            }], showBillingStatus: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], checkImagesList: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }] } });
class TransactionsListItemHeaderCustomizableDirective extends BbTemplate {
}
TransactionsListItemHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListItemHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemHeaderCustomizableDirective, selector: "[bbTransactionsListItemHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListItemHeaderCustomizable]',
                }]
        }] });
class TransactionsListItemCustomizableDirective extends BbTemplate {
}
TransactionsListItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemCustomizableDirective, selector: "[bbTransactionsListItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListItemCustomizable]',
                }]
        }] });

class TransactionsListItemGroupComponent {
    constructor() {
        this.detailsOpen = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    ngOnInit() {
        if (typeof this.transactions === 'undefined') {
            throw new Error(`"transactions" input is required in "${this.constructor.name}"`);
        }
    }
    get daysElapsed() {
        if (this.transactionDate === undefined) {
            return undefined;
        }
        let transactionDate = new Date(this.transactionDate);
        if (Number.isNaN(transactionDate.getTime())) {
            return undefined;
        }
        const millisecondsPerDay = 86400000;
        const today = this.roundDate(new Date());
        transactionDate = this.roundDate(transactionDate);
        return Math.floor((today.getTime() - transactionDate.getTime()) / millisecondsPerDay);
    }
    onDetailOpen(transaction) {
        this.detailsOpen.emit(transaction);
    }
    roundDate(date) {
        date.setUTCHours(0);
        date.setUTCMinutes(0);
        date.setUTCSeconds(0);
        return date;
    }
    trackByFn(_index, element) {
        return element.id;
    }
}
TransactionsListItemGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionsListItemGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemGroupComponent, selector: "bb-transactions-list-item-group", inputs: { transactionDate: "transactionDate", transactions: "transactions", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen" }, ngImport: i0, template: "<ng-container bbTransactionsListItemGroupCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListItemGroupCustomizable let-hostRef>\n  <div\n    role=\"heading\"\n    aria-level=\"2\"\n    class=\"bb-transaction-group__date bb-block--md bb-subheader\"\n    i18n=\"Date of the selected transaction@@transactions.list.transactionDate\"\n    tabindex=\"0\"\n  >\n    {hostRef.daysElapsed, plural, =0 {Today} =1 {Yesterday} other\n    {{{ hostRef.transactionDate | date:'longDate' }}} }\n  </div>\n  <div>\n    <div role=\"list\">\n      <div\n        class=\"bb-block--md\"\n        *ngFor=\"let transaction of hostRef.transactions; trackBy: hostRef.trackByFn\"\n        role=\"listitem\"\n      >\n        <bb-transactions-list-item\n          [showChangeCategory]=\"hostRef.showChangeCategory\"\n          [transaction]=\"transaction\"\n          [checkImagesList]=\"hostRef.checkImagesList\"\n          [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n          [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n          (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n        ></bb-transactions-list-item>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return TransactionsListItemComponent; }), selector: "bb-transactions-list-item", inputs: ["transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListItemGroupCustomizableDirective; }), selector: "[bbTransactionsListItemGroupCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i0.forwardRef(function () { return i8.DatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-list-item-group',
                    templateUrl: './transactions-list-item-group.component.html',
                }]
        }], propDecorators: { transactionDate: [{
                type: Input
            }], transactions: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], checkImagesList: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }] } });
class TransactionsListItemGroupCustomizableDirective extends BbTemplate {
}
TransactionsListItemGroupCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemGroupCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListItemGroupCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemGroupCustomizableDirective, selector: "[bbTransactionsListItemGroupCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemGroupCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListItemGroupCustomizable]',
                }]
        }] });

class TransactionsListComponent {
    constructor(featureService, showDetailsConfig) {
        this.featureService = featureService;
        this.showDetailsConfig = showDetailsConfig;
        /**
         * Whether new transactions are being loaded.  By default, this is `LoadingState.Loaded`.
         */
        this.loadingState = LoadingState.Loaded;
        /**
         * Event emitter for loading the next page of transactions.
         */
        this.loadMore = new EventEmitter();
        /**
         * Event emitter for loading a specific page of transactions.
         */
        this.pageChange = new EventEmitter();
        this.detailsOpen = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Whether the transaction details are shown or not.
         */
        this.isDetailsOpen = false;
        this.unsubscribeSubject$ = new Subject();
        if (this.showDetailsConfig === null || this.showDetailsConfig === undefined) {
            this.showDetailsConfig = true;
        }
    }
    /**
     * Whether there are any loaded transactions.
     */
    hasItems() {
        if (this.numberOfResultsFound !== undefined) {
            return this.numberOfResultsFound > 0;
        }
        return this.transactionsGroupedByDate && this.transactionsGroupedByDate.length > 0;
    }
    get hasModal() {
        return this.featureService.isEnabled(TRANSACTIONS_DETAILS_SHARE_MODAL) && this.showDetailsConfig;
    }
    /**
     * Whether transactions are loading.
     */
    get isLoading() {
        return this.loadingState !== LoadingState.Loaded;
    }
    get isLoadingMore() {
        return this.loadingState === LoadingState.LoadingMore || this.loadingState === LoadingState.LoadingPage;
    }
    /**
     * Whether pagination is configured to be paged.
     */
    get isPaginationPaged() {
        return this.paginationType === PaginationType.PAGINATION;
    }
    /**
     * Whether pagination is configured to be a load-more button.
     */
    get isPaginationLoadMore() {
        return this.paginationType === PaginationType.LOAD_MORE;
    }
    /**
     * Whether pagination is configured to be a infinite-scroll.
     */
    get isInfiniteScrollPagination() {
        return this.paginationType === PaginationType.INFINITE_SCROLL;
    }
    /**
     * Returns whether all transactions have been loaded or not.
     */
    hasLoadedAll() {
        return this.transactionsList && TransactionsList.hasLoadedAll(this.transactionsList);
    }
    onLoadMore() {
        this.loadMore.emit();
    }
    onPageChange(page) {
        this.pageChange.emit(page);
    }
    onDetailOpen(transaction) {
        this.isDetailsOpen = true;
        this.transaction = transaction;
        this.detailsOpen.emit(transaction);
    }
    /**
     * Hide the transaction details.
     */
    closeDetails() {
        this.isDetailsOpen = false;
    }
    ngOnChanges(changes) {
        if (changes.transactionsList) {
            this.transactionsGroupedByDate = Object.entries(TransactionsGroupedByDate.groupByDate(this.transactionsList));
        }
    }
    trackByFn(_index, group) {
        return group[0];
    }
    ngAfterViewInit() {
        if (this.isInfiniteScrollPagination) {
            fromEvent(window, 'scroll')
                .pipe(takeUntil(this.unsubscribeSubject$))
                .subscribe(() => {
                if (!(this.hasLoadedAll() || this.isLoading)) {
                    const element = document.documentElement;
                    const loadingOffsetHeight = element.offsetHeight * 1.5;
                    if (loadingOffsetHeight + element.scrollTop >= element.scrollHeight) {
                        this.onLoadMore();
                    }
                }
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribeSubject$.next();
        this.unsubscribeSubject$.complete();
    }
}
TransactionsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListComponent, deps: [{ token: i1$2.FeaturesService }, { token: showDetailsConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TransactionsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListComponent, selector: "bb-transactions-list", inputs: { transactionsList: "transactionsList", currentPage: "currentPage", pageSize: "pageSize", loadingState: "loadingState", maxNavPages: "maxNavPages", paginationType: "paginationType", numberOfResultsFound: "numberOfResultsFound", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", inquireAndDisputeTopics: "inquireAndDisputeTopics", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus" }, outputs: { loadMore: "loadMore", pageChange: "pageChange", detailsOpen: "detailsOpen" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"!hostRef.isLoading || hostRef.isLoadingMore; else loadingState\">\n  <ng-container *ngIf=\"hostRef.hasItems(); else emptyState\">\n    <ng-container\n      *ngIf=\"hostRef.isInfiniteScrollPagination; else normalList\"\n      [ngTemplateOutlet]=\"bbTransactionsListWithInfiniteScroll\"\n      [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n    ></ng-container>\n    <ng-template #normalList>\n      <ng-container bbTransactionsListListCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n      <ng-container bbTransactionsListPaginationCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <ng-container bbTransactionsListEmptyStateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #bbTransactionsListWithInfiniteScroll let-hostRef>\n  <div class=\"bb-list bb-block--md\">\n    <div class=\"bb-list__item\" *ngFor=\"let date of hostRef.transactionsGroupedByDate; trackBy: hostRef.trackByFn\">\n      <bb-transactions-list-item-group\n        [checkImagesList]=\"hostRef.checkImagesList\"\n        [transactions]=\"date[1]\"\n        [transactionDate]=\"date[0]\"\n        [showChangeCategory]=\"hostRef.showChangeCategory\"\n        [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n        [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list-item-group>\n    </div>\n    <ng-container *ngIf=\"hostRef.isLoading\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </ng-container>\n    <span\n      class=\"bb-d-block bb-text-align-center\"\n      tabindex=\"0\"\n      i18n=\"Displayed message when all transactions had been loaded@@transactions.list.loadedAll\"\n      *ngIf=\"hostRef.hasLoadedAll()\"\n    >\n      All transactions have been loaded.\n    </span>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.transaction && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListListCustomizable let-hostRef>\n  <div class=\"bb-list bb-block--md\">\n    <div class=\"bb-list__item\" *ngFor=\"let date of hostRef.transactionsGroupedByDate; trackBy: hostRef.trackByFn\">\n      <bb-transactions-list-item-group\n        [checkImagesList]=\"hostRef.checkImagesList\"\n        [transactions]=\"date[1]\"\n        [transactionDate]=\"date[0]\"\n        [showChangeCategory]=\"hostRef.showChangeCategory\"\n        [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n        [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list-item-group>\n    </div>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.transaction && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListPaginationCustomizable let-hostRef>\n  <div class=\"bb-block bb-text-align-center\">\n    <bb-pagination-ui\n      class=\"bb-pagination\"\n      [page]=\"hostRef.currentPage\"\n      [boundaryLinks]=\"true\"\n      [directionLinks]=\"true\"\n      [totalItems]=\"hostRef.transactionsList.totalCount\"\n      [itemsPerPage]=\"hostRef.pageSize\"\n      [maxNavPages]=\"hostRef.maxNavPages\"\n      (pageChange)=\"hostRef.onPageChange($event)\"\n      *ngIf=\"hostRef.isPaginationPaged\"\n    ></bb-pagination-ui>\n    <div data-role=\"load-more\" *ngIf=\"hostRef.isPaginationLoadMore\">\n      <bb-load-button-ui\n        color=\"link\"\n        [isLoading]=\"hostRef.isLoadingMore\"\n        [from]=\"hostRef.currentPage\"\n        [size]=\"hostRef.pageSize\"\n        [totalCount]=\"hostRef.transactionsList.totalCount\"\n        (paramChange)=\"hostRef.onLoadMore($event)\"\n        i18n=\"Load more button, when there are still transactions to be loaded@@transactions.list.loadMore\"\n        *ngIf=\"!hostRef.hasLoadedAll()\"\n        >Load more</bb-load-button-ui\n      >\n      <span\n        i18n=\"Displayed message when all transactions had been loaded@@transactions.list.loadedAll\"\n        *ngIf=\"hostRef.hasLoadedAll()\"\n        >All transactions have been loaded.</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTransactionsListEmptyStateCustomizable let-hostRef>\n  <div class=\"card-body bb-state-container\">\n    <!-- Success-empty -->\n    <bb-empty-state-ui\n      *ngIf=\"hostRef.transactionsList?.initialRequest === true; else filterSearchEmpty\"\n      title=\"No Transactions Found\"\n      i18n-title=\"No transactions are found@@transactions.state.noTransactionsFound.title\"\n      subtitle=\"You don't have any transactions to be displayed.\"\n      i18n-subtitle=\"No transactions to be displayed@@transactions.state.noTransactionsFound.subtitle\"\n      iconSize=\"xl\"\n      iconModifier=\"swap-horiz\"\n    ></bb-empty-state-ui>\n\n    <!-- Search/Filter empty result -->\n    <ng-template #filterSearchEmpty>\n      <bb-empty-state-ui\n        title=\"No Results Found\"\n        i18n-title=\"No results are found@@transactions.state.noResultsFound.title\"\n        subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Filter/Search returned no results, try a different criteria@@transactions.state.noResultsFound.subtitle\"\n        iconSize=\"xl\"\n        iconModifier=\"search\"\n      ></bb-empty-state-ui>\n    </ng-template>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i7$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return TransactionsListItemGroupComponent; }), selector: "bb-transactions-list-item-group", inputs: ["transactionDate", "transactions", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: i0.forwardRef(function () { return TransactionDetailsModalComponent; }), selector: "bb-transaction-details-modal", inputs: ["isDetailsOpen", "transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen", "close"] }, { type: i0.forwardRef(function () { return i5.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0.forwardRef(function () { return i2$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i7$2.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return TransactionsListListCustomizableDirective; }), selector: "[bbTransactionsListListCustomizable]" }, { type: i0.forwardRef(function () { return TransactionsListPaginationCustomizableDirective; }), selector: "[bbTransactionsListPaginationCustomizable]" }, { type: i0.forwardRef(function () { return TransactionsListEmptyStateCustomizableDirective; }), selector: "[bbTransactionsListEmptyStateCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-list',
                    templateUrl: './transactions-list.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FeaturesService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [showDetailsConfigToken]
                }] }]; }, propDecorators: { transactionsList: [{
                type: Input
            }], currentPage: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], loadingState: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], paginationType: [{
                type: Input
            }], numberOfResultsFound: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], loadMore: [{
                type: Output
            }], pageChange: [{
                type: Output
            }], checkImagesList: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }] } });
class TransactionsListPaginationCustomizableDirective extends BbTemplate {
}
TransactionsListPaginationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListPaginationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListPaginationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListPaginationCustomizableDirective, selector: "[bbTransactionsListPaginationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListPaginationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListPaginationCustomizable]',
                }]
        }] });
class TransactionsListListCustomizableDirective extends BbTemplate {
}
TransactionsListListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListListCustomizableDirective, selector: "[bbTransactionsListListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListListCustomizable]',
                }]
        }] });
class TransactionsListEmptyStateCustomizableDirective extends BbTemplate {
}
TransactionsListEmptyStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListEmptyStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListEmptyStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListEmptyStateCustomizableDirective, selector: "[bbTransactionsListEmptyStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListEmptyStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListEmptyStateCustomizable]',
                }]
        }] });

class TransactionControlsComponent {
    constructor() {
        /**
         * Whether the notes editing form is shown or not.
         */
        this.isEditingNotes = false;
        /**
         * EventEmitter for triggering an isEditingNotesChange event.
         */
        this.isEditingNotesChange = new EventEmitter();
    }
    onAddNotes() {
        this.isEditingNotesChange.emit(true);
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
    }
}
TransactionControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionControlsComponent, selector: "bb-transaction-controls", inputs: { transaction: "transaction", isEditingNotes: "isEditingNotes" }, outputs: { isEditingNotesChange: "isEditingNotesChange" }, ngImport: i0, template: "<button bbButton color=\"link\" (click)=\"onAddNotes()\" *ngIf=\"!isEditingNotes && !transaction?.notes\" bbFocus>\n  <bb-icon-ui name=\"note-add\"></bb-icon-ui>\n  <span class=\"sr-only\" i18n=\"Add a note to the current transaction@@transactions.details.addNote\">Add a note</span>\n</button>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionControlsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-controls',
                    templateUrl: './transaction-controls.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { transaction: [{
                type: Input
            }], isEditingNotes: [{
                type: Input
            }], isEditingNotesChange: [{
                type: Output
            }] } });

const defaultAllOption = { name: 'All' };
class TransactionsFilterComponent {
    constructor(enumValuesService) {
        this.enumValuesService = enumValuesService;
        /**
         * EventEmitter for triggering a filter action.
         */
        this.filter = new EventEmitter();
        /**
         * EventEmitter to hide the filter options
         */
        this.closeFilter = new EventEmitter();
        /**
         * EventEmitter with the amount of active filters
         */
        this.filterCount = new EventEmitter();
        /**
         * Configuration parameter to show/hide billing status filter
         */
        this.hideBillingStatus = false;
        /**
         * Configuration parameter to show/hide filters
         */
        this.availableFilters = [];
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        this.availableFilterEnum = AvailableFilterEnum;
        this.transactionsFilterForm = new FormGroup({
            creditDebitIndicator: new FormControl(creditDebitIndicatorEnumValues[0]),
            types: new FormControl(),
            billingStatus: new FormControl(),
            amount: new FormGroup({
                from: new FormControl(undefined, Validators.min(0)),
                to: new FormControl(undefined, Validators.min(0)),
            }),
            date: new FormGroup({
                from: new FormControl(''),
                to: new FormControl(''),
            }),
            categories: new FormControl(),
            checkSerialNumber: new FormGroup({
                from: new FormControl(undefined, Validators.min(0)),
                to: new FormControl(undefined, Validators.min(0)),
            }),
        });
        this.creditDebitIndicatorOptions = creditDebitIndicatorEnumValues;
        this.subscriptions = new Subscription();
        this.setDefaultAllOption = (field) => (data) => {
            const control = this.transactionsFilterForm.get(field);
            if (control) {
                control.setValue(data[0]);
            }
        };
        const insertDefaultValue = (data) => [defaultAllOption, ...data];
        this.transactionTypeOptions = this.enumValuesService.getEnumValues('type').pipe(map(insertDefaultValue), catchError(() => of(defaultTransactionTypeEnumValues)));
        this.billingStatusOptions = this.enumValuesService.getEnumValues('billingStatus').pipe(map(insertDefaultValue), catchError(() => of(defaultBillingStatusEnumValues)));
    }
    ngOnInit() {
        var _a, _b;
        this.subscriptions.add(this.transactionTypeOptions.subscribe(this.setDefaultAllOption('types')));
        this.subscriptions.add(this.billingStatusOptions.subscribe(this.setDefaultAllOption('billingStatus')));
        this.subscriptions.add((_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(() => {
            var _a, _b, _c, _d, _e, _f;
            (_a = this.fromSerialNumber) === null || _a === void 0 ? void 0 : _a.setValidators(Validators.max((_b = this.toSerialNumber) === null || _b === void 0 ? void 0 : _b.value));
            (_c = this.toSerialNumber) === null || _c === void 0 ? void 0 : _c.setValidators(Validators.min(((_d = this.fromSerialNumber) === null || _d === void 0 ? void 0 : _d.value) || 0));
            (_e = this.fromSerialNumber) === null || _e === void 0 ? void 0 : _e.updateValueAndValidity({ emitEvent: false });
            (_f = this.toSerialNumber) === null || _f === void 0 ? void 0 : _f.updateValueAndValidity({ emitEvent: false });
        }));
        this.subscriptions.add((_b = this.amountFormGroup) === null || _b === void 0 ? void 0 : _b.valueChanges.subscribe(() => {
            var _a, _b, _c, _d, _e, _f;
            (_a = this.fromAmount) === null || _a === void 0 ? void 0 : _a.setValidators(Validators.max((_b = this.toAmount) === null || _b === void 0 ? void 0 : _b.value));
            (_c = this.toAmount) === null || _c === void 0 ? void 0 : _c.setValidators(Validators.min(((_d = this.fromAmount) === null || _d === void 0 ? void 0 : _d.value) || 0));
            (_e = this.fromAmount) === null || _e === void 0 ? void 0 : _e.updateValueAndValidity({ emitEvent: false });
            (_f = this.toAmount) === null || _f === void 0 ? void 0 : _f.updateValueAndValidity({ emitEvent: false });
        }));
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    compareByValue(optionListedValue, placeholderValue) {
        if (!optionListedValue || !placeholderValue) {
            return;
        }
        return optionListedValue.value === placeholderValue.value;
    }
    /**
     * Emit event to apply filter.
     *
     * @param filterParams - Options to filter transactions list with.
     */
    onFilter(filterParams) {
        this.filterCount.emit(this.activeFilterCounter);
        this.filter.emit(filterParams);
    }
    /**
     * Checks all the form fields and looks for differences with a default model to define if a filter was applied or not
     */
    get activeFilterCounter() {
        const fields = [
            this.fromDate,
            this.toDate,
            this.fromAmount,
            this.toAmount,
            this.fromSerialNumber,
            this.toSerialNumber,
            this.creditDebitIndicator,
            this.transactionType,
            this.billingStatus,
        ];
        const activeFilters = fields.reduce((count, field) => (this.isFilterApplied(field) ? ++count : count), 0);
        return activeFilters;
    }
    isFilterApplied(control) {
        if (typeof (control === null || control === void 0 ? void 0 : control.value) === 'object' && control.value !== null) {
            return JSON.stringify(control.value) !== JSON.stringify(defaultAllOption);
        }
        else {
            return (control === null || control === void 0 ? void 0 : control.valid) && (!!control.value || control.value === 0);
        }
    }
    /**
     * Clear filter form and reset values to default.
     */
    onClearFilter() {
        this.transactionsFilterForm.reset({
            creditDebitIndicator: creditDebitIndicatorEnumValues[0],
            types: defaultAllOption,
            billingStatus: defaultAllOption,
            date: {
                from: '',
                to: '',
            },
        });
        this.transactionsFilterForm.markAsPristine();
        this.onFilter({});
    }
    /**
     * Emit event to close this filter form.
     */
    onCloseFilter() {
        this.closeFilter.emit();
    }
    get dateFormGroup() {
        return this.transactionsFilterForm.get('date');
    }
    get fromDate() {
        var _a;
        return (_a = this.dateFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
    }
    get toDate() {
        var _a;
        return (_a = this.dateFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
    }
    get amountFormGroup() {
        return this.transactionsFilterForm.get('amount');
    }
    get fromAmount() {
        var _a;
        return (_a = this.amountFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
    }
    get toAmount() {
        var _a;
        return (_a = this.amountFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
    }
    get serialNumberFormGroup() {
        return this.transactionsFilterForm.get('checkSerialNumber');
    }
    get fromSerialNumber() {
        var _a;
        return (_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
    }
    get toSerialNumber() {
        var _a;
        return (_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
    }
    get creditDebitIndicator() {
        return this.transactionsFilterForm.get('creditDebitIndicator');
    }
    get transactionType() {
        return this.transactionsFilterForm.get('types');
    }
    get billingStatus() {
        return this.transactionsFilterForm.get('billingStatus');
    }
    formatDateToString(dateArg) {
        if (!!dateArg && new Date(dateArg).getTime()) {
            const argDate = new Date(dateArg);
            const formatedArgDate = new Date(argDate.getFullYear(), argDate.getMonth(), argDate.getDate());
            return formatedArgDate.toISOString();
        }
        return;
    }
    isFieldValid(fieldGroup, fieldName) {
        var _a;
        const fieldControl = (_a = this.transactionsFilterForm.get(fieldGroup)) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        return !!(fieldControl === null || fieldControl === void 0 ? void 0 : fieldControl.valid) || !!(fieldControl === null || fieldControl === void 0 ? void 0 : fieldControl.untouched);
    }
}
TransactionsFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsFilterComponent, deps: [{ token: i1.EnumValuesService }], target: i0.ɵɵFactoryTarget.Component });
TransactionsFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsFilterComponent, selector: "bb-transactions-filter", inputs: { hideBillingStatus: "hideBillingStatus", availableFilters: "availableFilters" }, outputs: { filter: "filter", closeFilter: "closeFilter", filterCount: "filterCount" }, ngImport: i0, template: "<ng-container bbTransactionsListFilterCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListFilterCustomizable let-hostRef>\n  <div class=\"bb-transactions-list-filter\">\n    <form\n      class=\"card-body\"\n      [formGroup]=\"hostRef.transactionsFilterForm\"\n      (ngSubmit)=\"hostRef.onFilter(hostRef.transactionsFilterForm.value)\"\n      novalidate\n      autocomplete=\"off\"\n    >\n      <div class=\"bb-block bb-block--sm\">\n        <div class=\"row\">\n          <!-- Date range -->\n          <div class=\"col-lg-8\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Date)\">\n            <div class=\"row\" formGroupName=\"date\">\n              <div class=\"col-12 col-sm-6\">\n                <div class=\"form-group\">\n                  <bb-input-datepicker-ui\n                    name=\"dateRange\"\n                    data-role=\"start-date\"\n                    label=\"Start date\"\n                    i18n-label=\"Transaction filter for the start Date Range@@transactions.filter.form.startDate.label\"\n                    formControlName=\"from\"\n                    [maxDate]=\"hostRef.formatDateToString(hostRef.toDate?.value)\"\n                  ></bb-input-datepicker-ui>\n                </div>\n              </div>\n\n              <div class=\"col-12 col-sm-6\">\n                <div class=\"form-group\">\n                  <bb-input-datepicker-ui\n                    name=\"dateRange\"\n                    data-role=\"end-date\"\n                    label=\"End date\"\n                    i18n-label=\"Transaction filter for the end Date Range@@transactions.filter.form.endDate.label\"\n                    formControlName=\"to\"\n                    [minDate]=\"hostRef.formatDateToString(hostRef.fromDate?.value)\"\n                  ></bb-input-datepicker-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Credit/debit indicator -->\n          <div class=\"col-lg-4\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.CreditDebitIndicator)\">\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Credit or debit\"\n                data-role=\"credit-debit-indicator-label\"\n                i18n-label=\"\n                  Transactions filter for credit or debit@@transactions.filter.form.creditDebitIndicator.label\"\n                [options]=\"hostRef.creditDebitIndicatorOptions\"\n                displayAttributePath=\"name\"\n                formControlName=\"creditDebitIndicator\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <!-- Amount range -->\n          <div\n            class=\"col-lg-6 form-group\"\n            *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Amount)\"\n            bbDynamicId\n            #amountGroup\n          >\n            <div class=\"bb-stack\" formGroupName=\"amount\">\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #fromAmountLabel\n                  i18n=\"Transactions filter Minimun amount@@transactions.filter.minAmount.label\"\n                >\n                  <abbr title=\"Minimum\">Min.</abbr> amount\n                </label>\n                <bb-input-number-ui\n                  formControlName=\"from\"\n                  data-role=\"amount-from\"\n                  [aria-labelledby]=\"fromAmountLabel?.id\"\n                  placeholder=\"From\"\n                  i18n-placeholder=\"\n                    Initial filtering value|Starting value|Lower amount@@transactions.filter.form.amountFrom.placeholder\"\n                  aria-describedby=\"{{ amountGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #toAmountLabel\n                  i18n=\"Transactions filter Maximun amount@@transactions.filter.maxAmount.label\"\n                >\n                  <abbr title=\"Maximum\">Max.</abbr> amount\n                </label>\n                <bb-input-number-ui\n                  formControlName=\"to\"\n                  data-role=\"amount-to\"\n                  placeholder=\"To\"\n                  i18n-placeholder=\"\n                    Ending filtering value|End value|Higher amount@@transactions.filter.form.amountTo.placeholder\"\n                  [aria-labelledby]=\"toAmountLabel?.id\"\n                  aria-describedby=\"{{ amountGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n            </div>\n            <bb-input-validation-message-ui\n              [showErrors]=\"!hostRef.isFieldValid('amount', 'from') || !hostRef.isFieldValid('amount', 'to')\"\n              messageId=\"{{ amountGroup?.id }}-error\"\n            >\n              <span\n                i18n=\"\n                  Max. amount cannot be smaller than the min. amount|Error Message when max amount is smaller than min\n                  amount@@transactions.filter.form.error.amountRange\"\n              >\n                Maximum amount cannot be smaller than the minimum amount\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- Transaction Type -->\n          <div class=\"col-lg-6\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Types)\">\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Transaction type\"\n                data-role=\"transaction-type-label\"\n                i18n-label=\"\n                  Transaction filter for the types of transaction@@transactions.filter.form.transactionType.label\"\n                [options]=\"(hostRef.transactionTypeOptions | async)!\"\n                displayAttributePath=\"name\"\n                formControlName=\"types\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <!-- Billing status -->\n          <div\n            class=\"col-lg-6\"\n            *ngIf=\"!hideBillingStatus && hostRef.availableFilters.includes(availableFilterEnum.BillingStatus)\"\n          >\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Billing status\"\n                data-role=\"billing-status-label\"\n                i18n-label=\"Transactions filter for Billing Status@@transactions.filter.form.billingStatus.label\"\n                [options]=\"(hostRef.billingStatusOptions | async)!\"\n                displayAttributePath=\"name\"\n                formControlName=\"billingStatus\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n          <!-- Check range -->\n          <div\n            class=\"col-lg-6 form-group\"\n            *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.CheckSerialNumber)\"\n          >\n            <div class=\"bb-stack\" formGroupName=\"checkSerialNumber\" bbDynamicId #rangeGroup>\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #fromCheckLabel\n                  i18n=\"Transactions filter First check number range@@transactions.filter.firstCheckSerialNumber.label\"\n                >\n                  First check <abbr title=\"Number\">N\u00BA</abbr>\n                </label>\n                <bb-input-number-ui\n                  [aria-labelledby]=\"fromCheckLabel?.id\"\n                  formControlName=\"from\"\n                  data-role=\"check-from\"\n                  placeholder=\"From\"\n                  i18n-placeholder=\"'From' number range input@@transactions.filter.form.rangeFrom.placeholder\"\n                  aria-describedby=\"{{ rangeGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #toCheckLabel\n                  i18n=\"Transactions filter Last check number range@@transactions.filter.lastCheckSerialNumber.label\"\n                >\n                  Last check <abbr title=\"Number\">N\u00BA</abbr>\n                </label>\n                <bb-input-number-ui\n                  [aria-labelledby]=\"toCheckLabel?.id\"\n                  formControlName=\"to\"\n                  data-role=\"check-to\"\n                  placeholder=\"To\"\n                  i18n-placeholder=\"'To' number range input@@transactions.filter.form.rangeTo.placeholder\"\n                  aria-describedby=\"{{ rangeGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n            </div>\n            <bb-input-validation-message-ui\n              [showErrors]=\"\n                !hostRef.isFieldValid('checkSerialNumber', 'from') || !hostRef.isFieldValid('checkSerialNumber', 'to')\n              \"\n              messageId=\"{{ rangeGroup?.id }}-error\"\n            >\n              <span\n                i18n=\"\n                  Last check n\u00BA cannot be smaller than first check n\u00BA|Error Message when last check n\u00BA is smaller than\n                  first check n\u00BA@@transactions.filter.form.error.checkSerialRange\"\n              >\n                Last check number cannot be smaller than first check number\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <!-- Apply -->\n        <button\n          bbButton\n          type=\"submit\"\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"apply\"\n          i18n-title=\"Apply button|Apply selected filters@@transactions.filter.form.button.apply\"\n          title=\"Apply\"\n          i18n=\"Apply button|Apply selected filters@@transactions.filter.form.button.apply\"\n        >\n          Apply\n        </button>\n\n        <!-- Close -->\n        <button\n          bbButton\n          type=\"button\"\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"cancel\"\n          i18n-title=\"Close button|Close filter menu@@transactions.filter.form.button.close\"\n          title=\"Close\"\n          i18n=\"Close button|Close filter menu@@transactions.filter.form.button.close\"\n          (click)=\"hostRef.onCloseFilter()\"\n        >\n          Close\n        </button>\n\n        <!-- Clear filters -->\n        <button\n          bbButton\n          type=\"button\"\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"clear-all\"\n          i18n-title=\"Clear Filters button|Clean filters@@transactions.filter.form.button.clearAll\"\n          title=\"Clear filters\"\n          (click)=\"hostRef.onClearFilter()\"\n          *ngIf=\"hostRef.transactionsFilterForm.dirty\"\n          i18n=\"Clear filters button|Clean filters@@transactions.filter.form.button.clearAll\"\n        >\n          Clear filters\n        </button>\n      </div>\n    </form>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2$2.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i3$2.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i4$1.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i0.forwardRef(function () { return i5$1.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListFilterCustomizableDirective; }), selector: "[bbTransactionsListFilterCustomizable]" }, { type: i0.forwardRef(function () { return i6.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i6.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i6.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.FormGroupName; }), selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i0.forwardRef(function () { return i2$2.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0.forwardRef(function () { return i6.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i6.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i2$2.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0.forwardRef(function () { return i1.DynamicIdDirective; }), selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i0.forwardRef(function () { return i6$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i8.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-filter',
                    templateUrl: './transactions-filter.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.EnumValuesService }]; }, propDecorators: { filter: [{
                type: Output
            }], closeFilter: [{
                type: Output
            }], filterCount: [{
                type: Output
            }], hideBillingStatus: [{
                type: Input
            }], availableFilters: [{
                type: Input
            }] } });
class TransactionsListFilterCustomizableDirective extends BbTemplate {
}
TransactionsListFilterCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListFilterCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListFilterCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListFilterCustomizableDirective, selector: "[bbTransactionsListFilterCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListFilterCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListFilterCustomizable]',
                }]
        }] });

class TransactionsControlsComponent extends BaseTransactionsControls {
    constructor() {
        super(...arguments);
        /**
         * EventEmitter for triggering a search action.
         */
        this.print = new EventEmitter();
        /**
         * Configuration parameter to show/hide billing status filter
         */
        this.hideBillingStatus = false;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Amount of active filters
         */
        this.activeFilters = 0;
    }
    /**
     * Print event callback
     */
    onPrint() {
        this.print.emit();
    }
    /**
     *  Filter Count event callback
     */
    onFilterCount(activeFilters) {
        this.activeFilters = activeFilters;
    }
}
TransactionsControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsControlsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
TransactionsControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsControlsComponent, selector: "bb-transactions-controls", inputs: { hideBillingStatus: "hideBillingStatus" }, outputs: { print: "print" }, usesInheritance: true, ngImport: i0, template: "<ng-container bbTransactionsListControlsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbTransactionsListControlsCustomizable let-hostRef>\n  <div class=\"card-header\" [ngClass]=\"{ 'bb-block--lg': hostRef.isFilterOpen }\">\n    <div class=\"bb-stack bb-stack--wrap\">\n      <!-- Search button -->\n      <div class=\"bb-transaction-list-controls__search-box bb-stack__item\">\n        <div class=\"input-group\">\n          <label class=\"sr-only\" bbDynamicId #searchLabel i18n=\"search transaction filter@@transactions.search.label\">\n            Search transaction filter\n          </label>\n          <bb-search-box-ui\n            [showSearch]=\"true\"\n            [showClear]=\"true\"\n            placeholder=\"Search\"\n            [aria-labelledby]=\"searchLabel?.id\"\n            searchLabel=\"search\"\n            i18n-searchLabel=\"search label when button in focus@@transactions.searchLabel.search.box\"\n            i18n-placeholder=\"search transactions placeholder@@transactions.ariaLabel.search.placeholder\"\n            (submit)=\"hostRef.onSearch($event)\"\n            (clear)=\"hostRef.onSearch('')\"\n          >\n          </bb-search-box-ui>\n        </div>\n      </div>\n      <!-- Filter button -->\n      <div\n        class=\"bb-stack__item bb-stack__item--fill--md-up align-self-start bb-transaction-list-controls__filter-buttons\"\n      >\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-stack__item--fill--md-up\">\n            <button\n              bbButton\n              *ngIf=\"hostRef.activeFilters\"\n              [attr.aria-expanded]=\"!!hostRef.isFilterOpen\"\n              [color]=\"hostRef.isFilterApplied || hostRef.isFilterOpen ? 'primary' : 'secondary'\"\n              data-role=\"filter\"\n              (click)=\"hostRef.toggleFilter()\"\n            >\n              <bb-icon-ui name=\"filter\"></bb-icon-ui>\n              <span\n                class=\"bb-transaction-list-controls__long-button\"\n                i18n=\"Filter toggle button@@transactions.filtersApplied.button\"\n                >Filters applied</span\n              >\n              <span\n                class=\"bb-transaction-list-controls__short-button\"\n                i18n=\"Filter toggle button@@transactions.filters.button\"\n                >Filters</span\n              >\n              <span>&nbsp;({{ hostRef.activeFilters }})</span>\n            </button>\n\n            <button\n              bbButton\n              *ngIf=\"!hostRef.activeFilters\"\n              [attr.aria-expanded]=\"!!hostRef.isFilterOpen\"\n              [color]=\"hostRef.isFilterApplied || hostRef.isFilterOpen ? 'primary' : 'secondary'\"\n              data-role=\"filter\"\n              (click)=\"hostRef.toggleFilter()\"\n            >\n              <bb-icon-ui name=\"filter\"></bb-icon-ui>\n              <ng-container i18n=\"Filter toggle button@@transactions.filter.button\">Filter</ng-container>\n            </button>\n          </div>\n          <ng-container bbTransactionsListControlsButtonsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <bb-transactions-filter\n    (filter)=\"hostRef.onFilter($event)\"\n    (filterCount)=\"hostRef.onFilterCount($event)\"\n    (closeFilter)=\"hostRef.onClose()\"\n    [hidden]=\"!hostRef.isFilterOpen\"\n    [hideBillingStatus]=\"hostRef.hideBillingStatus\"\n    [availableFilters]=\"hostRef.availableFilters\"\n  ></bb-transactions-filter>\n</ng-template>\n\n<ng-template bbTransactionsListControlsButtonsCustomizable let-hostRef>\n  <!-- Print button -->\n  <button\n    bbButton\n    aria-label=\"Print\"\n    i18n-aria-label=\"Print button@@transactions.print.button\"\n    class=\"bb-stack__item\"\n    color=\"secondary\"\n    [circle]=\"true\"\n    (click)=\"hostRef.onPrint()\"\n  >\n    <bb-icon-ui name=\"print\"></bb-icon-ui>\n  </button>\n  <!-- Export button -->\n  <bb-dropdown-menu-ui\n    *ngIf=\"hostRef.exportConfig?.length\"\n    container=\"body\"\n    icon=\"expand-more\"\n    btnColor=\"secondary\"\n    ariaLabel=\"available export types\"\n    i18n-ariaLabel=\"Currently available export types dropdown@@transactions.list.exportList.ariaLabel\"\n    [btnCircle]=\"true\"\n    icon=\"get-app\"\n    iconSize=\"md\"\n  >\n    <ng-template bbDropdownMenuItem>\n      <a\n        *ngFor=\"let exportType of hostRef.exportConfig\"\n        role=\"menuitem\"\n        class=\"dropdown-item\"\n        (click)=\"hostRef.onExport(exportType)\"\n        href=\"javaScript:void(0);\"\n      >\n        <span>{{ exportType.name }}</span>\n      </a>\n    </ng-template>\n  </bb-dropdown-menu-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$3.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return TransactionsFilterComponent; }), selector: "bb-transactions-filter", inputs: ["hideBillingStatus", "availableFilters"], outputs: ["filter", "closeFilter", "filterCount"] }, { type: i0.forwardRef(function () { return i4$2.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListControlsCustomizableDirective; }), selector: "[bbTransactionsListControlsCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i1.DynamicIdDirective; }), selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return TransactionsListControlsButtonsCustomizableDirective; }), selector: "[bbTransactionsListControlsButtonsCustomizable]" }, { type: i0.forwardRef(function () { return i4$2.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsControlsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-controls',
                    templateUrl: './transactions-controls.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { print: [{
                type: Output
            }], hideBillingStatus: [{
                type: Input
            }] } });
class TransactionsListControlsCustomizableDirective extends BbTemplate {
}
TransactionsListControlsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListControlsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListControlsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListControlsCustomizableDirective, selector: "[bbTransactionsListControlsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListControlsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListControlsCustomizable]',
                }]
        }] });
class TransactionsListControlsButtonsCustomizableDirective extends BbTemplate {
}
TransactionsListControlsButtonsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListControlsButtonsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListControlsButtonsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListControlsButtonsCustomizableDirective, selector: "[bbTransactionsListControlsButtonsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListControlsButtonsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListControlsButtonsCustomizable]',
                }]
        }] });

class TransactionsListPendingTransactionsComponent {
    constructor() {
        /**
         * Whether new transactions are being loaded.  By default, this is `LoadingState.Loaded`.
         */
        this.loadingState = LoadingState.Loaded;
        /**
         * Event emitter that triggers when the details are open
         */
        this.detailsOpen = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    get isLoading() {
        return this.loadingState !== LoadingState.Loaded;
    }
    paginationOnTop() {
        if (this.currentPage === 0) {
            return true;
        }
        if (this.currentPage && this.currentPage > 0) {
            if (this.paginationType === PaginationType.PAGINATION) {
                return false;
            }
            if (this.paginationType === PaginationType.LOAD_MORE || this.paginationType === PaginationType.INFINITE_SCROLL) {
                return true;
            }
        }
        return false;
    }
    onDetailOpen(transaction) {
        this.detailsOpen.emit(transaction);
    }
    trackByFn(_index, element) {
        return element.id;
    }
}
TransactionsListPendingTransactionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListPendingTransactionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionsListPendingTransactionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListPendingTransactionsComponent, selector: "bb-pending-transactions-list", inputs: { transactionsList: "transactionsList", showPendingOnTop: "showPendingOnTop", currentPage: "currentPage", pageSize: "pageSize", paginationType: "paginationType", loadingState: "loadingState", maxNavPages: "maxNavPages", showChangeCategory: "showChangeCategory", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen" }, ngImport: i0, template: "<ng-container *ngIf=\"!isLoading; else loadingState\">\n  <ng-container\n    *ngIf=\"transactionsList?.items?.length && paginationOnTop()\"\n    bbPendingTransactionsListCustomizable\n    [bbHostRef]=\"hostRef\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-template bbPendingTransactionsListCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--md\">\n    <strong\n      role=\"heading\"\n      class=\"bb-block bb-block--md\"\n      aria-level=\"2\"\n      aria-label=\" A pending transaction is a payment that has been authorized but has not been processed. For\n      instance, a transaction that is still waiting for the merchant to process it or a transaction requiring overnight\n      processing because it was made after the cutoff time of the financial institution.\"\n      i18n-aria-label=\"Pending transactions header aria-label@@transactions.list.pending.header.aria-label\"\n      tabindex=\"0\"\n    >\n      <div class=\"bb-transactions-list-pending-header bb-block--md\">\n        <span class=\"bb-subheader\" i18n=\"Pending transactions header@@transactions.list.pending.header\">Pending</span>\n        <span class=\"bb-transactions-list-pending-header__tooltip\">\n          <bb-icon-ui\n            role=\"tooltip\"\n            name=\"info\"\n            size=\"sm\"\n            [bbTooltip]=\"tipContent\"\n            placement=\"right\"\n            triggers=\"hover click\"\n            bbAccessibilityKeyboard\n          ></bb-icon-ui>\n        </span>\n      </div>\n    </strong>\n    <div class=\"bb-list\">\n      <div class=\"bb-list__item\">\n        <div\n          class=\"bb-block--md\"\n          *ngFor=\"let transaction of hostRef.transactionsList?.items; trackBy: hostRef.trackByFn\"\n        >\n          <bb-transactions-list-item\n            [transaction]=\"transaction\"\n            [showBillingStatus]=\"true\"\n            [showChangeCategory]=\"hostRef.showChangeCategory\"\n            [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n            (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n          ></bb-transactions-list-item>\n        </div>\n      </div>\n      <!-- forcing a line separator in bb-list-->\n      <div class=\"bb-list__item\"></div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #tipContent>\n  <div\n    class=\"bb-text-align-left\"\n    i18n=\"\n      Description inside a tooltip, describing what a Pending Transaction\n      is@@transactions.list.pending.tooltip.description\"\n  >\n    A pending transaction is a payment that has been authorized but has not been processed. For instance, a transaction\n    that is still waiting for the merchant to process it or a transaction requiring overnight processing because it was\n    made after the cutoff time of the financial institution.\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return TransactionsListItemComponent; }), selector: "bb-transactions-list-item", inputs: ["transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: i0.forwardRef(function () { return i7$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return PendingTransactionsListCustomizableDirective; }), selector: "[bbPendingTransactionsListCustomizable]" }, { type: i0.forwardRef(function () { return i1.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0.forwardRef(function () { return i10.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListPendingTransactionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pending-transactions-list',
                    templateUrl: './transactions-list-pending-transactions.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { transactionsList: [{
                type: Input
            }], showPendingOnTop: [{
                type: Input
            }], currentPage: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], paginationType: [{
                type: Input
            }], loadingState: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }] } });
class PendingTransactionsListCustomizableDirective extends BbTemplate {
}
PendingTransactionsListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PendingTransactionsListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
PendingTransactionsListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PendingTransactionsListCustomizableDirective, selector: "[bbPendingTransactionsListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PendingTransactionsListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPendingTransactionsListCustomizable]',
                }]
        }] });

class TransactionsContainerComponent extends BaseTransactionsContainer {
    constructor(model, widgetProperties, cd, eventBusService, notificationService, pendingTransactionsService, transactionDetailsService, availableFiltersConfigService, 
    // eslint-disable-next-line
    showDetailsConfig) {
        super(model, widgetProperties, cd, eventBusService, notificationService, pendingTransactionsService, transactionDetailsService, availableFiltersConfigService, showDetailsConfig);
        this.model = model;
        this.widgetProperties = widgetProperties;
        this.cd = cd;
        this.eventBusService = eventBusService;
        this.notificationService = notificationService;
        this.pendingTransactionsService = pendingTransactionsService;
        this.transactionDetailsService = transactionDetailsService;
        this.availableFiltersConfigService = availableFiltersConfigService;
        this.showDetailsConfig = showDetailsConfig;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        this.PaginationType = PaginationType;
        if (this.showDetailsConfig === null || this.showDetailsConfig === undefined) {
            this.showDetailsConfig = true;
        }
    }
}
TransactionsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsContainerComponent, deps: [{ token: i1.TransactionsService }, { token: i1.WidgetPropertiesService }, { token: i0.ChangeDetectorRef }, { token: PUBSUB }, { token: i2$3.NotificationService }, { token: i1.PendingTransactionsService }, { token: i1.TransactionDetailsService }, { token: i1.AvailableFiltersConfigService }, { token: showDetailsConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TransactionsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsContainerComponent, selector: "bb-transactions-container", providers: [TransactionsService, PendingTransactionsService, TransactionDetailsService], usesInheritance: true, ngImport: i0, template: "<ng-container\n  *ngIf=\"\n    (hostRef.paginationType | async)! === PaginationType.INFINITE_SCROLL &&\n    (selectedAccount | async)! as selectedAccount\n  \"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"bbPaginatedTransactionsContainer\"\n    [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n  ></ng-container>\n  <ng-container *ngIf=\"hostRef.errors\">\n    <div class=\"mb-4\">\n      <bb-alert-ui\n        *ngFor=\"let error of hostRef.errors\"\n        title=\"Couldn't load more transactions\"\n        modifier=\"error\"\n        attr.data-role=\"alert-error\"\n      >\n        <p>{{ error?.message }}</p>\n        <a [routerLink]=\"\" class=\"alert-link\" (click)=\"hostRef.retry()\">click here</a>\n      </bb-alert-ui>\n    </div>\n  </ng-container>\n</ng-container>\n<ng-container\n  *ngIf=\"\n    (hostRef.paginationType | async) !== PaginationType.INFINITE_SCROLL && (selectedAccount | async) as selectedAccount\n  \"\n>\n  <ng-container *ngIf=\"!errors; else errorState\">\n    <ng-container\n      [ngTemplateOutlet]=\"bbPaginatedTransactionsContainer\"\n      [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #notificationErrorUpdateHeader>\n    <ng-container [ngSwitch]=\"hostRef.storedExportType?.reason\">\n      <ng-container *ngSwitchCase=\"'MIXED_PRODUCT_KINDS'\">\n        {{ hostRef.storedExportType?.name }}\n        <ng-container\n          i18n=\"\n            Invalid export type header for mixed products kinds|Notification header due to mixed product\n            kinds@@transaction.list.toolTip.error.header.MixedProductKinds\"\n        >\n          export not supported\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"'UNSUPPORTED_PRODUCT_KIND'\">\n        {{ hostRef.storedExportType?.name }}\n        <ng-container\n          i18n=\"\n            Invalid export type header for unsupported product kind|Notification header due to unsupported product\n            kind@@transaction.list.toolTip.error.header.UnsupportedProductKind\"\n        >\n          export not supported\n        </ng-container>\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'TOO_MANY_ITEMS'\"\n        i18n=\"\n          Invalid export type header for too many items|Notification header due to too many\n          transactions@@transaction.list.toolTip.error.header.TooManyItems\"\n      >\n        Maximum export threshold exceeded\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'MULTIPLE_PRODUCTS'\"\n        i18n=\"\n          Invalid export type header for Multiple Products |Notification header due to Multiple\n          Products@@transaction.list.toolTip.error.header.MultipleProducts\"\n      >\n        Multiple products are selected\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #notificationErrorUpdateMessage>\n    <ng-container [ngSwitch]=\"hostRef.storedExportType?.reason\">\n      <ng-container\n        *ngSwitchCase=\"'MIXED_PRODUCT_KINDS'\"\n        i18n=\"\n          Invalid export type mixed products kinds|Notification message due to mixed product\n          kinds@@transaction.list.toolTip.error.message.MixedProductKinds\"\n      >\n        This export is not supported for your selection\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'UNSUPPORTED_PRODUCT_KIND'\"\n        i18n=\"\n          Invalid export type unsupported product kind|Notification message due to unsupported product\n          kind@@transaction.list.toolTip.error.message.UnsupportedProductKind\"\n      >\n        This export is not supported for your selection\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'TOO_MANY_ITEMS'\"\n        i18n=\"\n          Invalid export type too many items|Notification message due to too many\n          transactions@@transaction.list.toolTip.error.message.TooManyItems\"\n      >\n        Please provide different filter\\search criteria\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'MULTIPLE_PRODUCTS'\"\n        i18n=\"\n          Invalid export type Multiple Products|Notification message due to Multiple\n          Products@@transaction.list.toolTip.error.message.MultipleProducts\"\n      >\n        Please select only one product. For example, only one current account\n      </ng-container>\n    </ng-container>\n  </ng-template>\n</ng-container>\n\n<ng-container\n  *ngIf=\"!(selectedAccount | async) as selectedAccount\"\n  bbTransactionsNoAccountSelectedStateCustomizable\n  [bbHostRef]=\"hostRef\"\n>\n</ng-container>\n\n<ng-template #errorState>\n  <ng-container bbTransactionsErrorStateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbTransactionsNoAccountSelectedStateCustomizable let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"No Product selected|Empty Product selector@@transactions.state.noProductSelected.title\"\n        title=\"No Product Selected\"\n        i18n-subtitle=\"Product selector@@transactions.state.noProductSelected.subtitle\"\n        subtitle=\"Please select a product first.\"\n        iconSize=\"xl\"\n        iconModifier=\"list\"\n      ></bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTransactionsErrorStateCustomizable let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-body col-md-4 offset-md-4 bb-text-align-center\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-empty-state-ui title=\"\"></bb-empty-state-ui>\n        <p\n          *ngFor=\"let error of hostRef.errors\"\n          data-role=\"custom-error-state-message\"\n          class=\"bb-empty-state__message bb-empty-state\"\n        >\n          {{ error?.message }}\n        </p>\n      </div>\n      <div>\n        <button i18n=\"Retry button@transactions.state.error.retry-button\" bbButton (click)=\"hostRef.retry()\">\n          Retry\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template\n  #notificationServerErrorHeader\n  i18n=\"Internal error header|Internal error header@@transaction.list.error.header.internal\"\n>\n  Transactions export is currently not available\n</ng-template>\n\n<ng-template\n  #notificationServerErrorMessage\n  i18n=\"Internal error message|Internal error message@@transaction.list.error.message.internal\"\n>\n  Please try again later\n</ng-template>\n\n<ng-template #bbPaginatedTransactionsContainer let-hostRef>\n  <div class=\"card card-lg bb-transactions-list-container\">\n    <bb-transactions-controls\n      *ngIf=\"(hostRef.showControls | async)!\"\n      [isFilterApplied]=\"(hostRef.isFilterApplied | async)!\"\n      [hideBillingStatus]=\"(hostRef.showPendingTransactionsOnTop | async)!\"\n      [exportConfig]=\"(hostRef.exportConfig | async)!\"\n      [availableFilters]=\"(hostRef.availableFilters | async) || []\"\n      (search)=\"hostRef.onSearch($event)\"\n      (filter)=\"hostRef.onFilter($event)\"\n      (print)=\"hostRef.onPrint()\"\n      (export)=\"hostRef.onExport($event)\"\n    ></bb-transactions-controls>\n    <bb-transactions-number-of-results-found\n      [numberOfResultsFound]=\"(hostRef.numberOfResultsFound | async)!\"\n      [loadingState]=\"(hostRef.loadingState | async)!\"\n      [isFilterApplied]=\"(hostRef.isFilterApplied | async)!\"\n      [isSearchApplied]=\"(hostRef.isSearchApplied | async)!\"\n    ></bb-transactions-number-of-results-found>\n    <div class=\"card-body\">\n      <bb-pending-transactions-list\n        *ngIf=\"(hostRef.showPendingTransactionsOnTop | async)!\"\n        [transactionsList]=\"(hostRef.pendingTransactionsList | async)!\"\n        [currentPage]=\"(hostRef.currentPage | async)!\"\n        [pageSize]=\"(hostRef.pageSize | async)!\"\n        [paginationType]=\"(hostRef.paginationType | async)!\"\n        [maxNavPages]=\"(hostRef.maxNavPages | async)!\"\n        [loadingState]=\"(hostRef.loadingPendingState | async)!\"\n        [showChangeCategory]=\"(hostRef.showChangeCategory | async)!\"\n        [inquireAndDisputeTopics]=\"(hostRef.inquireAndDisputeTopics | async)!\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-pending-transactions-list>\n\n      <bb-transactions-list\n        [transactionsList]=\"(hostRef.transactionsList | async)!\"\n        [checkImagesList]=\"(hostRef.checkImagesList | async)!\"\n        [currentPage]=\"(hostRef.currentPage | async)!\"\n        [pageSize]=\"(hostRef.pageSize | async)!\"\n        [maxNavPages]=\"(hostRef.maxNavPages | async)!\"\n        [loadingState]=\"(hostRef.loadingState | async)!\"\n        [paginationType]=\"(hostRef.paginationType | async)!\"\n        [numberOfResultsFound]=\"(hostRef.numberOfResultsDisplayed | async)!\"\n        [showChangeCategory]=\"(hostRef.showChangeCategory | async)!\"\n        [transactionDetailsLoadingStatus]=\"(hostRef.transactionDetailsLoadingStatus | async)!\"\n        [inquireAndDisputeTopics]=\"(hostRef.inquireAndDisputeTopics | async)!\"\n        (loadMore)=\"hostRef.onLoadMore()\"\n        (pageChange)=\"hostRef.onPageChange($event)\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i7$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: TransactionsControlsComponent, selector: "bb-transactions-controls", inputs: ["hideBillingStatus"], outputs: ["print"] }, { type: i1.TransactionsNumberOfResultsFoundComponent, selector: "bb-transactions-number-of-results-found", inputs: ["numberOfResultsFound", "loadingState", "isFilterApplied", "isSearchApplied"] }, { type: TransactionsListPendingTransactionsComponent, selector: "bb-pending-transactions-list", inputs: ["transactionsList", "showPendingOnTop", "currentPage", "pageSize", "paginationType", "loadingState", "maxNavPages", "showChangeCategory", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: TransactionsListComponent, selector: "bb-transactions-list", inputs: ["transactionsList", "currentPage", "pageSize", "loadingState", "maxNavPages", "paginationType", "numberOfResultsFound", "showChangeCategory", "checkImagesList", "inquireAndDisputeTopics", "transactionDetailsLoadingStatus"], outputs: ["loadMore", "pageChange", "detailsOpen"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.TransactionsNoAccountSelectedStateCustomizableDirective, selector: "[bbTransactionsNoAccountSelectedStateCustomizable]" }, { type: i1.TransactionsErrorStateCustomizableDirective, selector: "[bbTransactionsErrorStateCustomizable]" }, { type: i6$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i8.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-container',
                    templateUrl: './transactions-container.component.html',
                    providers: [TransactionsService, PendingTransactionsService, TransactionDetailsService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionsService }, { type: i1.WidgetPropertiesService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: i2$3.NotificationService }, { type: i1.PendingTransactionsService }, { type: i1.TransactionDetailsService }, { type: i1.AvailableFiltersConfigService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [showDetailsConfigToken]
                }] }]; } });

class TransactionsListWidgetComponent extends BaseTransactionsWidget {
    constructor(route, widgetProperties) {
        super(route, widgetProperties);
        this.route = route;
        this.widgetProperties = widgetProperties;
    }
}
TransactionsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListWidgetComponent, deps: [{ token: i1$4.ActivatedRoute }, { token: i1.WidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
TransactionsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListWidgetComponent, selector: "bb-transactions-list-widget", providers: [NavigationService, WidgetPropertiesService], usesInheritance: true, ngImport: i0, template: "<bb-transactions-container\n  [googleAPIKey]=\"googleAPIKey\"\n  [selectedAccount]=\"selectedAccount\"\n  [initialFilterOptions]=\"initialFilterOptions\"\n  [initialSortOptions]=\"initialSortOptions\"\n  [pageSize]=\"pageSize\"\n  [maxNavPages]=\"maxNavPages\"\n  [paginationType]=\"paginationType\"\n  [showControls]=\"showControls\"\n  [showChangeCategory]=\"showChangeCategory\"\n  [showPendingTransactionsOnTop]=\"showPendingTransactionsOnTop\"\n  [showCheckImage]=\"showCheckImage\"\n  [showManageNotes]=\"showManageNotes\"\n  [getOrPostEndpoints]=\"getOrPostEndpoints\"\n  [enableDisputeAndInquiry]=\"enableDisputeAndInquiry\"\n  [disputeByBillingStatus]=\"disputeByBillingStatus\"\n  [disputeEligibilityDays]=\"disputeEligibilityDays\"\n  [disputeTransactionTypes]=\"disputeTransactionTypes\"\n  [inquireTopicId]=\"inquireTopicId\"\n  [disputeTopicId]=\"disputeTopicId\"\n  (transactionSelected)=\"onDetailOpen($event)\"\n  (transactionsLoaded)=\"onTransactionsLoaded($event)\"\n  [availableFiltersConfig]=\"availableFiltersConfig\"\n></bb-transactions-container>\n", components: [{ type: TransactionsContainerComponent, selector: "bb-transactions-container" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-list-widget',
                    templateUrl: './transactions-list-widget.component.html',
                    providers: [NavigationService, WidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1$4.ActivatedRoute }, { type: i1.WidgetPropertiesService }]; } });

const modules = [
    TransactionsCommonModule,
    AmountModule,
    ButtonModule,
    DropdownSingleSelectModule,
    EmptyStateModule,
    IconModule,
    InputDatepickerModule,
    InputNumberModule,
    InputValidationMessageModule,
    LoadButtonModule,
    LoadingIndicatorModule,
    ModalModule,
    PaginatorModule,
    SearchBoxModule,
    FocusModule,
    NotificationModule,
    DropdownMenuModule,
    TooltipModule,
    ButtonModule,
    AlertModule,
    HeaderModule,
    BadgeModule,
    TextareaModule,
    NgbModule,
];
const components = [
    TransactionsListWidgetComponent,
    TransactionsContainerComponent,
    TransactionsControlsComponent,
    TransactionsFilterComponent,
    TransactionsListComponent,
    TransactionsListItemComponent,
    TransactionsListItemGroupComponent,
    TransactionHeaderComponent,
    TransactionDetailsComponent,
    TransactionControlsComponent,
    TransactionNotesComponent,
    TransactionDetailCategoryComponent,
    TransactionsCategoriesComponent,
    TransactionsListPendingTransactionsComponent,
    TransactionDetailsModalComponent,
];
const customizables = [
    TransactionsListFilterCustomizableDirective,
    TransactionsListControlsCustomizableDirective,
    TransactionsListControlsButtonsCustomizableDirective,
    TransactionsListListCustomizableDirective,
    TransactionsListPaginationCustomizableDirective,
    TransactionsListItemCustomizableDirective,
    TransactionsListItemGroupCustomizableDirective,
    TransactionsListItemHeaderCustomizableDirective,
    TransactionsListItemDetailsCustomizableDirective,
    TransactionsListConfirmationModalCustomizableDirective,
    TransactionsListEmptyStateCustomizableDirective,
    TransactionDetailCategoryCustomizableDirective,
    TransactionsCategoriesCustomizableDirective,
    PendingTransactionsListCustomizableDirective,
];
class TransactionsListWidgetModule {
    static forRoot(config) {
        return {
            ngModule: TransactionsListWidgetModule,
            providers: [
                {
                    provide: showDetailsConfigToken,
                    useValue: config.showDetails,
                },
            ],
        };
    }
}
TransactionsListWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TransactionsListWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListWidgetModule, declarations: [TransactionsListWidgetComponent,
        TransactionsContainerComponent,
        TransactionsControlsComponent,
        TransactionsFilterComponent,
        TransactionsListComponent,
        TransactionsListItemComponent,
        TransactionsListItemGroupComponent,
        TransactionHeaderComponent,
        TransactionDetailsComponent,
        TransactionControlsComponent,
        TransactionNotesComponent,
        TransactionDetailCategoryComponent,
        TransactionsCategoriesComponent,
        TransactionsListPendingTransactionsComponent,
        TransactionDetailsModalComponent, TransactionsListFilterCustomizableDirective,
        TransactionsListControlsCustomizableDirective,
        TransactionsListControlsButtonsCustomizableDirective,
        TransactionsListListCustomizableDirective,
        TransactionsListPaginationCustomizableDirective,
        TransactionsListItemCustomizableDirective,
        TransactionsListItemGroupCustomizableDirective,
        TransactionsListItemHeaderCustomizableDirective,
        TransactionsListItemDetailsCustomizableDirective,
        TransactionsListConfirmationModalCustomizableDirective,
        TransactionsListEmptyStateCustomizableDirective,
        TransactionDetailCategoryCustomizableDirective,
        TransactionsCategoriesCustomizableDirective,
        PendingTransactionsListCustomizableDirective], imports: [RouterModule,
        CommonModule,
        ReactiveFormsModule, i1$2.BackbaseCoreModule, i1$2.FutureFeaturesModule, TransactionsCommonModule,
        AmountModule,
        ButtonModule,
        DropdownSingleSelectModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputNumberModule,
        InputValidationMessageModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        ModalModule,
        PaginatorModule,
        SearchBoxModule,
        FocusModule,
        NotificationModule,
        DropdownMenuModule,
        TooltipModule,
        ButtonModule,
        AlertModule,
        HeaderModule,
        BadgeModule,
        TextareaModule,
        NgbModule], exports: [TransactionsCommonModule,
        AmountModule,
        ButtonModule,
        DropdownSingleSelectModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputNumberModule,
        InputValidationMessageModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        ModalModule,
        PaginatorModule,
        SearchBoxModule,
        FocusModule,
        NotificationModule,
        DropdownMenuModule,
        TooltipModule,
        ButtonModule,
        AlertModule,
        HeaderModule,
        BadgeModule,
        TextareaModule,
        NgbModule, TransactionsListWidgetComponent,
        TransactionsContainerComponent,
        TransactionsControlsComponent,
        TransactionsFilterComponent,
        TransactionsListComponent,
        TransactionsListItemComponent,
        TransactionsListItemGroupComponent,
        TransactionHeaderComponent,
        TransactionDetailsComponent,
        TransactionControlsComponent,
        TransactionNotesComponent,
        TransactionDetailCategoryComponent,
        TransactionsCategoriesComponent,
        TransactionsListPendingTransactionsComponent,
        TransactionDetailsModalComponent, TransactionsListFilterCustomizableDirective,
        TransactionsListControlsCustomizableDirective,
        TransactionsListControlsButtonsCustomizableDirective,
        TransactionsListListCustomizableDirective,
        TransactionsListPaginationCustomizableDirective,
        TransactionsListItemCustomizableDirective,
        TransactionsListItemGroupCustomizableDirective,
        TransactionsListItemHeaderCustomizableDirective,
        TransactionsListItemDetailsCustomizableDirective,
        TransactionsListConfirmationModalCustomizableDirective,
        TransactionsListEmptyStateCustomizableDirective,
        TransactionDetailCategoryCustomizableDirective,
        TransactionsCategoriesCustomizableDirective,
        PendingTransactionsListCustomizableDirective] });
TransactionsListWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListWidgetModule, imports: [[
            RouterModule,
            CommonModule,
            ReactiveFormsModule,
            BackbaseCoreModule.withConfig({
                classMap: { TransactionsListWidgetComponent },
            }),
            FutureFeaturesModule.allowOptIn([TRANSACTIONS_DETAILS_SHARE_MODAL]),
            ...modules,
        ], TransactionsCommonModule,
        AmountModule,
        ButtonModule,
        DropdownSingleSelectModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputNumberModule,
        InputValidationMessageModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        ModalModule,
        PaginatorModule,
        SearchBoxModule,
        FocusModule,
        NotificationModule,
        DropdownMenuModule,
        TooltipModule,
        ButtonModule,
        AlertModule,
        HeaderModule,
        BadgeModule,
        TextareaModule,
        NgbModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        RouterModule,
                        CommonModule,
                        ReactiveFormsModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { TransactionsListWidgetComponent },
                        }),
                        FutureFeaturesModule.allowOptIn([TRANSACTIONS_DETAILS_SHARE_MODAL]),
                        ...modules,
                    ],
                    declarations: [...components, ...customizables],
                    exports: [...modules, ...components, ...customizables],
                    entryComponents: [TransactionsContainerComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PendingTransactionsListCustomizableDirective, TransactionControlsComponent, TransactionDetailCategoryComponent, TransactionDetailCategoryCustomizableDirective, TransactionDetailsComponent, TransactionDetailsModalComponent, TransactionHeaderComponent, TransactionNotesComponent, TransactionsCategoriesComponent, TransactionsCategoriesCustomizableDirective, TransactionsContainerComponent, TransactionsControlsComponent, TransactionsFilterComponent, TransactionsListComponent, TransactionsListConfirmationModalCustomizableDirective, TransactionsListControlsButtonsCustomizableDirective, TransactionsListControlsCustomizableDirective, TransactionsListEmptyStateCustomizableDirective, TransactionsListFilterCustomizableDirective, TransactionsListItemComponent, TransactionsListItemCustomizableDirective, TransactionsListItemDetailsCustomizableDirective, TransactionsListItemGroupComponent, TransactionsListItemGroupCustomizableDirective, TransactionsListItemHeaderCustomizableDirective, TransactionsListListCustomizableDirective, TransactionsListPaginationCustomizableDirective, TransactionsListPendingTransactionsComponent, TransactionsListWidgetComponent, TransactionsListWidgetModule };
//# sourceMappingURL=backbase-transactions-list-widget-ang.js.map
