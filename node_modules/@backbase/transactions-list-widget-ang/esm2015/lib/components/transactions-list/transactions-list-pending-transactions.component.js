import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { LoadingState, PaginationType, } from '@backbase/transactions-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "./transactions-list-item.component";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/transactions-common-ang";
import * as i6 from "@backbase/ui-ang/tooltip-directive";
export class TransactionsListPendingTransactionsComponent {
    constructor() {
        /**
         * Whether new transactions are being loaded.  By default, this is `LoadingState.Loaded`.
         */
        this.loadingState = LoadingState.Loaded;
        /**
         * Event emitter that triggers when the details are open
         */
        this.detailsOpen = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    get isLoading() {
        return this.loadingState !== LoadingState.Loaded;
    }
    paginationOnTop() {
        if (this.currentPage === 0) {
            return true;
        }
        if (this.currentPage && this.currentPage > 0) {
            if (this.paginationType === PaginationType.PAGINATION) {
                return false;
            }
            if (this.paginationType === PaginationType.LOAD_MORE || this.paginationType === PaginationType.INFINITE_SCROLL) {
                return true;
            }
        }
        return false;
    }
    onDetailOpen(transaction) {
        this.detailsOpen.emit(transaction);
    }
    trackByFn(_index, element) {
        return element.id;
    }
}
TransactionsListPendingTransactionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListPendingTransactionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionsListPendingTransactionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListPendingTransactionsComponent, selector: "bb-pending-transactions-list", inputs: { transactionsList: "transactionsList", showPendingOnTop: "showPendingOnTop", currentPage: "currentPage", pageSize: "pageSize", paginationType: "paginationType", loadingState: "loadingState", maxNavPages: "maxNavPages", showChangeCategory: "showChangeCategory", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen" }, ngImport: i0, template: "<ng-container *ngIf=\"!isLoading; else loadingState\">\n  <ng-container\n    *ngIf=\"transactionsList?.items?.length && paginationOnTop()\"\n    bbPendingTransactionsListCustomizable\n    [bbHostRef]=\"hostRef\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-template bbPendingTransactionsListCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--md\">\n    <strong\n      role=\"heading\"\n      class=\"bb-block bb-block--md\"\n      aria-level=\"2\"\n      aria-label=\" A pending transaction is a payment that has been authorized but has not been processed. For\n      instance, a transaction that is still waiting for the merchant to process it or a transaction requiring overnight\n      processing because it was made after the cutoff time of the financial institution.\"\n      i18n-aria-label=\"Pending transactions header aria-label@@transactions.list.pending.header.aria-label\"\n      tabindex=\"0\"\n    >\n      <div class=\"bb-transactions-list-pending-header bb-block--md\">\n        <span class=\"bb-subheader\" i18n=\"Pending transactions header@@transactions.list.pending.header\">Pending</span>\n        <span class=\"bb-transactions-list-pending-header__tooltip\">\n          <bb-icon-ui\n            role=\"tooltip\"\n            name=\"info\"\n            size=\"sm\"\n            [bbTooltip]=\"tipContent\"\n            placement=\"right\"\n            triggers=\"hover click\"\n            bbAccessibilityKeyboard\n          ></bb-icon-ui>\n        </span>\n      </div>\n    </strong>\n    <div class=\"bb-list\">\n      <div class=\"bb-list__item\">\n        <div\n          class=\"bb-block--md\"\n          *ngFor=\"let transaction of hostRef.transactionsList?.items; trackBy: hostRef.trackByFn\"\n        >\n          <bb-transactions-list-item\n            [transaction]=\"transaction\"\n            [showBillingStatus]=\"true\"\n            [showChangeCategory]=\"hostRef.showChangeCategory\"\n            [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n            (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n          ></bb-transactions-list-item>\n        </div>\n      </div>\n      <!-- forcing a line separator in bb-list-->\n      <div class=\"bb-list__item\"></div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #tipContent>\n  <div\n    class=\"bb-text-align-left\"\n    i18n=\"\n      Description inside a tooltip, describing what a Pending Transaction\n      is@@transactions.list.pending.tooltip.description\"\n  >\n    A pending transaction is a payment that has been authorized but has not been processed. For instance, a transaction\n    that is still waiting for the merchant to process it or a transaction requiring overnight processing because it was\n    made after the cutoff time of the financial institution.\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2.TransactionsListItemComponent; }), selector: "bb-transactions-list-item", inputs: ["transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: i0.forwardRef(function () { return i3.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return PendingTransactionsListCustomizableDirective; }), selector: "[bbPendingTransactionsListCustomizable]" }, { type: i0.forwardRef(function () { return i5.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0.forwardRef(function () { return i6.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i4.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListPendingTransactionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pending-transactions-list',
                    templateUrl: './transactions-list-pending-transactions.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { transactionsList: [{
                type: Input
            }], showPendingOnTop: [{
                type: Input
            }], currentPage: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], paginationType: [{
                type: Input
            }], loadingState: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }] } });
export class PendingTransactionsListCustomizableDirective extends BbTemplate {
}
PendingTransactionsListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PendingTransactionsListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
PendingTransactionsListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PendingTransactionsListCustomizableDirective, selector: "[bbPendingTransactionsListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PendingTransactionsListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPendingTransactionsListCustomizable]',
                }]
        }] });
//# sourceMappingURL=transactions-list-pending-transactions.component.js.map