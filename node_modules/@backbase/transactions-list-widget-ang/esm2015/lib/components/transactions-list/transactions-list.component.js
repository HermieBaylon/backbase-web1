import { Component, Directive, EventEmitter, Inject, Input, Optional, Output, } from '@angular/core';
import { BbTemplate, FeaturesService } from '@backbase/foundation-ang/core';
import { LoadingState, PaginationType, showDetailsConfigToken, TransactionsGroupedByDate, TransactionsList, } from '@backbase/transactions-common-ang';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TRANSACTIONS_DETAILS_SHARE_MODAL } from '../../constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "@backbase/ui-ang/loading-indicator";
import * as i3 from "./transactions-list-item-group.component";
import * as i4 from "../transaction/transaction-details-modal.component";
import * as i5 from "@backbase/ui-ang/pagination";
import * as i6 from "@backbase/ui-ang/load-button";
import * as i7 from "@backbase/ui-ang/empty-state";
import * as i8 from "@angular/common";
export class TransactionsListComponent {
    constructor(featureService, showDetailsConfig) {
        this.featureService = featureService;
        this.showDetailsConfig = showDetailsConfig;
        /**
         * Whether new transactions are being loaded.  By default, this is `LoadingState.Loaded`.
         */
        this.loadingState = LoadingState.Loaded;
        /**
         * Event emitter for loading the next page of transactions.
         */
        this.loadMore = new EventEmitter();
        /**
         * Event emitter for loading a specific page of transactions.
         */
        this.pageChange = new EventEmitter();
        this.detailsOpen = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Whether the transaction details are shown or not.
         */
        this.isDetailsOpen = false;
        this.unsubscribeSubject$ = new Subject();
        if (this.showDetailsConfig === null || this.showDetailsConfig === undefined) {
            this.showDetailsConfig = true;
        }
    }
    /**
     * Whether there are any loaded transactions.
     */
    hasItems() {
        if (this.numberOfResultsFound !== undefined) {
            return this.numberOfResultsFound > 0;
        }
        return this.transactionsGroupedByDate && this.transactionsGroupedByDate.length > 0;
    }
    get hasModal() {
        return this.featureService.isEnabled(TRANSACTIONS_DETAILS_SHARE_MODAL) && this.showDetailsConfig;
    }
    /**
     * Whether transactions are loading.
     */
    get isLoading() {
        return this.loadingState !== LoadingState.Loaded;
    }
    get isLoadingMore() {
        return this.loadingState === LoadingState.LoadingMore || this.loadingState === LoadingState.LoadingPage;
    }
    /**
     * Whether pagination is configured to be paged.
     */
    get isPaginationPaged() {
        return this.paginationType === PaginationType.PAGINATION;
    }
    /**
     * Whether pagination is configured to be a load-more button.
     */
    get isPaginationLoadMore() {
        return this.paginationType === PaginationType.LOAD_MORE;
    }
    /**
     * Whether pagination is configured to be a infinite-scroll.
     */
    get isInfiniteScrollPagination() {
        return this.paginationType === PaginationType.INFINITE_SCROLL;
    }
    /**
     * Returns whether all transactions have been loaded or not.
     */
    hasLoadedAll() {
        return this.transactionsList && TransactionsList.hasLoadedAll(this.transactionsList);
    }
    onLoadMore() {
        this.loadMore.emit();
    }
    onPageChange(page) {
        this.pageChange.emit(page);
    }
    onDetailOpen(transaction) {
        this.isDetailsOpen = true;
        this.transaction = transaction;
        this.detailsOpen.emit(transaction);
    }
    /**
     * Hide the transaction details.
     */
    closeDetails() {
        this.isDetailsOpen = false;
    }
    ngOnChanges(changes) {
        if (changes.transactionsList) {
            this.transactionsGroupedByDate = Object.entries(TransactionsGroupedByDate.groupByDate(this.transactionsList));
        }
    }
    trackByFn(_index, group) {
        return group[0];
    }
    ngAfterViewInit() {
        if (this.isInfiniteScrollPagination) {
            fromEvent(window, 'scroll')
                .pipe(takeUntil(this.unsubscribeSubject$))
                .subscribe(() => {
                if (!(this.hasLoadedAll() || this.isLoading)) {
                    const element = document.documentElement;
                    const loadingOffsetHeight = element.offsetHeight * 1.5;
                    if (loadingOffsetHeight + element.scrollTop >= element.scrollHeight) {
                        this.onLoadMore();
                    }
                }
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribeSubject$.next();
        this.unsubscribeSubject$.complete();
    }
}
TransactionsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListComponent, deps: [{ token: i1.FeaturesService }, { token: showDetailsConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TransactionsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListComponent, selector: "bb-transactions-list", inputs: { transactionsList: "transactionsList", currentPage: "currentPage", pageSize: "pageSize", loadingState: "loadingState", maxNavPages: "maxNavPages", paginationType: "paginationType", numberOfResultsFound: "numberOfResultsFound", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", inquireAndDisputeTopics: "inquireAndDisputeTopics", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus" }, outputs: { loadMore: "loadMore", pageChange: "pageChange", detailsOpen: "detailsOpen" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"!hostRef.isLoading || hostRef.isLoadingMore; else loadingState\">\n  <ng-container *ngIf=\"hostRef.hasItems(); else emptyState\">\n    <ng-container\n      *ngIf=\"hostRef.isInfiniteScrollPagination; else normalList\"\n      [ngTemplateOutlet]=\"bbTransactionsListWithInfiniteScroll\"\n      [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n    ></ng-container>\n    <ng-template #normalList>\n      <ng-container bbTransactionsListListCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n      <ng-container bbTransactionsListPaginationCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <ng-container bbTransactionsListEmptyStateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #bbTransactionsListWithInfiniteScroll let-hostRef>\n  <div class=\"bb-list bb-block--md\">\n    <div class=\"bb-list__item\" *ngFor=\"let date of hostRef.transactionsGroupedByDate; trackBy: hostRef.trackByFn\">\n      <bb-transactions-list-item-group\n        [checkImagesList]=\"hostRef.checkImagesList\"\n        [transactions]=\"date[1]\"\n        [transactionDate]=\"date[0]\"\n        [showChangeCategory]=\"hostRef.showChangeCategory\"\n        [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n        [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list-item-group>\n    </div>\n    <ng-container *ngIf=\"hostRef.isLoading\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </ng-container>\n    <span\n      class=\"bb-d-block bb-text-align-center\"\n      tabindex=\"0\"\n      i18n=\"Displayed message when all transactions had been loaded@@transactions.list.loadedAll\"\n      *ngIf=\"hostRef.hasLoadedAll()\"\n    >\n      All transactions have been loaded.\n    </span>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.transaction && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListListCustomizable let-hostRef>\n  <div class=\"bb-list bb-block--md\">\n    <div class=\"bb-list__item\" *ngFor=\"let date of hostRef.transactionsGroupedByDate; trackBy: hostRef.trackByFn\">\n      <bb-transactions-list-item-group\n        [checkImagesList]=\"hostRef.checkImagesList\"\n        [transactions]=\"date[1]\"\n        [transactionDate]=\"date[0]\"\n        [showChangeCategory]=\"hostRef.showChangeCategory\"\n        [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n        [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list-item-group>\n    </div>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.transaction && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListPaginationCustomizable let-hostRef>\n  <div class=\"bb-block bb-text-align-center\">\n    <bb-pagination-ui\n      class=\"bb-pagination\"\n      [page]=\"hostRef.currentPage\"\n      [boundaryLinks]=\"true\"\n      [directionLinks]=\"true\"\n      [totalItems]=\"hostRef.transactionsList.totalCount\"\n      [itemsPerPage]=\"hostRef.pageSize\"\n      [maxNavPages]=\"hostRef.maxNavPages\"\n      (pageChange)=\"hostRef.onPageChange($event)\"\n      *ngIf=\"hostRef.isPaginationPaged\"\n    ></bb-pagination-ui>\n    <div data-role=\"load-more\" *ngIf=\"hostRef.isPaginationLoadMore\">\n      <bb-load-button-ui\n        color=\"link\"\n        [isLoading]=\"hostRef.isLoadingMore\"\n        [from]=\"hostRef.currentPage\"\n        [size]=\"hostRef.pageSize\"\n        [totalCount]=\"hostRef.transactionsList.totalCount\"\n        (paramChange)=\"hostRef.onLoadMore($event)\"\n        i18n=\"Load more button, when there are still transactions to be loaded@@transactions.list.loadMore\"\n        *ngIf=\"!hostRef.hasLoadedAll()\"\n        >Load more</bb-load-button-ui\n      >\n      <span\n        i18n=\"Displayed message when all transactions had been loaded@@transactions.list.loadedAll\"\n        *ngIf=\"hostRef.hasLoadedAll()\"\n        >All transactions have been loaded.</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTransactionsListEmptyStateCustomizable let-hostRef>\n  <div class=\"card-body bb-state-container\">\n    <!-- Success-empty -->\n    <bb-empty-state-ui\n      *ngIf=\"hostRef.transactionsList?.initialRequest === true; else filterSearchEmpty\"\n      title=\"No Transactions Found\"\n      i18n-title=\"No transactions are found@@transactions.state.noTransactionsFound.title\"\n      subtitle=\"You don't have any transactions to be displayed.\"\n      i18n-subtitle=\"No transactions to be displayed@@transactions.state.noTransactionsFound.subtitle\"\n      iconSize=\"xl\"\n      iconModifier=\"swap-horiz\"\n    ></bb-empty-state-ui>\n\n    <!-- Search/Filter empty result -->\n    <ng-template #filterSearchEmpty>\n      <bb-empty-state-ui\n        title=\"No Results Found\"\n        i18n-title=\"No results are found@@transactions.state.noResultsFound.title\"\n        subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Filter/Search returned no results, try a different criteria@@transactions.state.noResultsFound.subtitle\"\n        iconSize=\"xl\"\n        iconModifier=\"search\"\n      ></bb-empty-state-ui>\n    </ng-template>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i3.TransactionsListItemGroupComponent; }), selector: "bb-transactions-list-item-group", inputs: ["transactionDate", "transactions", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: i0.forwardRef(function () { return i4.TransactionDetailsModalComponent; }), selector: "bb-transaction-details-modal", inputs: ["isDetailsOpen", "transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen", "close"] }, { type: i0.forwardRef(function () { return i5.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0.forwardRef(function () { return i6.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i7.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return TransactionsListListCustomizableDirective; }), selector: "[bbTransactionsListListCustomizable]" }, { type: i0.forwardRef(function () { return TransactionsListPaginationCustomizableDirective; }), selector: "[bbTransactionsListPaginationCustomizable]" }, { type: i0.forwardRef(function () { return TransactionsListEmptyStateCustomizableDirective; }), selector: "[bbTransactionsListEmptyStateCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-list',
                    templateUrl: './transactions-list.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FeaturesService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [showDetailsConfigToken]
                }] }]; }, propDecorators: { transactionsList: [{
                type: Input
            }], currentPage: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], loadingState: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], paginationType: [{
                type: Input
            }], numberOfResultsFound: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], loadMore: [{
                type: Output
            }], pageChange: [{
                type: Output
            }], checkImagesList: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }] } });
export class TransactionsListPaginationCustomizableDirective extends BbTemplate {
}
TransactionsListPaginationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListPaginationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListPaginationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListPaginationCustomizableDirective, selector: "[bbTransactionsListPaginationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListPaginationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListPaginationCustomizable]',
                }]
        }] });
export class TransactionsListListCustomizableDirective extends BbTemplate {
}
TransactionsListListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListListCustomizableDirective, selector: "[bbTransactionsListListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListListCustomizable]',
                }]
        }] });
export class TransactionsListEmptyStateCustomizableDirective extends BbTemplate {
}
TransactionsListEmptyStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListEmptyStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListEmptyStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListEmptyStateCustomizableDirective, selector: "[bbTransactionsListEmptyStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListEmptyStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListEmptyStateCustomizable]',
                }]
        }] });
//# sourceMappingURL=transactions-list.component.js.map