{"version":3,"file":"transactions-list-pending-transactions.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/widgets/transactions/transactions-list-widget/src/lib/components/transactions-list/transactions-list-pending-transactions.component.ts","../../../../../../../../../libs/widgets/transactions/transactions-list-widget/src/lib/components/transactions-list/transactions-list-pending-transactions.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC3G,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAC3D,OAAO,EAEL,YAAY,EACZ,cAAc,GAGf,MAAM,mCAAmC,CAAC;;;;;;;;AAO3C,MAAM,OAAO,4CAA4C;IALzD;QA0BE;;WAEG;QACM,iBAAY,GAAiB,YAAY,CAAC,MAAM,CAAC;QAW1D;;WAEG;QACgB,gBAAW,GAAG,IAAI,YAAY,EAAe,CAAC;QACjE;;WAEG;QACM,YAAO,GAAG,IAAI,CAAC;KA6BzB;IA3BC,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,YAAY,KAAK,YAAY,CAAC,MAAM,CAAC;IACnD,CAAC;IAED,eAAe;QACb,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC;SACb;QACD,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE;YAC5C,IAAI,IAAI,CAAC,cAAc,KAAK,cAAc,CAAC,UAAU,EAAE;gBACrD,OAAO,KAAK,CAAC;aACd;YACD,IAAI,IAAI,CAAC,cAAc,KAAK,cAAc,CAAC,SAAS,IAAI,IAAI,CAAC,cAAc,KAAK,cAAc,CAAC,eAAe,EAAE;gBAC9G,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,YAAY,CAAC,WAAwB;QACnC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC;IAED,SAAS,CAAC,MAAc,EAAE,OAAoB;QAC5C,OAAO,OAAO,CAAC,EAAE,CAAC;IACpB,CAAC;;0IAtEU,4CAA4C;8HAA5C,4CAA4C,ibCfzD,m4FAyEA,o2BDkBa,4CAA4C;4FA5E5C,4CAA4C;kBALxD,SAAS;mBAAC;oBACT,QAAQ,EAAE,8BAA8B;oBACxC,WAAW,EAAE,yDAAyD;oBACtE,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;8BAKU,gBAAgB;sBAAxB,KAAK;gBAIG,gBAAgB;sBAAxB,KAAK;gBAIG,WAAW;sBAAnB,KAAK;gBAIG,QAAQ;sBAAhB,KAAK;gBAIG,cAAc;sBAAtB,KAAK;gBAIG,YAAY;sBAApB,KAAK;gBAIG,WAAW;sBAAnB,KAAK;gBAIG,kBAAkB;sBAA1B,KAAK;gBACG,uBAAuB;sBAA/B,KAAK;gBAKa,WAAW;sBAA7B,MAAM;;AAsCT,MAAM,OAAO,4CAA6C,SAAQ,UAGjE;;0IAHY,4CAA4C;8HAA5C,4CAA4C;4FAA5C,4CAA4C;kBAHxD,SAAS;mBAAC;oBACT,QAAQ,EAAE,yCAAyC;iBACpD","sourcesContent":["import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output } from '@angular/core';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport {\n  InquireAndDisputeTopics,\n  LoadingState,\n  PaginationType,\n  Transaction,\n  TransactionsList,\n} from '@backbase/transactions-common-ang';\n\n@Component({\n  selector: 'bb-pending-transactions-list',\n  templateUrl: './transactions-list-pending-transactions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TransactionsListPendingTransactionsComponent {\n  /**\n   * List of pending transactions.\n   */\n  @Input() transactionsList: TransactionsList | undefined;\n  /**\n   * whether to show pending transactions on top or not.\n   */\n  @Input() showPendingOnTop: boolean | undefined;\n  /**\n   * The current page of transactions that is being displayed.\n   */\n  @Input() currentPage: number | undefined;\n  /**\n   * The page size.\n   */\n  @Input() pageSize: number | undefined;\n  /**\n   * The pagination type (`load-more`, `pagination` or undefined).\n   */\n  @Input() paginationType: PaginationType | undefined;\n  /**\n   * Whether new transactions are being loaded.  By default, this is `LoadingState.Loaded`.\n   */\n  @Input() loadingState: LoadingState = LoadingState.Loaded;\n  /**\n   * The maximum number of pages to show (only relevant when using pagination).\n   */\n  @Input() maxNavPages: number | undefined;\n  /**\n   * Boolean that decides if the Change Category will be displayed.\n   */\n  @Input() showChangeCategory: boolean | undefined;\n  @Input() inquireAndDisputeTopics: InquireAndDisputeTopics | undefined;\n\n  /**\n   * Event emitter that triggers when the details are open\n   */\n  @Output() readonly detailsOpen = new EventEmitter<Transaction>();\n  /**\n   * Reference to instance of customizable component.\n   */\n  readonly hostRef = this;\n\n  get isLoading() {\n    return this.loadingState !== LoadingState.Loaded;\n  }\n\n  paginationOnTop() {\n    if (this.currentPage === 0) {\n      return true;\n    }\n    if (this.currentPage && this.currentPage > 0) {\n      if (this.paginationType === PaginationType.PAGINATION) {\n        return false;\n      }\n      if (this.paginationType === PaginationType.LOAD_MORE || this.paginationType === PaginationType.INFINITE_SCROLL) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  onDetailOpen(transaction: Transaction) {\n    this.detailsOpen.emit(transaction);\n  }\n\n  trackByFn(_index: number, element: Transaction) {\n    return element.id;\n  }\n}\n\n@Directive({\n  selector: '[bbPendingTransactionsListCustomizable]',\n})\nexport class PendingTransactionsListCustomizableDirective extends BbTemplate<\n  TransactionsListPendingTransactionsComponent,\n  undefined\n> {}\n","<ng-container *ngIf=\"!isLoading; else loadingState\">\n  <ng-container\n    *ngIf=\"transactionsList?.items?.length && paginationOnTop()\"\n    bbPendingTransactionsListCustomizable\n    [bbHostRef]=\"hostRef\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-template bbPendingTransactionsListCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--md\">\n    <strong\n      role=\"heading\"\n      class=\"bb-block bb-block--md\"\n      aria-level=\"2\"\n      aria-label=\" A pending transaction is a payment that has been authorized but has not been processed. For\n      instance, a transaction that is still waiting for the merchant to process it or a transaction requiring overnight\n      processing because it was made after the cutoff time of the financial institution.\"\n      i18n-aria-label=\"Pending transactions header aria-label@@transactions.list.pending.header.aria-label\"\n      tabindex=\"0\"\n    >\n      <div class=\"bb-transactions-list-pending-header bb-block--md\">\n        <span class=\"bb-subheader\" i18n=\"Pending transactions header@@transactions.list.pending.header\">Pending</span>\n        <span class=\"bb-transactions-list-pending-header__tooltip\">\n          <bb-icon-ui\n            role=\"tooltip\"\n            name=\"info\"\n            size=\"sm\"\n            [bbTooltip]=\"tipContent\"\n            placement=\"right\"\n            triggers=\"hover click\"\n            bbAccessibilityKeyboard\n          ></bb-icon-ui>\n        </span>\n      </div>\n    </strong>\n    <div class=\"bb-list\">\n      <div class=\"bb-list__item\">\n        <div\n          class=\"bb-block--md\"\n          *ngFor=\"let transaction of hostRef.transactionsList?.items; trackBy: hostRef.trackByFn\"\n        >\n          <bb-transactions-list-item\n            [transaction]=\"transaction\"\n            [showBillingStatus]=\"true\"\n            [showChangeCategory]=\"hostRef.showChangeCategory\"\n            [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n            (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n          ></bb-transactions-list-item>\n        </div>\n      </div>\n      <!-- forcing a line separator in bb-list-->\n      <div class=\"bb-list__item\"></div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #tipContent>\n  <div\n    class=\"bb-text-align-left\"\n    i18n=\"\n      Description inside a tooltip, describing what a Pending Transaction\n      is@@transactions.list.pending.tooltip.description\"\n  >\n    A pending transaction is a payment that has been authorized but has not been processed. For instance, a transaction\n    that is still waiting for the merchant to process it or a transaction requiring overnight processing because it was\n    made after the cutoff time of the financial institution.\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n"]}