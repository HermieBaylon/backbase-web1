import { Component, Input, Directive, Output, EventEmitter, Optional, Inject } from '@angular/core';
import { BbTemplate, FeaturesService } from '@backbase/foundation-ang/core';
import { BillingStatusEnum, showDetailsConfigToken, } from '@backbase/transactions-common-ang';
import { TRANSACTIONS_DETAILS_SHARE_MODAL } from '../../constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "../transaction/transaction-details-modal.component";
import * as i3 from "../transaction/transaction-header.component";
import * as i4 from "@backbase/transactions-common-ang";
import * as i5 from "@angular/common";
export class TransactionsListItemComponent {
    constructor(featureService, 
    // eslint-disable-next-line
    showDetailsConfig) {
        this.featureService = featureService;
        this.showDetailsConfig = showDetailsConfig;
        /**
         * Whether to show pending transactions on top or not.
         */
        this.showBillingStatus = false;
        this.detailsOpen = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Whether the transaction details are shown or not.
         */
        this.isDetailsOpen = false;
        /**
         * Whether the notes editing form is shown or not.
         */
        this.isEditingNotes = false;
        /**
         * Alert details such as visibility and type
         */
        this.alertOptions = {
            displayAlert: false,
            displayStatus: '',
        };
        if (this.showDetailsConfig === null || this.showDetailsConfig === undefined) {
            this.showDetailsConfig = true;
        }
    }
    /**
     * Show the transaction details.
     */
    openDetails() {
        this.isDetailsOpen = true;
        if (this.transaction) {
            this.detailsOpen.emit(this.transaction);
        }
    }
    /**
     * Hide the transaction details.
     */
    closeDetails() {
        this.isDetailsOpen = false;
        this.onAlertDismiss();
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
    }
    showCategory() {
        return this.isPending || !!this.ownCategory;
    }
    get hasModal() {
        // if the feature is not enabled, we are still displaying modal in the item component
        return !this.featureService.isEnabled(TRANSACTIONS_DETAILS_SHARE_MODAL);
    }
    get isPending() {
        let isPending = false;
        if (this.transaction && this.transaction.billingStatus) {
            const billingStatus = this.transaction.billingStatus.toUpperCase();
            isPending = billingStatus === BillingStatusEnum.pending || billingStatus === BillingStatusEnum.unbilled;
        }
        return isPending;
    }
    get ownCategory() {
        return this.transaction && this.transaction.category;
    }
    closeTransactionsCategory(categoryChangeStatus) {
        if (categoryChangeStatus) {
            this.alertOptions = {
                displayAlert: true,
                displayStatus: categoryChangeStatus,
            };
        }
        else {
            this.onAlertDismiss();
        }
    }
    onAlertDismiss() {
        this.alertOptions = {
            displayAlert: false,
            displayStatus: '',
        };
    }
}
TransactionsListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemComponent, deps: [{ token: i1.FeaturesService }, { token: showDetailsConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TransactionsListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemComponent, selector: "bb-transactions-list-item", inputs: { transaction: "transaction", showBillingStatus: "showBillingStatus", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen" }, ngImport: i0, template: "<ng-container bbTransactionsListItemCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListItemCustomizable let-hostRef>\n  <div bbAccessibilityKeyboard (click)=\"hostRef.openDetails()\">\n    <ng-container bbTransactionsListItemHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <span\n      i18n=\"Transaction selector button@@transactions.list.transaction.label\"\n      i18n-aria-label=\"Transaction selector button label@@transactions.list.transaction.label\"\n      class=\"sr-only\"\n      role=\"button\"\n    >\n      Select transaction\n    </span>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.showDetailsConfig && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showBillingStatus]=\"hostRef.showBillingStatus\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.openDetails($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListItemHeaderCustomizable let-hostRef>\n  <bb-transaction-header\n    [showBillingStatus]=\"hostRef.showBillingStatus\"\n    [transaction]=\"hostRef.transaction\"\n  ></bb-transaction-header>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.TransactionDetailsModalComponent; }), selector: "bb-transaction-details-modal", inputs: ["isDetailsOpen", "transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen", "close"] }, { type: i0.forwardRef(function () { return i3.TransactionHeaderComponent; }), selector: "bb-transaction-header", inputs: ["transaction", "showBillingStatus"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListItemCustomizableDirective; }), selector: "[bbTransactionsListItemCustomizable]" }, { type: i0.forwardRef(function () { return i4.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0.forwardRef(function () { return TransactionsListItemHeaderCustomizableDirective; }), selector: "[bbTransactionsListItemHeaderCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-list-item',
                    templateUrl: './transactions-list-item.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FeaturesService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [showDetailsConfigToken]
                }] }]; }, propDecorators: { transaction: [{
                type: Input
            }], showBillingStatus: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], checkImagesList: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }] } });
export class TransactionsListItemHeaderCustomizableDirective extends BbTemplate {
}
TransactionsListItemHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListItemHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemHeaderCustomizableDirective, selector: "[bbTransactionsListItemHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListItemHeaderCustomizable]',
                }]
        }] });
export class TransactionsListItemCustomizableDirective extends BbTemplate {
}
TransactionsListItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemCustomizableDirective, selector: "[bbTransactionsListItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListItemCustomizable]',
                }]
        }] });
//# sourceMappingURL=transactions-list-item.component.js.map