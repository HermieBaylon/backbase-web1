import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BaseTransactionsControls } from '@backbase/transactions-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/search-box";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "./transactions-filter.component";
import * as i4 from "@backbase/ui-ang/dropdown-menu";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/transactions-common-ang";
import * as i7 from "@backbase/ui-ang/button";
export class TransactionsControlsComponent extends BaseTransactionsControls {
    constructor() {
        super(...arguments);
        /**
         * EventEmitter for triggering a search action.
         */
        this.print = new EventEmitter();
        /**
         * Configuration parameter to show/hide billing status filter
         */
        this.hideBillingStatus = false;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Amount of active filters
         */
        this.activeFilters = 0;
    }
    /**
     * Print event callback
     */
    onPrint() {
        this.print.emit();
    }
    /**
     *  Filter Count event callback
     */
    onFilterCount(activeFilters) {
        this.activeFilters = activeFilters;
    }
}
TransactionsControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsControlsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
TransactionsControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsControlsComponent, selector: "bb-transactions-controls", inputs: { hideBillingStatus: "hideBillingStatus" }, outputs: { print: "print" }, usesInheritance: true, ngImport: i0, template: "<ng-container bbTransactionsListControlsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbTransactionsListControlsCustomizable let-hostRef>\n  <div class=\"card-header\" [ngClass]=\"{ 'bb-block--lg': hostRef.isFilterOpen }\">\n    <div class=\"bb-stack bb-stack--wrap\">\n      <!-- Search button -->\n      <div class=\"bb-transaction-list-controls__search-box bb-stack__item\">\n        <div class=\"input-group\">\n          <label class=\"sr-only\" bbDynamicId #searchLabel i18n=\"search transaction filter@@transactions.search.label\">\n            Search transaction filter\n          </label>\n          <bb-search-box-ui\n            [showSearch]=\"true\"\n            [showClear]=\"true\"\n            placeholder=\"Search\"\n            [aria-labelledby]=\"searchLabel?.id\"\n            searchLabel=\"search\"\n            i18n-searchLabel=\"search label when button in focus@@transactions.searchLabel.search.box\"\n            i18n-placeholder=\"search transactions placeholder@@transactions.ariaLabel.search.placeholder\"\n            (submit)=\"hostRef.onSearch($event)\"\n            (clear)=\"hostRef.onSearch('')\"\n          >\n          </bb-search-box-ui>\n        </div>\n      </div>\n      <!-- Filter button -->\n      <div\n        class=\"bb-stack__item bb-stack__item--fill--md-up align-self-start bb-transaction-list-controls__filter-buttons\"\n      >\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-stack__item--fill--md-up\">\n            <button\n              bbButton\n              *ngIf=\"hostRef.activeFilters\"\n              [attr.aria-expanded]=\"!!hostRef.isFilterOpen\"\n              [color]=\"hostRef.isFilterApplied || hostRef.isFilterOpen ? 'primary' : 'secondary'\"\n              data-role=\"filter\"\n              (click)=\"hostRef.toggleFilter()\"\n            >\n              <bb-icon-ui name=\"filter\"></bb-icon-ui>\n              <span\n                class=\"bb-transaction-list-controls__long-button\"\n                i18n=\"Filter toggle button@@transactions.filtersApplied.button\"\n                >Filters applied</span\n              >\n              <span\n                class=\"bb-transaction-list-controls__short-button\"\n                i18n=\"Filter toggle button@@transactions.filters.button\"\n                >Filters</span\n              >\n              <span>&nbsp;({{ hostRef.activeFilters }})</span>\n            </button>\n\n            <button\n              bbButton\n              *ngIf=\"!hostRef.activeFilters\"\n              [attr.aria-expanded]=\"!!hostRef.isFilterOpen\"\n              [color]=\"hostRef.isFilterApplied || hostRef.isFilterOpen ? 'primary' : 'secondary'\"\n              data-role=\"filter\"\n              (click)=\"hostRef.toggleFilter()\"\n            >\n              <bb-icon-ui name=\"filter\"></bb-icon-ui>\n              <ng-container i18n=\"Filter toggle button@@transactions.filter.button\">Filter</ng-container>\n            </button>\n          </div>\n          <ng-container bbTransactionsListControlsButtonsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <bb-transactions-filter\n    (filter)=\"hostRef.onFilter($event)\"\n    (filterCount)=\"hostRef.onFilterCount($event)\"\n    (closeFilter)=\"hostRef.onClose()\"\n    [hidden]=\"!hostRef.isFilterOpen\"\n    [hideBillingStatus]=\"hostRef.hideBillingStatus\"\n    [availableFilters]=\"hostRef.availableFilters\"\n  ></bb-transactions-filter>\n</ng-template>\n\n<ng-template bbTransactionsListControlsButtonsCustomizable let-hostRef>\n  <!-- Print button -->\n  <button\n    bbButton\n    aria-label=\"Print\"\n    i18n-aria-label=\"Print button@@transactions.print.button\"\n    class=\"bb-stack__item\"\n    color=\"secondary\"\n    [circle]=\"true\"\n    (click)=\"hostRef.onPrint()\"\n  >\n    <bb-icon-ui name=\"print\"></bb-icon-ui>\n  </button>\n  <!-- Export button -->\n  <bb-dropdown-menu-ui\n    *ngIf=\"hostRef.exportConfig?.length\"\n    container=\"body\"\n    icon=\"expand-more\"\n    btnColor=\"secondary\"\n    ariaLabel=\"available export types\"\n    i18n-ariaLabel=\"Currently available export types dropdown@@transactions.list.exportList.ariaLabel\"\n    [btnCircle]=\"true\"\n    icon=\"get-app\"\n    iconSize=\"md\"\n  >\n    <ng-template bbDropdownMenuItem>\n      <a\n        *ngFor=\"let exportType of hostRef.exportConfig\"\n        role=\"menuitem\"\n        class=\"dropdown-item\"\n        (click)=\"hostRef.onExport(exportType)\"\n        href=\"javaScript:void(0);\"\n      >\n        <span>{{ exportType.name }}</span>\n      </a>\n    </ng-template>\n  </bb-dropdown-menu-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i3.TransactionsFilterComponent; }), selector: "bb-transactions-filter", inputs: ["hideBillingStatus", "availableFilters"], outputs: ["filter", "closeFilter", "filterCount"] }, { type: i0.forwardRef(function () { return i4.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListControlsCustomizableDirective; }), selector: "[bbTransactionsListControlsCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i6.DynamicIdDirective; }), selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return TransactionsListControlsButtonsCustomizableDirective; }), selector: "[bbTransactionsListControlsButtonsCustomizable]" }, { type: i0.forwardRef(function () { return i4.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0.forwardRef(function () { return i5.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsControlsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-controls',
                    templateUrl: './transactions-controls.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { print: [{
                type: Output
            }], hideBillingStatus: [{
                type: Input
            }] } });
export class TransactionsListControlsCustomizableDirective extends BbTemplate {
}
TransactionsListControlsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListControlsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListControlsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListControlsCustomizableDirective, selector: "[bbTransactionsListControlsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListControlsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListControlsCustomizable]',
                }]
        }] });
export class TransactionsListControlsButtonsCustomizableDirective extends BbTemplate {
}
TransactionsListControlsButtonsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListControlsButtonsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListControlsButtonsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListControlsButtonsCustomizableDirective, selector: "[bbTransactionsListControlsButtonsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListControlsButtonsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListControlsButtonsCustomizable]',
                }]
        }] });
//# sourceMappingURL=transactions-controls.component.js.map