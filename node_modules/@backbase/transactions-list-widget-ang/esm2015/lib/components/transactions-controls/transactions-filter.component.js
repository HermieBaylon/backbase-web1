import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output, } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { of, Subscription } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { AvailableFilterEnum, creditDebitIndicatorEnumValues, defaultBillingStatusEnumValues, defaultTransactionTypeEnumValues, EnumValuesService, } from '@backbase/transactions-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/transactions-common-ang";
import * as i2 from "@backbase/ui-ang/input-datepicker";
import * as i3 from "@backbase/ui-ang/dropdown-single-select";
import * as i4 from "@backbase/ui-ang/input-number";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@angular/forms";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/button";
const defaultAllOption = { name: 'All' };
export class TransactionsFilterComponent {
    constructor(enumValuesService) {
        this.enumValuesService = enumValuesService;
        /**
         * EventEmitter for triggering a filter action.
         */
        this.filter = new EventEmitter();
        /**
         * EventEmitter to hide the filter options
         */
        this.closeFilter = new EventEmitter();
        /**
         * EventEmitter with the amount of active filters
         */
        this.filterCount = new EventEmitter();
        /**
         * Configuration parameter to show/hide billing status filter
         */
        this.hideBillingStatus = false;
        /**
         * Configuration parameter to show/hide filters
         */
        this.availableFilters = [];
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        this.availableFilterEnum = AvailableFilterEnum;
        this.transactionsFilterForm = new FormGroup({
            creditDebitIndicator: new FormControl(creditDebitIndicatorEnumValues[0]),
            types: new FormControl(),
            billingStatus: new FormControl(),
            amount: new FormGroup({
                from: new FormControl(undefined, Validators.min(0)),
                to: new FormControl(undefined, Validators.min(0)),
            }),
            date: new FormGroup({
                from: new FormControl(''),
                to: new FormControl(''),
            }),
            categories: new FormControl(),
            checkSerialNumber: new FormGroup({
                from: new FormControl(undefined, Validators.min(0)),
                to: new FormControl(undefined, Validators.min(0)),
            }),
        });
        this.creditDebitIndicatorOptions = creditDebitIndicatorEnumValues;
        this.subscriptions = new Subscription();
        this.setDefaultAllOption = (field) => (data) => {
            const control = this.transactionsFilterForm.get(field);
            if (control) {
                control.setValue(data[0]);
            }
        };
        const insertDefaultValue = (data) => [defaultAllOption, ...data];
        this.transactionTypeOptions = this.enumValuesService.getEnumValues('type').pipe(map(insertDefaultValue), catchError(() => of(defaultTransactionTypeEnumValues)));
        this.billingStatusOptions = this.enumValuesService.getEnumValues('billingStatus').pipe(map(insertDefaultValue), catchError(() => of(defaultBillingStatusEnumValues)));
    }
    ngOnInit() {
        var _a, _b;
        this.subscriptions.add(this.transactionTypeOptions.subscribe(this.setDefaultAllOption('types')));
        this.subscriptions.add(this.billingStatusOptions.subscribe(this.setDefaultAllOption('billingStatus')));
        this.subscriptions.add((_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(() => {
            var _a, _b, _c, _d, _e, _f;
            (_a = this.fromSerialNumber) === null || _a === void 0 ? void 0 : _a.setValidators(Validators.max((_b = this.toSerialNumber) === null || _b === void 0 ? void 0 : _b.value));
            (_c = this.toSerialNumber) === null || _c === void 0 ? void 0 : _c.setValidators(Validators.min(((_d = this.fromSerialNumber) === null || _d === void 0 ? void 0 : _d.value) || 0));
            (_e = this.fromSerialNumber) === null || _e === void 0 ? void 0 : _e.updateValueAndValidity({ emitEvent: false });
            (_f = this.toSerialNumber) === null || _f === void 0 ? void 0 : _f.updateValueAndValidity({ emitEvent: false });
        }));
        this.subscriptions.add((_b = this.amountFormGroup) === null || _b === void 0 ? void 0 : _b.valueChanges.subscribe(() => {
            var _a, _b, _c, _d, _e, _f;
            (_a = this.fromAmount) === null || _a === void 0 ? void 0 : _a.setValidators(Validators.max((_b = this.toAmount) === null || _b === void 0 ? void 0 : _b.value));
            (_c = this.toAmount) === null || _c === void 0 ? void 0 : _c.setValidators(Validators.min(((_d = this.fromAmount) === null || _d === void 0 ? void 0 : _d.value) || 0));
            (_e = this.fromAmount) === null || _e === void 0 ? void 0 : _e.updateValueAndValidity({ emitEvent: false });
            (_f = this.toAmount) === null || _f === void 0 ? void 0 : _f.updateValueAndValidity({ emitEvent: false });
        }));
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    compareByValue(optionListedValue, placeholderValue) {
        if (!optionListedValue || !placeholderValue) {
            return;
        }
        return optionListedValue.value === placeholderValue.value;
    }
    /**
     * Emit event to apply filter.
     *
     * @param filterParams - Options to filter transactions list with.
     */
    onFilter(filterParams) {
        this.filterCount.emit(this.activeFilterCounter);
        this.filter.emit(filterParams);
    }
    /**
     * Checks all the form fields and looks for differences with a default model to define if a filter was applied or not
     */
    get activeFilterCounter() {
        const fields = [
            this.fromDate,
            this.toDate,
            this.fromAmount,
            this.toAmount,
            this.fromSerialNumber,
            this.toSerialNumber,
            this.creditDebitIndicator,
            this.transactionType,
            this.billingStatus,
        ];
        const activeFilters = fields.reduce((count, field) => (this.isFilterApplied(field) ? ++count : count), 0);
        return activeFilters;
    }
    isFilterApplied(control) {
        if (typeof (control === null || control === void 0 ? void 0 : control.value) === 'object' && control.value !== null) {
            return JSON.stringify(control.value) !== JSON.stringify(defaultAllOption);
        }
        else {
            return (control === null || control === void 0 ? void 0 : control.valid) && (!!control.value || control.value === 0);
        }
    }
    /**
     * Clear filter form and reset values to default.
     */
    onClearFilter() {
        this.transactionsFilterForm.reset({
            creditDebitIndicator: creditDebitIndicatorEnumValues[0],
            types: defaultAllOption,
            billingStatus: defaultAllOption,
            date: {
                from: '',
                to: '',
            },
        });
        this.transactionsFilterForm.markAsPristine();
        this.onFilter({});
    }
    /**
     * Emit event to close this filter form.
     */
    onCloseFilter() {
        this.closeFilter.emit();
    }
    get dateFormGroup() {
        return this.transactionsFilterForm.get('date');
    }
    get fromDate() {
        var _a;
        return (_a = this.dateFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
    }
    get toDate() {
        var _a;
        return (_a = this.dateFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
    }
    get amountFormGroup() {
        return this.transactionsFilterForm.get('amount');
    }
    get fromAmount() {
        var _a;
        return (_a = this.amountFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
    }
    get toAmount() {
        var _a;
        return (_a = this.amountFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
    }
    get serialNumberFormGroup() {
        return this.transactionsFilterForm.get('checkSerialNumber');
    }
    get fromSerialNumber() {
        var _a;
        return (_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
    }
    get toSerialNumber() {
        var _a;
        return (_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
    }
    get creditDebitIndicator() {
        return this.transactionsFilterForm.get('creditDebitIndicator');
    }
    get transactionType() {
        return this.transactionsFilterForm.get('types');
    }
    get billingStatus() {
        return this.transactionsFilterForm.get('billingStatus');
    }
    formatDateToString(dateArg) {
        if (!!dateArg && new Date(dateArg).getTime()) {
            const argDate = new Date(dateArg);
            const formatedArgDate = new Date(argDate.getFullYear(), argDate.getMonth(), argDate.getDate());
            return formatedArgDate.toISOString();
        }
        return;
    }
    isFieldValid(fieldGroup, fieldName) {
        var _a;
        const fieldControl = (_a = this.transactionsFilterForm.get(fieldGroup)) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        return !!(fieldControl === null || fieldControl === void 0 ? void 0 : fieldControl.valid) || !!(fieldControl === null || fieldControl === void 0 ? void 0 : fieldControl.untouched);
    }
}
TransactionsFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsFilterComponent, deps: [{ token: i1.EnumValuesService }], target: i0.ɵɵFactoryTarget.Component });
TransactionsFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsFilterComponent, selector: "bb-transactions-filter", inputs: { hideBillingStatus: "hideBillingStatus", availableFilters: "availableFilters" }, outputs: { filter: "filter", closeFilter: "closeFilter", filterCount: "filterCount" }, ngImport: i0, template: "<ng-container bbTransactionsListFilterCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListFilterCustomizable let-hostRef>\n  <div class=\"bb-transactions-list-filter\">\n    <form\n      class=\"card-body\"\n      [formGroup]=\"hostRef.transactionsFilterForm\"\n      (ngSubmit)=\"hostRef.onFilter(hostRef.transactionsFilterForm.value)\"\n      novalidate\n      autocomplete=\"off\"\n    >\n      <div class=\"bb-block bb-block--sm\">\n        <div class=\"row\">\n          <!-- Date range -->\n          <div class=\"col-lg-8\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Date)\">\n            <div class=\"row\" formGroupName=\"date\">\n              <div class=\"col-12 col-sm-6\">\n                <div class=\"form-group\">\n                  <bb-input-datepicker-ui\n                    name=\"dateRange\"\n                    data-role=\"start-date\"\n                    label=\"Start date\"\n                    i18n-label=\"Transaction filter for the start Date Range@@transactions.filter.form.startDate.label\"\n                    formControlName=\"from\"\n                    [maxDate]=\"hostRef.formatDateToString(hostRef.toDate?.value)\"\n                  ></bb-input-datepicker-ui>\n                </div>\n              </div>\n\n              <div class=\"col-12 col-sm-6\">\n                <div class=\"form-group\">\n                  <bb-input-datepicker-ui\n                    name=\"dateRange\"\n                    data-role=\"end-date\"\n                    label=\"End date\"\n                    i18n-label=\"Transaction filter for the end Date Range@@transactions.filter.form.endDate.label\"\n                    formControlName=\"to\"\n                    [minDate]=\"hostRef.formatDateToString(hostRef.fromDate?.value)\"\n                  ></bb-input-datepicker-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Credit/debit indicator -->\n          <div class=\"col-lg-4\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.CreditDebitIndicator)\">\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Credit or debit\"\n                data-role=\"credit-debit-indicator-label\"\n                i18n-label=\"\n                  Transactions filter for credit or debit@@transactions.filter.form.creditDebitIndicator.label\"\n                [options]=\"hostRef.creditDebitIndicatorOptions\"\n                displayAttributePath=\"name\"\n                formControlName=\"creditDebitIndicator\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <!-- Amount range -->\n          <div\n            class=\"col-lg-6 form-group\"\n            *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Amount)\"\n            bbDynamicId\n            #amountGroup\n          >\n            <div class=\"bb-stack\" formGroupName=\"amount\">\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #fromAmountLabel\n                  i18n=\"Transactions filter Minimun amount@@transactions.filter.minAmount.label\"\n                >\n                  <abbr title=\"Minimum\">Min.</abbr> amount\n                </label>\n                <bb-input-number-ui\n                  formControlName=\"from\"\n                  data-role=\"amount-from\"\n                  [aria-labelledby]=\"fromAmountLabel?.id\"\n                  placeholder=\"From\"\n                  i18n-placeholder=\"\n                    Initial filtering value|Starting value|Lower amount@@transactions.filter.form.amountFrom.placeholder\"\n                  aria-describedby=\"{{ amountGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #toAmountLabel\n                  i18n=\"Transactions filter Maximun amount@@transactions.filter.maxAmount.label\"\n                >\n                  <abbr title=\"Maximum\">Max.</abbr> amount\n                </label>\n                <bb-input-number-ui\n                  formControlName=\"to\"\n                  data-role=\"amount-to\"\n                  placeholder=\"To\"\n                  i18n-placeholder=\"\n                    Ending filtering value|End value|Higher amount@@transactions.filter.form.amountTo.placeholder\"\n                  [aria-labelledby]=\"toAmountLabel?.id\"\n                  aria-describedby=\"{{ amountGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n            </div>\n            <bb-input-validation-message-ui\n              [showErrors]=\"!hostRef.isFieldValid('amount', 'from') || !hostRef.isFieldValid('amount', 'to')\"\n              messageId=\"{{ amountGroup?.id }}-error\"\n            >\n              <span\n                i18n=\"\n                  Max. amount cannot be smaller than the min. amount|Error Message when max amount is smaller than min\n                  amount@@transactions.filter.form.error.amountRange\"\n              >\n                Maximum amount cannot be smaller than the minimum amount\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- Transaction Type -->\n          <div class=\"col-lg-6\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Types)\">\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Transaction type\"\n                data-role=\"transaction-type-label\"\n                i18n-label=\"\n                  Transaction filter for the types of transaction@@transactions.filter.form.transactionType.label\"\n                [options]=\"(hostRef.transactionTypeOptions | async)!\"\n                displayAttributePath=\"name\"\n                formControlName=\"types\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <!-- Billing status -->\n          <div\n            class=\"col-lg-6\"\n            *ngIf=\"!hideBillingStatus && hostRef.availableFilters.includes(availableFilterEnum.BillingStatus)\"\n          >\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Billing status\"\n                data-role=\"billing-status-label\"\n                i18n-label=\"Transactions filter for Billing Status@@transactions.filter.form.billingStatus.label\"\n                [options]=\"(hostRef.billingStatusOptions | async)!\"\n                displayAttributePath=\"name\"\n                formControlName=\"billingStatus\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n          <!-- Check range -->\n          <div\n            class=\"col-lg-6 form-group\"\n            *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.CheckSerialNumber)\"\n          >\n            <div class=\"bb-stack\" formGroupName=\"checkSerialNumber\" bbDynamicId #rangeGroup>\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #fromCheckLabel\n                  i18n=\"Transactions filter First check number range@@transactions.filter.firstCheckSerialNumber.label\"\n                >\n                  First check <abbr title=\"Number\">N\u00BA</abbr>\n                </label>\n                <bb-input-number-ui\n                  [aria-labelledby]=\"fromCheckLabel?.id\"\n                  formControlName=\"from\"\n                  data-role=\"check-from\"\n                  placeholder=\"From\"\n                  i18n-placeholder=\"'From' number range input@@transactions.filter.form.rangeFrom.placeholder\"\n                  aria-describedby=\"{{ rangeGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #toCheckLabel\n                  i18n=\"Transactions filter Last check number range@@transactions.filter.lastCheckSerialNumber.label\"\n                >\n                  Last check <abbr title=\"Number\">N\u00BA</abbr>\n                </label>\n                <bb-input-number-ui\n                  [aria-labelledby]=\"toCheckLabel?.id\"\n                  formControlName=\"to\"\n                  data-role=\"check-to\"\n                  placeholder=\"To\"\n                  i18n-placeholder=\"'To' number range input@@transactions.filter.form.rangeTo.placeholder\"\n                  aria-describedby=\"{{ rangeGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n            </div>\n            <bb-input-validation-message-ui\n              [showErrors]=\"\n                !hostRef.isFieldValid('checkSerialNumber', 'from') || !hostRef.isFieldValid('checkSerialNumber', 'to')\n              \"\n              messageId=\"{{ rangeGroup?.id }}-error\"\n            >\n              <span\n                i18n=\"\n                  Last check n\u00BA cannot be smaller than first check n\u00BA|Error Message when last check n\u00BA is smaller than\n                  first check n\u00BA@@transactions.filter.form.error.checkSerialRange\"\n              >\n                Last check number cannot be smaller than first check number\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <!-- Apply -->\n        <button\n          bbButton\n          type=\"submit\"\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"apply\"\n          i18n-title=\"Apply button|Apply selected filters@@transactions.filter.form.button.apply\"\n          title=\"Apply\"\n          i18n=\"Apply button|Apply selected filters@@transactions.filter.form.button.apply\"\n        >\n          Apply\n        </button>\n\n        <!-- Close -->\n        <button\n          bbButton\n          type=\"button\"\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"cancel\"\n          i18n-title=\"Close button|Close filter menu@@transactions.filter.form.button.close\"\n          title=\"Close\"\n          i18n=\"Close button|Close filter menu@@transactions.filter.form.button.close\"\n          (click)=\"hostRef.onCloseFilter()\"\n        >\n          Close\n        </button>\n\n        <!-- Clear filters -->\n        <button\n          bbButton\n          type=\"button\"\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"clear-all\"\n          i18n-title=\"Clear Filters button|Clean filters@@transactions.filter.form.button.clearAll\"\n          title=\"Clear filters\"\n          (click)=\"hostRef.onClearFilter()\"\n          *ngIf=\"hostRef.transactionsFilterForm.dirty\"\n          i18n=\"Clear filters button|Clean filters@@transactions.filter.form.button.clearAll\"\n        >\n          Clear filters\n        </button>\n      </div>\n    </form>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i3.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i4.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i0.forwardRef(function () { return i5.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListFilterCustomizableDirective; }), selector: "[bbTransactionsListFilterCustomizable]" }, { type: i0.forwardRef(function () { return i6.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i6.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i6.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.FormGroupName; }), selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i0.forwardRef(function () { return i2.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0.forwardRef(function () { return i6.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i6.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i2.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0.forwardRef(function () { return i1.DynamicIdDirective; }), selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i0.forwardRef(function () { return i8.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i7.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-filter',
                    templateUrl: './transactions-filter.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.EnumValuesService }]; }, propDecorators: { filter: [{
                type: Output
            }], closeFilter: [{
                type: Output
            }], filterCount: [{
                type: Output
            }], hideBillingStatus: [{
                type: Input
            }], availableFilters: [{
                type: Input
            }] } });
export class TransactionsListFilterCustomizableDirective extends BbTemplate {
}
TransactionsListFilterCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListFilterCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListFilterCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListFilterCustomizableDirective, selector: "[bbTransactionsListFilterCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListFilterCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListFilterCustomizable]',
                }]
        }] });
//# sourceMappingURL=transactions-filter.component.js.map