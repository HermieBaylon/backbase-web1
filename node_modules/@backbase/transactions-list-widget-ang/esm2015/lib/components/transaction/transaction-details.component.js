import { Component, Input, Directive, ChangeDetectorRef, EventEmitter, Output, ChangeDetectionStrategy, } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { TransactionUpdateService, TransactionsDetailsLoadingState, TransactionsInquireAndDisputeUIService, MessagesService, } from '@backbase/transactions-common-ang';
import { of, Subject } from 'rxjs';
import { switchMap, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/transactions-common-ang";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/alert";
import * as i4 from "@backbase/ui-ang/amount";
import * as i5 from "./transaction-notes.component";
import * as i6 from "@backbase/ui-ang/modal";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "@backbase/ui-ang/button";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/tooltip-directive";
export class TransactionDetailsComponent {
    constructor(transactionUpdate, messagesService, transactionsInquireAndDispute, cd) {
        this.transactionUpdate = transactionUpdate;
        this.messagesService = messagesService;
        this.transactionsInquireAndDispute = transactionsInquireAndDispute;
        this.cd = cd;
        /* eslint-enable */
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Whether to show the account number (for example, when transactions of multiple accounts are
         * shown) or not.
         */
        this.showAccountNumber = false;
        /**
         * Whether the notes editing form is shown or not.
         */
        this.isEditingNotes = false;
        this.isPending = false;
        this.showInquiryAndDispute = false;
        this.inquireAndDisputeTopics = {
            inquire: '',
            dispute: '',
        };
        /**
         * EventEmitter for triggering an isEditingNotesChange event.
         */
        this.isEditingNotesChange = new EventEmitter();
        this.showInquiryAndDisputeChange = new EventEmitter();
        /* eslint-disable */
        this.onNotesUpdateSuccess = new EventEmitter();
        this.onNotesUpdateError = new EventEmitter();
        this.unsubscribeSubject = new Subject();
        this.showReportForm = (display) => {
            if (display) {
                this.isEditingNotes = false;
            }
            this.showInquiryAndDisputeChange.emit(display);
        };
        this.isSavingNotes = false;
        this.deleteNoteModalActive = false;
        this.loadingStateEnum = TransactionsDetailsLoadingState;
    }
    //Inquire and dispute variables
    get reportState() {
        return this.transactionsInquireAndDispute.reportState;
    }
    get message() {
        return this.transactionsInquireAndDispute.message;
    }
    set message(value) {
        this.transactionsInquireAndDispute.message = value;
    }
    /**
     * Handler function after user changes notes for the transaction.  Calls service to update the
     * backend.
     *
     * @param notes - The new notes for the transaction.
     */
    onChangeNotes(notes) {
        if (typeof this.transaction === 'undefined') {
            return;
        }
        this.updateNotes(this.transaction, notes);
    }
    openEditNotes() {
        this.isEditingNotes = true;
        this.transactionsInquireAndDispute.showReportForm(false);
    }
    handleDelete(data) {
        this.deleteNoteModalActive = true;
        if (this.transaction) {
            this.transaction.notes = data;
        }
    }
    closeModal() {
        this.deleteNoteModalActive = false;
    }
    submitDeleteNote() {
        if (this.transaction) {
            this.updateNotes(this.transaction, '');
        }
    }
    updateNotes(transaction, note) {
        this.isSavingNotes = true;
        this.transactionUpdate.updateNotes(transaction, note).subscribe(() => {
            transaction.notes = note;
            this.deleteNoteModalActive = false;
            this.onNotesUpdateSuccess.emit(note);
            this.updateNotesState();
        }, (error) => {
            this.onNotesUpdateError.emit(error);
            this.updateNotesState();
        });
    }
    updateNotesState() {
        this.isSavingNotes = false;
        this.isEditingNotes = false;
        this.cd.markForCheck();
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        if (this.inquireAndDisputeTopics) {
            this.transactionsInquireAndDispute.showReport.subscribe({
                next: this.showReportForm,
            });
        }
    }
    ngOnDestroy() {
        this.transactionsInquireAndDispute.removeAllFiles();
        this.unsubscribeSubject.next();
        this.unsubscribeSubject.complete();
    }
    saveReport(messageForm) {
        const defaultBody = this.transaction ? this.messagesService.createDefaultBody(this.transaction) : '';
        this.transactionsInquireAndDispute
            .saveReport(this.transactionsInquireAndDispute.formatMessage(messageForm, defaultBody, this.inquireAndDisputeTopics, this.transaction))
            .pipe(takeUntil(this.unsubscribeSubject), switchMap(() => {
            if (this.transaction && messageForm.topic === 'dispute') {
                return this.transactionUpdate.setDisputeStatus(this.transaction, 'PENDING');
            }
            return of(undefined);
        }))
            .subscribe({
            next: (result) => {
                this.savedReportType = result !== undefined ? messageForm.topic : undefined;
                if (this.transaction && messageForm.topic === 'dispute') {
                    this.transaction.disputeStatus = 'PENDING';
                }
                if (this.transaction && messageForm.topic === 'inquire') {
                    this.savedReportType = messageForm.topic;
                }
                this.cd.markForCheck();
            },
        });
    }
    cancelReport() {
        this.transactionsInquireAndDispute.cancelReport();
    }
    fileChange(file) {
        this.transactionsInquireAndDispute
            .fileChange(file)
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe({
            next: () => {
                this.cd.markForCheck();
            },
        });
    }
    fileRemoved(attachment) {
        this.transactionsInquireAndDispute
            .fileRemoved(attachment)
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe({
            next: () => {
                this.cd.markForCheck();
            },
        });
    }
}
TransactionDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsComponent, deps: [{ token: i1.TransactionUpdateService }, { token: i1.MessagesService }, { token: i1.TransactionsInquireAndDisputeUIService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TransactionDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailsComponent, selector: "bb-transaction-details", inputs: { transaction: "transaction", showAccountNumber: "showAccountNumber", isEditingNotes: "isEditingNotes", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", isPending: "isPending", showInquiryAndDispute: "showInquiryAndDispute", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { isEditingNotesChange: "isEditingNotesChange", showInquiryAndDisputeChange: "showInquiryAndDisputeChange", onNotesUpdateSuccess: "onNotesUpdateSuccess", onNotesUpdateError: "onNotesUpdateError" }, providers: [TransactionsInquireAndDisputeUIService], ngImport: i0, template: "<ng-container bbTransactionsListItemDetailsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListItemDetailsCustomizable let-hostRef>\n  <div class=\"bb-transaction-list-item-details\">\n    <div class=\"bb-block bb-block--lg\">\n      <div class=\"bb-text-align-center bb-stack bb-stack--center\">\n        <!-- Add note button -->\n        <div class=\"bb-stack__item bb-transaction-list-item-details-controls-container\">\n          <button\n            bbButton\n            [circle]=\"true\"\n            data-role=\"control-note-btn\"\n            class=\"bb-block bb-block--md\"\n            [attr.aria-expanded]=\"!!hostRef.isEditingNotes\"\n            (click)=\"hostRef.openEditNotes()\"\n          >\n            <bb-icon-ui name=\"subject\"></bb-icon-ui>\n          </button>\n          <div class=\"bb-transaction-list-item-details-controls-label\">\n            <label\n              data-role=\"add-note-label\"\n              *ngIf=\"!hostRef.transaction.notes; else editNoteLabel\"\n              i18n=\"Add note to the current transaction@@transactions.list.details.addNote.label\"\n              >Add note</label\n            >\n            <ng-template #editNoteLabel>\n              <label\n                data-role=\"edit-note-label\"\n                i18n=\"Edit note of the current transaction@@transactions.list.details.editNote.label\"\n                >Edit note</label\n              >\n            </ng-template>\n          </div>\n        </div>\n        <!-- Report button -->\n        <div\n          *ngIf=\"hostRef.transactionDetailsLoadingStatus?.enableDisputeAndInquiry === hostRef.loadingStateEnum.done\"\n          class=\"bb-stack__item bb-transaction-list-item-details-controls-container\"\n        >\n          <button\n            bbButton\n            [circle]=\"true\"\n            class=\"bb-block bb-block--md\"\n            data-role=\"report-button\"\n            (click)=\"hostRef.showReportForm(true)\"\n          >\n            <bb-icon-ui name=\"sms-failed\"></bb-icon-ui>\n          </button>\n          <div class=\"bb-transaction-list-item-details-controls-label\">\n            <label\n              data-role=\"report-label\"\n              i18n=\"Report the current transaction@@transactions.list.details.report.label\"\n            >\n              Report\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dispute and inquiry alerts -->\n      <div class=\"bb-block bb-block--lg bb-text-align-left\">\n        <!-- Dispute banners -->\n        <bb-dispute-banner [transaction]=\"hostRef.transaction\"></bb-dispute-banner>\n        <!-- Inquiry banner -->\n        <ng-container *ngIf=\"hostRef.reportState === hostRef.loadingStateEnum.done\">\n          <bb-alert-ui\n            *ngIf=\"hostRef.savedReportType === 'inquire'\"\n            modifier=\"info\"\n            data-role=\"send-inquiry-success\"\n            title=\"The bank is reviewing your transaction\"\n            i18n-title=\"\n              Send inquiry report success notification|Message for a notification displayed when sending transaction\n              inquiry report request has succeed@@transactions.notification.success.send.inquiry.title\"\n            message=\"Please go to Messages to view any responses to your request.\"\n            i18n-message=\"\n              Send inquiry report success notification message@@transactions.notification.success.send.inquiry.message\"\n          ></bb-alert-ui>\n        </ng-container>\n      </div>\n\n      <!-- Dispute and inquiry component -->\n      <div *ngIf=\"hostRef.showInquiryAndDispute\">\n        <bb-transactions-inquiry-dispute\n          [(message)]=\"hostRef.message\"\n          [enableDispute]=\"\n            hostRef.transactionDetailsLoadingStatus.disputeOption === hostRef.loadingStateEnum.done &&\n            (hostRef.transaction.disputeStatus === 'UNDISPUTED' ||\n              hostRef.transaction.disputeStatus === 'REJECTED' ||\n              !hostRef.transaction.disputeStatus)\n          \"\n          [state]=\"hostRef.reportState\"\n          [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n          (submitReport)=\"hostRef.saveReport($event)\"\n          (cancelReport)=\"hostRef.cancelReport()\"\n          (fileChange)=\"hostRef.fileChange($event)\"\n          (fileRemoved)=\"hostRef.fileRemoved($event)\"\n        ></bb-transactions-inquiry-dispute>\n      </div>\n    </div>\n\n    <div class=\"bb-block--lg\">\n      <!-- Type -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.type && (!!hostRef.transaction?.category || !!hostRef.transaction.isPending)\"\n        data-role=\"list-details-type-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Type of the selected transaction@@transactions.details.label.transactionType\"\n          data-role=\"section-title\"\n        >\n          Type\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.type }}\n        </div>\n      </div>\n\n      <!-- Currency Exchange -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction.currencyExchangeAvailability\"\n        data-role=\"list-details-currency-exchange-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Transaction type of the selected transaction@@transactions.details.label.currencyExchange\"\n          data-role=\"section-title\"\n        >\n          Currency exchange\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          <bb-amount-ui\n            amount=\"1\"\n            [currency]=\"hostRef.transaction?.instructedAmountCurrency.currencyCode\"\n          ></bb-amount-ui>\n          <span> = </span>\n          <bb-amount-ui\n            [amount]=\"hostRef.transaction?.currencyExchangeRate\"\n            [currency]=\"hostRef.transaction?.transactionAmountCurrency.currencyCode\"\n            [decimalPlaces]=\"6\"\n            [trailingZeroes]=\"false\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <!-- Instructed amount -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.instructedAmountCurrency?.amount\"\n        data-role=\"list-details-instructed-amount-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Instructed Amount of the selected transaction@@transactions.details.label.instructedAmount\"\n          data-role=\"section-title\"\n        >\n          Instructed amount\n        </div>\n        <div class=\"break-word\">\n          <bb-amount-ui\n            data-role=\"section-content\"\n            [amount]=\"hostRef.transaction?.instructedAmountCurrency?.amount\"\n            [currency]=\"hostRef.transaction?.instructedAmountCurrency?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <!-- Counter party account number -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.counterPartyAccountNumber\"\n        data-role=\"list-details-counter-party-account-number-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"\n            Counter Party Account number of the selected\n            transaction@@transactions.details.label.counterPartyAccountNumber\"\n          data-role=\"section-title\"\n        >\n          Counter party account number\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.counterPartyAccountNumber }}\n        </div>\n      </div>\n\n      <!-- Description -->\n      <div class=\"bb-block--md\" *ngIf=\"hostRef.transaction?.description\" data-role=\"list-details-description-section\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Description of the selected transaction@@transactions.details.label.description\"\n          data-role=\"section-title\"\n        >\n          Description\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.description }}\n        </div>\n      </div>\n\n      <!-- Original Description -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.originalDescription\"\n        data-role=\"list-details-original-description-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Original description of the selected transaction@@transactions.details.label.originalDescription\"\n          data-role=\"section-title\"\n        >\n          Original description\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.originalDescription }}\n        </div>\n      </div>\n\n      <!-- Running balance -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.runningBalance\"\n        data-role=\"list-details-running-balance-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Running balance of the selected transaction@@transactions.details.label.runningBalance\"\n          data-role=\"section-title\"\n        >\n          Running balance\n        </div>\n        <div class=\"break-word\">\n          <bb-amount-ui\n            data-role=\"section-content\"\n            [currency]=\"hostRef.transaction?.transactionAmountCurrency?.currencyCode\"\n            [amount]=\"hostRef.transaction?.runningBalance\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </div>\n\n    <!-- Check image -->\n    <ng-container *ngIf=\"hostRef?.transactionDetailsLoadingStatus?.checkImages !== hostRef.loadingStateEnum.notStarted\">\n      <ng-container\n        *ngIf=\"hostRef?.transactionDetailsLoadingStatus?.checkImages !== hostRef.loadingStateEnum.notLoaded\"\n      >\n        <div\n          class=\"bb-block--lg\"\n          *ngIf=\"hostRef.transaction && hostRef.transaction.checkImageAvailability === 'AVAILABLE'\"\n        >\n          <span\n            class=\"bb-text-bold\"\n            i18n=\"check images of the selected transaction@@transactions.details.label.check-img\"\n          >\n            Check images\n          </span>\n          <span>\n            <bb-icon-ui\n              class=\"bb-transactions-list-pending-header__tooltip\"\n              role=\"tooltip\"\n              name=\"info\"\n              size=\"sm\"\n              [bbTooltip]=\"tipContent\"\n              triggers=\"hover click\"\n              placement=\"right\"\n              bbAccessibilityKeyboard\n            ></bb-icon-ui>\n          </span>\n          <bb-transaction-check-image\n            [transaction]=\"hostRef.transaction\"\n            [checkImagesList]=\"hostRef.checkImagesList\"\n            [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n          ></bb-transaction-check-image>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <!-- Geo location -->\n    <div *ngIf=\"hostRef.transaction?.location\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--sm\"\n        i18n=\"Geo location of the selected transaction@@transactions.details.label.geo-location\"\n      >\n        Location\n      </div>\n      <bb-transaction-geo-location-map\n        [transaction]=\"hostRef.transaction\"\n        [loadingStatus]=\"hostRef.transactionDetailsLoadingStatus?.geolocation\"\n      ></bb-transaction-geo-location-map>\n    </div>\n\n    <!-- Notes -->\n    <ng-container *ngIf=\"!!hostRef.isEditingNotes || !!hostRef.transaction.notes\">\n      <div class=\"bb-block bb-block--lg\"></div>\n      <div class=\"bb-transaction-list-item-detail-additional-info\">\n        <bb-transaction-notes\n          data-role=\"transaction-notes\"\n          [transaction]=\"hostRef.transaction\"\n          [isEditingNotes]=\"hostRef.isEditingNotes\"\n          [isSavingNotes]=\"hostRef.isSavingNotes\"\n          (isEditingNotesChange)=\"hostRef.isEditingNotes = $event; hostRef.isEditingNotesChange.emit($event)\"\n          (changeNotes)=\"hostRef.onChangeNotes($event)\"\n          (deleteNote)=\"hostRef.handleDelete($event)\"\n        ></bb-transaction-notes>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n\n<!-- Delete note -->\n<bb-modal-ui [isOpen]=\"deleteNoteModalActive\" (cancel)=\"closeModal()\">\n  <ng-container bbTransactionsListConfirmationModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</bb-modal-ui>\n\n<ng-template bbTransactionsListConfirmationModalCustomizable let-hostRef>\n  <div class=\"modal-header\">\n    <h2\n      id=\"modal-basic-title\"\n      class=\"modal-title\"\n      data-role=\"delete-note-modal-header\"\n      i18n=\"Delete note?|Delete note modal title@@transactions.list.note.delete.modal.title\"\n    >\n      Delete note?\n    </h2>\n  </div>\n\n  <div class=\"modal-body\">\n    <span\n      data-role=\"delete-note-modal-subHeader\"\n      i18n=\"Are you sure you want to delete this note?|Delete note info@@transactions.list.note.delete.modal.info\"\n    >\n      Are you sure you want to delete the attached note? Entered data will be lost.\n    </span>\n  </div>\n\n  <div class=\"modal-footer\">\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        color=\"danger\"\n        class=\"bb-button-bar__button\"\n        data-role=\"delete-note-modal-delete-button\"\n        (click)=\"hostRef.submitDeleteNote()\"\n        i18n=\"Delete note|Delete note button label@@transactions.list.note.delete.modal.delete.button\"\n      >\n        Delete note\n      </button>\n\n      <button\n        bbButton\n        color=\"link\"\n        class=\"bb-button-bar__button\"\n        data-role=\"delete-note-modal-cancel-button\"\n        (click)=\"hostRef.closeModal()\"\n        i18n=\"Cancel|Cancel button label@@transactions.list.note.confirmation.modal.cancel.button\"\n      >\n        Cancel\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #tipContent>\n  <div class=\"bb-text-align-left\">\n    <span i18n=\"Description inside a tooltip@@transactions.list.details.check-img.tooltip.description\">\n      Some images may not be available online if:\n    </span>\n    <ul>\n      <li i18n=\"Description scheduled maintenance@transactions.list.details.check-img.tooltip.description.point1\">\n        There is a scheduled maintenance in the Check Image Service.\n      </li>\n      <li i18n=\"Check deposited earlier@transactions.list.details.check-img.tooltip.description.point2\">\n        The check has been deposited earlier than 12 months ago.\n      </li>\n      <li i18n=\"Check deposited after 48 hours@transactions.list.details.check-img.tooltip.description.point3\">\n        The checks have been received or deposited within the past 48 hours.\n      </li>\n    </ul>\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i1.TransactionsDisputeBannerComponent; }), selector: "bb-dispute-banner", inputs: ["transaction"] }, { type: i0.forwardRef(function () { return i3.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1.TransactionsInquiryDisputeComponent; }), selector: "bb-transactions-inquiry-dispute", inputs: ["message", "enableDispute", "state", "inquireAndDisputeTopics"], outputs: ["submitReport", "cancelReport", "messageChange", "fileChange", "fileRemoved"] }, { type: i0.forwardRef(function () { return i4.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i1.TransactionCheckImageComponent; }), selector: "bb-transaction-check-image", inputs: ["transaction", "checkImagesList", "transactionDetailsLoadingStatus"] }, { type: i0.forwardRef(function () { return i1.TransactionGeoLocationMapComponent; }), selector: "bb-transaction-geo-location-map", inputs: ["transaction", "loadingStatus"] }, { type: i0.forwardRef(function () { return i5.TransactionNotesComponent; }), selector: "bb-transaction-notes", inputs: ["transaction", "isEditingNotes", "isSavingNotes"], outputs: ["isEditingNotesChange", "changeNotes", "deleteNote"] }, { type: i0.forwardRef(function () { return i6.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsListItemDetailsCustomizableDirective; }), selector: "[bbTransactionsListItemDetailsCustomizable]" }, { type: i0.forwardRef(function () { return i8.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0.forwardRef(function () { return i10.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return TransactionsListConfirmationModalCustomizableDirective; }), selector: "[bbTransactionsListConfirmationModalCustomizable]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-details',
                    templateUrl: 'transaction-details.component.html',
                    providers: [TransactionsInquireAndDisputeUIService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionUpdateService }, { type: i1.MessagesService }, { type: i1.TransactionsInquireAndDisputeUIService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { transaction: [{
                type: Input
            }], showAccountNumber: [{
                type: Input
            }], isEditingNotes: [{
                type: Input
            }], checkImagesList: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], isPending: [{
                type: Input
            }], showInquiryAndDispute: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], isEditingNotesChange: [{
                type: Output
            }], showInquiryAndDisputeChange: [{
                type: Output
            }], onNotesUpdateSuccess: [{
                type: Output
            }], onNotesUpdateError: [{
                type: Output
            }] } });
export class TransactionsListItemDetailsCustomizableDirective extends BbTemplate {
}
TransactionsListItemDetailsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemDetailsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListItemDetailsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemDetailsCustomizableDirective, selector: "[bbTransactionsListItemDetailsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListItemDetailsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListItemDetailsCustomizable]',
                }]
        }] });
export class TransactionsListConfirmationModalCustomizableDirective extends BbTemplate {
}
TransactionsListConfirmationModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListConfirmationModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsListConfirmationModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListConfirmationModalCustomizableDirective, selector: "[bbTransactionsListConfirmationModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListConfirmationModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsListConfirmationModalCustomizable]',
                }]
        }] });
//# sourceMappingURL=transaction-details.component.js.map