import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { BillingStatusEnum, } from '@backbase/transactions-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/transactions-common-ang";
import * as i4 from "@backbase/ui-ang/amount";
import * as i5 from "./transaction-detail-category.component";
import * as i6 from "@backbase/ui-ang/badge";
import * as i7 from "@backbase/ui-ang/alert";
import * as i8 from "./transaction-details.component";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/tooltip-directive";
export class TransactionDetailsModalComponent {
    constructor() {
        this.isDetailsOpen = false;
        this.isEditingNotes = false;
        this.inquireAndDisputeTopics = {
            inquire: '',
            dispute: '',
        };
        this.detailsOpen = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        this.showInquiryAndDispute = false;
        this.alertOptions = {
            displayAlert: false,
            displayStatus: '',
        };
    }
    onAlertDismiss() {
        this.alertOptions = {
            displayAlert: false,
            displayStatus: '',
        };
    }
    closeTransactionsCategory(categoryChangeStatus) {
        if (categoryChangeStatus) {
            this.alertOptions = {
                displayAlert: true,
                displayStatus: categoryChangeStatus,
            };
        }
        else {
            this.onAlertDismiss();
        }
    }
    closeDetails() {
        this.showInquiryAndDispute = false;
        this.close.emit();
    }
    get isPending() {
        let isPending = false;
        if (this.transaction && this.transaction.billingStatus) {
            const billingStatus = this.transaction.billingStatus.toUpperCase();
            isPending = billingStatus === BillingStatusEnum.pending || billingStatus === BillingStatusEnum.unbilled;
        }
        return isPending;
    }
}
TransactionDetailsModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionDetailsModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailsModalComponent, selector: "bb-transaction-details-modal", inputs: { isDetailsOpen: "isDetailsOpen", transaction: "transaction", showBillingStatus: "showBillingStatus", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen", close: "close" }, ngImport: i0, template: "<bb-modal-ui\n  [isOpen]=\"isDetailsOpen\"\n  [modalOptions]=\"{\n    centered: true\n  }\"\n  (cancel)=\"closeDetails()\"\n>\n  <div role=\"dialog\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <button\n          type=\"button\"\n          class=\"close bb-transaction-list-item-detail-header__close-button\"\n          aria-label=\"Close dialog\"\n          i18n-aria-label=\"Close dialog button@@transactions.list.dialog.close.button\"\n          (click)=\"closeDetails()\"\n        >\n          <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n        </button>\n      </ng-template>\n    </bb-modal-header-ui>\n    <!-- Details -->\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <div class=\"bb-text-align-center\">\n          <!-- Category icon-->\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-stack bb-stack--center\">\n              <bb-transaction-category-icon\n                [transaction]=\"transaction\"\n                backgroundType=\"circle\"\n                size=\"large\"\n              ></bb-transaction-category-icon>\n            </div>\n          </div>\n          <!-- Counter party, description -->\n          <div class=\"bb-block bb-block--md\">\n            <strong>\n              {{ transaction?.merchant ? transaction?.merchant?.name : transaction?.counterPartyName }}\n            </strong>\n          </div>\n          <!-- Amount -->\n          <div class=\"bb-heading-2 bb-block bb-block--md\">\n            <bb-amount-ui\n              data-role=\"list-details-amount\"\n              [showPlusSign]=\"true\"\n              [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n              [amount]=\"transaction?.transactionAmountCurrency?.amount || 0\"\n            ></bb-amount-ui>\n            <ng-container *ngIf=\"transaction?.currencyExchangeAvailability\">\n              <bb-icon-ui\n                class=\"bb-transaction-list-item-detail-header__exchange-icon\"\n                role=\"tooltip\"\n                name=\"exchange\"\n                size=\"md\"\n                [bbTooltip]=\"tipContent\"\n                triggers=\"hover click\"\n                placement=\"right\"\n                bbAccessibilityKeyboard\n              ></bb-icon-ui>\n              <span\n                class=\"sr-only\"\n                i18n=\"An exchange rate has been applied to the current transaction@@transactions.details.exchangeRate\"\n                >An exchange rate has been applied</span\n              >\n            </ng-container>\n          </div>\n          <!-- Date -->\n          <div class=\"bb-block bb-block--md\" *ngIf=\"transaction?.bookingDate\">\n            <div class=\"break-word text-small\" data-role=\"list-details-booking-date\">\n              {{ transaction?.bookingDate | date: 'longDate' }}\n            </div>\n          </div>\n          <!-- Category name -->\n          <div class=\"bb-block bb-block--lg\">\n            <bb-transaction-detail-category\n              (categoryChange)=\"closeTransactionsCategory($event)\"\n              [displayChangeCategory]=\"showChangeCategory\"\n              [transaction]=\"transaction\"\n            >\n            </bb-transaction-detail-category>\n          </div>\n          <!-- Billing status -->\n          <div\n            class=\"bb-block bb-block--md\"\n            *ngIf=\"\n              !showBillingStatus &&\n              (transaction?.billingStatus === 'UNBILLED' || transaction?.billingStatus === 'PENDING')\n            \"\n          >\n            <bb-badge-ui\n              text=\"{{ transaction?.billingStatus }}\"\n              color=\"warning\"\n              [abbr]=\"false\"\n              [circle]=\"false\"\n            ></bb-badge-ui>\n          </div>\n          <div class=\"bb-block bb-block--md bb-text-align-left\">\n            <ng-container *ngIf=\"alertOptions.displayAlert\" [ngSwitch]=\"alertOptions.displayStatus\">\n              <bb-alert-ui\n                *ngSwitchCase=\"'error'\"\n                title=\"Transaction category was not changed\"\n                i18n-title=\"\n                  Update failed notification|Message for a notification displayed when transaction category update\n                  request has failed@@transaction.notification.error.update\"\n                [dismissible]=\"true\"\n                (close)=\"onAlertDismiss()\"\n              ></bb-alert-ui>\n\n              <bb-alert-ui\n                *ngSwitchCase=\"'success'\"\n                modifier=\"success\"\n                title=\"Transaction category changed successfully\"\n                i18n-title=\"\n                  Update notification|Message for a notification displayed when transaction category update request has\n                  been processed@@transaction.notification.success.update\"\n                [dismissible]=\"true\"\n                (close)=\"onAlertDismiss()\"\n              ></bb-alert-ui>\n            </ng-container>\n          </div>\n        </div>\n\n        <bb-transaction-details\n          *ngIf=\"isDetailsOpen\"\n          [transaction]=\"transaction\"\n          [(isEditingNotes)]=\"isEditingNotes\"\n          [(showInquiryAndDispute)]=\"showInquiryAndDispute\"\n          [checkImagesList]=\"checkImagesList\"\n          [transactionDetailsLoadingStatus]=\"transactionDetailsLoadingStatus\"\n          [inquireAndDisputeTopics]=\"inquireAndDisputeTopics\"\n          [isPending]=\"isPending\"\n        ></bb-transaction-details>\n      </ng-template>\n    </bb-modal-body-ui>\n  </div>\n</bb-modal-ui>\n<ng-template #tipContent>\n  <div class=\"bb-text-align-left\">\n    <span\n      i18n=\"\n        Description inside a tooltip describing an exchange rate has ocurred@@transactions.details.exchangeRate.tooltip\"\n    >\n      An exchange rate has been applied\n    </span>\n  </div>\n</ng-template>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3.TransactionCategoryIconComponent, selector: "bb-transaction-category-icon", inputs: ["transaction", "circle", "size"] }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i5.TransactionDetailCategoryComponent, selector: "bb-transaction-detail-category", inputs: ["transaction", "displayChangeCategory"], outputs: ["categoryChange"] }, { type: i6.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i8.TransactionDetailsComponent, selector: "bb-transaction-details", inputs: ["transaction", "showAccountNumber", "isEditingNotes", "checkImagesList", "transactionDetailsLoadingStatus", "isPending", "showInquiryAndDispute", "inquireAndDisputeTopics"], outputs: ["isEditingNotesChange", "showInquiryAndDisputeChange", "onNotesUpdateSuccess", "onNotesUpdateError"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]" }, { type: i10.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i9.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "date": i9.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-details-modal',
                    templateUrl: 'transaction-details-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isDetailsOpen: [{
                type: Input
            }], transaction: [{
                type: Input
            }], showBillingStatus: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], checkImagesList: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }], inquireAndDisputeTopics: [{
                type: Input
            }], detailsOpen: [{
                type: Output
            }], close: [{
                type: Output
            }] } });
//# sourceMappingURL=transaction-details-modal.component.js.map