import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/ui-ang/load-button";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/transactions-common-ang";
import * as i5 from "@backbase/ui-ang/button";
import * as i6 from "@angular/forms";
import * as i7 from "@backbase/ui-ang/focus";
export class TransactionNotesComponent {
    constructor() {
        /**
         * Whether the notes editing form is shown or not.
         */
        this.isEditingNotes = false;
        /**
         * Whether the notes editing form is saving or not.
         */
        this.isSavingNotes = false;
        /**
         * EventEmitter for triggering an isEditingNotesChange event.
         */
        this.isEditingNotesChange = new EventEmitter();
        /**
         * EventEmitter for triggering a change notes event.
         */
        this.changeNotes = new EventEmitter();
        /**
         * EventEmitter for triggering a deleteNote event.
         */
        this.deleteNote = new EventEmitter();
        this.transactionNotesForm = new FormGroup({
            notes: new FormControl(),
        });
    }
    toggleEdit(display) {
        var _a, _b;
        const isEditingNotes = typeof display === 'boolean' ? display : !this.isEditingNotes;
        if (isEditingNotes) {
            (_a = this.transactionNotesForm.get('notes')) === null || _a === void 0 ? void 0 : _a.setValue((_b = this.transaction) === null || _b === void 0 ? void 0 : _b.notes);
        }
        this.isEditingNotesChange.emit(isEditingNotes);
    }
    onSave(notesParams) {
        this.changeNotes.emit(notesParams.notes);
    }
    triggerDeleteNote(notesParams) {
        this.deleteNote.emit(notesParams.notes);
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        this.transactionNotesForm.setValue({
            notes: this.transaction.notes || '',
        });
    }
}
TransactionNotesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionNotesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionNotesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionNotesComponent, selector: "bb-transaction-notes", inputs: { transaction: "transaction", isEditingNotes: "isEditingNotes", isSavingNotes: "isSavingNotes" }, outputs: { isEditingNotesChange: "isEditingNotesChange", changeNotes: "changeNotes", deleteNote: "deleteNote" }, ngImport: i0, template: "<div class=\"bb-stack\" [ngClass]=\"{ 'bb-block bb-block--xs': !!transaction?.notes }\">\n  <div class=\"bb-stack__item\">\n    <label\n      class=\"bb-block bb-block--sm\"\n      data-role=\"transaction-note-label\"\n      bbDynamicId\n      #noteLabel\n      i18n=\"Note of the selected transaction@@transactions.details.label.note\"\n    >\n      Note\n    </label>\n  </div>\n  <div *ngIf=\"!isEditingNotes\" class=\"bb-stack__item--push-right\">\n    <ng-container *ngIf=\"!!transaction?.notes; then editIconSet\"></ng-container>\n  </div>\n</div>\n<ng-container *ngIf=\"isEditingNotes; then editNotes; else displayNotes\"></ng-container>\n\n<ng-template #editIconSet>\n  <div class=\"bb-stack bb-stack--density-sm bb-transaction-notes-editIconSet\">\n    <button\n      bbButton\n      class=\"bb-transaction-notes-editIconSet-button\"\n      data-role=\"transaction-note-edit-button\"\n      color=\"link-dark\"\n      buttonSize=\"sm\"\n      [circle]=\"true\"\n      aria-label=\"Edit note\"\n      i18n-aria-label=\"Edit note button@@transactions.list.edit.button.ariaLabel\"\n      (click)=\"toggleEdit()\"\n    >\n      <bb-icon-ui name=\"edit\"></bb-icon-ui>\n    </button>\n    <button\n      bbButton\n      color=\"link-dark\"\n      class=\"bb-transaction-notes-editIconSet-button\"\n      data-role=\"transaction-note-delete-button\"\n      buttonSize=\"sm\"\n      [circle]=\"true\"\n      aria-label=\"Delete note\"\n      i18n-aria-label=\"Delete note button@@transactions.list.notes.delete.button.ariaLabel\"\n      (click)=\"triggerDeleteNote(transactionNotesForm.value)\"\n    >\n      <bb-icon-ui name=\"delete\"></bb-icon-ui>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #editNotes>\n  <form [formGroup]=\"transactionNotesForm\" (ngSubmit)=\"onSave(transactionNotesForm.value)\">\n    <div class=\"form-group\">\n      <textarea\n        class=\"form-control\"\n        name=\"notes\"\n        data-role=\"transaction-note-textarea\"\n        [attr.aria-labelledby]=\"noteLabel?.id\"\n        placeholder=\"Enter note\"\n        i18n-placeholder=\"Write a note for this transaction@@transactions.notes.input.placeholder\"\n        formControlName=\"notes\"\n        maxlength=\"4000\"\n        bbFocus\n      ></textarea>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        color=\"primary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"transaction-note-save-button\"\n        [isLoading]=\"isSavingNotes\"\n        (click)=\"!isSavingNotes && onSave(transactionNotesForm.value)\"\n        i18n=\"Save button@@transactions.list.notes.button.save\"\n      >\n        Save\n      </bb-load-button-ui>\n      <button\n        *ngIf=\"!isSavingNotes\"\n        bbButton\n        type=\"button\"\n        color=\"secondary\"\n        data-role=\"transaction-note-cancel-button\"\n        class=\"bb-button-bar__button\"\n        (click)=\"toggleEdit(false)\"\n        i18n=\"Cancel button@@transactions.notes.button.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #displayNotes>\n  <span data-role=\"transaction-note\">{{ transaction?.notes }}</span>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.DynamicIdDirective, selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i6.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i7.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionNotesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-notes',
                    templateUrl: './transaction-notes.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { transaction: [{
                type: Input
            }], isEditingNotes: [{
                type: Input
            }], isSavingNotes: [{
                type: Input
            }], isEditingNotesChange: [{
                type: Output
            }], changeNotes: [{
                type: Output
            }], deleteNote: [{
                type: Output
            }] } });
//# sourceMappingURL=transaction-notes.component.js.map