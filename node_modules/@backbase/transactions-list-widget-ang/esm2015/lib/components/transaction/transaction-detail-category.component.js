import { Component, Input, Directive, Output, EventEmitter } from '@angular/core';
import { TransactionsIconCategoriesFactoryService, TransactionIconType, } from '@backbase/transactions-common-ang';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/transactions-common-ang";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/modal";
import * as i4 from "../transactions-categories/transactions-categories.component";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class TransactionDetailCategoryComponent {
    constructor(transactionsIconCategoriesFactory) {
        this.transactionsIconCategoriesFactory = transactionsIconCategoriesFactory;
        this.categoryChange = new EventEmitter();
        this.hostRef = this;
        this.isTransactionsCategoryOpen = false;
        this.transactionIconType = TransactionIconType;
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        this.transactionCategoryIcon = this.transactionsIconCategoriesFactory.create(this.transaction);
    }
    get categoryTitle() {
        if (this.transactionCategoryIcon) {
            return this.transactionCategoryIcon.title;
        }
        return '';
    }
    openTransactionsCategory() {
        this.isTransactionsCategoryOpen = true;
    }
    closeTransactionsCategory(categoryChangeStatus) {
        this.categoryChange.emit(categoryChangeStatus);
        this.isTransactionsCategoryOpen = false;
    }
}
TransactionDetailCategoryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailCategoryComponent, deps: [{ token: i1.TransactionsIconCategoriesFactoryService }], target: i0.ɵɵFactoryTarget.Component });
TransactionDetailCategoryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailCategoryComponent, selector: "bb-transaction-detail-category", inputs: { transaction: "transaction", displayChangeCategory: "displayChangeCategory" }, outputs: { categoryChange: "categoryChange" }, ngImport: i0, template: "<ng-container bbTransactionDetailCategoryCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionDetailCategoryCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.displayChangeCategory && !hostRef.transaction.isPending\">\n    <ng-container *ngIf=\"hostRef.transactionCategoryIcon.type === transactionIconType.category; else fallbackCategory\">\n      <button\n        bbButton\n        class=\"bb-transaction-list-item-detail-header__category-badge\"\n        (click)=\"hostRef.openTransactionsCategory()\"\n        buttonSize=\"sm\"\n      >\n        <span data-role=\"list-details-category\">{{ hostRef.categoryTitle | bbCapitalizePipe }}</span>\n        <span>\n          <bb-icon-ui\n            class=\"bb-transactions-list-pending-header__tooltip\"\n            name=\"edit\"\n            size=\"sm\"\n            color=\"muted\"\n          ></bb-icon-ui>\n          <span\n            class=\"sr-only\"\n            i18n=\"Change transaction category|Change the category of a transaction@@transactions.details.changeCategory\"\n          >\n            Change category\n          </span>\n        </span>\n      </button>\n    </ng-container>\n    <ng-template #fallbackCategory>\n      <div\n        class=\"\n          bb-transaction-list-item-detail-header__category-badge-fallback\n          bb-transaction-list-item-detail-header__category-badge\n        \"\n      >\n        <span data-role=\"list-details-category\">{{ hostRef.categoryTitle | titlecase }}</span>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isTransactionsCategoryOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.closeTransactionsCategory()\"\n  >\n    <bb-transactions-categories\n      [transaction]=\"hostRef.transaction\"\n      (categoryChange)=\"hostRef.closeTransactionsCategory($event)\"\n    ></bb-transactions-categories>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i3.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i4.TransactionsCategoriesComponent; }), selector: "bb-transactions-categories", inputs: ["transaction"], outputs: ["categoryChange"] }], directives: [{ type: i0.forwardRef(function () { return TransactionDetailCategoryCustomizableDirective; }), selector: "[bbTransactionDetailCategoryCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "bbCapitalizePipe": i0.forwardRef(function () { return i1.CapitalizePipe; }), "titlecase": i0.forwardRef(function () { return i5.TitleCasePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailCategoryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-detail-category',
                    templateUrl: 'transaction-detail-category.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionsIconCategoriesFactoryService }]; }, propDecorators: { transaction: [{
                type: Input
            }], categoryChange: [{
                type: Output
            }], displayChangeCategory: [{
                type: Input
            }] } });
export class TransactionDetailCategoryCustomizableDirective extends BbTemplate {
}
TransactionDetailCategoryCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailCategoryCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionDetailCategoryCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailCategoryCustomizableDirective, selector: "[bbTransactionDetailCategoryCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailCategoryCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionDetailCategoryCustomizable]',
                }]
        }] });
//# sourceMappingURL=transaction-detail-category.component.js.map