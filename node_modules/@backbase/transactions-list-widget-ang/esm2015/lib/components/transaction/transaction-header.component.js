import { Component, Input } from '@angular/core';
import { TransactionsIconCategoriesFactoryService, } from '@backbase/transactions-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/transactions-common-ang";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/amount";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/tooltip-directive";
export class TransactionHeaderComponent {
    constructor(transactionsIconCategoriesFactory) {
        this.transactionsIconCategoriesFactory = transactionsIconCategoriesFactory;
        /**
         * Weather to show pending transactions on top or not.
         */
        this.showBillingStatus = false;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    /**
     * Subtitle to display - either the category of the transaction, or the type if the category is
     * not available.
     */
    get subtitle() {
        if (typeof this.transaction === 'undefined') {
            return '';
        }
        if (this.transactionCategoryIcon) {
            return this.transactionCategoryIcon.title;
        }
        return '';
    }
    /**
     * Title to display - either the counter party name of the transaction, or the description if the
     * name is not available.
     */
    get title() {
        if (!this.transaction) {
            return '';
        }
        if (this.transaction.merchant && this.transaction.merchant.name) {
            return this.transaction.merchant.name;
        }
        else {
            return this.transaction.counterPartyName || this.transaction.description || '';
        }
    }
    ngOnInit() {
        if (typeof this.transaction === 'undefined') {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        this.transactionCategoryIcon = this.transactionsIconCategoriesFactory.create(this.transaction);
    }
    showCategory() {
        if (this.transaction) {
            return this.transaction.isPending || !!this.ownCategory;
        }
        return false;
    }
    get ownCategory() {
        return this.transaction && this.transaction.category;
    }
    // TODO change this type from model to be number (jira -> https://backbase.atlassian.net/browse/TRANS-4722)
    convertToNumber(value) {
        return Number(value);
    }
}
TransactionHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionHeaderComponent, deps: [{ token: i1.TransactionsIconCategoriesFactoryService }], target: i0.ɵɵFactoryTarget.Component });
TransactionHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionHeaderComponent, selector: "bb-transaction-header", inputs: { transaction: "transaction", showBillingStatus: "showBillingStatus" }, ngImport: i0, template: "<div class=\"bb-transaction-header bb-stack w-auto row\">\n  <div class=\"bb-stack__item col-6\">\n    <div class=\"bb-stack\">\n      <!-- Category -->\n      <div class=\"bb-transaction-item-category bb-stack__item\">\n        <ng-container\n          *ngIf=\"\n            transaction?.billingStatus === 'UNBILLED' || transaction?.billingStatus === 'PENDING';\n            else transactionIcon\n          \"\n        >\n          <bb-icon-ui\n            name=\"watch-later\"\n            class=\"bb-transaction-category bb-transaction-category--pending\"\n            color=\"inactive\"\n            backgroundType=\"square\"\n          ></bb-icon-ui>\n        </ng-container>\n        <ng-template #transactionIcon>\n          <bb-transaction-category-icon\n            [transaction]=\"transaction\"\n            backgroundType=\"circle\"\n          ></bb-transaction-category-icon>\n        </ng-template>\n      </div>\n\n      <!-- Counter party, description -->\n      <div class=\"bb-transaction-item-description bb-stack__item\">\n        <div class=\"bb-transaction-item-description__title\">\n          {{ title | titlecase }}\n        </div>\n        <div class=\"bb-transaction-item-description__subtitle\">\n          {{ subtitle | titlecase }}\n        </div>\n        <div class=\"bb-text-disabled\">\n          {{ transaction?.account?.IBAN ? transaction?.account?.IBAN : transaction?.account?.BBAN }}\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-stack__item col-6\">\n    <div class=\"bb-stack bb-transaction-list-header-amount\">\n      <div\n        class=\"bb-stack__item bb-stack__item--push-right bb-text-align-right bb-transaction-list-header-amount__wrapper\"\n      >\n        <div class=\"bb-stack bb-stack--wrap\">\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <div class=\"bb-stack bb-stack--wrap\">\n              <!-- Dispute status -->\n              <div\n                class=\"bb-stack__item bb-stack__item--push-right-lg-down bb-transaction-list-header-dispute-status-tag\"\n              >\n                <bb-dispute-status-tag [status]=\"hostRef.transaction?.disputeStatus\"></bb-dispute-status-tag>\n              </div>\n\n              <!-- Amount -->\n              <div\n                class=\"bb-stack__item bb-stack__item--push-right bb-transaction-list-header-amount__value\"\n                [ngClass]=\"{\n                  'bb-transaction-list-header-amount__value--credit':\n                    convertToNumber(transaction?.transactionAmountCurrency?.amount || '0') > 0\n                }\"\n              >\n                <bb-amount-ui\n                  [showPlusSign]=\"true\"\n                  [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n                  [amount]=\"transaction?.transactionAmountCurrency?.amount || 0\"\n                ></bb-amount-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"hostRef.transaction?.runningBalance\" class=\"bb-text-support text-small\">\n          <span class=\"sr-only\" i18n=\"Running Balance as of Transaction Date@@transactions.list.runningBalance\"\n            >Running balance</span\n          >\n          <bb-amount-ui\n            bbTooltip=\"Running balance\"\n            placement=\"left\"\n            triggers=\"hover\"\n            [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n            [amount]=\"transaction?.runningBalance || 0\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1.TransactionCategoryIconComponent, selector: "bb-transaction-category-icon", inputs: ["transaction", "circle", "size"] }, { type: i1.TransactionsDisputeStatusTagComponent, selector: "bb-dispute-status-tag", inputs: ["status"] }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }], pipes: { "titlecase": i4.TitleCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-header',
                    templateUrl: './transaction-header.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionsIconCategoriesFactoryService }]; }, propDecorators: { transaction: [{
                type: Input
            }], showBillingStatus: [{
                type: Input
            }] } });
//# sourceMappingURL=transaction-header.component.js.map