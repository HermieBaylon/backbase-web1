import { ChangeDetectionStrategy, Inject, Optional } from '@angular/core';
import { Component, ChangeDetectorRef } from '@angular/core';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import { TransactionsService, WidgetPropertiesService, BaseTransactionsContainer, PendingTransactionsService, TransactionDetailsService, showDetailsConfigToken, AvailableFiltersConfigService, PaginationType, } from '@backbase/transactions-common-ang';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/transactions-common-ang";
import * as i2 from "@backbase/ui-ang/notification";
import * as i3 from "@backbase/ui-ang/alert";
import * as i4 from "@backbase/ui-ang/empty-state";
import * as i5 from "./transactions-controls/transactions-controls.component";
import * as i6 from "./transactions-list/transactions-list-pending-transactions.component";
import * as i7 from "./transactions-list/transactions-list.component";
import * as i8 from "@angular/common";
import * as i9 from "@angular/router";
import * as i10 from "@backbase/ui-ang/button";
export class TransactionsContainerComponent extends BaseTransactionsContainer {
    constructor(model, widgetProperties, cd, eventBusService, notificationService, pendingTransactionsService, transactionDetailsService, availableFiltersConfigService, 
    // eslint-disable-next-line
    showDetailsConfig) {
        super(model, widgetProperties, cd, eventBusService, notificationService, pendingTransactionsService, transactionDetailsService, availableFiltersConfigService, showDetailsConfig);
        this.model = model;
        this.widgetProperties = widgetProperties;
        this.cd = cd;
        this.eventBusService = eventBusService;
        this.notificationService = notificationService;
        this.pendingTransactionsService = pendingTransactionsService;
        this.transactionDetailsService = transactionDetailsService;
        this.availableFiltersConfigService = availableFiltersConfigService;
        this.showDetailsConfig = showDetailsConfig;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        this.PaginationType = PaginationType;
        if (this.showDetailsConfig === null || this.showDetailsConfig === undefined) {
            this.showDetailsConfig = true;
        }
    }
}
TransactionsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsContainerComponent, deps: [{ token: i1.TransactionsService }, { token: i1.WidgetPropertiesService }, { token: i0.ChangeDetectorRef }, { token: PUBSUB }, { token: i2.NotificationService }, { token: i1.PendingTransactionsService }, { token: i1.TransactionDetailsService }, { token: i1.AvailableFiltersConfigService }, { token: showDetailsConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TransactionsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsContainerComponent, selector: "bb-transactions-container", providers: [TransactionsService, PendingTransactionsService, TransactionDetailsService], usesInheritance: true, ngImport: i0, template: "<ng-container\n  *ngIf=\"\n    (hostRef.paginationType | async)! === PaginationType.INFINITE_SCROLL &&\n    (selectedAccount | async)! as selectedAccount\n  \"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"bbPaginatedTransactionsContainer\"\n    [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n  ></ng-container>\n  <ng-container *ngIf=\"hostRef.errors\">\n    <div class=\"mb-4\">\n      <bb-alert-ui\n        *ngFor=\"let error of hostRef.errors\"\n        title=\"Couldn't load more transactions\"\n        modifier=\"error\"\n        attr.data-role=\"alert-error\"\n      >\n        <p>{{ error?.message }}</p>\n        <a [routerLink]=\"\" class=\"alert-link\" (click)=\"hostRef.retry()\">click here</a>\n      </bb-alert-ui>\n    </div>\n  </ng-container>\n</ng-container>\n<ng-container\n  *ngIf=\"\n    (hostRef.paginationType | async) !== PaginationType.INFINITE_SCROLL && (selectedAccount | async) as selectedAccount\n  \"\n>\n  <ng-container *ngIf=\"!errors; else errorState\">\n    <ng-container\n      [ngTemplateOutlet]=\"bbPaginatedTransactionsContainer\"\n      [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #notificationErrorUpdateHeader>\n    <ng-container [ngSwitch]=\"hostRef.storedExportType?.reason\">\n      <ng-container *ngSwitchCase=\"'MIXED_PRODUCT_KINDS'\">\n        {{ hostRef.storedExportType?.name }}\n        <ng-container\n          i18n=\"\n            Invalid export type header for mixed products kinds|Notification header due to mixed product\n            kinds@@transaction.list.toolTip.error.header.MixedProductKinds\"\n        >\n          export not supported\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"'UNSUPPORTED_PRODUCT_KIND'\">\n        {{ hostRef.storedExportType?.name }}\n        <ng-container\n          i18n=\"\n            Invalid export type header for unsupported product kind|Notification header due to unsupported product\n            kind@@transaction.list.toolTip.error.header.UnsupportedProductKind\"\n        >\n          export not supported\n        </ng-container>\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'TOO_MANY_ITEMS'\"\n        i18n=\"\n          Invalid export type header for too many items|Notification header due to too many\n          transactions@@transaction.list.toolTip.error.header.TooManyItems\"\n      >\n        Maximum export threshold exceeded\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'MULTIPLE_PRODUCTS'\"\n        i18n=\"\n          Invalid export type header for Multiple Products |Notification header due to Multiple\n          Products@@transaction.list.toolTip.error.header.MultipleProducts\"\n      >\n        Multiple products are selected\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #notificationErrorUpdateMessage>\n    <ng-container [ngSwitch]=\"hostRef.storedExportType?.reason\">\n      <ng-container\n        *ngSwitchCase=\"'MIXED_PRODUCT_KINDS'\"\n        i18n=\"\n          Invalid export type mixed products kinds|Notification message due to mixed product\n          kinds@@transaction.list.toolTip.error.message.MixedProductKinds\"\n      >\n        This export is not supported for your selection\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'UNSUPPORTED_PRODUCT_KIND'\"\n        i18n=\"\n          Invalid export type unsupported product kind|Notification message due to unsupported product\n          kind@@transaction.list.toolTip.error.message.UnsupportedProductKind\"\n      >\n        This export is not supported for your selection\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'TOO_MANY_ITEMS'\"\n        i18n=\"\n          Invalid export type too many items|Notification message due to too many\n          transactions@@transaction.list.toolTip.error.message.TooManyItems\"\n      >\n        Please provide different filter\\search criteria\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'MULTIPLE_PRODUCTS'\"\n        i18n=\"\n          Invalid export type Multiple Products|Notification message due to Multiple\n          Products@@transaction.list.toolTip.error.message.MultipleProducts\"\n      >\n        Please select only one product. For example, only one current account\n      </ng-container>\n    </ng-container>\n  </ng-template>\n</ng-container>\n\n<ng-container\n  *ngIf=\"!(selectedAccount | async) as selectedAccount\"\n  bbTransactionsNoAccountSelectedStateCustomizable\n  [bbHostRef]=\"hostRef\"\n>\n</ng-container>\n\n<ng-template #errorState>\n  <ng-container bbTransactionsErrorStateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbTransactionsNoAccountSelectedStateCustomizable let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"No Product selected|Empty Product selector@@transactions.state.noProductSelected.title\"\n        title=\"No Product Selected\"\n        i18n-subtitle=\"Product selector@@transactions.state.noProductSelected.subtitle\"\n        subtitle=\"Please select a product first.\"\n        iconSize=\"xl\"\n        iconModifier=\"list\"\n      ></bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTransactionsErrorStateCustomizable let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-body col-md-4 offset-md-4 bb-text-align-center\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-empty-state-ui title=\"\"></bb-empty-state-ui>\n        <p\n          *ngFor=\"let error of hostRef.errors\"\n          data-role=\"custom-error-state-message\"\n          class=\"bb-empty-state__message bb-empty-state\"\n        >\n          {{ error?.message }}\n        </p>\n      </div>\n      <div>\n        <button i18n=\"Retry button@transactions.state.error.retry-button\" bbButton (click)=\"hostRef.retry()\">\n          Retry\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template\n  #notificationServerErrorHeader\n  i18n=\"Internal error header|Internal error header@@transaction.list.error.header.internal\"\n>\n  Transactions export is currently not available\n</ng-template>\n\n<ng-template\n  #notificationServerErrorMessage\n  i18n=\"Internal error message|Internal error message@@transaction.list.error.message.internal\"\n>\n  Please try again later\n</ng-template>\n\n<ng-template #bbPaginatedTransactionsContainer let-hostRef>\n  <div class=\"card card-lg bb-transactions-list-container\">\n    <bb-transactions-controls\n      *ngIf=\"(hostRef.showControls | async)!\"\n      [isFilterApplied]=\"(hostRef.isFilterApplied | async)!\"\n      [hideBillingStatus]=\"(hostRef.showPendingTransactionsOnTop | async)!\"\n      [exportConfig]=\"(hostRef.exportConfig | async)!\"\n      [availableFilters]=\"(hostRef.availableFilters | async) || []\"\n      (search)=\"hostRef.onSearch($event)\"\n      (filter)=\"hostRef.onFilter($event)\"\n      (print)=\"hostRef.onPrint()\"\n      (export)=\"hostRef.onExport($event)\"\n    ></bb-transactions-controls>\n    <bb-transactions-number-of-results-found\n      [numberOfResultsFound]=\"(hostRef.numberOfResultsFound | async)!\"\n      [loadingState]=\"(hostRef.loadingState | async)!\"\n      [isFilterApplied]=\"(hostRef.isFilterApplied | async)!\"\n      [isSearchApplied]=\"(hostRef.isSearchApplied | async)!\"\n    ></bb-transactions-number-of-results-found>\n    <div class=\"card-body\">\n      <bb-pending-transactions-list\n        *ngIf=\"(hostRef.showPendingTransactionsOnTop | async)!\"\n        [transactionsList]=\"(hostRef.pendingTransactionsList | async)!\"\n        [currentPage]=\"(hostRef.currentPage | async)!\"\n        [pageSize]=\"(hostRef.pageSize | async)!\"\n        [paginationType]=\"(hostRef.paginationType | async)!\"\n        [maxNavPages]=\"(hostRef.maxNavPages | async)!\"\n        [loadingState]=\"(hostRef.loadingPendingState | async)!\"\n        [showChangeCategory]=\"(hostRef.showChangeCategory | async)!\"\n        [inquireAndDisputeTopics]=\"(hostRef.inquireAndDisputeTopics | async)!\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-pending-transactions-list>\n\n      <bb-transactions-list\n        [transactionsList]=\"(hostRef.transactionsList | async)!\"\n        [checkImagesList]=\"(hostRef.checkImagesList | async)!\"\n        [currentPage]=\"(hostRef.currentPage | async)!\"\n        [pageSize]=\"(hostRef.pageSize | async)!\"\n        [maxNavPages]=\"(hostRef.maxNavPages | async)!\"\n        [loadingState]=\"(hostRef.loadingState | async)!\"\n        [paginationType]=\"(hostRef.paginationType | async)!\"\n        [numberOfResultsFound]=\"(hostRef.numberOfResultsDisplayed | async)!\"\n        [showChangeCategory]=\"(hostRef.showChangeCategory | async)!\"\n        [transactionDetailsLoadingStatus]=\"(hostRef.transactionDetailsLoadingStatus | async)!\"\n        [inquireAndDisputeTopics]=\"(hostRef.inquireAndDisputeTopics | async)!\"\n        (loadMore)=\"hostRef.onLoadMore()\"\n        (pageChange)=\"hostRef.onPageChange($event)\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i3.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i5.TransactionsControlsComponent, selector: "bb-transactions-controls", inputs: ["hideBillingStatus"], outputs: ["print"] }, { type: i1.TransactionsNumberOfResultsFoundComponent, selector: "bb-transactions-number-of-results-found", inputs: ["numberOfResultsFound", "loadingState", "isFilterApplied", "isSearchApplied"] }, { type: i6.TransactionsListPendingTransactionsComponent, selector: "bb-pending-transactions-list", inputs: ["transactionsList", "showPendingOnTop", "currentPage", "pageSize", "paginationType", "loadingState", "maxNavPages", "showChangeCategory", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: i7.TransactionsListComponent, selector: "bb-transactions-list", inputs: ["transactionsList", "currentPage", "pageSize", "loadingState", "maxNavPages", "paginationType", "numberOfResultsFound", "showChangeCategory", "checkImagesList", "inquireAndDisputeTopics", "transactionDetailsLoadingStatus"], outputs: ["loadMore", "pageChange", "detailsOpen"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.TransactionsNoAccountSelectedStateCustomizableDirective, selector: "[bbTransactionsNoAccountSelectedStateCustomizable]" }, { type: i1.TransactionsErrorStateCustomizableDirective, selector: "[bbTransactionsErrorStateCustomizable]" }, { type: i10.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i8.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-container',
                    templateUrl: './transactions-container.component.html',
                    providers: [TransactionsService, PendingTransactionsService, TransactionDetailsService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionsService }, { type: i1.WidgetPropertiesService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: i2.NotificationService }, { type: i1.PendingTransactionsService }, { type: i1.TransactionDetailsService }, { type: i1.AvailableFiltersConfigService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [showDetailsConfigToken]
                }] }]; } });
//# sourceMappingURL=transactions-container.component.js.map