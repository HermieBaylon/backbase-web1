import { FormBuilder } from '@angular/forms';
import { Component, Directive, Output, EventEmitter, Input } from '@angular/core';
import { CategoriesService, TransactionUpdateService, } from '@backbase/transactions-common-ang';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/transactions-common-ang";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class TransactionsCategoriesComponent {
    constructor(fb, categoriesService, transactionUpdateService) {
        this.fb = fb;
        this.categoriesService = categoriesService;
        this.transactionUpdateService = transactionUpdateService;
        this.categoryChange = new EventEmitter();
        this.changeTransactionsCategoryForm = this.fb.group({
            categoryName: [],
        });
        this.hostRef = this;
        this.categoriesList = this.categoriesService.getCategories();
    }
    cancelSaveCategory() {
        this.changeTransactionsCategoryForm.reset({
            categoryName: this.transaction && this.transaction.category,
        });
        this.categoryChange.emit();
    }
    changeCategory() {
        const newCategoryControl = this.changeTransactionsCategoryForm.get('categoryName');
        if (this.transaction && newCategoryControl) {
            this.transactionUpdateService.update(this.transaction, { category: newCategoryControl.value }).subscribe(() => {
                if (this.transaction) {
                    this.transaction.category = newCategoryControl.value;
                    this.categoryChange.emit('success');
                }
                else {
                    this.categoryChange.emit('error');
                }
            }, () => this.categoryChange.emit('error'));
        }
    }
    getCategoryIconClass(transactionCategory) {
        return `${transactionCategory.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-') || 'uncategorized'}`;
    }
    ngOnInit() {
        this.changeTransactionsCategoryForm.reset({
            categoryName: this.transaction && this.transaction.category,
        });
    }
}
TransactionsCategoriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsCategoriesComponent, deps: [{ token: i1.FormBuilder }, { token: i2.CategoriesService }, { token: i2.TransactionUpdateService }], target: i0.ɵɵFactoryTarget.Component });
TransactionsCategoriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsCategoriesComponent, selector: "bb-transactions-categories", inputs: { transaction: "transaction" }, outputs: { categoryChange: "categoryChange" }, ngImport: i0, template: "<ng-container bbTransactionsCategoryCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsCategoryCustomizable let-hostRef>\n  <form [formGroup]=\"hostRef.changeTransactionsCategoryForm\" (ngSubmit)=\"hostRef.changeCategory()\">\n    <div class=\"modal-header\">\n      <div class=\"form-group col-12 col-md-9\">\n        <bb-header-ui\n          headingType=\"h3\"\n          heading=\"Change Category\"\n          i18n-heading=\"Change Category|Change Category in change transactions category form@@transactions.form.name\"\n        ></bb-header-ui>\n      </div>\n      <button\n        type=\"button\"\n        class=\"close\"\n        color=\"muted\"\n        aria-label=\"Close\"\n        i18n-aria-label=\"Close button@@transactions.form.close\"\n        (click)=\"hostRef.cancelSaveCategory()\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    <div class=\"modal-body modal-body-scrollable\">\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item--no-separator\" *ngFor=\"let category of categoriesList | async\">\n          <label class=\"bb-stack\" [for]=\"hostRef.getCategoryIconClass(category.categoryName)\">\n            <bb-icon-ui\n              class=\"bb-stack__item\"\n              name=\"category-{{ hostRef.getCategoryIconClass(category.categoryName) }}\"\n              backgroundType=\"circle\"\n              size=\"sm\"\n            ></bb-icon-ui>\n            <span class=\"font-weight-bold bb-stack__item\">{{ category.categoryName }}</span>\n            <div class=\"bb-stack__item bb-stack__item--fill bb-text-align-right\">\n              <input\n                [id]=\"hostRef.getCategoryIconClass(category.categoryName)\"\n                type=\"radio\"\n                name=\"categoryName\"\n                formControlName=\"categoryName\"\n                [value]=\"category.categoryName\"\n              />\n            </div>\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button\n        bbButton\n        data-role=\"cancel\"\n        color=\"secondary\"\n        (click)=\"hostRef.cancelSaveCategory()\"\n        i18n=\"Cancel|Cancel button label@@transactions.category.modal.cancel.button\"\n      >\n        Cancel\n      </button>\n\n      <button\n        bbButton\n        type=\"submit\"\n        color=\"primary\"\n        [disabled]=\"hostRef.transaction.category === hostRef.changeTransactionsCategoryForm.value.categoryName\"\n        i18n=\"Save|Save button label@@transactions.category.modal.save.button\"\n      >\n        Save\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i4.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return TransactionsCategoriesCustomizableDirective; }), selector: "[bbTransactionsCategoryCustomizable]" }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i5.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i1.RadioControlValueAccessor; }), selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { type: i0.forwardRef(function () { return i1.DefaultValueAccessor; }), selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i6.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i5.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsCategoriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-categories',
                    templateUrl: 'transactions-categories.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.CategoriesService }, { type: i2.TransactionUpdateService }]; }, propDecorators: { transaction: [{
                type: Input
            }], categoryChange: [{
                type: Output
            }] } });
export class TransactionsCategoriesCustomizableDirective extends BbTemplate {
}
TransactionsCategoriesCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsCategoriesCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsCategoriesCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsCategoriesCustomizableDirective, selector: "[bbTransactionsCategoryCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsCategoriesCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsCategoryCustomizable]',
                }]
        }] });
//# sourceMappingURL=transactions-categories.component.js.map