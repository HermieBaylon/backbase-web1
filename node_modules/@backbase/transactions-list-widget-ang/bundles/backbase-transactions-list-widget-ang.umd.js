(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@backbase/foundation-ang/core'), require('@backbase/transactions-common-ang'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/amount'), require('@angular/forms'), require('@backbase/ui-ang/header'), require('@angular/common'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/alert'), require('rxjs'), require('rxjs/operators'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/focus'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/pagination'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/search-box'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/input-number'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/foundation-ang/web-sdk'), require('@backbase/ui-ang/notification'), require('@angular/router'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/ui-ang/textarea')) :
    typeof define === 'function' && define.amd ? define('@backbase/transactions-list-widget-ang', ['exports', '@angular/core', '@backbase/foundation-ang/core', '@backbase/transactions-common-ang', '@backbase/ui-ang/modal', '@backbase/ui-ang/icon', '@backbase/ui-ang/amount', '@angular/forms', '@backbase/ui-ang/header', '@angular/common', '@backbase/ui-ang/button', '@backbase/ui-ang/badge', '@backbase/ui-ang/alert', 'rxjs', 'rxjs/operators', '@backbase/ui-ang/load-button', '@backbase/ui-ang/focus', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/pagination', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/search-box', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/input-number', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/dropdown-menu', '@backbase/foundation-ang/web-sdk', '@backbase/ui-ang/notification', '@angular/router', '@ng-bootstrap/ng-bootstrap', '@backbase/ui-ang/textarea'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["transactions-list-widget-ang"] = {}), global.ng.core, global.i1$1, global.i1, global.i1$2, global.i2, global.i4, global.ng.forms, global.i3, global.ng.common, global.i6$1, global.i6$2, global.i3$1, global.rxjs, global.rxjs.operators, global.i2$1, global.i7, global.i7$1, global.i10, global.i5, global.i7$2, global.i1$3, global.i2$2, global.i3$2, global.i4$1, global.i5$1, global.i4$2, global.webSdk, global.i2$3, global.ng.router, global.ngBootstrap, global.textarea));
})(this, (function (exports, i0, i1$1, i1, i1$2, i2, i4, i6, i3, i8, i6$1, i6$2, i3$1, rxjs, operators, i2$1, i7, i7$1, i10, i5, i7$2, i1$3, i2$2, i3$2, i4$1, i5$1, i4$2, webSdk, i2$3, i1$4, ngBootstrap, textarea) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i7__namespace$2 = /*#__PURE__*/_interopNamespace(i7$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var TRANSACTIONS_DETAILS_SHARE_MODAL = {
        name: 'TRANSACTIONS_DETAILS_SHARE_MODAL',
        description: 'Modal dialog containing transaction details is moved to the list component and reused for different transaction selections',
    };

    var TransactionsCategoriesComponent = /** @class */ (function () {
        function TransactionsCategoriesComponent(fb, categoriesService, transactionUpdateService) {
            this.fb = fb;
            this.categoriesService = categoriesService;
            this.transactionUpdateService = transactionUpdateService;
            this.categoryChange = new i0.EventEmitter();
            this.changeTransactionsCategoryForm = this.fb.group({
                categoryName: [],
            });
            this.hostRef = this;
            this.categoriesList = this.categoriesService.getCategories();
        }
        TransactionsCategoriesComponent.prototype.cancelSaveCategory = function () {
            this.changeTransactionsCategoryForm.reset({
                categoryName: this.transaction && this.transaction.category,
            });
            this.categoryChange.emit();
        };
        TransactionsCategoriesComponent.prototype.changeCategory = function () {
            var _this = this;
            var newCategoryControl = this.changeTransactionsCategoryForm.get('categoryName');
            if (this.transaction && newCategoryControl) {
                this.transactionUpdateService.update(this.transaction, { category: newCategoryControl.value }).subscribe(function () {
                    if (_this.transaction) {
                        _this.transaction.category = newCategoryControl.value;
                        _this.categoryChange.emit('success');
                    }
                    else {
                        _this.categoryChange.emit('error');
                    }
                }, function () { return _this.categoryChange.emit('error'); });
            }
        };
        TransactionsCategoriesComponent.prototype.getCategoryIconClass = function (transactionCategory) {
            return "" + (transactionCategory.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-') || 'uncategorized');
        };
        TransactionsCategoriesComponent.prototype.ngOnInit = function () {
            this.changeTransactionsCategoryForm.reset({
                categoryName: this.transaction && this.transaction.category,
            });
        };
        return TransactionsCategoriesComponent;
    }());
    TransactionsCategoriesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsCategoriesComponent, deps: [{ token: i6__namespace.FormBuilder }, { token: i1__namespace.CategoriesService }, { token: i1__namespace.TransactionUpdateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsCategoriesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsCategoriesComponent, selector: "bb-transactions-categories", inputs: { transaction: "transaction" }, outputs: { categoryChange: "categoryChange" }, ngImport: i0__namespace, template: "<ng-container bbTransactionsCategoryCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsCategoryCustomizable let-hostRef>\n  <form [formGroup]=\"hostRef.changeTransactionsCategoryForm\" (ngSubmit)=\"hostRef.changeCategory()\">\n    <div class=\"modal-header\">\n      <div class=\"form-group col-12 col-md-9\">\n        <bb-header-ui\n          headingType=\"h3\"\n          heading=\"Change Category\"\n          i18n-heading=\"Change Category|Change Category in change transactions category form@@transactions.form.name\"\n        ></bb-header-ui>\n      </div>\n      <button\n        type=\"button\"\n        class=\"close\"\n        color=\"muted\"\n        aria-label=\"Close\"\n        i18n-aria-label=\"Close button@@transactions.form.close\"\n        (click)=\"hostRef.cancelSaveCategory()\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    <div class=\"modal-body modal-body-scrollable\">\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item--no-separator\" *ngFor=\"let category of categoriesList | async\">\n          <label class=\"bb-stack\" [for]=\"hostRef.getCategoryIconClass(category.categoryName)\">\n            <bb-icon-ui\n              class=\"bb-stack__item\"\n              name=\"category-{{ hostRef.getCategoryIconClass(category.categoryName) }}\"\n              backgroundType=\"circle\"\n              size=\"sm\"\n            ></bb-icon-ui>\n            <span class=\"font-weight-bold bb-stack__item\">{{ category.categoryName }}</span>\n            <div class=\"bb-stack__item bb-stack__item--fill bb-text-align-right\">\n              <input\n                [id]=\"hostRef.getCategoryIconClass(category.categoryName)\"\n                type=\"radio\"\n                name=\"categoryName\"\n                formControlName=\"categoryName\"\n                [value]=\"category.categoryName\"\n              />\n            </div>\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button\n        bbButton\n        data-role=\"cancel\"\n        color=\"secondary\"\n        (click)=\"hostRef.cancelSaveCategory()\"\n        i18n=\"Cancel|Cancel button label@@transactions.category.modal.cancel.button\"\n      >\n        Cancel\n      </button>\n\n      <button\n        bbButton\n        type=\"submit\"\n        color=\"primary\"\n        [disabled]=\"hostRef.transaction.category === hostRef.changeTransactionsCategoryForm.value.categoryName\"\n        i18n=\"Save|Save button label@@transactions.category.modal.save.button\"\n      >\n        Save\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i3__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TransactionsCategoriesCustomizableDirective; }), selector: "[bbTransactionsCategoryCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.RadioControlValueAccessor; }), selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.DefaultValueAccessor; }), selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i8__namespace.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsCategoriesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-categories',
                        templateUrl: 'transactions-categories.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i6__namespace.FormBuilder }, { type: i1__namespace.CategoriesService }, { type: i1__namespace.TransactionUpdateService }]; }, propDecorators: { transaction: [{
                    type: i0.Input
                }], categoryChange: [{
                    type: i0.Output
                }] } });
    var TransactionsCategoriesCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsCategoriesCustomizableDirective, _super);
        function TransactionsCategoriesCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsCategoriesCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsCategoriesCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsCategoriesCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsCategoriesCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsCategoriesCustomizableDirective, selector: "[bbTransactionsCategoryCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsCategoriesCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsCategoryCustomizable]',
                    }]
            }] });

    var TransactionDetailCategoryComponent = /** @class */ (function () {
        function TransactionDetailCategoryComponent(transactionsIconCategoriesFactory) {
            this.transactionsIconCategoriesFactory = transactionsIconCategoriesFactory;
            this.categoryChange = new i0.EventEmitter();
            this.hostRef = this;
            this.isTransactionsCategoryOpen = false;
            this.transactionIconType = i1.TransactionIconType;
        }
        TransactionDetailCategoryComponent.prototype.ngOnInit = function () {
            if (typeof this.transaction === 'undefined') {
                throw new Error("\"transaction\" input is required in \"" + this.constructor.name + "\"");
            }
            this.transactionCategoryIcon = this.transactionsIconCategoriesFactory.create(this.transaction);
        };
        Object.defineProperty(TransactionDetailCategoryComponent.prototype, "categoryTitle", {
            get: function () {
                if (this.transactionCategoryIcon) {
                    return this.transactionCategoryIcon.title;
                }
                return '';
            },
            enumerable: false,
            configurable: true
        });
        TransactionDetailCategoryComponent.prototype.openTransactionsCategory = function () {
            this.isTransactionsCategoryOpen = true;
        };
        TransactionDetailCategoryComponent.prototype.closeTransactionsCategory = function (categoryChangeStatus) {
            this.categoryChange.emit(categoryChangeStatus);
            this.isTransactionsCategoryOpen = false;
        };
        return TransactionDetailCategoryComponent;
    }());
    TransactionDetailCategoryComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailCategoryComponent, deps: [{ token: i1__namespace.TransactionsIconCategoriesFactoryService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionDetailCategoryComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailCategoryComponent, selector: "bb-transaction-detail-category", inputs: { transaction: "transaction", displayChangeCategory: "displayChangeCategory" }, outputs: { categoryChange: "categoryChange" }, ngImport: i0__namespace, template: "<ng-container bbTransactionDetailCategoryCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionDetailCategoryCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.displayChangeCategory && !hostRef.transaction.isPending\">\n    <ng-container *ngIf=\"hostRef.transactionCategoryIcon.type === transactionIconType.category; else fallbackCategory\">\n      <button\n        bbButton\n        class=\"bb-transaction-list-item-detail-header__category-badge\"\n        (click)=\"hostRef.openTransactionsCategory()\"\n        buttonSize=\"sm\"\n      >\n        <span data-role=\"list-details-category\">{{ hostRef.categoryTitle | bbCapitalizePipe }}</span>\n        <span>\n          <bb-icon-ui\n            class=\"bb-transactions-list-pending-header__tooltip\"\n            name=\"edit\"\n            size=\"sm\"\n            color=\"muted\"\n          ></bb-icon-ui>\n          <span\n            class=\"sr-only\"\n            i18n=\"Change transaction category|Change the category of a transaction@@transactions.details.changeCategory\"\n          >\n            Change category\n          </span>\n        </span>\n      </button>\n    </ng-container>\n    <ng-template #fallbackCategory>\n      <div\n        class=\"\n          bb-transaction-list-item-detail-header__category-badge-fallback\n          bb-transaction-list-item-detail-header__category-badge\n        \"\n      >\n        <span data-role=\"list-details-category\">{{ hostRef.categoryTitle | titlecase }}</span>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isTransactionsCategoryOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.closeTransactionsCategory()\"\n  >\n    <bb-transactions-categories\n      [transaction]=\"hostRef.transaction\"\n      (categoryChange)=\"hostRef.closeTransactionsCategory($event)\"\n    ></bb-transactions-categories>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return TransactionsCategoriesComponent; }), selector: "bb-transactions-categories", inputs: ["transaction"], outputs: ["categoryChange"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TransactionDetailCategoryCustomizableDirective; }), selector: "[bbTransactionDetailCategoryCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "bbCapitalizePipe": i0__namespace.forwardRef(function () { return i1__namespace.CapitalizePipe; }), "titlecase": i0__namespace.forwardRef(function () { return i8__namespace.TitleCasePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailCategoryComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-detail-category',
                        templateUrl: 'transaction-detail-category.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TransactionsIconCategoriesFactoryService }]; }, propDecorators: { transaction: [{
                    type: i0.Input
                }], categoryChange: [{
                    type: i0.Output
                }], displayChangeCategory: [{
                    type: i0.Input
                }] } });
    var TransactionDetailCategoryCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionDetailCategoryCustomizableDirective, _super);
        function TransactionDetailCategoryCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionDetailCategoryCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionDetailCategoryCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailCategoryCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionDetailCategoryCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailCategoryCustomizableDirective, selector: "[bbTransactionDetailCategoryCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailCategoryCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionDetailCategoryCustomizable]',
                    }]
            }] });

    var TransactionNotesComponent = /** @class */ (function () {
        function TransactionNotesComponent() {
            /**
             * Whether the notes editing form is shown or not.
             */
            this.isEditingNotes = false;
            /**
             * Whether the notes editing form is saving or not.
             */
            this.isSavingNotes = false;
            /**
             * EventEmitter for triggering an isEditingNotesChange event.
             */
            this.isEditingNotesChange = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a change notes event.
             */
            this.changeNotes = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a deleteNote event.
             */
            this.deleteNote = new i0.EventEmitter();
            this.transactionNotesForm = new i6.FormGroup({
                notes: new i6.FormControl(),
            });
        }
        TransactionNotesComponent.prototype.toggleEdit = function (display) {
            var _a, _b;
            var isEditingNotes = typeof display === 'boolean' ? display : !this.isEditingNotes;
            if (isEditingNotes) {
                (_a = this.transactionNotesForm.get('notes')) === null || _a === void 0 ? void 0 : _a.setValue((_b = this.transaction) === null || _b === void 0 ? void 0 : _b.notes);
            }
            this.isEditingNotesChange.emit(isEditingNotes);
        };
        TransactionNotesComponent.prototype.onSave = function (notesParams) {
            this.changeNotes.emit(notesParams.notes);
        };
        TransactionNotesComponent.prototype.triggerDeleteNote = function (notesParams) {
            this.deleteNote.emit(notesParams.notes);
        };
        TransactionNotesComponent.prototype.ngOnInit = function () {
            if (typeof this.transaction === 'undefined') {
                throw new Error("\"transaction\" input is required in \"" + this.constructor.name + "\"");
            }
            this.transactionNotesForm.setValue({
                notes: this.transaction.notes || '',
            });
        };
        return TransactionNotesComponent;
    }());
    TransactionNotesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionNotesComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionNotesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionNotesComponent, selector: "bb-transaction-notes", inputs: { transaction: "transaction", isEditingNotes: "isEditingNotes", isSavingNotes: "isSavingNotes" }, outputs: { isEditingNotesChange: "isEditingNotesChange", changeNotes: "changeNotes", deleteNote: "deleteNote" }, ngImport: i0__namespace, template: "<div class=\"bb-stack\" [ngClass]=\"{ 'bb-block bb-block--xs': !!transaction?.notes }\">\n  <div class=\"bb-stack__item\">\n    <label\n      class=\"bb-block bb-block--sm\"\n      data-role=\"transaction-note-label\"\n      bbDynamicId\n      #noteLabel\n      i18n=\"Note of the selected transaction@@transactions.details.label.note\"\n    >\n      Note\n    </label>\n  </div>\n  <div *ngIf=\"!isEditingNotes\" class=\"bb-stack__item--push-right\">\n    <ng-container *ngIf=\"!!transaction?.notes; then editIconSet\"></ng-container>\n  </div>\n</div>\n<ng-container *ngIf=\"isEditingNotes; then editNotes; else displayNotes\"></ng-container>\n\n<ng-template #editIconSet>\n  <div class=\"bb-stack bb-stack--density-sm bb-transaction-notes-editIconSet\">\n    <button\n      bbButton\n      class=\"bb-transaction-notes-editIconSet-button\"\n      data-role=\"transaction-note-edit-button\"\n      color=\"link-dark\"\n      buttonSize=\"sm\"\n      [circle]=\"true\"\n      aria-label=\"Edit note\"\n      i18n-aria-label=\"Edit note button@@transactions.list.edit.button.ariaLabel\"\n      (click)=\"toggleEdit()\"\n    >\n      <bb-icon-ui name=\"edit\"></bb-icon-ui>\n    </button>\n    <button\n      bbButton\n      color=\"link-dark\"\n      class=\"bb-transaction-notes-editIconSet-button\"\n      data-role=\"transaction-note-delete-button\"\n      buttonSize=\"sm\"\n      [circle]=\"true\"\n      aria-label=\"Delete note\"\n      i18n-aria-label=\"Delete note button@@transactions.list.notes.delete.button.ariaLabel\"\n      (click)=\"triggerDeleteNote(transactionNotesForm.value)\"\n    >\n      <bb-icon-ui name=\"delete\"></bb-icon-ui>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #editNotes>\n  <form [formGroup]=\"transactionNotesForm\" (ngSubmit)=\"onSave(transactionNotesForm.value)\">\n    <div class=\"form-group\">\n      <textarea\n        class=\"form-control\"\n        name=\"notes\"\n        data-role=\"transaction-note-textarea\"\n        [attr.aria-labelledby]=\"noteLabel?.id\"\n        placeholder=\"Enter note\"\n        i18n-placeholder=\"Write a note for this transaction@@transactions.notes.input.placeholder\"\n        formControlName=\"notes\"\n        maxlength=\"4000\"\n        bbFocus\n      ></textarea>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        color=\"primary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"transaction-note-save-button\"\n        [isLoading]=\"isSavingNotes\"\n        (click)=\"!isSavingNotes && onSave(transactionNotesForm.value)\"\n        i18n=\"Save button@@transactions.list.notes.button.save\"\n      >\n        Save\n      </bb-load-button-ui>\n      <button\n        *ngIf=\"!isSavingNotes\"\n        bbButton\n        type=\"button\"\n        color=\"secondary\"\n        data-role=\"transaction-note-cancel-button\"\n        class=\"bb-button-bar__button\"\n        (click)=\"toggleEdit(false)\"\n        i18n=\"Cancel button@@transactions.notes.button.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #displayNotes>\n  <span data-role=\"transaction-note\">{{ transaction?.notes }}</span>\n</ng-template>\n", components: [{ type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i8__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace.DynamicIdDirective, selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i6__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i6__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6__namespace.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i7__namespace.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionNotesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-notes',
                        templateUrl: './transaction-notes.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { transaction: [{
                    type: i0.Input
                }], isEditingNotes: [{
                    type: i0.Input
                }], isSavingNotes: [{
                    type: i0.Input
                }], isEditingNotesChange: [{
                    type: i0.Output
                }], changeNotes: [{
                    type: i0.Output
                }], deleteNote: [{
                    type: i0.Output
                }] } });

    var TransactionDetailsComponent = /** @class */ (function () {
        function TransactionDetailsComponent(transactionUpdate, messagesService, transactionsInquireAndDispute, cd) {
            var _this = this;
            this.transactionUpdate = transactionUpdate;
            this.messagesService = messagesService;
            this.transactionsInquireAndDispute = transactionsInquireAndDispute;
            this.cd = cd;
            /* eslint-enable */
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            /**
             * Whether to show the account number (for example, when transactions of multiple accounts are
             * shown) or not.
             */
            this.showAccountNumber = false;
            /**
             * Whether the notes editing form is shown or not.
             */
            this.isEditingNotes = false;
            this.isPending = false;
            this.showInquiryAndDispute = false;
            this.inquireAndDisputeTopics = {
                inquire: '',
                dispute: '',
            };
            /**
             * EventEmitter for triggering an isEditingNotesChange event.
             */
            this.isEditingNotesChange = new i0.EventEmitter();
            this.showInquiryAndDisputeChange = new i0.EventEmitter();
            /* eslint-disable */
            this.onNotesUpdateSuccess = new i0.EventEmitter();
            this.onNotesUpdateError = new i0.EventEmitter();
            this.unsubscribeSubject = new rxjs.Subject();
            this.showReportForm = function (display) {
                if (display) {
                    _this.isEditingNotes = false;
                }
                _this.showInquiryAndDisputeChange.emit(display);
            };
            this.isSavingNotes = false;
            this.deleteNoteModalActive = false;
            this.loadingStateEnum = i1.TransactionsDetailsLoadingState;
        }
        Object.defineProperty(TransactionDetailsComponent.prototype, "reportState", {
            //Inquire and dispute variables
            get: function () {
                return this.transactionsInquireAndDispute.reportState;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionDetailsComponent.prototype, "message", {
            get: function () {
                return this.transactionsInquireAndDispute.message;
            },
            set: function (value) {
                this.transactionsInquireAndDispute.message = value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Handler function after user changes notes for the transaction.  Calls service to update the
         * backend.
         *
         * @param notes - The new notes for the transaction.
         */
        TransactionDetailsComponent.prototype.onChangeNotes = function (notes) {
            if (typeof this.transaction === 'undefined') {
                return;
            }
            this.updateNotes(this.transaction, notes);
        };
        TransactionDetailsComponent.prototype.openEditNotes = function () {
            this.isEditingNotes = true;
            this.transactionsInquireAndDispute.showReportForm(false);
        };
        TransactionDetailsComponent.prototype.handleDelete = function (data) {
            this.deleteNoteModalActive = true;
            if (this.transaction) {
                this.transaction.notes = data;
            }
        };
        TransactionDetailsComponent.prototype.closeModal = function () {
            this.deleteNoteModalActive = false;
        };
        TransactionDetailsComponent.prototype.submitDeleteNote = function () {
            if (this.transaction) {
                this.updateNotes(this.transaction, '');
            }
        };
        TransactionDetailsComponent.prototype.updateNotes = function (transaction, note) {
            var _this = this;
            this.isSavingNotes = true;
            this.transactionUpdate.updateNotes(transaction, note).subscribe(function () {
                transaction.notes = note;
                _this.deleteNoteModalActive = false;
                _this.onNotesUpdateSuccess.emit(note);
                _this.updateNotesState();
            }, function (error) {
                _this.onNotesUpdateError.emit(error);
                _this.updateNotesState();
            });
        };
        TransactionDetailsComponent.prototype.updateNotesState = function () {
            this.isSavingNotes = false;
            this.isEditingNotes = false;
            this.cd.markForCheck();
        };
        TransactionDetailsComponent.prototype.ngOnInit = function () {
            if (typeof this.transaction === 'undefined') {
                throw new Error("\"transaction\" input is required in \"" + this.constructor.name + "\"");
            }
            if (this.inquireAndDisputeTopics) {
                this.transactionsInquireAndDispute.showReport.subscribe({
                    next: this.showReportForm,
                });
            }
        };
        TransactionDetailsComponent.prototype.ngOnDestroy = function () {
            this.transactionsInquireAndDispute.removeAllFiles();
            this.unsubscribeSubject.next();
            this.unsubscribeSubject.complete();
        };
        TransactionDetailsComponent.prototype.saveReport = function (messageForm) {
            var _this = this;
            var defaultBody = this.transaction ? this.messagesService.createDefaultBody(this.transaction) : '';
            this.transactionsInquireAndDispute
                .saveReport(this.transactionsInquireAndDispute.formatMessage(messageForm, defaultBody, this.inquireAndDisputeTopics, this.transaction))
                .pipe(operators.takeUntil(this.unsubscribeSubject), operators.switchMap(function () {
                if (_this.transaction && messageForm.topic === 'dispute') {
                    return _this.transactionUpdate.setDisputeStatus(_this.transaction, 'PENDING');
                }
                return rxjs.of(undefined);
            }))
                .subscribe({
                next: function (result) {
                    _this.savedReportType = result !== undefined ? messageForm.topic : undefined;
                    if (_this.transaction && messageForm.topic === 'dispute') {
                        _this.transaction.disputeStatus = 'PENDING';
                    }
                    if (_this.transaction && messageForm.topic === 'inquire') {
                        _this.savedReportType = messageForm.topic;
                    }
                    _this.cd.markForCheck();
                },
            });
        };
        TransactionDetailsComponent.prototype.cancelReport = function () {
            this.transactionsInquireAndDispute.cancelReport();
        };
        TransactionDetailsComponent.prototype.fileChange = function (file) {
            var _this = this;
            this.transactionsInquireAndDispute
                .fileChange(file)
                .pipe(operators.takeUntil(this.unsubscribeSubject))
                .subscribe({
                next: function () {
                    _this.cd.markForCheck();
                },
            });
        };
        TransactionDetailsComponent.prototype.fileRemoved = function (attachment) {
            var _this = this;
            this.transactionsInquireAndDispute
                .fileRemoved(attachment)
                .pipe(operators.takeUntil(this.unsubscribeSubject))
                .subscribe({
                next: function () {
                    _this.cd.markForCheck();
                },
            });
        };
        return TransactionDetailsComponent;
    }());
    TransactionDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailsComponent, deps: [{ token: i1__namespace.TransactionUpdateService }, { token: i1__namespace.MessagesService }, { token: i1__namespace.TransactionsInquireAndDisputeUIService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailsComponent, selector: "bb-transaction-details", inputs: { transaction: "transaction", showAccountNumber: "showAccountNumber", isEditingNotes: "isEditingNotes", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", isPending: "isPending", showInquiryAndDispute: "showInquiryAndDispute", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { isEditingNotesChange: "isEditingNotesChange", showInquiryAndDisputeChange: "showInquiryAndDisputeChange", onNotesUpdateSuccess: "onNotesUpdateSuccess", onNotesUpdateError: "onNotesUpdateError" }, providers: [i1.TransactionsInquireAndDisputeUIService], ngImport: i0__namespace, template: "<ng-container bbTransactionsListItemDetailsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListItemDetailsCustomizable let-hostRef>\n  <div class=\"bb-transaction-list-item-details\">\n    <div class=\"bb-block bb-block--lg\">\n      <div class=\"bb-text-align-center bb-stack bb-stack--center\">\n        <!-- Add note button -->\n        <div class=\"bb-stack__item bb-transaction-list-item-details-controls-container\">\n          <button\n            bbButton\n            [circle]=\"true\"\n            data-role=\"control-note-btn\"\n            class=\"bb-block bb-block--md\"\n            [attr.aria-expanded]=\"!!hostRef.isEditingNotes\"\n            (click)=\"hostRef.openEditNotes()\"\n          >\n            <bb-icon-ui name=\"subject\"></bb-icon-ui>\n          </button>\n          <div class=\"bb-transaction-list-item-details-controls-label\">\n            <label\n              data-role=\"add-note-label\"\n              *ngIf=\"!hostRef.transaction.notes; else editNoteLabel\"\n              i18n=\"Add note to the current transaction@@transactions.list.details.addNote.label\"\n              >Add note</label\n            >\n            <ng-template #editNoteLabel>\n              <label\n                data-role=\"edit-note-label\"\n                i18n=\"Edit note of the current transaction@@transactions.list.details.editNote.label\"\n                >Edit note</label\n              >\n            </ng-template>\n          </div>\n        </div>\n        <!-- Report button -->\n        <div\n          *ngIf=\"hostRef.transactionDetailsLoadingStatus?.enableDisputeAndInquiry === hostRef.loadingStateEnum.done\"\n          class=\"bb-stack__item bb-transaction-list-item-details-controls-container\"\n        >\n          <button\n            bbButton\n            [circle]=\"true\"\n            class=\"bb-block bb-block--md\"\n            data-role=\"report-button\"\n            (click)=\"hostRef.showReportForm(true)\"\n          >\n            <bb-icon-ui name=\"sms-failed\"></bb-icon-ui>\n          </button>\n          <div class=\"bb-transaction-list-item-details-controls-label\">\n            <label\n              data-role=\"report-label\"\n              i18n=\"Report the current transaction@@transactions.list.details.report.label\"\n            >\n              Report\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dispute and inquiry alerts -->\n      <div class=\"bb-block bb-block--lg bb-text-align-left\">\n        <!-- Dispute banners -->\n        <bb-dispute-banner [transaction]=\"hostRef.transaction\"></bb-dispute-banner>\n        <!-- Inquiry banner -->\n        <ng-container *ngIf=\"hostRef.reportState === hostRef.loadingStateEnum.done\">\n          <bb-alert-ui\n            *ngIf=\"hostRef.savedReportType === 'inquire'\"\n            modifier=\"info\"\n            data-role=\"send-inquiry-success\"\n            title=\"The bank is reviewing your transaction\"\n            i18n-title=\"\n              Send inquiry report success notification|Message for a notification displayed when sending transaction\n              inquiry report request has succeed@@transactions.notification.success.send.inquiry.title\"\n            message=\"Please go to Messages to view any responses to your request.\"\n            i18n-message=\"\n              Send inquiry report success notification message@@transactions.notification.success.send.inquiry.message\"\n          ></bb-alert-ui>\n        </ng-container>\n      </div>\n\n      <!-- Dispute and inquiry component -->\n      <div *ngIf=\"hostRef.showInquiryAndDispute\">\n        <bb-transactions-inquiry-dispute\n          [(message)]=\"hostRef.message\"\n          [enableDispute]=\"\n            hostRef.transactionDetailsLoadingStatus.disputeOption === hostRef.loadingStateEnum.done &&\n            (hostRef.transaction.disputeStatus === 'UNDISPUTED' ||\n              hostRef.transaction.disputeStatus === 'REJECTED' ||\n              !hostRef.transaction.disputeStatus)\n          \"\n          [state]=\"hostRef.reportState\"\n          [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n          (submitReport)=\"hostRef.saveReport($event)\"\n          (cancelReport)=\"hostRef.cancelReport()\"\n          (fileChange)=\"hostRef.fileChange($event)\"\n          (fileRemoved)=\"hostRef.fileRemoved($event)\"\n        ></bb-transactions-inquiry-dispute>\n      </div>\n    </div>\n\n    <div class=\"bb-block--lg\">\n      <!-- Type -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.type && (!!hostRef.transaction?.category || !!hostRef.transaction.isPending)\"\n        data-role=\"list-details-type-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Type of the selected transaction@@transactions.details.label.transactionType\"\n          data-role=\"section-title\"\n        >\n          Type\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.type }}\n        </div>\n      </div>\n\n      <!-- Currency Exchange -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction.currencyExchangeAvailability\"\n        data-role=\"list-details-currency-exchange-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Transaction type of the selected transaction@@transactions.details.label.currencyExchange\"\n          data-role=\"section-title\"\n        >\n          Currency exchange\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          <bb-amount-ui\n            amount=\"1\"\n            [currency]=\"hostRef.transaction?.instructedAmountCurrency.currencyCode\"\n          ></bb-amount-ui>\n          <span> = </span>\n          <bb-amount-ui\n            [amount]=\"hostRef.transaction?.currencyExchangeRate\"\n            [currency]=\"hostRef.transaction?.transactionAmountCurrency.currencyCode\"\n            [decimalPlaces]=\"6\"\n            [trailingZeroes]=\"false\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <!-- Instructed amount -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.instructedAmountCurrency?.amount\"\n        data-role=\"list-details-instructed-amount-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Instructed Amount of the selected transaction@@transactions.details.label.instructedAmount\"\n          data-role=\"section-title\"\n        >\n          Instructed amount\n        </div>\n        <div class=\"break-word\">\n          <bb-amount-ui\n            data-role=\"section-content\"\n            [amount]=\"hostRef.transaction?.instructedAmountCurrency?.amount\"\n            [currency]=\"hostRef.transaction?.instructedAmountCurrency?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <!-- Counter party account number -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.counterPartyAccountNumber\"\n        data-role=\"list-details-counter-party-account-number-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"\n            Counter Party Account number of the selected\n            transaction@@transactions.details.label.counterPartyAccountNumber\"\n          data-role=\"section-title\"\n        >\n          Counter party account number\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.counterPartyAccountNumber }}\n        </div>\n      </div>\n\n      <!-- Description -->\n      <div class=\"bb-block--md\" *ngIf=\"hostRef.transaction?.description\" data-role=\"list-details-description-section\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Description of the selected transaction@@transactions.details.label.description\"\n          data-role=\"section-title\"\n        >\n          Description\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.description }}\n        </div>\n      </div>\n\n      <!-- Original Description -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.originalDescription\"\n        data-role=\"list-details-original-description-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Original description of the selected transaction@@transactions.details.label.originalDescription\"\n          data-role=\"section-title\"\n        >\n          Original description\n        </div>\n        <div class=\"break-word\" data-role=\"section-content\">\n          {{ hostRef.transaction?.originalDescription }}\n        </div>\n      </div>\n\n      <!-- Running balance -->\n      <div\n        class=\"bb-block--md\"\n        *ngIf=\"hostRef.transaction?.runningBalance\"\n        data-role=\"list-details-running-balance-section\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"Running balance of the selected transaction@@transactions.details.label.runningBalance\"\n          data-role=\"section-title\"\n        >\n          Running balance\n        </div>\n        <div class=\"break-word\">\n          <bb-amount-ui\n            data-role=\"section-content\"\n            [currency]=\"hostRef.transaction?.transactionAmountCurrency?.currencyCode\"\n            [amount]=\"hostRef.transaction?.runningBalance\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </div>\n\n    <!-- Check image -->\n    <ng-container *ngIf=\"hostRef?.transactionDetailsLoadingStatus?.checkImages !== hostRef.loadingStateEnum.notStarted\">\n      <ng-container\n        *ngIf=\"hostRef?.transactionDetailsLoadingStatus?.checkImages !== hostRef.loadingStateEnum.notLoaded\"\n      >\n        <div\n          class=\"bb-block--lg\"\n          *ngIf=\"hostRef.transaction && hostRef.transaction.checkImageAvailability === 'AVAILABLE'\"\n        >\n          <span\n            class=\"bb-text-bold\"\n            i18n=\"check images of the selected transaction@@transactions.details.label.check-img\"\n          >\n            Check images\n          </span>\n          <span>\n            <bb-icon-ui\n              class=\"bb-transactions-list-pending-header__tooltip\"\n              role=\"tooltip\"\n              name=\"info\"\n              size=\"sm\"\n              [bbTooltip]=\"tipContent\"\n              triggers=\"hover click\"\n              placement=\"right\"\n              bbAccessibilityKeyboard\n            ></bb-icon-ui>\n          </span>\n          <bb-transaction-check-image\n            [transaction]=\"hostRef.transaction\"\n            [checkImagesList]=\"hostRef.checkImagesList\"\n            [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n          ></bb-transaction-check-image>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <!-- Geo location -->\n    <div *ngIf=\"hostRef.transaction?.location\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--sm\"\n        i18n=\"Geo location of the selected transaction@@transactions.details.label.geo-location\"\n      >\n        Location\n      </div>\n      <bb-transaction-geo-location-map\n        [transaction]=\"hostRef.transaction\"\n        [loadingStatus]=\"hostRef.transactionDetailsLoadingStatus?.geolocation\"\n      ></bb-transaction-geo-location-map>\n    </div>\n\n    <!-- Notes -->\n    <ng-container *ngIf=\"!!hostRef.isEditingNotes || !!hostRef.transaction.notes\">\n      <div class=\"bb-block bb-block--lg\"></div>\n      <div class=\"bb-transaction-list-item-detail-additional-info\">\n        <bb-transaction-notes\n          data-role=\"transaction-notes\"\n          [transaction]=\"hostRef.transaction\"\n          [isEditingNotes]=\"hostRef.isEditingNotes\"\n          [isSavingNotes]=\"hostRef.isSavingNotes\"\n          (isEditingNotesChange)=\"hostRef.isEditingNotes = $event; hostRef.isEditingNotesChange.emit($event)\"\n          (changeNotes)=\"hostRef.onChangeNotes($event)\"\n          (deleteNote)=\"hostRef.handleDelete($event)\"\n        ></bb-transaction-notes>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n\n<!-- Delete note -->\n<bb-modal-ui [isOpen]=\"deleteNoteModalActive\" (cancel)=\"closeModal()\">\n  <ng-container bbTransactionsListConfirmationModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</bb-modal-ui>\n\n<ng-template bbTransactionsListConfirmationModalCustomizable let-hostRef>\n  <div class=\"modal-header\">\n    <h2\n      id=\"modal-basic-title\"\n      class=\"modal-title\"\n      data-role=\"delete-note-modal-header\"\n      i18n=\"Delete note?|Delete note modal title@@transactions.list.note.delete.modal.title\"\n    >\n      Delete note?\n    </h2>\n  </div>\n\n  <div class=\"modal-body\">\n    <span\n      data-role=\"delete-note-modal-subHeader\"\n      i18n=\"Are you sure you want to delete this note?|Delete note info@@transactions.list.note.delete.modal.info\"\n    >\n      Are you sure you want to delete the attached note? Entered data will be lost.\n    </span>\n  </div>\n\n  <div class=\"modal-footer\">\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        color=\"danger\"\n        class=\"bb-button-bar__button\"\n        data-role=\"delete-note-modal-delete-button\"\n        (click)=\"hostRef.submitDeleteNote()\"\n        i18n=\"Delete note|Delete note button label@@transactions.list.note.delete.modal.delete.button\"\n      >\n        Delete note\n      </button>\n\n      <button\n        bbButton\n        color=\"link\"\n        class=\"bb-button-bar__button\"\n        data-role=\"delete-note-modal-cancel-button\"\n        (click)=\"hostRef.closeModal()\"\n        i18n=\"Cancel|Cancel button label@@transactions.list.note.confirmation.modal.cancel.button\"\n      >\n        Cancel\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #tipContent>\n  <div class=\"bb-text-align-left\">\n    <span i18n=\"Description inside a tooltip@@transactions.list.details.check-img.tooltip.description\">\n      Some images may not be available online if:\n    </span>\n    <ul>\n      <li i18n=\"Description scheduled maintenance@transactions.list.details.check-img.tooltip.description.point1\">\n        There is a scheduled maintenance in the Check Image Service.\n      </li>\n      <li i18n=\"Check deposited earlier@transactions.list.details.check-img.tooltip.description.point2\">\n        The check has been deposited earlier than 12 months ago.\n      </li>\n      <li i18n=\"Check deposited after 48 hours@transactions.list.details.check-img.tooltip.description.point3\">\n        The checks have been received or deposited within the past 48 hours.\n      </li>\n    </ul>\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.TransactionsDisputeBannerComponent; }), selector: "bb-dispute-banner", inputs: ["transaction"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.TransactionsInquiryDisputeComponent; }), selector: "bb-transactions-inquiry-dispute", inputs: ["message", "enableDispute", "state", "inquireAndDisputeTopics"], outputs: ["submitReport", "cancelReport", "messageChange", "fileChange", "fileRemoved"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.TransactionCheckImageComponent; }), selector: "bb-transaction-check-image", inputs: ["transaction", "checkImagesList", "transactionDetailsLoadingStatus"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.TransactionGeoLocationMapComponent; }), selector: "bb-transaction-geo-location-map", inputs: ["transaction", "loadingStatus"] }, { type: i0__namespace.forwardRef(function () { return TransactionNotesComponent; }), selector: "bb-transaction-notes", inputs: ["transaction", "isEditingNotes", "isSavingNotes"], outputs: ["isEditingNotesChange", "changeNotes", "deleteNote"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TransactionsListItemDetailsCustomizableDirective; }), selector: "[bbTransactionsListItemDetailsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return TransactionsListConfirmationModalCustomizableDirective; }), selector: "[bbTransactionsListConfirmationModalCustomizable]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-details',
                        templateUrl: 'transaction-details.component.html',
                        providers: [i1.TransactionsInquireAndDisputeUIService],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TransactionUpdateService }, { type: i1__namespace.MessagesService }, { type: i1__namespace.TransactionsInquireAndDisputeUIService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { transaction: [{
                    type: i0.Input
                }], showAccountNumber: [{
                    type: i0.Input
                }], isEditingNotes: [{
                    type: i0.Input
                }], checkImagesList: [{
                    type: i0.Input
                }], transactionDetailsLoadingStatus: [{
                    type: i0.Input
                }], isPending: [{
                    type: i0.Input
                }], showInquiryAndDispute: [{
                    type: i0.Input
                }], inquireAndDisputeTopics: [{
                    type: i0.Input
                }], isEditingNotesChange: [{
                    type: i0.Output
                }], showInquiryAndDisputeChange: [{
                    type: i0.Output
                }], onNotesUpdateSuccess: [{
                    type: i0.Output
                }], onNotesUpdateError: [{
                    type: i0.Output
                }] } });
    var TransactionsListItemDetailsCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListItemDetailsCustomizableDirective, _super);
        function TransactionsListItemDetailsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListItemDetailsCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListItemDetailsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemDetailsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListItemDetailsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemDetailsCustomizableDirective, selector: "[bbTransactionsListItemDetailsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemDetailsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListItemDetailsCustomizable]',
                    }]
            }] });
    var TransactionsListConfirmationModalCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListConfirmationModalCustomizableDirective, _super);
        function TransactionsListConfirmationModalCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListConfirmationModalCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListConfirmationModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListConfirmationModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListConfirmationModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListConfirmationModalCustomizableDirective, selector: "[bbTransactionsListConfirmationModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListConfirmationModalCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListConfirmationModalCustomizable]',
                    }]
            }] });

    var TransactionDetailsModalComponent = /** @class */ (function () {
        function TransactionDetailsModalComponent() {
            this.isDetailsOpen = false;
            this.isEditingNotes = false;
            this.inquireAndDisputeTopics = {
                inquire: '',
                dispute: '',
            };
            this.detailsOpen = new i0.EventEmitter();
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.close = new i0.EventEmitter();
            this.showInquiryAndDispute = false;
            this.alertOptions = {
                displayAlert: false,
                displayStatus: '',
            };
        }
        TransactionDetailsModalComponent.prototype.onAlertDismiss = function () {
            this.alertOptions = {
                displayAlert: false,
                displayStatus: '',
            };
        };
        TransactionDetailsModalComponent.prototype.closeTransactionsCategory = function (categoryChangeStatus) {
            if (categoryChangeStatus) {
                this.alertOptions = {
                    displayAlert: true,
                    displayStatus: categoryChangeStatus,
                };
            }
            else {
                this.onAlertDismiss();
            }
        };
        TransactionDetailsModalComponent.prototype.closeDetails = function () {
            this.showInquiryAndDispute = false;
            this.close.emit();
        };
        Object.defineProperty(TransactionDetailsModalComponent.prototype, "isPending", {
            get: function () {
                var isPending = false;
                if (this.transaction && this.transaction.billingStatus) {
                    var billingStatus = this.transaction.billingStatus.toUpperCase();
                    isPending = billingStatus === i1.BillingStatusEnum.pending || billingStatus === i1.BillingStatusEnum.unbilled;
                }
                return isPending;
            },
            enumerable: false,
            configurable: true
        });
        return TransactionDetailsModalComponent;
    }());
    TransactionDetailsModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailsModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionDetailsModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailsModalComponent, selector: "bb-transaction-details-modal", inputs: { isDetailsOpen: "isDetailsOpen", transaction: "transaction", showBillingStatus: "showBillingStatus", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen", close: "close" }, ngImport: i0__namespace, template: "<bb-modal-ui\n  [isOpen]=\"isDetailsOpen\"\n  [modalOptions]=\"{\n    centered: true\n  }\"\n  (cancel)=\"closeDetails()\"\n>\n  <div role=\"dialog\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <button\n          type=\"button\"\n          class=\"close bb-transaction-list-item-detail-header__close-button\"\n          aria-label=\"Close dialog\"\n          i18n-aria-label=\"Close dialog button@@transactions.list.dialog.close.button\"\n          (click)=\"closeDetails()\"\n        >\n          <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n        </button>\n      </ng-template>\n    </bb-modal-header-ui>\n    <!-- Details -->\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <div class=\"bb-text-align-center\">\n          <!-- Category icon-->\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-stack bb-stack--center\">\n              <bb-transaction-category-icon\n                [transaction]=\"transaction\"\n                backgroundType=\"circle\"\n                size=\"large\"\n              ></bb-transaction-category-icon>\n            </div>\n          </div>\n          <!-- Counter party, description -->\n          <div class=\"bb-block bb-block--md\">\n            <strong>\n              {{ transaction?.merchant ? transaction?.merchant?.name : transaction?.counterPartyName }}\n            </strong>\n          </div>\n          <!-- Amount -->\n          <div class=\"bb-heading-2 bb-block bb-block--md\">\n            <bb-amount-ui\n              data-role=\"list-details-amount\"\n              [showPlusSign]=\"true\"\n              [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n              [amount]=\"transaction?.transactionAmountCurrency?.amount || 0\"\n            ></bb-amount-ui>\n            <ng-container *ngIf=\"transaction?.currencyExchangeAvailability\">\n              <bb-icon-ui\n                class=\"bb-transaction-list-item-detail-header__exchange-icon\"\n                role=\"tooltip\"\n                name=\"exchange\"\n                size=\"md\"\n                [bbTooltip]=\"tipContent\"\n                triggers=\"hover click\"\n                placement=\"right\"\n                bbAccessibilityKeyboard\n              ></bb-icon-ui>\n              <span\n                class=\"sr-only\"\n                i18n=\"An exchange rate has been applied to the current transaction@@transactions.details.exchangeRate\"\n                >An exchange rate has been applied</span\n              >\n            </ng-container>\n          </div>\n          <!-- Date -->\n          <div class=\"bb-block bb-block--md\" *ngIf=\"transaction?.bookingDate\">\n            <div class=\"break-word text-small\" data-role=\"list-details-booking-date\">\n              {{ transaction?.bookingDate | date: 'longDate' }}\n            </div>\n          </div>\n          <!-- Category name -->\n          <div class=\"bb-block bb-block--lg\">\n            <bb-transaction-detail-category\n              (categoryChange)=\"closeTransactionsCategory($event)\"\n              [displayChangeCategory]=\"showChangeCategory\"\n              [transaction]=\"transaction\"\n            >\n            </bb-transaction-detail-category>\n          </div>\n          <!-- Billing status -->\n          <div\n            class=\"bb-block bb-block--md\"\n            *ngIf=\"\n              !showBillingStatus &&\n              (transaction?.billingStatus === 'UNBILLED' || transaction?.billingStatus === 'PENDING')\n            \"\n          >\n            <bb-badge-ui\n              text=\"{{ transaction?.billingStatus }}\"\n              color=\"warning\"\n              [abbr]=\"false\"\n              [circle]=\"false\"\n            ></bb-badge-ui>\n          </div>\n          <div class=\"bb-block bb-block--md bb-text-align-left\">\n            <ng-container *ngIf=\"alertOptions.displayAlert\" [ngSwitch]=\"alertOptions.displayStatus\">\n              <bb-alert-ui\n                *ngSwitchCase=\"'error'\"\n                title=\"Transaction category was not changed\"\n                i18n-title=\"\n                  Update failed notification|Message for a notification displayed when transaction category update\n                  request has failed@@transaction.notification.error.update\"\n                [dismissible]=\"true\"\n                (close)=\"onAlertDismiss()\"\n              ></bb-alert-ui>\n\n              <bb-alert-ui\n                *ngSwitchCase=\"'success'\"\n                modifier=\"success\"\n                title=\"Transaction category changed successfully\"\n                i18n-title=\"\n                  Update notification|Message for a notification displayed when transaction category update request has\n                  been processed@@transaction.notification.success.update\"\n                [dismissible]=\"true\"\n                (close)=\"onAlertDismiss()\"\n              ></bb-alert-ui>\n            </ng-container>\n          </div>\n        </div>\n\n        <bb-transaction-details\n          *ngIf=\"isDetailsOpen\"\n          [transaction]=\"transaction\"\n          [(isEditingNotes)]=\"isEditingNotes\"\n          [(showInquiryAndDispute)]=\"showInquiryAndDispute\"\n          [checkImagesList]=\"checkImagesList\"\n          [transactionDetailsLoadingStatus]=\"transactionDetailsLoadingStatus\"\n          [inquireAndDisputeTopics]=\"inquireAndDisputeTopics\"\n          [isPending]=\"isPending\"\n        ></bb-transaction-details>\n      </ng-template>\n    </bb-modal-body-ui>\n  </div>\n</bb-modal-ui>\n<ng-template #tipContent>\n  <div class=\"bb-text-align-left\">\n    <span\n      i18n=\"\n        Description inside a tooltip describing an exchange rate has ocurred@@transactions.details.exchangeRate.tooltip\"\n    >\n      An exchange rate has been applied\n    </span>\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1__namespace$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1__namespace.TransactionCategoryIconComponent, selector: "bb-transaction-category-icon", inputs: ["transaction", "circle", "size"] }, { type: i4__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: TransactionDetailCategoryComponent, selector: "bb-transaction-detail-category", inputs: ["transaction", "displayChangeCategory"], outputs: ["categoryChange"] }, { type: i6__namespace$2.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i3__namespace$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: TransactionDetailsComponent, selector: "bb-transaction-details", inputs: ["transaction", "showAccountNumber", "isEditingNotes", "checkImagesList", "transactionDetailsLoadingStatus", "isPending", "showInquiryAndDispute", "inquireAndDisputeTopics"], outputs: ["isEditingNotesChange", "showInquiryAndDisputeChange", "onNotesUpdateSuccess", "onNotesUpdateError"] }], directives: [{ type: i1__namespace$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]" }, { type: i10__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i8__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "date": i8__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailsModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-details-modal',
                        templateUrl: 'transaction-details-modal.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { isDetailsOpen: [{
                    type: i0.Input
                }], transaction: [{
                    type: i0.Input
                }], showBillingStatus: [{
                    type: i0.Input
                }], showChangeCategory: [{
                    type: i0.Input
                }], checkImagesList: [{
                    type: i0.Input
                }], transactionDetailsLoadingStatus: [{
                    type: i0.Input
                }], inquireAndDisputeTopics: [{
                    type: i0.Input
                }], detailsOpen: [{
                    type: i0.Output
                }], close: [{
                    type: i0.Output
                }] } });

    var TransactionHeaderComponent = /** @class */ (function () {
        function TransactionHeaderComponent(transactionsIconCategoriesFactory) {
            this.transactionsIconCategoriesFactory = transactionsIconCategoriesFactory;
            /**
             * Weather to show pending transactions on top or not.
             */
            this.showBillingStatus = false;
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
        }
        Object.defineProperty(TransactionHeaderComponent.prototype, "subtitle", {
            /**
             * Subtitle to display - either the category of the transaction, or the type if the category is
             * not available.
             */
            get: function () {
                if (typeof this.transaction === 'undefined') {
                    return '';
                }
                if (this.transactionCategoryIcon) {
                    return this.transactionCategoryIcon.title;
                }
                return '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionHeaderComponent.prototype, "title", {
            /**
             * Title to display - either the counter party name of the transaction, or the description if the
             * name is not available.
             */
            get: function () {
                if (!this.transaction) {
                    return '';
                }
                if (this.transaction.merchant && this.transaction.merchant.name) {
                    return this.transaction.merchant.name;
                }
                else {
                    return this.transaction.counterPartyName || this.transaction.description || '';
                }
            },
            enumerable: false,
            configurable: true
        });
        TransactionHeaderComponent.prototype.ngOnInit = function () {
            if (typeof this.transaction === 'undefined') {
                throw new Error("\"transaction\" input is required in \"" + this.constructor.name + "\"");
            }
            this.transactionCategoryIcon = this.transactionsIconCategoriesFactory.create(this.transaction);
        };
        TransactionHeaderComponent.prototype.showCategory = function () {
            if (this.transaction) {
                return this.transaction.isPending || !!this.ownCategory;
            }
            return false;
        };
        Object.defineProperty(TransactionHeaderComponent.prototype, "ownCategory", {
            get: function () {
                return this.transaction && this.transaction.category;
            },
            enumerable: false,
            configurable: true
        });
        // TODO change this type from model to be number (jira -> https://backbase.atlassian.net/browse/TRANS-4722)
        TransactionHeaderComponent.prototype.convertToNumber = function (value) {
            return Number(value);
        };
        return TransactionHeaderComponent;
    }());
    TransactionHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionHeaderComponent, deps: [{ token: i1__namespace.TransactionsIconCategoriesFactoryService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionHeaderComponent, selector: "bb-transaction-header", inputs: { transaction: "transaction", showBillingStatus: "showBillingStatus" }, ngImport: i0__namespace, template: "<div class=\"bb-transaction-header bb-stack w-auto row\">\n  <div class=\"bb-stack__item col-6\">\n    <div class=\"bb-stack\">\n      <!-- Category -->\n      <div class=\"bb-transaction-item-category bb-stack__item\">\n        <ng-container\n          *ngIf=\"\n            transaction?.billingStatus === 'UNBILLED' || transaction?.billingStatus === 'PENDING';\n            else transactionIcon\n          \"\n        >\n          <bb-icon-ui\n            name=\"watch-later\"\n            class=\"bb-transaction-category bb-transaction-category--pending\"\n            color=\"inactive\"\n            backgroundType=\"square\"\n          ></bb-icon-ui>\n        </ng-container>\n        <ng-template #transactionIcon>\n          <bb-transaction-category-icon\n            [transaction]=\"transaction\"\n            backgroundType=\"circle\"\n          ></bb-transaction-category-icon>\n        </ng-template>\n      </div>\n\n      <!-- Counter party, description -->\n      <div class=\"bb-transaction-item-description bb-stack__item\">\n        <div class=\"bb-transaction-item-description__title\">\n          {{ title | titlecase }}\n        </div>\n        <div class=\"bb-transaction-item-description__subtitle\">\n          {{ subtitle | titlecase }}\n        </div>\n        <div class=\"bb-text-disabled\">\n          {{ transaction?.account?.IBAN ? transaction?.account?.IBAN : transaction?.account?.BBAN }}\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-stack__item col-6\">\n    <div class=\"bb-stack bb-transaction-list-header-amount\">\n      <div\n        class=\"bb-stack__item bb-stack__item--push-right bb-text-align-right bb-transaction-list-header-amount__wrapper\"\n      >\n        <div class=\"bb-stack bb-stack--wrap\">\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <div class=\"bb-stack bb-stack--wrap\">\n              <!-- Dispute status -->\n              <div\n                class=\"bb-stack__item bb-stack__item--push-right-lg-down bb-transaction-list-header-dispute-status-tag\"\n              >\n                <bb-dispute-status-tag [status]=\"hostRef.transaction?.disputeStatus\"></bb-dispute-status-tag>\n              </div>\n\n              <!-- Amount -->\n              <div\n                class=\"bb-stack__item bb-stack__item--push-right bb-transaction-list-header-amount__value\"\n                [ngClass]=\"{\n                  'bb-transaction-list-header-amount__value--credit':\n                    convertToNumber(transaction?.transactionAmountCurrency?.amount || '0') > 0\n                }\"\n              >\n                <bb-amount-ui\n                  [showPlusSign]=\"true\"\n                  [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n                  [amount]=\"transaction?.transactionAmountCurrency?.amount || 0\"\n                ></bb-amount-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"hostRef.transaction?.runningBalance\" class=\"bb-text-support text-small\">\n          <span class=\"sr-only\" i18n=\"Running Balance as of Transaction Date@@transactions.list.runningBalance\"\n            >Running balance</span\n          >\n          <bb-amount-ui\n            bbTooltip=\"Running balance\"\n            placement=\"left\"\n            triggers=\"hover\"\n            [currency]=\"transaction?.transactionAmountCurrency?.currencyCode || ''\"\n            [amount]=\"transaction?.runningBalance || 0\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1__namespace.TransactionCategoryIconComponent, selector: "bb-transaction-category-icon", inputs: ["transaction", "circle", "size"] }, { type: i1__namespace.TransactionsDisputeStatusTagComponent, selector: "bb-dispute-status-tag", inputs: ["status"] }, { type: i4__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i10__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }], pipes: { "titlecase": i8__namespace.TitleCasePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-header',
                        templateUrl: './transaction-header.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TransactionsIconCategoriesFactoryService }]; }, propDecorators: { transaction: [{
                    type: i0.Input
                }], showBillingStatus: [{
                    type: i0.Input
                }] } });

    var TransactionsListItemComponent = /** @class */ (function () {
        function TransactionsListItemComponent(featureService, 
        // eslint-disable-next-line
        showDetailsConfig) {
            this.featureService = featureService;
            this.showDetailsConfig = showDetailsConfig;
            /**
             * Whether to show pending transactions on top or not.
             */
            this.showBillingStatus = false;
            this.detailsOpen = new i0.EventEmitter();
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            /**
             * Whether the transaction details are shown or not.
             */
            this.isDetailsOpen = false;
            /**
             * Whether the notes editing form is shown or not.
             */
            this.isEditingNotes = false;
            /**
             * Alert details such as visibility and type
             */
            this.alertOptions = {
                displayAlert: false,
                displayStatus: '',
            };
            if (this.showDetailsConfig === null || this.showDetailsConfig === undefined) {
                this.showDetailsConfig = true;
            }
        }
        /**
         * Show the transaction details.
         */
        TransactionsListItemComponent.prototype.openDetails = function () {
            this.isDetailsOpen = true;
            if (this.transaction) {
                this.detailsOpen.emit(this.transaction);
            }
        };
        /**
         * Hide the transaction details.
         */
        TransactionsListItemComponent.prototype.closeDetails = function () {
            this.isDetailsOpen = false;
            this.onAlertDismiss();
        };
        TransactionsListItemComponent.prototype.ngOnInit = function () {
            if (typeof this.transaction === 'undefined') {
                throw new Error("\"transaction\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        TransactionsListItemComponent.prototype.showCategory = function () {
            return this.isPending || !!this.ownCategory;
        };
        Object.defineProperty(TransactionsListItemComponent.prototype, "hasModal", {
            get: function () {
                // if the feature is not enabled, we are still displaying modal in the item component
                return !this.featureService.isEnabled(TRANSACTIONS_DETAILS_SHARE_MODAL);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsListItemComponent.prototype, "isPending", {
            get: function () {
                var isPending = false;
                if (this.transaction && this.transaction.billingStatus) {
                    var billingStatus = this.transaction.billingStatus.toUpperCase();
                    isPending = billingStatus === i1.BillingStatusEnum.pending || billingStatus === i1.BillingStatusEnum.unbilled;
                }
                return isPending;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsListItemComponent.prototype, "ownCategory", {
            get: function () {
                return this.transaction && this.transaction.category;
            },
            enumerable: false,
            configurable: true
        });
        TransactionsListItemComponent.prototype.closeTransactionsCategory = function (categoryChangeStatus) {
            if (categoryChangeStatus) {
                this.alertOptions = {
                    displayAlert: true,
                    displayStatus: categoryChangeStatus,
                };
            }
            else {
                this.onAlertDismiss();
            }
        };
        TransactionsListItemComponent.prototype.onAlertDismiss = function () {
            this.alertOptions = {
                displayAlert: false,
                displayStatus: '',
            };
        };
        return TransactionsListItemComponent;
    }());
    TransactionsListItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemComponent, deps: [{ token: i1__namespace$2.FeaturesService }, { token: i1.showDetailsConfigToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsListItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemComponent, selector: "bb-transactions-list-item", inputs: { transaction: "transaction", showBillingStatus: "showBillingStatus", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen" }, ngImport: i0__namespace, template: "<ng-container bbTransactionsListItemCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListItemCustomizable let-hostRef>\n  <div bbAccessibilityKeyboard (click)=\"hostRef.openDetails()\">\n    <ng-container bbTransactionsListItemHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <span\n      i18n=\"Transaction selector button@@transactions.list.transaction.label\"\n      i18n-aria-label=\"Transaction selector button label@@transactions.list.transaction.label\"\n      class=\"sr-only\"\n      role=\"button\"\n    >\n      Select transaction\n    </span>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.showDetailsConfig && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showBillingStatus]=\"hostRef.showBillingStatus\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.openDetails($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListItemHeaderCustomizable let-hostRef>\n  <bb-transaction-header\n    [showBillingStatus]=\"hostRef.showBillingStatus\"\n    [transaction]=\"hostRef.transaction\"\n  ></bb-transaction-header>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return TransactionDetailsModalComponent; }), selector: "bb-transaction-details-modal", inputs: ["isDetailsOpen", "transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen", "close"] }, { type: i0__namespace.forwardRef(function () { return TransactionHeaderComponent; }), selector: "bb-transaction-header", inputs: ["transaction", "showBillingStatus"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TransactionsListItemCustomizableDirective; }), selector: "[bbTransactionsListItemCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0__namespace.forwardRef(function () { return TransactionsListItemHeaderCustomizableDirective; }), selector: "[bbTransactionsListItemHeaderCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-list-item',
                        templateUrl: './transactions-list-item.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$2.FeaturesService }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i1.showDetailsConfigToken]
                        }] }];
        }, propDecorators: { transaction: [{
                    type: i0.Input
                }], showBillingStatus: [{
                    type: i0.Input
                }], showChangeCategory: [{
                    type: i0.Input
                }], checkImagesList: [{
                    type: i0.Input
                }], transactionDetailsLoadingStatus: [{
                    type: i0.Input
                }], inquireAndDisputeTopics: [{
                    type: i0.Input
                }], detailsOpen: [{
                    type: i0.Output
                }] } });
    var TransactionsListItemHeaderCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListItemHeaderCustomizableDirective, _super);
        function TransactionsListItemHeaderCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListItemHeaderCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListItemHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListItemHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemHeaderCustomizableDirective, selector: "[bbTransactionsListItemHeaderCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemHeaderCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListItemHeaderCustomizable]',
                    }]
            }] });
    var TransactionsListItemCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListItemCustomizableDirective, _super);
        function TransactionsListItemCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListItemCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemCustomizableDirective, selector: "[bbTransactionsListItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListItemCustomizable]',
                    }]
            }] });

    var TransactionsListItemGroupComponent = /** @class */ (function () {
        function TransactionsListItemGroupComponent() {
            this.detailsOpen = new i0.EventEmitter();
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
        }
        TransactionsListItemGroupComponent.prototype.ngOnInit = function () {
            if (typeof this.transactions === 'undefined') {
                throw new Error("\"transactions\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        Object.defineProperty(TransactionsListItemGroupComponent.prototype, "daysElapsed", {
            get: function () {
                if (this.transactionDate === undefined) {
                    return undefined;
                }
                var transactionDate = new Date(this.transactionDate);
                if (Number.isNaN(transactionDate.getTime())) {
                    return undefined;
                }
                var millisecondsPerDay = 86400000;
                var today = this.roundDate(new Date());
                transactionDate = this.roundDate(transactionDate);
                return Math.floor((today.getTime() - transactionDate.getTime()) / millisecondsPerDay);
            },
            enumerable: false,
            configurable: true
        });
        TransactionsListItemGroupComponent.prototype.onDetailOpen = function (transaction) {
            this.detailsOpen.emit(transaction);
        };
        TransactionsListItemGroupComponent.prototype.roundDate = function (date) {
            date.setUTCHours(0);
            date.setUTCMinutes(0);
            date.setUTCSeconds(0);
            return date;
        };
        TransactionsListItemGroupComponent.prototype.trackByFn = function (_index, element) {
            return element.id;
        };
        return TransactionsListItemGroupComponent;
    }());
    TransactionsListItemGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemGroupComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsListItemGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemGroupComponent, selector: "bb-transactions-list-item-group", inputs: { transactionDate: "transactionDate", transactions: "transactions", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen" }, ngImport: i0__namespace, template: "<ng-container bbTransactionsListItemGroupCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListItemGroupCustomizable let-hostRef>\n  <div\n    role=\"heading\"\n    aria-level=\"2\"\n    class=\"bb-transaction-group__date bb-block--md bb-subheader\"\n    i18n=\"Date of the selected transaction@@transactions.list.transactionDate\"\n    tabindex=\"0\"\n  >\n    {hostRef.daysElapsed, plural, =0 {Today} =1 {Yesterday} other\n    {{{ hostRef.transactionDate | date:'longDate' }}} }\n  </div>\n  <div>\n    <div role=\"list\">\n      <div\n        class=\"bb-block--md\"\n        *ngFor=\"let transaction of hostRef.transactions; trackBy: hostRef.trackByFn\"\n        role=\"listitem\"\n      >\n        <bb-transactions-list-item\n          [showChangeCategory]=\"hostRef.showChangeCategory\"\n          [transaction]=\"transaction\"\n          [checkImagesList]=\"hostRef.checkImagesList\"\n          [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n          [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n          (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n        ></bb-transactions-list-item>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return TransactionsListItemComponent; }), selector: "bb-transactions-list-item", inputs: ["transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TransactionsListItemGroupCustomizableDirective; }), selector: "[bbTransactionsListItemGroupCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i0__namespace.forwardRef(function () { return i8__namespace.DatePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-list-item-group',
                        templateUrl: './transactions-list-item-group.component.html',
                    }]
            }], propDecorators: { transactionDate: [{
                    type: i0.Input
                }], transactions: [{
                    type: i0.Input
                }], showChangeCategory: [{
                    type: i0.Input
                }], checkImagesList: [{
                    type: i0.Input
                }], transactionDetailsLoadingStatus: [{
                    type: i0.Input
                }], inquireAndDisputeTopics: [{
                    type: i0.Input
                }], detailsOpen: [{
                    type: i0.Output
                }] } });
    var TransactionsListItemGroupCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListItemGroupCustomizableDirective, _super);
        function TransactionsListItemGroupCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListItemGroupCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListItemGroupCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemGroupCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListItemGroupCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListItemGroupCustomizableDirective, selector: "[bbTransactionsListItemGroupCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListItemGroupCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListItemGroupCustomizable]',
                    }]
            }] });

    var TransactionsListComponent = /** @class */ (function () {
        function TransactionsListComponent(featureService, showDetailsConfig) {
            this.featureService = featureService;
            this.showDetailsConfig = showDetailsConfig;
            /**
             * Whether new transactions are being loaded.  By default, this is `LoadingState.Loaded`.
             */
            this.loadingState = i1.LoadingState.Loaded;
            /**
             * Event emitter for loading the next page of transactions.
             */
            this.loadMore = new i0.EventEmitter();
            /**
             * Event emitter for loading a specific page of transactions.
             */
            this.pageChange = new i0.EventEmitter();
            this.detailsOpen = new i0.EventEmitter();
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            /**
             * Whether the transaction details are shown or not.
             */
            this.isDetailsOpen = false;
            this.unsubscribeSubject$ = new rxjs.Subject();
            if (this.showDetailsConfig === null || this.showDetailsConfig === undefined) {
                this.showDetailsConfig = true;
            }
        }
        /**
         * Whether there are any loaded transactions.
         */
        TransactionsListComponent.prototype.hasItems = function () {
            if (this.numberOfResultsFound !== undefined) {
                return this.numberOfResultsFound > 0;
            }
            return this.transactionsGroupedByDate && this.transactionsGroupedByDate.length > 0;
        };
        Object.defineProperty(TransactionsListComponent.prototype, "hasModal", {
            get: function () {
                return this.featureService.isEnabled(TRANSACTIONS_DETAILS_SHARE_MODAL) && this.showDetailsConfig;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsListComponent.prototype, "isLoading", {
            /**
             * Whether transactions are loading.
             */
            get: function () {
                return this.loadingState !== i1.LoadingState.Loaded;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsListComponent.prototype, "isLoadingMore", {
            get: function () {
                return this.loadingState === i1.LoadingState.LoadingMore || this.loadingState === i1.LoadingState.LoadingPage;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsListComponent.prototype, "isPaginationPaged", {
            /**
             * Whether pagination is configured to be paged.
             */
            get: function () {
                return this.paginationType === i1.PaginationType.PAGINATION;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsListComponent.prototype, "isPaginationLoadMore", {
            /**
             * Whether pagination is configured to be a load-more button.
             */
            get: function () {
                return this.paginationType === i1.PaginationType.LOAD_MORE;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsListComponent.prototype, "isInfiniteScrollPagination", {
            /**
             * Whether pagination is configured to be a infinite-scroll.
             */
            get: function () {
                return this.paginationType === i1.PaginationType.INFINITE_SCROLL;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns whether all transactions have been loaded or not.
         */
        TransactionsListComponent.prototype.hasLoadedAll = function () {
            return this.transactionsList && i1.TransactionsList.hasLoadedAll(this.transactionsList);
        };
        TransactionsListComponent.prototype.onLoadMore = function () {
            this.loadMore.emit();
        };
        TransactionsListComponent.prototype.onPageChange = function (page) {
            this.pageChange.emit(page);
        };
        TransactionsListComponent.prototype.onDetailOpen = function (transaction) {
            this.isDetailsOpen = true;
            this.transaction = transaction;
            this.detailsOpen.emit(transaction);
        };
        /**
         * Hide the transaction details.
         */
        TransactionsListComponent.prototype.closeDetails = function () {
            this.isDetailsOpen = false;
        };
        TransactionsListComponent.prototype.ngOnChanges = function (changes) {
            if (changes.transactionsList) {
                this.transactionsGroupedByDate = Object.entries(i1.TransactionsGroupedByDate.groupByDate(this.transactionsList));
            }
        };
        TransactionsListComponent.prototype.trackByFn = function (_index, group) {
            return group[0];
        };
        TransactionsListComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.isInfiniteScrollPagination) {
                rxjs.fromEvent(window, 'scroll')
                    .pipe(operators.takeUntil(this.unsubscribeSubject$))
                    .subscribe(function () {
                    if (!(_this.hasLoadedAll() || _this.isLoading)) {
                        var element = document.documentElement;
                        var loadingOffsetHeight = element.offsetHeight * 1.5;
                        if (loadingOffsetHeight + element.scrollTop >= element.scrollHeight) {
                            _this.onLoadMore();
                        }
                    }
                });
            }
        };
        TransactionsListComponent.prototype.ngOnDestroy = function () {
            this.unsubscribeSubject$.next();
            this.unsubscribeSubject$.complete();
        };
        return TransactionsListComponent;
    }());
    TransactionsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListComponent, deps: [{ token: i1__namespace$2.FeaturesService }, { token: i1.showDetailsConfigToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListComponent, selector: "bb-transactions-list", inputs: { transactionsList: "transactionsList", currentPage: "currentPage", pageSize: "pageSize", loadingState: "loadingState", maxNavPages: "maxNavPages", paginationType: "paginationType", numberOfResultsFound: "numberOfResultsFound", showChangeCategory: "showChangeCategory", checkImagesList: "checkImagesList", inquireAndDisputeTopics: "inquireAndDisputeTopics", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus" }, outputs: { loadMore: "loadMore", pageChange: "pageChange", detailsOpen: "detailsOpen" }, usesOnChanges: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!hostRef.isLoading || hostRef.isLoadingMore; else loadingState\">\n  <ng-container *ngIf=\"hostRef.hasItems(); else emptyState\">\n    <ng-container\n      *ngIf=\"hostRef.isInfiniteScrollPagination; else normalList\"\n      [ngTemplateOutlet]=\"bbTransactionsListWithInfiniteScroll\"\n      [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n    ></ng-container>\n    <ng-template #normalList>\n      <ng-container bbTransactionsListListCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n      <ng-container bbTransactionsListPaginationCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <ng-container bbTransactionsListEmptyStateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #bbTransactionsListWithInfiniteScroll let-hostRef>\n  <div class=\"bb-list bb-block--md\">\n    <div class=\"bb-list__item\" *ngFor=\"let date of hostRef.transactionsGroupedByDate; trackBy: hostRef.trackByFn\">\n      <bb-transactions-list-item-group\n        [checkImagesList]=\"hostRef.checkImagesList\"\n        [transactions]=\"date[1]\"\n        [transactionDate]=\"date[0]\"\n        [showChangeCategory]=\"hostRef.showChangeCategory\"\n        [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n        [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list-item-group>\n    </div>\n    <ng-container *ngIf=\"hostRef.isLoading\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </ng-container>\n    <span\n      class=\"bb-d-block bb-text-align-center\"\n      tabindex=\"0\"\n      i18n=\"Displayed message when all transactions had been loaded@@transactions.list.loadedAll\"\n      *ngIf=\"hostRef.hasLoadedAll()\"\n    >\n      All transactions have been loaded.\n    </span>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.transaction && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListListCustomizable let-hostRef>\n  <div class=\"bb-list bb-block--md\">\n    <div class=\"bb-list__item\" *ngFor=\"let date of hostRef.transactionsGroupedByDate; trackBy: hostRef.trackByFn\">\n      <bb-transactions-list-item-group\n        [checkImagesList]=\"hostRef.checkImagesList\"\n        [transactions]=\"date[1]\"\n        [transactionDate]=\"date[0]\"\n        [showChangeCategory]=\"hostRef.showChangeCategory\"\n        [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n        [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list-item-group>\n    </div>\n  </div>\n  <bb-transaction-details-modal\n    *ngIf=\"hostRef.transaction && hostRef.hasModal\"\n    [transaction]=\"hostRef.transaction\"\n    [showChangeCategory]=\"hostRef.showChangeCategory\"\n    [checkImagesList]=\"hostRef.checkImagesList\"\n    [transactionDetailsLoadingStatus]=\"hostRef.transactionDetailsLoadingStatus\"\n    [isDetailsOpen]=\"hostRef.isDetailsOpen\"\n    [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n    (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n    (close)=\"hostRef.closeDetails()\"\n  ></bb-transaction-details-modal>\n</ng-template>\n\n<ng-template bbTransactionsListPaginationCustomizable let-hostRef>\n  <div class=\"bb-block bb-text-align-center\">\n    <bb-pagination-ui\n      class=\"bb-pagination\"\n      [page]=\"hostRef.currentPage\"\n      [boundaryLinks]=\"true\"\n      [directionLinks]=\"true\"\n      [totalItems]=\"hostRef.transactionsList.totalCount\"\n      [itemsPerPage]=\"hostRef.pageSize\"\n      [maxNavPages]=\"hostRef.maxNavPages\"\n      (pageChange)=\"hostRef.onPageChange($event)\"\n      *ngIf=\"hostRef.isPaginationPaged\"\n    ></bb-pagination-ui>\n    <div data-role=\"load-more\" *ngIf=\"hostRef.isPaginationLoadMore\">\n      <bb-load-button-ui\n        color=\"link\"\n        [isLoading]=\"hostRef.isLoadingMore\"\n        [from]=\"hostRef.currentPage\"\n        [size]=\"hostRef.pageSize\"\n        [totalCount]=\"hostRef.transactionsList.totalCount\"\n        (paramChange)=\"hostRef.onLoadMore($event)\"\n        i18n=\"Load more button, when there are still transactions to be loaded@@transactions.list.loadMore\"\n        *ngIf=\"!hostRef.hasLoadedAll()\"\n        >Load more</bb-load-button-ui\n      >\n      <span\n        i18n=\"Displayed message when all transactions had been loaded@@transactions.list.loadedAll\"\n        *ngIf=\"hostRef.hasLoadedAll()\"\n        >All transactions have been loaded.</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTransactionsListEmptyStateCustomizable let-hostRef>\n  <div class=\"card-body bb-state-container\">\n    <!-- Success-empty -->\n    <bb-empty-state-ui\n      *ngIf=\"hostRef.transactionsList?.initialRequest === true; else filterSearchEmpty\"\n      title=\"No Transactions Found\"\n      i18n-title=\"No transactions are found@@transactions.state.noTransactionsFound.title\"\n      subtitle=\"You don't have any transactions to be displayed.\"\n      i18n-subtitle=\"No transactions to be displayed@@transactions.state.noTransactionsFound.subtitle\"\n      iconSize=\"xl\"\n      iconModifier=\"swap-horiz\"\n    ></bb-empty-state-ui>\n\n    <!-- Search/Filter empty result -->\n    <ng-template #filterSearchEmpty>\n      <bb-empty-state-ui\n        title=\"No Results Found\"\n        i18n-title=\"No results are found@@transactions.state.noResultsFound.title\"\n        subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Filter/Search returned no results, try a different criteria@@transactions.state.noResultsFound.subtitle\"\n        iconSize=\"xl\"\n        iconModifier=\"search\"\n      ></bb-empty-state-ui>\n    </ng-template>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i7__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return TransactionsListItemGroupComponent; }), selector: "bb-transactions-list-item-group", inputs: ["transactionDate", "transactions", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: i0__namespace.forwardRef(function () { return TransactionDetailsModalComponent; }), selector: "bb-transaction-details-modal", inputs: ["isDetailsOpen", "transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen", "close"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$2.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return i8__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return TransactionsListListCustomizableDirective; }), selector: "[bbTransactionsListListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return TransactionsListPaginationCustomizableDirective; }), selector: "[bbTransactionsListPaginationCustomizable]" }, { type: i0__namespace.forwardRef(function () { return TransactionsListEmptyStateCustomizableDirective; }), selector: "[bbTransactionsListEmptyStateCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-list',
                        templateUrl: './transactions-list.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$2.FeaturesService }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i1.showDetailsConfigToken]
                        }] }];
        }, propDecorators: { transactionsList: [{
                    type: i0.Input
                }], currentPage: [{
                    type: i0.Input
                }], pageSize: [{
                    type: i0.Input
                }], loadingState: [{
                    type: i0.Input
                }], maxNavPages: [{
                    type: i0.Input
                }], paginationType: [{
                    type: i0.Input
                }], numberOfResultsFound: [{
                    type: i0.Input
                }], showChangeCategory: [{
                    type: i0.Input
                }], loadMore: [{
                    type: i0.Output
                }], pageChange: [{
                    type: i0.Output
                }], checkImagesList: [{
                    type: i0.Input
                }], inquireAndDisputeTopics: [{
                    type: i0.Input
                }], transactionDetailsLoadingStatus: [{
                    type: i0.Input
                }], detailsOpen: [{
                    type: i0.Output
                }] } });
    var TransactionsListPaginationCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListPaginationCustomizableDirective, _super);
        function TransactionsListPaginationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListPaginationCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListPaginationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListPaginationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListPaginationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListPaginationCustomizableDirective, selector: "[bbTransactionsListPaginationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListPaginationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListPaginationCustomizable]',
                    }]
            }] });
    var TransactionsListListCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListListCustomizableDirective, _super);
        function TransactionsListListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListListCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListListCustomizableDirective, selector: "[bbTransactionsListListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListListCustomizable]',
                    }]
            }] });
    var TransactionsListEmptyStateCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListEmptyStateCustomizableDirective, _super);
        function TransactionsListEmptyStateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListEmptyStateCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListEmptyStateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListEmptyStateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListEmptyStateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListEmptyStateCustomizableDirective, selector: "[bbTransactionsListEmptyStateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListEmptyStateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListEmptyStateCustomizable]',
                    }]
            }] });

    var TransactionControlsComponent = /** @class */ (function () {
        function TransactionControlsComponent() {
            /**
             * Whether the notes editing form is shown or not.
             */
            this.isEditingNotes = false;
            /**
             * EventEmitter for triggering an isEditingNotesChange event.
             */
            this.isEditingNotesChange = new i0.EventEmitter();
        }
        TransactionControlsComponent.prototype.onAddNotes = function () {
            this.isEditingNotesChange.emit(true);
        };
        TransactionControlsComponent.prototype.ngOnInit = function () {
            if (typeof this.transaction === 'undefined') {
                throw new Error("\"transaction\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        return TransactionControlsComponent;
    }());
    TransactionControlsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionControlsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionControlsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionControlsComponent, selector: "bb-transaction-controls", inputs: { transaction: "transaction", isEditingNotes: "isEditingNotes" }, outputs: { isEditingNotesChange: "isEditingNotesChange" }, ngImport: i0__namespace, template: "<button bbButton color=\"link\" (click)=\"onAddNotes()\" *ngIf=\"!isEditingNotes && !transaction?.notes\" bbFocus>\n  <bb-icon-ui name=\"note-add\"></bb-icon-ui>\n  <span class=\"sr-only\" i18n=\"Add a note to the current transaction@@transactions.details.addNote\">Add a note</span>\n</button>\n", components: [{ type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7__namespace.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionControlsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-controls',
                        templateUrl: './transaction-controls.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { transaction: [{
                    type: i0.Input
                }], isEditingNotes: [{
                    type: i0.Input
                }], isEditingNotesChange: [{
                    type: i0.Output
                }] } });

    var defaultAllOption = { name: 'All' };
    var TransactionsFilterComponent = /** @class */ (function () {
        function TransactionsFilterComponent(enumValuesService) {
            var _this = this;
            this.enumValuesService = enumValuesService;
            /**
             * EventEmitter for triggering a filter action.
             */
            this.filter = new i0.EventEmitter();
            /**
             * EventEmitter to hide the filter options
             */
            this.closeFilter = new i0.EventEmitter();
            /**
             * EventEmitter with the amount of active filters
             */
            this.filterCount = new i0.EventEmitter();
            /**
             * Configuration parameter to show/hide billing status filter
             */
            this.hideBillingStatus = false;
            /**
             * Configuration parameter to show/hide filters
             */
            this.availableFilters = [];
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            this.availableFilterEnum = i1.AvailableFilterEnum;
            this.transactionsFilterForm = new i6.FormGroup({
                creditDebitIndicator: new i6.FormControl(i1.creditDebitIndicatorEnumValues[0]),
                types: new i6.FormControl(),
                billingStatus: new i6.FormControl(),
                amount: new i6.FormGroup({
                    from: new i6.FormControl(undefined, i6.Validators.min(0)),
                    to: new i6.FormControl(undefined, i6.Validators.min(0)),
                }),
                date: new i6.FormGroup({
                    from: new i6.FormControl(''),
                    to: new i6.FormControl(''),
                }),
                categories: new i6.FormControl(),
                checkSerialNumber: new i6.FormGroup({
                    from: new i6.FormControl(undefined, i6.Validators.min(0)),
                    to: new i6.FormControl(undefined, i6.Validators.min(0)),
                }),
            });
            this.creditDebitIndicatorOptions = i1.creditDebitIndicatorEnumValues;
            this.subscriptions = new rxjs.Subscription();
            this.setDefaultAllOption = function (field) { return function (data) {
                var control = _this.transactionsFilterForm.get(field);
                if (control) {
                    control.setValue(data[0]);
                }
            }; };
            var insertDefaultValue = function (data) { return __spreadArray([defaultAllOption], __read(data)); };
            this.transactionTypeOptions = this.enumValuesService.getEnumValues('type').pipe(operators.map(insertDefaultValue), operators.catchError(function () { return rxjs.of(i1.defaultTransactionTypeEnumValues); }));
            this.billingStatusOptions = this.enumValuesService.getEnumValues('billingStatus').pipe(operators.map(insertDefaultValue), operators.catchError(function () { return rxjs.of(i1.defaultBillingStatusEnumValues); }));
        }
        TransactionsFilterComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b;
            this.subscriptions.add(this.transactionTypeOptions.subscribe(this.setDefaultAllOption('types')));
            this.subscriptions.add(this.billingStatusOptions.subscribe(this.setDefaultAllOption('billingStatus')));
            this.subscriptions.add((_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(function () {
                var _a, _b, _c, _d, _e, _f;
                (_a = _this.fromSerialNumber) === null || _a === void 0 ? void 0 : _a.setValidators(i6.Validators.max((_b = _this.toSerialNumber) === null || _b === void 0 ? void 0 : _b.value));
                (_c = _this.toSerialNumber) === null || _c === void 0 ? void 0 : _c.setValidators(i6.Validators.min(((_d = _this.fromSerialNumber) === null || _d === void 0 ? void 0 : _d.value) || 0));
                (_e = _this.fromSerialNumber) === null || _e === void 0 ? void 0 : _e.updateValueAndValidity({ emitEvent: false });
                (_f = _this.toSerialNumber) === null || _f === void 0 ? void 0 : _f.updateValueAndValidity({ emitEvent: false });
            }));
            this.subscriptions.add((_b = this.amountFormGroup) === null || _b === void 0 ? void 0 : _b.valueChanges.subscribe(function () {
                var _a, _b, _c, _d, _e, _f;
                (_a = _this.fromAmount) === null || _a === void 0 ? void 0 : _a.setValidators(i6.Validators.max((_b = _this.toAmount) === null || _b === void 0 ? void 0 : _b.value));
                (_c = _this.toAmount) === null || _c === void 0 ? void 0 : _c.setValidators(i6.Validators.min(((_d = _this.fromAmount) === null || _d === void 0 ? void 0 : _d.value) || 0));
                (_e = _this.fromAmount) === null || _e === void 0 ? void 0 : _e.updateValueAndValidity({ emitEvent: false });
                (_f = _this.toAmount) === null || _f === void 0 ? void 0 : _f.updateValueAndValidity({ emitEvent: false });
            }));
        };
        TransactionsFilterComponent.prototype.ngOnDestroy = function () {
            this.subscriptions.unsubscribe();
        };
        TransactionsFilterComponent.prototype.compareByValue = function (optionListedValue, placeholderValue) {
            if (!optionListedValue || !placeholderValue) {
                return;
            }
            return optionListedValue.value === placeholderValue.value;
        };
        /**
         * Emit event to apply filter.
         *
         * @param filterParams - Options to filter transactions list with.
         */
        TransactionsFilterComponent.prototype.onFilter = function (filterParams) {
            this.filterCount.emit(this.activeFilterCounter);
            this.filter.emit(filterParams);
        };
        Object.defineProperty(TransactionsFilterComponent.prototype, "activeFilterCounter", {
            /**
             * Checks all the form fields and looks for differences with a default model to define if a filter was applied or not
             */
            get: function () {
                var _this = this;
                var fields = [
                    this.fromDate,
                    this.toDate,
                    this.fromAmount,
                    this.toAmount,
                    this.fromSerialNumber,
                    this.toSerialNumber,
                    this.creditDebitIndicator,
                    this.transactionType,
                    this.billingStatus,
                ];
                var activeFilters = fields.reduce(function (count, field) { return (_this.isFilterApplied(field) ? ++count : count); }, 0);
                return activeFilters;
            },
            enumerable: false,
            configurable: true
        });
        TransactionsFilterComponent.prototype.isFilterApplied = function (control) {
            if (typeof (control === null || control === void 0 ? void 0 : control.value) === 'object' && control.value !== null) {
                return JSON.stringify(control.value) !== JSON.stringify(defaultAllOption);
            }
            else {
                return (control === null || control === void 0 ? void 0 : control.valid) && (!!control.value || control.value === 0);
            }
        };
        /**
         * Clear filter form and reset values to default.
         */
        TransactionsFilterComponent.prototype.onClearFilter = function () {
            this.transactionsFilterForm.reset({
                creditDebitIndicator: i1.creditDebitIndicatorEnumValues[0],
                types: defaultAllOption,
                billingStatus: defaultAllOption,
                date: {
                    from: '',
                    to: '',
                },
            });
            this.transactionsFilterForm.markAsPristine();
            this.onFilter({});
        };
        /**
         * Emit event to close this filter form.
         */
        TransactionsFilterComponent.prototype.onCloseFilter = function () {
            this.closeFilter.emit();
        };
        Object.defineProperty(TransactionsFilterComponent.prototype, "dateFormGroup", {
            get: function () {
                return this.transactionsFilterForm.get('date');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "fromDate", {
            get: function () {
                var _a;
                return (_a = this.dateFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "toDate", {
            get: function () {
                var _a;
                return (_a = this.dateFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "amountFormGroup", {
            get: function () {
                return this.transactionsFilterForm.get('amount');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "fromAmount", {
            get: function () {
                var _a;
                return (_a = this.amountFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "toAmount", {
            get: function () {
                var _a;
                return (_a = this.amountFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "serialNumberFormGroup", {
            get: function () {
                return this.transactionsFilterForm.get('checkSerialNumber');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "fromSerialNumber", {
            get: function () {
                var _a;
                return (_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.get('from');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "toSerialNumber", {
            get: function () {
                var _a;
                return (_a = this.serialNumberFormGroup) === null || _a === void 0 ? void 0 : _a.get('to');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "creditDebitIndicator", {
            get: function () {
                return this.transactionsFilterForm.get('creditDebitIndicator');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "transactionType", {
            get: function () {
                return this.transactionsFilterForm.get('types');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionsFilterComponent.prototype, "billingStatus", {
            get: function () {
                return this.transactionsFilterForm.get('billingStatus');
            },
            enumerable: false,
            configurable: true
        });
        TransactionsFilterComponent.prototype.formatDateToString = function (dateArg) {
            if (!!dateArg && new Date(dateArg).getTime()) {
                var argDate = new Date(dateArg);
                var formatedArgDate = new Date(argDate.getFullYear(), argDate.getMonth(), argDate.getDate());
                return formatedArgDate.toISOString();
            }
            return;
        };
        TransactionsFilterComponent.prototype.isFieldValid = function (fieldGroup, fieldName) {
            var _a;
            var fieldControl = (_a = this.transactionsFilterForm.get(fieldGroup)) === null || _a === void 0 ? void 0 : _a.get(fieldName);
            return !!(fieldControl === null || fieldControl === void 0 ? void 0 : fieldControl.valid) || !!(fieldControl === null || fieldControl === void 0 ? void 0 : fieldControl.untouched);
        };
        return TransactionsFilterComponent;
    }());
    TransactionsFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsFilterComponent, deps: [{ token: i1__namespace.EnumValuesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsFilterComponent, selector: "bb-transactions-filter", inputs: { hideBillingStatus: "hideBillingStatus", availableFilters: "availableFilters" }, outputs: { filter: "filter", closeFilter: "closeFilter", filterCount: "filterCount" }, ngImport: i0__namespace, template: "<ng-container bbTransactionsListFilterCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsListFilterCustomizable let-hostRef>\n  <div class=\"bb-transactions-list-filter\">\n    <form\n      class=\"card-body\"\n      [formGroup]=\"hostRef.transactionsFilterForm\"\n      (ngSubmit)=\"hostRef.onFilter(hostRef.transactionsFilterForm.value)\"\n      novalidate\n      autocomplete=\"off\"\n    >\n      <div class=\"bb-block bb-block--sm\">\n        <div class=\"row\">\n          <!-- Date range -->\n          <div class=\"col-lg-8\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Date)\">\n            <div class=\"row\" formGroupName=\"date\">\n              <div class=\"col-12 col-sm-6\">\n                <div class=\"form-group\">\n                  <bb-input-datepicker-ui\n                    name=\"dateRange\"\n                    data-role=\"start-date\"\n                    label=\"Start date\"\n                    i18n-label=\"Transaction filter for the start Date Range@@transactions.filter.form.startDate.label\"\n                    formControlName=\"from\"\n                    [maxDate]=\"hostRef.formatDateToString(hostRef.toDate?.value)\"\n                  ></bb-input-datepicker-ui>\n                </div>\n              </div>\n\n              <div class=\"col-12 col-sm-6\">\n                <div class=\"form-group\">\n                  <bb-input-datepicker-ui\n                    name=\"dateRange\"\n                    data-role=\"end-date\"\n                    label=\"End date\"\n                    i18n-label=\"Transaction filter for the end Date Range@@transactions.filter.form.endDate.label\"\n                    formControlName=\"to\"\n                    [minDate]=\"hostRef.formatDateToString(hostRef.fromDate?.value)\"\n                  ></bb-input-datepicker-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Credit/debit indicator -->\n          <div class=\"col-lg-4\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.CreditDebitIndicator)\">\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Credit or debit\"\n                data-role=\"credit-debit-indicator-label\"\n                i18n-label=\"\n                  Transactions filter for credit or debit@@transactions.filter.form.creditDebitIndicator.label\"\n                [options]=\"hostRef.creditDebitIndicatorOptions\"\n                displayAttributePath=\"name\"\n                formControlName=\"creditDebitIndicator\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <!-- Amount range -->\n          <div\n            class=\"col-lg-6 form-group\"\n            *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Amount)\"\n            bbDynamicId\n            #amountGroup\n          >\n            <div class=\"bb-stack\" formGroupName=\"amount\">\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #fromAmountLabel\n                  i18n=\"Transactions filter Minimun amount@@transactions.filter.minAmount.label\"\n                >\n                  <abbr title=\"Minimum\">Min.</abbr> amount\n                </label>\n                <bb-input-number-ui\n                  formControlName=\"from\"\n                  data-role=\"amount-from\"\n                  [aria-labelledby]=\"fromAmountLabel?.id\"\n                  placeholder=\"From\"\n                  i18n-placeholder=\"\n                    Initial filtering value|Starting value|Lower amount@@transactions.filter.form.amountFrom.placeholder\"\n                  aria-describedby=\"{{ amountGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #toAmountLabel\n                  i18n=\"Transactions filter Maximun amount@@transactions.filter.maxAmount.label\"\n                >\n                  <abbr title=\"Maximum\">Max.</abbr> amount\n                </label>\n                <bb-input-number-ui\n                  formControlName=\"to\"\n                  data-role=\"amount-to\"\n                  placeholder=\"To\"\n                  i18n-placeholder=\"\n                    Ending filtering value|End value|Higher amount@@transactions.filter.form.amountTo.placeholder\"\n                  [aria-labelledby]=\"toAmountLabel?.id\"\n                  aria-describedby=\"{{ amountGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n            </div>\n            <bb-input-validation-message-ui\n              [showErrors]=\"!hostRef.isFieldValid('amount', 'from') || !hostRef.isFieldValid('amount', 'to')\"\n              messageId=\"{{ amountGroup?.id }}-error\"\n            >\n              <span\n                i18n=\"\n                  Max. amount cannot be smaller than the min. amount|Error Message when max amount is smaller than min\n                  amount@@transactions.filter.form.error.amountRange\"\n              >\n                Maximum amount cannot be smaller than the minimum amount\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- Transaction Type -->\n          <div class=\"col-lg-6\" *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.Types)\">\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Transaction type\"\n                data-role=\"transaction-type-label\"\n                i18n-label=\"\n                  Transaction filter for the types of transaction@@transactions.filter.form.transactionType.label\"\n                [options]=\"(hostRef.transactionTypeOptions | async)!\"\n                displayAttributePath=\"name\"\n                formControlName=\"types\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <!-- Billing status -->\n          <div\n            class=\"col-lg-6\"\n            *ngIf=\"!hideBillingStatus && hostRef.availableFilters.includes(availableFilterEnum.BillingStatus)\"\n          >\n            <div class=\"form-group\">\n              <bb-dropdown-single-select-ui\n                label=\"Billing status\"\n                data-role=\"billing-status-label\"\n                i18n-label=\"Transactions filter for Billing Status@@transactions.filter.form.billingStatus.label\"\n                [options]=\"(hostRef.billingStatusOptions | async)!\"\n                displayAttributePath=\"name\"\n                formControlName=\"billingStatus\"\n                [compareWithFn]=\"hostRef.compareByValue\"\n              ></bb-dropdown-single-select-ui>\n            </div>\n          </div>\n          <!-- Check range -->\n          <div\n            class=\"col-lg-6 form-group\"\n            *ngIf=\"hostRef.availableFilters.includes(availableFilterEnum.CheckSerialNumber)\"\n          >\n            <div class=\"bb-stack\" formGroupName=\"checkSerialNumber\" bbDynamicId #rangeGroup>\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #fromCheckLabel\n                  i18n=\"Transactions filter First check number range@@transactions.filter.firstCheckSerialNumber.label\"\n                >\n                  First check <abbr title=\"Number\">N\u00BA</abbr>\n                </label>\n                <bb-input-number-ui\n                  [aria-labelledby]=\"fromCheckLabel?.id\"\n                  formControlName=\"from\"\n                  data-role=\"check-from\"\n                  placeholder=\"From\"\n                  i18n-placeholder=\"'From' number range input@@transactions.filter.form.rangeFrom.placeholder\"\n                  aria-describedby=\"{{ rangeGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n              <div class=\"bb-stack__item bb-transactions-list-filter__field\">\n                <label\n                  bbDynamicId\n                  #toCheckLabel\n                  i18n=\"Transactions filter Last check number range@@transactions.filter.lastCheckSerialNumber.label\"\n                >\n                  Last check <abbr title=\"Number\">N\u00BA</abbr>\n                </label>\n                <bb-input-number-ui\n                  [aria-labelledby]=\"toCheckLabel?.id\"\n                  formControlName=\"to\"\n                  data-role=\"check-to\"\n                  placeholder=\"To\"\n                  i18n-placeholder=\"'To' number range input@@transactions.filter.form.rangeTo.placeholder\"\n                  aria-describedby=\"{{ rangeGroup?.id }}-error\"\n                  [min]=\"0\"\n                ></bb-input-number-ui>\n              </div>\n            </div>\n            <bb-input-validation-message-ui\n              [showErrors]=\"\n                !hostRef.isFieldValid('checkSerialNumber', 'from') || !hostRef.isFieldValid('checkSerialNumber', 'to')\n              \"\n              messageId=\"{{ rangeGroup?.id }}-error\"\n            >\n              <span\n                i18n=\"\n                  Last check n\u00BA cannot be smaller than first check n\u00BA|Error Message when last check n\u00BA is smaller than\n                  first check n\u00BA@@transactions.filter.form.error.checkSerialRange\"\n              >\n                Last check number cannot be smaller than first check number\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <!-- Apply -->\n        <button\n          bbButton\n          type=\"submit\"\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"apply\"\n          i18n-title=\"Apply button|Apply selected filters@@transactions.filter.form.button.apply\"\n          title=\"Apply\"\n          i18n=\"Apply button|Apply selected filters@@transactions.filter.form.button.apply\"\n        >\n          Apply\n        </button>\n\n        <!-- Close -->\n        <button\n          bbButton\n          type=\"button\"\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"cancel\"\n          i18n-title=\"Close button|Close filter menu@@transactions.filter.form.button.close\"\n          title=\"Close\"\n          i18n=\"Close button|Close filter menu@@transactions.filter.form.button.close\"\n          (click)=\"hostRef.onCloseFilter()\"\n        >\n          Close\n        </button>\n\n        <!-- Clear filters -->\n        <button\n          bbButton\n          type=\"button\"\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"clear-all\"\n          i18n-title=\"Clear Filters button|Clean filters@@transactions.filter.form.button.clearAll\"\n          title=\"Clear filters\"\n          (click)=\"hostRef.onClearFilter()\"\n          *ngIf=\"hostRef.transactionsFilterForm.dirty\"\n          i18n=\"Clear filters button|Clean filters@@transactions.filter.form.button.clearAll\"\n        >\n          Clear filters\n        </button>\n      </div>\n    </form>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$2.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$2.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TransactionsListFilterCustomizableDirective; }), selector: "[bbTransactionsListFilterCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.FormGroupName; }), selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.DynamicIdDirective; }), selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i8__namespace.AsyncPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-filter',
                        templateUrl: './transactions-filter.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.EnumValuesService }]; }, propDecorators: { filter: [{
                    type: i0.Output
                }], closeFilter: [{
                    type: i0.Output
                }], filterCount: [{
                    type: i0.Output
                }], hideBillingStatus: [{
                    type: i0.Input
                }], availableFilters: [{
                    type: i0.Input
                }] } });
    var TransactionsListFilterCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListFilterCustomizableDirective, _super);
        function TransactionsListFilterCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListFilterCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListFilterCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListFilterCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListFilterCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListFilterCustomizableDirective, selector: "[bbTransactionsListFilterCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListFilterCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListFilterCustomizable]',
                    }]
            }] });

    var TransactionsControlsComponent = /** @class */ (function (_super) {
        __extends(TransactionsControlsComponent, _super);
        function TransactionsControlsComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            /**
             * EventEmitter for triggering a search action.
             */
            _this.print = new i0.EventEmitter();
            /**
             * Configuration parameter to show/hide billing status filter
             */
            _this.hideBillingStatus = false;
            /**
             * Reference to instance of customizable component.
             */
            _this.hostRef = _this;
            /**
             * Amount of active filters
             */
            _this.activeFilters = 0;
            return _this;
        }
        /**
         * Print event callback
         */
        TransactionsControlsComponent.prototype.onPrint = function () {
            this.print.emit();
        };
        /**
         *  Filter Count event callback
         */
        TransactionsControlsComponent.prototype.onFilterCount = function (activeFilters) {
            this.activeFilters = activeFilters;
        };
        return TransactionsControlsComponent;
    }(i1.BaseTransactionsControls));
    TransactionsControlsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsControlsComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsControlsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsControlsComponent, selector: "bb-transactions-controls", inputs: { hideBillingStatus: "hideBillingStatus" }, outputs: { print: "print" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-container bbTransactionsListControlsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbTransactionsListControlsCustomizable let-hostRef>\n  <div class=\"card-header\" [ngClass]=\"{ 'bb-block--lg': hostRef.isFilterOpen }\">\n    <div class=\"bb-stack bb-stack--wrap\">\n      <!-- Search button -->\n      <div class=\"bb-transaction-list-controls__search-box bb-stack__item\">\n        <div class=\"input-group\">\n          <label class=\"sr-only\" bbDynamicId #searchLabel i18n=\"search transaction filter@@transactions.search.label\">\n            Search transaction filter\n          </label>\n          <bb-search-box-ui\n            [showSearch]=\"true\"\n            [showClear]=\"true\"\n            placeholder=\"Search\"\n            [aria-labelledby]=\"searchLabel?.id\"\n            searchLabel=\"search\"\n            i18n-searchLabel=\"search label when button in focus@@transactions.searchLabel.search.box\"\n            i18n-placeholder=\"search transactions placeholder@@transactions.ariaLabel.search.placeholder\"\n            (submit)=\"hostRef.onSearch($event)\"\n            (clear)=\"hostRef.onSearch('')\"\n          >\n          </bb-search-box-ui>\n        </div>\n      </div>\n      <!-- Filter button -->\n      <div\n        class=\"bb-stack__item bb-stack__item--fill--md-up align-self-start bb-transaction-list-controls__filter-buttons\"\n      >\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-stack__item--fill--md-up\">\n            <button\n              bbButton\n              *ngIf=\"hostRef.activeFilters\"\n              [attr.aria-expanded]=\"!!hostRef.isFilterOpen\"\n              [color]=\"hostRef.isFilterApplied || hostRef.isFilterOpen ? 'primary' : 'secondary'\"\n              data-role=\"filter\"\n              (click)=\"hostRef.toggleFilter()\"\n            >\n              <bb-icon-ui name=\"filter\"></bb-icon-ui>\n              <span\n                class=\"bb-transaction-list-controls__long-button\"\n                i18n=\"Filter toggle button@@transactions.filtersApplied.button\"\n                >Filters applied</span\n              >\n              <span\n                class=\"bb-transaction-list-controls__short-button\"\n                i18n=\"Filter toggle button@@transactions.filters.button\"\n                >Filters</span\n              >\n              <span>&nbsp;({{ hostRef.activeFilters }})</span>\n            </button>\n\n            <button\n              bbButton\n              *ngIf=\"!hostRef.activeFilters\"\n              [attr.aria-expanded]=\"!!hostRef.isFilterOpen\"\n              [color]=\"hostRef.isFilterApplied || hostRef.isFilterOpen ? 'primary' : 'secondary'\"\n              data-role=\"filter\"\n              (click)=\"hostRef.toggleFilter()\"\n            >\n              <bb-icon-ui name=\"filter\"></bb-icon-ui>\n              <ng-container i18n=\"Filter toggle button@@transactions.filter.button\">Filter</ng-container>\n            </button>\n          </div>\n          <ng-container bbTransactionsListControlsButtonsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <bb-transactions-filter\n    (filter)=\"hostRef.onFilter($event)\"\n    (filterCount)=\"hostRef.onFilterCount($event)\"\n    (closeFilter)=\"hostRef.onClose()\"\n    [hidden]=\"!hostRef.isFilterOpen\"\n    [hideBillingStatus]=\"hostRef.hideBillingStatus\"\n    [availableFilters]=\"hostRef.availableFilters\"\n  ></bb-transactions-filter>\n</ng-template>\n\n<ng-template bbTransactionsListControlsButtonsCustomizable let-hostRef>\n  <!-- Print button -->\n  <button\n    bbButton\n    aria-label=\"Print\"\n    i18n-aria-label=\"Print button@@transactions.print.button\"\n    class=\"bb-stack__item\"\n    color=\"secondary\"\n    [circle]=\"true\"\n    (click)=\"hostRef.onPrint()\"\n  >\n    <bb-icon-ui name=\"print\"></bb-icon-ui>\n  </button>\n  <!-- Export button -->\n  <bb-dropdown-menu-ui\n    *ngIf=\"hostRef.exportConfig?.length\"\n    container=\"body\"\n    icon=\"expand-more\"\n    btnColor=\"secondary\"\n    ariaLabel=\"available export types\"\n    i18n-ariaLabel=\"Currently available export types dropdown@@transactions.list.exportList.ariaLabel\"\n    [btnCircle]=\"true\"\n    icon=\"get-app\"\n    iconSize=\"md\"\n  >\n    <ng-template bbDropdownMenuItem>\n      <a\n        *ngFor=\"let exportType of hostRef.exportConfig\"\n        role=\"menuitem\"\n        class=\"dropdown-item\"\n        (click)=\"hostRef.onExport(exportType)\"\n        href=\"javaScript:void(0);\"\n      >\n        <span>{{ exportType.name }}</span>\n      </a>\n    </ng-template>\n  </bb-dropdown-menu-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$3.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return TransactionsFilterComponent; }), selector: "bb-transactions-filter", inputs: ["hideBillingStatus", "availableFilters"], outputs: ["filter", "closeFilter", "filterCount"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$2.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TransactionsListControlsCustomizableDirective; }), selector: "[bbTransactionsListControlsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.DynamicIdDirective; }), selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return TransactionsListControlsButtonsCustomizableDirective; }), selector: "[bbTransactionsListControlsButtonsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace$2.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsControlsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-controls',
                        templateUrl: './transactions-controls.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { print: [{
                    type: i0.Output
                }], hideBillingStatus: [{
                    type: i0.Input
                }] } });
    var TransactionsListControlsCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListControlsCustomizableDirective, _super);
        function TransactionsListControlsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListControlsCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListControlsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListControlsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListControlsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListControlsCustomizableDirective, selector: "[bbTransactionsListControlsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListControlsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListControlsCustomizable]',
                    }]
            }] });
    var TransactionsListControlsButtonsCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsListControlsButtonsCustomizableDirective, _super);
        function TransactionsListControlsButtonsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsListControlsButtonsCustomizableDirective;
    }(i1$1.BbTemplate));
    TransactionsListControlsButtonsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListControlsButtonsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsListControlsButtonsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListControlsButtonsCustomizableDirective, selector: "[bbTransactionsListControlsButtonsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListControlsButtonsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsListControlsButtonsCustomizable]',
                    }]
            }] });

    var TransactionsListPendingTransactionsComponent = /** @class */ (function () {
        function TransactionsListPendingTransactionsComponent() {
            /**
             * Whether new transactions are being loaded.  By default, this is `LoadingState.Loaded`.
             */
            this.loadingState = i1.LoadingState.Loaded;
            /**
             * Event emitter that triggers when the details are open
             */
            this.detailsOpen = new i0.EventEmitter();
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
        }
        Object.defineProperty(TransactionsListPendingTransactionsComponent.prototype, "isLoading", {
            get: function () {
                return this.loadingState !== i1.LoadingState.Loaded;
            },
            enumerable: false,
            configurable: true
        });
        TransactionsListPendingTransactionsComponent.prototype.paginationOnTop = function () {
            if (this.currentPage === 0) {
                return true;
            }
            if (this.currentPage && this.currentPage > 0) {
                if (this.paginationType === i1.PaginationType.PAGINATION) {
                    return false;
                }
                if (this.paginationType === i1.PaginationType.LOAD_MORE || this.paginationType === i1.PaginationType.INFINITE_SCROLL) {
                    return true;
                }
            }
            return false;
        };
        TransactionsListPendingTransactionsComponent.prototype.onDetailOpen = function (transaction) {
            this.detailsOpen.emit(transaction);
        };
        TransactionsListPendingTransactionsComponent.prototype.trackByFn = function (_index, element) {
            return element.id;
        };
        return TransactionsListPendingTransactionsComponent;
    }());
    TransactionsListPendingTransactionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListPendingTransactionsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsListPendingTransactionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListPendingTransactionsComponent, selector: "bb-pending-transactions-list", inputs: { transactionsList: "transactionsList", showPendingOnTop: "showPendingOnTop", currentPage: "currentPage", pageSize: "pageSize", paginationType: "paginationType", loadingState: "loadingState", maxNavPages: "maxNavPages", showChangeCategory: "showChangeCategory", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { detailsOpen: "detailsOpen" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isLoading; else loadingState\">\n  <ng-container\n    *ngIf=\"transactionsList?.items?.length && paginationOnTop()\"\n    bbPendingTransactionsListCustomizable\n    [bbHostRef]=\"hostRef\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-template bbPendingTransactionsListCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--md\">\n    <strong\n      role=\"heading\"\n      class=\"bb-block bb-block--md\"\n      aria-level=\"2\"\n      aria-label=\" A pending transaction is a payment that has been authorized but has not been processed. For\n      instance, a transaction that is still waiting for the merchant to process it or a transaction requiring overnight\n      processing because it was made after the cutoff time of the financial institution.\"\n      i18n-aria-label=\"Pending transactions header aria-label@@transactions.list.pending.header.aria-label\"\n      tabindex=\"0\"\n    >\n      <div class=\"bb-transactions-list-pending-header bb-block--md\">\n        <span class=\"bb-subheader\" i18n=\"Pending transactions header@@transactions.list.pending.header\">Pending</span>\n        <span class=\"bb-transactions-list-pending-header__tooltip\">\n          <bb-icon-ui\n            role=\"tooltip\"\n            name=\"info\"\n            size=\"sm\"\n            [bbTooltip]=\"tipContent\"\n            placement=\"right\"\n            triggers=\"hover click\"\n            bbAccessibilityKeyboard\n          ></bb-icon-ui>\n        </span>\n      </div>\n    </strong>\n    <div class=\"bb-list\">\n      <div class=\"bb-list__item\">\n        <div\n          class=\"bb-block--md\"\n          *ngFor=\"let transaction of hostRef.transactionsList?.items; trackBy: hostRef.trackByFn\"\n        >\n          <bb-transactions-list-item\n            [transaction]=\"transaction\"\n            [showBillingStatus]=\"true\"\n            [showChangeCategory]=\"hostRef.showChangeCategory\"\n            [inquireAndDisputeTopics]=\"hostRef.inquireAndDisputeTopics\"\n            (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n          ></bb-transactions-list-item>\n        </div>\n      </div>\n      <!-- forcing a line separator in bb-list-->\n      <div class=\"bb-list__item\"></div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #tipContent>\n  <div\n    class=\"bb-text-align-left\"\n    i18n=\"\n      Description inside a tooltip, describing what a Pending Transaction\n      is@@transactions.list.pending.tooltip.description\"\n  >\n    A pending transaction is a payment that has been authorized but has not been processed. For instance, a transaction\n    that is still waiting for the merchant to process it or a transaction requiring overnight processing because it was\n    made after the cutoff time of the financial institution.\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return TransactionsListItemComponent; }), selector: "bb-transactions-list-item", inputs: ["transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return i8__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return PendingTransactionsListCustomizableDirective; }), selector: "[bbPendingTransactionsListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListPendingTransactionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-pending-transactions-list',
                        templateUrl: './transactions-list-pending-transactions.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { transactionsList: [{
                    type: i0.Input
                }], showPendingOnTop: [{
                    type: i0.Input
                }], currentPage: [{
                    type: i0.Input
                }], pageSize: [{
                    type: i0.Input
                }], paginationType: [{
                    type: i0.Input
                }], loadingState: [{
                    type: i0.Input
                }], maxNavPages: [{
                    type: i0.Input
                }], showChangeCategory: [{
                    type: i0.Input
                }], inquireAndDisputeTopics: [{
                    type: i0.Input
                }], detailsOpen: [{
                    type: i0.Output
                }] } });
    var PendingTransactionsListCustomizableDirective = /** @class */ (function (_super) {
        __extends(PendingTransactionsListCustomizableDirective, _super);
        function PendingTransactionsListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PendingTransactionsListCustomizableDirective;
    }(i1$1.BbTemplate));
    PendingTransactionsListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PendingTransactionsListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    PendingTransactionsListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PendingTransactionsListCustomizableDirective, selector: "[bbPendingTransactionsListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PendingTransactionsListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPendingTransactionsListCustomizable]',
                    }]
            }] });

    var TransactionsContainerComponent = /** @class */ (function (_super) {
        __extends(TransactionsContainerComponent, _super);
        function TransactionsContainerComponent(model, widgetProperties, cd, eventBusService, notificationService, pendingTransactionsService, transactionDetailsService, availableFiltersConfigService, 
        // eslint-disable-next-line
        showDetailsConfig) {
            var _this = _super.call(this, model, widgetProperties, cd, eventBusService, notificationService, pendingTransactionsService, transactionDetailsService, availableFiltersConfigService, showDetailsConfig) || this;
            _this.model = model;
            _this.widgetProperties = widgetProperties;
            _this.cd = cd;
            _this.eventBusService = eventBusService;
            _this.notificationService = notificationService;
            _this.pendingTransactionsService = pendingTransactionsService;
            _this.transactionDetailsService = transactionDetailsService;
            _this.availableFiltersConfigService = availableFiltersConfigService;
            _this.showDetailsConfig = showDetailsConfig;
            /**
             * Reference to instance of customizable component.
             */
            _this.hostRef = _this;
            _this.PaginationType = i1.PaginationType;
            if (_this.showDetailsConfig === null || _this.showDetailsConfig === undefined) {
                _this.showDetailsConfig = true;
            }
            return _this;
        }
        return TransactionsContainerComponent;
    }(i1.BaseTransactionsContainer));
    TransactionsContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsContainerComponent, deps: [{ token: i1__namespace.TransactionsService }, { token: i1__namespace.WidgetPropertiesService }, { token: i0__namespace.ChangeDetectorRef }, { token: webSdk.PUBSUB }, { token: i2__namespace$3.NotificationService }, { token: i1__namespace.PendingTransactionsService }, { token: i1__namespace.TransactionDetailsService }, { token: i1__namespace.AvailableFiltersConfigService }, { token: i1.showDetailsConfigToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsContainerComponent, selector: "bb-transactions-container", providers: [i1.TransactionsService, i1.PendingTransactionsService, i1.TransactionDetailsService], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  *ngIf=\"\n    (hostRef.paginationType | async)! === PaginationType.INFINITE_SCROLL &&\n    (selectedAccount | async)! as selectedAccount\n  \"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"bbPaginatedTransactionsContainer\"\n    [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n  ></ng-container>\n  <ng-container *ngIf=\"hostRef.errors\">\n    <div class=\"mb-4\">\n      <bb-alert-ui\n        *ngFor=\"let error of hostRef.errors\"\n        title=\"Couldn't load more transactions\"\n        modifier=\"error\"\n        attr.data-role=\"alert-error\"\n      >\n        <p>{{ error?.message }}</p>\n        <a [routerLink]=\"\" class=\"alert-link\" (click)=\"hostRef.retry()\">click here</a>\n      </bb-alert-ui>\n    </div>\n  </ng-container>\n</ng-container>\n<ng-container\n  *ngIf=\"\n    (hostRef.paginationType | async) !== PaginationType.INFINITE_SCROLL && (selectedAccount | async) as selectedAccount\n  \"\n>\n  <ng-container *ngIf=\"!errors; else errorState\">\n    <ng-container\n      [ngTemplateOutlet]=\"bbPaginatedTransactionsContainer\"\n      [ngTemplateOutletContext]=\"{ $implicit: hostRef }\"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #notificationErrorUpdateHeader>\n    <ng-container [ngSwitch]=\"hostRef.storedExportType?.reason\">\n      <ng-container *ngSwitchCase=\"'MIXED_PRODUCT_KINDS'\">\n        {{ hostRef.storedExportType?.name }}\n        <ng-container\n          i18n=\"\n            Invalid export type header for mixed products kinds|Notification header due to mixed product\n            kinds@@transaction.list.toolTip.error.header.MixedProductKinds\"\n        >\n          export not supported\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"'UNSUPPORTED_PRODUCT_KIND'\">\n        {{ hostRef.storedExportType?.name }}\n        <ng-container\n          i18n=\"\n            Invalid export type header for unsupported product kind|Notification header due to unsupported product\n            kind@@transaction.list.toolTip.error.header.UnsupportedProductKind\"\n        >\n          export not supported\n        </ng-container>\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'TOO_MANY_ITEMS'\"\n        i18n=\"\n          Invalid export type header for too many items|Notification header due to too many\n          transactions@@transaction.list.toolTip.error.header.TooManyItems\"\n      >\n        Maximum export threshold exceeded\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'MULTIPLE_PRODUCTS'\"\n        i18n=\"\n          Invalid export type header for Multiple Products |Notification header due to Multiple\n          Products@@transaction.list.toolTip.error.header.MultipleProducts\"\n      >\n        Multiple products are selected\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #notificationErrorUpdateMessage>\n    <ng-container [ngSwitch]=\"hostRef.storedExportType?.reason\">\n      <ng-container\n        *ngSwitchCase=\"'MIXED_PRODUCT_KINDS'\"\n        i18n=\"\n          Invalid export type mixed products kinds|Notification message due to mixed product\n          kinds@@transaction.list.toolTip.error.message.MixedProductKinds\"\n      >\n        This export is not supported for your selection\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'UNSUPPORTED_PRODUCT_KIND'\"\n        i18n=\"\n          Invalid export type unsupported product kind|Notification message due to unsupported product\n          kind@@transaction.list.toolTip.error.message.UnsupportedProductKind\"\n      >\n        This export is not supported for your selection\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'TOO_MANY_ITEMS'\"\n        i18n=\"\n          Invalid export type too many items|Notification message due to too many\n          transactions@@transaction.list.toolTip.error.message.TooManyItems\"\n      >\n        Please provide different filter\\search criteria\n      </ng-container>\n\n      <ng-container\n        *ngSwitchCase=\"'MULTIPLE_PRODUCTS'\"\n        i18n=\"\n          Invalid export type Multiple Products|Notification message due to Multiple\n          Products@@transaction.list.toolTip.error.message.MultipleProducts\"\n      >\n        Please select only one product. For example, only one current account\n      </ng-container>\n    </ng-container>\n  </ng-template>\n</ng-container>\n\n<ng-container\n  *ngIf=\"!(selectedAccount | async) as selectedAccount\"\n  bbTransactionsNoAccountSelectedStateCustomizable\n  [bbHostRef]=\"hostRef\"\n>\n</ng-container>\n\n<ng-template #errorState>\n  <ng-container bbTransactionsErrorStateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbTransactionsNoAccountSelectedStateCustomizable let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"No Product selected|Empty Product selector@@transactions.state.noProductSelected.title\"\n        title=\"No Product Selected\"\n        i18n-subtitle=\"Product selector@@transactions.state.noProductSelected.subtitle\"\n        subtitle=\"Please select a product first.\"\n        iconSize=\"xl\"\n        iconModifier=\"list\"\n      ></bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTransactionsErrorStateCustomizable let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-body col-md-4 offset-md-4 bb-text-align-center\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-empty-state-ui title=\"\"></bb-empty-state-ui>\n        <p\n          *ngFor=\"let error of hostRef.errors\"\n          data-role=\"custom-error-state-message\"\n          class=\"bb-empty-state__message bb-empty-state\"\n        >\n          {{ error?.message }}\n        </p>\n      </div>\n      <div>\n        <button i18n=\"Retry button@transactions.state.error.retry-button\" bbButton (click)=\"hostRef.retry()\">\n          Retry\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template\n  #notificationServerErrorHeader\n  i18n=\"Internal error header|Internal error header@@transaction.list.error.header.internal\"\n>\n  Transactions export is currently not available\n</ng-template>\n\n<ng-template\n  #notificationServerErrorMessage\n  i18n=\"Internal error message|Internal error message@@transaction.list.error.message.internal\"\n>\n  Please try again later\n</ng-template>\n\n<ng-template #bbPaginatedTransactionsContainer let-hostRef>\n  <div class=\"card card-lg bb-transactions-list-container\">\n    <bb-transactions-controls\n      *ngIf=\"(hostRef.showControls | async)!\"\n      [isFilterApplied]=\"(hostRef.isFilterApplied | async)!\"\n      [hideBillingStatus]=\"(hostRef.showPendingTransactionsOnTop | async)!\"\n      [exportConfig]=\"(hostRef.exportConfig | async)!\"\n      [availableFilters]=\"(hostRef.availableFilters | async) || []\"\n      (search)=\"hostRef.onSearch($event)\"\n      (filter)=\"hostRef.onFilter($event)\"\n      (print)=\"hostRef.onPrint()\"\n      (export)=\"hostRef.onExport($event)\"\n    ></bb-transactions-controls>\n    <bb-transactions-number-of-results-found\n      [numberOfResultsFound]=\"(hostRef.numberOfResultsFound | async)!\"\n      [loadingState]=\"(hostRef.loadingState | async)!\"\n      [isFilterApplied]=\"(hostRef.isFilterApplied | async)!\"\n      [isSearchApplied]=\"(hostRef.isSearchApplied | async)!\"\n    ></bb-transactions-number-of-results-found>\n    <div class=\"card-body\">\n      <bb-pending-transactions-list\n        *ngIf=\"(hostRef.showPendingTransactionsOnTop | async)!\"\n        [transactionsList]=\"(hostRef.pendingTransactionsList | async)!\"\n        [currentPage]=\"(hostRef.currentPage | async)!\"\n        [pageSize]=\"(hostRef.pageSize | async)!\"\n        [paginationType]=\"(hostRef.paginationType | async)!\"\n        [maxNavPages]=\"(hostRef.maxNavPages | async)!\"\n        [loadingState]=\"(hostRef.loadingPendingState | async)!\"\n        [showChangeCategory]=\"(hostRef.showChangeCategory | async)!\"\n        [inquireAndDisputeTopics]=\"(hostRef.inquireAndDisputeTopics | async)!\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-pending-transactions-list>\n\n      <bb-transactions-list\n        [transactionsList]=\"(hostRef.transactionsList | async)!\"\n        [checkImagesList]=\"(hostRef.checkImagesList | async)!\"\n        [currentPage]=\"(hostRef.currentPage | async)!\"\n        [pageSize]=\"(hostRef.pageSize | async)!\"\n        [maxNavPages]=\"(hostRef.maxNavPages | async)!\"\n        [loadingState]=\"(hostRef.loadingState | async)!\"\n        [paginationType]=\"(hostRef.paginationType | async)!\"\n        [numberOfResultsFound]=\"(hostRef.numberOfResultsDisplayed | async)!\"\n        [showChangeCategory]=\"(hostRef.showChangeCategory | async)!\"\n        [transactionDetailsLoadingStatus]=\"(hostRef.transactionDetailsLoadingStatus | async)!\"\n        [inquireAndDisputeTopics]=\"(hostRef.inquireAndDisputeTopics | async)!\"\n        (loadMore)=\"hostRef.onLoadMore()\"\n        (pageChange)=\"hostRef.onPageChange($event)\"\n        (detailsOpen)=\"hostRef.onDetailOpen($event)\"\n      ></bb-transactions-list>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i3__namespace$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i7__namespace$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: TransactionsControlsComponent, selector: "bb-transactions-controls", inputs: ["hideBillingStatus"], outputs: ["print"] }, { type: i1__namespace.TransactionsNumberOfResultsFoundComponent, selector: "bb-transactions-number-of-results-found", inputs: ["numberOfResultsFound", "loadingState", "isFilterApplied", "isSearchApplied"] }, { type: TransactionsListPendingTransactionsComponent, selector: "bb-pending-transactions-list", inputs: ["transactionsList", "showPendingOnTop", "currentPage", "pageSize", "paginationType", "loadingState", "maxNavPages", "showChangeCategory", "inquireAndDisputeTopics"], outputs: ["detailsOpen"] }, { type: TransactionsListComponent, selector: "bb-transactions-list", inputs: ["transactionsList", "currentPage", "pageSize", "loadingState", "maxNavPages", "paginationType", "numberOfResultsFound", "showChangeCategory", "checkImagesList", "inquireAndDisputeTopics", "transactionDetailsLoadingStatus"], outputs: ["loadMore", "pageChange", "detailsOpen"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i8__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1__namespace.TransactionsNoAccountSelectedStateCustomizableDirective, selector: "[bbTransactionsNoAccountSelectedStateCustomizable]" }, { type: i1__namespace.TransactionsErrorStateCustomizableDirective, selector: "[bbTransactionsErrorStateCustomizable]" }, { type: i6__namespace$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i8__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-container',
                        templateUrl: './transactions-container.component.html',
                        providers: [i1.TransactionsService, i1.PendingTransactionsService, i1.TransactionDetailsService],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.TransactionsService }, { type: i1__namespace.WidgetPropertiesService }, { type: i0__namespace.ChangeDetectorRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }, { type: i2__namespace$3.NotificationService }, { type: i1__namespace.PendingTransactionsService }, { type: i1__namespace.TransactionDetailsService }, { type: i1__namespace.AvailableFiltersConfigService }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i1.showDetailsConfigToken]
                        }] }];
        } });

    var TransactionsListWidgetComponent = /** @class */ (function (_super) {
        __extends(TransactionsListWidgetComponent, _super);
        function TransactionsListWidgetComponent(route, widgetProperties) {
            var _this = _super.call(this, route, widgetProperties) || this;
            _this.route = route;
            _this.widgetProperties = widgetProperties;
            return _this;
        }
        return TransactionsListWidgetComponent;
    }(i1.BaseTransactionsWidget));
    TransactionsListWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListWidgetComponent, deps: [{ token: i1__namespace$4.ActivatedRoute }, { token: i1__namespace.WidgetPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsListWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListWidgetComponent, selector: "bb-transactions-list-widget", providers: [i1.NavigationService, i1.WidgetPropertiesService], usesInheritance: true, ngImport: i0__namespace, template: "<bb-transactions-container\n  [googleAPIKey]=\"googleAPIKey\"\n  [selectedAccount]=\"selectedAccount\"\n  [initialFilterOptions]=\"initialFilterOptions\"\n  [initialSortOptions]=\"initialSortOptions\"\n  [pageSize]=\"pageSize\"\n  [maxNavPages]=\"maxNavPages\"\n  [paginationType]=\"paginationType\"\n  [showControls]=\"showControls\"\n  [showChangeCategory]=\"showChangeCategory\"\n  [showPendingTransactionsOnTop]=\"showPendingTransactionsOnTop\"\n  [showCheckImage]=\"showCheckImage\"\n  [showManageNotes]=\"showManageNotes\"\n  [getOrPostEndpoints]=\"getOrPostEndpoints\"\n  [enableDisputeAndInquiry]=\"enableDisputeAndInquiry\"\n  [disputeByBillingStatus]=\"disputeByBillingStatus\"\n  [disputeEligibilityDays]=\"disputeEligibilityDays\"\n  [disputeTransactionTypes]=\"disputeTransactionTypes\"\n  [inquireTopicId]=\"inquireTopicId\"\n  [disputeTopicId]=\"disputeTopicId\"\n  (transactionSelected)=\"onDetailOpen($event)\"\n  (transactionsLoaded)=\"onTransactionsLoaded($event)\"\n  [availableFiltersConfig]=\"availableFiltersConfig\"\n></bb-transactions-container>\n", components: [{ type: TransactionsContainerComponent, selector: "bb-transactions-container" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-list-widget',
                        templateUrl: './transactions-list-widget.component.html',
                        providers: [i1.NavigationService, i1.WidgetPropertiesService],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.ActivatedRoute }, { type: i1__namespace.WidgetPropertiesService }]; } });

    var modules = [
        i1.TransactionsCommonModule,
        i4.AmountModule,
        i6$1.ButtonModule,
        i3$2.DropdownSingleSelectModule,
        i7$2.EmptyStateModule,
        i2.IconModule,
        i2$2.InputDatepickerModule,
        i4$1.InputNumberModule,
        i5$1.InputValidationMessageModule,
        i2$1.LoadButtonModule,
        i7$1.LoadingIndicatorModule,
        i1$2.ModalModule,
        i5.PaginatorModule,
        i1$3.SearchBoxModule,
        i7.FocusModule,
        i2$3.NotificationModule,
        i4$2.DropdownMenuModule,
        i10.TooltipModule,
        i6$1.ButtonModule,
        i3$1.AlertModule,
        i3.HeaderModule,
        i6$2.BadgeModule,
        textarea.TextareaModule,
        ngBootstrap.NgbModule,
    ];
    var components = [
        TransactionsListWidgetComponent,
        TransactionsContainerComponent,
        TransactionsControlsComponent,
        TransactionsFilterComponent,
        TransactionsListComponent,
        TransactionsListItemComponent,
        TransactionsListItemGroupComponent,
        TransactionHeaderComponent,
        TransactionDetailsComponent,
        TransactionControlsComponent,
        TransactionNotesComponent,
        TransactionDetailCategoryComponent,
        TransactionsCategoriesComponent,
        TransactionsListPendingTransactionsComponent,
        TransactionDetailsModalComponent,
    ];
    var customizables = [
        TransactionsListFilterCustomizableDirective,
        TransactionsListControlsCustomizableDirective,
        TransactionsListControlsButtonsCustomizableDirective,
        TransactionsListListCustomizableDirective,
        TransactionsListPaginationCustomizableDirective,
        TransactionsListItemCustomizableDirective,
        TransactionsListItemGroupCustomizableDirective,
        TransactionsListItemHeaderCustomizableDirective,
        TransactionsListItemDetailsCustomizableDirective,
        TransactionsListConfirmationModalCustomizableDirective,
        TransactionsListEmptyStateCustomizableDirective,
        TransactionDetailCategoryCustomizableDirective,
        TransactionsCategoriesCustomizableDirective,
        PendingTransactionsListCustomizableDirective,
    ];
    var TransactionsListWidgetModule = /** @class */ (function () {
        function TransactionsListWidgetModule() {
        }
        TransactionsListWidgetModule.forRoot = function (config) {
            return {
                ngModule: TransactionsListWidgetModule,
                providers: [
                    {
                        provide: i1.showDetailsConfigToken,
                        useValue: config.showDetails,
                    },
                ],
            };
        };
        return TransactionsListWidgetModule;
    }());
    TransactionsListWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TransactionsListWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListWidgetModule, declarations: [TransactionsListWidgetComponent,
            TransactionsContainerComponent,
            TransactionsControlsComponent,
            TransactionsFilterComponent,
            TransactionsListComponent,
            TransactionsListItemComponent,
            TransactionsListItemGroupComponent,
            TransactionHeaderComponent,
            TransactionDetailsComponent,
            TransactionControlsComponent,
            TransactionNotesComponent,
            TransactionDetailCategoryComponent,
            TransactionsCategoriesComponent,
            TransactionsListPendingTransactionsComponent,
            TransactionDetailsModalComponent, TransactionsListFilterCustomizableDirective,
            TransactionsListControlsCustomizableDirective,
            TransactionsListControlsButtonsCustomizableDirective,
            TransactionsListListCustomizableDirective,
            TransactionsListPaginationCustomizableDirective,
            TransactionsListItemCustomizableDirective,
            TransactionsListItemGroupCustomizableDirective,
            TransactionsListItemHeaderCustomizableDirective,
            TransactionsListItemDetailsCustomizableDirective,
            TransactionsListConfirmationModalCustomizableDirective,
            TransactionsListEmptyStateCustomizableDirective,
            TransactionDetailCategoryCustomizableDirective,
            TransactionsCategoriesCustomizableDirective,
            PendingTransactionsListCustomizableDirective], imports: [i1$4.RouterModule,
            i8.CommonModule,
            i6.ReactiveFormsModule, i1__namespace$2.BackbaseCoreModule, i1__namespace$2.FutureFeaturesModule, i1.TransactionsCommonModule,
            i4.AmountModule,
            i6$1.ButtonModule,
            i3$2.DropdownSingleSelectModule,
            i7$2.EmptyStateModule,
            i2.IconModule,
            i2$2.InputDatepickerModule,
            i4$1.InputNumberModule,
            i5$1.InputValidationMessageModule,
            i2$1.LoadButtonModule,
            i7$1.LoadingIndicatorModule,
            i1$2.ModalModule,
            i5.PaginatorModule,
            i1$3.SearchBoxModule,
            i7.FocusModule,
            i2$3.NotificationModule,
            i4$2.DropdownMenuModule,
            i10.TooltipModule,
            i6$1.ButtonModule,
            i3$1.AlertModule,
            i3.HeaderModule,
            i6$2.BadgeModule,
            textarea.TextareaModule,
            ngBootstrap.NgbModule], exports: [i1.TransactionsCommonModule,
            i4.AmountModule,
            i6$1.ButtonModule,
            i3$2.DropdownSingleSelectModule,
            i7$2.EmptyStateModule,
            i2.IconModule,
            i2$2.InputDatepickerModule,
            i4$1.InputNumberModule,
            i5$1.InputValidationMessageModule,
            i2$1.LoadButtonModule,
            i7$1.LoadingIndicatorModule,
            i1$2.ModalModule,
            i5.PaginatorModule,
            i1$3.SearchBoxModule,
            i7.FocusModule,
            i2$3.NotificationModule,
            i4$2.DropdownMenuModule,
            i10.TooltipModule,
            i6$1.ButtonModule,
            i3$1.AlertModule,
            i3.HeaderModule,
            i6$2.BadgeModule,
            textarea.TextareaModule,
            ngBootstrap.NgbModule, TransactionsListWidgetComponent,
            TransactionsContainerComponent,
            TransactionsControlsComponent,
            TransactionsFilterComponent,
            TransactionsListComponent,
            TransactionsListItemComponent,
            TransactionsListItemGroupComponent,
            TransactionHeaderComponent,
            TransactionDetailsComponent,
            TransactionControlsComponent,
            TransactionNotesComponent,
            TransactionDetailCategoryComponent,
            TransactionsCategoriesComponent,
            TransactionsListPendingTransactionsComponent,
            TransactionDetailsModalComponent, TransactionsListFilterCustomizableDirective,
            TransactionsListControlsCustomizableDirective,
            TransactionsListControlsButtonsCustomizableDirective,
            TransactionsListListCustomizableDirective,
            TransactionsListPaginationCustomizableDirective,
            TransactionsListItemCustomizableDirective,
            TransactionsListItemGroupCustomizableDirective,
            TransactionsListItemHeaderCustomizableDirective,
            TransactionsListItemDetailsCustomizableDirective,
            TransactionsListConfirmationModalCustomizableDirective,
            TransactionsListEmptyStateCustomizableDirective,
            TransactionDetailCategoryCustomizableDirective,
            TransactionsCategoriesCustomizableDirective,
            PendingTransactionsListCustomizableDirective] });
    TransactionsListWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListWidgetModule, imports: [__spreadArray([
                i1$4.RouterModule,
                i8.CommonModule,
                i6.ReactiveFormsModule,
                i1$1.BackbaseCoreModule.withConfig({
                    classMap: { TransactionsListWidgetComponent: TransactionsListWidgetComponent },
                }),
                i1$1.FutureFeaturesModule.allowOptIn([TRANSACTIONS_DETAILS_SHARE_MODAL])
            ], __read(modules)), i1.TransactionsCommonModule,
            i4.AmountModule,
            i6$1.ButtonModule,
            i3$2.DropdownSingleSelectModule,
            i7$2.EmptyStateModule,
            i2.IconModule,
            i2$2.InputDatepickerModule,
            i4$1.InputNumberModule,
            i5$1.InputValidationMessageModule,
            i2$1.LoadButtonModule,
            i7$1.LoadingIndicatorModule,
            i1$2.ModalModule,
            i5.PaginatorModule,
            i1$3.SearchBoxModule,
            i7.FocusModule,
            i2$3.NotificationModule,
            i4$2.DropdownMenuModule,
            i10.TooltipModule,
            i6$1.ButtonModule,
            i3$1.AlertModule,
            i3.HeaderModule,
            i6$2.BadgeModule,
            textarea.TextareaModule,
            ngBootstrap.NgbModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsListWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([
                            i1$4.RouterModule,
                            i8.CommonModule,
                            i6.ReactiveFormsModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                classMap: { TransactionsListWidgetComponent: TransactionsListWidgetComponent },
                            }),
                            i1$1.FutureFeaturesModule.allowOptIn([TRANSACTIONS_DETAILS_SHARE_MODAL])
                        ], __read(modules)),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(customizables)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(modules)), __read(components)), __read(customizables)),
                        entryComponents: [TransactionsContainerComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PendingTransactionsListCustomizableDirective = PendingTransactionsListCustomizableDirective;
    exports.TransactionControlsComponent = TransactionControlsComponent;
    exports.TransactionDetailCategoryComponent = TransactionDetailCategoryComponent;
    exports.TransactionDetailCategoryCustomizableDirective = TransactionDetailCategoryCustomizableDirective;
    exports.TransactionDetailsComponent = TransactionDetailsComponent;
    exports.TransactionDetailsModalComponent = TransactionDetailsModalComponent;
    exports.TransactionHeaderComponent = TransactionHeaderComponent;
    exports.TransactionNotesComponent = TransactionNotesComponent;
    exports.TransactionsCategoriesComponent = TransactionsCategoriesComponent;
    exports.TransactionsCategoriesCustomizableDirective = TransactionsCategoriesCustomizableDirective;
    exports.TransactionsContainerComponent = TransactionsContainerComponent;
    exports.TransactionsControlsComponent = TransactionsControlsComponent;
    exports.TransactionsFilterComponent = TransactionsFilterComponent;
    exports.TransactionsListComponent = TransactionsListComponent;
    exports.TransactionsListConfirmationModalCustomizableDirective = TransactionsListConfirmationModalCustomizableDirective;
    exports.TransactionsListControlsButtonsCustomizableDirective = TransactionsListControlsButtonsCustomizableDirective;
    exports.TransactionsListControlsCustomizableDirective = TransactionsListControlsCustomizableDirective;
    exports.TransactionsListEmptyStateCustomizableDirective = TransactionsListEmptyStateCustomizableDirective;
    exports.TransactionsListFilterCustomizableDirective = TransactionsListFilterCustomizableDirective;
    exports.TransactionsListItemComponent = TransactionsListItemComponent;
    exports.TransactionsListItemCustomizableDirective = TransactionsListItemCustomizableDirective;
    exports.TransactionsListItemDetailsCustomizableDirective = TransactionsListItemDetailsCustomizableDirective;
    exports.TransactionsListItemGroupComponent = TransactionsListItemGroupComponent;
    exports.TransactionsListItemGroupCustomizableDirective = TransactionsListItemGroupCustomizableDirective;
    exports.TransactionsListItemHeaderCustomizableDirective = TransactionsListItemHeaderCustomizableDirective;
    exports.TransactionsListListCustomizableDirective = TransactionsListListCustomizableDirective;
    exports.TransactionsListPaginationCustomizableDirective = TransactionsListPaginationCustomizableDirective;
    exports.TransactionsListPendingTransactionsComponent = TransactionsListPendingTransactionsComponent;
    exports.TransactionsListWidgetComponent = TransactionsListWidgetComponent;
    exports.TransactionsListWidgetModule = TransactionsListWidgetModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-transactions-list-widget-ang.umd.js.map
