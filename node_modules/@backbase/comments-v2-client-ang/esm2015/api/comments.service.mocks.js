import { createMocks } from '@backbase/foundation-ang/data-http';
export const CommentsServiceAddPostMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
export const CommentsServiceAddThreadMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "postId": "3fde44a1-0ba8-43e5-85c1-6d496319eaae"
                }
            },
        ]
    }]);
export const CommentsServiceDeletePostMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
        ]
    }]);
export const CommentsServiceGetPostListMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
export const CommentsServiceGetPostsByAssociationsListMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/posts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "threadId": "90849e9c-b542-4650-b84e-eac104a81468",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
export const CommentsServiceGetThreadListMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "a822e608-48c6-45e3-8b55-dd45c3855861",
                    "name": "Any Custom Name",
                    "status": "open",
                    "createdAt": "2020-02-24T13:36:09.023",
                    "archivedAt": "2020-02-24T14:17:33.124",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
export const CommentsServiceUpdatePostMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
export const CommentsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "postId": "3fde44a1-0ba8-43e5-85c1-6d496319eaae"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/posts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "threadId": "90849e9c-b542-4650-b84e-eac104a81468",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "a822e608-48c6-45e3-8b55-dd45c3855861",
                    "name": "Any Custom Name",
                    "status": "open",
                    "createdAt": "2020-02-24T13:36:09.023",
                    "archivedAt": "2020-02-24T14:17:33.124",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,