{"version":3,"file":"backbase-comments-v2-client-ang.js","sources":["../../model/threadDto.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/comments.service.ts","../../api/comments.service.mocks.ts"],"sourcesContent":["/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.3.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface ThreadDto { \n    /**\n     * The thread id\n     */\n    [\"id\"]: string;\n    /**\n     * The name of thread\n     */\n    [\"name\"]: string;\n    /**\n     * The thread status\n     */\n    [\"status\"]: ThreadDto.StatusEnum;\n    /**\n     * The creation date of the thread\n     */\n    [\"createdAt\"]: string;\n    /**\n     * The archivation date of the thread\n     */\n    [\"archivedAt\"]?: string;\n    /**\n     * Additional properties\n     */\n    [\"additions\"]?: { [key: string]: string; };\n}\nexport namespace ThreadDto {\n    export type StatusEnum = 'open' | 'closed' | 'archived';\n    export const StatusEnum = {\n        Open: 'open' as StatusEnum,\n        Closed: 'closed' as StatusEnum,\n        Archived: 'archived' as StatusEnum\n    };\n}\n\n\n","import { InjectionToken } from '@angular/core';\n\nexport const COMMENTS_BASE_PATH = new InjectionToken<string>('COMMENTS_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface CommentsConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class CommentsConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: CommentsConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default bearerAuth credential\n        if (!this.credentials['bearerAuth']) {\n            this.credentials['bearerAuth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link CommentsConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link CommentsConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module CommentsConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CommentsConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class CommentsApiModule {\n    public static forRoot(configurationFactory: () => CommentsConfiguration): ModuleWithProviders<CommentsApiModule> {\n        return {\n            ngModule: CommentsApiModule,\n            providers: [ { provide: CommentsConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: CommentsApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: CommentsConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('CommentsApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.3.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { PostAddDto } from '../model/models';\nimport { PostDto } from '../model/models';\nimport { PostUpdateDto } from '../model/models';\nimport { PostWithThreadIdDto } from '../model/models';\nimport { ThreadAddDto } from '../model/models';\nimport { ThreadDto } from '../model/models';\nimport { ThreadIdDto } from '../model/models';\n\nimport { COMMENTS_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { CommentsConfiguration }                                     from '../configuration';\n\n\nexport interface AddPostRequestParams {\n    /** The thread\\&#39;s unique ID */\n    [\"threadId\"]: string;\n    [\"postAddDto\"]: PostAddDto;\n}\n\nexport interface AddThreadRequestParams {\n    [\"threadAddDto\"]: ThreadAddDto;\n}\n\nexport interface DeletePostRequestParams {\n    /** The thread\\&#39;s unique ID */\n    [\"threadId\"]: string;\n    /** The post\\&#39;s unique ID */\n    [\"postId\"]: string;\n}\n\nexport interface GetPostListRequestParams {\n    /** The thread\\&#39;s unique ID */\n    [\"threadId\"]: string;\n    /** Optional pagination parameter for the start item indexed at zero. */\n    [\"from\"]?: number;\n    /** Optional pagination parameter for the number of items per page. */\n    [\"size\"]?: number;\n}\n\nexport interface GetPostsByAssociationsListRequestParams {\n    /** Multiple key-value entities filter. */\n    [\"entityFilter\"]: { [key: string]: string; };\n    /** Optional pagination parameter for the start item indexed at zero. */\n    [\"from\"]?: number;\n    /** Optional pagination parameter for the number of items per page. */\n    [\"size\"]?: number;\n}\n\nexport interface GetThreadListRequestParams {\n    /** Multiple key-value entities filter. */\n    [\"entityFilter\"]: { [key: string]: string; };\n}\n\nexport interface UpdatePostRequestParams {\n    /** The thread\\&#39;s unique ID */\n    [\"threadId\"]: string;\n    /** The post\\&#39;s unique ID */\n    [\"postId\"]: string;\n    [\"postUpdateDto\"]: PostUpdateDto;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService {\n\n    protected basePath = '/client-api/comments/v2';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new CommentsConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(COMMENTS_BASE_PATH) basePath: string, @Optional() configuration: CommentsConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Add a new post.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(requestParameters: AddPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PostDto>;\n    /**\n     * Add a new post.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(requestParameters: AddPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PostDto>>;\n    /**\n     * Add a new post.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(requestParameters: AddPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PostDto>>;\n    /**\n     * Add a new post.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(requestParameters: AddPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling addPost.');\n        }\n        const _postAddDto = requestParameters[\"postAddDto\"];\n        if (_postAddDto === null || _postAddDto === undefined) {\n            throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PostDto>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`,\n            _postAddDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public addPostUrl(requestParameters: AddPostRequestParams): string {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling addPost.');\n        }\n        const _postAddDto = requestParameters[\"postAddDto\"];\n        if (_postAddDto === null || _postAddDto === undefined) {\n            throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');\n        }\n        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`;\n    }\n\n    /**\n     * Add a new thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(requestParameters: AddThreadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ThreadIdDto>;\n    /**\n     * Add a new thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(requestParameters: AddThreadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ThreadIdDto>>;\n    /**\n     * Add a new thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(requestParameters: AddThreadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ThreadIdDto>>;\n    /**\n     * Add a new thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(requestParameters: AddThreadRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadAddDto = requestParameters[\"threadAddDto\"];\n        if (_threadAddDto === null || _threadAddDto === undefined) {\n            throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ThreadIdDto>(`${this.configuration.basePath}/client-api/comments/v2/threads`,\n            _threadAddDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public addThreadUrl(requestParameters: AddThreadRequestParams): string {\n        const _threadAddDto = requestParameters[\"threadAddDto\"];\n        if (_threadAddDto === null || _threadAddDto === undefined) {\n            throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');\n        }\n        return `${this.configuration.basePath}/client-api/comments/v2/threads`;\n    }\n\n    /**\n     * Deletes a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(requestParameters: DeletePostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Deletes a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(requestParameters: DeletePostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Deletes a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(requestParameters: DeletePostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Deletes a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(requestParameters: DeletePostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling deletePost.');\n        }\n        const _postId = requestParameters[\"postId\"];\n        if (_postId === null || _postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling deletePost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deletePostUrl(requestParameters: DeletePostRequestParams): string {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling deletePost.');\n        }\n        const _postId = requestParameters[\"postId\"];\n        if (_postId === null || _postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling deletePost.');\n        }\n        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`;\n    }\n\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;. This API supports pagination. If pagination parameters aren\\&#39;t supplied then all posts are returned.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(requestParameters: GetPostListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PostDto>>;\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;. This API supports pagination. If pagination parameters aren\\&#39;t supplied then all posts are returned.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(requestParameters: GetPostListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PostDto>>>;\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;. This API supports pagination. If pagination parameters aren\\&#39;t supplied then all posts are returned.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(requestParameters: GetPostListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PostDto>>>;\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;. This API supports pagination. If pagination parameters aren\\&#39;t supplied then all posts are returned.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(requestParameters: GetPostListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling getPostList.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<PostDto>>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getPostListUrl(requestParameters: GetPostListRequestParams): string {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling getPostList.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get all posts that belong to multiple provided associations. Sorted by creation date in descending order. This endpoint is paginated using &#x60;from&#x60; with a default value of &#x60;0&#x60; and &#x60;size&#x60; with a default value of &#x60;10&#x60;.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PostWithThreadIdDto>>;\n    /**\n     * Get all posts that belong to multiple provided associations. Sorted by creation date in descending order. This endpoint is paginated using &#x60;from&#x60; with a default value of &#x60;0&#x60; and &#x60;size&#x60; with a default value of &#x60;10&#x60;.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PostWithThreadIdDto>>>;\n    /**\n     * Get all posts that belong to multiple provided associations. Sorted by creation date in descending order. This endpoint is paginated using &#x60;from&#x60; with a default value of &#x60;0&#x60; and &#x60;size&#x60; with a default value of &#x60;10&#x60;.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PostWithThreadIdDto>>>;\n    /**\n     * Get all posts that belong to multiple provided associations. Sorted by creation date in descending order. This endpoint is paginated using &#x60;from&#x60; with a default value of &#x60;0&#x60; and &#x60;size&#x60; with a default value of &#x60;10&#x60;.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _entityFilter = requestParameters[\"entityFilter\"];\n        if (_entityFilter === null || _entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getPostsByAssociationsList.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_entityFilter !== undefined && _entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_entityFilter, 'entityFilter');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<PostWithThreadIdDto>>(`${this.configuration.basePath}/client-api/comments/v2/posts`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getPostsByAssociationsListUrl(requestParameters: GetPostsByAssociationsListRequestParams): string {\n        const _entityFilter = requestParameters[\"entityFilter\"];\n        if (_entityFilter === null || _entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getPostsByAssociationsList.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_entityFilter !== undefined && _entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_entityFilter, 'entityFilter');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/comments/v2/posts${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ThreadDto>>;\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ThreadDto>>>;\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ThreadDto>>>;\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(requestParameters: GetThreadListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _entityFilter = requestParameters[\"entityFilter\"];\n        if (_entityFilter === null || _entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_entityFilter !== undefined && _entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_entityFilter, 'entityFilter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ThreadDto>>(`${this.configuration.basePath}/client-api/comments/v2/threads`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getThreadListUrl(requestParameters: GetThreadListRequestParams): string {\n        const _entityFilter = requestParameters[\"entityFilter\"];\n        if (_entityFilter === null || _entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');\n        }\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_entityFilter !== undefined && _entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_entityFilter, 'entityFilter');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/comments/v2/threads${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Updates a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(requestParameters: UpdatePostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PostDto>;\n    /**\n     * Updates a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(requestParameters: UpdatePostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PostDto>>;\n    /**\n     * Updates a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(requestParameters: UpdatePostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PostDto>>;\n    /**\n     * Updates a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(requestParameters: UpdatePostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling updatePost.');\n        }\n        const _postId = requestParameters[\"postId\"];\n        if (_postId === null || _postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling updatePost.');\n        }\n        const _postUpdateDto = requestParameters[\"postUpdateDto\"];\n        if (_postUpdateDto === null || _postUpdateDto === undefined) {\n            throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<PostDto>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`,\n            _postUpdateDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public updatePostUrl(requestParameters: UpdatePostRequestParams): string {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling updatePost.');\n        }\n        const _postId = requestParameters[\"postId\"];\n        if (_postId === null || _postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling updatePost.');\n        }\n        const _postUpdateDto = requestParameters[\"postUpdateDto\"];\n        if (_postUpdateDto === null || _postUpdateDto === undefined) {\n            throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');\n        }\n        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts URL pattern\n*/\nexport const CommentsServiceAddPostMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads URL pattern\n*/\nexport const CommentsServiceAddThreadMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"postId\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId} URL pattern\n*/\nexport const CommentsServiceDeletePostMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts URL pattern\n*/\nexport const CommentsServiceGetPostListMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/posts URL pattern\n*/\nexport const CommentsServiceGetPostsByAssociationsListMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/posts\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"threadId\" : \"90849e9c-b542-4650-b84e-eac104a81468\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads URL pattern\n*/\nexport const CommentsServiceGetThreadListMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"a822e608-48c6-45e3-8b55-dd45c3855861\",\n  \"name\" : \"Any Custom Name\",\n  \"status\" : \"open\",\n  \"createdAt\" : \"2020-02-24T13:36:09.023\",\n  \"archivedAt\" : \"2020-02-24T14:17:33.124\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId} URL pattern\n*/\nexport const CommentsServiceUpdatePostMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n\nexport const CommentsServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"postId\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\"\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/posts\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"threadId\" : \"90849e9c-b542-4650-b84e-eac104a81468\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"a822e608-48c6-45e3-8b55-dd45c3855861\",\n  \"name\" : \"Any Custom Name\",\n  \"status\" : \"open\",\n  \"createdAt\" : \"2020-02-24T13:36:09.023\",\n  \"archivedAt\" : \"2020-02-24T14:17:33.124\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n\n    ]\n},\n]\n);\n\n\n"],"names":[],"mappings":"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"}