import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

var ThreadDto;
(function (ThreadDto) {
    ThreadDto.StatusEnum = {
        Open: 'open',
        Closed: 'closed',
        Archived: 'archived'
    };
})(ThreadDto || (ThreadDto = {}));

const COMMENTS_BASE_PATH = new InjectionToken('COMMENTS_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class CommentsConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
        if (!this.credentials['bearerAuth']) {
            this.credentials['bearerAuth'] = () => {
                return typeof this.accessToken === 'function'
                    ? this.accessToken()
                    : this.accessToken;
            };
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module CommentsConfiguration');

class CommentsApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('CommentsApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: CommentsApiModule,
            providers: [{ provide: CommentsConfiguration, useFactory: configurationFactory }]
        };
    }
}
CommentsApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CommentsApiModule, deps: [{ token: CommentsApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: CommentsConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
CommentsApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CommentsApiModule });
CommentsApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CommentsApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CommentsApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: CommentsApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: CommentsConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class CommentsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/client-api/comments/v2';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CommentsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    addPost(requestParameters, observe = 'body', reportProgress = false, options) {
        const _threadId = requestParameters["threadId"];
        if (_threadId === null || _threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling addPost.');
        }
        const _postAddDto = requestParameters["postAddDto"];
        if (_postAddDto === null || _postAddDto === undefined) {
            throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');
        }
        let headers = this.defaultHeaders;
        let credential;
        credential = this.configuration.lookupCredential('bearerAuth');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`, _postAddDto, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addPostUrl(requestParameters) {
        const _threadId = requestParameters["threadId"];
        if (_threadId === null || _threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling addPost.');
        }
        const _postAddDto = requestParameters["postAddDto"];
        if (_postAddDto === null || _postAddDto === undefined) {
            throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');
        }
        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`;
    }
    addThread(requestParameters, observe = 'body', reportProgress = false, options) {
        const _threadAddDto = requestParameters["threadAddDto"];
        if (_threadAddDto === null || _threadAddDto === undefined) {
            throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');
        }
        let headers = this.defaultHeaders;
        let credential;
        credential = this.configuration.lookupCredential('bearerAuth');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/comments/v2/threads`, _threadAddDto, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addThreadUrl(requestParameters) {
        const _threadAddDto = requestParameters["threadAddDto"];
        if (_threadAddDto === null || _threadAddDto === undefined) {
            throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');
        }
        return `${this.configuration.basePath}/client-api/comments/v2/threads`;
    }
    deletePost(requestParameters, observe = 'body', reportProgress = false, options) {
        const _threadId = requestParameters["threadId"];
        if (_threadId === null || _threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling deletePost.');
        }
        const _postId = requestParameters["postId"];
        if (_postId === null || _postId === undefined) {
            throw new Error('Required parameter postId was null or undefined when calling deletePost.');
        }
        let headers = this.defaultHeaders;
        let credential;
        credential = this.configuration.lookupCredential('bearerAuth');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePostUrl(requestParameters) {
        const _threadId = requestParameters["threadId"];
        if (_threadId === null || _threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling deletePost.');
        }
        const _postId = requestParameters["postId"];
        if (_postId === null || _postId === undefined) {
            throw new Error('Required parameter postId was null or undefined when calling deletePost.');
        }
        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`;
    }
    getPostList(requestParameters, observe = 'body', reportProgress = false, options) {
        const _threadId = requestParameters["threadId"];
        if (_threadId === null || _threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling getPostList.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let credential;
        credential = this.configuration.lookupCredential('bearerAuth');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPostListUrl(requestParameters) {
        const _threadId = requestParameters["threadId"];
        if (_threadId === null || _threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling getPostList.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts${queryString ? `?${queryString}` : ''}`;
    }
    getPostsByAssociationsList(requestParameters, observe = 'body', reportProgress = false, options) {
        const _entityFilter = requestParameters["entityFilter"];
        if (_entityFilter === null || _entityFilter === undefined) {
            throw new Error('Required parameter entityFilter was null or undefined when calling getPostsByAssociationsList.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_entityFilter !== undefined && _entityFilter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityFilter, 'entityFilter');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let credential;
        credential = this.configuration.lookupCredential('bearerAuth');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/comments/v2/posts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPostsByAssociationsListUrl(requestParameters) {
        const _entityFilter = requestParameters["entityFilter"];
        if (_entityFilter === null || _entityFilter === undefined) {
            throw new Error('Required parameter entityFilter was null or undefined when calling getPostsByAssociationsList.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_entityFilter !== undefined && _entityFilter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityFilter, 'entityFilter');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/comments/v2/posts${queryString ? `?${queryString}` : ''}`;
    }
    getThreadList(requestParameters, observe = 'body', reportProgress = false, options) {
        const _entityFilter = requestParameters["entityFilter"];
        if (_entityFilter === null || _entityFilter === undefined) {
            throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_entityFilter !== undefined && _entityFilter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityFilter, 'entityFilter');
        }
        let headers = this.defaultHeaders;
        let credential;
        credential = this.configuration.lookupCredential('bearerAuth');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/comments/v2/threads`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getThreadListUrl(requestParameters) {
        const _entityFilter = requestParameters["entityFilter"];
        if (_entityFilter === null || _entityFilter === undefined) {
            throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_entityFilter !== undefined && _entityFilter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityFilter, 'entityFilter');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/comments/v2/threads${queryString ? `?${queryString}` : ''}`;
    }
    updatePost(requestParameters, observe = 'body', reportProgress = false, options) {
        const _threadId = requestParameters["threadId"];
        if (_threadId === null || _threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling updatePost.');
        }
        const _postId = requestParameters["postId"];
        if (_postId === null || _postId === undefined) {
            throw new Error('Required parameter postId was null or undefined when calling updatePost.');
        }
        const _postUpdateDto = requestParameters["postUpdateDto"];
        if (_postUpdateDto === null || _postUpdateDto === undefined) {
            throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');
        }
        let headers = this.defaultHeaders;
        let credential;
        credential = this.configuration.lookupCredential('bearerAuth');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`, _postUpdateDto, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updatePostUrl(requestParameters) {
        const _threadId = requestParameters["threadId"];
        if (_threadId === null || _threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling updatePost.');
        }
        const _postId = requestParameters["postId"];
        if (_postId === null || _postId === undefined) {
            throw new Error('Required parameter postId was null or undefined when calling updatePost.');
        }
        const _postUpdateDto = requestParameters["postUpdateDto"];
        if (_postUpdateDto === null || _postUpdateDto === undefined) {
            throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');
        }
        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`;
    }
}
CommentsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CommentsService, deps: [{ token: i1.HttpClient }, { token: COMMENTS_BASE_PATH, optional: true }, { token: CommentsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CommentsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CommentsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CommentsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMMENTS_BASE_PATH]
                }] }, { type: CommentsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const CommentsServiceAddPostMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
const CommentsServiceAddThreadMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "postId": "3fde44a1-0ba8-43e5-85c1-6d496319eaae"
                }
            },
        ]
    }]);
const CommentsServiceDeletePostMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
        ]
    }]);
const CommentsServiceGetPostListMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
const CommentsServiceGetPostsByAssociationsListMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/posts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "threadId": "90849e9c-b542-4650-b84e-eac104a81468",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
const CommentsServiceGetThreadListMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "a822e608-48c6-45e3-8b55-dd45c3855861",
                    "name": "Any Custom Name",
                    "status": "open",
                    "createdAt": "2020-02-24T13:36:09.023",
                    "archivedAt": "2020-02-24T14:17:33.124",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
const CommentsServiceUpdatePostMocksProvider = createMocks([{
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    }]);
const CommentsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "postId": "3fde44a1-0ba8-43e5-85c1-6d496319eaae"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/posts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "threadId": "90849e9c-b542-4650-b84e-eac104a81468",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "a822e608-48c6-45e3-8b55-dd45c3855861",
                    "name": "Any Custom Name",
                    "status": "open",
                    "createdAt": "2020-02-24T13:36:09.023",
                    "archivedAt": "2020-02-24T14:17:33.124",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                    "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                    "createdBy": "Peter Fullname",
                    "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                    "createdAt": "2020-02-24T13:36:04.023",
                    "lastModifiedAt": "2020-02-24T13:45:23.372",
                    "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                    "additions": [{
                            "category": "Support"
                        }]
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, COMMENTS_BASE_PATH, CONFIG_TOKEN, CommentsApiModule, CommentsConfiguration, CommentsService, CommentsServiceAddPostMocksProvider, CommentsServiceAddThreadMocksProvider, CommentsServiceDeletePostMocksProvider, CommentsServiceGetPostListMocksProvider, CommentsServiceGetPostsByAssociationsListMocksProvider, CommentsServiceGetThreadListMocksProvider, CommentsServiceMocksProvider, CommentsServiceUpdatePostMocksProvider, ThreadDto };
//# sourceMappingURL=backbase-comments-v2-client-ang.js.map
