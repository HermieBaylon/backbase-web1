{"version":3,"file":"backbase-comments-v2-client-ang.umd.js","sources":["../../model/threadDto.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/comments.service.ts","../../api/comments.service.mocks.ts"],"sourcesContent":["/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.3.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface ThreadDto { \n    /**\n     * The thread id\n     */\n    [\"id\"]: string;\n    /**\n     * The name of thread\n     */\n    [\"name\"]: string;\n    /**\n     * The thread status\n     */\n    [\"status\"]: ThreadDto.StatusEnum;\n    /**\n     * The creation date of the thread\n     */\n    [\"createdAt\"]: string;\n    /**\n     * The archivation date of the thread\n     */\n    [\"archivedAt\"]?: string;\n    /**\n     * Additional properties\n     */\n    [\"additions\"]?: { [key: string]: string; };\n}\nexport namespace ThreadDto {\n    export type StatusEnum = 'open' | 'closed' | 'archived';\n    export const StatusEnum = {\n        Open: 'open' as StatusEnum,\n        Closed: 'closed' as StatusEnum,\n        Archived: 'archived' as StatusEnum\n    };\n}\n\n\n","import { InjectionToken } from '@angular/core';\n\nexport const COMMENTS_BASE_PATH = new InjectionToken<string>('COMMENTS_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface CommentsConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class CommentsConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: CommentsConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default bearerAuth credential\n        if (!this.credentials['bearerAuth']) {\n            this.credentials['bearerAuth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link CommentsConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link CommentsConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module CommentsConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CommentsConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class CommentsApiModule {\n    public static forRoot(configurationFactory: () => CommentsConfiguration): ModuleWithProviders<CommentsApiModule> {\n        return {\n            ngModule: CommentsApiModule,\n            providers: [ { provide: CommentsConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: CommentsApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: CommentsConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('CommentsApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.3.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { PostAddDto } from '../model/models';\nimport { PostDto } from '../model/models';\nimport { PostUpdateDto } from '../model/models';\nimport { PostWithThreadIdDto } from '../model/models';\nimport { ThreadAddDto } from '../model/models';\nimport { ThreadDto } from '../model/models';\nimport { ThreadIdDto } from '../model/models';\n\nimport { COMMENTS_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { CommentsConfiguration }                                     from '../configuration';\n\n\nexport interface AddPostRequestParams {\n    /** The thread\\&#39;s unique ID */\n    [\"threadId\"]: string;\n    [\"postAddDto\"]: PostAddDto;\n}\n\nexport interface AddThreadRequestParams {\n    [\"threadAddDto\"]: ThreadAddDto;\n}\n\nexport interface DeletePostRequestParams {\n    /** The thread\\&#39;s unique ID */\n    [\"threadId\"]: string;\n    /** The post\\&#39;s unique ID */\n    [\"postId\"]: string;\n}\n\nexport interface GetPostListRequestParams {\n    /** The thread\\&#39;s unique ID */\n    [\"threadId\"]: string;\n    /** Optional pagination parameter for the start item indexed at zero. */\n    [\"from\"]?: number;\n    /** Optional pagination parameter for the number of items per page. */\n    [\"size\"]?: number;\n}\n\nexport interface GetPostsByAssociationsListRequestParams {\n    /** Multiple key-value entities filter. */\n    [\"entityFilter\"]: { [key: string]: string; };\n    /** Optional pagination parameter for the start item indexed at zero. */\n    [\"from\"]?: number;\n    /** Optional pagination parameter for the number of items per page. */\n    [\"size\"]?: number;\n}\n\nexport interface GetThreadListRequestParams {\n    /** Multiple key-value entities filter. */\n    [\"entityFilter\"]: { [key: string]: string; };\n}\n\nexport interface UpdatePostRequestParams {\n    /** The thread\\&#39;s unique ID */\n    [\"threadId\"]: string;\n    /** The post\\&#39;s unique ID */\n    [\"postId\"]: string;\n    [\"postUpdateDto\"]: PostUpdateDto;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService {\n\n    protected basePath = '/client-api/comments/v2';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new CommentsConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(COMMENTS_BASE_PATH) basePath: string, @Optional() configuration: CommentsConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Add a new post.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(requestParameters: AddPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PostDto>;\n    /**\n     * Add a new post.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(requestParameters: AddPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PostDto>>;\n    /**\n     * Add a new post.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(requestParameters: AddPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PostDto>>;\n    /**\n     * Add a new post.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(requestParameters: AddPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling addPost.');\n        }\n        const _postAddDto = requestParameters[\"postAddDto\"];\n        if (_postAddDto === null || _postAddDto === undefined) {\n            throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PostDto>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`,\n            _postAddDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public addPostUrl(requestParameters: AddPostRequestParams): string {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling addPost.');\n        }\n        const _postAddDto = requestParameters[\"postAddDto\"];\n        if (_postAddDto === null || _postAddDto === undefined) {\n            throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');\n        }\n        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`;\n    }\n\n    /**\n     * Add a new thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(requestParameters: AddThreadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ThreadIdDto>;\n    /**\n     * Add a new thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(requestParameters: AddThreadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ThreadIdDto>>;\n    /**\n     * Add a new thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(requestParameters: AddThreadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ThreadIdDto>>;\n    /**\n     * Add a new thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(requestParameters: AddThreadRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadAddDto = requestParameters[\"threadAddDto\"];\n        if (_threadAddDto === null || _threadAddDto === undefined) {\n            throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ThreadIdDto>(`${this.configuration.basePath}/client-api/comments/v2/threads`,\n            _threadAddDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public addThreadUrl(requestParameters: AddThreadRequestParams): string {\n        const _threadAddDto = requestParameters[\"threadAddDto\"];\n        if (_threadAddDto === null || _threadAddDto === undefined) {\n            throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');\n        }\n        return `${this.configuration.basePath}/client-api/comments/v2/threads`;\n    }\n\n    /**\n     * Deletes a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(requestParameters: DeletePostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Deletes a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(requestParameters: DeletePostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Deletes a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(requestParameters: DeletePostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Deletes a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(requestParameters: DeletePostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling deletePost.');\n        }\n        const _postId = requestParameters[\"postId\"];\n        if (_postId === null || _postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling deletePost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deletePostUrl(requestParameters: DeletePostRequestParams): string {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling deletePost.');\n        }\n        const _postId = requestParameters[\"postId\"];\n        if (_postId === null || _postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling deletePost.');\n        }\n        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`;\n    }\n\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;. This API supports pagination. If pagination parameters aren\\&#39;t supplied then all posts are returned.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(requestParameters: GetPostListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PostDto>>;\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;. This API supports pagination. If pagination parameters aren\\&#39;t supplied then all posts are returned.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(requestParameters: GetPostListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PostDto>>>;\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;. This API supports pagination. If pagination parameters aren\\&#39;t supplied then all posts are returned.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(requestParameters: GetPostListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PostDto>>>;\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;. This API supports pagination. If pagination parameters aren\\&#39;t supplied then all posts are returned.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(requestParameters: GetPostListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling getPostList.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<PostDto>>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getPostListUrl(requestParameters: GetPostListRequestParams): string {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling getPostList.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get all posts that belong to multiple provided associations. Sorted by creation date in descending order. This endpoint is paginated using &#x60;from&#x60; with a default value of &#x60;0&#x60; and &#x60;size&#x60; with a default value of &#x60;10&#x60;.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PostWithThreadIdDto>>;\n    /**\n     * Get all posts that belong to multiple provided associations. Sorted by creation date in descending order. This endpoint is paginated using &#x60;from&#x60; with a default value of &#x60;0&#x60; and &#x60;size&#x60; with a default value of &#x60;10&#x60;.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PostWithThreadIdDto>>>;\n    /**\n     * Get all posts that belong to multiple provided associations. Sorted by creation date in descending order. This endpoint is paginated using &#x60;from&#x60; with a default value of &#x60;0&#x60; and &#x60;size&#x60; with a default value of &#x60;10&#x60;.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PostWithThreadIdDto>>>;\n    /**\n     * Get all posts that belong to multiple provided associations. Sorted by creation date in descending order. This endpoint is paginated using &#x60;from&#x60; with a default value of &#x60;0&#x60; and &#x60;size&#x60; with a default value of &#x60;10&#x60;.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _entityFilter = requestParameters[\"entityFilter\"];\n        if (_entityFilter === null || _entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getPostsByAssociationsList.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_entityFilter !== undefined && _entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_entityFilter, 'entityFilter');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<PostWithThreadIdDto>>(`${this.configuration.basePath}/client-api/comments/v2/posts`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getPostsByAssociationsListUrl(requestParameters: GetPostsByAssociationsListRequestParams): string {\n        const _entityFilter = requestParameters[\"entityFilter\"];\n        if (_entityFilter === null || _entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getPostsByAssociationsList.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_entityFilter !== undefined && _entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_entityFilter, 'entityFilter');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/comments/v2/posts${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ThreadDto>>;\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ThreadDto>>>;\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ThreadDto>>>;\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(requestParameters: GetThreadListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _entityFilter = requestParameters[\"entityFilter\"];\n        if (_entityFilter === null || _entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_entityFilter !== undefined && _entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_entityFilter, 'entityFilter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ThreadDto>>(`${this.configuration.basePath}/client-api/comments/v2/threads`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getThreadListUrl(requestParameters: GetThreadListRequestParams): string {\n        const _entityFilter = requestParameters[\"entityFilter\"];\n        if (_entityFilter === null || _entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');\n        }\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_entityFilter !== undefined && _entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_entityFilter, 'entityFilter');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/comments/v2/threads${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Updates a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(requestParameters: UpdatePostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PostDto>;\n    /**\n     * Updates a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(requestParameters: UpdatePostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PostDto>>;\n    /**\n     * Updates a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(requestParameters: UpdatePostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PostDto>>;\n    /**\n     * Updates a specific post for a thread.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(requestParameters: UpdatePostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling updatePost.');\n        }\n        const _postId = requestParameters[\"postId\"];\n        if (_postId === null || _postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling updatePost.');\n        }\n        const _postUpdateDto = requestParameters[\"postUpdateDto\"];\n        if (_postUpdateDto === null || _postUpdateDto === undefined) {\n            throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<PostDto>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`,\n            _postUpdateDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public updatePostUrl(requestParameters: UpdatePostRequestParams): string {\n        const _threadId = requestParameters[\"threadId\"];\n        if (_threadId === null || _threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling updatePost.');\n        }\n        const _postId = requestParameters[\"postId\"];\n        if (_postId === null || _postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling updatePost.');\n        }\n        const _postUpdateDto = requestParameters[\"postUpdateDto\"];\n        if (_postUpdateDto === null || _postUpdateDto === undefined) {\n            throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');\n        }\n        return `${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(_threadId))}/posts/${encodeURIComponent(String(_postId))}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts URL pattern\n*/\nexport const CommentsServiceAddPostMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads URL pattern\n*/\nexport const CommentsServiceAddThreadMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"postId\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId} URL pattern\n*/\nexport const CommentsServiceDeletePostMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts URL pattern\n*/\nexport const CommentsServiceGetPostListMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/posts URL pattern\n*/\nexport const CommentsServiceGetPostsByAssociationsListMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/posts\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"threadId\" : \"90849e9c-b542-4650-b84e-eac104a81468\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads URL pattern\n*/\nexport const CommentsServiceGetThreadListMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"a822e608-48c6-45e3-8b55-dd45c3855861\",\n  \"name\" : \"Any Custom Name\",\n  \"status\" : \"open\",\n  \"createdAt\" : \"2020-02-24T13:36:09.023\",\n  \"archivedAt\" : \"2020-02-24T14:17:33.124\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId} URL pattern\n*/\nexport const CommentsServiceUpdatePostMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n                },\n    ]\n}]);\n\nexport const CommentsServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"postId\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\"\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/posts\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"threadId\" : \"90849e9c-b542-4650-b84e-eac104a81468\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"a822e608-48c6-45e3-8b55-dd45c3855861\",\n  \"name\" : \"Any Custom Name\",\n  \"status\" : \"open\",\n  \"createdAt\" : \"2020-02-24T13:36:09.023\",\n  \"archivedAt\" : \"2020-02-24T14:17:33.124\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"3fde44a1-0ba8-43e5-85c1-6d496319eaae\",\n  \"creatorId\" : \"d04fe6ef-2d28-485d-b987-cc3034687a04\",\n  \"createdBy\" : \"Peter Fullname\",\n  \"content\" : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n  \"createdAt\" : \"2020-02-24T13:36:04.023\",\n  \"lastModifiedAt\" : \"2020-02-24T13:45:23.372\",\n  \"parentId\" : \"6ca0f5d2-182e-4dff-9208-4c237368bd33\",\n  \"additions\" : [ {\n    \"category\" : \"Support\"\n  } ]\n}\n            },\n\n\n\n\n    ]\n},\n]\n);\n\n\n"],"names":["ThreadDto","InjectionToken","NgModule","Optional","SkipSelf","HttpHeaders","HttpParams","Injectable","Inject","createMocks"],"mappings":"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"}