(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/comments-v2-client-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["comments-v2-client-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    exports.ThreadDto = void 0;
    (function (ThreadDto) {
        ThreadDto.StatusEnum = {
            Open: 'open',
            Closed: 'closed',
            Archived: 'archived'
        };
    })(exports.ThreadDto || (exports.ThreadDto = {}));

    var COMMENTS_BASE_PATH = new i0.InjectionToken('COMMENTS_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var CommentsConfiguration = /** @class */ (function () {
        function CommentsConfiguration(configurationParameters) {
            var _this = this;
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
            if (!this.credentials['bearerAuth']) {
                this.credentials['bearerAuth'] = function () {
                    return typeof _this.accessToken === 'function'
                        ? _this.accessToken()
                        : _this.accessToken;
                };
            }
        }
        CommentsConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        CommentsConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        CommentsConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        CommentsConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return CommentsConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module CommentsConfiguration');

    var CommentsApiModule = /** @class */ (function () {
        function CommentsApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('CommentsApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        CommentsApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: CommentsApiModule,
                providers: [{ provide: CommentsConfiguration, useFactory: configurationFactory }]
            };
        };
        return CommentsApiModule;
    }());
    CommentsApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CommentsApiModule, deps: [{ token: CommentsApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: CommentsConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CommentsApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CommentsApiModule });
    CommentsApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CommentsApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CommentsApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: CommentsApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: CommentsConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var CommentsService = /** @class */ (function () {
        function CommentsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/client-api/comments/v2';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new CommentsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        CommentsService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        CommentsService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        CommentsService.prototype.addPost = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _threadId = requestParameters["threadId"];
            if (_threadId === null || _threadId === undefined) {
                throw new Error('Required parameter threadId was null or undefined when calling addPost.');
            }
            var _postAddDto = requestParameters["postAddDto"];
            if (_postAddDto === null || _postAddDto === undefined) {
                throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');
            }
            var headers = this.defaultHeaders;
            var credential;
            credential = this.configuration.lookupCredential('bearerAuth');
            if (credential) {
                headers = headers.set('Authorization', 'Bearer ' + credential);
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/comments/v2/threads/" + encodeURIComponent(String(_threadId)) + "/posts", _postAddDto, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CommentsService.prototype.addPostUrl = function (requestParameters) {
            var _threadId = requestParameters["threadId"];
            if (_threadId === null || _threadId === undefined) {
                throw new Error('Required parameter threadId was null or undefined when calling addPost.');
            }
            var _postAddDto = requestParameters["postAddDto"];
            if (_postAddDto === null || _postAddDto === undefined) {
                throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');
            }
            return this.configuration.basePath + "/client-api/comments/v2/threads/" + encodeURIComponent(String(_threadId)) + "/posts";
        };
        CommentsService.prototype.addThread = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _threadAddDto = requestParameters["threadAddDto"];
            if (_threadAddDto === null || _threadAddDto === undefined) {
                throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');
            }
            var headers = this.defaultHeaders;
            var credential;
            credential = this.configuration.lookupCredential('bearerAuth');
            if (credential) {
                headers = headers.set('Authorization', 'Bearer ' + credential);
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/comments/v2/threads", _threadAddDto, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CommentsService.prototype.addThreadUrl = function (requestParameters) {
            var _threadAddDto = requestParameters["threadAddDto"];
            if (_threadAddDto === null || _threadAddDto === undefined) {
                throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');
            }
            return this.configuration.basePath + "/client-api/comments/v2/threads";
        };
        CommentsService.prototype.deletePost = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _threadId = requestParameters["threadId"];
            if (_threadId === null || _threadId === undefined) {
                throw new Error('Required parameter threadId was null or undefined when calling deletePost.');
            }
            var _postId = requestParameters["postId"];
            if (_postId === null || _postId === undefined) {
                throw new Error('Required parameter postId was null or undefined when calling deletePost.');
            }
            var headers = this.defaultHeaders;
            var credential;
            credential = this.configuration.lookupCredential('bearerAuth');
            if (credential) {
                headers = headers.set('Authorization', 'Bearer ' + credential);
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/comments/v2/threads/" + encodeURIComponent(String(_threadId)) + "/posts/" + encodeURIComponent(String(_postId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CommentsService.prototype.deletePostUrl = function (requestParameters) {
            var _threadId = requestParameters["threadId"];
            if (_threadId === null || _threadId === undefined) {
                throw new Error('Required parameter threadId was null or undefined when calling deletePost.');
            }
            var _postId = requestParameters["postId"];
            if (_postId === null || _postId === undefined) {
                throw new Error('Required parameter postId was null or undefined when calling deletePost.');
            }
            return this.configuration.basePath + "/client-api/comments/v2/threads/" + encodeURIComponent(String(_threadId)) + "/posts/" + encodeURIComponent(String(_postId));
        };
        CommentsService.prototype.getPostList = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _threadId = requestParameters["threadId"];
            if (_threadId === null || _threadId === undefined) {
                throw new Error('Required parameter threadId was null or undefined when calling getPostList.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var credential;
            credential = this.configuration.lookupCredential('bearerAuth');
            if (credential) {
                headers = headers.set('Authorization', 'Bearer ' + credential);
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/comments/v2/threads/" + encodeURIComponent(String(_threadId)) + "/posts", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CommentsService.prototype.getPostListUrl = function (requestParameters) {
            var _threadId = requestParameters["threadId"];
            if (_threadId === null || _threadId === undefined) {
                throw new Error('Required parameter threadId was null or undefined when calling getPostList.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/comments/v2/threads/" + encodeURIComponent(String(_threadId)) + "/posts" + (queryString ? "?" + queryString : '');
        };
        CommentsService.prototype.getPostsByAssociationsList = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _entityFilter = requestParameters["entityFilter"];
            if (_entityFilter === null || _entityFilter === undefined) {
                throw new Error('Required parameter entityFilter was null or undefined when calling getPostsByAssociationsList.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_entityFilter !== undefined && _entityFilter !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityFilter, 'entityFilter');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var credential;
            credential = this.configuration.lookupCredential('bearerAuth');
            if (credential) {
                headers = headers.set('Authorization', 'Bearer ' + credential);
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/comments/v2/posts", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CommentsService.prototype.getPostsByAssociationsListUrl = function (requestParameters) {
            var _entityFilter = requestParameters["entityFilter"];
            if (_entityFilter === null || _entityFilter === undefined) {
                throw new Error('Required parameter entityFilter was null or undefined when calling getPostsByAssociationsList.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_entityFilter !== undefined && _entityFilter !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityFilter, 'entityFilter');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/comments/v2/posts" + (queryString ? "?" + queryString : '');
        };
        CommentsService.prototype.getThreadList = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _entityFilter = requestParameters["entityFilter"];
            if (_entityFilter === null || _entityFilter === undefined) {
                throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_entityFilter !== undefined && _entityFilter !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityFilter, 'entityFilter');
            }
            var headers = this.defaultHeaders;
            var credential;
            credential = this.configuration.lookupCredential('bearerAuth');
            if (credential) {
                headers = headers.set('Authorization', 'Bearer ' + credential);
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/comments/v2/threads", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CommentsService.prototype.getThreadListUrl = function (requestParameters) {
            var _entityFilter = requestParameters["entityFilter"];
            if (_entityFilter === null || _entityFilter === undefined) {
                throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_entityFilter !== undefined && _entityFilter !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityFilter, 'entityFilter');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/comments/v2/threads" + (queryString ? "?" + queryString : '');
        };
        CommentsService.prototype.updatePost = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _threadId = requestParameters["threadId"];
            if (_threadId === null || _threadId === undefined) {
                throw new Error('Required parameter threadId was null or undefined when calling updatePost.');
            }
            var _postId = requestParameters["postId"];
            if (_postId === null || _postId === undefined) {
                throw new Error('Required parameter postId was null or undefined when calling updatePost.');
            }
            var _postUpdateDto = requestParameters["postUpdateDto"];
            if (_postUpdateDto === null || _postUpdateDto === undefined) {
                throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');
            }
            var headers = this.defaultHeaders;
            var credential;
            credential = this.configuration.lookupCredential('bearerAuth');
            if (credential) {
                headers = headers.set('Authorization', 'Bearer ' + credential);
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/comments/v2/threads/" + encodeURIComponent(String(_threadId)) + "/posts/" + encodeURIComponent(String(_postId)), _postUpdateDto, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CommentsService.prototype.updatePostUrl = function (requestParameters) {
            var _threadId = requestParameters["threadId"];
            if (_threadId === null || _threadId === undefined) {
                throw new Error('Required parameter threadId was null or undefined when calling updatePost.');
            }
            var _postId = requestParameters["postId"];
            if (_postId === null || _postId === undefined) {
                throw new Error('Required parameter postId was null or undefined when calling updatePost.');
            }
            var _postUpdateDto = requestParameters["postUpdateDto"];
            if (_postUpdateDto === null || _postUpdateDto === undefined) {
                throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');
            }
            return this.configuration.basePath + "/client-api/comments/v2/threads/" + encodeURIComponent(String(_threadId)) + "/posts/" + encodeURIComponent(String(_postId));
        };
        return CommentsService;
    }());
    CommentsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CommentsService, deps: [{ token: i1__namespace.HttpClient }, { token: COMMENTS_BASE_PATH, optional: true }, { token: CommentsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CommentsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CommentsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CommentsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [COMMENTS_BASE_PATH]
                        }] }, { type: CommentsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var CommentsServiceAddPostMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                        "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "createdBy": "Peter Fullname",
                        "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                        "createdAt": "2020-02-24T13:36:04.023",
                        "lastModifiedAt": "2020-02-24T13:45:23.372",
                        "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        }]);
    var CommentsServiceAddThreadMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "postId": "3fde44a1-0ba8-43e5-85c1-6d496319eaae"
                    }
                },
            ]
        }]);
    var CommentsServiceDeletePostMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
            ]
        }]);
    var CommentsServiceGetPostListMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                        "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "createdBy": "Peter Fullname",
                        "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                        "createdAt": "2020-02-24T13:36:04.023",
                        "lastModifiedAt": "2020-02-24T13:45:23.372",
                        "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        }]);
    var CommentsServiceGetPostsByAssociationsListMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/posts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                        "threadId": "90849e9c-b542-4650-b84e-eac104a81468",
                        "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "createdBy": "Peter Fullname",
                        "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                        "createdAt": "2020-02-24T13:36:04.023",
                        "lastModifiedAt": "2020-02-24T13:45:23.372",
                        "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        }]);
    var CommentsServiceGetThreadListMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "a822e608-48c6-45e3-8b55-dd45c3855861",
                        "name": "Any Custom Name",
                        "status": "open",
                        "createdAt": "2020-02-24T13:36:09.023",
                        "archivedAt": "2020-02-24T14:17:33.124",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        }]);
    var CommentsServiceUpdatePostMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                        "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "createdBy": "Peter Fullname",
                        "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                        "createdAt": "2020-02-24T13:36:04.023",
                        "lastModifiedAt": "2020-02-24T13:45:23.372",
                        "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        }]);
    var CommentsServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                        "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "createdBy": "Peter Fullname",
                        "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                        "createdAt": "2020-02-24T13:36:04.023",
                        "lastModifiedAt": "2020-02-24T13:45:23.372",
                        "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "postId": "3fde44a1-0ba8-43e5-85c1-6d496319eaae"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
            ]
        },
        {
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                        "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "createdBy": "Peter Fullname",
                        "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                        "createdAt": "2020-02-24T13:36:04.023",
                        "lastModifiedAt": "2020-02-24T13:45:23.372",
                        "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/posts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                        "threadId": "90849e9c-b542-4650-b84e-eac104a81468",
                        "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "createdBy": "Peter Fullname",
                        "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                        "createdAt": "2020-02-24T13:36:04.023",
                        "lastModifiedAt": "2020-02-24T13:45:23.372",
                        "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "a822e608-48c6-45e3-8b55-dd45c3855861",
                        "name": "Any Custom Name",
                        "status": "open",
                        "createdAt": "2020-02-24T13:36:09.023",
                        "archivedAt": "2020-02-24T14:17:33.124",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/comments/v2/client-api/comments/v2/threads/{threadId}/posts/{postId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "3fde44a1-0ba8-43e5-85c1-6d496319eaae",
                        "creatorId": "d04fe6ef-2d28-485d-b987-cc3034687a04",
                        "createdBy": "Peter Fullname",
                        "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                        "createdAt": "2020-02-24T13:36:04.023",
                        "lastModifiedAt": "2020-02-24T13:45:23.372",
                        "parentId": "6ca0f5d2-182e-4dff-9208-4c237368bd33",
                        "additions": [{
                                "category": "Support"
                            }]
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.COMMENTS_BASE_PATH = COMMENTS_BASE_PATH;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CommentsApiModule = CommentsApiModule;
    exports.CommentsConfiguration = CommentsConfiguration;
    exports.CommentsService = CommentsService;
    exports.CommentsServiceAddPostMocksProvider = CommentsServiceAddPostMocksProvider;
    exports.CommentsServiceAddThreadMocksProvider = CommentsServiceAddThreadMocksProvider;
    exports.CommentsServiceDeletePostMocksProvider = CommentsServiceDeletePostMocksProvider;
    exports.CommentsServiceGetPostListMocksProvider = CommentsServiceGetPostListMocksProvider;
    exports.CommentsServiceGetPostsByAssociationsListMocksProvider = CommentsServiceGetPostsByAssociationsListMocksProvider;
    exports.CommentsServiceGetThreadListMocksProvider = CommentsServiceGetThreadListMocksProvider;
    exports.CommentsServiceMocksProvider = CommentsServiceMocksProvider;
    exports.CommentsServiceUpdatePostMocksProvider = CommentsServiceUpdatePostMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-comments-v2-client-ang.umd.js.map
