import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PostAddDto } from '../model/models';
import { PostDto } from '../model/models';
import { PostUpdateDto } from '../model/models';
import { PostWithThreadIdDto } from '../model/models';
import { ThreadAddDto } from '../model/models';
import { ThreadDto } from '../model/models';
import { ThreadIdDto } from '../model/models';
import { CommentsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface AddPostRequestParams {
    ["threadId"]: string;
    ["postAddDto"]: PostAddDto;
}
export interface AddThreadRequestParams {
    ["threadAddDto"]: ThreadAddDto;
}
export interface DeletePostRequestParams {
    ["threadId"]: string;
    ["postId"]: string;
}
export interface GetPostListRequestParams {
    ["threadId"]: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetPostsByAssociationsListRequestParams {
    ["entityFilter"]: {
        [key: string]: string;
    };
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetThreadListRequestParams {
    ["entityFilter"]: {
        [key: string]: string;
    };
}
export interface UpdatePostRequestParams {
    ["threadId"]: string;
    ["postId"]: string;
    ["postUpdateDto"]: PostUpdateDto;
}
export declare class CommentsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: CommentsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: CommentsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    addPost(requestParameters: AddPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PostDto>;
    addPost(requestParameters: AddPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PostDto>>;
    addPost(requestParameters: AddPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PostDto>>;
    addPostUrl(requestParameters: AddPostRequestParams): string;
    addThread(requestParameters: AddThreadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ThreadIdDto>;
    addThread(requestParameters: AddThreadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ThreadIdDto>>;
    addThread(requestParameters: AddThreadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ThreadIdDto>>;
    addThreadUrl(requestParameters: AddThreadRequestParams): string;
    deletePost(requestParameters: DeletePostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deletePost(requestParameters: DeletePostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deletePost(requestParameters: DeletePostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deletePostUrl(requestParameters: DeletePostRequestParams): string;
    getPostList(requestParameters: GetPostListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PostDto>>;
    getPostList(requestParameters: GetPostListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PostDto>>>;
    getPostList(requestParameters: GetPostListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PostDto>>>;
    getPostListUrl(requestParameters: GetPostListRequestParams): string;
    getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PostWithThreadIdDto>>;
    getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PostWithThreadIdDto>>>;
    getPostsByAssociationsList(requestParameters: GetPostsByAssociationsListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PostWithThreadIdDto>>>;
    getPostsByAssociationsListUrl(requestParameters: GetPostsByAssociationsListRequestParams): string;
    getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ThreadDto>>;
    getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ThreadDto>>>;
    getThreadList(requestParameters: GetThreadListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ThreadDto>>>;
    getThreadListUrl(requestParameters: GetThreadListRequestParams): string;
    updatePost(requestParameters: UpdatePostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PostDto>;
    updatePost(requestParameters: UpdatePostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PostDto>>;
    updatePost(requestParameters: UpdatePostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PostDto>>;
    updatePostUrl(requestParameters: UpdatePostRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CommentsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CommentsService>;
}
