import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Component, ChangeDetectionStrategy, Input, EventEmitter, Output, ViewChild, NgModule } from '@angular/core';
import * as i7 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i1$6 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1$4 from '@backbase/billpay-journeys-common';
import { RECURRING_PAYMENT, ONE_OFF_PAYMENT, Direction, BillpayEnrolmentGuard, BillpayJourneysCommonModule } from '@backbase/billpay-journeys-common';
import '@angular/localize/init';
import * as i1$1 from '@backbase/data-ang/billpay';
import { of, Subject, combineLatest, throwError } from 'rxjs';
import { map, tap, catchError, takeUntil, switchMap, shareReplay } from 'rxjs/operators';
import * as i2 from '@backbase/ui-ang/header';
import * as i1$3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i1$2 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i3 from '@backbase/ui-ang/amount';
import * as i4 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i5 from '@backbase/ui-ang/loading-indicator';
import * as i6 from '@backbase/ui-ang/empty-state';
import * as i5$1 from '@backbase/ui-ang/notification';
import * as i6$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i8 from '@backbase/ui-ang/button';
import * as i1$5 from '@backbase/ui-ang/modal';

const ManageBillPaymentsJourneyConfigurationToken = new InjectionToken('ManageBillPaymentsJourneyJourneyConfiguration injection token');
var PaymentsFilterStatus$1;
(function (PaymentsFilterStatus) {
    PaymentsFilterStatus["PENDING"] = "PENDING";
    PaymentsFilterStatus["HISTORICAL"] = "HISTORICAL";
    PaymentsFilterStatus["ALL"] = "ALL";
})(PaymentsFilterStatus$1 || (PaymentsFilterStatus$1 = {}));
const configDefaults = {
    notificationDismissTime: 5000,
    pageSize: 0,
    pageFilter: PaymentsFilterStatus$1.PENDING,
    accountNumberMasked: false,
    pageTitle: $localize `:@@manage-bill-payments.page-title:Pending payments`,
};
class ManageBillPaymentsJourneyConfigService {
    constructor(config) {
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
    }
    get defaults() {
        return configDefaults;
    }
    get notificationDismissTime() {
        return this._config.notificationDismissTime;
    }
    get pageSize() {
        return this._config.pageSize;
    }
    get pageFilter() {
        return this._config.pageFilter;
    }
    get accountNumberMasked() {
        return this._config.accountNumberMasked;
    }
    get pageTitle() {
        return this._config.pageTitle;
    }
}
ManageBillPaymentsJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyConfigService, deps: [{ token: ManageBillPaymentsJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManageBillPaymentsJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ManageBillPaymentsJourneyConfigurationToken]
                }] }]; } });

class CommunicationService {
}

class ManageBillPaymentsNavigationService {
    constructor(router, route, communicationService) {
        this.router = router;
        this.route = route;
        this.communicationService = communicationService;
    }
    navigateToPayment(id, isRecurring = false) {
        const paymentType = isRecurring ? RECURRING_PAYMENT : ONE_OFF_PAYMENT;
        this.router.navigate([id], { queryParams: { type: paymentType }, relativeTo: this.route });
    }
    navigateToPaymentsList(filter) {
        if (this.communicationService) {
            filter === PaymentsFilterStatus$1.HISTORICAL
                ? this.communicationService.navigateToPaymentsHistory()
                : this.communicationService.navigateToPaymentsList();
        }
        else {
            this.router.navigate(['./']);
        }
    }
    navigateToEditRecurringPayment(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToEditRecurringPayment(id);
    }
    navigateToEditOneOffPayment(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToEditOneOffPayment(id);
    }
}
ManageBillPaymentsNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManageBillPaymentsNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });

var PaymentStatus;
(function (PaymentStatus) {
    PaymentStatus["PENDING"] = "PENDING";
    PaymentStatus["INPROCESS"] = "INPROCESS";
    PaymentStatus["PROCESSED"] = "PROCESSED";
    PaymentStatus["FAILED"] = "FAILED";
    PaymentStatus["CANCELED"] = "CANCELED";
    PaymentStatus["UNAPPROVED"] = "UNAPPROVED";
})(PaymentStatus || (PaymentStatus = {}));
var PaymentsFilterStatus;
(function (PaymentsFilterStatus) {
    PaymentsFilterStatus["PENDING"] = "PENDING";
    PaymentsFilterStatus["HISTORICAL"] = "HISTORICAL";
    PaymentsFilterStatus["ALL"] = "ALL";
})(PaymentsFilterStatus || (PaymentsFilterStatus = {}));

class ManageBillPaymentsDataService {
    /** @internal */
    constructor(paymentsData, payeesData) {
        this.paymentsData = paymentsData;
        this.payeesData = payeesData;
    }
    getPayments(pageSize, paymentFilter) {
        const getDirection = (status) => status === PaymentsFilterStatus.PENDING ? Direction.ASC : Direction.DESC;
        return this.paymentsData.getBillPayPayments(Object.assign({ status: paymentFilter, direction: getDirection(paymentFilter) }, (pageSize && { size: pageSize })));
    }
    getPayment(id, paymentType = ONE_OFF_PAYMENT) {
        return paymentType === ONE_OFF_PAYMENT
            ? this.paymentsData.getPaymentById({ id })
            : this.paymentsData.getRecurringPaymentById({ id });
    }
    getPayee(id) {
        return this.payeesData.getPayeeById({ id });
    }
    deletePayment(id, paymentType = ONE_OFF_PAYMENT) {
        return paymentType === ONE_OFF_PAYMENT
            ? this.paymentsData.deletePaymentById({ id })
            : this.paymentsData.deleteRecurringPaymentById({ id });
    }
}
ManageBillPaymentsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsDataService, deps: [{ token: i1$1.BillPayPaymentsService }, { token: i1$1.BillPayPayeesService }], target: i0.ɵɵFactoryTarget.Injectable });
ManageBillPaymentsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.BillPayPaymentsService }, { type: i1$1.BillPayPayeesService }]; } });

class BillpayPaymentStatusBadgeComponent {
    constructor() {
        this.paymentStatus = PaymentStatus;
    }
}
BillpayPaymentStatusBadgeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentStatusBadgeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentStatusBadgeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentStatusBadgeComponent, selector: "bb-billpay-payment-status-badge", inputs: { status: "status" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"status\">\n  <bb-badge-ui\n    *ngSwitchCase=\"paymentStatus.INPROCESS\"\n    text=\"In progress\"\n    i18n-text=\"In process badge@@billpay-payment-badge.inprocess\"\n  ></bb-badge-ui>\n  <bb-badge-ui\n    *ngSwitchCase=\"paymentStatus.PENDING\"\n    color=\"warning\"\n    text=\"Pending\"\n    i18n-text=\"Pending badge@@billpay-payment-badge.pending\"\n  ></bb-badge-ui>\n  <bb-badge-ui\n    *ngSwitchCase=\"paymentStatus.FAILED\"\n    color=\"danger\"\n    text=\"Failed\"\n    i18n-text=\"Failed badge@@billpay-payment-badge.failed\"\n  ></bb-badge-ui>\n  <bb-badge-ui\n    *ngSwitchCase=\"paymentStatus.CANCELED\"\n    color=\"danger\"\n    text=\"Canceled\"\n    i18n-text=\"Canceled badge@@billpay-payment-badge.canceled\"\n  ></bb-badge-ui>\n  <bb-badge-ui\n    *ngSwitchCase=\"paymentStatus.UNAPPROVED\"\n    color=\"danger\"\n    text=\"Unapproved\"\n    i18n-text=\"Unapproved badge@@billpay-payment-badge.unapproved\"\n  ></bb-badge-ui>\n  <bb-badge-ui\n    *ngSwitchCase=\"paymentStatus.PROCESSED\"\n    color=\"success\"\n    text=\"Processed\"\n    i18n-text=\"Processed badge@@billpay-payment-badge.processed\"\n  ></bb-badge-ui>\n</ng-container>\n", components: [{ type: i1$2.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i7.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i7.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentStatusBadgeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-status-badge',
                    templateUrl: './billpay-payment-status-badge.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { status: [{
                type: Input
            }] } });

class BillpayPaymentCardComponent {
    constructor() {
        /**
         * Defines whether this is a negative number to be prepended with a `-` character. Defaults to false.
         */
        this.isNegativeAmount = false;
    }
    getFormattedAmount(amount) {
        return `${this.isNegativeAmount ? '-' : ''}${amount}`;
    }
}
BillpayPaymentCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentCardComponent, selector: "bb-billpay-payment-card", inputs: { payment: "payment", isNegativeAmount: "isNegativeAmount" }, ngImport: i0, template: "<div class=\"bb-stack\">\n  <div class=\"bb-stack__item bb-stack__item--fill\" *ngIf=\"payment\" data-role=\"payment-item\">\n    <div class=\"bb-stack bb-stack--wrap\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div data-role=\"payment-item-title\" class=\"bb-text-bold\">\n          {{ payment.payeeNickName || payment.payeeName }}\n        </div>\n        <div class=\"bb-stack bb-stack--align-top\" *ngIf=\"payment.recurring\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n            <bb-icon-ui\n              data-role=\"payment-item-recurring-icon\"\n              size=\"sm\"\n              name=\"repeat\"\n              color=\"secondary\"\n            ></bb-icon-ui>\n          </div>\n          <div\n            class=\"bb-stack__item bb-subtitle bb-text-support\"\n            data-role=\"payment-item-recurring-label\"\n            i18n=\"Recurring payments frequency@@billpay-payment-card.recurring.frequency\"\n          >\n            Recurring { payment.frequency, select, WEEKLY {weekly} EVERY_2_WEEKS {every 2 weeks} EVERY_4_WEEKS {every\n            4 weeks} TWICE_A_MONTH {twice a month} MONTHLY {monthly} EVERY_2_MONTHS {every 2 months} EVERY_3_MONTHS\n            {every 3 months} EVERY_4_MONTHS {every 4 months} EVERY_6_MONTHS {every 6 months} ANNUALLY {annually} }\n          </div>\n        </div>\n      </div>\n      <div class=\"bb-stack__break bb-stack__break--sm-down\"></div>\n      <bb-billpay-payment-status-badge\n        class=\"bb-stack__item bb-text-align-right bb-text-align-left--sm-down\"\n        [status]=\"payment.status\"\n        data-role=\"payment-item-badge\"\n      ></bb-billpay-payment-status-badge>\n    </div>\n  </div>\n\n  <div class=\"col-4 col-md-3 col-lg-2 bb-stack__item bb-text-align-right\" data-role=\"payment-item-amount\">\n    <bb-amount-ui\n      class=\"bb-text-bold\"\n      data-role=\"amount\"\n      [amount]=\"payment && getFormattedAmount(payment.amount.amount)\"\n    >\n    </bb-amount-ui>\n  </div>\n</div>\n", components: [{ type: i1$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: BillpayPaymentStatusBadgeComponent, selector: "bb-billpay-payment-status-badge", inputs: ["status"] }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-card',
                    templateUrl: './billpay-payment-card.component.html',
                }]
        }], propDecorators: { payment: [{
                type: Input
            }], isNegativeAmount: [{
                type: Input
            }] } });

var DateLabel;
(function (DateLabel) {
    DateLabel["yesterday"] = "yesterday";
    DateLabel["today"] = "today";
    DateLabel["tomorrow"] = "tomorrow";
})(DateLabel || (DateLabel = {}));
class BillpayPaymentsGroupComponent {
    /** @internal */
    constructor(router) {
        this.router = router;
    }
    getDateLabel(date) {
        const day = 1000 * 60 * 60 * 24;
        const today = new Date().setHours(0, 0, 0, 0);
        const targetDay = new Date(date).setHours(0, 0, 0, 0);
        const daysDiff = Math.round((targetDay - today) / day);
        switch (daysDiff) {
            case -1:
                return DateLabel.yesterday;
            case 0:
                return DateLabel.today;
            case 1:
                return DateLabel.tomorrow;
            default:
                return;
        }
    }
    navigateToPayment(id, isRecurring) {
        this.router.navigateToPayment(id, isRecurring);
    }
}
BillpayPaymentsGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentsGroupComponent, deps: [{ token: ManageBillPaymentsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentsGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentsGroupComponent, selector: "bb-billpay-payments-group", inputs: { paymentsGroup: "paymentsGroup" }, ngImport: i0, template: "<section>\n  <div role=\"heading\" aria-level=\"2\" attr.id=\"payments-group-heading-{{paymentsGroup?.payments[0]?.id}}\" data-role=\"date-label\" class=\"bb-text-support bb-subheader bb-block bb-block--lg\">\n    <ng-container\n      *ngIf=\"getDateLabel(paymentsGroup?.date) as date; else formattedDate\"\n      i18n=\"Date label for payments group@@billpay-payments.payments-group.date-label\"\n    >\n      { date, select, yesterday {Yesterday} today {Today} tomorrow {Tomorrow} }\n    </ng-container>\n    <ng-template #formattedDate>{{ paymentsGroup?.date | bbDate: 'MMMM d' }}</ng-template>\n  </div>\n  <ul class=\"bb-list\" attr.aria-labelledby=\"payments-group-heading-{{paymentsGroup?.payments[0]?.id}}\">\n    <li\n      class=\"bb-list__item bb-list__item--no-separator\"\n      *ngFor=\"let payment of paymentsGroup?.payments\"\n    >\n      <bb-billpay-payment-card\n        tabindex=\"0\"\n        role=\"button\"\n        [payment]=\"payment\"\n        isNegativeAmount=\"true\"\n        (click)=\"navigateToPayment(payment.id, payment.recurring)\"\n        (keydown.enter)=\"navigateToPayment(payment.id, payment.recurring)\"\n      ></bb-billpay-payment-card>\n    </li>\n  </ul>\n</section>", components: [{ type: BillpayPaymentCardComponent, selector: "bb-billpay-payment-card", inputs: ["payment", "isNegativeAmount"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "bbDate": i4.BbDatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentsGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payments-group',
                    templateUrl: './billpay-payments-group.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManageBillPaymentsNavigationService }]; }, propDecorators: { paymentsGroup: [{
                type: Input
            }] } });

class BillPayPaymentsListViewComponent {
    /** @internal */
    constructor(dataService, config) {
        this.dataService = dataService;
        this.config = config;
        this.hasLoadingError = false;
        /**
         * Array of payments details. Groups by date.
         */
        this.paymentsByDate = [];
    }
    ngOnInit() {
        this.payments$ = this.dataService.getPayments(this.config.pageSize, this.config.pageFilter).pipe(map(({ payments }) => payments), tap(paymentsData => {
            this.paymentsByDate = this.groupPaymentsByDate(paymentsData);
        }), catchError(() => {
            this.hasLoadingError = true;
            return of([]);
        }));
    }
    groupPaymentsByDate(payments) {
        const reducer = (groups, payment) => {
            const lastGroup = groups[groups.length - 1];
            const { paymentDate } = payment;
            if (lastGroup && this.isSameDay(lastGroup.date, paymentDate)) {
                lastGroup.payments.push(payment);
            }
            else {
                groups.push({
                    date: paymentDate,
                    payments: [payment],
                });
            }
            return groups;
        };
        return payments.reduce(reducer, []);
    }
    isSameDay(date1, date2) {
        const day1 = new Date(date1).setHours(0, 0, 0, 0);
        const day2 = new Date(date2).setHours(0, 0, 0, 0);
        return day1 === day2;
    }
}
BillPayPaymentsListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentsListViewComponent, deps: [{ token: ManageBillPaymentsDataService }, { token: ManageBillPaymentsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
BillPayPaymentsListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillPayPaymentsListViewComponent, selector: "bb-billpay-list-view", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n    <bb-header-ui\n    headingType=\"h1\"\n    [heading]=\"config.pageTitle\"\n    i18n-heading=\"@@billpay-payments-journey.payments-list-view\"\n    ></bb-header-ui>\n</div>\n\n<ng-container *ngIf=\"(payments$ | async) as payments; else loadingState\">\n  <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n    <ng-container *ngIf=\"payments.length; else emptyState\">\n      <section>\n        <ul class=\"card card-lg bb-list\">\n          <li class=\"card-section\" *ngFor=\"let paymentsGroup of paymentsByDate\">\n            <bb-billpay-payments-group [paymentsGroup]=\"paymentsGroup\"></bb-billpay-payments-group>\n          </li>\n        </ul>\n      </section>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error-outline\"\n          title=\"Payments list is not loading\"\n          i18n-title=\"Payments list is not loading title@@billpay-payments.error-state.title\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"Payments list is not loading subtitle@@billpay-payments.error-state.subtitle\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-empty-state-ui\n          data-role=\"empty-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"payments\"\n          title=\"No bill payments\"\n          i18n-title=\"No payments state title@@billpay-payments.empty-state.title\"\n          subtitle=\"You don't have any bill payments to display\"\n          i18n-subtitle=\"No payments state subtitle@@billpay-payments.empty-state.subtitle\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentsGroupComponent, selector: "bb-billpay-payments-group", inputs: ["paymentsGroup"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i7.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentsListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-list-view',
                    templateUrl: './billpay-payments-list-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManageBillPaymentsDataService }, { type: ManageBillPaymentsJourneyConfigService }]; } });

class BillpayPaymentDetailsComponent {
    /** @internal */
    constructor(paymentParserService) {
        this.paymentParserService = paymentParserService;
        /**
         * Whether the account number should be masked. Defaults to true.
         */
        this.accountNumberMasked = true;
        this.paymentCancelling = new EventEmitter();
        this.paymentEditing = new EventEmitter();
        this.paymentStatus = PaymentStatus;
    }
    parseToReview(payment, payee) {
        return this.paymentParserService.paymentAndPayeeResponsesToReview(payment, payee);
    }
    cancelPayment() {
        this.paymentCancelling.emit();
    }
    editPayment(payment) {
        this.paymentEditing.next({
            id: payment.id,
            recurring: payment.recurring,
        });
    }
}
BillpayPaymentDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentDetailsComponent, deps: [{ token: i1$4.BillpayPaymentParserService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentDetailsComponent, selector: "bb-billpay-payment-details", inputs: { payment: "payment", payee: "payee", accountNumberMasked: "accountNumberMasked" }, outputs: { paymentCancelling: "paymentCancelling", paymentEditing: "paymentEditing" }, ngImport: i0, template: "<div class=\"card card-lg\">\n  <div class=\"card-section\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-header-ui\n        data-role=\"payee-name\"\n        headingType=\"h2\"\n        heading=\"{{\n          (payment?.payeeNickName && payment?.payeeNickName + ' (' + payment?.payeeName + ')') || payment?.payeeName\n        }}\"\n      >\n      </bb-header-ui>\n    </div>\n    <div class=\"bb-block bb-block--xl\">\n      <div class=\"bb-stack\">\n        <bb-amount-ui\n          class=\"bb-stack__item bb-text-bold\"\n          data-role=\"payment-amount\"\n          [amount]=\"-payment?.amount?.amount\"\n        >\n        </bb-amount-ui>\n        <div class=\"bb-stack__item\">\n          <bb-billpay-payment-status-badge\n            [status]=\"payment?.status\"\n            data-role=\"payment-status\"\n          ></bb-billpay-payment-status-badge>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"bb-block {{\n        payment?.recurring || payment?.paymentAccount?.accountNickName ? 'bb-block--sm' : 'bb-block--lg'\n      }}\"\n    >\n      <div class=\"bb-stack\">\n        <bb-icon-ui\n          class=\"bb-stack__item bb-stack__item--spacing-sm\"\n          name=\"calendar-today\"\n          color=\"muted\"\n        ></bb-icon-ui>\n        <span class=\"bb-stack__item\" data-role=\"payment-date\">{{ payment?.paymentDate | bbDate: 'fullDate' }}</span>\n      </div>\n    </div>\n    <div\n      class=\"bb-block {{ payment?.recurring ? 'bb-block--sm' : 'bb-block--lg' }}\"\n      *ngIf=\"payment?.paymentAccount?.accountNickName\"\n    >\n      <div class=\"bb-stack\">\n        <bb-icon-ui\n          class=\"bb-stack__item bb-stack__item--spacing-sm\"\n          name=\"savings-accounts\"\n          color=\"muted\"\n        ></bb-icon-ui>\n        <span class=\"bb-stack__item\" data-role=\"payment-account-nickname\">{{\n          payment?.paymentAccount?.accountNickName\n        }}</span>\n      </div>\n    </div>\n\n    <div\n      class=\"{{\n        payment?.status === paymentStatus.INPROCESS || payment?.status === paymentStatus.PENDING\n          ? 'bb-block bb-block--lg'\n          : ''\n      }}\"\n      *ngIf=\"payment && payment?.recurring && payment?.frequency\"\n    >\n      <div class=\"bb-stack\" *ngIf=\"payment?.frequency\">\n        <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-sm\" name=\"repeat\" color=\"muted\"></bb-icon-ui>\n        <span\n          class=\"bb-stack__item\"\n          data-role=\"payment-recurring-label\"\n          i18n=\"recurring monthly label@@billpay-payment-details.recurring-frequency\"\n          >Recurring { payment?.frequency, select, WEEKLY {weekly} EVERY_2_WEEKS {every 2 weeks} EVERY_4_WEEKS {every 4\n          weeks} TWICE_A_MONTH {twice a month} MONTHLY {monthly} EVERY_2_MONTHS {every 2 months} EVERY_3_MONTHS {every\n          3 months} EVERY_4_MONTHS {every 4 months} EVERY_6_MONTHS {every 6 months} ANNUALLY {annually} }\n        </span>\n      </div>\n    </div>\n    <div *ngIf=\"payment?.status === paymentStatus.INPROCESS\">\n      <bb-alert-ui\n        modifier=\"info\"\n        title=\"Payment in progress, it cannot be edited or canceled\"\n        i18n-title=\"alert title|Payment in process alert@@billpay-payment-details.in-progress-alert\"\n        data-role=\"alert-message\"\n      >\n      </bb-alert-ui>\n    </div>\n\n    <div *ngIf=\"payment && payment.status === paymentStatus.PENDING\" data-role=\"payment-buttons\" class=\"bb-stack\">\n      <button\n        bbButton\n        data-role=\"edit-payment-button\"\n        i18n=\"Label for button|Edit payment button@@billpay-payment-details.edit.button\"\n        color=\"secondary\"\n        (click)=\"editPayment(payment)\"\n        class=\"bb-stack__item\"\n      >\n        Edit payment\n      </button>\n      <button\n        bbButton\n        data-role=\"cancel-payment-button\"\n        i18n=\"Label for button|Cancel payment button@@billpay-payment-details.cancel.button\"\n        color=\"danger\"\n        (click)=\"cancelPayment()\"\n        class=\"bb-stack__item\"\n      >\n        Cancel payment\n      </button>\n    </div>\n  </div>\n\n  <div class=\"card-section\" *ngIf=\"payment && payee\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-header-ui\n        headingType=\"h2\"\n        heading=\"Full details\"\n        i18n-heading=\"Full details caption@@billpay-payment-details.full-details\"\n      >\n      </bb-header-ui>\n    </div>\n    <bb-billpay-payment-review-card\n      [paymentReview]=\"parseToReview(payment, payee)\"\n      [accountNumberMask]=\"accountNumberMasked\"\n    >\n    </bb-billpay-payment-review-card>\n  </div>\n</div>\n", components: [{ type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: BillpayPaymentStatusBadgeComponent, selector: "bb-billpay-payment-status-badge", inputs: ["status"] }, { type: i1$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1$4.BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: ["paymentReview", "accountNumberMask", "frequencyLabel"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "bbDate": i4.BbDatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-details',
                    templateUrl: './billpay-payment-details.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$4.BillpayPaymentParserService }]; }, propDecorators: { payment: [{
                type: Input
            }], payee: [{
                type: Input
            }], accountNumberMasked: [{
                type: Input
            }], paymentCancelling: [{
                type: Output
            }], paymentEditing: [{
                type: Output
            }] } });

class BillpayPaymentsDeleteModalComponent {
    constructor() {
        this.resolve = new EventEmitter();
    }
    resolveModal(resolvedWith) {
        this.resolve.emit(resolvedWith);
    }
}
BillpayPaymentsDeleteModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentsDeleteModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentsDeleteModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentsDeleteModalComponent, selector: "bb-billpay-payments-delete-modal", outputs: { resolve: "resolve" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"true\" (cancel)=\"resolveModal(false)\" data-role=\"delete-payment-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-header-ui\n        data-role=\"delete-payment-modal-header\"\n        headingType=\"h2\"\n        heading=\"Cancel payment?\"\n        i18n-heading=\"Discard changes modal header@@billpay-payments.details.payments-delete-modal.header\"\n      >\n      </bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span\n        i18n=\"Discard changes modal body@@billpay-payments.details.payments-delete-modal.body\"\n        data-role=\"delete-payment-modal-body\"\n        >Are you sure you want to cancel this payment? This action can not be undone.</span\n      >\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"d-flex flex-wrap flex-row-reverse w-100\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"col-sm-auto col-xs-12\"\n          i18n=\"Cancel payment confirmation button@@billpay-payments.details.payments-delete-modal.confirm-button\"\n          (click)=\"resolveModal(true)\"\n          data-role=\"confirm-cancelling-button\"\n        >\n          Cancel payment\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"mt-2 mt-sm-0 mr-sm-3 col-sm-auto col-xs-12\"\n          i18n=\"Keep current payment button@@billpay-payments.details.payments-delete-modal.cancel-button\"\n          (click)=\"resolveModal(false)\"\n          data-role=\"keep-payment-button\"\n        >\n          Keep payment\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$5.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$5.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$5.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$5.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$5.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$5.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$5.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentsDeleteModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payments-delete-modal',
                    templateUrl: './billpay-payments-delete-modal.component.html',
                }]
        }], propDecorators: { resolve: [{
                type: Output
            }] } });

class BillPayPaymentDetailsViewComponent {
    constructor(config, dataService, route, routerService, notificationService) {
        this.config = config;
        this.dataService = dataService;
        this.route = route;
        this.routerService = routerService;
        this.notificationService = notificationService;
        this.notificationHeaderTemplate = '';
        this.notificationMessageTemplate = '';
        this.hasLoadingError = false;
        this.isDeleteModalOpened = false;
        this.id$ = this.route.paramMap.pipe(map(params => params.get('id') || ''));
        this.paymentType$ = this.route.queryParamMap.pipe(map(params => params.get('type') || ONE_OFF_PAYMENT));
        this.destroy$ = new Subject();
        this.payment$ = combineLatest([this.id$, this.paymentType$]).pipe(takeUntil(this.destroy$), switchMap(([id, paymentType]) => this.dataService.getPayment(id, paymentType)), map(({ payment }) => payment), shareReplay(1), catchError(() => {
            this.hasLoadingError = true;
            return of(undefined);
        }));
        this.payee$ = this.payment$.pipe(switchMap(payment => payment && !payment.payeeElectronic && payment.payeeID
            ? this.dataService.getPayee(payment.payeeID)
            : throwError("Payee can't be retrieved")), map(({ payee }) => payee), catchError(() => {
            return of({});
        }));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onPaymentDeleteFlowStarted() {
        this.isDeleteModalOpened = true;
    }
    onEditPayment(payment) {
        if (payment.recurring) {
            this.routerService.navigateToEditRecurringPayment(payment.id);
        }
        else {
            this.routerService.navigateToEditOneOffPayment(payment.id);
        }
    }
    onModalResolve(resolvedWith) {
        const deletePayment$ = this.deletePayment().pipe(tap(() => {
            this.routerService.navigateToPaymentsList(this.config.pageFilter);
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }));
        (resolvedWith ? deletePayment$ : of()).subscribe({
            complete: () => (this.isDeleteModalOpened = false),
        });
    }
    deletePayment() {
        return combineLatest([this.id$, this.paymentType$]).pipe(takeUntil(this.destroy$), switchMap(([id, paymentType]) => this.dataService.deletePayment(id, paymentType)));
    }
    get dismissTimeout() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
}
BillPayPaymentDetailsViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentDetailsViewComponent, deps: [{ token: ManageBillPaymentsJourneyConfigService }, { token: ManageBillPaymentsDataService }, { token: i1.ActivatedRoute }, { token: ManageBillPaymentsNavigationService }, { token: i5$1.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
BillPayPaymentDetailsViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillPayPaymentDetailsViewComponent, selector: "bb-billpay-payment-details-view", viewQueries: [{ propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }], ngImport: i0, template: "<div>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-header-ui\n      headingType=\"h1\"\n      [heading]=\"config.pageTitle\"\n      i18n-heading=\"@@billpay-payments-journey.payment-details-view.title\"\n    ></bb-header-ui>\n  </div>\n  <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n    <ng-container *ngIf=\"{ payment: payment$ | async, payee: payee$ | async } as data; else loadingState\">\n      <section>\n        <bb-billpay-payment-details\n          *ngIf=\"data.payment && data.payee\"\n          [payment]=\"data?.payment\"\n          [payee]=\"data?.payee\"\n          [accountNumberMasked]=\"config.accountNumberMasked\"\n          (paymentCancelling)=\"onPaymentDeleteFlowStarted()\"\n          (paymentEditing)=\"onEditPayment($event)\"\n        ></bb-billpay-payment-details>\n      </section>\n\n      <ng-template #notificationMessage>\n        <span\n          data-role=\"notification-message\"\n          i18n=\"Payee notification message|Payee has created successfully notification@@billpay-payments.details.notification.message\"\n          >Payment to\n          {{ (data.payment?.payeeNickName && data.payment?.payeeNickName + ' (' + data.payment?.payeeName + ')') || data.payment?.payeeName }} has\n          been canceled successfully</span\n        >\n      </ng-template>\n\n    </ng-container>\n  </ng-container>\n</div>\n\n<bb-billpay-payments-delete-modal\n*ngIf=\"isDeleteModalOpened\"\n(resolve)=\"onModalResolve($event)\"\n></bb-billpay-payments-delete-modal>\n\n\n<ng-template #notificationHeader>\n  <span\n    class=\"text-dark\"\n    i18n=\"Payee notification header|Payee created success notification header@@billpay-payments.details.notification.header\"\n  >Payment canceled</span\n></ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error-outline\"\n          title=\"Payment is not loading\"\n          i18n-title=\"Payment list is not loading title@@billpay-payments.details.error-state.title\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"Payment is not loading subtitle@@billpay-payments.details.error-state.subtitle\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentDetailsComponent, selector: "bb-billpay-payment-details", inputs: ["payment", "payee", "accountNumberMasked"], outputs: ["paymentCancelling", "paymentEditing"] }, { type: BillpayPaymentsDeleteModalComponent, selector: "bb-billpay-payments-delete-modal", outputs: ["resolve"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i7.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentDetailsViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-details-view',
                    templateUrl: './billpay-payment-details-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManageBillPaymentsJourneyConfigService }, { type: ManageBillPaymentsDataService }, { type: i1.ActivatedRoute }, { type: ManageBillPaymentsNavigationService }, { type: i5$1.NotificationService }]; }, propDecorators: { notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }] } });

class BillPayEnrolmentViewComponent {
    constructor(config) {
        this.config = config;
    }
}
BillPayEnrolmentViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentViewComponent, deps: [{ token: ManageBillPaymentsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
BillPayEnrolmentViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillPayEnrolmentViewComponent, selector: "bb-billpay-enrolment-view", ngImport: i0, template: `
    <div>
      <div class="bb-block bb-block--lg">
        <bb-header-ui
          headingType="h1"
          heading="Pending Payments"
          i18n-heading="@@billpay-payments-journey.payments-list-view"
        ></bb-header-ui>
      </div>
      <bb-billpay-enrolment [notificationDismissTime]="config?.notificationDismissTime"></bb-billpay-enrolment>
    </div>
  `, isInline: true, components: [{ type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$4.BillpayEnrolmentComponent, selector: "bb-billpay-enrolment", inputs: ["notificationDismissTime"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-enrolment-view',
                    template: `
    <div>
      <div class="bb-block bb-block--lg">
        <bb-header-ui
          headingType="h1"
          heading="Pending Payments"
          i18n-heading="@@billpay-payments-journey.payments-list-view"
        ></bb-header-ui>
      </div>
      <bb-billpay-enrolment [notificationDismissTime]="config?.notificationDismissTime"></bb-billpay-enrolment>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: ManageBillPaymentsJourneyConfigService }]; } });

class ManageBillPaymentsJourneyComponent {
}
ManageBillPaymentsJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManageBillPaymentsJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageBillPaymentsJourneyComponent, selector: "bb-manage-bill-payments-journey", providers: [
        ManageBillPaymentsJourneyConfigService,
        ManageBillPaymentsDataService,
        ManageBillPaymentsNavigationService,
    ], ngImport: i0, template: `<router-outlet></router-outlet>`, isInline: true, directives: [{ type: i1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-bill-payments-journey',
                    template: `<router-outlet></router-outlet>`,
                    providers: [
                        ManageBillPaymentsJourneyConfigService,
                        ManageBillPaymentsDataService,
                        ManageBillPaymentsNavigationService,
                    ],
                }]
        }] });

const uiModules = [IconModule, AlertModule, BadgeModule, BbDatePipeModule];
const services = [ManageBillPaymentsNavigationService, ManageBillPaymentsDataService];
const components = [
    ManageBillPaymentsJourneyComponent,
    BillPayPaymentsListViewComponent,
    BillPayPaymentDetailsViewComponent,
    BillPayEnrolmentViewComponent,
    BillpayPaymentDetailsComponent,
    BillpayPaymentStatusBadgeComponent,
    BillpayPaymentsDeleteModalComponent,
    BillpayPaymentsGroupComponent,
    BillpayPaymentCardComponent,
];
const defaultRoute = {
    path: '',
    component: ManageBillPaymentsJourneyComponent,
    children: [
        { path: 'enrolment', component: BillPayEnrolmentViewComponent },
        {
            path: '',
            canActivate: [BillpayEnrolmentGuard],
            children: [
                { path: '', component: BillPayPaymentsListViewComponent, pathMatch: 'full' },
                { path: ':id', component: BillPayPaymentDetailsViewComponent },
            ],
        },
    ],
};
class ManageBillPaymentsJourneyModule {
    static forRoot(data = { route: defaultRoute }) {
        return {
            ngModule: ManageBillPaymentsJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
ManageBillPaymentsJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ManageBillPaymentsJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyModule, declarations: [ManageBillPaymentsJourneyComponent,
        BillPayPaymentsListViewComponent,
        BillPayPaymentDetailsViewComponent,
        BillPayEnrolmentViewComponent,
        BillpayPaymentDetailsComponent,
        BillpayPaymentStatusBadgeComponent,
        BillpayPaymentsDeleteModalComponent,
        BillpayPaymentsGroupComponent,
        BillpayPaymentCardComponent], imports: [CommonModule,
        RouterModule,
        BillpayJourneysCommonModule, i1$6.BackbaseCoreModule, IconModule, AlertModule, BadgeModule, BbDatePipeModule] });
ManageBillPaymentsJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyModule, providers: [...services], imports: [[
            CommonModule,
            RouterModule,
            BillpayJourneysCommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { ManageBillPaymentsJourneyComponent },
            }),
            ...uiModules,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [
                        CommonModule,
                        RouterModule,
                        BillpayJourneysCommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { ManageBillPaymentsJourneyComponent },
                        }),
                        ...uiModules,
                    ],
                    providers: [...services],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BillPayEnrolmentViewComponent, BillPayPaymentDetailsViewComponent, BillPayPaymentsListViewComponent, CommunicationService as ManageBillPaymentsCommunicationService, ManageBillPaymentsDataService, ManageBillPaymentsJourneyComponent, ManageBillPaymentsJourneyConfigService, ManageBillPaymentsJourneyConfigurationToken, ManageBillPaymentsJourneyModule, ManageBillPaymentsNavigationService, PaymentStatus, PaymentsFilterStatus$1 as PaymentsFilterStatus };
//# sourceMappingURL=backbase-manage-bill-payments-journey-ang.js.map
