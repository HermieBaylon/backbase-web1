import { Component } from '@angular/core';
import { of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/manage-bill-payments-data.service";
import * as i2 from "../../services/manage-bill-payments-journey-config.service";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "../../components/billpay-payments-group/billpay-payments-group.component";
import * as i5 from "@backbase/ui-ang/loading-indicator";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@angular/common";
export class BillPayPaymentsListViewComponent {
    /** @internal */
    constructor(dataService, config) {
        this.dataService = dataService;
        this.config = config;
        this.hasLoadingError = false;
        /**
         * Array of payments details. Groups by date.
         */
        this.paymentsByDate = [];
    }
    ngOnInit() {
        this.payments$ = this.dataService.getPayments(this.config.pageSize, this.config.pageFilter).pipe(map(({ payments }) => payments), tap(paymentsData => {
            this.paymentsByDate = this.groupPaymentsByDate(paymentsData);
        }), catchError(() => {
            this.hasLoadingError = true;
            return of([]);
        }));
    }
    groupPaymentsByDate(payments) {
        const reducer = (groups, payment) => {
            const lastGroup = groups[groups.length - 1];
            const { paymentDate } = payment;
            if (lastGroup && this.isSameDay(lastGroup.date, paymentDate)) {
                lastGroup.payments.push(payment);
            }
            else {
                groups.push({
                    date: paymentDate,
                    payments: [payment],
                });
            }
            return groups;
        };
        return payments.reduce(reducer, []);
    }
    isSameDay(date1, date2) {
        const day1 = new Date(date1).setHours(0, 0, 0, 0);
        const day2 = new Date(date2).setHours(0, 0, 0, 0);
        return day1 === day2;
    }
}
BillPayPaymentsListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentsListViewComponent, deps: [{ token: i1.ManageBillPaymentsDataService }, { token: i2.ManageBillPaymentsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
BillPayPaymentsListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillPayPaymentsListViewComponent, selector: "bb-billpay-list-view", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n    <bb-header-ui\n    headingType=\"h1\"\n    [heading]=\"config.pageTitle\"\n    i18n-heading=\"@@billpay-payments-journey.payments-list-view\"\n    ></bb-header-ui>\n</div>\n\n<ng-container *ngIf=\"(payments$ | async) as payments; else loadingState\">\n  <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n    <ng-container *ngIf=\"payments.length; else emptyState\">\n      <section>\n        <ul class=\"card card-lg bb-list\">\n          <li class=\"card-section\" *ngFor=\"let paymentsGroup of paymentsByDate\">\n            <bb-billpay-payments-group [paymentsGroup]=\"paymentsGroup\"></bb-billpay-payments-group>\n          </li>\n        </ul>\n      </section>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error-outline\"\n          title=\"Payments list is not loading\"\n          i18n-title=\"Payments list is not loading title@@billpay-payments.error-state.title\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"Payments list is not loading subtitle@@billpay-payments.error-state.subtitle\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-empty-state-ui\n          data-role=\"empty-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"payments\"\n          title=\"No bill payments\"\n          i18n-title=\"No payments state title@@billpay-payments.empty-state.title\"\n          subtitle=\"You don't have any bill payments to display\"\n          i18n-subtitle=\"No payments state subtitle@@billpay-payments.empty-state.subtitle\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.BillpayPaymentsGroupComponent, selector: "bb-billpay-payments-group", inputs: ["paymentsGroup"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i7.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentsListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-list-view',
                    templateUrl: './billpay-payments-list-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManageBillPaymentsDataService }, { type: i2.ManageBillPaymentsJourneyConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,