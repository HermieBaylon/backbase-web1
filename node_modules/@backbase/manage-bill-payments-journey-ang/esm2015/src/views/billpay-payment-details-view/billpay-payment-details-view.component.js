import { Component, ViewChild } from '@angular/core';
import { combineLatest, of, Subject, throwError } from 'rxjs';
import { catchError, map, shareReplay, switchMap, takeUntil, tap } from 'rxjs/operators';
import { ONE_OFF_PAYMENT } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "../../services/manage-bill-payments-journey-config.service";
import * as i2 from "../../services/manage-bill-payments-data.service";
import * as i3 from "@angular/router";
import * as i4 from "../../services/manage-bill-payments-navigation.service";
import * as i5 from "@backbase/ui-ang/notification";
import * as i6 from "@backbase/ui-ang/header";
import * as i7 from "../../components/billpay-payment-details/billpay-payment-details.component";
import * as i8 from "../../components/billpay-payments-delete-modal/billpay-payments-delete-modal.component";
import * as i9 from "@backbase/ui-ang/empty-state";
import * as i10 from "@backbase/ui-ang/loading-indicator";
import * as i11 from "@angular/common";
export class BillPayPaymentDetailsViewComponent {
    constructor(config, dataService, route, routerService, notificationService) {
        this.config = config;
        this.dataService = dataService;
        this.route = route;
        this.routerService = routerService;
        this.notificationService = notificationService;
        this.notificationHeaderTemplate = '';
        this.notificationMessageTemplate = '';
        this.hasLoadingError = false;
        this.isDeleteModalOpened = false;
        this.id$ = this.route.paramMap.pipe(map(params => params.get('id') || ''));
        this.paymentType$ = this.route.queryParamMap.pipe(map(params => params.get('type') || ONE_OFF_PAYMENT));
        this.destroy$ = new Subject();
        this.payment$ = combineLatest([this.id$, this.paymentType$]).pipe(takeUntil(this.destroy$), switchMap(([id, paymentType]) => this.dataService.getPayment(id, paymentType)), map(({ payment }) => payment), shareReplay(1), catchError(() => {
            this.hasLoadingError = true;
            return of(undefined);
        }));
        this.payee$ = this.payment$.pipe(switchMap(payment => payment && !payment.payeeElectronic && payment.payeeID
            ? this.dataService.getPayee(payment.payeeID)
            : throwError("Payee can't be retrieved")), map(({ payee }) => payee), catchError(() => {
            return of({});
        }));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onPaymentDeleteFlowStarted() {
        this.isDeleteModalOpened = true;
    }
    onEditPayment(payment) {
        if (payment.recurring) {
            this.routerService.navigateToEditRecurringPayment(payment.id);
        }
        else {
            this.routerService.navigateToEditOneOffPayment(payment.id);
        }
    }
    onModalResolve(resolvedWith) {
        const deletePayment$ = this.deletePayment().pipe(tap(() => {
            this.routerService.navigateToPaymentsList(this.config.pageFilter);
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }));
        (resolvedWith ? deletePayment$ : of()).subscribe({
            complete: () => (this.isDeleteModalOpened = false),
        });
    }
    deletePayment() {
        return combineLatest([this.id$, this.paymentType$]).pipe(takeUntil(this.destroy$), switchMap(([id, paymentType]) => this.dataService.deletePayment(id, paymentType)));
    }
    get dismissTimeout() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
}
BillPayPaymentDetailsViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentDetailsViewComponent, deps: [{ token: i1.ManageBillPaymentsJourneyConfigService }, { token: i2.ManageBillPaymentsDataService }, { token: i3.ActivatedRoute }, { token: i4.ManageBillPaymentsNavigationService }, { token: i5.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
BillPayPaymentDetailsViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillPayPaymentDetailsViewComponent, selector: "bb-billpay-payment-details-view", viewQueries: [{ propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }], ngImport: i0, template: "<div>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-header-ui\n      headingType=\"h1\"\n      [heading]=\"config.pageTitle\"\n      i18n-heading=\"@@billpay-payments-journey.payment-details-view.title\"\n    ></bb-header-ui>\n  </div>\n  <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n    <ng-container *ngIf=\"{ payment: payment$ | async, payee: payee$ | async } as data; else loadingState\">\n      <section>\n        <bb-billpay-payment-details\n          *ngIf=\"data.payment && data.payee\"\n          [payment]=\"data?.payment\"\n          [payee]=\"data?.payee\"\n          [accountNumberMasked]=\"config.accountNumberMasked\"\n          (paymentCancelling)=\"onPaymentDeleteFlowStarted()\"\n          (paymentEditing)=\"onEditPayment($event)\"\n        ></bb-billpay-payment-details>\n      </section>\n\n      <ng-template #notificationMessage>\n        <span\n          data-role=\"notification-message\"\n          i18n=\"Payee notification message|Payee has created successfully notification@@billpay-payments.details.notification.message\"\n          >Payment to\n          {{ (data.payment?.payeeNickName && data.payment?.payeeNickName + ' (' + data.payment?.payeeName + ')') || data.payment?.payeeName }} has\n          been canceled successfully</span\n        >\n      </ng-template>\n\n    </ng-container>\n  </ng-container>\n</div>\n\n<bb-billpay-payments-delete-modal\n*ngIf=\"isDeleteModalOpened\"\n(resolve)=\"onModalResolve($event)\"\n></bb-billpay-payments-delete-modal>\n\n\n<ng-template #notificationHeader>\n  <span\n    class=\"text-dark\"\n    i18n=\"Payee notification header|Payee created success notification header@@billpay-payments.details.notification.header\"\n  >Payment canceled</span\n></ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error-outline\"\n          title=\"Payment is not loading\"\n          i18n-title=\"Payment list is not loading title@@billpay-payments.details.error-state.title\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"Payment is not loading subtitle@@billpay-payments.details.error-state.subtitle\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i6.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i7.BillpayPaymentDetailsComponent, selector: "bb-billpay-payment-details", inputs: ["payment", "payee", "accountNumberMasked"], outputs: ["paymentCancelling", "paymentEditing"] }, { type: i8.BillpayPaymentsDeleteModalComponent, selector: "bb-billpay-payments-delete-modal", outputs: ["resolve"] }, { type: i9.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i10.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i11.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentDetailsViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-details-view',
                    templateUrl: './billpay-payment-details-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManageBillPaymentsJourneyConfigService }, { type: i2.ManageBillPaymentsDataService }, { type: i3.ActivatedRoute }, { type: i4.ManageBillPaymentsNavigationService }, { type: i5.NotificationService }]; }, propDecorators: { notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }] } });
//# sourceMappingURL=data:application/json;base64,