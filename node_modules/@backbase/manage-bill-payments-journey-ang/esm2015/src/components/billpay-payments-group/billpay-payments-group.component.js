import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/manage-bill-payments-navigation.service";
import * as i2 from "../billpay-payment-card/billpay-payment-card.component";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/ui-ang/date-pipe";
export var DateLabel;
(function (DateLabel) {
    DateLabel["yesterday"] = "yesterday";
    DateLabel["today"] = "today";
    DateLabel["tomorrow"] = "tomorrow";
})(DateLabel || (DateLabel = {}));
export class BillpayPaymentsGroupComponent {
    /** @internal */
    constructor(router) {
        this.router = router;
    }
    getDateLabel(date) {
        const day = 1000 * 60 * 60 * 24;
        const today = new Date().setHours(0, 0, 0, 0);
        const targetDay = new Date(date).setHours(0, 0, 0, 0);
        const daysDiff = Math.round((targetDay - today) / day);
        switch (daysDiff) {
            case -1:
                return DateLabel.yesterday;
            case 0:
                return DateLabel.today;
            case 1:
                return DateLabel.tomorrow;
            default:
                return;
        }
    }
    navigateToPayment(id, isRecurring) {
        this.router.navigateToPayment(id, isRecurring);
    }
}
BillpayPaymentsGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentsGroupComponent, deps: [{ token: i1.ManageBillPaymentsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentsGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentsGroupComponent, selector: "bb-billpay-payments-group", inputs: { paymentsGroup: "paymentsGroup" }, ngImport: i0, template: "<section>\n  <div role=\"heading\" aria-level=\"2\" attr.id=\"payments-group-heading-{{paymentsGroup?.payments[0]?.id}}\" data-role=\"date-label\" class=\"bb-text-support bb-subheader bb-block bb-block--lg\">\n    <ng-container\n      *ngIf=\"getDateLabel(paymentsGroup?.date) as date; else formattedDate\"\n      i18n=\"Date label for payments group@@billpay-payments.payments-group.date-label\"\n    >\n      { date, select, yesterday {Yesterday} today {Today} tomorrow {Tomorrow} }\n    </ng-container>\n    <ng-template #formattedDate>{{ paymentsGroup?.date | bbDate: 'MMMM d' }}</ng-template>\n  </div>\n  <ul class=\"bb-list\" attr.aria-labelledby=\"payments-group-heading-{{paymentsGroup?.payments[0]?.id}}\">\n    <li\n      class=\"bb-list__item bb-list__item--no-separator\"\n      *ngFor=\"let payment of paymentsGroup?.payments\"\n    >\n      <bb-billpay-payment-card\n        tabindex=\"0\"\n        role=\"button\"\n        [payment]=\"payment\"\n        isNegativeAmount=\"true\"\n        (click)=\"navigateToPayment(payment.id, payment.recurring)\"\n        (keydown.enter)=\"navigateToPayment(payment.id, payment.recurring)\"\n      ></bb-billpay-payment-card>\n    </li>\n  </ul>\n</section>", components: [{ type: i2.BillpayPaymentCardComponent, selector: "bb-billpay-payment-card", inputs: ["payment", "isNegativeAmount"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "bbDate": i4.BbDatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentsGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payments-group',
                    templateUrl: './billpay-payments-group.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManageBillPaymentsNavigationService }]; }, propDecorators: { paymentsGroup: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1wYXltZW50cy1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21hbmFnZS1iaWxsLXBheW1lbnRzLWpvdXJuZXkvc3JjL2NvbXBvbmVudHMvYmlsbHBheS1wYXltZW50cy1ncm91cC9iaWxscGF5LXBheW1lbnRzLWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLWJpbGwtcGF5bWVudHMtam91cm5leS9zcmMvY29tcG9uZW50cy9iaWxscGF5LXBheW1lbnRzLWdyb3VwL2JpbGxwYXktcGF5bWVudHMtZ3JvdXAuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7OztBQUlqRCxNQUFNLENBQU4sSUFBWSxTQUlYO0FBSkQsV0FBWSxTQUFTO0lBQ25CLG9DQUF1QixDQUFBO0lBQ3ZCLDRCQUFlLENBQUE7SUFDZixrQ0FBcUIsQ0FBQTtBQUN2QixDQUFDLEVBSlcsU0FBUyxLQUFULFNBQVMsUUFJcEI7QUFNRCxNQUFNLE9BQU8sNkJBQTZCO0lBTXhDLGdCQUFnQjtJQUNoQixZQUE2QixNQUEyQztRQUEzQyxXQUFNLEdBQU4sTUFBTSxDQUFxQztJQUFHLENBQUM7SUFFNUUsWUFBWSxDQUFDLElBQVk7UUFDdkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELFFBQVEsUUFBUSxFQUFFO1lBQ2hCLEtBQUssQ0FBQyxDQUFDO2dCQUNMLE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQztZQUM3QixLQUFLLENBQUM7Z0JBQ0osT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ3pCLEtBQUssQ0FBQztnQkFDSixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFDNUI7Z0JBQ0UsT0FBTztTQUNWO0lBQ0gsQ0FBQztJQUVELGlCQUFpQixDQUFDLEVBQVUsRUFBRSxXQUFvQjtRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRCxDQUFDOzsySEE1QlUsNkJBQTZCOytHQUE3Qiw2QkFBNkIsNkdDZDFDLDRyQ0F5QlU7NEZEWEcsNkJBQTZCO2tCQUp6QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLFdBQVcsRUFBRSx5Q0FBeUM7aUJBQ3ZEOzBIQUtVLGFBQWE7c0JBQXJCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYW5hZ2VCaWxsUGF5bWVudHNOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL21hbmFnZS1iaWxsLXBheW1lbnRzLW5hdmlnYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBQYXltZW50c0dyb3VwIH0gZnJvbSAnLi4vLi4vbW9kZWwnO1xuXG5leHBvcnQgZW51bSBEYXRlTGFiZWwge1xuICB5ZXN0ZXJkYXkgPSAneWVzdGVyZGF5JyxcbiAgdG9kYXkgPSAndG9kYXknLFxuICB0b21vcnJvdyA9ICd0b21vcnJvdycsXG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWJpbGxwYXktcGF5bWVudHMtZ3JvdXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vYmlsbHBheS1wYXltZW50cy1ncm91cC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEJpbGxwYXlQYXltZW50c0dyb3VwQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIERldGFpbHMgb2YgdGhlIHBheW1lbnRzIHdpdGhpbiB0aGUgZ3JvdXAuXG4gICAqL1xuICBASW5wdXQoKSBwYXltZW50c0dyb3VwPzogUGF5bWVudHNHcm91cDtcblxuICAvKiogQGludGVybmFsICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcm91dGVyOiBNYW5hZ2VCaWxsUGF5bWVudHNOYXZpZ2F0aW9uU2VydmljZSkge31cblxuICBnZXREYXRlTGFiZWwoZGF0ZTogc3RyaW5nKTogRGF0ZUxhYmVsIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBkYXkgPSAxMDAwICogNjAgKiA2MCAqIDI0O1xuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICBjb25zdCB0YXJnZXREYXkgPSBuZXcgRGF0ZShkYXRlKS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICBjb25zdCBkYXlzRGlmZiA9IE1hdGgucm91bmQoKHRhcmdldERheSAtIHRvZGF5KSAvIGRheSk7XG4gICAgc3dpdGNoIChkYXlzRGlmZikge1xuICAgICAgY2FzZSAtMTpcbiAgICAgICAgcmV0dXJuIERhdGVMYWJlbC55ZXN0ZXJkYXk7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBEYXRlTGFiZWwudG9kYXk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBEYXRlTGFiZWwudG9tb3Jyb3c7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbmF2aWdhdGVUb1BheW1lbnQoaWQ6IHN0cmluZywgaXNSZWN1cnJpbmc6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZVRvUGF5bWVudChpZCwgaXNSZWN1cnJpbmcpO1xuICB9XG59XG4iLCI8c2VjdGlvbj5cbiAgPGRpdiByb2xlPVwiaGVhZGluZ1wiIGFyaWEtbGV2ZWw9XCIyXCIgYXR0ci5pZD1cInBheW1lbnRzLWdyb3VwLWhlYWRpbmcte3twYXltZW50c0dyb3VwPy5wYXltZW50c1swXT8uaWR9fVwiIGRhdGEtcm9sZT1cImRhdGUtbGFiZWxcIiBjbGFzcz1cImJiLXRleHQtc3VwcG9ydCBiYi1zdWJoZWFkZXIgYmItYmxvY2sgYmItYmxvY2stLWxnXCI+XG4gICAgPG5nLWNvbnRhaW5lclxuICAgICAgKm5nSWY9XCJnZXREYXRlTGFiZWwocGF5bWVudHNHcm91cD8uZGF0ZSkgYXMgZGF0ZTsgZWxzZSBmb3JtYXR0ZWREYXRlXCJcbiAgICAgIGkxOG49XCJEYXRlIGxhYmVsIGZvciBwYXltZW50cyBncm91cEBAYmlsbHBheS1wYXltZW50cy5wYXltZW50cy1ncm91cC5kYXRlLWxhYmVsXCJcbiAgICA+XG4gICAgICB7IGRhdGUsIHNlbGVjdCwgeWVzdGVyZGF5IHtZZXN0ZXJkYXl9IHRvZGF5IHtUb2RheX0gdG9tb3Jyb3cge1RvbW9ycm93fSB9XG4gICAgPC9uZy1jb250YWluZXI+XG4gICAgPG5nLXRlbXBsYXRlICNmb3JtYXR0ZWREYXRlPnt7IHBheW1lbnRzR3JvdXA/LmRhdGUgfCBiYkRhdGU6ICdNTU1NIGQnIH19PC9uZy10ZW1wbGF0ZT5cbiAgPC9kaXY+XG4gIDx1bCBjbGFzcz1cImJiLWxpc3RcIiBhdHRyLmFyaWEtbGFiZWxsZWRieT1cInBheW1lbnRzLWdyb3VwLWhlYWRpbmcte3twYXltZW50c0dyb3VwPy5wYXltZW50c1swXT8uaWR9fVwiPlxuICAgIDxsaVxuICAgICAgY2xhc3M9XCJiYi1saXN0X19pdGVtIGJiLWxpc3RfX2l0ZW0tLW5vLXNlcGFyYXRvclwiXG4gICAgICAqbmdGb3I9XCJsZXQgcGF5bWVudCBvZiBwYXltZW50c0dyb3VwPy5wYXltZW50c1wiXG4gICAgPlxuICAgICAgPGJiLWJpbGxwYXktcGF5bWVudC1jYXJkXG4gICAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICBbcGF5bWVudF09XCJwYXltZW50XCJcbiAgICAgICAgaXNOZWdhdGl2ZUFtb3VudD1cInRydWVcIlxuICAgICAgICAoY2xpY2spPVwibmF2aWdhdGVUb1BheW1lbnQocGF5bWVudC5pZCwgcGF5bWVudC5yZWN1cnJpbmcpXCJcbiAgICAgICAgKGtleWRvd24uZW50ZXIpPVwibmF2aWdhdGVUb1BheW1lbnQocGF5bWVudC5pZCwgcGF5bWVudC5yZWN1cnJpbmcpXCJcbiAgICAgID48L2JiLWJpbGxwYXktcGF5bWVudC1jYXJkPlxuICAgIDwvbGk+XG4gIDwvdWw+XG48L3NlY3Rpb24+Il19