import { Injectable } from '@angular/core';
import { PaymentsFilterStatus } from '../model';
import { ONE_OFF_PAYMENT, Direction } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/billpay";
export class ManageBillPaymentsDataService {
    /** @internal */
    constructor(paymentsData, payeesData) {
        this.paymentsData = paymentsData;
        this.payeesData = payeesData;
    }
    getPayments(pageSize, paymentFilter) {
        const getDirection = (status) => status === PaymentsFilterStatus.PENDING ? Direction.ASC : Direction.DESC;
        return this.paymentsData.getBillPayPayments(Object.assign({ status: paymentFilter, direction: getDirection(paymentFilter) }, (pageSize && { size: pageSize })));
    }
    getPayment(id, paymentType = ONE_OFF_PAYMENT) {
        return paymentType === ONE_OFF_PAYMENT
            ? this.paymentsData.getPaymentById({ id })
            : this.paymentsData.getRecurringPaymentById({ id });
    }
    getPayee(id) {
        return this.payeesData.getPayeeById({ id });
    }
    deletePayment(id, paymentType = ONE_OFF_PAYMENT) {
        return paymentType === ONE_OFF_PAYMENT
            ? this.paymentsData.deletePaymentById({ id })
            : this.paymentsData.deleteRecurringPaymentById({ id });
    }
}
ManageBillPaymentsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsDataService, deps: [{ token: i1.BillPayPaymentsService }, { token: i1.BillPayPayeesService }], target: i0.ɵɵFactoryTarget.Injectable });
ManageBillPaymentsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageBillPaymentsDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BillPayPaymentsService }, { type: i1.BillPayPayeesService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLWJpbGwtcGF5bWVudHMtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tYW5hZ2UtYmlsbC1wYXltZW50cy1qb3VybmV5L3NyYy9zZXJ2aWNlcy9tYW5hZ2UtYmlsbC1wYXltZW50cy1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVkzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDaEQsT0FBTyxFQUFlLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBRzVGLE1BQU0sT0FBTyw2QkFBNkI7SUFDeEMsZ0JBQWdCO0lBQ2hCLFlBQ21CLFlBQW9DLEVBQ3BDLFVBQWdDO1FBRGhDLGlCQUFZLEdBQVosWUFBWSxDQUF3QjtRQUNwQyxlQUFVLEdBQVYsVUFBVSxDQUFzQjtJQUNoRCxDQUFDO0lBRUosV0FBVyxDQUFDLFFBQWdCLEVBQUUsYUFBbUM7UUFDL0QsTUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUE0QixFQUFhLEVBQUUsQ0FDL0QsTUFBTSxLQUFLLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUUzRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLGlCQUN6QyxNQUFNLEVBQUUsYUFBYSxFQUNyQixTQUFTLEVBQUUsWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUNuQyxDQUFDLFFBQVEsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUNuQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFVBQVUsQ0FDUixFQUFVLEVBQ1YsY0FBMkIsZUFBZTtRQUUxQyxPQUFPLFdBQVcsS0FBSyxlQUFlO1lBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQzFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsUUFBUSxDQUFDLEVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGFBQWEsQ0FBQyxFQUFVLEVBQUUsY0FBMkIsZUFBZTtRQUNsRSxPQUFPLFdBQVcsS0FBSyxlQUFlO1lBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDN0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7OzJIQW5DVSw2QkFBNkI7K0hBQTdCLDZCQUE2Qjs0RkFBN0IsNkJBQTZCO2tCQUR6QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1xuICBCaWxsUGF5UGF5bWVudHNTZXJ2aWNlLFxuICBCaWxsUGF5UGF5ZWVzU2VydmljZSxcbiAgUGF5ZWVCeUlkR2V0UmVzcG9uc2VCb2R5LFxuICBCaWxsUGF5UGF5bWVudHNHZXRSZXNwb25zZUJvZHksXG4gIFBheW1lbnRCeUlkR2V0UmVzcG9uc2VCb2R5LFxuICBSZWN1cnJpbmdQYXltZW50QnlJZEdldFJlc3BvbnNlQm9keSxcbn0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2JpbGxwYXknO1xuaW1wb3J0IHsgUGF5bWVudHNGaWx0ZXJTdGF0dXMgfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQgeyBQYXltZW50VHlwZSwgT05FX09GRl9QQVlNRU5ULCBEaXJlY3Rpb24gfSBmcm9tICdAYmFja2Jhc2UvYmlsbHBheS1qb3VybmV5cy1jb21tb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWFuYWdlQmlsbFBheW1lbnRzRGF0YVNlcnZpY2Uge1xuICAvKiogQGludGVybmFsICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGF5bWVudHNEYXRhOiBCaWxsUGF5UGF5bWVudHNTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGF5ZWVzRGF0YTogQmlsbFBheVBheWVlc1NlcnZpY2UsXG4gICkge31cblxuICBnZXRQYXltZW50cyhwYWdlU2l6ZTogbnVtYmVyLCBwYXltZW50RmlsdGVyOiBQYXltZW50c0ZpbHRlclN0YXR1cyk6IE9ic2VydmFibGU8QmlsbFBheVBheW1lbnRzR2V0UmVzcG9uc2VCb2R5PiB7XG4gICAgY29uc3QgZ2V0RGlyZWN0aW9uID0gKHN0YXR1czogUGF5bWVudHNGaWx0ZXJTdGF0dXMpOiBEaXJlY3Rpb24gPT5cbiAgICAgIHN0YXR1cyA9PT0gUGF5bWVudHNGaWx0ZXJTdGF0dXMuUEVORElORyA/IERpcmVjdGlvbi5BU0MgOiBEaXJlY3Rpb24uREVTQztcblxuICAgIHJldHVybiB0aGlzLnBheW1lbnRzRGF0YS5nZXRCaWxsUGF5UGF5bWVudHMoe1xuICAgICAgc3RhdHVzOiBwYXltZW50RmlsdGVyLFxuICAgICAgZGlyZWN0aW9uOiBnZXREaXJlY3Rpb24ocGF5bWVudEZpbHRlciksXG4gICAgICAuLi4ocGFnZVNpemUgJiYgeyBzaXplOiBwYWdlU2l6ZSB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIGdldFBheW1lbnQoXG4gICAgaWQ6IHN0cmluZyxcbiAgICBwYXltZW50VHlwZTogUGF5bWVudFR5cGUgPSBPTkVfT0ZGX1BBWU1FTlQsXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEJ5SWRHZXRSZXNwb25zZUJvZHkgfCBSZWN1cnJpbmdQYXltZW50QnlJZEdldFJlc3BvbnNlQm9keT4ge1xuICAgIHJldHVybiBwYXltZW50VHlwZSA9PT0gT05FX09GRl9QQVlNRU5UXG4gICAgICA/IHRoaXMucGF5bWVudHNEYXRhLmdldFBheW1lbnRCeUlkKHsgaWQgfSlcbiAgICAgIDogdGhpcy5wYXltZW50c0RhdGEuZ2V0UmVjdXJyaW5nUGF5bWVudEJ5SWQoeyBpZCB9KTtcbiAgfVxuXG4gIGdldFBheWVlKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFBheWVlQnlJZEdldFJlc3BvbnNlQm9keT4ge1xuICAgIHJldHVybiB0aGlzLnBheWVlc0RhdGEuZ2V0UGF5ZWVCeUlkKHsgaWQgfSk7XG4gIH1cblxuICBkZWxldGVQYXltZW50KGlkOiBzdHJpbmcsIHBheW1lbnRUeXBlOiBQYXltZW50VHlwZSA9IE9ORV9PRkZfUEFZTUVOVCk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+IHtcbiAgICByZXR1cm4gcGF5bWVudFR5cGUgPT09IE9ORV9PRkZfUEFZTUVOVFxuICAgICAgPyB0aGlzLnBheW1lbnRzRGF0YS5kZWxldGVQYXltZW50QnlJZCh7IGlkIH0pXG4gICAgICA6IHRoaXMucGF5bWVudHNEYXRhLmRlbGV0ZVJlY3VycmluZ1BheW1lbnRCeUlkKHsgaWQgfSk7XG4gIH1cbn1cbiJdfQ==