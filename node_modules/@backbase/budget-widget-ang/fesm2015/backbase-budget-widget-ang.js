import * as i0 from '@angular/core';
import { Component, Input, Injectable, EventEmitter, Output, Directive, Optional, ViewChild, NgModule } from '@angular/core';
import * as i1 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i2 from '@swimlane/ngx-charts';
import { PieChartModule } from '@swimlane/ngx-charts';
import * as i12 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$1 from '@backbase/ui-ang/css-variables-lib';
import { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';
import * as i2$1 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2$3 from '@angular/forms';
import { Validators, ReactiveFormsModule } from '@angular/forms';
import * as i4 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { map, switchMap, catchError, flatMap, withLatestFrom, publish } from 'rxjs/operators';
import * as i1$2 from '@backbase/data-ang/categories-management';
import * as i5 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i2$2 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i8 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i10 from '@backbase/ui-ang/currency-input';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';
import * as i11 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import { HttpErrorResponse } from '@angular/common/http';
import { combineLatest, BehaviorSubject, of } from 'rxjs';
import * as i1$3 from '@backbase/data-ang/budgeting';
import * as i3$1 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i7 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import { StepperModule } from '@backbase/ui-ang/stepper';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';

class BudgetCardChartComponent {
    constructor() {
        /**
         * Spending limit of the budget.
         */
        this.spendingLimit = 0;
        /**
         * Currently spent inside a budget.
         */
        this.spent = 0;
        /**
         * Available funds inside a budget.
         */
        this.available = 0;
        /**
         * Budget's currency code.
         */
        this.currencyCode = '';
        /**
         * If set the chart will show a percentage instead of an amount.
         */
        this.showPercentage = false;
        /**
         * Sets the percentage of the safe zone limit of the chart.
         */
        this.safeZoneLimit = 100;
        /**
         * Sets color palette that should be used for rendering the chart.
         */
        this.chartPalette = {
            base: undefined,
            success: undefined,
            warning: undefined,
            danger: undefined,
        };
        this.chartOptions = {
            colorScheme: {
                domain: [''],
            },
            animations: false,
            tooltipDisabled: true,
            doughnut: true,
            explodeSlices: false,
            arcWidth: 0.1,
            gradient: true,
            data: [
                {
                    name: '',
                    value: 1,
                },
            ],
        };
    }
    get isOverBudget() {
        return this.spent > 0 && this.spent > this.spendingLimit;
    }
    fillChartData() {
        if (this.spentPercentage === undefined) {
            return;
        }
        this.chartOptions.animations = true;
        this.chartOptions.data[0].value = Math.round(this.spent);
        if (this.spentPercentage < 100) {
            this.chartOptions.data.unshift({
                name: ' ',
                value: Math.round(this.available),
            });
        }
    }
    setChartPalette() {
        if (this.spentPercentage === undefined) {
            return;
        }
        if (this.spentPercentage >= 100) {
            this.chartOptions.colorScheme.domain = [this.chartPalette.danger || ''];
        }
        else if (this.spentPercentage >= this.safeZoneLimit) {
            this.chartOptions.colorScheme.domain.unshift(this.chartPalette.warning || '');
        }
        else if (this.spentPercentage === 0) {
            this.chartOptions.colorScheme.domain = [this.chartPalette.success || ''];
        }
        else {
            this.chartOptions.colorScheme.domain.unshift(this.chartPalette.success || '');
        }
    }
    ngOnInit() {
        this.chartOptions.colorScheme.domain = [this.chartPalette.base || ''];
        this.fillChartData();
        this.setChartPalette();
    }
}
BudgetCardChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BudgetCardChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BudgetCardChartComponent, selector: "bb-budget-card-chart-ui", inputs: { spendingLimit: "spendingLimit", spent: "spent", spentPercentage: "spentPercentage", available: "available", currencyCode: "currencyCode", showPercentage: "showPercentage", safeZoneLimit: "safeZoneLimit", chartPalette: "chartPalette" }, ngImport: i0, template: "<div class=\"clearfix bb-budget-card-chart bb-text-align-center\">\n  <div class=\"absolute-center\">\n    <bb-amount-ui\n      *ngIf=\"!showPercentage\"\n      [amount]=\"available!\"\n      [currency]=\"currencyCode!\"\n      [decimalPlaces]=\"0\"\n      class=\"bb-highlight\"\n      [ngClass]=\"{\n        'text-success': spentPercentage ? spentPercentage < safeZoneLimit : false,\n        'text-warning': spentPercentage ? spentPercentage >= safeZoneLimit && spentPercentage < 100: false,\n        'text-danger': spentPercentage ? spentPercentage >= 100 : false\n      }\"\n    ></bb-amount-ui>\n\n    <div\n      *ngIf=\"showPercentage\"\n      class=\"bb-highlight\"\n    >\n      {{spentPercentage}} %\n    </div>\n\n    <div>\n      <span\n        *ngIf=\"!isOverBudget\"\n        i18n=\"Left|Left chart label@@budget.chart.left.label\"\n      >\n        Left\n      </span>\n      <span\n        *ngIf=\"isOverBudget\"\n        i18n=\"Over|Over chart label@@budget.chart.over.label\"\n      >\n        Over\n      </span>\n    </div>\n  </div>\n\n  <ngx-charts-pie-chart\n    [scheme]=\"chartOptions.colorScheme\"\n    [results]=\"chartOptions.data\"\n    [animations]=\"chartOptions.animations\"\n    [tooltipDisabled]=\"chartOptions.tooltipDisabled\"\n    [doughnut]=\"chartOptions.doughnut\"\n    [explodeSlices]=\"chartOptions.explodeSlices\"\n    [arcWidth]=\"chartOptions.arcWidth\"\n    [gradient]=\"chartOptions.gradient\"\n  ></ngx-charts-pie-chart>\n</div>\n", components: [{ type: i1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i2.PieChartComponent, selector: "ngx-charts-pie-chart", inputs: ["labels", "legend", "legendTitle", "legendPosition", "explodeSlices", "doughnut", "arcWidth", "activeEntries", "tooltipDisabled", "trimLabels", "maxLabelLength", "margins", "gradient", "labelFormatting", "tooltipText"], outputs: ["dblclick", "select", "activate", "deactivate"] }], directives: [{ type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-budget-card-chart-ui',
                    templateUrl: './budget-card-chart.component.html',
                }]
        }], propDecorators: { spendingLimit: [{
                type: Input
            }], spent: [{
                type: Input
            }], spentPercentage: [{
                type: Input
            }], available: [{
                type: Input
            }], currencyCode: [{
                type: Input
            }], showPercentage: [{
                type: Input
            }], safeZoneLimit: [{
                type: Input
            }], chartPalette: [{
                type: Input
            }] } });

class BudgetCardInfoComponent {
    constructor() {
        /**
         * Sets the percentage of the safe zone limit of the chart.
         */
        this.safeZoneLimit = 0;
    }
    ngOnInit() {
        if (this.data) {
            if (this.data.available) {
                this.data.available.amount = Math.round(parseFloat(this.data.available.amount)).toString();
            }
            if (this.data.spent) {
                this.data.spent.amount = Math.round(parseFloat(this.data.spent.amount)).toString();
            }
            if (this.data.spendingLimit) {
                this.data.spendingLimit.amount = Math.round(parseFloat(this.data.spendingLimit.amount)).toString();
            }
        }
    }
}
BudgetCardInfoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardInfoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BudgetCardInfoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BudgetCardInfoComponent, selector: "bb-budget-card-info-ui", inputs: { data: "data", safeZoneLimit: "safeZoneLimit" }, ngImport: i0, template: "<div class=\"bb-stack bb-stack--center\">\n  <div *ngIf=\"data?.spent as spent\" class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-align-center\">\n    <div i18n=\"Spent|Spent card info label@@budget.cardInfo.spent.label\">\n      Spent\n    </div>\n    <bb-amount-ui\n      class=\"bb-highlight\"\n      [amount]=\"spent.amount\"\n      [currency]=\"spent.currencyCode\"\n      [decimalPlaces]=\"0\"\n    ></bb-amount-ui>\n  </div>\n\n  <div *ngIf=\"data?.spendingLimit as spendingLimit\" class=\"bb-stack__item bb-text-align-center\">\n    <div i18n=\"Limit|Limit card info label@@budget.cardInfo.budgetLimit.label\">\n      Limit\n    </div>\n    <bb-amount-ui\n      class=\"bb-highlight\"\n      [amount]=\"spendingLimit.amount\"\n      [currency]=\"spendingLimit.currencyCode\"\n      [decimalPlaces]=\"0\"\n    ></bb-amount-ui>\n  </div>\n</div>\n", components: [{ type: i1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardInfoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-budget-card-info-ui',
                    templateUrl: './budget-card-info.component.html',
                }]
        }], propDecorators: { data: [{
                type: Input
            }], safeZoneLimit: [{
                type: Input
            }] } });

const BaseCurrency = 'USD';
const BudgetFrequency = 'MONTHLY';
const CATEGORY_ICON_CLASS_PREFIX = 'bb-transaction-category-icon';
const CATEGORY_CLASS_PREFIX = 'bb-transaction-category';
const DEFAULT_ICON_CLASS = 'uncategorized';
const ModalConfig = {
    backdrop: 'static',
    keyboard: false,
};
const PROPERTIES = {
    showPercentage: {
        name: 'showPercentage',
        value: 'showPercentage',
    },
    budgetSafeZoneLimit: {
        name: 'budgetSafeZoneLimit',
        value: 'budgetSafeZoneLimit',
    },
    notificationDismissTime: {
        name: 'notificationDismissTime',
        value: 'notificationDismissTime',
    },
    maxBudgets: {
        name: 'maxBudgets',
        value: 'maxBudgets',
    },
};

class UtilityService {
    constructor(cssVariablesService) {
        this.cssVariablesService = cssVariablesService;
    }
    getCategoryIconClass(transactionCategory) {
        return `${transactionCategory.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-') || DEFAULT_ICON_CLASS}`;
    }
    getChartPalette() {
        return Promise.all([
            this.cssVariablesService.getCssVariable('--chart-neutral-color'),
            this.cssVariablesService.getCssVariable('--chart-positive-color'),
            this.cssVariablesService.getCssVariable('--warning'),
            this.cssVariablesService.getCssVariable('--chart-alert-color'),
        ]).then(([base, success, warning, danger]) => ({
            base,
            success,
            warning,
            danger,
        }));
    }
}
UtilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UtilityService, deps: [{ token: i1$1.CssVariablesService }], target: i0.ɵɵFactoryTarget.Injectable });
UtilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UtilityService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UtilityService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.CssVariablesService }]; } });

class BudgetCardComponent {
    constructor(cd, utility) {
        this.cd = cd;
        this.utility = utility;
        /**
         * If set the chart will show a percentage instead of an amount.
         */
        this.showPercentage = false;
        /**
         * Sets the percentage of the safe zone limit of the chart.
         */
        this.safeZoneLimit = 0;
        /**
         * EventEmitter for triggering a deleteBudget event.
         */
        this.deleteBudget = new EventEmitter();
        /**
         * EventEmitter for triggering a editBudget event.
         */
        this.editBudget = new EventEmitter();
    }
    get spendingLimit() {
        return this.budgetData && parseFloat(this.budgetData.spendingLimit.amount);
    }
    get spent() {
        return this.budgetData && this.budgetData.spent && parseFloat(this.budgetData.spent.amount);
    }
    get available() {
        return this.budgetData && this.budgetData.available && parseFloat(this.budgetData.available.amount);
    }
    get spentPercentage() {
        return this.budgetData && this.budgetData.spentPercentage;
    }
    get currencyCode() {
        return this.budgetData && this.budgetData.spendingLimit.currencyCode;
    }
    triggerDeleteBudget() {
        this.deleteBudget.emit(this.budgetData);
    }
    triggerEditBudget() {
        this.editBudget.emit(this.budgetData);
    }
    ngOnInit() {
        this.utility.getChartPalette().then((palette) => {
            this.colorPalette = palette;
            this.cd.markForCheck();
        });
    }
}
BudgetCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: UtilityService }], target: i0.ɵɵFactoryTarget.Component });
BudgetCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BudgetCardComponent, selector: "bb-budget-card-ui", inputs: { budgetData: "budgetData", showPercentage: "showPercentage", safeZoneLimit: "safeZoneLimit" }, outputs: { deleteBudget: "deleteBudget", editBudget: "editBudget" }, ngImport: i0, template: "<div class=\"card\">\n  <div class=\"bb-stack bb-stack--density-sm\">\n    <div class=\"bb-stack__item bb-stack__item--push-right\">\n      <bb-dropdown-menu-ui\n        icon=\"ellipsis-h\"\n        btnColor=\"link-dark\"\n        [btnCircle]=\"true\"\n        container=\"body\"\n        position=\"bottom-left\"\n        data-role=\"options-button\"\n        aria-label=\"Options\"\n        i18n-aria-label=\"Options button|Budgets options button tooltip@@budgets.options.label\"\n      >\n        <ng-template bbDropdownMenuItem>\n          <a\n            rel=\"noopener\"\n            role=\"menuitem\"\n            class=\"dropdown-item\"\n            data-role=\"edit-item\"\n            target=\"_blank\"\n            (click)=\"triggerEditBudget()\"\n          >\n            <span i18n=\"Edit budget|Label for edit saving goal action@@budgets.budget.edit\">Edit</span>\n          </a>\n          <a\n            rel=\"noopener\"\n            role=\"menuitem\"\n            class=\"dropdown-item\"\n            data-role=\"delete-item\"\n            target=\"_blank\"\n            (click)=\"triggerDeleteBudget()\"\n          >\n            <span i18n=\"Delete budget|Label for delete saving goal action@@budgets.budget.delete\">Delete</span>\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-text-align-center\">\n    <div class=\"bb-block bb-block--sm\">\n      <bb-icon-ui \n        color=\"secondary\"\n        name=\"{{ 'category-' + utility.getCategoryIconClass(budgetData?.budgetIcon || '') }}\"\n      ></bb-icon-ui>\n    </div>\n    \n    <div class=\"bb-text-semi-bold\">\n      {{budgetData?.budgetName}}\n    </div>\n  </div>\n\n  <div class=\"card-body\">\n    <bb-budget-card-chart-ui \n      *ngIf=\"colorPalette\" \n      [spendingLimit]=\"spendingLimit\" \n      [spent]=\"spent\"\n      [spentPercentage]=\"spentPercentage\" \n      [available]=\"available\" \n      [currencyCode]=\"currencyCode\"\n      [chartPalette]=\"colorPalette\" \n      [safeZoneLimit]=\"safeZoneLimit\" \n      [showPercentage]=\"showPercentage\"\n    ></bb-budget-card-chart-ui>\n\n    <bb-budget-card-info-ui\n      [data]=\"budgetData\"\n      [safeZoneLimit]=\"safeZoneLimit\"\n    ></bb-budget-card-info-ui>\n  </div>\n</div>", components: [{ type: i2$1.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: BudgetCardChartComponent, selector: "bb-budget-card-chart-ui", inputs: ["spendingLimit", "spent", "spentPercentage", "available", "currencyCode", "showPercentage", "safeZoneLimit", "chartPalette"] }, { type: BudgetCardInfoComponent, selector: "bb-budget-card-info-ui", inputs: ["data", "safeZoneLimit"] }], directives: [{ type: i2$1.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-budget-card-ui',
                    templateUrl: './budget-card.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: UtilityService }]; }, propDecorators: { budgetData: [{
                type: Input
            }], showPercentage: [{
                type: Input
            }], safeZoneLimit: [{
                type: Input
            }], deleteBudget: [{
                type: Output
            }], editBudget: [{
                type: Output
            }] } });

function categoriesManagementMap(item) {
    return Object.assign({}, item);
}
function fromCategoriesManagementResponse(response) {
    return (response.body || []).map(categoriesManagementMap);
}

class CategoriesService {
    constructor(categoriesManagementDataHttpService) {
        this.categoriesManagementDataHttpService = categoriesManagementDataHttpService;
    }
    getCategories() {
        return this.categoriesManagementDataHttpService
            .getCategories({
            level: 'PARENTS',
        }, 'response')
            .pipe(map((response) => fromCategoriesManagementResponse(response)));
    }
}
CategoriesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CategoriesService, deps: [{ token: i1$2.CategoriesHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
CategoriesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CategoriesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CategoriesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.CategoriesHttpService }]; } });

class BudgetsHeaderComponent {
    constructor() {
        /**
         * EventEmitter for triggering a createBudget event.
         */
        this.createBudget = new EventEmitter();
        this.currentDate = new Date();
    }
    triggerCreateBudget() {
        this.createBudget.emit();
    }
}
BudgetsHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetsHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BudgetsHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BudgetsHeaderComponent, selector: "bb-budgets-header-ui", outputs: { createBudget: "createBudget" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <div class=\"bb-stack\">\n    <button \n      bbButton \n      color=\"primary\"\n      class=\"bb-stack__item bb-stack__item--push-right\" \n      (click)=\"triggerCreateBudget()\"\n    >\n      <bb-icon-ui \n        name=\"add\" \n        size=\"md\" \n        class=\"bb-stack__item bb-stack__item--spacing-xs\"\n      ></bb-icon-ui>\n      <span i18n=\"New budget|Label for a button that create a new budget@@budgets.new.button.lable\">New budget</span>\n    </button>\n  </div>\n</div>", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2$2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetsHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-budgets-header-ui',
                    templateUrl: './budgets.header.component.html',
                }]
        }], propDecorators: { createBudget: [{
                type: Output
            }] } });

class BudgetManagerComponent {
    constructor(categoriesService, fb, utility, assetsService) {
        this.categoriesService = categoriesService;
        this.fb = fb;
        this.utility = utility;
        this.assetsService = assetsService;
        /**
         * Modal header background.
         */
        this.background = 'primary';
        /**
         * If set the chart will show a percentage instead of an amount.
         */
        this.showPercentage = false;
        /**
         * EventEmitter for triggering a editBudget event.
         */
        this.editBudget = new EventEmitter();
        /**
         * EventEmitter for triggering a createBudget event.
         */
        this.createBudget = new EventEmitter();
        /**
         * EventEmitter for triggering a deleteBudget event.
         */
        this.deleteBudget = new EventEmitter();
        this.hostRef = this;
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-budget-widget-ang',
            getURIFromAssetID: (assetId) => `${assetId}`,
        });
        this.images = ['1', '2'].map((i) => this.resolveAsset(i + '-step.svg'));
        this.themev2img = this.resolveAsset('modal-header.png');
        this.baseCurrency = BaseCurrency;
        this.budgetFrequency = BudgetFrequency;
        this.baseBudgetModalOptions = ModalConfig;
        this.confirmationModalOptions = Object.assign(Object.assign({}, this.baseBudgetModalOptions), { size: 'md' });
        this.categoriesList = this.categoriesService.getCategories();
        this.discardEditModalActive = false;
        this.discardCreateModalActive = false;
        this.deleteBudgetModalActive = false;
        this.updateBudgetModalActive = false;
        this.createBudgetModalActive = false;
        this.activeStep = 1;
    }
    get startOfMonth() {
        const date = new Date();
        const year = date.getFullYear();
        let month = '' + (date.getMonth() + 1);
        month = month.padStart(2, '0');
        return `${year}-${month}-01`;
    }
    get endOfMonth() {
        const date = new Date();
        const year = date.getFullYear();
        const month = date.getMonth() + 1;
        const newDate = new Date(year, month, 0);
        const day = newDate.getDate();
        const formattedMonth = month.toString().padStart(2, '0');
        return `${year}-${formattedMonth}-${day}`;
    }
    get budgetList() {
        if (this.maxBudgets && this.budgets) {
            return this.budgets.slice(0, this.maxBudgets);
        }
        return this.budgets;
    }
    spawnCreateBudgetForm() {
        return this.fb.group({
            categoryName: ['', Validators.required],
            spendingLimit: ['', Validators.required],
            frequency: [this.budgetFrequency, Validators.required],
            period: [this.startOfMonth, Validators.required],
        });
    }
    spawnUpdateBudgetForm() {
        if (this.selectedBudget) {
            return this.fb.group({
                spendingLimit: [this.selectedBudget.spendingLimit, Validators.required],
            });
        }
        return undefined;
    }
    closeModal() {
        this.discardEditModalActive = false;
        this.discardCreateModalActive = false;
        this.deleteBudgetModalActive = false;
    }
    processCloseConfirmation() {
        this.closeModal();
        this.updateBudgetModalActive = false;
        this.createBudgetModalActive = false;
        this.activeStep = 1;
    }
    cancelCreateBudget() {
        if (this.createBudgetForm && !this.createBudgetForm.pristine) {
            this.discardCreateModalActive = true;
        }
        else {
            this.createBudgetModalActive = false;
        }
    }
    cancelUpdateBudget() {
        if (this.updateBudgetForm && !this.updateBudgetForm.pristine) {
            this.discardEditModalActive = true;
        }
        else {
            this.updateBudgetModalActive = false;
        }
    }
    handleCreate() {
        this.createBudgetModalActive = true;
        this.createBudgetForm = this.spawnCreateBudgetForm();
    }
    submitCreateBudget() {
        if (this.createBudgetForm) {
            this.createBudgetModalActive = false;
            this.activeStep = 1;
            const createBudgetFormValue = Object.assign(Object.assign({}, this.createBudgetForm.value), { period: {
                    startDate: this.createBudgetForm.value.period,
                    endDate: this.endOfMonth,
                }, spendingLimit: {
                    currencyCode: this.createBudgetForm.value.spendingLimit.currency,
                    amount: this.createBudgetForm.value.spendingLimit.amount,
                } });
            this.createBudget.emit(createBudgetFormValue);
            this.createBudgetForm.reset();
        }
    }
    handleEdit(data) {
        this.updateBudgetModalActive = true;
        this.selectedBudget = data;
        this.updateBudgetForm = this.spawnUpdateBudgetForm();
    }
    submitEditBudget() {
        if (this.selectedBudget && this.updateBudgetForm) {
            this.updateBudgetModalActive = false;
            this.editBudget.emit({
                updateBudgetFormData: Object.assign(Object.assign({}, this.updateBudgetForm.value), { spendingLimit: {
                        currencyCode: this.updateBudgetForm.value.spendingLimit.currency,
                        amount: this.updateBudgetForm.value.spendingLimit.amount,
                    } }),
                selectedBudgetName: this.selectedBudget.budgetName,
                selectedBudgetId: this.selectedBudget.id,
            });
            this.selectedBudget = undefined;
        }
    }
    handleDelete(data) {
        this.deleteBudgetModalActive = true;
        this.selectedBudget = data;
    }
    submitDeleteBudget() {
        if (this.selectedBudget) {
            this.deleteBudgetModalActive = false;
            this.deleteBudget.emit(this.selectedBudget);
            this.selectedBudget = undefined;
        }
    }
}
BudgetManagerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetManagerComponent, deps: [{ token: CategoriesService }, { token: i2$3.FormBuilder }, { token: UtilityService }, { token: i4.AssetsService }], target: i0.ɵɵFactoryTarget.Component });
BudgetManagerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BudgetManagerComponent, selector: "bb-budget-manager", inputs: { background: "background", budgets: "budgets", maxBudgets: "maxBudgets", showPercentage: "showPercentage", safeZoneLimit: "safeZoneLimit" }, outputs: { editBudget: "editBudget", createBudget: "createBudget", deleteBudget: "deleteBudget" }, ngImport: i0, template: "<ng-container bbBudgetsHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<div\n  class=\"row\"\n  *ngIf=\"budgets?.length; else emptyState\"\n>\n  <ng-container\n    *ngFor=\"let budget of budgetList\"\n    bbBudgetCardCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"budget\"\n  ></ng-container>\n</div>\n\n<ng-container bbBudgetConfirmationModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-container bbBudgetUpdateModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-container bbBudgetCreateModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template #emptyState>\n  <bb-empty-state-ui\n    class=\"card bb-state-container\"\n    title=\"No Budgets Created\"\n    i18n-title=\"No Budgets Created|Title of a message that is shown when there are no budgets@@budgets.state.noResultsFound.title\"\n    subtitle=\"You haven\u2019t created a budget yet\"\n    i18n-subtitle=\"You haven\u2019t created a budget yet|Subtitle of a message that is shown when there are no budgets@@budgets.state.noResultsFound.subtitle\"\n    iconSize=\"xxl\"\n    iconModifier=\"data-usage\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template bbBudgetCardCustomizable let-hostRef let-budget=\"context\">\n  <bb-budget-card-ui\n    class=\"bb-block bb-block--xl col-md-6 col-lg-4\"\n    [budgetData]=\"budget\"\n    [showPercentage]=\"hostRef.showPercentage\"\n    [safeZoneLimit]=\"hostRef.safeZoneLimit\"\n    (editBudget)=\"hostRef.handleEdit($event)\"\n    (deleteBudget)=\"hostRef.handleDelete($event)\"\n  ></bb-budget-card-ui>\n</ng-template>\n\n<ng-template bbBudgetsHeaderCustomizable let-hostRef>\n  <bb-budgets-header-ui \n    (createBudget)=\"hostRef.handleCreate()\"\n  ></bb-budgets-header-ui>\n</ng-template>\n\n<!-- Delete budget -->\n<ng-template bbBudgetConfirmationModalCustomizable let-hostRef>\n  <bb-modal-ui\n    [isOpen]=\"hostRef.deleteBudgetModalActive || hostRef.discardEditModalActive || hostRef.discardCreateModalActive\"\n    [modalOptions]=\"hostRef.confirmationModalOptions\"\n  >\n    <div class=\"modal-header\">\n      <h2\n        id=\"modal-basic-title\"\n        class=\"modal-title\"\n        *ngIf=\"hostRef.deleteBudgetModalActive\"\n        i18n=\"Delete budget?|Delete budget modal title@@budget.delete.modal.title\"\n      >\n        Delete budget?\n      </h2>\n\n      <h2\n        id=\"modal-basic-title\"\n        class=\"modal-title\"\n        *ngIf=\"hostRef.discardEditModalActive\"\n        i18n=\"Discard budget changes?|Discard edit modal title@@budget.discard.edit.modal.title\"\n      >\n        Discard budget changes?\n      </h2>\n\n      <h2\n        id=\"modal-basic-title\"\n        class=\"modal-title\"\n        *ngIf=\"hostRef.discardCreateModalActive\"\n        i18n=\"Discard new budget?|Discard create modal title@@budget.discard.create.modal.title\"\n      >\n        Discard new budget?\n      </h2>\n    </div>\n\n    <div class=\"modal-body\">\n      <span\n        *ngIf=\"hostRef.deleteBudgetModalActive\"\n        i18n=\"This budget will be permanently deleted.|Delete budget info@@budget.delete.modal.info\"\n      >\n        This budget will be permanently deleted.\n      </span>\n\n      <span\n        *ngIf=\"hostRef.discardEditModalActive\"\n        i18n=\"You will loose all the changes made to this budget.|Discard edit budget info@@budget.discard.edit.modal.info\"\n      >\n        You will loose all the changes made to this budget.\n      </span>\n\n      <span\n        *ngIf=\"hostRef.discardCreateModalActive\"\n        i18n=\"All entered information for this budget will be permanetly lost.|Discard create budget info@@budget.discard.create.modal.info\"\n      >\n        All entered information for this budget will be permanetly lost.\n      </span>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"bb-button-bar\">\n        <button \n          bbButton\n          color=\"danger\" \n          class=\"bb-button-bar__button\"\n          (click)=\"hostRef.submitDeleteBudget()\" \n          *ngIf=\"hostRef.deleteBudgetModalActive\"\n          i18n=\"Delete budget|Delete button label@@budget.delete.modal.delete.button\"\n        >\n          Delete budget\n        </button>\n\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"hostRef.closeModal()\"\n          *ngIf=\"hostRef.deleteBudgetModalActive\"\n          i18n=\"Not now|Not now button label@@budget.confirmation.modal.not.button\"\n        >\n          Not now\n        </button>\n\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"hostRef.processCloseConfirmation()\"\n          *ngIf=\"hostRef.discardEditModalActive\"\n          i18n=\"Discard changes|Discard editing button label@@budget.confirmation.modal.discard.edit.button\"\n        >\n          Discard changes\n        </button>\n\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"hostRef.closeModal()\"\n          *ngIf=\"hostRef.discardEditModalActive\"\n          i18n=\"Keep editing|Keep editing button label@@budget.confirmation.modal.keep.button\"\n        >\n          Keep editing\n        </button>\n\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"hostRef.processCloseConfirmation()\"\n          *ngIf=\"hostRef.discardCreateModalActive\"\n          i18n=\"Discard budget|Discard creating button label@@budget.confirmation.modal.discard.create.button\"\n        >\n          Discard budget\n        </button>\n\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"hostRef.closeModal()\"\n          *ngIf=\"hostRef.discardCreateModalActive\"\n          i18n=\"Keep it|Keep it button label@@budget.confirmation.modal.keep.it.button\"\n        >\n          Keep it\n        </button>\n      </div>\n    </div>\n  </bb-modal-ui>\n</ng-template>\n\n<!-- Edit budget -->\n<ng-template bbBudgetUpdateModalCustomizable let-hostRef>\n  <bb-modal-ui\n    *ngIf=\"hostRef.updateBudgetModalActive\"\n    [isOpen]=\"hostRef.updateBudgetModalActive\"\n    [modalOptions]=\"hostRef.baseBudgetModalOptions\"\n  >\n    <img \n      class=\"img-fluid\"\n      [src]=\"hostRef.themev2img | async\" \n      alt=\"Edit budget top image\"\n      i18n-alt=\"@@budget.editImage.alt\"\n    />\n    <form [formGroup]=\"hostRef.updateBudgetForm\" (ngSubmit)=\"hostRef.submitEditBudget()\">\n      <div class=\"modal-body\">\n        <div class=\"bb-block bb-block--xl\">\n          <h2 \n            data-role=\"modal-basic-title\"\n            class=\"modal-title\"\n            i18n=\"Set your budget limit|Edit budget modal title@@budget.edit.title\"\n          >\n            Set your budget limit\n          </h2>\n          <p\n            class=\"bb-text-support\" \n            data-role=\"edit-budget-text\"\n            i18n=\"Category edit description|Description for category edit form@@budget.edit.description\"\n          >\n            Choose a monthly budget for your selected category.\n          </p>\n        </div>\n\n        <div class=\"bb-block bb-block--sm\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui \n              class=\"bb-stack__item\"\n              size=\"sm\"\n              backgroundType=\"square\"\n              name=\"category-{{hostRef.utility.getCategoryIconClass(hostRef.selectedBudget.budgetName || '')}}\"\n            >\n            </bb-icon-ui>\n            <div\n              class=\"bb-stack__item bb-text-semi-bold\"\n            >\n              {{hostRef.selectedBudget.budgetName}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-block bb-block--sm\">\n          {{startOfMonth | date: 'mediumDate'}} - {{endOfMonth | date: 'mediumDate'}}\n        </div>\n        \n        <div class=\"bb-block bb-block--xl\">\n          <span i18n=\"Recurring|Budget type@@budget.edit.modal.type\">\n            Recurring\n          </span>\n          <span i18n=\"Monthly|Budget frequency@@budget.edit.modal.frequency.info\">\n            monthly\n          </span>\n        </div>\n\n        <div class=\"bb-block bb-block--xl\">\n          <p\n            class=\"bb-block bb-block--sm bb-text-semi-bold\" \n            i18n=\"Monthly amount|Monthly amount for category edit form@@budget.edit.modal.amount.title\"\n          >\n            Monthly amount\n          </p>\n          <bb-currency-input-ui\n            formControlName=\"spendingLimit\"\n            [currencies]=\"[hostRef.selectedBudget.spendingLimit.currencyCode]\"\n          ></bb-currency-input-ui>\n        </div>\n      </div>\n\n      <div class=\"modal-footer bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\" \n          color=\"primary\" \n          [disabled]=\"hostRef.updateBudgetForm.pristine\"\n          i18n=\"Confirm|Confirm button label@@budget.modal.confirm.button\"\n        >\n          Confirm\n        </button>\n        <button\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          bbButton\n          color=\"link\" \n          (click)=\"hostRef.cancelUpdateBudget()\"\n          i18n=\"Cancel|Cancel button label@@budget.confirmation.modal.cancel.button\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </bb-modal-ui>\n</ng-template>\n\n<!-- Create a budget -->\n<ng-template bbBudgetCreateModalCustomizable let-hostRef>\n  <bb-modal-ui \n    *ngIf=\"hostRef.createBudgetForm && (hostRef.categoriesList | async) as categoriesList\"\n    [isOpen]=\"hostRef.createBudgetModalActive\" \n    [modalOptions]=\"hostRef.baseBudgetModalOptions\"\n  >\n    <ng-container *ngFor=\"let img of hostRef.images; let i=index\">\n      <div *ngIf=\"hostRef.activeStep === i + 1\">\n        <img \n          class=\"img-fluid\"\n          [src]=\"hostRef.themev2img | async\" \n          alt=\"Step {{i + 1}} \" \n          i18n-alt=\"@@budget.createImage.alt\"\n        />\n      </div>\n    </ng-container>\n\n    <form [formGroup]=\"hostRef.createBudgetForm\" (ngSubmit)=\"hostRef.submitCreateBudget()\">\n      <div class=\"modal-body\">\n        <div *ngIf=\"hostRef.activeStep === 1\">\n          <div class=\"bb-block bb-block--xl\">\n            <h2 \n              data-role=\"step-1-title\" \n              class=\"modal-title\"\n              i18n=\"Category name title|Title for category name input field in create/edit form@@budget.form.title.name\"\n            >\n              Select your budget category\n            </h2>\n            <p \n              class=\"bb-text-support\" \n              data-role=\"step-1-text\"\n              i18n=\"Category name description|Description for category name input field in create/edit form@@budget.form.description.name\"\n            >\n              Begin managing your budget by choosing a category.\n            </p>\n          </div>\n\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-scrollable-category-list\">\n              <bb-input-radio-group-ui \n                [required]=\"true\" \n                name=\"categoriesList\" \n                label=\" \"\n                formControlName=\"categoryName\" \n              >\n                <bb-input-radio-ui\n                  *ngFor=\"let category of categoriesList\"\n                  [id]=\"hostRef.utility.getCategoryIconClass(category.categoryName)\"\n                  [labelTemplate]=\"customLabelTemplateWithData\"\n                  [labelTemplateContext]=\"category\"\n                  [value]=\"category.categoryName\"\n                ></bb-input-radio-ui>\n              </bb-input-radio-group-ui>\n              <ng-template #customLabelTemplateWithData let-category=\"labelTemplateContext\">\n                  <bb-icon-ui\n                  class=\"bb-stack__item\"\n                  size=\"sm\"\n                  backgroundType=\"square\"\n                  name=\"category-{{hostRef.utility.getCategoryIconClass(category.categoryName)}}\"\n                ></bb-icon-ui>\n                <span class=\"bb-text-semi-bold\">{{ category.categoryName }}</span>\n              </ng-template>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"hostRef.activeStep === 2\">\n          <div class=\"bb-block bb-block--xl\">\n            <h2\n              data-role=\"step-2-title\" \n              class=\"modal-title\"\n              i18n=\"Set your budget limit|Second step title of create a budget@@budget.create.title\"\n            >\n              Set your budget limit\n            </h2>\n            <p\n              class=\"bb-text-support\" \n              data-role=\"step-2-text\"\n              i18n=\"Choose a monthly budget for your selected category|Second step description of create a budget@@budget.form.description.edit\"\n            >\n              Choose a monthly budget for your selected category.\n            </p>\n          </div>\n\n          <div class=\"bb-block bb-block--sm\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui \n                class=\"bb-stack__item\"\n                size=\"sm\"\n                backgroundType=\"square\"\n                name=\"category-{{hostRef.utility.getCategoryIconClass(hostRef.createBudgetForm.value.categoryName)}}\" \n              ></bb-icon-ui>\n              <div class=\"bb-text-semi-bold\">\n                {{hostRef.createBudgetForm.value.categoryName}}\n              </div>\n            </div>\n          </div>\n\n          <div class=\"bb-block bb-block--sm\">\n            {{startOfMonth | date: 'mediumDate'}} - {{endOfMonth | date: 'mediumDate'}}\n          </div>\n\n          <div class=\"bb-block bb-block--xl\">\n            <span i18n=\"Recurring|Budget type@@budget.create.modal.type\">\n              Recurring\n            </span>\n            <span i18n=\"Monthly|Budget frequency@@budget.create.modal.frequency.info\">\n              monthly\n            </span>\n          </div>\n\n          <div class=\"bb-block bb-block--xl\">\n            <p\n              class=\"bb-block bb-block--sm bb-text-semi-bold\" \n              i18n=\"Monthly amount|Monthly amount for category edit form@@budget.create.modal.amount.title\"\n            >\n              Monthly amount\n            </p>\n            <bb-currency-input-ui\n              [currencies]=\"[hostRef.baseCurrency]\" \n              formControlName=\"spendingLimit\"\n            ></bb-currency-input-ui>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer bb-button-bar\">\n        <button\n          bbButton\n          type=\"submit\" \n          color=\"primary\" \n          class=\"bb-button-bar__button\"\n          *ngIf=\"hostRef.activeStep === 2\"\n          [disabled]=\"hostRef.createBudgetForm.status !== 'VALID'\"\n          i18n=\"Confirm|Confirm button label@@budget.create.modal.confirm.button\"\n        >\n          Confirm\n        </button>\n        <button\n          bbButton\n          color=\"primary\" \n          class=\"bb-button-bar__button\"\n          *ngIf=\"hostRef.activeStep === 1\" \n          (click)=\"hostRef.activeStep = 2\"\n          [disabled]=\"hostRef.createBudgetForm.pristine\" \n          i18n=\"Continue|Continue button label@@budget.create.modal.continue.button\"\n        >\n          Continue\n        </button>\n        <button\n          bbButton \n          color=\"secondary\" \n          class=\"bb-button-bar__button\"\n          *ngIf=\"hostRef.activeStep === 2\"\n          (click)=\"hostRef.activeStep = 1\" \n          i18n=\"Back|Back button label@@budget.create.modal.previous.button\"\n        >\n          Back\n        </button>\n        <button\n          bbButton\n          color=\"link\" \n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          (click)=\"hostRef.cancelCreateBudget()\"\n          i18n=\"Cancel|Cancel button label@@budget.create.modal.cancel.button\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </bb-modal-ui>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i5.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return BudgetCardComponent; }), selector: "bb-budget-card-ui", inputs: ["budgetData", "showPercentage", "safeZoneLimit"], outputs: ["deleteBudget", "editBudget"] }, { type: i0.forwardRef(function () { return BudgetsHeaderComponent; }), selector: "bb-budgets-header-ui", outputs: ["createBudget"] }, { type: i0.forwardRef(function () { return i8.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i3.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i10.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0.forwardRef(function () { return i11.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0.forwardRef(function () { return i11.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }], directives: [{ type: i0.forwardRef(function () { return BudgetsHeaderCustomizableDirective; }), selector: "[bbBudgetsHeaderCustomizable]" }, { type: i0.forwardRef(function () { return i12.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i12.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return BudgetCardCustomizableDirective; }), selector: "[bbBudgetCardCustomizable]" }, { type: i0.forwardRef(function () { return BudgetConfirmationModalCustomizableDirective; }), selector: "[bbBudgetConfirmationModalCustomizable]" }, { type: i0.forwardRef(function () { return BudgetUpdateModalCustomizableDirective; }), selector: "[bbBudgetUpdateModalCustomizable]" }, { type: i0.forwardRef(function () { return BudgetCreateModalCustomizableDirective; }), selector: "[bbBudgetCreateModalCustomizable]" }, { type: i0.forwardRef(function () { return i2$2.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i2$3.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i2$3.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i2$3.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i2$3.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i2$3.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i2$3.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i0.forwardRef(function () { return i12.AsyncPipe; }), "date": i0.forwardRef(function () { return i12.DatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetManagerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-budget-manager',
                    templateUrl: './budget-manager.component.html',
                }]
        }], ctorParameters: function () { return [{ type: CategoriesService }, { type: i2$3.FormBuilder }, { type: UtilityService }, { type: i4.AssetsService }]; }, propDecorators: { background: [{
                type: Input
            }], budgets: [{
                type: Input
            }], maxBudgets: [{
                type: Input
            }], showPercentage: [{
                type: Input
            }], safeZoneLimit: [{
                type: Input
            }], editBudget: [{
                type: Output
            }], createBudget: [{
                type: Output
            }], deleteBudget: [{
                type: Output
            }] } });
class BudgetsHeaderCustomizableDirective extends BbTemplate {
}
BudgetsHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetsHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BudgetsHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BudgetsHeaderCustomizableDirective, selector: "[bbBudgetsHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetsHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBudgetsHeaderCustomizable]',
                }]
        }] });
class BudgetCardCustomizableDirective extends BbTemplate {
}
BudgetCardCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BudgetCardCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BudgetCardCustomizableDirective, selector: "[bbBudgetCardCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBudgetCardCustomizable]',
                }]
        }] });
class BudgetConfirmationModalCustomizableDirective extends BbTemplate {
}
BudgetConfirmationModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetConfirmationModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BudgetConfirmationModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BudgetConfirmationModalCustomizableDirective, selector: "[bbBudgetConfirmationModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetConfirmationModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBudgetConfirmationModalCustomizable]',
                }]
        }] });
class BudgetUpdateModalCustomizableDirective extends BbTemplate {
}
BudgetUpdateModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetUpdateModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BudgetUpdateModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BudgetUpdateModalCustomizableDirective, selector: "[bbBudgetUpdateModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetUpdateModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBudgetUpdateModalCustomizable]',
                }]
        }] });
class BudgetCreateModalCustomizableDirective extends BbTemplate {
}
BudgetCreateModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCreateModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BudgetCreateModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BudgetCreateModalCustomizableDirective, selector: "[bbBudgetCreateModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCreateModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBudgetCreateModalCustomizable]',
                }]
        }] });

class BudgetService {
    constructor(budgetingDataHttpService) {
        this.budgetingDataHttpService = budgetingDataHttpService;
    }
    getBudgets() {
        return this.budgetingDataHttpService.getBudgets();
    }
    createBudget(budget) {
        return this.budgetingDataHttpService.postBudgets({ budgetsPostRequestBody: budget }, 'response');
    }
    updateBudget(budgetId, budget) {
        return this.budgetingDataHttpService.putId({ id: budgetId, idPutRequestBody: budget }, 'response');
    }
    deleteBudget(budgetId) {
        return this.budgetingDataHttpService.deleteId({ id: budgetId }, 'response');
    }
}
BudgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetService, deps: [{ token: i1$3.BudgetsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
BudgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.BudgetsHttpService }]; } });

var NotificationModifier;
(function (NotificationModifier) {
    NotificationModifier["SUCCESS"] = "success";
    NotificationModifier["INFO"] = "info";
    NotificationModifier["WARNING"] = "warning";
    NotificationModifier["ERROR"] = "error";
})(NotificationModifier || (NotificationModifier = {}));
const filterInputParameters = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));
class BudgetWidgetComponent {
    constructor(utility, service, notificationService, model) {
        this.utility = utility;
        this.service = service;
        this.notificationService = notificationService;
        this.model = model;
        this.showPercentageSubject = new BehaviorSubject(undefined);
        this.budgetSafeZoneLimitSubject = new BehaviorSubject(undefined);
        this.notificationDismissTimeSubject = new BehaviorSubject(undefined);
        this.maxBudgetsSubject = new BehaviorSubject(undefined);
        this.reload = new BehaviorSubject(undefined);
        this.baseBudgetModalOptions = ModalConfig;
        this.confirmationModalOptions = Object.assign(Object.assign({}, this.baseBudgetModalOptions), { size: 'sm' });
        this.budgetList = this.reload.asObservable().pipe(switchMap(() => this.service.getBudgets()), catchError((error) => {
            this.handleError(error);
            return of(undefined);
        }));
        this.hostRef = this;
        this.serviceResponse = (successHeader, errorHeader) => (source) => source.pipe(flatMap(() => {
            this.reload.next(undefined);
            return of({ header: successHeader, message: '', modifier: NotificationModifier.SUCCESS });
        }), catchError(() => {
            return of({ header: errorHeader, message: '', modifier: NotificationModifier.WARNING });
        }), withLatestFrom(this.notificationDismissTime), map(([notification, notificationDismissTime]) => {
            if (notification) {
                this.pushNotification(notification.header, notification.message, notification.modifier, notificationDismissTime);
            }
            return undefined;
        }), publish());
        this.showPercentage = filterInputParameters(this.showPercentageSubject.asObservable(), this.getProperty(PROPERTIES.showPercentage).pipe(map((propertyValue) => propertyValue + '' === 'true')));
        this.budgetSafeZoneLimit = filterInputParameters(this.budgetSafeZoneLimitSubject.asObservable(), this.getProperty(PROPERTIES.budgetSafeZoneLimit).pipe(map((propertyValue) => parseInt(propertyValue, 10))));
        this.notificationDismissTime = filterInputParameters(this.notificationDismissTimeSubject.asObservable(), this.getProperty(PROPERTIES.notificationDismissTime).pipe(map((propertyValue) => parseFloat(propertyValue))));
        this.maxBudgets = filterInputParameters(this.maxBudgetsSubject.asObservable(), this.getProperty(PROPERTIES.maxBudgets).pipe(map((propertyValue) => parseFloat(propertyValue))));
    }
    set showPercentageValue(value) {
        this.showPercentageSubject.next(value);
    }
    set budgetSafeZoneLimitValue(value) {
        this.budgetSafeZoneLimitSubject.next(value);
    }
    set notificationDismissTimeValue(value) {
        this.notificationDismissTimeSubject.next(value);
    }
    set maxBudgetsValue(value) {
        this.maxBudgetsSubject.next(value);
    }
    pushNotification(header, message, modifier, notificationDismissTime) {
        if (notificationDismissTime) {
            this.notificationService.showNotification({
                header,
                message,
                modifier,
                dismissible: true,
                ttl: notificationDismissTime * 1000,
            });
        }
    }
    createBudget(createBudgetFormData) {
        const budgetName = createBudgetFormData.categoryName;
        const budgetIcon = this.utility.getCategoryIconClass(createBudgetFormData.categoryName);
        const buildCreateBudgetObj = Object.assign(createBudgetFormData, {
            budgetName,
            budgetIcon,
        });
        (this.service
            .createBudget(buildCreateBudgetObj)
            .pipe(this.serviceResponse(this.notificationCreateTemplate, this.notificationErrorCreateTemplate))).connect();
    }
    updateBudget(data) {
        const buildUpdateBudgetObj = Object.assign(data.updateBudgetFormData, {
            budgetName: data.selectedBudgetName,
        });
        (this.service
            .updateBudget(data.selectedBudgetId, buildUpdateBudgetObj)
            .pipe(this.serviceResponse(this.notificationUpdateTemplate, this.notificationErrorUpdateTemplate))).connect();
    }
    deleteBudget(budget) {
        (this.service
            .deleteBudget(budget.id)
            .pipe(this.serviceResponse(this.notificationDeleteTemplate, this.notificationErrorDeleteTemplate))).connect();
    }
    handleError(error) {
        if (error instanceof HttpErrorResponse) {
            this.error = error.statusText;
        }
        else if (error instanceof Error) {
            this.error = error.message;
        }
    }
    getProperty(property) {
        return this.model ? this.model.property(property.name, property.value) : of(property.value);
    }
}
BudgetWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetWidgetComponent, deps: [{ token: UtilityService }, { token: BudgetService }, { token: i3$1.NotificationService }, { token: i4.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Component });
BudgetWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BudgetWidgetComponent, selector: "bb-budget-widget", inputs: { showPercentageValue: ["showPercentage", "showPercentageValue"], budgetSafeZoneLimitValue: ["budgetSafeZoneLimit", "budgetSafeZoneLimitValue"], notificationDismissTimeValue: ["notificationDismissTime", "notificationDismissTimeValue"], maxBudgetsValue: ["maxBudgets", "maxBudgetsValue"] }, viewQueries: [{ propertyName: "notificationCreateTemplate", first: true, predicate: ["notificationCreate"], descendants: true }, { propertyName: "notificationUpdateTemplate", first: true, predicate: ["notificationUpdate"], descendants: true }, { propertyName: "notificationDeleteTemplate", first: true, predicate: ["notificationDelete"], descendants: true }, { propertyName: "notificationErrorCreateTemplate", first: true, predicate: ["notificationErrorCreate"], descendants: true }, { propertyName: "notificationErrorUpdateTemplate", first: true, predicate: ["notificationErrorUpdate"], descendants: true }, { propertyName: "notificationErrorDeleteTemplate", first: true, predicate: ["notificationErrorDelete"], descendants: true }], ngImport: i0, template: "<div *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"budgetList | async; else loadingState; let budgetList\">\n    <bb-budget-manager\n      [budgets]=\"budgetList\"\n      [showPercentage]=\"(showPercentage | async) || undefined\"\n      [maxBudgets]=\"(maxBudgets | async) || undefined\"\n      [safeZoneLimit]=\"(budgetSafeZoneLimit | async) || undefined\"\n      (createBudget)=\"createBudget($event)\"\n      (editBudget)=\"updateBudget($event)\"\n      (deleteBudget)=\"deleteBudget($event)\"\n    ></bb-budget-manager>\n\n    <ng-container bbBudgetNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </ng-container>\n</div>\n\n<ng-template #errorState>\n  <bb-empty-state-ui \n    class=\"card bb-state-container\"\n    title=\"\"\n    [subtitle]=\"error\"\n    iconModifier=\"error\"\n    iconSize=\"xxl\"\n    iconColor=\"gray\"\n    iconClasses=\"text-muted\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui\n    text=\"Loading budgets...\"\n    i18n-text=\"Loading budgets|Text to display while loading budgets@@budgets.state.loadingBudgets\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template bbBudgetNotificationCustomizable>\n  <ng-container notificationCreate></ng-container>\n  <ng-container notificationUpdate></ng-container>\n  <ng-container notificationDelete></ng-container>\n  <ng-container notificationErrorCreate></ng-container>\n  <ng-container notificationErrorUpdate></ng-container>\n  <ng-container notificationErrorDelete></ng-container>\n</ng-template>\n\n<ng-template #notificationCreate>\n  <span i18n=\"Create notification|Message for a notification displayed when budget create request has been processed@@budget.notification.success.create\">Budget created successfully</span>\n</ng-template>\n\n<ng-template #notificationUpdate>\n  <span i18n=\"Update notification|Message for a notification displayed when budget update request has been processed@@budget.notification.success.update\">Budget updated successfully</span>\n</ng-template>\n\n<ng-template #notificationDelete>\n  <span i18n=\"Delete notification|Message for a notification displayed when budget delete request has been processed@@budget.notification.success.delete\">Budget deleted successfully</span>\n</ng-template>\n\n<ng-template #notificationErrorCreate>\n  <span i18n=\"Create failed notification|Message for a notification displayed when budget create request has failed@@budget.notification.error.create\">Budget was not created</span>\n</ng-template>\n\n<ng-template #notificationErrorUpdate>\n  <span i18n=\"Update failed notification|Message for a notification displayed when budget update request has failed@@budget.notification.error.update\">Budget was not updated</span>\n</ng-template>\n\n<ng-template #notificationErrorDelete>\n  <span i18n=\"Delete failed notification|Message for a notification displayed when budget delete request has failed@@budget.notification.error.delete\">Budget was not deleted</span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return BudgetManagerComponent; }), selector: "bb-budget-manager", inputs: ["background", "budgets", "maxBudgets", "showPercentage", "safeZoneLimit"], outputs: ["editBudget", "createBudget", "deleteBudget"] }, { type: i0.forwardRef(function () { return i5.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return i12.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return BudgetNotificationCustomizableDirective; }), selector: "[bbBudgetNotificationCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i12.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-budget-widget',
                    templateUrl: './budget-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: UtilityService }, { type: BudgetService }, { type: i3$1.NotificationService }, { type: i4.ItemModel, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { showPercentageValue: [{
                type: Input,
                args: ['showPercentage']
            }], budgetSafeZoneLimitValue: [{
                type: Input,
                args: ['budgetSafeZoneLimit']
            }], notificationDismissTimeValue: [{
                type: Input,
                args: ['notificationDismissTime']
            }], maxBudgetsValue: [{
                type: Input,
                args: ['maxBudgets']
            }], notificationCreateTemplate: [{
                type: ViewChild,
                args: ['notificationCreate']
            }], notificationUpdateTemplate: [{
                type: ViewChild,
                args: ['notificationUpdate']
            }], notificationDeleteTemplate: [{
                type: ViewChild,
                args: ['notificationDelete']
            }], notificationErrorCreateTemplate: [{
                type: ViewChild,
                args: ['notificationErrorCreate']
            }], notificationErrorUpdateTemplate: [{
                type: ViewChild,
                args: ['notificationErrorUpdate']
            }], notificationErrorDeleteTemplate: [{
                type: ViewChild,
                args: ['notificationErrorDelete']
            }] } });
class BudgetNotificationCustomizableDirective extends BbTemplate {
}
BudgetNotificationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetNotificationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BudgetNotificationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BudgetNotificationCustomizableDirective, selector: "[bbBudgetNotificationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetNotificationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBudgetNotificationCustomizable]',
                }]
        }] });

const modules = [
    AmountModule,
    ButtonModule,
    CurrencyInputModule,
    DropdownMenuModule,
    EmptyStateModule,
    IconModule,
    InputDatepickerModule,
    InputRadioGroupModule,
    LoadingIndicatorModule,
    ModalModule,
    NotificationModule,
    StepperModule,
];
const components = [
    BudgetWidgetComponent,
    BudgetsHeaderComponent,
    BudgetCardComponent,
    BudgetCardChartComponent,
    BudgetCardInfoComponent,
    BudgetManagerComponent,
];
const directives = [
    BudgetsHeaderCustomizableDirective,
    BudgetCardCustomizableDirective,
    BudgetConfirmationModalCustomizableDirective,
    BudgetUpdateModalCustomizableDirective,
    BudgetCreateModalCustomizableDirective,
    BudgetNotificationCustomizableDirective,
];
class BudgetWidgetModule {
}
BudgetWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BudgetWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetWidgetModule, declarations: [BudgetWidgetComponent,
        BudgetsHeaderComponent,
        BudgetCardComponent,
        BudgetCardChartComponent,
        BudgetCardInfoComponent,
        BudgetManagerComponent, BudgetsHeaderCustomizableDirective,
        BudgetCardCustomizableDirective,
        BudgetConfirmationModalCustomizableDirective,
        BudgetUpdateModalCustomizableDirective,
        BudgetCreateModalCustomizableDirective,
        BudgetNotificationCustomizableDirective], imports: [CommonModule, i4.BackbaseCoreModule, ReactiveFormsModule,
        NgbDropdownModule,
        PieChartModule, AmountModule,
        ButtonModule,
        CurrencyInputModule,
        DropdownMenuModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputRadioGroupModule,
        LoadingIndicatorModule,
        ModalModule,
        NotificationModule,
        StepperModule], exports: [BudgetWidgetComponent,
        BudgetsHeaderComponent,
        BudgetCardComponent,
        BudgetCardChartComponent,
        BudgetCardInfoComponent,
        BudgetManagerComponent, BudgetsHeaderCustomizableDirective,
        BudgetCardCustomizableDirective,
        BudgetConfirmationModalCustomizableDirective,
        BudgetUpdateModalCustomizableDirective,
        BudgetCreateModalCustomizableDirective,
        BudgetNotificationCustomizableDirective, AmountModule,
        ButtonModule,
        CurrencyInputModule,
        DropdownMenuModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputRadioGroupModule,
        LoadingIndicatorModule,
        ModalModule,
        NotificationModule,
        StepperModule] });
BudgetWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetWidgetModule, providers: [BudgetService, CategoriesService, UtilityService, CssVariablesService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { BudgetWidgetComponent },
            }),
            ReactiveFormsModule,
            NgbDropdownModule,
            PieChartModule,
            ...modules,
        ], AmountModule,
        ButtonModule,
        CurrencyInputModule,
        DropdownMenuModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputRadioGroupModule,
        LoadingIndicatorModule,
        ModalModule,
        NotificationModule,
        StepperModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { BudgetWidgetComponent },
                        }),
                        ReactiveFormsModule,
                        NgbDropdownModule,
                        PieChartModule,
                        ...modules,
                    ],
                    declarations: [...components, ...directives],
                    providers: [BudgetService, CategoriesService, UtilityService, CssVariablesService],
                    exports: [...components, ...directives, ...modules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BudgetCardChartComponent, BudgetCardComponent, BudgetCardCustomizableDirective, BudgetCardInfoComponent, BudgetConfirmationModalCustomizableDirective, BudgetCreateModalCustomizableDirective, BudgetManagerComponent, BudgetNotificationCustomizableDirective, BudgetUpdateModalCustomizableDirective, BudgetWidgetComponent, BudgetWidgetModule, BudgetsHeaderComponent, BudgetsHeaderCustomizableDirective };
//# sourceMappingURL=backbase-budget-widget-ang.js.map
