import { HttpErrorResponse } from '@angular/common/http';
import { Component, Directive, Input, Optional, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { catchError, flatMap, map, publish, switchMap, withLatestFrom } from 'rxjs/operators';
import { ModalConfig, PROPERTIES } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "./services/utility.service";
import * as i2 from "./services/budget.service";
import * as i3 from "@backbase/ui-ang/notification";
import * as i4 from "@backbase/foundation-ang/core";
import * as i5 from "./budget-manager/budget-manager.component";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "@angular/common";
var NotificationModifier;
(function (NotificationModifier) {
    NotificationModifier["SUCCESS"] = "success";
    NotificationModifier["INFO"] = "info";
    NotificationModifier["WARNING"] = "warning";
    NotificationModifier["ERROR"] = "error";
})(NotificationModifier || (NotificationModifier = {}));
const filterInputParameters = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));
export class BudgetWidgetComponent {
    constructor(utility, service, notificationService, model) {
        this.utility = utility;
        this.service = service;
        this.notificationService = notificationService;
        this.model = model;
        this.showPercentageSubject = new BehaviorSubject(undefined);
        this.budgetSafeZoneLimitSubject = new BehaviorSubject(undefined);
        this.notificationDismissTimeSubject = new BehaviorSubject(undefined);
        this.maxBudgetsSubject = new BehaviorSubject(undefined);
        this.reload = new BehaviorSubject(undefined);
        this.baseBudgetModalOptions = ModalConfig;
        this.confirmationModalOptions = Object.assign(Object.assign({}, this.baseBudgetModalOptions), { size: 'sm' });
        this.budgetList = this.reload.asObservable().pipe(switchMap(() => this.service.getBudgets()), catchError((error) => {
            this.handleError(error);
            return of(undefined);
        }));
        this.hostRef = this;
        this.serviceResponse = (successHeader, errorHeader) => (source) => source.pipe(flatMap(() => {
            this.reload.next(undefined);
            return of({ header: successHeader, message: '', modifier: NotificationModifier.SUCCESS });
        }), catchError(() => {
            return of({ header: errorHeader, message: '', modifier: NotificationModifier.WARNING });
        }), withLatestFrom(this.notificationDismissTime), map(([notification, notificationDismissTime]) => {
            if (notification) {
                this.pushNotification(notification.header, notification.message, notification.modifier, notificationDismissTime);
            }
            return undefined;
        }), publish());
        this.showPercentage = filterInputParameters(this.showPercentageSubject.asObservable(), this.getProperty(PROPERTIES.showPercentage).pipe(map((propertyValue) => propertyValue + '' === 'true')));
        this.budgetSafeZoneLimit = filterInputParameters(this.budgetSafeZoneLimitSubject.asObservable(), this.getProperty(PROPERTIES.budgetSafeZoneLimit).pipe(map((propertyValue) => parseInt(propertyValue, 10))));
        this.notificationDismissTime = filterInputParameters(this.notificationDismissTimeSubject.asObservable(), this.getProperty(PROPERTIES.notificationDismissTime).pipe(map((propertyValue) => parseFloat(propertyValue))));
        this.maxBudgets = filterInputParameters(this.maxBudgetsSubject.asObservable(), this.getProperty(PROPERTIES.maxBudgets).pipe(map((propertyValue) => parseFloat(propertyValue))));
    }
    set showPercentageValue(value) {
        this.showPercentageSubject.next(value);
    }
    set budgetSafeZoneLimitValue(value) {
        this.budgetSafeZoneLimitSubject.next(value);
    }
    set notificationDismissTimeValue(value) {
        this.notificationDismissTimeSubject.next(value);
    }
    set maxBudgetsValue(value) {
        this.maxBudgetsSubject.next(value);
    }
    pushNotification(header, message, modifier, notificationDismissTime) {
        if (notificationDismissTime) {
            this.notificationService.showNotification({
                header,
                message,
                modifier,
                dismissible: true,
                ttl: notificationDismissTime * 1000,
            });
        }
    }
    createBudget(createBudgetFormData) {
        const budgetName = createBudgetFormData.categoryName;
        const budgetIcon = this.utility.getCategoryIconClass(createBudgetFormData.categoryName);
        const buildCreateBudgetObj = Object.assign(createBudgetFormData, {
            budgetName,
            budgetIcon,
        });
        (this.service
            .createBudget(buildCreateBudgetObj)
            .pipe(this.serviceResponse(this.notificationCreateTemplate, this.notificationErrorCreateTemplate))).connect();
    }
    updateBudget(data) {
        const buildUpdateBudgetObj = Object.assign(data.updateBudgetFormData, {
            budgetName: data.selectedBudgetName,
        });
        (this.service
            .updateBudget(data.selectedBudgetId, buildUpdateBudgetObj)
            .pipe(this.serviceResponse(this.notificationUpdateTemplate, this.notificationErrorUpdateTemplate))).connect();
    }
    deleteBudget(budget) {
        (this.service
            .deleteBudget(budget.id)
            .pipe(this.serviceResponse(this.notificationDeleteTemplate, this.notificationErrorDeleteTemplate))).connect();
    }
    handleError(error) {
        if (error instanceof HttpErrorResponse) {
            this.error = error.statusText;
        }
        else if (error instanceof Error) {
            this.error = error.message;
        }
    }
    getProperty(property) {
        return this.model ? this.model.property(property.name, property.value) : of(property.value);
    }
}
BudgetWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetWidgetComponent, deps: [{ token: i1.UtilityService }, { token: i2.BudgetService }, { token: i3.NotificationService }, { token: i4.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Component });
BudgetWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BudgetWidgetComponent, selector: "bb-budget-widget", inputs: { showPercentageValue: ["showPercentage", "showPercentageValue"], budgetSafeZoneLimitValue: ["budgetSafeZoneLimit", "budgetSafeZoneLimitValue"], notificationDismissTimeValue: ["notificationDismissTime", "notificationDismissTimeValue"], maxBudgetsValue: ["maxBudgets", "maxBudgetsValue"] }, viewQueries: [{ propertyName: "notificationCreateTemplate", first: true, predicate: ["notificationCreate"], descendants: true }, { propertyName: "notificationUpdateTemplate", first: true, predicate: ["notificationUpdate"], descendants: true }, { propertyName: "notificationDeleteTemplate", first: true, predicate: ["notificationDelete"], descendants: true }, { propertyName: "notificationErrorCreateTemplate", first: true, predicate: ["notificationErrorCreate"], descendants: true }, { propertyName: "notificationErrorUpdateTemplate", first: true, predicate: ["notificationErrorUpdate"], descendants: true }, { propertyName: "notificationErrorDeleteTemplate", first: true, predicate: ["notificationErrorDelete"], descendants: true }], ngImport: i0, template: "<div *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"budgetList | async; else loadingState; let budgetList\">\n    <bb-budget-manager\n      [budgets]=\"budgetList\"\n      [showPercentage]=\"(showPercentage | async) || undefined\"\n      [maxBudgets]=\"(maxBudgets | async) || undefined\"\n      [safeZoneLimit]=\"(budgetSafeZoneLimit | async) || undefined\"\n      (createBudget)=\"createBudget($event)\"\n      (editBudget)=\"updateBudget($event)\"\n      (deleteBudget)=\"deleteBudget($event)\"\n    ></bb-budget-manager>\n\n    <ng-container bbBudgetNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </ng-container>\n</div>\n\n<ng-template #errorState>\n  <bb-empty-state-ui \n    class=\"card bb-state-container\"\n    title=\"\"\n    [subtitle]=\"error\"\n    iconModifier=\"error\"\n    iconSize=\"xxl\"\n    iconColor=\"gray\"\n    iconClasses=\"text-muted\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui\n    text=\"Loading budgets...\"\n    i18n-text=\"Loading budgets|Text to display while loading budgets@@budgets.state.loadingBudgets\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template bbBudgetNotificationCustomizable>\n  <ng-container notificationCreate></ng-container>\n  <ng-container notificationUpdate></ng-container>\n  <ng-container notificationDelete></ng-container>\n  <ng-container notificationErrorCreate></ng-container>\n  <ng-container notificationErrorUpdate></ng-container>\n  <ng-container notificationErrorDelete></ng-container>\n</ng-template>\n\n<ng-template #notificationCreate>\n  <span i18n=\"Create notification|Message for a notification displayed when budget create request has been processed@@budget.notification.success.create\">Budget created successfully</span>\n</ng-template>\n\n<ng-template #notificationUpdate>\n  <span i18n=\"Update notification|Message for a notification displayed when budget update request has been processed@@budget.notification.success.update\">Budget updated successfully</span>\n</ng-template>\n\n<ng-template #notificationDelete>\n  <span i18n=\"Delete notification|Message for a notification displayed when budget delete request has been processed@@budget.notification.success.delete\">Budget deleted successfully</span>\n</ng-template>\n\n<ng-template #notificationErrorCreate>\n  <span i18n=\"Create failed notification|Message for a notification displayed when budget create request has failed@@budget.notification.error.create\">Budget was not created</span>\n</ng-template>\n\n<ng-template #notificationErrorUpdate>\n  <span i18n=\"Update failed notification|Message for a notification displayed when budget update request has failed@@budget.notification.error.update\">Budget was not updated</span>\n</ng-template>\n\n<ng-template #notificationErrorDelete>\n  <span i18n=\"Delete failed notification|Message for a notification displayed when budget delete request has failed@@budget.notification.error.delete\">Budget was not deleted</span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i5.BudgetManagerComponent; }), selector: "bb-budget-manager", inputs: ["background", "budgets", "maxBudgets", "showPercentage", "safeZoneLimit"], outputs: ["editBudget", "createBudget", "deleteBudget"] }, { type: i0.forwardRef(function () { return i6.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return BudgetNotificationCustomizableDirective; }), selector: "[bbBudgetNotificationCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i8.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-budget-widget',
                    templateUrl: './budget-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.UtilityService }, { type: i2.BudgetService }, { type: i3.NotificationService }, { type: i4.ItemModel, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { showPercentageValue: [{
                type: Input,
                args: ['showPercentage']
            }], budgetSafeZoneLimitValue: [{
                type: Input,
                args: ['budgetSafeZoneLimit']
            }], notificationDismissTimeValue: [{
                type: Input,
                args: ['notificationDismissTime']
            }], maxBudgetsValue: [{
                type: Input,
                args: ['maxBudgets']
            }], notificationCreateTemplate: [{
                type: ViewChild,
                args: ['notificationCreate']
            }], notificationUpdateTemplate: [{
                type: ViewChild,
                args: ['notificationUpdate']
            }], notificationDeleteTemplate: [{
                type: ViewChild,
                args: ['notificationDelete']
            }], notificationErrorCreateTemplate: [{
                type: ViewChild,
                args: ['notificationErrorCreate']
            }], notificationErrorUpdateTemplate: [{
                type: ViewChild,
                args: ['notificationErrorUpdate']
            }], notificationErrorDeleteTemplate: [{
                type: ViewChild,
                args: ['notificationErrorDelete']
            }] } });
export class BudgetNotificationCustomizableDirective extends BbTemplate {
}
BudgetNotificationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetNotificationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BudgetNotificationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BudgetNotificationCustomizableDirective, selector: "[bbBudgetNotificationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetNotificationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBudgetNotificationCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,