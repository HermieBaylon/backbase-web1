import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/amount";
import * as i2 from "@swimlane/ngx-charts";
import * as i3 from "@angular/common";
export class BudgetCardChartComponent {
    constructor() {
        /**
         * Spending limit of the budget.
         */
        this.spendingLimit = 0;
        /**
         * Currently spent inside a budget.
         */
        this.spent = 0;
        /**
         * Available funds inside a budget.
         */
        this.available = 0;
        /**
         * Budget's currency code.
         */
        this.currencyCode = '';
        /**
         * If set the chart will show a percentage instead of an amount.
         */
        this.showPercentage = false;
        /**
         * Sets the percentage of the safe zone limit of the chart.
         */
        this.safeZoneLimit = 100;
        /**
         * Sets color palette that should be used for rendering the chart.
         */
        this.chartPalette = {
            base: undefined,
            success: undefined,
            warning: undefined,
            danger: undefined,
        };
        this.chartOptions = {
            colorScheme: {
                domain: [''],
            },
            animations: false,
            tooltipDisabled: true,
            doughnut: true,
            explodeSlices: false,
            arcWidth: 0.1,
            gradient: true,
            data: [
                {
                    name: '',
                    value: 1,
                },
            ],
        };
    }
    get isOverBudget() {
        return this.spent > 0 && this.spent > this.spendingLimit;
    }
    fillChartData() {
        if (this.spentPercentage === undefined) {
            return;
        }
        this.chartOptions.animations = true;
        this.chartOptions.data[0].value = Math.round(this.spent);
        if (this.spentPercentage < 100) {
            this.chartOptions.data.unshift({
                name: ' ',
                value: Math.round(this.available),
            });
        }
    }
    setChartPalette() {
        if (this.spentPercentage === undefined) {
            return;
        }
        if (this.spentPercentage >= 100) {
            this.chartOptions.colorScheme.domain = [this.chartPalette.danger || ''];
        }
        else if (this.spentPercentage >= this.safeZoneLimit) {
            this.chartOptions.colorScheme.domain.unshift(this.chartPalette.warning || '');
        }
        else if (this.spentPercentage === 0) {
            this.chartOptions.colorScheme.domain = [this.chartPalette.success || ''];
        }
        else {
            this.chartOptions.colorScheme.domain.unshift(this.chartPalette.success || '');
        }
    }
    ngOnInit() {
        this.chartOptions.colorScheme.domain = [this.chartPalette.base || ''];
        this.fillChartData();
        this.setChartPalette();
    }
}
BudgetCardChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BudgetCardChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BudgetCardChartComponent, selector: "bb-budget-card-chart-ui", inputs: { spendingLimit: "spendingLimit", spent: "spent", spentPercentage: "spentPercentage", available: "available", currencyCode: "currencyCode", showPercentage: "showPercentage", safeZoneLimit: "safeZoneLimit", chartPalette: "chartPalette" }, ngImport: i0, template: "<div class=\"clearfix bb-budget-card-chart bb-text-align-center\">\n  <div class=\"absolute-center\">\n    <bb-amount-ui\n      *ngIf=\"!showPercentage\"\n      [amount]=\"available!\"\n      [currency]=\"currencyCode!\"\n      [decimalPlaces]=\"0\"\n      class=\"bb-highlight\"\n      [ngClass]=\"{\n        'text-success': spentPercentage ? spentPercentage < safeZoneLimit : false,\n        'text-warning': spentPercentage ? spentPercentage >= safeZoneLimit && spentPercentage < 100: false,\n        'text-danger': spentPercentage ? spentPercentage >= 100 : false\n      }\"\n    ></bb-amount-ui>\n\n    <div\n      *ngIf=\"showPercentage\"\n      class=\"bb-highlight\"\n    >\n      {{spentPercentage}} %\n    </div>\n\n    <div>\n      <span\n        *ngIf=\"!isOverBudget\"\n        i18n=\"Left|Left chart label@@budget.chart.left.label\"\n      >\n        Left\n      </span>\n      <span\n        *ngIf=\"isOverBudget\"\n        i18n=\"Over|Over chart label@@budget.chart.over.label\"\n      >\n        Over\n      </span>\n    </div>\n  </div>\n\n  <ngx-charts-pie-chart\n    [scheme]=\"chartOptions.colorScheme\"\n    [results]=\"chartOptions.data\"\n    [animations]=\"chartOptions.animations\"\n    [tooltipDisabled]=\"chartOptions.tooltipDisabled\"\n    [doughnut]=\"chartOptions.doughnut\"\n    [explodeSlices]=\"chartOptions.explodeSlices\"\n    [arcWidth]=\"chartOptions.arcWidth\"\n    [gradient]=\"chartOptions.gradient\"\n  ></ngx-charts-pie-chart>\n</div>\n", components: [{ type: i1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i2.PieChartComponent, selector: "ngx-charts-pie-chart", inputs: ["labels", "legend", "legendTitle", "legendPosition", "explodeSlices", "doughnut", "arcWidth", "activeEntries", "tooltipDisabled", "trimLabels", "maxLabelLength", "margins", "gradient", "labelFormatting", "tooltipText"], outputs: ["dblclick", "select", "activate", "deactivate"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetCardChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-budget-card-chart-ui',
                    templateUrl: './budget-card-chart.component.html',
                }]
        }], propDecorators: { spendingLimit: [{
                type: Input
            }], spent: [{
                type: Input
            }], spentPercentage: [{
                type: Input
            }], available: [{
                type: Input
            }], currencyCode: [{
                type: Input
            }], showPercentage: [{
                type: Input
            }], safeZoneLimit: [{
                type: Input
            }], chartPalette: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,