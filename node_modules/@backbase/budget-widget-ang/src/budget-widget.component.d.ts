import { HttpErrorResponse } from '@angular/common/http';
import { TemplateRef } from '@angular/core';
import { BbTemplate, ItemModel } from '@backbase/foundation-ang/core';
import { NotificationService } from '@backbase/ui-ang/notification';
import { Observable } from 'rxjs';
import { CreateBudgetForm, UpdateBudgetForm } from './budget-manager/budget-manager.component';
import { BudgetData, BudgetList } from './model/budgets';
import { BudgetService } from './services/budget.service';
import { UtilityService } from './services/utility.service';
import * as i0 from "@angular/core";
export declare class BudgetWidgetComponent {
    private readonly utility;
    private readonly service;
    private readonly notificationService;
    private readonly model;
    set showPercentageValue(value: boolean);
    set budgetSafeZoneLimitValue(value: number);
    set notificationDismissTimeValue(value: number);
    set maxBudgetsValue(value: number);
    notificationCreateTemplate: TemplateRef<any> | undefined;
    notificationUpdateTemplate: TemplateRef<any> | undefined;
    notificationDeleteTemplate: TemplateRef<any> | undefined;
    notificationErrorCreateTemplate: TemplateRef<any> | undefined;
    notificationErrorUpdateTemplate: TemplateRef<any> | undefined;
    notificationErrorDeleteTemplate: TemplateRef<any> | undefined;
    private readonly showPercentageSubject;
    private readonly budgetSafeZoneLimitSubject;
    private readonly notificationDismissTimeSubject;
    private readonly maxBudgetsSubject;
    private readonly reload;
    readonly baseBudgetModalOptions: {
        backdrop: string;
        keyboard: boolean;
    };
    readonly confirmationModalOptions: {
        size: string;
        backdrop: string;
        keyboard: boolean;
    };
    readonly budgetList: Observable<BudgetList | undefined>;
    hostRef: this;
    error: string | undefined;
    constructor(utility: UtilityService, service: BudgetService, notificationService: NotificationService, model: ItemModel);
    private pushNotification;
    private readonly serviceResponse;
    createBudget(createBudgetFormData: CreateBudgetForm): void;
    updateBudget(data: UpdateBudgetForm): void;
    deleteBudget(budget: BudgetData): void;
    handleError(error: HttpErrorResponse | Error): void;
    readonly showPercentage: Observable<boolean>;
    readonly budgetSafeZoneLimit: Observable<number>;
    readonly notificationDismissTime: Observable<number>;
    readonly maxBudgets: Observable<number>;
    private getProperty;
    static ɵfac: i0.ɵɵFactoryDeclaration<BudgetWidgetComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BudgetWidgetComponent, "bb-budget-widget", never, { "showPercentageValue": "showPercentage"; "budgetSafeZoneLimitValue": "budgetSafeZoneLimit"; "notificationDismissTimeValue": "notificationDismissTime"; "maxBudgetsValue": "maxBudgets"; }, {}, never, never>;
}
export declare class BudgetNotificationCustomizableDirective extends BbTemplate<BudgetWidgetComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<BudgetNotificationCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BudgetNotificationCustomizableDirective, "[bbBudgetNotificationCustomizable]", never, {}, {}, never>;
}
