(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/loans-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["loans-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var PresentationAmortizationPaymentStatus = {
        Scheduled: 'Scheduled',
        Overdue: 'Overdue'
    };

    var PresentationFrequency = {
        Weekly: 'Weekly',
        Biweekly: 'Biweekly',
        Twicemonthly: 'Twicemonthly',
        Monthly: 'Monthly',
        Fourweeks: 'Fourweeks',
        Bimonthly: 'Bimonthly',
        Quarterly: 'Quarterly',
        Semiannually: 'Semiannually',
        Annually: 'Annually',
        Maturity: 'Maturity'
    };

    var PresentationLoanStatus = {
        Active: 'Active',
        Inactive: 'Inactive',
        Pending: 'Pending'
    };

    var PresentationOperationType = {
        Credit: 'Credit',
        Debit: 'Debit'
    };

    var PresentationPaymentAmountCalculationType = {
        CustomAmount: 'CustomAmount',
        PayOffAmount: 'PayOffAmount'
    };

    var PresentationTermUnit = {
        Day: 'Day',
        Week: 'Week',
        Month: 'Month',
        Year: 'Year'
    };

    var LOANS_BASE_PATH = new i0.InjectionToken('LOANS_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var LoansConfiguration = /** @class */ (function () {
        function LoansConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        LoansConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        LoansConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        LoansConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        LoansConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return LoansConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module LoansConfiguration');

    var LoansApiModule = /** @class */ (function () {
        function LoansApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('LoansApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        LoansApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: LoansApiModule,
                providers: [{ provide: LoansConfiguration, useFactory: configurationFactory }]
            };
        };
        return LoansApiModule;
    }());
    LoansApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LoansApiModule, deps: [{ token: LoansApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: LoansConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    LoansApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LoansApiModule });
    LoansApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LoansApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LoansApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: LoansApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: LoansConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var LoansHttpService = /** @class */ (function () {
        function LoansHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new LoansConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        LoansHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        LoansHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        LoansHttpService.prototype.downloadDocumentByLoanIdAndDocumentId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
            }
            var _documentId = requestParameters["documentId"];
            if (_documentId === null || _documentId === undefined) {
                throw new Error('Required parameter documentId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
            }
            var _inline = requestParameters["inline"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_inline !== undefined && _inline !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _inline, 'inline');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'binary/octet-stream',
                    'application/pdf',
                    'text/plain',
                    'text/csv',
                    'application/rtf',
                    'application/msword',
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                    'application/vnd.ms-excel',
                    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                    'application/xml',
                    'image/png',
                    'image/jpeg',
                    'image/gif',
                    'image/tiff',
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/documents/" + encodeURIComponent(String(_documentId)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LoansHttpService.prototype.downloadDocumentByLoanIdAndDocumentIdUrl = function (requestParameters) {
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
            }
            var _documentId = requestParameters["documentId"];
            if (_documentId === null || _documentId === undefined) {
                throw new Error('Required parameter documentId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
            }
            var _inline = requestParameters["inline"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_inline !== undefined && _inline !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _inline, 'inline');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/documents/" + encodeURIComponent(String(_documentId)) + (queryString ? "?" + queryString : '');
        };
        LoansHttpService.prototype.getAmortizationPayment = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling getAmortizationPayment.');
            }
            var _amortizationPaymentId = requestParameters["amortizationPaymentId"];
            if (_amortizationPaymentId === null || _amortizationPaymentId === undefined) {
                throw new Error('Required parameter amortizationPaymentId was null or undefined when calling getAmortizationPayment.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/amortization-schedule/" + encodeURIComponent(String(_amortizationPaymentId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LoansHttpService.prototype.getAmortizationPaymentUrl = function (requestParameters) {
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling getAmortizationPayment.');
            }
            var _amortizationPaymentId = requestParameters["amortizationPaymentId"];
            if (_amortizationPaymentId === null || _amortizationPaymentId === undefined) {
                throw new Error('Required parameter amortizationPaymentId was null or undefined when calling getAmortizationPayment.');
            }
            return this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/amortization-schedule/" + encodeURIComponent(String(_amortizationPaymentId));
        };
        LoansHttpService.prototype.getAmortizationSchedule = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling getAmortizationSchedule.');
            }
            var _status = requestParameters["status"];
            var _fromAmount = requestParameters["fromAmount"];
            var _toAmount = requestParameters["toAmount"];
            var _fromDate = requestParameters["fromDate"];
            var _toDate = requestParameters["toDate"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _sort = requestParameters["sort"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_status !== undefined && _status !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
            }
            if (_fromAmount !== undefined && _fromAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _fromAmount, 'fromAmount');
            }
            if (_toAmount !== undefined && _toAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _toAmount, 'toAmount');
            }
            if (_fromDate !== undefined && _fromDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
            }
            if (_toDate !== undefined && _toDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_sort !== undefined && _sort !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/amortization-schedule", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LoansHttpService.prototype.getAmortizationScheduleUrl = function (requestParameters) {
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling getAmortizationSchedule.');
            }
            var _status = requestParameters["status"];
            var _fromAmount = requestParameters["fromAmount"];
            var _toAmount = requestParameters["toAmount"];
            var _fromDate = requestParameters["fromDate"];
            var _toDate = requestParameters["toDate"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _sort = requestParameters["sort"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_status !== undefined && _status !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
            }
            if (_fromAmount !== undefined && _fromAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _fromAmount, 'fromAmount');
            }
            if (_toAmount !== undefined && _toAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _toAmount, 'toAmount');
            }
            if (_fromDate !== undefined && _fromDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
            }
            if (_toDate !== undefined && _toDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_sort !== undefined && _sort !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/amortization-schedule" + (queryString ? "?" + queryString : '');
        };
        LoansHttpService.prototype.getLoanById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling getLoanById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LoansHttpService.prototype.getLoanByIdUrl = function (requestParameters) {
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling getLoanById.');
            }
            return this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId));
        };
        LoansHttpService.prototype.getLoans = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/loans", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LoansHttpService.prototype.getLoansUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/loans" + (queryString ? "?" + queryString : '');
        };
        LoansHttpService.prototype.headLoans = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.head(this.configuration.basePath + "/client-api/v1/loans", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LoansHttpService.prototype.headLoansUrl = function () {
            return this.configuration.basePath + "/client-api/v1/loans";
        };
        return LoansHttpService;
    }());
    LoansHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LoansHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: LOANS_BASE_PATH, optional: true }, { token: LoansConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    LoansHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LoansHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LoansHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LOANS_BASE_PATH]
                        }] }, { type: LoansConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var LoansHttpServiceDownloadDocumentByLoanIdAndDocumentIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/loans/{loanId}/documents/{documentId}",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LoansHttpServiceGetAmortizationPaymentMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/loans/{loanId}/amortization-schedule/{amortizationPaymentId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/amortization-payment.yaml",
                        "id": "829d1713-8c65-4366-98c2-65a518255365",
                        "paymentDate": "2020-07-24T00:00:00Z",
                        "currencyCode": "USD",
                        "paymentAmount": "40000.00000",
                        "interest": "0.00000",
                        "principal": "4000.00000",
                        "endingPrincipalBalance": "40000.00000",
                        "status": "Overdue",
                        "paymentType": "principal-only"
                    }
                },
                {
                    status: 200,
                    body: {
                        "principal": "principal",
                        "interest": "interest",
                        "endingPrincipalBalance": "endingPrincipalBalance",
                        "id": "id",
                        "paymentDate": "2000-01-23T04:56:07.000+00:00",
                        "paymentAmount": "paymentAmount",
                        "currencyCode": "currencyCode",
                        "paymentType": "paymentType"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LoansHttpServiceGetAmortizationScheduleMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/loans/{loanId}/amortization-schedule",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/amortization-schedule.yaml",
                        "payments": [{
                                "id": "829d1713-8c65-4366-98c2-65a518255365",
                                "paymentDate": "2020-07-24T00:00:00Z",
                                "currencyCode": "USD",
                                "paymentAmount": "40000.00000",
                                "interest": "0.00000",
                                "principal": "4000.00000",
                                "endingPrincipalBalance": "40000.00000",
                                "status": "Overdue",
                                "paymentType": "principal-only"
                            }, {
                                "id": "522c5077-8fdc-43c0-bc71-d59bb66ea8ce",
                                "paymentDate": "2020-08-24T00:00:00Z",
                                "currencyCode": "USD",
                                "paymentAmount": "8000.00000",
                                "endingPrincipalBalance": "32000.00000",
                                "status": "Scheduled",
                                "paymentType": "interest-only"
                            }, {
                                "id": "9f4c565d-ffab-4ca1-9094-ee0d53a08782",
                                "paymentDate": "2020-09-24T00:00:00Z",
                                "currencyCode": "USD",
                                "paymentAmount": "32001.00000",
                                "interest": "1",
                                "principal": "32000.00000",
                                "endingPrincipalBalance": "0.00000",
                                "status": "Scheduled",
                                "paymentType": "principal-and-interest"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LoansHttpServiceGetLoanByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/loans/{loanId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/loan.yaml",
                        "id": "9ed25bae-11eb-4840-b4fc-37bbe2e5f9c9",
                        "loanType": "LineOfCredit",
                        "name": "AnyBank Credit Line 1",
                        "accountNumber": "096010415 000789 CL01",
                        "contractNumber": "ATV-676097",
                        "loanStatus": "Active",
                        "currencyCode": "USD",
                        "nextRepaymentDate": "2021-09-13T17:00:00.000Z",
                        "nextRepaymentAmount": "200.00000",
                        "availableBalance": "690.37000",
                        "outstandingAmount": "1954.94000",
                        "creditLimit": "2456.98000",
                        "drawnAmount": "1766.61000",
                        "feesDue": "100.00000",
                        "interestDue": "88.33000",
                        "interestRate": "5.00000",
                        "isOverdue": false,
                        "overduePaymentsCount": 0,
                        "branchCode": "001",
                        "startDate": "1996-10-23T17:00:00.000Z",
                        "endDate": "2022-04-16T17:00:00.000Z",
                        "borrower": ["John a. Doen", "M. Joaveni", "Robert Kan", "Kamal Terrell"],
                        "defaultSettlementAccountId": "801b785e-c063-457c-bc12-82386f3ebc2d",
                        "defaultSettlementAccountNumber": "•••• •••• ••• 4568",
                        "defaultSettlementAccountName": "Prestige Operating Account",
                        "documents": [{
                                "documentId": "uid_00001",
                                "name": "Loan Contract",
                                "contentType": "application/pdf"
                            }],
                        "isFullyRepaid": false,
                        "termUnit": "Year",
                        "termCount": 26,
                        "paymentFrequency": "Bimonthly",
                        "interestPaymentFrequency": "Biweekly",
                        "collateral": [{
                                "type": "Real estate",
                                "currentValue": "100",
                                "currencyCode": "EUR",
                                "specification": "300 Park Avenue 15th Floor, New York, NY 10022",
                                "nextRevaluationDate": "2021-02-28"
                            }],
                        "escrow": {
                            "totalAmount": "100",
                            "insurance": "50",
                            "fees": "30",
                            "tax": "20",
                            "pmi": "10",
                            "other": "5"
                        },
                        "paymentOptions": {
                            "paymentOptions": [{
                                    "name": "LoanPayment",
                                    "operationType": "Credit",
                                    "allowed": true,
                                    "errorCodes": []
                                }, {
                                    "name": "LoanAdvance",
                                    "operationType": "Debit",
                                    "allowed": true,
                                    "errorCodes": []
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "nextRepaymentAmount": "nextRepaymentAmount",
                        "defaultSettlementAccountId": "defaultSettlementAccountId",
                        "loanType": "loanType",
                        "outstandingAmount": "outstandingAmount",
                        "inArrearsDate": "2000-01-23T04:56:07.000+00:00",
                        "endDate": "2000-01-23T04:56:07.000+00:00",
                        "documents": [{
                                "name": "name",
                                "documentId": "documentId",
                                "contentType": "contentType"
                            }, {
                                "name": "name",
                                "documentId": "documentId",
                                "contentType": "contentType"
                            }],
                        "termCount": 6,
                        "availableBalance": "availableBalance",
                        "drawnAmount": "drawnAmount",
                        "paymentOptions": {
                            "paymentOptions": [{
                                    "allowed": true,
                                    "errorCodes": ["errorCodes", "errorCodes"],
                                    "name": "name"
                                }, {
                                    "allowed": true,
                                    "errorCodes": ["errorCodes", "errorCodes"],
                                    "name": "name"
                                }]
                        },
                        "defaultSettlementAccountName": "defaultSettlementAccountName",
                        "nextRepaymentDate": "2000-01-23T04:56:07.000+00:00",
                        "alias": "alias",
                        "creditLimit": "creditLimit",
                        "escrow": {
                            "insurance": "insurance",
                            "totalAmount": "totalAmount",
                            "fees": "fees",
                            "other": "other",
                            "tax": "tax",
                            "pmi": "pmi"
                        },
                        "isFullyRepaid": true,
                        "id": "id",
                        "overduePaymentsCount": 0,
                        "feesDue": "feesDue",
                        "defaultSettlementAccountNumber": "defaultSettlementAccountNumber",
                        "interestRate": "interestRate",
                        "borrower": ["borrower", "borrower"],
                        "contractNumber": "contractNumber",
                        "accountNumber": "accountNumber",
                        "inArrearsAmount": "inArrearsAmount",
                        "branchCode": "branchCode",
                        "isOverdue": true,
                        "interestDue": "interestDue",
                        "name": "name",
                        "collateral": [{
                                "specification": "specification",
                                "nextRevaluationDate": "2000-01-23",
                                "type": "type",
                                "currencyCode": "currencyCode",
                                "currentValue": "currentValue"
                            }, {
                                "specification": "specification",
                                "nextRevaluationDate": "2000-01-23",
                                "type": "type",
                                "currencyCode": "currencyCode",
                                "currentValue": "currentValue"
                            }],
                        "currencyCode": "currencyCode",
                        "paidAmount": "paidAmount",
                        "startDate": "2000-01-23T04:56:07.000+00:00"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LoansHttpServiceGetLoansMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/loans",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/loans.yaml",
                        "loans": [{
                                "id": "9ed25bae-11eb-4840-b4fc-37bbe2e5f9c9",
                                "loanType": "LineOfCredit",
                                "name": "Line of credit 1",
                                "accountNumber": "NL98RABO5242052503",
                                "loanStatus": "Pending",
                                "currencyCode": "EUR",
                                "paymentOptions": {
                                    "paymentOptions": [{
                                            "name": "LoanPayment",
                                            "operationType": "Credit",
                                            "allowed": true,
                                            "errorCodes": []
                                        }, {
                                            "name": "LoanAdvance",
                                            "operationType": "Debit",
                                            "allowed": true,
                                            "errorCodes": []
                                        }]
                                }
                            }, {
                                "id": "764ac5bb-f462-412f-8aee-a218737e1d2a",
                                "name": "Term loan 1",
                                "loanType": "TermLoan",
                                "accountNumber": "NL88ABNA4242739303",
                                "loanStatus": "Active",
                                "currencyCode": "EUR",
                                "paidAmount": "55567.23",
                                "outstandingAmount": "54432.77",
                                "paymentOptions": {
                                    "paymentOptions": [{
                                            "name": "LoanPayment",
                                            "operationType": "Credit",
                                            "allowed": true,
                                            "errorCodes": []
                                        }]
                                }
                            }, {
                                "id": "7688bd60-dfad-45ba-b1ce-abc6e9ea5208",
                                "loanType": "Mortgage",
                                "name": "Mortgage 1",
                                "accountNumber": "MR3731835513862558214883344",
                                "loanStatus": "Inactive",
                                "currencyCode": "MRU",
                                "paymentOptions": {
                                    "paymentOptions": [{
                                            "name": "LoanPayment",
                                            "operationType": "Credit",
                                            "allowed": false,
                                            "errorCodes": ["not.allowed.for.inactive.loan"]
                                        }, {
                                            "name": "LoanAdvance",
                                            "operationType": "Debit",
                                            "allowed": false,
                                            "errorCodes": ["not.allowed.for.inactive.loan"]
                                        }]
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LoansHttpServiceHeadLoansMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/loans",
            method: "HEAD",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LoansHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/loans/{loanId}/documents/{documentId}",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/loans/{loanId}/amortization-schedule/{amortizationPaymentId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/amortization-payment.yaml",
                        "id": "829d1713-8c65-4366-98c2-65a518255365",
                        "paymentDate": "2020-07-24T00:00:00Z",
                        "currencyCode": "USD",
                        "paymentAmount": "40000.00000",
                        "interest": "0.00000",
                        "principal": "4000.00000",
                        "endingPrincipalBalance": "40000.00000",
                        "status": "Overdue",
                        "paymentType": "principal-only"
                    }
                },
                {
                    status: 200,
                    body: {
                        "principal": "principal",
                        "interest": "interest",
                        "endingPrincipalBalance": "endingPrincipalBalance",
                        "id": "id",
                        "paymentDate": "2000-01-23T04:56:07.000+00:00",
                        "paymentAmount": "paymentAmount",
                        "currencyCode": "currencyCode",
                        "paymentType": "paymentType"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/loans/{loanId}/amortization-schedule",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/amortization-schedule.yaml",
                        "payments": [{
                                "id": "829d1713-8c65-4366-98c2-65a518255365",
                                "paymentDate": "2020-07-24T00:00:00Z",
                                "currencyCode": "USD",
                                "paymentAmount": "40000.00000",
                                "interest": "0.00000",
                                "principal": "4000.00000",
                                "endingPrincipalBalance": "40000.00000",
                                "status": "Overdue",
                                "paymentType": "principal-only"
                            }, {
                                "id": "522c5077-8fdc-43c0-bc71-d59bb66ea8ce",
                                "paymentDate": "2020-08-24T00:00:00Z",
                                "currencyCode": "USD",
                                "paymentAmount": "8000.00000",
                                "endingPrincipalBalance": "32000.00000",
                                "status": "Scheduled",
                                "paymentType": "interest-only"
                            }, {
                                "id": "9f4c565d-ffab-4ca1-9094-ee0d53a08782",
                                "paymentDate": "2020-09-24T00:00:00Z",
                                "currencyCode": "USD",
                                "paymentAmount": "32001.00000",
                                "interest": "1",
                                "principal": "32000.00000",
                                "endingPrincipalBalance": "0.00000",
                                "status": "Scheduled",
                                "paymentType": "principal-and-interest"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/loans/{loanId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/loan.yaml",
                        "id": "9ed25bae-11eb-4840-b4fc-37bbe2e5f9c9",
                        "loanType": "LineOfCredit",
                        "name": "AnyBank Credit Line 1",
                        "accountNumber": "096010415 000789 CL01",
                        "contractNumber": "ATV-676097",
                        "loanStatus": "Active",
                        "currencyCode": "USD",
                        "nextRepaymentDate": "2021-09-13T17:00:00.000Z",
                        "nextRepaymentAmount": "200.00000",
                        "availableBalance": "690.37000",
                        "outstandingAmount": "1954.94000",
                        "creditLimit": "2456.98000",
                        "drawnAmount": "1766.61000",
                        "feesDue": "100.00000",
                        "interestDue": "88.33000",
                        "interestRate": "5.00000",
                        "isOverdue": false,
                        "overduePaymentsCount": 0,
                        "branchCode": "001",
                        "startDate": "1996-10-23T17:00:00.000Z",
                        "endDate": "2022-04-16T17:00:00.000Z",
                        "borrower": ["John a. Doen", "M. Joaveni", "Robert Kan", "Kamal Terrell"],
                        "defaultSettlementAccountId": "801b785e-c063-457c-bc12-82386f3ebc2d",
                        "defaultSettlementAccountNumber": "•••• •••• ••• 4568",
                        "defaultSettlementAccountName": "Prestige Operating Account",
                        "documents": [{
                                "documentId": "uid_00001",
                                "name": "Loan Contract",
                                "contentType": "application/pdf"
                            }],
                        "isFullyRepaid": false,
                        "termUnit": "Year",
                        "termCount": 26,
                        "paymentFrequency": "Bimonthly",
                        "interestPaymentFrequency": "Biweekly",
                        "collateral": [{
                                "type": "Real estate",
                                "currentValue": "100",
                                "currencyCode": "EUR",
                                "specification": "300 Park Avenue 15th Floor, New York, NY 10022",
                                "nextRevaluationDate": "2021-02-28"
                            }],
                        "escrow": {
                            "totalAmount": "100",
                            "insurance": "50",
                            "fees": "30",
                            "tax": "20",
                            "pmi": "10",
                            "other": "5"
                        },
                        "paymentOptions": {
                            "paymentOptions": [{
                                    "name": "LoanPayment",
                                    "operationType": "Credit",
                                    "allowed": true,
                                    "errorCodes": []
                                }, {
                                    "name": "LoanAdvance",
                                    "operationType": "Debit",
                                    "allowed": true,
                                    "errorCodes": []
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "nextRepaymentAmount": "nextRepaymentAmount",
                        "defaultSettlementAccountId": "defaultSettlementAccountId",
                        "loanType": "loanType",
                        "outstandingAmount": "outstandingAmount",
                        "inArrearsDate": "2000-01-23T04:56:07.000+00:00",
                        "endDate": "2000-01-23T04:56:07.000+00:00",
                        "documents": [{
                                "name": "name",
                                "documentId": "documentId",
                                "contentType": "contentType"
                            }, {
                                "name": "name",
                                "documentId": "documentId",
                                "contentType": "contentType"
                            }],
                        "termCount": 6,
                        "availableBalance": "availableBalance",
                        "drawnAmount": "drawnAmount",
                        "paymentOptions": {
                            "paymentOptions": [{
                                    "allowed": true,
                                    "errorCodes": ["errorCodes", "errorCodes"],
                                    "name": "name"
                                }, {
                                    "allowed": true,
                                    "errorCodes": ["errorCodes", "errorCodes"],
                                    "name": "name"
                                }]
                        },
                        "defaultSettlementAccountName": "defaultSettlementAccountName",
                        "nextRepaymentDate": "2000-01-23T04:56:07.000+00:00",
                        "alias": "alias",
                        "creditLimit": "creditLimit",
                        "escrow": {
                            "insurance": "insurance",
                            "totalAmount": "totalAmount",
                            "fees": "fees",
                            "other": "other",
                            "tax": "tax",
                            "pmi": "pmi"
                        },
                        "isFullyRepaid": true,
                        "id": "id",
                        "overduePaymentsCount": 0,
                        "feesDue": "feesDue",
                        "defaultSettlementAccountNumber": "defaultSettlementAccountNumber",
                        "interestRate": "interestRate",
                        "borrower": ["borrower", "borrower"],
                        "contractNumber": "contractNumber",
                        "accountNumber": "accountNumber",
                        "inArrearsAmount": "inArrearsAmount",
                        "branchCode": "branchCode",
                        "isOverdue": true,
                        "interestDue": "interestDue",
                        "name": "name",
                        "collateral": [{
                                "specification": "specification",
                                "nextRevaluationDate": "2000-01-23",
                                "type": "type",
                                "currencyCode": "currencyCode",
                                "currentValue": "currentValue"
                            }, {
                                "specification": "specification",
                                "nextRevaluationDate": "2000-01-23",
                                "type": "type",
                                "currencyCode": "currencyCode",
                                "currentValue": "currentValue"
                            }],
                        "currencyCode": "currencyCode",
                        "paidAmount": "paidAmount",
                        "startDate": "2000-01-23T04:56:07.000+00:00"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/loans",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/loans.yaml",
                        "loans": [{
                                "id": "9ed25bae-11eb-4840-b4fc-37bbe2e5f9c9",
                                "loanType": "LineOfCredit",
                                "name": "Line of credit 1",
                                "accountNumber": "NL98RABO5242052503",
                                "loanStatus": "Pending",
                                "currencyCode": "EUR",
                                "paymentOptions": {
                                    "paymentOptions": [{
                                            "name": "LoanPayment",
                                            "operationType": "Credit",
                                            "allowed": true,
                                            "errorCodes": []
                                        }, {
                                            "name": "LoanAdvance",
                                            "operationType": "Debit",
                                            "allowed": true,
                                            "errorCodes": []
                                        }]
                                }
                            }, {
                                "id": "764ac5bb-f462-412f-8aee-a218737e1d2a",
                                "name": "Term loan 1",
                                "loanType": "TermLoan",
                                "accountNumber": "NL88ABNA4242739303",
                                "loanStatus": "Active",
                                "currencyCode": "EUR",
                                "paidAmount": "55567.23",
                                "outstandingAmount": "54432.77",
                                "paymentOptions": {
                                    "paymentOptions": [{
                                            "name": "LoanPayment",
                                            "operationType": "Credit",
                                            "allowed": true,
                                            "errorCodes": []
                                        }]
                                }
                            }, {
                                "id": "7688bd60-dfad-45ba-b1ce-abc6e9ea5208",
                                "loanType": "Mortgage",
                                "name": "Mortgage 1",
                                "accountNumber": "MR3731835513862558214883344",
                                "loanStatus": "Inactive",
                                "currencyCode": "MRU",
                                "paymentOptions": {
                                    "paymentOptions": [{
                                            "name": "LoanPayment",
                                            "operationType": "Credit",
                                            "allowed": false,
                                            "errorCodes": ["not.allowed.for.inactive.loan"]
                                        }, {
                                            "name": "LoanAdvance",
                                            "operationType": "Debit",
                                            "allowed": false,
                                            "errorCodes": ["not.allowed.for.inactive.loan"]
                                        }]
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/loans",
            method: "HEAD",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var PaymentHttpService = /** @class */ (function () {
        function PaymentHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new LoansConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PaymentHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PaymentHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PaymentHttpService.prototype.calculatePaymentAmount = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling calculatePaymentAmount.');
            }
            var _presentationCalculatePaymentAmountRequest = requestParameters["presentationCalculatePaymentAmountRequest"];
            if (_presentationCalculatePaymentAmountRequest === null || _presentationCalculatePaymentAmountRequest === undefined) {
                throw new Error('Required parameter presentationCalculatePaymentAmountRequest was null or undefined when calling calculatePaymentAmount.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/calculate-payment-amount", _presentationCalculatePaymentAmountRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentHttpService.prototype.calculatePaymentAmountUrl = function (requestParameters) {
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling calculatePaymentAmount.');
            }
            var _presentationCalculatePaymentAmountRequest = requestParameters["presentationCalculatePaymentAmountRequest"];
            if (_presentationCalculatePaymentAmountRequest === null || _presentationCalculatePaymentAmountRequest === undefined) {
                throw new Error('Required parameter presentationCalculatePaymentAmountRequest was null or undefined when calling calculatePaymentAmount.');
            }
            return this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/calculate-payment-amount";
        };
        return PaymentHttpService;
    }());
    PaymentHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: LOANS_BASE_PATH, optional: true }, { token: LoansConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LOANS_BASE_PATH]
                        }] }, { type: LoansConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PaymentHttpServiceCalculatePaymentAmountMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/loans/{loanId}/calculate-payment-amount",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/calculated-payment-amount.yaml",
                        "paymentOption": "LOAN_PAYMENT",
                        "paymentDate": "2021-12-22",
                        "currentPaymentAmount": "100.00000",
                        "fees": [{
                                "feeType": "Transaction fee",
                                "amount": "11.00000",
                                "sameTransaction": false
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PaymentHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/loans/{loanId}/calculate-payment-amount",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/calculated-payment-amount.yaml",
                        "paymentOption": "LOAN_PAYMENT",
                        "paymentDate": "2021-12-22",
                        "currentPaymentAmount": "100.00000",
                        "fees": [{
                                "feeType": "Transaction fee",
                                "amount": "11.00000",
                                "sameTransaction": false
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var PaymentOptionsHttpService = /** @class */ (function () {
        function PaymentOptionsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new LoansConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PaymentOptionsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PaymentOptionsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PaymentOptionsHttpService.prototype.getPaymentOptions = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling getPaymentOptions.');
            }
            var _operationType = requestParameters["operationType"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_operationType) {
                _operationType.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'operationType');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/payment-options", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOptionsHttpService.prototype.getPaymentOptionsUrl = function (requestParameters) {
            var _this = this;
            var _loanId = requestParameters["loanId"];
            if (_loanId === null || _loanId === undefined) {
                throw new Error('Required parameter loanId was null or undefined when calling getPaymentOptions.');
            }
            var _operationType = requestParameters["operationType"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_operationType) {
                _operationType.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'operationType');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/loans/" + encodeURIComponent(String(_loanId)) + "/payment-options" + (queryString ? "?" + queryString : '');
        };
        return PaymentOptionsHttpService;
    }());
    PaymentOptionsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOptionsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: LOANS_BASE_PATH, optional: true }, { token: LoansConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentOptionsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOptionsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOptionsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LOANS_BASE_PATH]
                        }] }, { type: LoansConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PaymentOptionsHttpServiceGetPaymentOptionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/loans/{loanId}/payment-options",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/payment-options.yaml",
                        "paymentOptions": [{
                                "name": "LoanPayment",
                                "operationType": "Credit",
                                "allowed": true
                            }, {
                                "name": "LoanAdvance",
                                "operationType": "Debit",
                                "allowed": false,
                                "errorCodes": ["draw.amount.is.not.allowed"]
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "paymentOptions": [{
                                "allowed": true,
                                "errorCodes": ["errorCodes", "errorCodes"],
                                "name": "name"
                            }, {
                                "allowed": true,
                                "errorCodes": ["errorCodes", "errorCodes"],
                                "name": "name"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PaymentOptionsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/loans/{loanId}/payment-options",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$schema": "../schemas/payment-options.yaml",
                        "paymentOptions": [{
                                "name": "LoanPayment",
                                "operationType": "Credit",
                                "allowed": true
                            }, {
                                "name": "LoanAdvance",
                                "operationType": "Debit",
                                "allowed": false,
                                "errorCodes": ["draw.amount.is.not.allowed"]
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "paymentOptions": [{
                                "allowed": true,
                                "errorCodes": ["errorCodes", "errorCodes"],
                                "name": "name"
                            }, {
                                "allowed": true,
                                "errorCodes": ["errorCodes", "errorCodes"],
                                "name": "name"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.LOANS_BASE_PATH = LOANS_BASE_PATH;
    exports.LoansApiModule = LoansApiModule;
    exports.LoansConfiguration = LoansConfiguration;
    exports.LoansHttpService = LoansHttpService;
    exports.LoansHttpServiceDownloadDocumentByLoanIdAndDocumentIdMocksProvider = LoansHttpServiceDownloadDocumentByLoanIdAndDocumentIdMocksProvider;
    exports.LoansHttpServiceGetAmortizationPaymentMocksProvider = LoansHttpServiceGetAmortizationPaymentMocksProvider;
    exports.LoansHttpServiceGetAmortizationScheduleMocksProvider = LoansHttpServiceGetAmortizationScheduleMocksProvider;
    exports.LoansHttpServiceGetLoanByIdMocksProvider = LoansHttpServiceGetLoanByIdMocksProvider;
    exports.LoansHttpServiceGetLoansMocksProvider = LoansHttpServiceGetLoansMocksProvider;
    exports.LoansHttpServiceHeadLoansMocksProvider = LoansHttpServiceHeadLoansMocksProvider;
    exports.LoansHttpServiceMocksProvider = LoansHttpServiceMocksProvider;
    exports.PaymentHttpService = PaymentHttpService;
    exports.PaymentHttpServiceCalculatePaymentAmountMocksProvider = PaymentHttpServiceCalculatePaymentAmountMocksProvider;
    exports.PaymentHttpServiceMocksProvider = PaymentHttpServiceMocksProvider;
    exports.PaymentOptionsHttpService = PaymentOptionsHttpService;
    exports.PaymentOptionsHttpServiceGetPaymentOptionsMocksProvider = PaymentOptionsHttpServiceGetPaymentOptionsMocksProvider;
    exports.PaymentOptionsHttpServiceMocksProvider = PaymentOptionsHttpServiceMocksProvider;
    exports.PresentationAmortizationPaymentStatus = PresentationAmortizationPaymentStatus;
    exports.PresentationFrequency = PresentationFrequency;
    exports.PresentationLoanStatus = PresentationLoanStatus;
    exports.PresentationOperationType = PresentationOperationType;
    exports.PresentationPaymentAmountCalculationType = PresentationPaymentAmountCalculationType;
    exports.PresentationTermUnit = PresentationTermUnit;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-loans-http-ang.umd.js.map
