import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { LOANS_BASE_PATH } from '../variables';
import { LoansConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class LoansHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new LoansConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    downloadDocumentByLoanIdAndDocumentId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
        }
        const _documentId = requestParameters["documentId"];
        if (_documentId === null || _documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
        }
        const _inline = requestParameters["inline"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_inline !== undefined && _inline !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _inline, 'inline');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'binary/octet-stream',
                'application/pdf',
                'text/plain',
                'text/csv',
                'application/rtf',
                'application/msword',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/vnd.ms-excel',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'application/xml',
                'image/png',
                'image/jpeg',
                'image/gif',
                'image/tiff',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/documents/${encodeURIComponent(String(_documentId))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    downloadDocumentByLoanIdAndDocumentIdUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
        }
        const _documentId = requestParameters["documentId"];
        if (_documentId === null || _documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
        }
        const _inline = requestParameters["inline"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_inline !== undefined && _inline !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _inline, 'inline');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/documents/${encodeURIComponent(String(_documentId))}${queryString ? `?${queryString}` : ''}`;
    }
    getAmortizationPayment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getAmortizationPayment.');
        }
        const _amortizationPaymentId = requestParameters["amortizationPaymentId"];
        if (_amortizationPaymentId === null || _amortizationPaymentId === undefined) {
            throw new Error('Required parameter amortizationPaymentId was null or undefined when calling getAmortizationPayment.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/amortization-schedule/${encodeURIComponent(String(_amortizationPaymentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAmortizationPaymentUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getAmortizationPayment.');
        }
        const _amortizationPaymentId = requestParameters["amortizationPaymentId"];
        if (_amortizationPaymentId === null || _amortizationPaymentId === undefined) {
            throw new Error('Required parameter amortizationPaymentId was null or undefined when calling getAmortizationPayment.');
        }
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/amortization-schedule/${encodeURIComponent(String(_amortizationPaymentId))}`;
    }
    getAmortizationSchedule(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getAmortizationSchedule.');
        }
        const _status = requestParameters["status"];
        const _fromAmount = requestParameters["fromAmount"];
        const _toAmount = requestParameters["toAmount"];
        const _fromDate = requestParameters["fromDate"];
        const _toDate = requestParameters["toDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _sort = requestParameters["sort"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_fromAmount !== undefined && _fromAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromAmount, 'fromAmount');
        }
        if (_toAmount !== undefined && _toAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toAmount, 'toAmount');
        }
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/amortization-schedule`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAmortizationScheduleUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getAmortizationSchedule.');
        }
        const _status = requestParameters["status"];
        const _fromAmount = requestParameters["fromAmount"];
        const _toAmount = requestParameters["toAmount"];
        const _fromDate = requestParameters["fromDate"];
        const _toDate = requestParameters["toDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _sort = requestParameters["sort"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_fromAmount !== undefined && _fromAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromAmount, 'fromAmount');
        }
        if (_toAmount !== undefined && _toAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toAmount, 'toAmount');
        }
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/amortization-schedule${queryString ? `?${queryString}` : ''}`;
    }
    getLoanById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getLoanById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLoanByIdUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getLoanById.');
        }
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}`;
    }
    getLoans(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLoansUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/loans${queryString ? `?${queryString}` : ''}`;
    }
    headLoans(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.head(`${this.configuration.basePath}/client-api/v1/loans`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    headLoansUrl() {
        return `${this.configuration.basePath}/client-api/v1/loans`;
    }
}
LoansHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansHttpService, deps: [{ token: i1.HttpClient }, { token: LOANS_BASE_PATH, optional: true }, { token: i2.LoansConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
LoansHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LOANS_BASE_PATH]
                }] }, { type: i2.LoansConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,