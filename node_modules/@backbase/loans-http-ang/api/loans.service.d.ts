import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PresentationAmortizationPayment } from '../model/models';
import { PresentationAmortizationSchedule } from '../model/models';
import { PresentationLoan } from '../model/models';
import { PresentationLoans } from '../model/models';
import { LoansConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DownloadDocumentByLoanIdAndDocumentIdRequestParams {
    ["loanId"]: string;
    ["documentId"]: string;
    ["inline"]?: boolean;
}
export interface GetAmortizationPaymentRequestParams {
    ["loanId"]: string;
    ["amortizationPaymentId"]: string;
}
export interface GetAmortizationScheduleRequestParams {
    ["loanId"]: string;
    ["status"]?: string;
    ["fromAmount"]?: string;
    ["toAmount"]?: string;
    ["fromDate"]?: string;
    ["toDate"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["sort"]?: string;
}
export interface GetLoanByIdRequestParams {
    ["loanId"]: string;
}
export interface GetLoansRequestParams {
    ["from"]?: number;
    ["size"]?: number;
}
export declare class LoansHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: LoansConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: LoansConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'binary/octet-stream';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'binary/octet-stream';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'binary/octet-stream';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/rtf';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/rtf';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/rtf';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/msword';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/msword';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/msword';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.ms-excel';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.ms-excel';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.ms-excel';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/gif';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/gif';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/gif';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/tiff';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/tiff';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/tiff';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<string>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<string>>;
    downloadDocumentByLoanIdAndDocumentId(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<string>>;
    downloadDocumentByLoanIdAndDocumentIdUrl(requestParameters: DownloadDocumentByLoanIdAndDocumentIdRequestParams): string;
    getAmortizationPayment(requestParameters: GetAmortizationPaymentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationAmortizationPayment>;
    getAmortizationPayment(requestParameters: GetAmortizationPaymentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationAmortizationPayment>>;
    getAmortizationPayment(requestParameters: GetAmortizationPaymentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationAmortizationPayment>>;
    getAmortizationPaymentUrl(requestParameters: GetAmortizationPaymentRequestParams): string;
    getAmortizationSchedule(requestParameters: GetAmortizationScheduleRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationAmortizationSchedule>;
    getAmortizationSchedule(requestParameters: GetAmortizationScheduleRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationAmortizationSchedule>>;
    getAmortizationSchedule(requestParameters: GetAmortizationScheduleRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationAmortizationSchedule>>;
    getAmortizationScheduleUrl(requestParameters: GetAmortizationScheduleRequestParams): string;
    getLoanById(requestParameters: GetLoanByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationLoan>;
    getLoanById(requestParameters: GetLoanByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationLoan>>;
    getLoanById(requestParameters: GetLoanByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationLoan>>;
    getLoanByIdUrl(requestParameters: GetLoanByIdRequestParams): string;
    getLoans(requestParameters: GetLoansRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationLoans>;
    getLoans(requestParameters: GetLoansRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationLoans>>;
    getLoans(requestParameters: GetLoansRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationLoans>>;
    getLoansUrl(requestParameters: GetLoansRequestParams): string;
    headLoans(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    headLoans(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    headLoans(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    headLoansUrl(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoansHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LoansHttpService>;
}
