import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PresentationCalculatePaymentAmountRequest } from '../model/models';
import { PresentationCalculatedPaymentAmount } from '../model/models';
import { LoansConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CalculatePaymentAmountRequestParams {
    ["loanId"]: string;
    ["presentationCalculatePaymentAmountRequest"]: PresentationCalculatePaymentAmountRequest;
}
export declare class PaymentHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: LoansConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: LoansConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    calculatePaymentAmount(requestParameters: CalculatePaymentAmountRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationCalculatedPaymentAmount>;
    calculatePaymentAmount(requestParameters: CalculatePaymentAmountRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationCalculatedPaymentAmount>>;
    calculatePaymentAmount(requestParameters: CalculatePaymentAmountRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationCalculatedPaymentAmount>>;
    calculatePaymentAmountUrl(requestParameters: CalculatePaymentAmountRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentHttpService>;
}
