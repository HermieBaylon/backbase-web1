import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const PresentationAmortizationPaymentStatus = {
    Scheduled: 'Scheduled',
    Overdue: 'Overdue'
};

const PresentationFrequency = {
    Weekly: 'Weekly',
    Biweekly: 'Biweekly',
    Twicemonthly: 'Twicemonthly',
    Monthly: 'Monthly',
    Fourweeks: 'Fourweeks',
    Bimonthly: 'Bimonthly',
    Quarterly: 'Quarterly',
    Semiannually: 'Semiannually',
    Annually: 'Annually',
    Maturity: 'Maturity'
};

const PresentationLoanStatus = {
    Active: 'Active',
    Inactive: 'Inactive',
    Pending: 'Pending'
};

const PresentationOperationType = {
    Credit: 'Credit',
    Debit: 'Debit'
};

const PresentationPaymentAmountCalculationType = {
    CustomAmount: 'CustomAmount',
    PayOffAmount: 'PayOffAmount'
};

const PresentationTermUnit = {
    Day: 'Day',
    Week: 'Week',
    Month: 'Month',
    Year: 'Year'
};

const LOANS_BASE_PATH = new InjectionToken('LOANS_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class LoansConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module LoansConfiguration');

class LoansApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('LoansApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: LoansApiModule,
            providers: [{ provide: LoansConfiguration, useFactory: configurationFactory }]
        };
    }
}
LoansApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansApiModule, deps: [{ token: LoansApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: LoansConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
LoansApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansApiModule });
LoansApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: LoansApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: LoansConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class LoansHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new LoansConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    downloadDocumentByLoanIdAndDocumentId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
        }
        const _documentId = requestParameters["documentId"];
        if (_documentId === null || _documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
        }
        const _inline = requestParameters["inline"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_inline !== undefined && _inline !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _inline, 'inline');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'binary/octet-stream',
                'application/pdf',
                'text/plain',
                'text/csv',
                'application/rtf',
                'application/msword',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/vnd.ms-excel',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'application/xml',
                'image/png',
                'image/jpeg',
                'image/gif',
                'image/tiff',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/documents/${encodeURIComponent(String(_documentId))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    downloadDocumentByLoanIdAndDocumentIdUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
        }
        const _documentId = requestParameters["documentId"];
        if (_documentId === null || _documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling downloadDocumentByLoanIdAndDocumentId.');
        }
        const _inline = requestParameters["inline"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_inline !== undefined && _inline !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _inline, 'inline');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/documents/${encodeURIComponent(String(_documentId))}${queryString ? `?${queryString}` : ''}`;
    }
    getAmortizationPayment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getAmortizationPayment.');
        }
        const _amortizationPaymentId = requestParameters["amortizationPaymentId"];
        if (_amortizationPaymentId === null || _amortizationPaymentId === undefined) {
            throw new Error('Required parameter amortizationPaymentId was null or undefined when calling getAmortizationPayment.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/amortization-schedule/${encodeURIComponent(String(_amortizationPaymentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAmortizationPaymentUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getAmortizationPayment.');
        }
        const _amortizationPaymentId = requestParameters["amortizationPaymentId"];
        if (_amortizationPaymentId === null || _amortizationPaymentId === undefined) {
            throw new Error('Required parameter amortizationPaymentId was null or undefined when calling getAmortizationPayment.');
        }
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/amortization-schedule/${encodeURIComponent(String(_amortizationPaymentId))}`;
    }
    getAmortizationSchedule(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getAmortizationSchedule.');
        }
        const _status = requestParameters["status"];
        const _fromAmount = requestParameters["fromAmount"];
        const _toAmount = requestParameters["toAmount"];
        const _fromDate = requestParameters["fromDate"];
        const _toDate = requestParameters["toDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _sort = requestParameters["sort"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_fromAmount !== undefined && _fromAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromAmount, 'fromAmount');
        }
        if (_toAmount !== undefined && _toAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toAmount, 'toAmount');
        }
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/amortization-schedule`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAmortizationScheduleUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getAmortizationSchedule.');
        }
        const _status = requestParameters["status"];
        const _fromAmount = requestParameters["fromAmount"];
        const _toAmount = requestParameters["toAmount"];
        const _fromDate = requestParameters["fromDate"];
        const _toDate = requestParameters["toDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _sort = requestParameters["sort"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_fromAmount !== undefined && _fromAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromAmount, 'fromAmount');
        }
        if (_toAmount !== undefined && _toAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toAmount, 'toAmount');
        }
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_sort !== undefined && _sort !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/amortization-schedule${queryString ? `?${queryString}` : ''}`;
    }
    getLoanById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getLoanById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLoanByIdUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getLoanById.');
        }
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}`;
    }
    getLoans(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLoansUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/loans${queryString ? `?${queryString}` : ''}`;
    }
    headLoans(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.head(`${this.configuration.basePath}/client-api/v1/loans`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    headLoansUrl() {
        return `${this.configuration.basePath}/client-api/v1/loans`;
    }
}
LoansHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansHttpService, deps: [{ token: i1.HttpClient }, { token: LOANS_BASE_PATH, optional: true }, { token: LoansConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
LoansHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LoansHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LOANS_BASE_PATH]
                }] }, { type: LoansConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const LoansHttpServiceDownloadDocumentByLoanIdAndDocumentIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/loans/{loanId}/documents/{documentId}",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LoansHttpServiceGetAmortizationPaymentMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/loans/{loanId}/amortization-schedule/{amortizationPaymentId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/amortization-payment.yaml",
                    "id": "829d1713-8c65-4366-98c2-65a518255365",
                    "paymentDate": "2020-07-24T00:00:00Z",
                    "currencyCode": "USD",
                    "paymentAmount": "40000.00000",
                    "interest": "0.00000",
                    "principal": "4000.00000",
                    "endingPrincipalBalance": "40000.00000",
                    "status": "Overdue",
                    "paymentType": "principal-only"
                }
            },
            {
                status: 200,
                body: {
                    "principal": "principal",
                    "interest": "interest",
                    "endingPrincipalBalance": "endingPrincipalBalance",
                    "id": "id",
                    "paymentDate": "2000-01-23T04:56:07.000+00:00",
                    "paymentAmount": "paymentAmount",
                    "currencyCode": "currencyCode",
                    "paymentType": "paymentType"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LoansHttpServiceGetAmortizationScheduleMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/loans/{loanId}/amortization-schedule",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/amortization-schedule.yaml",
                    "payments": [{
                            "id": "829d1713-8c65-4366-98c2-65a518255365",
                            "paymentDate": "2020-07-24T00:00:00Z",
                            "currencyCode": "USD",
                            "paymentAmount": "40000.00000",
                            "interest": "0.00000",
                            "principal": "4000.00000",
                            "endingPrincipalBalance": "40000.00000",
                            "status": "Overdue",
                            "paymentType": "principal-only"
                        }, {
                            "id": "522c5077-8fdc-43c0-bc71-d59bb66ea8ce",
                            "paymentDate": "2020-08-24T00:00:00Z",
                            "currencyCode": "USD",
                            "paymentAmount": "8000.00000",
                            "endingPrincipalBalance": "32000.00000",
                            "status": "Scheduled",
                            "paymentType": "interest-only"
                        }, {
                            "id": "9f4c565d-ffab-4ca1-9094-ee0d53a08782",
                            "paymentDate": "2020-09-24T00:00:00Z",
                            "currencyCode": "USD",
                            "paymentAmount": "32001.00000",
                            "interest": "1",
                            "principal": "32000.00000",
                            "endingPrincipalBalance": "0.00000",
                            "status": "Scheduled",
                            "paymentType": "principal-and-interest"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LoansHttpServiceGetLoanByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/loans/{loanId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/loan.yaml",
                    "id": "9ed25bae-11eb-4840-b4fc-37bbe2e5f9c9",
                    "loanType": "LineOfCredit",
                    "name": "AnyBank Credit Line 1",
                    "accountNumber": "096010415 000789 CL01",
                    "contractNumber": "ATV-676097",
                    "loanStatus": "Active",
                    "currencyCode": "USD",
                    "nextRepaymentDate": "2021-09-13T17:00:00.000Z",
                    "nextRepaymentAmount": "200.00000",
                    "availableBalance": "690.37000",
                    "outstandingAmount": "1954.94000",
                    "creditLimit": "2456.98000",
                    "drawnAmount": "1766.61000",
                    "feesDue": "100.00000",
                    "interestDue": "88.33000",
                    "interestRate": "5.00000",
                    "isOverdue": false,
                    "overduePaymentsCount": 0,
                    "branchCode": "001",
                    "startDate": "1996-10-23T17:00:00.000Z",
                    "endDate": "2022-04-16T17:00:00.000Z",
                    "borrower": ["John a. Doen", "M. Joaveni", "Robert Kan", "Kamal Terrell"],
                    "defaultSettlementAccountId": "801b785e-c063-457c-bc12-82386f3ebc2d",
                    "defaultSettlementAccountNumber": "•••• •••• ••• 4568",
                    "defaultSettlementAccountName": "Prestige Operating Account",
                    "documents": [{
                            "documentId": "uid_00001",
                            "name": "Loan Contract",
                            "contentType": "application/pdf"
                        }],
                    "isFullyRepaid": false,
                    "termUnit": "Year",
                    "termCount": 26,
                    "paymentFrequency": "Bimonthly",
                    "interestPaymentFrequency": "Biweekly",
                    "collateral": [{
                            "type": "Real estate",
                            "currentValue": "100",
                            "currencyCode": "EUR",
                            "specification": "300 Park Avenue 15th Floor, New York, NY 10022",
                            "nextRevaluationDate": "2021-02-28"
                        }],
                    "escrow": {
                        "totalAmount": "100",
                        "insurance": "50",
                        "fees": "30",
                        "tax": "20",
                        "pmi": "10",
                        "other": "5"
                    },
                    "paymentOptions": {
                        "paymentOptions": [{
                                "name": "LoanPayment",
                                "operationType": "Credit",
                                "allowed": true,
                                "errorCodes": []
                            }, {
                                "name": "LoanAdvance",
                                "operationType": "Debit",
                                "allowed": true,
                                "errorCodes": []
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "nextRepaymentAmount": "nextRepaymentAmount",
                    "defaultSettlementAccountId": "defaultSettlementAccountId",
                    "loanType": "loanType",
                    "outstandingAmount": "outstandingAmount",
                    "inArrearsDate": "2000-01-23T04:56:07.000+00:00",
                    "endDate": "2000-01-23T04:56:07.000+00:00",
                    "documents": [{
                            "name": "name",
                            "documentId": "documentId",
                            "contentType": "contentType"
                        }, {
                            "name": "name",
                            "documentId": "documentId",
                            "contentType": "contentType"
                        }],
                    "termCount": 6,
                    "availableBalance": "availableBalance",
                    "drawnAmount": "drawnAmount",
                    "paymentOptions": {
                        "paymentOptions": [{
                                "allowed": true,
                                "errorCodes": ["errorCodes", "errorCodes"],
                                "name": "name"
                            }, {
                                "allowed": true,
                                "errorCodes": ["errorCodes", "errorCodes"],
                                "name": "name"
                            }]
                    },
                    "defaultSettlementAccountName": "defaultSettlementAccountName",
                    "nextRepaymentDate": "2000-01-23T04:56:07.000+00:00",
                    "alias": "alias",
                    "creditLimit": "creditLimit",
                    "escrow": {
                        "insurance": "insurance",
                        "totalAmount": "totalAmount",
                        "fees": "fees",
                        "other": "other",
                        "tax": "tax",
                        "pmi": "pmi"
                    },
                    "isFullyRepaid": true,
                    "id": "id",
                    "overduePaymentsCount": 0,
                    "feesDue": "feesDue",
                    "defaultSettlementAccountNumber": "defaultSettlementAccountNumber",
                    "interestRate": "interestRate",
                    "borrower": ["borrower", "borrower"],
                    "contractNumber": "contractNumber",
                    "accountNumber": "accountNumber",
                    "inArrearsAmount": "inArrearsAmount",
                    "branchCode": "branchCode",
                    "isOverdue": true,
                    "interestDue": "interestDue",
                    "name": "name",
                    "collateral": [{
                            "specification": "specification",
                            "nextRevaluationDate": "2000-01-23",
                            "type": "type",
                            "currencyCode": "currencyCode",
                            "currentValue": "currentValue"
                        }, {
                            "specification": "specification",
                            "nextRevaluationDate": "2000-01-23",
                            "type": "type",
                            "currencyCode": "currencyCode",
                            "currentValue": "currentValue"
                        }],
                    "currencyCode": "currencyCode",
                    "paidAmount": "paidAmount",
                    "startDate": "2000-01-23T04:56:07.000+00:00"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LoansHttpServiceGetLoansMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/loans",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/loans.yaml",
                    "loans": [{
                            "id": "9ed25bae-11eb-4840-b4fc-37bbe2e5f9c9",
                            "loanType": "LineOfCredit",
                            "name": "Line of credit 1",
                            "accountNumber": "NL98RABO5242052503",
                            "loanStatus": "Pending",
                            "currencyCode": "EUR",
                            "paymentOptions": {
                                "paymentOptions": [{
                                        "name": "LoanPayment",
                                        "operationType": "Credit",
                                        "allowed": true,
                                        "errorCodes": []
                                    }, {
                                        "name": "LoanAdvance",
                                        "operationType": "Debit",
                                        "allowed": true,
                                        "errorCodes": []
                                    }]
                            }
                        }, {
                            "id": "764ac5bb-f462-412f-8aee-a218737e1d2a",
                            "name": "Term loan 1",
                            "loanType": "TermLoan",
                            "accountNumber": "NL88ABNA4242739303",
                            "loanStatus": "Active",
                            "currencyCode": "EUR",
                            "paidAmount": "55567.23",
                            "outstandingAmount": "54432.77",
                            "paymentOptions": {
                                "paymentOptions": [{
                                        "name": "LoanPayment",
                                        "operationType": "Credit",
                                        "allowed": true,
                                        "errorCodes": []
                                    }]
                            }
                        }, {
                            "id": "7688bd60-dfad-45ba-b1ce-abc6e9ea5208",
                            "loanType": "Mortgage",
                            "name": "Mortgage 1",
                            "accountNumber": "MR3731835513862558214883344",
                            "loanStatus": "Inactive",
                            "currencyCode": "MRU",
                            "paymentOptions": {
                                "paymentOptions": [{
                                        "name": "LoanPayment",
                                        "operationType": "Credit",
                                        "allowed": false,
                                        "errorCodes": ["not.allowed.for.inactive.loan"]
                                    }, {
                                        "name": "LoanAdvance",
                                        "operationType": "Debit",
                                        "allowed": false,
                                        "errorCodes": ["not.allowed.for.inactive.loan"]
                                    }]
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LoansHttpServiceHeadLoansMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/loans",
        method: "HEAD",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LoansHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/loans/{loanId}/documents/{documentId}",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/loans/{loanId}/amortization-schedule/{amortizationPaymentId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/amortization-payment.yaml",
                    "id": "829d1713-8c65-4366-98c2-65a518255365",
                    "paymentDate": "2020-07-24T00:00:00Z",
                    "currencyCode": "USD",
                    "paymentAmount": "40000.00000",
                    "interest": "0.00000",
                    "principal": "4000.00000",
                    "endingPrincipalBalance": "40000.00000",
                    "status": "Overdue",
                    "paymentType": "principal-only"
                }
            },
            {
                status: 200,
                body: {
                    "principal": "principal",
                    "interest": "interest",
                    "endingPrincipalBalance": "endingPrincipalBalance",
                    "id": "id",
                    "paymentDate": "2000-01-23T04:56:07.000+00:00",
                    "paymentAmount": "paymentAmount",
                    "currencyCode": "currencyCode",
                    "paymentType": "paymentType"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/loans/{loanId}/amortization-schedule",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/amortization-schedule.yaml",
                    "payments": [{
                            "id": "829d1713-8c65-4366-98c2-65a518255365",
                            "paymentDate": "2020-07-24T00:00:00Z",
                            "currencyCode": "USD",
                            "paymentAmount": "40000.00000",
                            "interest": "0.00000",
                            "principal": "4000.00000",
                            "endingPrincipalBalance": "40000.00000",
                            "status": "Overdue",
                            "paymentType": "principal-only"
                        }, {
                            "id": "522c5077-8fdc-43c0-bc71-d59bb66ea8ce",
                            "paymentDate": "2020-08-24T00:00:00Z",
                            "currencyCode": "USD",
                            "paymentAmount": "8000.00000",
                            "endingPrincipalBalance": "32000.00000",
                            "status": "Scheduled",
                            "paymentType": "interest-only"
                        }, {
                            "id": "9f4c565d-ffab-4ca1-9094-ee0d53a08782",
                            "paymentDate": "2020-09-24T00:00:00Z",
                            "currencyCode": "USD",
                            "paymentAmount": "32001.00000",
                            "interest": "1",
                            "principal": "32000.00000",
                            "endingPrincipalBalance": "0.00000",
                            "status": "Scheduled",
                            "paymentType": "principal-and-interest"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/loans/{loanId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/loan.yaml",
                    "id": "9ed25bae-11eb-4840-b4fc-37bbe2e5f9c9",
                    "loanType": "LineOfCredit",
                    "name": "AnyBank Credit Line 1",
                    "accountNumber": "096010415 000789 CL01",
                    "contractNumber": "ATV-676097",
                    "loanStatus": "Active",
                    "currencyCode": "USD",
                    "nextRepaymentDate": "2021-09-13T17:00:00.000Z",
                    "nextRepaymentAmount": "200.00000",
                    "availableBalance": "690.37000",
                    "outstandingAmount": "1954.94000",
                    "creditLimit": "2456.98000",
                    "drawnAmount": "1766.61000",
                    "feesDue": "100.00000",
                    "interestDue": "88.33000",
                    "interestRate": "5.00000",
                    "isOverdue": false,
                    "overduePaymentsCount": 0,
                    "branchCode": "001",
                    "startDate": "1996-10-23T17:00:00.000Z",
                    "endDate": "2022-04-16T17:00:00.000Z",
                    "borrower": ["John a. Doen", "M. Joaveni", "Robert Kan", "Kamal Terrell"],
                    "defaultSettlementAccountId": "801b785e-c063-457c-bc12-82386f3ebc2d",
                    "defaultSettlementAccountNumber": "•••• •••• ••• 4568",
                    "defaultSettlementAccountName": "Prestige Operating Account",
                    "documents": [{
                            "documentId": "uid_00001",
                            "name": "Loan Contract",
                            "contentType": "application/pdf"
                        }],
                    "isFullyRepaid": false,
                    "termUnit": "Year",
                    "termCount": 26,
                    "paymentFrequency": "Bimonthly",
                    "interestPaymentFrequency": "Biweekly",
                    "collateral": [{
                            "type": "Real estate",
                            "currentValue": "100",
                            "currencyCode": "EUR",
                            "specification": "300 Park Avenue 15th Floor, New York, NY 10022",
                            "nextRevaluationDate": "2021-02-28"
                        }],
                    "escrow": {
                        "totalAmount": "100",
                        "insurance": "50",
                        "fees": "30",
                        "tax": "20",
                        "pmi": "10",
                        "other": "5"
                    },
                    "paymentOptions": {
                        "paymentOptions": [{
                                "name": "LoanPayment",
                                "operationType": "Credit",
                                "allowed": true,
                                "errorCodes": []
                            }, {
                                "name": "LoanAdvance",
                                "operationType": "Debit",
                                "allowed": true,
                                "errorCodes": []
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "nextRepaymentAmount": "nextRepaymentAmount",
                    "defaultSettlementAccountId": "defaultSettlementAccountId",
                    "loanType": "loanType",
                    "outstandingAmount": "outstandingAmount",
                    "inArrearsDate": "2000-01-23T04:56:07.000+00:00",
                    "endDate": "2000-01-23T04:56:07.000+00:00",
                    "documents": [{
                            "name": "name",
                            "documentId": "documentId",
                            "contentType": "contentType"
                        }, {
                            "name": "name",
                            "documentId": "documentId",
                            "contentType": "contentType"
                        }],
                    "termCount": 6,
                    "availableBalance": "availableBalance",
                    "drawnAmount": "drawnAmount",
                    "paymentOptions": {
                        "paymentOptions": [{
                                "allowed": true,
                                "errorCodes": ["errorCodes", "errorCodes"],
                                "name": "name"
                            }, {
                                "allowed": true,
                                "errorCodes": ["errorCodes", "errorCodes"],
                                "name": "name"
                            }]
                    },
                    "defaultSettlementAccountName": "defaultSettlementAccountName",
                    "nextRepaymentDate": "2000-01-23T04:56:07.000+00:00",
                    "alias": "alias",
                    "creditLimit": "creditLimit",
                    "escrow": {
                        "insurance": "insurance",
                        "totalAmount": "totalAmount",
                        "fees": "fees",
                        "other": "other",
                        "tax": "tax",
                        "pmi": "pmi"
                    },
                    "isFullyRepaid": true,
                    "id": "id",
                    "overduePaymentsCount": 0,
                    "feesDue": "feesDue",
                    "defaultSettlementAccountNumber": "defaultSettlementAccountNumber",
                    "interestRate": "interestRate",
                    "borrower": ["borrower", "borrower"],
                    "contractNumber": "contractNumber",
                    "accountNumber": "accountNumber",
                    "inArrearsAmount": "inArrearsAmount",
                    "branchCode": "branchCode",
                    "isOverdue": true,
                    "interestDue": "interestDue",
                    "name": "name",
                    "collateral": [{
                            "specification": "specification",
                            "nextRevaluationDate": "2000-01-23",
                            "type": "type",
                            "currencyCode": "currencyCode",
                            "currentValue": "currentValue"
                        }, {
                            "specification": "specification",
                            "nextRevaluationDate": "2000-01-23",
                            "type": "type",
                            "currencyCode": "currencyCode",
                            "currentValue": "currentValue"
                        }],
                    "currencyCode": "currencyCode",
                    "paidAmount": "paidAmount",
                    "startDate": "2000-01-23T04:56:07.000+00:00"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/loans",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/loans.yaml",
                    "loans": [{
                            "id": "9ed25bae-11eb-4840-b4fc-37bbe2e5f9c9",
                            "loanType": "LineOfCredit",
                            "name": "Line of credit 1",
                            "accountNumber": "NL98RABO5242052503",
                            "loanStatus": "Pending",
                            "currencyCode": "EUR",
                            "paymentOptions": {
                                "paymentOptions": [{
                                        "name": "LoanPayment",
                                        "operationType": "Credit",
                                        "allowed": true,
                                        "errorCodes": []
                                    }, {
                                        "name": "LoanAdvance",
                                        "operationType": "Debit",
                                        "allowed": true,
                                        "errorCodes": []
                                    }]
                            }
                        }, {
                            "id": "764ac5bb-f462-412f-8aee-a218737e1d2a",
                            "name": "Term loan 1",
                            "loanType": "TermLoan",
                            "accountNumber": "NL88ABNA4242739303",
                            "loanStatus": "Active",
                            "currencyCode": "EUR",
                            "paidAmount": "55567.23",
                            "outstandingAmount": "54432.77",
                            "paymentOptions": {
                                "paymentOptions": [{
                                        "name": "LoanPayment",
                                        "operationType": "Credit",
                                        "allowed": true,
                                        "errorCodes": []
                                    }]
                            }
                        }, {
                            "id": "7688bd60-dfad-45ba-b1ce-abc6e9ea5208",
                            "loanType": "Mortgage",
                            "name": "Mortgage 1",
                            "accountNumber": "MR3731835513862558214883344",
                            "loanStatus": "Inactive",
                            "currencyCode": "MRU",
                            "paymentOptions": {
                                "paymentOptions": [{
                                        "name": "LoanPayment",
                                        "operationType": "Credit",
                                        "allowed": false,
                                        "errorCodes": ["not.allowed.for.inactive.loan"]
                                    }, {
                                        "name": "LoanAdvance",
                                        "operationType": "Debit",
                                        "allowed": false,
                                        "errorCodes": ["not.allowed.for.inactive.loan"]
                                    }]
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/loans",
        method: "HEAD",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class PaymentHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new LoansConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    calculatePaymentAmount(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling calculatePaymentAmount.');
        }
        const _presentationCalculatePaymentAmountRequest = requestParameters["presentationCalculatePaymentAmountRequest"];
        if (_presentationCalculatePaymentAmountRequest === null || _presentationCalculatePaymentAmountRequest === undefined) {
            throw new Error('Required parameter presentationCalculatePaymentAmountRequest was null or undefined when calling calculatePaymentAmount.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/calculate-payment-amount`, _presentationCalculatePaymentAmountRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    calculatePaymentAmountUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling calculatePaymentAmount.');
        }
        const _presentationCalculatePaymentAmountRequest = requestParameters["presentationCalculatePaymentAmountRequest"];
        if (_presentationCalculatePaymentAmountRequest === null || _presentationCalculatePaymentAmountRequest === undefined) {
            throw new Error('Required parameter presentationCalculatePaymentAmountRequest was null or undefined when calling calculatePaymentAmount.');
        }
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/calculate-payment-amount`;
    }
}
PaymentHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentHttpService, deps: [{ token: i1.HttpClient }, { token: LOANS_BASE_PATH, optional: true }, { token: LoansConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LOANS_BASE_PATH]
                }] }, { type: LoansConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PaymentHttpServiceCalculatePaymentAmountMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/loans/{loanId}/calculate-payment-amount",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/calculated-payment-amount.yaml",
                    "paymentOption": "LOAN_PAYMENT",
                    "paymentDate": "2021-12-22",
                    "currentPaymentAmount": "100.00000",
                    "fees": [{
                            "feeType": "Transaction fee",
                            "amount": "11.00000",
                            "sameTransaction": false
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PaymentHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/loans/{loanId}/calculate-payment-amount",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/calculated-payment-amount.yaml",
                    "paymentOption": "LOAN_PAYMENT",
                    "paymentDate": "2021-12-22",
                    "currentPaymentAmount": "100.00000",
                    "fees": [{
                            "feeType": "Transaction fee",
                            "amount": "11.00000",
                            "sameTransaction": false
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class PaymentOptionsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new LoansConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getPaymentOptions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getPaymentOptions.');
        }
        const _operationType = requestParameters["operationType"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_operationType) {
            _operationType.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'operationType');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/payment-options`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentOptionsUrl(requestParameters) {
        const _loanId = requestParameters["loanId"];
        if (_loanId === null || _loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getPaymentOptions.');
        }
        const _operationType = requestParameters["operationType"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_operationType) {
            _operationType.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'operationType');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/loans/${encodeURIComponent(String(_loanId))}/payment-options${queryString ? `?${queryString}` : ''}`;
    }
}
PaymentOptionsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOptionsHttpService, deps: [{ token: i1.HttpClient }, { token: LOANS_BASE_PATH, optional: true }, { token: LoansConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentOptionsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOptionsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOptionsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LOANS_BASE_PATH]
                }] }, { type: LoansConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PaymentOptionsHttpServiceGetPaymentOptionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/loans/{loanId}/payment-options",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/payment-options.yaml",
                    "paymentOptions": [{
                            "name": "LoanPayment",
                            "operationType": "Credit",
                            "allowed": true
                        }, {
                            "name": "LoanAdvance",
                            "operationType": "Debit",
                            "allowed": false,
                            "errorCodes": ["draw.amount.is.not.allowed"]
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "paymentOptions": [{
                            "allowed": true,
                            "errorCodes": ["errorCodes", "errorCodes"],
                            "name": "name"
                        }, {
                            "allowed": true,
                            "errorCodes": ["errorCodes", "errorCodes"],
                            "name": "name"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PaymentOptionsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/loans/{loanId}/payment-options",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$schema": "../schemas/payment-options.yaml",
                    "paymentOptions": [{
                            "name": "LoanPayment",
                            "operationType": "Credit",
                            "allowed": true
                        }, {
                            "name": "LoanAdvance",
                            "operationType": "Debit",
                            "allowed": false,
                            "errorCodes": ["draw.amount.is.not.allowed"]
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "paymentOptions": [{
                            "allowed": true,
                            "errorCodes": ["errorCodes", "errorCodes"],
                            "name": "name"
                        }, {
                            "allowed": true,
                            "errorCodes": ["errorCodes", "errorCodes"],
                            "name": "name"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, LOANS_BASE_PATH, LoansApiModule, LoansConfiguration, LoansHttpService, LoansHttpServiceDownloadDocumentByLoanIdAndDocumentIdMocksProvider, LoansHttpServiceGetAmortizationPaymentMocksProvider, LoansHttpServiceGetAmortizationScheduleMocksProvider, LoansHttpServiceGetLoanByIdMocksProvider, LoansHttpServiceGetLoansMocksProvider, LoansHttpServiceHeadLoansMocksProvider, LoansHttpServiceMocksProvider, PaymentHttpService, PaymentHttpServiceCalculatePaymentAmountMocksProvider, PaymentHttpServiceMocksProvider, PaymentOptionsHttpService, PaymentOptionsHttpServiceGetPaymentOptionsMocksProvider, PaymentOptionsHttpServiceMocksProvider, PresentationAmortizationPaymentStatus, PresentationFrequency, PresentationLoanStatus, PresentationOperationType, PresentationPaymentAmountCalculationType, PresentationTermUnit };
//# sourceMappingURL=backbase-loans-http-ang.js.map
