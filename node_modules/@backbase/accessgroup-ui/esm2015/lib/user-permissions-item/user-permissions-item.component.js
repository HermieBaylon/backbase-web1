import { Component, ContentChild, Directive, EventEmitter, Input, Output, TemplateRef } from '@angular/core';
import { ApprovalLevelStatus } from '@backbase/accessgroup-common-ang';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/badge";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "../function-group-time-bounds/function-group-time-bounds.component";
import * as i5 from "../business-function-privileges-name/business-function-privileges-name.component";
import * as i6 from "../privilege-indicator-list/privilege-indicator-list.component";
import * as i7 from "@backbase/ui-ang/amount";
import * as i8 from "../self-approval-modal/self-approve-modal.component";
import * as i9 from "../payee-group-detail-modal/payee-group-detail-modal.component";
import * as i10 from "../account-group-detail-modal/account-group-detail-modal.component";
import * as i11 from "../unassign-data-group/unassign-data-group-modal.component";
import * as i12 from "../select-items-modal/select-items-modal.component";
import * as i13 from "@backbase/ui-ang/switch";
import * as i14 from "@backbase/ui-ang/empty-state";
import * as i15 from "@angular/common";
import * as i16 from "@backbase/ui-ang/button";
import * as i17 from "@backbase/ui-ang/tooltip-directive";
import * as i18 from "@backbase/ui-ang/table";
import * as i19 from "@backbase/ui-ang/keyboard-click-directive";
export class UserPermissionsItemBusinessFunctionDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ UserPermissionsItemBusinessFunctionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemBusinessFunctionDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UserPermissionsItemBusinessFunctionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemBusinessFunctionDirective, selector: "ng-template[bbUserPermissionsItemBusinessFunction]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemBusinessFunctionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[bbUserPermissionsItemBusinessFunction]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class UserPermissionsItemBusinessFunctionGroupNameDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ UserPermissionsItemBusinessFunctionGroupNameDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemBusinessFunctionGroupNameDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UserPermissionsItemBusinessFunctionGroupNameDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemBusinessFunctionGroupNameDirective, selector: "ng-template[bbUserPermissionsItemBusinessFunctionGroupName]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemBusinessFunctionGroupNameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[bbUserPermissionsItemBusinessFunctionGroupName]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class UserPermissionsItemComponent {
    constructor() {
        this.dataGroups = [];
        this.selectedDataGroups$ = new BehaviorSubject([]);
        this.selectedDataGroupsForPayee$ = new BehaviorSubject([]);
        this.selectedPayeeGroups$ = new BehaviorSubject([]);
        this.dataGroups$ = new BehaviorSubject([]);
        this.payeeGroups$ = new BehaviorSubject([]);
        this.payeeDetailModal = false;
        this.accountDetailModal = false;
        this.selfApproveItemData = undefined;
        this.typeOfSelfApproveAction = '';
        this.selectedBFForSelfApprove = undefined;
        this.approvalLevelStatus = ApprovalLevelStatus;
        /**
         * selfApproveDefaultBehavior
         */
        this.selfApproveDefaultBehavior = 'disable';
        /**
         * Whether to show approval level
         */
        this.showApprovalLevel = false;
        /**
         * Business Function to check privileges against
         */
        this.emitLimitData = new EventEmitter();
        /**
         * Whether to show unassign buttons
         */
        this.showActions = false;
        /**
         * Whether to show self approval section
         */
        this.enableSelfApproval = false;
        /**
         * Whether to show payee table row
         */
        this.showPayee = true;
        /**
         * Whether to show unassign buttons
         */
        this.showFunctionGroupType = false;
        /**
         * Whether to disable save button
         */
        this.disableSaveButton = true;
        /**
         * Flag to indicate edit view
         */
        this.editView = false;
        /**
         * Legal Entity Id
         */
        this.legalEntityId = '';
        this.editedFunctionId = '';
        /**
         * Event emitter emiting on unassigning function group
         */
        this.removeFunctionGroup = new EventEmitter();
        /**
         * Event emitter emiting on unassigning data group
         */
        this.removeDataGroup = new EventEmitter();
        this.requestObjectEmit = new EventEmitter();
        this.editedFunctionIdEmit = new EventEmitter();
        this.changesMadedEmit = new EventEmitter();
        this.availableDataGroupsSearchTerm$ = new BehaviorSubject('');
        this.availableDataGroupsForPayeesSearchTerm$ = new BehaviorSubject('');
        this.availablePayeeGroupsSearchTerm$ = new BehaviorSubject('');
        /**
         * Switcher state data
         * @private
         */
        this.defaultSwitcherData = false;
        /**
         * Switcher value for account
         */
        this.switchAccountType$ = new BehaviorSubject(false);
        this.splittedAccountsByType$ = combineLatest([this.selectedDataGroups$, this.dataGroups$]).pipe(map(([selectedDataGroups, dataGroups]) => {
            const wizardAccounts = [];
            const customAccounts = [];
            if (dataGroups) {
                const allDataGroups = dataGroups.filter((item) => !selectedDataGroups.find(o => o.id === item.id));
                allDataGroups.forEach((item) => {
                    var _a;
                    if ((_a = item.metadata) === null || _a === void 0 ? void 0 : _a.generated) {
                        wizardAccounts.push(Object.assign(Object.assign({}, item)));
                    }
                    else {
                        customAccounts.push(Object.assign(Object.assign({}, item)));
                    }
                });
            }
            return { allAccounts: [...customAccounts, ...wizardAccounts], wizardAccounts, customAccounts };
        }));
        this.availableDataGroups = combineLatest([
            this.splittedAccountsByType$,
            this.switchAccountType$,
            this.availableDataGroupsSearchTerm$,
        ]).pipe(map(([splittedAccounts, switcherType, query]) => {
            let accounts = [];
            if (!switcherType && splittedAccounts.customAccounts.length) {
                accounts = splittedAccounts.customAccounts;
            }
            else {
                accounts = splittedAccounts.allAccounts;
            }
            accounts = accounts.filter(f => f.name.toLowerCase().includes(query.toLowerCase()));
            return accounts;
        }));
        this.availableDataGroupsForPayee = combineLatest([
            this.selectedDataGroupsForPayee$,
            this.selectedDataGroups$,
            this.availableDataGroupsForPayeesSearchTerm$,
        ]).pipe(map(([selectedDataGroups, dataGroups, query]) => {
            if (dataGroups) {
                return dataGroups
                    .filter((item) => !selectedDataGroups.find(o => o.id === item.id))
                    .filter(f => f.name.toLowerCase().includes(query.toLowerCase()));
            }
            return [];
        }));
        this.availablePayeeGroups = combineLatest([
            this.selectedPayeeGroups$,
            this.payeeGroups$,
            this.availablePayeeGroupsSearchTerm$,
        ]).pipe(map(([selectedDataGroups, dataGroups, query]) => {
            if (dataGroups) {
                return dataGroups
                    .filter((item) => !selectedDataGroups.find(o => o.id === item.id))
                    .filter(f => f.name.toLowerCase().includes(query.toLowerCase()));
            }
            return [];
        }));
        this.payeeIds = undefined;
        this.accountIds = undefined;
        this.payeeGroupName = '';
        this.accountGroupName = '';
        this.selectAccountGroupsModalOpened = false;
        this.selectAccountGroupsForPayeesModalOpened = false;
        this.selectPayeeGroupsModalOpened = false;
        this.activeView = 'table';
        this.activeDataGroup = 'account';
    }
    emitLimit(emitData, bfName, jrName) {
        this.emitLimitData.emit(Object.assign(Object.assign({}, emitData), { bfName,
            jrName }));
    }
    /**
     * User Permissions Object consisting of a
     * Function Group, Grouped Business Function, Data Groups
     */
    set userPermissions(val) {
        if (val) {
            this._userPermissions = val;
            if (val.dataGroups) {
                this.dataGroups = JSON.parse(JSON.stringify(val.dataGroups));
                this.selfApprovalPolicies = val.selfApprovalPolicies;
                if (!this.selfApprovalPoliciesHistory) {
                    this.selfApprovalPoliciesHistory = val.selfApprovalPolicies;
                }
                this.selectedDataGroups$.next(val.dataGroups);
                this.getAllLinkedPayees(val.dataGroups);
                this.emitRequestObject();
                this.preEditDataGroupState = JSON.parse(JSON.stringify(this.dataGroups));
            }
        }
    }
    /**
     * Account Group setter
     */
    set dataGroup(val) {
        if (val) {
            this.dataGroups$.next(val);
        }
    }
    /**
     * Payee Group setter
     */
    set payeeGroups(val) {
        if (val) {
            this.payeeGroups$.next(val);
        }
    }
    switchAccounts() {
        this.defaultSwitcherData = !this.defaultSwitcherData;
        this.switchAccountType$.next(this.defaultSwitcherData);
    }
    onRemoveFunctionGroup() {
        this.removeFunctionGroup.emit();
    }
    onRemoveDataGroup(dg) {
        this.removeDataGroup.emit(dg);
    }
    showLinkedPayee(dg) {
        this.selectedPg = undefined;
        if (this.selectedDg === dg) {
            this.selectedDg = undefined;
        }
        else {
            this.selectedDg = dg;
        }
    }
    selectedPG(pg) {
        if (this.selectedPg === pg) {
            this.selectedPg = undefined;
        }
        else {
            this.selectedPg = pg;
        }
    }
    checkInclude(payees) {
        if (payees && this.selectedPg) {
            return payees.filter((val) => {
                return val.id === this.selectedPg.id;
            }).length;
        }
        return false;
    }
    getAccountGroupLinked(payee) {
        const accountGroups = [];
        this.dataGroups.forEach((el) => {
            if (el['payees'] &&
                el['payees'].filter((val) => {
                    return val.id === payee.id;
                }).length) {
                accountGroups.push(el);
            }
        });
        return accountGroups;
    }
    getAccountGroupLinkedString(payee) {
        let accountGroups = '';
        this.dataGroups.forEach((el, idx, array) => {
            if (el['payees'] &&
                el['payees'].filter((val) => {
                    return val.id === payee.id;
                }).length) {
                accountGroups = accountGroups + "'" + el.name + "'";
                if (idx !== array.length - 1) {
                    accountGroups = accountGroups + ', ';
                }
            }
        });
        return accountGroups;
    }
    assignDataGroups(val) {
        val.forEach((item) => {
            this.dataGroups.push(Object.assign({}, item));
        });
        this.selectedDataGroups$.next(this.dataGroups);
        this.emitRequestObject();
    }
    searchAvailableDataGroups(val) {
        this.availableDataGroupsSearchTerm$.next(val);
    }
    searchAvailablePayeeGroups(val) {
        this.availablePayeeGroupsSearchTerm$.next(val);
    }
    searchAvailableDataGroupsForPayees(val) {
        this.availableDataGroupsForPayeesSearchTerm$.next(val);
    }
    addAccountGroup() {
        this.defaultSwitcherData = false;
        this.switchAccountType$.next(false);
        this.availableDataGroupsSearchTerm$.next('');
        this.selectAccountGroupsModalOpened = true;
    }
    assignPayee(payees, dataGroups) {
        this.availablePayeeGroupsSearchTerm$.next('');
        this.selectedPayeeGroups$.next(payees ? payees : []);
        this.selectPayeeGroupsModalOpened = true;
        this.selectedForAssignAccountGroup = this.dataGroups.find(o => o.id === dataGroups.id);
    }
    assignPayeeGroups(val) {
        this.dataGroups.forEach((element, index) => {
            if (this.selectedForAssignAccountGroup && element.id === this.selectedForAssignAccountGroup.id) {
                if (this.dataGroups[index].payees) {
                    val.forEach((item) => {
                        this.dataGroups[index].payees.push(Object.assign({}, item));
                    });
                }
                else {
                    this.dataGroups[index].payees = val;
                }
            }
        });
        if (this._userPermissions) {
            this.getAllLinkedPayees(this.dataGroups);
        }
        this.emitRequestObject();
    }
    assignDataGroupsForPayee(val) {
        val.forEach((el) => {
            const filteredDataGroup = this.dataGroups.find(o => o.id === el.id);
            if (!filteredDataGroup) {
                this.dataGroups.push(...val);
            }
            const findObject = this.dataGroups.find(o => o.id === el.id);
            if (findObject) {
                if (filteredDataGroup && filteredDataGroup.payees && this.selectedForAssignAccountGroupForPayee) {
                    findObject.payees.push(this.selectedForAssignAccountGroupForPayee);
                }
                else {
                    findObject.payees = [];
                    if (this.selectedForAssignAccountGroupForPayee) {
                        findObject.payees.push(this.selectedForAssignAccountGroupForPayee);
                    }
                }
            }
        });
        this.getAllLinkedPayees(this.dataGroups);
        this.emitRequestObject();
    }
    addAccountGroupToPayee(payee) {
        this.selectedForAssignAccountGroupForPayee = payee;
        this.selectedDataGroupsForPayee$.next(this.getAccountGroupLinked(payee));
        this.selectAccountGroupsForPayeesModalOpened = true;
    }
    getAllLinkedPayees(val) {
        const payees = [];
        val.forEach((el) => {
            if (el['payees']) {
                payees.push(...el['payees']);
            }
        });
        this.allLinkedPayee = payees.filter((v, i, a) => a.findIndex(t => t.id === v.id) === i);
    }
    removeAccountGroup(accountGroup) {
        this.dataGroups = this.dataGroups.filter(item => {
            this.dataGroupForRemove = undefined;
            return item.id !== accountGroup.id;
        });
        this.getAllLinkedPayees(this.dataGroups);
        this.selectedDataGroups$.next(this.dataGroups);
        this.emitRequestObject();
    }
    removedPayeeGroup(payyeGroup, accountGroup) {
        this.dataGroups.forEach((el) => {
            if (el.id === accountGroup.id) {
                el.payees = [
                    ...el.payees.filter(item => {
                        return item !== payyeGroup;
                    }),
                ];
            }
        });
        this.getAllLinkedPayees(this.dataGroups);
        this.emitRequestObject();
    }
    removePayeeGroupLinking(payee) {
        this.dataGroups.forEach((el) => {
            if (el.payees) {
                this.dataGroupForRemove = undefined;
                el.payees = el.payees.filter(value => {
                    return value.id !== payee.id;
                });
            }
        });
        this.getAllLinkedPayees(this.dataGroups);
        if (this.allLinkedPayee.length === 0) {
            this.activeDataGroup = 'account';
        }
        this.emitRequestObject();
    }
    removedAccountGroupFromPayee(payee, account) {
        this.dataGroups.forEach((el) => {
            if (el.id === account.id) {
                el.payees = el.payees.filter(value => {
                    return value.id !== payee.id;
                });
            }
        });
        this.getAllLinkedPayees(this.dataGroups);
        if (this.allLinkedPayee.length === 0) {
            this.activeDataGroup = 'account';
        }
        this.emitRequestObject();
    }
    onEditPayee() {
        this.preEditDataGroupState = JSON.parse(JSON.stringify(this.dataGroups));
        this.editedFunctionIdEmit.emit(this._userPermissions ? this._userPermissions.id : undefined);
    }
    onCancel() {
        this.editView = false;
        this.dataGroups = JSON.parse(JSON.stringify(this.preEditDataGroupState));
        this.getAllLinkedPayees(this.dataGroups);
        this.selectedDataGroups$.next(this.dataGroups);
        this.editedFunctionIdEmit.emit(undefined);
    }
    emitRequestObject() {
        this.objectForRequest = [];
        this.dataGroups.forEach((accountGroup) => {
            if (this._userPermissions) {
                const dataObj = [];
                dataObj.push({ id: accountGroup.id });
                if (accountGroup.payees) {
                    accountGroup.payees.forEach((payeeGroup) => {
                        dataObj.push({ id: payeeGroup.id });
                    });
                }
                this.objectForRequest.push({ functionGroupId: this._userPermissions.id, dataGroupIds: dataObj });
            }
        });
        if (this.objectForRequest.length === 0 && this._userPermissions) {
            this.objectForRequest.push({ functionGroupId: this._userPermissions.id, dataGroupIds: [] });
        }
        if (this.objectForRequest.length !== 0 && this.selfApprovalPolicies && this.selfApprovalPolicies.length) {
            this.objectForRequest.forEach((el) => {
                var _a;
                el.selfApprovalPolicies = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.filter((item) => !this.checkForUnsetPolicies(item));
            });
        }
        this.requestObjectEmit.emit(this.objectForRequest);
        if (this._userPermissions && this.dataGroups && this.preEditDataGroupState) {
            this.changesMadedEmit.emit({ [this._userPermissions.id]: this.checkChanges() });
        }
    }
    onSave() {
        this.emitRequestObject();
    }
    checkForUnsetPolicies(el) {
        var _a, _b;
        return ((el.canSelfApprove && this.selfApproveDefaultBehavior === 'enable' && !((_a = el.bounds) === null || _a === void 0 ? void 0 : _a.length)) ||
            (!el.canSelfApprove && this.selfApproveDefaultBehavior === 'disable' && !((_b = el.bounds) === null || _b === void 0 ? void 0 : _b.length)));
    }
    checkChanges() {
        var _a, _b;
        if (this.dataGroups.length !== this.preEditDataGroupState.length) {
            return false;
        }
        else {
            for (let i = 0; i < this.dataGroups.length; i++) {
                const savedObject = this.preEditDataGroupState.find(el => el.id === this.dataGroups[i].id);
                if (!savedObject) {
                    return false;
                }
                else if (this.checkPayeesForChanges(savedObject.payees, this.dataGroups[i].payees)) {
                    return false;
                }
            }
        }
        const resultA = (_a = this.selfApprovalPoliciesHistory) === null || _a === void 0 ? void 0 : _a.filter(elm => { var _a; return !((_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.map(elm => JSON.stringify(elm)).includes(JSON.stringify(elm))); });
        const resultB = (_b = this.selfApprovalPolicies) === null || _b === void 0 ? void 0 : _b.filter(elm => { var _a; return !((_a = this.selfApprovalPoliciesHistory) === null || _a === void 0 ? void 0 : _a.map(elm => JSON.stringify(elm)).includes(JSON.stringify(elm))); });
        if ((resultA === null || resultA === void 0 ? void 0 : resultA.length) || (resultB === null || resultB === void 0 ? void 0 : resultB.length)) {
            return false;
        }
        return true;
    }
    checkPayeesForChanges(savedObjects, dataGroupPayeeObjects) {
        if ((!savedObjects && dataGroupPayeeObjects && dataGroupPayeeObjects.length) ||
            (savedObjects && savedObjects.length && !dataGroupPayeeObjects)) {
            return true;
        }
        if (savedObjects && dataGroupPayeeObjects && savedObjects.length !== dataGroupPayeeObjects.length) {
            return true;
        }
        if (savedObjects && dataGroupPayeeObjects && savedObjects.length === dataGroupPayeeObjects.length) {
            for (let j = 0; j < dataGroupPayeeObjects.length; j++) {
                const savedObjectPayee = savedObjects.find(el => el.id === dataGroupPayeeObjects[j].id);
                if (!savedObjectPayee) {
                    return true;
                }
            }
        }
        return false;
    }
    onOpenUnassignModal(dataGroup) {
        this.dataGroupForRemove = dataGroup;
    }
    openPayeeGroupDetail(payee) {
        // @ts-ignore
        this.payeeIds = payee.items;
        this.payeeGroupName = payee.name;
        this.payeeDetailModal = true;
    }
    openAccountGroupDetail(account) {
        // @ts-ignore
        this.accountIds = account.items;
        this.accountGroupName = account.name;
        this.accountDetailModal = true;
    }
    /**
     * Return flag of financial BF and bound support for self approve
     * @param item - BF privileges
     */
    checkIfSelfApproveLimitsSupport(item) {
        let countOfSupportLimit = 0;
        for (const property in item) {
            if (item[property].supportsLimits) {
                countOfSupportLimit++;
            }
        }
        return item.approve && item.approve.assigned && countOfSupportLimit > 0;
    }
    /**
     * Return flag of self approve supported
     * @param item - BF privileges
     */
    checkIfSelfApprove(item) {
        return item.approve && item.approve.assigned;
    }
    /**
     * Return flag of present any self approval item in group of BF
     * @param items - BF privileges in Group
     */
    checkIfGroupHasSelfApprove(items) {
        let appovePrivelegCount = 0;
        items.forEach((el) => {
            if (this.checkIfSelfApprove(el.privileges)) {
                appovePrivelegCount++;
            }
        });
        return appovePrivelegCount > 0;
    }
    /**
     * Return flag of state of self approval
     * @param name - name of BF
     */
    checkIfSelfApprovalPoliciesSetted(name) {
        var _a, _b;
        return (_b = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === name)) === null || _b === void 0 ? void 0 : _b.canSelfApprove;
    }
    /**
     * Return flag of disabled of self approval
     * @param name - name of BF
     */
    checkIfSelfApprovalDisabled(name) {
        var _a, _b, _c;
        if ((_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === name)) {
            return !((_c = (_b = this.selfApprovalPolicies) === null || _b === void 0 ? void 0 : _b.find((el) => el.businessFunctionName === name)) === null || _c === void 0 ? void 0 : _c.canSelfApprove);
        }
        return false;
    }
    /**
     * Return bounds for self approve
     * @param name - name of BF
     */
    getBoundsForSelfApprove(name) {
        var _a, _b;
        return (_b = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === name)) === null || _b === void 0 ? void 0 : _b.bounds;
    }
    /**
     * Open modal for edit self Approve
     * @param bf -  BF
     */
    editSelfApprove(bf) {
        var _a;
        this.selfApproveItemData = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === bf.name);
        this.typeOfSelfApproveAction = 'edit';
        this.selectedBFForSelfApprove = bf;
    }
    /**
     * Open modal for enable self Approve
     * @param bf -  BF
     */
    enableSelfApprove(bf) {
        var _a;
        this.selfApproveItemData = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === bf.name);
        this.typeOfSelfApproveAction = 'enable';
        this.selectedBFForSelfApprove = bf;
    }
    /**
     * Changed response object when self approval item changed
     * @param event -  SelfApprovalPolicies
     */
    onSelfApproveChanges(event) {
        var _a;
        this.selfApprovalPolicies = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.filter((obj) => {
            return obj.businessFunctionName !== event.businessFunctionName;
        });
        if (this.selfApprovalPolicies && this.selfApprovalPolicies.length) {
            this.selfApprovalPolicies.push(event);
        }
        else {
            this.selfApprovalPolicies = [];
            this.selfApprovalPolicies.push(event);
        }
        this.emitRequestObject();
    }
}
/** @nocollapse */ UserPermissionsItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserPermissionsItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemComponent, selector: "bb-user-permissions-item", inputs: { user: "user", currencyList: "currencyList", selfApproveDefaultBehavior: "selfApproveDefaultBehavior", showApprovalLevel: "showApprovalLevel", approvalLevel: "approvalLevel", approvalLevelLoading: "approvalLevelLoading", approvalLevelError: "approvalLevelError", limitData: "limitData", userLimitsPermission: "userLimitsPermission", userPermissions: "userPermissions", dataGroup: "dataGroup", payeeGroups: "payeeGroups", showActions: "showActions", enableSelfApproval: "enableSelfApproval", showPayee: "showPayee", showFunctionGroupType: "showFunctionGroupType", disableSaveButton: "disableSaveButton", editView: "editView", legalEntityId: "legalEntityId", editedFunctionId: "editedFunctionId" }, outputs: { emitLimitData: "emitLimitData", removeFunctionGroup: "removeFunctionGroup", removeDataGroup: "removeDataGroup", requestObjectEmit: "requestObjectEmit", editedFunctionIdEmit: "editedFunctionIdEmit", changesMadedEmit: "changesMadedEmit" }, queries: [{ propertyName: "businessFunctionTemplate", first: true, predicate: UserPermissionsItemBusinessFunctionDirective, descendants: true }, { propertyName: "businessFunctionGroupKeyTemplate", first: true, predicate: UserPermissionsItemBusinessFunctionGroupNameDirective, descendants: true }], ngImport: i0, template: "<div\n  *ngIf=\"_userPermissions && dataGroups\"\n  [attr.data-role]=\"_userPermissions.name + '-container'\"\n  class=\"bb-user-permission-item bb-block bb-block--sm\">\n  <div class=\"bb-block bb-block--sm\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-bottom bb-heading-3 break-word\">\n        {{ _userPermissions.name }}\n      </div>\n\n      <div class=\"bb-stack__item\" *ngIf=\"showFunctionGroupType\">\n        <bb-badge-ui\n          *ngIf=\"_userPermissions.type === 'TEMPLATE'\"\n          data-role=\"function-group-reference-badge\"\n          color=\"secondary\"\n          text=\"Reference\"\n          i18n-text=\"Reference function group@@user-permissions-item.function-group.type.reference\">\n        </bb-badge-ui>\n\n        <bb-badge-ui\n          *ngIf=\"_userPermissions.type === 'REGULAR'\"\n          data-role=\"function-group-custom-badge\"\n          color=\"secondary\"\n          text=\"Custom\"\n          i18n-text=\"Custom function group@@user-permissions-item.function-group.type.regular\">\n        </bb-badge-ui>\n\n        <bb-badge-ui\n          *ngIf=\"$any(_userPermissions.type) === 'SYSTEM'\"\n          data-role=\"function-group-system-badge\"\n          color=\"secondary\"\n          text=\"System\"\n          i18n-text=\"System function group@@user-permissions-item.function-group.type.System\">\n        </bb-badge-ui>\n      </div>\n\n      <div class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--no-shrink\">\n        <button\n          [attr.data-role]=\"'unassign-function-group-' + _userPermissions.name\"\n          *ngIf=\"showActions && $any(_userPermissions.type) !== 'SYSTEM'\"\n          bbButton\n          (click)=\"onRemoveFunctionGroup()\"\n          color=\"link\"\n          buttonSize=\"sm\">\n          <span i18n=\"Unassign job role@@user-permissions-item.label.unassign-function-group\"> Unassign job role </span>\n        </button>\n        <ng-container *ngIf=\"$any(_userPermissions.type) === 'SYSTEM'\">\n          <bb-badge-ui\n            data-role=\"locked-badge\"\n            i18n=\"Locked@@user-permissions-item.locked.budge.text\"\n            text=\"Locked\"\n            color=\"secondary\"\n            [abbr]=\"false\"\n            [circle]=\"false\"></bb-badge-ui>\n          <bb-icon-ui data-role=\"locked-icon\" class=\"bb-text-support align-middle\" name=\"lock\" size=\"md\"></bb-icon-ui>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n  <div data-role=\"function-group-description\" class=\"bb-block bb-block--md bb-text-support break-word\">\n    {{ _userPermissions.description }}\n  </div>\n\n  <ng-container *ngIf=\"showApprovalLevel\">\n    <ng-container *ngIf=\"!approvalLevelLoading; else loadingTmp\">\n      <ng-container *ngIf=\"approvalLevel !== approvalLevelStatus.ERROR; else errorTmp\">\n        <div class=\"bb-block bb-block--md\" data-role=\"approval-level-info\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item bb-stack__item--spacing-sm bb-stack__item--align-bottom\">\n              <bb-icon-ui\n                *ngIf=\"approvalLevel && $any(approvalLevel !== approvalLevelStatus.EMPTY); else noApprovalLevelIcon\"\n                name=\"authorizations\"\n                size=\"md\"\n                data-role=\"approval-level-icon\"></bb-icon-ui>\n              <ng-template #noApprovalLevelIcon>\n                <bb-icon-ui name=\"warning\" size=\"md\" color=\"warning\" data-role=\"no-approval-level-icon\"></bb-icon-ui>\n              </ng-template>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--align-top\">\n              <span\n                *ngIf=\"approvalLevel && $any(approvalLevel !== approvalLevelStatus.EMPTY); else noApprovalLevel\"\n                data-role=\"approval-level-details\"\n                i18n=\"Approval level type@@user-permissions-item.approval-level.info\"\n                class=\"bb-text-bold bb-text-support text-small\">\n                Approval level \"{{ approvalLevel }}\"\n              </span>\n              <ng-template #noApprovalLevel>\n                <span\n                  data-role=\"no-approval-level-assigned\"\n                  i18n=\"No approval level warning@@@user-permissions-item.approval-level.no-assigned\"\n                  class=\"bb-text-bold text-small text-warning\">\n                  No approval level\n                </span>\n              </ng-template>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingTmp>\n    <bb-loading-indicator-ui\n      data-role=\"approval-level-loading-spinner\"\n      loaderSize=\"sm\"\n      [inline]=\"true\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #errorTmp>\n    <div class=\"bb-stack\" data-role=\"approval-level-error\">\n      <bb-icon-ui\n        class=\"bb-stack__item bb-stack__item--spacing-sm bb-stack__item--align-bottom\"\n        name=\"warning\"\n        color=\"danger\"\n        size=\"md\"></bb-icon-ui>\n      <span\n        class=\"bb-text-bold text-small text-danger\"\n        i18n=\"Approval level error@@user-permissions-item.approval-level.error\">\n        Could not retrieve approval level\n      </span>\n    </div>\n  </ng-template>\n\n  <div class=\"bb-block bb-block--md bb-text-support\">\n    <bb-function-group-time-bounds [functionGroup]=\"_userPermissions\"></bb-function-group-time-bounds>\n  </div>\n\n  <div class=\"bb-block bb-block--sm\">\n    <u\n      class=\"bb-text-semi-bold bb-subtitle break-word\"\n      i18n=\"Permissions Within@@user-permissions-item.label.permissionsWithin\">\n      Permissions within '{{ _userPermissions.name }}'\n    </u>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" *ngFor=\"let bfGroups of _userPermissions.groupedBusinessFunctions\">\n    <div class=\"bb-stack bb-block bb-block--md row no-gutters\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-none bb-text-semi-bold col-3\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            businessFunctionGroupKeyTemplate?.templateRef || null;\n            context: { groupKey: bfGroups.groupKey }\n          \">\n        </ng-container>\n      </div>\n\n      <bb-business-function-privileges-name\n        class=\"col-6 bb-user-permission-item__business-function-privileges-name bb-subheader bb-subheader--regular\">\n      </bb-business-function-privileges-name>\n      <div\n        class=\"bb-user-permission-item__business-function-privileges-name bb-subheader bb-subheader--regular col-3\"\n        *ngIf=\"enableSelfApproval\"\n        data-role=\"self-approval-header\">\n        <span\n          [attr.data-role]=\"'self-approval-header-for-' + bfGroups.groupKey\"\n          class=\"bb-business-function-privilege-name-item bb-text-align-center\"\n          i18n=\"Self Approval header text@@user-permissions-item.self-approval.header.text\"\n          >Self Approve</span\n        >\n      </div>\n    </div>\n\n    <div *ngFor=\"let bf of bfGroups.businessFunctions\" class=\"bb-stack bb-block bb-block--md row no-gutters\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-none col-3\">\n        <div class=\"bb-user-permission-item__function-item__label bb-subtitle\">\n          <ng-container\n            *ngTemplateOutlet=\"businessFunctionTemplate?.templateRef || null; context: { businessFunction: bf }\">\n          </ng-container>\n        </div>\n      </div>\n\n      <bb-privilege-indicator-list\n        class=\"bb-stack col-6\"\n        [businessFunction]=\"bf\"\n        [limitData]=\"limitData\"\n        [userPermission]=\"userLimitsPermission\"\n        [functionGroupId]=\"_userPermissions.id\"\n        (emitLimitData)=\"emitLimit($event, bf.name, _userPermissions.name)\">\n      </bb-privilege-indicator-list>\n\n      <div\n        class=\"col-3 bb-block bb-subheader bb-subheader--regular\"\n        data-role=\"self-approval-info-block\"\n        *ngIf=\"checkIfSelfApprove(bf.privileges) && enableSelfApproval\">\n        <div [attr.data-role]=\"'self-approval-for-' + bf.name\">\n          <div class=\"bb-inline-stack\">\n            <ng-container\n              *ngIf=\"\n                checkIfSelfApprovalDisabled(bf.name) ||\n                (!checkIfSelfApprovalPoliciesSetted(bf.name) && selfApproveDefaultBehavior !== 'enable')\n              \">\n              <bb-icon-ui\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-support\"\n                name=\"cancel\"\n                size=\"sm\"\n                color=\"support\"></bb-icon-ui>\n              <span\n                data-role=\"self-approval-disabled-indicator\"\n                i18n=\"\n                  Self Approval disabled indicator text@@user-permissions-item.self-approval.disabled.indicator.text\"\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-lg bb-text-support\">\n                Disabled\n              </span>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                !checkIfSelfApprovalDisabled(bf.name) &&\n                (checkIfSelfApprovalPoliciesSetted(bf.name) || selfApproveDefaultBehavior === 'enable')\n              \">\n              <bb-icon-ui\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                name=\"authorizations\"\n                size=\"sm\"\n                color=\"support\"></bb-icon-ui>\n              <span\n                data-role=\"self-approval-enabled-indicator\"\n                i18n=\"Self Approval enabled indicator text@@user-permissions-item.self-approval.enabled.indicator.text\"\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-lg bb-text-bold\">\n                Enabled\n              </span>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                !checkIfSelfApprovalDisabled(bf.name) &&\n                (checkIfSelfApprovalPoliciesSetted(bf.name) || selfApproveDefaultBehavior === 'enable') &&\n                editView\n              \">\n              <button bbButton color=\"link-text\" data-role=\"self-approve-edit-button\" (click)=\"editSelfApprove(bf)\">\n                <ng-container *ngIf=\"checkIfSelfApproveLimitsSupport(bf.privileges); else disabledButton\">\n                  <bb-icon-ui\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                    name=\"edit\"\n                    size=\"sm\"></bb-icon-ui>\n                  <span\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-subheader bb-subheader--regular\"\n                    i18n=\"Self Approval edit button text@@user-permissions-item.self-approval.edit.button.text\">\n                    Edit\n                  </span>\n                </ng-container>\n                <ng-template #disabledButton>\n                  <bb-icon-ui\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                    name=\"cancel\"\n                    size=\"sm\"\n                    color=\"danger\"></bb-icon-ui>\n                  <span\n                    class=\"\n                      bb-inline-stack__item bb-inline-stack__item--spacing-none\n                      bb-subheader bb-subheader--regular\n                      bb-text-danger\n                    \"\n                    i18n=\"Self Approval disable button text@@user-permissions-item.self-approval.disable.button.text\">\n                    Disable\n                  </span>\n                </ng-template>\n              </button>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                (checkIfSelfApprovalDisabled(bf.name) ||\n                  (!checkIfSelfApprovalPoliciesSetted(bf.name) && selfApproveDefaultBehavior !== 'enable')) &&\n                editView\n              \">\n              <button bbButton color=\"link-text\" data-role=\"self-approve-enable-button\" (click)=\"enableSelfApprove(bf)\">\n                <bb-icon-ui\n                  class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                  name=\"edit\"\n                  size=\"sm\"></bb-icon-ui>\n                <span\n                  class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-subheader bb-subheader--regular\"\n                  i18n=\"Self Approval enable button text@@user-permissions-item.self-approval.enable.button.text\">\n                  Enable\n                </span>\n              </button>\n            </ng-container>\n          </div>\n          <ng-container *ngIf=\"checkIfSelfApproveLimitsSupport(bf.privileges)\">\n            <div\n              class=\"bb-block bb-text-bold bb-text-support\"\n              *ngFor=\"let bound of getBoundsForSelfApprove(bf.name)\"\n              data-role=\"self-approve-bound\">\n              <span>0 - </span>\n              <bb-amount-ui\n                data-role=\"self-approve-bound-amount\"\n                [amount]=\"$any(bound.amount)\"\n                [mapCurrency]=\"true\"\n                [showPlusSign]=\"false\"\n                [abbreviate]=\"false\"></bb-amount-ui>\n              <span> {{ bound.currencyCode }}</span>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n\n      <div\n        class=\"bb-user-permission-item__function-item__label\"\n        data-role=\"self-approve-not-applicable-icon\"\n        *ngIf=\"!checkIfSelfApprove(bf.privileges) && enableSelfApproval\">\n        <bb-icon-ui\n          name=\"remove\"\n          [color]=\"'muted'\"\n          aria-label=\"Not applicable for this business function\"\n          i18n-aria-label=\"Not applicable aria label@@user-permissions-item.self-approve.aria.not-applicable\"\n          bbTooltip=\"Not applicable for this function\"\n          i18n-bbTooltip=\"Not applicable tooltip@@user-permissions-item.self-approve..tooltip.not-applicable\"\n          triggers=\"hover\"></bb-icon-ui>\n      </div>\n    </div>\n  </div>\n  <bb-self-approve-modal\n    *ngIf=\"selectedBFForSelfApprove\"\n    [isOpen]=\"$any(selectedBFForSelfApprove)\"\n    [user]=\"user\"\n    [bf]=\"selectedBFForSelfApprove\"\n    [jobRoleName]=\"_userPermissions.name\"\n    [type]=\"typeOfSelfApproveAction\"\n    [selfApproveItemData]=\"selfApproveItemData\"\n    [isLimitSupport]=\"checkIfSelfApproveLimitsSupport(selectedBFForSelfApprove.privileges)\"\n    [currencyList]=\"currencyList\"\n    (cancel)=\"selectedBFForSelfApprove = undefined\"\n    (selfApprovalDataEmit)=\"onSelfApproveChanges($event); selectedBFForSelfApprove = undefined\"\n    data-role=\"self-approve-modal\">\n  </bb-self-approve-modal>\n\n  <!--different view, will be added after release MVP-->\n  <ng-template>\n    <div class=\"bb-stack\">\n      <div class=\"btn-group btn-group-sm bb-stack__item bb-stack__item--push-right\" data-role=\"btn-group-sm-icons\">\n        <button (click)=\"activeView = 'table'\" [color]=\"activeView === 'table' ? 'primary' : 'secondary'\" bbButton>\n          <bb-icon-ui name=\"view-module\"></bb-icon-ui>\n        </button>\n        <button (click)=\"activeView = 'list'\" [color]=\"activeView === 'list' ? 'primary' : 'secondary'\" bbButton>\n          <bb-icon-ui name=\"list\"></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"row m-0\" *ngIf=\"activeView === 'list'\">\n      <div\n        [ngClass]=\"{ 'col-8': allLinkedPayee?.length, 'col-12': !allLinkedPayee?.length }\"\n        class=\"bb-account-group-item col-8\">\n        <div class=\"card bb-account-group-item__card\" *ngIf=\"!($any(_userPermissions.type) === 'SYSTEM')\">\n          <div class=\"card-body\">\n            <div class=\"bb-block bb-block--sm\">\n              <u\n                class=\"bb-text-semi-bold bb-subtitle\"\n                i18n=\"Account Groups Assigned@@user-permissions-item.label.accountGroupsAssigned\">\n                { dataGroups.length, plural, =0 { No account groups assigned } =1 { 1 account group assigned } other {\n                {{ dataGroups.length }} account groups assigned } }\n              </u>\n            </div>\n\n            <div *ngIf=\"dataGroups.length\" class=\"row\">\n              <div *ngFor=\"let dataGroup of dataGroups\" class=\"col-4\">\n                <div\n                  class=\"bb-stack bb-block bb-block--md bb-account-group-item__card__item\"\n                  data-role=\"assigned-data-group-item\"\n                  [ngClass]=\"{ 'bb-account-group-item__card__item--active rounded': dataGroup === selectedDg }\">\n                  <bb-icon-ui\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                    *ngIf=\"!showActions\"\n                    name=\"check\"\n                    color=\"success\"></bb-icon-ui>\n                  <button\n                    *ngIf=\"showActions\"\n                    bbButton\n                    (click)=\"onRemoveDataGroup(dataGroup)\"\n                    color=\"link\"\n                    [circle]=\"true\"\n                    aria-label=\"Remove account group\"\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                    i18n-aria-label=\"Remove account group@@user-permissions-item.label.remove-account-group\"\n                    [attr.data-role]=\"'user-permissions-item-data-group-name-' + dataGroup.name\">\n                    <bb-icon-ui name=\"delete\" color=\"dark\"></bb-icon-ui>\n                  </button>\n                  <span\n                    class=\"bb-stack__item bb-subtitle break-word\"\n                    data-role=\"assigned-data-group\"\n                    [ngClass]=\"{ 'text-primary': checkInclude(dataGroup['payees']) }\">\n                    {{ dataGroup.name }}\n                  </span>\n                  <bb-icon-ui\n                    class=\"bb-account-group-item__card__item--link\"\n                    *ngIf=\"dataGroup['payees'] && dataGroup['payees'].length\"\n                    name=\"link\"\n                    color=\"primary\"\n                    (click)=\"showLinkedPayee(dataGroup)\"\n                    data-role=\"linked-button\"></bb-icon-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"allLinkedPayee && allLinkedPayee.length\" class=\"bb-linked-item\">\n        <div class=\"bb-linked-item__icon\">\n          <bb-icon-ui\n            circle=\"true\"\n            data-role=\"unlinked-button\"\n            backgroundType=\"circle\"\n            name=\"link\"\n            [inverse]=\"true\"\n            size=\"lg\"\n            (click)=\"selectedDg = undefined; selectedPg = undefined\"></bb-icon-ui>\n        </div>\n      </div>\n\n      <div class=\"col-4 bb-payee-group-item\" *ngIf=\"allLinkedPayee && allLinkedPayee.length\" data-role=\"linked-payees\">\n        <div class=\"card bb-payee-group-item__card\">\n          <div class=\"card-body\">\n            <div *ngIf=\"selectedDg\" data-role=\"selected-payees\">\n              <p\n                class=\"bb-subtitle bb-text-semi-bold\"\n                i18n=\"All Payee Groups Linked@@user-permissions-item.label.allPayeesLinked\">\n                { selectedDg?.payees?.length, plural, =1 { 1/{{ allLinkedPayee.length }} payee group linked } other {\n                {{ selectedDg?.payees?.length }}/{{ allLinkedPayee.length }} payee groups linked to } }\n                <b>{{ selectedDg?.name }}</b>\n              </p>\n              <p\n                *ngFor=\"let payeeGroup of selectedDg?.payees\"\n                class=\"bb-subtitle bb-payee-group-item__card__item rounded\"\n                (click)=\"selectedPG(payeeGroup)\">\n                <bb-icon-ui name=\"check\" *ngIf=\"selectedPg?.id !== payeeGroup.id\" class=\"align-bottom\"></bb-icon-ui>\n                <bb-icon-ui\n                  name=\"radio-button-checked\"\n                  *ngIf=\"selectedPg?.id === payeeGroup.id\"\n                  class=\"align-bottom\"></bb-icon-ui>\n                {{ payeeGroup.name }}\n              </p>\n            </div>\n\n            <div *ngIf=\"!selectedDg\" data-role=\"all-payees\">\n              <p\n                class=\"bb-subtitle bb-text-semi-bold\"\n                i18n=\"Selected Payee Groups Linked@@user-permissions-item.label.selectedPayeesLinked\">\n                { allLinkedPayee.length, plural, =1 { 1 payee group linked } other { {{ allLinkedPayee.length }} payee\n                groups linked } }\n              </p>\n              <p\n                *ngFor=\"let payeeGroup of allLinkedPayee\"\n                class=\"bb-subtitle bb-payee-group-item__card__item rounded\"\n                (click)=\"selectedPG(payeeGroup)\">\n                <bb-icon-ui name=\"check\" *ngIf=\"selectedPg?.id !== payeeGroup.id\" class=\"align-bottom\"></bb-icon-ui>\n                <bb-icon-ui\n                  name=\"radio-button-checked\"\n                  *ngIf=\"selectedPg?.id === payeeGroup.id\"\n                  class=\"align-bottom\"></bb-icon-ui>\n                {{ payeeGroup.name }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <!--different view, will be added after release MVP-->\n  <div class=\"card\" *ngIf=\"activeView === 'table'\">\n    <div\n      class=\"card-body\"\n      *ngIf=\"!($any(_userPermissions.type) === 'SYSTEM')\"\n      [attr.data-role]=\"'card-body-' + _userPermissions.name\">\n      <div *ngIf=\"!dataGroups.length\">\n        <div class=\"bb-block bb-block--sm\" data-role=\"no-assigned-item\">\n          <u\n            class=\"bb-text-semi-bold bb-subtitle\"\n            i18n=\"No Account Groups Assigned@@user-permissions-item.label.noAccountGroupsAssigned\">\n            No account groups assigned\n          </u>\n        </div>\n      </div>\n\n      <div *ngIf=\"dataGroups.length\">\n        <div\n          class=\"btn-group btn-group-sm bb-stack__item\"\n          data-role=\"btn-group-for-type-of-group\"\n          *ngIf=\"allLinkedPayee && allLinkedPayee.length\">\n          <button\n            (click)=\"activeDataGroup = 'account'\"\n            [color]=\"activeDataGroup === 'account' ? 'primary' : 'secondary'\"\n            bbButton\n            data-role=\"account-group-button\"\n            i18n=\"Account group toggle button@@user-permissions-item.toggle-button.account-group\">\n            Account Groups ({{ dataGroups.length }})\n          </button>\n          <button\n            (click)=\"activeDataGroup = 'payee'\"\n            [color]=\"activeDataGroup === 'payee' ? 'primary' : 'secondary'\"\n            bbButton\n            data-role=\"payee-group-button\"\n            i18n=\"Payee group toggle button@@user-permissions-item.toggle-button.payee-group\">\n            Payee Groups ({{ allLinkedPayee.length }})\n          </button>\n        </div>\n        <table\n          class=\"table table-striped table-hover table-fixed\"\n          bbTableFocus\n          [bbTable]=\"dataGroups\"\n          [attr.data-role]=\"'assigned-table-' + _userPermissions.name\">\n          <caption\n            class=\"sr-only\"\n            i18n=\"Linked Account Group Table@@user-permissions-item.linked-account-group.table.caption\">\n            Table with Account Groups linked to Payee Groups\n          </caption>\n\n          <thead>\n            <tr data-role=\"service-agreement-table-headers\">\n              <ng-container *ngIf=\"activeDataGroup === 'account'\">\n                <ng-container *ngTemplateOutlet=\"accountGroupHeader\"></ng-container>\n              </ng-container>\n\n              <th *ngIf=\"showPayee && ((allLinkedPayee && allLinkedPayee.length) || editView)\" scope=\"col\">\n                <span class=\"bb-stack\">\n                  <span\n                    i18n=\"Payee Groups table header name@@user-permissions-item.table.header.payee-group.name\"\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\">\n                    Payee Groups\n                  </span>\n                  <bb-icon-ui\n                    name=\"info\"\n                    data-role=\"payee-group-info\"\n                    size=\"md\"\n                    class=\"bb-stack__item bb-text-support\"\n                    [bbTooltip]=\"payeeHeaderTooltip\"\n                    tabindex=\"0\"\n                    aria-labelledby=\"payeeTooltip\"\n                    triggers=\"hover\"></bb-icon-ui>\n                  <ng-template #payeeHeaderTooltip>\n                    <span\n                      i18n=\"\n                        Payee Groups table header tooltip\n                        text@@user-permissions-item.table.header.payee-group.tooltip.text\">\n                      These are the payee group(s) linked with account group(s) assigned to\n                      {{ _userPermissions.name }} Job Role\n                    </span>\n                  </ng-template>\n                  <span\n                    class=\"d-none\"\n                    id=\"payeeTooltip\"\n                    i18n=\"\n                      Payee Groups table header tooltip aria-label\n                      text@@user-permissions-item.table.header.payee-group.tooltip.aria-label.text\">\n                    These are the payee group(s) linked with account group(s) assigned to\n                    {{ _userPermissions.name }} Job Role\n                  </span>\n                </span>\n              </th>\n\n              <ng-template #accountGroupHeader>\n                <th scope=\"col\">\n                  <span class=\"bb-stack\">\n                    <span\n                      i18n=\"Account Groups table header name@@user-permissions-item.table.header.account-group.name\"\n                      class=\"bb-stack__item bb-stack__item--spacing-sm\">\n                      Account Groups\n                      <span *ngIf=\"!allLinkedPayee.length\" data-role=\"account-table-counter\"\n                        >({{ dataGroups.length }})</span\n                      >\n                    </span>\n                    <bb-icon-ui\n                      name=\"info\"\n                      data-role=\"account-group-info\"\n                      size=\"md\"\n                      class=\"bb-stack__item bb-text-support\"\n                      [bbTooltip]=\"accountHeaderTooltip\"\n                      tabindex=\"0\"\n                      aria-labelledby=\"accountTooltip\"\n                      triggers=\"hover\"></bb-icon-ui>\n                    <ng-template #accountHeaderTooltip>\n                      <span\n                        i18n=\"\n                          Account Groups table header tooltip\n                          text@@user-permissions-item.table.header.account-group.tooltip.text\">\n                        These are the account group(s) assigned to {{ _userPermissions.name }} Job Role\n                      </span>\n                    </ng-template>\n                    <span\n                      class=\"d-none\"\n                      id=\"accountTooltip\"\n                      i18n=\"\n                        Account Groups table header tooltip aria-label\n                        text@@user-permissions-item.table.header.account-group.tooltip.aria-label.text\">\n                      These are the account group(s) assigned to {{ _userPermissions.name }} Job Role\n                    </span>\n                  </span>\n                </th>\n              </ng-template>\n\n              <ng-container *ngIf=\"activeDataGroup === 'payee'\">\n                <ng-container *ngTemplateOutlet=\"accountGroupHeader\"></ng-container>\n              </ng-container>\n            </tr>\n          </thead>\n\n          <tbody *ngIf=\"activeDataGroup === 'account'\" data-role=\"account-table-body\">\n            <tr *ngFor=\"let dataGroup of dataGroups\" [bbRow]=\"dataGroup\" data-role=\"service-agreement-table-info\">\n              <td data-role=\"account-table-data-group-row\">\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    removeAccountGroupBtn;\n                    context: { $implicit: dataGroup, icon: 'remove-circle', size: 'md' }\n                  \"></ng-container>\n                <u role=\"button\" class=\"text-primary\" (bbKeyboardClick)=\"openAccountGroupDetail(dataGroup)\" tabindex=\"0\"\n                  >{{ dataGroup.name }}\n                  <i triggers=\"hover\" [bbTooltip]=\"accountNumberTooltip\" class=\"bb-text-bold\"\n                    >({{ dataGroup.items?.length }})</i\n                  >\n                </u>\n              </td>\n              <td\n                *ngIf=\"showPayee && ((allLinkedPayee && allLinkedPayee.length) || editView)\"\n                data-role=\"account-table-payee-row\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-stack--center\">\n                    <ng-container\n                      *ngTemplateOutlet=\"\n                        assignPayeeBtn;\n                        context: { dataGroup: dataGroup, payees: dataGroup['payees'] }\n                      \"></ng-container>\n                  </div>\n                  <div class=\"bb-stack__item\">\n                    <ng-container *ngFor=\"let payee of dataGroup['payees']; let isLast = last\">\n                      <div class=\"bb-inline-stack bb-inline-stack__item--spacing-sm bb-text-nowrap\">\n                        <ng-container\n                          *ngTemplateOutlet=\"\n                            removePayeeBtn;\n                            context: { payee: payee, dataGroup: dataGroup, icon: 'clear', size: 'sm' }\n                          \"></ng-container>\n                        <span\n                          [attr.data-role]=\"'payee-item-account-table-' + dataGroup.name\"\n                          (bbKeyboardClick)=\"openPayeeGroupDetail(payee)\"\n                          class=\"text-primary\"\n                          role=\"button\"\n                          tabindex=\"0\">\n                          {{ payee.name\n                          }}<i triggers=\"hover\" [bbTooltip]=\"contactNumberTooltip\" class=\"bb-text-bold\" role=\"button\">\n                            ({{ payee.items?.length }})\n                          </i>\n                          <span *ngIf=\"!editView && !isLast\"> , </span>\n                        </span>\n                      </div>\n                    </ng-container>\n\n                    <span\n                      i18n=\"Not assigned payee groups@@user-permissions-item.table.no-assigned.text\"\n                      class=\"bb-text-support\"\n                      *ngIf=\"!dataGroup['payees'] || !dataGroup['payees'].length\">\n                      Not assigned\n                    </span>\n                  </div>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n          <tbody *ngIf=\"activeDataGroup === 'payee'\" data-role=\"payee-table-body\">\n            <tr *ngFor=\"let payee of allLinkedPayee\" [bbRow]=\"payee\" data-role=\"service-agreement-table-info\">\n              <td data-role=\"payee-table-payee-row\">\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    removePayeeLinkingBtn;\n                    context: {\n                      payee: payee,\n                      dataGroups: getAccountGroupLinkedString(payee),\n                      icon: 'remove-circle',\n                      size: 'md'\n                    }\n                  \"></ng-container>\n                <u\n                  role=\"button\"\n                  class=\"text-primary\"\n                  [attr.data-role]=\"'payee-name-' + payee.name\"\n                  (bbKeyboardClick)=\"openPayeeGroupDetail(payee)\"\n                  tabindex=\"0\"\n                  >{{ payee.name\n                  }}<i triggers=\"hover\" [bbTooltip]=\"contactNumberTooltip\" class=\"bb-text-bold\" role=\"button\"\n                    >({{ payee.items.length }})</i\n                  ></u\n                >\n              </td>\n              <td data-role=\"payee-table-data-group-row\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-stack--center\">\n                    <ng-container\n                      *ngTemplateOutlet=\"assignAccountGroupToPayeeBtn; context: { payee: payee }\"></ng-container>\n                  </div>\n                  <div class=\"bb-stack__item\">\n                    <ng-container *ngFor=\"let account of getAccountGroupLinked(payee); let isLast = last\">\n                      <div class=\"bb-inline-stack bb-text-nowrap\">\n                        <ng-container\n                          *ngTemplateOutlet=\"\n                            removeAccountGroupFromPayeeBtn;\n                            context: {\n                              payee: payee,\n                              dataGroup: account,\n                              dataGroupLength: getAccountGroupLinked(payee).length,\n                              icon: 'clear',\n                              size: 'sm'\n                            }\n                          \"></ng-container>\n                        <span data-role=\"payee-table-account-item\">\n                          <span\n                            class=\"text-primary\"\n                            role=\"button\"\n                            [attr.data-role]=\"'payee-table-account-item-' + payee.name\"\n                            (bbKeyboardClick)=\"openAccountGroupDetail(account)\"\n                            tabindex=\"0\"\n                            >{{ account.name }}\n                            <i triggers=\"hover\" [bbTooltip]=\"accountNumberTooltip\" class=\"bb-text-bold\"\n                              >({{ account.items.length }})</i\n                            >\n                          </span>\n                          <span *ngIf=\"!editView && !isLast\"> , </span>\n                        </span>\n                      </div>\n                    </ng-container>\n                  </div>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        <div\n          *ngIf=\"editView && activeDataGroup === 'account'\"\n          class=\"bb-block bb-block--sm bb-stack bb-stack--density-sm\">\n          <button bbButton color=\"link\" buttonSize=\"md\" data-role=\"add-account-groups-btn\" (click)=\"addAccountGroup()\">\n            <bb-icon-ui name=\"add\" [cropped]=\"true\"></bb-icon-ui>\n            <span i18n=\"Add Account Group@@user-permissions-item.label.add-account-group\">Add Account Groups</span>\n          </button>\n        </div>\n        <button\n          bbButton\n          (click)=\"onEditPayee()\"\n          *ngIf=\"!editView && !editedFunctionId && showActions\"\n          color=\"link\"\n          data-role=\"edit-payees-button\"\n          i18n=\"Edit payees button@@user-permissions-item.button.edit-payees\">\n          edit\n        </button>\n        <div *ngIf=\"editView && !showActions\" class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            data-role=\"save-linking\"\n            class=\"bb-button-bar__button\"\n            (click)=\"onSave()\"\n            bbButton\n            color=\"primary\"\n            type=\"button\"\n            [disabled]=\"checkChanges()\">\n            <span i18n=\"Save button|Button to save form @@user-permissions-item.saveButton\"> Save </span>\n          </button>\n          <button\n            data-role=\"cancel-linking\"\n            class=\"bb-button-bar__button\"\n            bbButton\n            type=\"button\"\n            (click)=\"onCancel()\"\n            color=\"secondary\">\n            <span i18n=\"Cancel Button|Button to cancel @@user-permissions-item.cancelButton\"> Cancel </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <bb-payee-group-detail-modal\n    *ngIf=\"dataGroups.length\"\n    [targetSaId]=\"_userPermissions.serviceAgreementId\"\n    [isOpen]=\"payeeDetailModal\"\n    [payeeIds]=\"payeeIds\"\n    [payeeGroupName]=\"payeeGroupName\"\n    (cancel)=\"payeeDetailModal = false\"\n    data-role=\"payee-detail-modal\"></bb-payee-group-detail-modal>\n\n  <bb-account-group-detail-modal\n    *ngIf=\"dataGroups.length\"\n    [isOpen]=\"accountDetailModal\"\n    [accountIds]=\"accountIds\"\n    [accountGroupName]=\"accountGroupName\"\n    (cancel)=\"accountDetailModal = false\"\n    [legalEntityIds]=\"$any([legalEntityId])\"\n    data-role=\"account-detail-modal\"></bb-account-group-detail-modal>\n</div>\n\n<ng-template #removePayeeBtn let-payee=\"payee\" let-dataGroup=\"dataGroup\" let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"removedPayeeGroup(payee, dataGroup)\"\n    [bbTooltip]=\"removePayeeGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove payee group\"\n    i18n-aria-label=\"Remove payee group@@user-permissions-item.label.remove-payee-group\"\n    data-role=\"assign-payee-group-button\"\n    [attr.data-role]=\"'remove-payee-group-' + payee.name + dataGroup.name\">\n    <bb-icon-ui [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n\n  <ng-template #removePayeeGroupTooltip>\n    <span i18n=\"Remove payee group tooltip text@@user-permissions-item.remove-payee-group.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removePayeeLinkingBtn let-payee=\"payee\" let-dataGroups=\"dataGroups\" let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"onOpenUnassignModal(payee)\"\n    [bbTooltip]=\"unassignPayeeGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove payee group linking\"\n    i18n-aria-label=\"Remove payee group linking@@user-permissions-item.label.remove-payee-group-linking\"\n    data-role=\"assign-payee-group-button\"\n    [attr.data-role]=\"'payee-unlink-button-' + payee.name\">\n    <bb-icon-ui [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <bb-unassign-data-group-modal\n    [isOpen]=\"dataGroupForRemove && dataGroupForRemove.id === payee.id\"\n    [jobRole]=\"_userPermissions?.name\"\n    [activeDataGroup]=\"'payee'\"\n    [payeeGroupName]=\"payee.name\"\n    [accountGroupName]=\"dataGroups\"\n    (confirm)=\"removePayeeGroupLinking(payee)\"\n    (cancel)=\"dataGroupForRemove = undefined\"\n    data-role=\"unnasign-payee-modal\"></bb-unassign-data-group-modal>\n\n  <ng-template #unassignPayeeGroupTooltip>\n    <span i18n=\"Unassign payee group tooltip text@@user-permissions-item.unassign-payee-group.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from Account Group(s)\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #assignPayeeBtn let-dataGroup=\"dataGroup\" let-payees=\"payees\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"assignPayee(payees, dataGroup)\"\n    [bbTooltip]=\"assignPayeeTooltip\"\n    [circle]=\"true\"\n    buttonSize=\"md\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Assign payee group\"\n    i18n-aria-label=\"Assign payee group@@user-permissions-item.label.assign-payee-group\"\n    [attr.data-role]=\"'assign-payee-group-' + dataGroup.name\">\n    <bb-icon-ui name=\"add-circle\" color=\"primary\"></bb-icon-ui>\n  </button>\n  <ng-template #assignPayeeTooltip>\n    <span i18n=\"Add payee group(s) tooltip text@@user-permissions-item.add-payee-group.btn.tooltip.text\">\n      Add payee group(s) to '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #assignAccountGroupToPayeeBtn let-payee=\"payee\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"addAccountGroupToPayee(payee)\"\n    [bbTooltip]=\"assignAccountGroupToPayeeTooltip\"\n    [circle]=\"true\"\n    buttonSize=\"md\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Assign account group to payee\"\n    i18n-aria-label=\"Assign account group to payee group@@user-permissions-item.label.assign-account-group-to-payee\"\n    [attr.data-role]=\"'link-account-group-to-payee-' + payee.name\">\n    <bb-icon-ui name=\"add-circle\" color=\"primary\"></bb-icon-ui>\n  </button>\n  <ng-template #assignAccountGroupToPayeeTooltip>\n    <span\n      i18n=\"\n        Assign Account Group to Payee tooltip text@@user-permissions-item.assign-account-group-to-payee.btn.tooltip.text\">\n      Add '{{ payee.name }}' Payee Group to Account Group(s)\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removeAccountGroupBtn let-dataGroup let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"showActions || editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"onOpenUnassignModal(dataGroup)\"\n    [bbTooltip]=\"removeAccountGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove account group\"\n    i18n-aria-label=\"Remove account group@@user-permissions-item.label.remove-account-group\"\n    [attr.data-role]=\"'user-permissions-item-data-group-name-' + dataGroup.name\">\n    <bb-icon-ui *ngIf=\"editView\" [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <bb-unassign-data-group-modal\n    [isOpen]=\"dataGroupForRemove && dataGroupForRemove.id === dataGroup.id\"\n    [accountGroupName]=\"dataGroup.name\"\n    [jobRole]=\"_userPermissions?.name\"\n    [activeDataGroup]=\"'account'\"\n    (confirm)=\"removeAccountGroup(dataGroup)\"\n    (cancel)=\"dataGroupForRemove = undefined\"\n    data-role=\"unassign-account-group-modal\"></bb-unassign-data-group-modal>\n</ng-template>\n\n<ng-template\n  #removeAccountGroupFromPayeeBtn\n  let-dataGroup=\"dataGroup\"\n  let-payee=\"payee\"\n  let-dataGroupLength=\"dataGroupLength\"\n  let-icon=\"icon\"\n  let-size=\"size\">\n  <button\n    *ngIf=\"showActions || editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"removedAccountGroupFromPayee(payee, dataGroup)\"\n    [bbTooltip]=\"removeAccountGroupFromPayeeTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove account group from payee\"\n    i18n-aria-label=\"Remove account group from payee@@user-permissions-item.label.remove-account-group-from-payee\"\n    [attr.data-role]=\"'unassign-account-group-from-payee-' + payee.name + dataGroup.name\">\n    <bb-icon-ui *ngIf=\"editView\" [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <ng-template #removeAccountGroupFromPayeeTooltip>\n    <span\n      i18n=\"Remove Account group tooltip text@@user-permissions-item.remove-account-group-from-payee.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removeAccountGroupTooltip>\n  <span i18n=\"Unassign account group tooltip text@@user-permissions-item.remove-account-group.btn.tooltip.text\">\n    Unassign Account group\n  </span>\n</ng-template>\n\n<bb-select-items-modal\n  data-role=\"assign-accounts-modal\"\n  title=\"Assign Account Group(s)\"\n  i18n-title=\"Assign Account Group(s)@@user-permissions-item.select-account-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-account-groups-modal.submit\"\n  searchPlaceholder=\"Search for Account Group(s)\"\n  i18n-searchPlaceholder=\"Search for Account Group(s)@@user-permissions-item.select-account-groups-modal.search\"\n  [(isOpen)]=\"selectAccountGroupsModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availableDataGroups | async)\"\n  (confirm)=\"assignDataGroups($any($event))\"\n  (search)=\"searchAvailableDataGroups($event)\">\n  <ng-template bbSelectItemsItemHeader *ngIf=\"splittedAccountsByType$ | async as splitAcc\">\n    <div class=\"bb-stack\">\n      <div\n        class=\"bb-text-bold bb-stack__item bb-subtitle\"\n        i18n=\"All@@user-permissions-item.select-account-groups-modal.header.column-all\">\n        All\n      </div>\n      <div\n        *ngIf=\"splitAcc?.wizardAccounts?.length && splitAcc?.customAccounts?.length\"\n        data-role=\"account-switcher\"\n        class=\"bb-stack__item bb-stack__item--push-right\">\n        <bb-switch-ui\n          class=\"bb-subtitle\"\n          [labelPosition]=\"'left'\"\n          label=\"Include Quick User Set Up Generated\"\n          i18n-label=\"\n            Include Quick User Set Up Generated@@user-permissions-item.select-account-groups-modal.switch.label\"\n          (change)=\"switchAccounts()\">\n        </bb-switch-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div class=\"bb-stack\">\n      <div [attr.data-role]=\"'data-group-name-' + item.name\" class=\"bb-stack__item\">\n        <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n        <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n      </div>\n      <div class=\"bb-stack__item bb-stack__item--push-right\" *ngIf=\"item.metadata?.generated\">\n        <bb-icon-ui [name]=\"'auto_fix_high'\" data-role=\"generated-account-icon\"></bb-icon-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availableDataGroupsSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Account Groups available\"\n        i18n-title=\"No Account Groups available@@user-permissions-item.select-account-groups-modal.empty.title\"\n        subtitle=\"You can create an account group within the 'Account Groups' section.\"\n        i18n-subtitle=\"\n          You can create an account group within the 'Account Groups'\n          section.@@user-permissions-item.select-account-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availableDataGroupsSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"No search results found@@user-permissions-item.select-account-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different criteria@@user-permissions-item.select-account-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<bb-select-items-modal\n  title=\"Link Account Group(s) to &quot;{{ selectedForAssignAccountGroupForPayee?.name }}&quot; Payee Group\"\n  i18n-title=\"Link Account Group(s)@@user-permissions-item.select-account-linked-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-account-linked-groups-modal.submit\"\n  searchPlaceholder=\"Search\"\n  i18n-searchPlaceholder=\"Search for Account Group(s)@@user-permissions-item.select-account-linked-groups-modal.search\"\n  [(isOpen)]=\"selectAccountGroupsForPayeesModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availableDataGroupsForPayee | async)\"\n  (confirm)=\"assignDataGroupsForPayee($event)\"\n  (search)=\"searchAvailableDataGroupsForPayees($event)\">\n  <ng-template bbSelectItemsItemHeader>\n    <div class=\"bb-text-bold\" i18n=\"All@@user-permissions-item.select-account-linked-groups-modal.header.column-all\">\n      All\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div [attr.data-role]=\"'data-group-name-' + item.name\">\n      <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n      <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availableDataGroupsForPayeesSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Account Groups available\"\n        i18n-title=\"No Account Groups available@@user-permissions-item.select-account-linked-groups-modal.empty.title\"\n        subtitle=\"All account groups assigned to &quot;{{\n          _userPermissions?.name\n        }}&quot; Job Role already linked to &quot;{{ selectedForAssignAccountGroupForPayee?.name }}&quot; payee group.\"\n        i18n-subtitle=\"All already linked.@@user-permissions-item.select-account-linked-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availableDataGroupsForPayeesSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"\n          No search results found@@user-permissions-item.select-account-linked-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different\n          criteria@@user-permissions-item.select-account-linked-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<bb-select-items-modal\n  title=\"Assign Payee Group(s) to &quot;{{ selectedForAssignAccountGroup?.name }}&quot; Account Group\"\n  i18n-title=\"Assign Payee Group(s)@@user-permissions-item.select-payee-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-payee-groups-modal.submit\"\n  searchPlaceholder=\"Search for Payee Group(s)\"\n  i18n-searchPlaceholder=\"Search for Payee Group(s)@@user-permissions-item.select-payee-groups-modal.search\"\n  [(isOpen)]=\"selectPayeeGroupsModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availablePayeeGroups | async)\"\n  (confirm)=\"assignPayeeGroups($event)\"\n  (search)=\"searchAvailablePayeeGroups($event)\">\n  <ng-template bbSelectItemsItemHeader>\n    <div class=\"bb-text-bold\" i18n=\"All@@user-permissions-item.select-payee-groups-modal.header.column-all\">All</div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div [attr.data-role]=\"'data-group-name-' + item.name\">\n      <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n      <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availablePayeeGroupsSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Payee Groups available\"\n        i18n-title=\"No Payee Groups available@@user-permissions-item.select-payee-groups-modal.empty.title\"\n        subtitle=\"You can create a payee group within the 'Payee Groups' section.\"\n        i18n-subtitle=\"\n          You can create a payee group within the 'Payee Groups'\n          section.@@user-permissions-item.select-payee-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availablePayeeGroupsSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"No search results found@@user-permissions-item.select-payee-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different criteria@@user-permissions-item.select-payee-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<ng-template #contactNumberTooltip>\n  <span i18n=\"Number of payee Group@@user-permissions-item.number-of-payee.tooltip.text\">\n    Number of contact in Payee Group.\n  </span>\n</ng-template>\n\n<ng-template #accountNumberTooltip>\n  <span i18n=\"Number of account Group@@user-permissions-item.number-of-account.tooltip.text\">\n    Number of account in Account Group.\n  </span>\n</ng-template>\n", components: [{ type: i1.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i4.FunctionGroupTimeBoundsComponent, selector: "bb-function-group-time-bounds", inputs: ["functionGroup"] }, { type: i5.BusinessFunctionPrivilegesNameComponent, selector: "bb-business-function-privileges-name", inputs: ["hideExecute"] }, { type: i6.PrivilegeIndicatorListComponent, selector: "bb-privilege-indicator-list", inputs: ["businessFunction", "limitData", "userPermission", "functionGroupId"], outputs: ["emitLimitData"] }, { type: i7.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i8.SelfApproveModalComponent, selector: "bb-self-approve-modal", inputs: ["isOpen", "user", "currencyList", "bf", "jobRoleName", "type", "isLimitSupport", "selfApproveItemData"], outputs: ["cancel", "selfApprovalDataEmit"] }, { type: i9.PayeeGroupDetailModalComponent, selector: "bb-payee-group-detail-modal", inputs: ["isOpen", "payeeGroupName", "targetSaId", "payeeIds"], outputs: ["cancel"] }, { type: i10.AccountGroupDetailModalComponent, selector: "bb-account-group-detail-modal", inputs: ["isOpen", "targetSaId", "accountGroupName", "legalEntityIds", "accountIds"], outputs: ["cancel"] }, { type: i11.UnassignDataGroupModalComponent, selector: "bb-unassign-data-group-modal", inputs: ["isOpen", "activeDataGroup", "jobRole", "accountGroupName", "payeeGroupName"], outputs: ["cancel", "confirm"] }, { type: i12.SelectItemsModalComponent, selector: "bb-select-items-modal", inputs: ["isOpen", "title", "items", "allItems", "totalCount", "loading", "loadingMore", "error", "searchEnabled", "selectGroupsEnabled", "searchPlaceholder", "submitLabel", "modalOptions", "itemIdProperty"], outputs: ["confirm", "search", "cancel", "isOpenChange", "loadMore", "loadAllItems"] }, { type: i13.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i14.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i16.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i15.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i15.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i17.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i15.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i18.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i18.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i18.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }, { type: i19.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i12.SelectItemsItemHeaderDirective, selector: "ng-template[bbSelectItemsItemHeader]" }, { type: i12.SelectItemsItemDirective, selector: "ng-template[bbSelectItemsItem]" }, { type: i12.SelectItemsEmptyDirective, selector: "ng-template[bbSelectItemsEmpty]" }], pipes: { "async": i15.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-permissions-item',
                    templateUrl: './user-permissions-item.component.html',
                }]
        }], propDecorators: { businessFunctionTemplate: [{
                type: ContentChild,
                args: [UserPermissionsItemBusinessFunctionDirective]
            }], businessFunctionGroupKeyTemplate: [{
                type: ContentChild,
                args: [UserPermissionsItemBusinessFunctionGroupNameDirective]
            }], user: [{
                type: Input
            }], currencyList: [{
                type: Input
            }], selfApproveDefaultBehavior: [{
                type: Input
            }], showApprovalLevel: [{
                type: Input
            }], approvalLevel: [{
                type: Input
            }], approvalLevelLoading: [{
                type: Input
            }], approvalLevelError: [{
                type: Input
            }], limitData: [{
                type: Input
            }], userLimitsPermission: [{
                type: Input
            }], emitLimitData: [{
                type: Output
            }], userPermissions: [{
                type: Input
            }], dataGroup: [{
                type: Input
            }], payeeGroups: [{
                type: Input
            }], showActions: [{
                type: Input
            }], enableSelfApproval: [{
                type: Input
            }], showPayee: [{
                type: Input
            }], showFunctionGroupType: [{
                type: Input
            }], disableSaveButton: [{
                type: Input
            }], editView: [{
                type: Input
            }], legalEntityId: [{
                type: Input
            }], editedFunctionId: [{
                type: Input
            }], removeFunctionGroup: [{
                type: Output
            }], removeDataGroup: [{
                type: Output
            }], requestObjectEmit: [{
                type: Output
            }], editedFunctionIdEmit: [{
                type: Output
            }], changesMadedEmit: [{
                type: Output
            }] } });
//# sourceMappingURL=user-permissions-item.component.js.map