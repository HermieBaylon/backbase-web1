import { Component, Directive, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { FormControl } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "@backbase/ui-ang/avatar";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "../business-function-name/business-function-name.component";
import * as i5 from "@backbase/ui-ang/dropdown-single-select";
import * as i6 from "@backbase/ui-ang/currency-input";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/button";
import * as i9 from "@angular/forms";
export class SelfApproveModalComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Flag to show modal
         */
        this.isOpen = false;
        this.currencyHistory = '';
        this.amountHistory = '';
        /**
         * Event emitter that emits on cancel button click
         */
        this.cancel = new EventEmitter();
        /**
         * Event emitter that emits data on any action
         */
        this.selfApprovalDataEmit = new EventEmitter();
        /**
         * Amount form
         */
        this.amount = new FormControl({ currency: 'undefined' });
        /**
         * Supported currency list
         */
        this.supportedCurrencies = [];
        /**
         * Currency
         */
        this.currency = '';
        /**
         * Flag if max amount need to be set
         */
        this.isCurrencySet = false;
    }
    /**
     * Currency info
     */
    set currencyList(val) {
        if (val) {
            if (!this.currency) {
                this.currency = val.defaultCurrency;
            }
            this.supportedCurrencies = val.allowedCurrencyList;
        }
    }
    /**
     * SelfApproval item setter
     */
    set selfApproveItemData(val) {
        if (val) {
            this._selfApproveItemData = val;
            if (this._selfApproveItemData.bounds && this._selfApproveItemData.bounds.length) {
                this.isCurrencySet = true;
                // For MVP scope, in future change
                this.currency = this._selfApproveItemData.bounds[0].currencyCode;
                this.currencyHistory = this._selfApproveItemData.bounds[0].currencyCode;
                this.amountHistory = this._selfApproveItemData.bounds[0].amount;
                this.amount.patchValue({
                    amount: this._selfApproveItemData.bounds[0].amount,
                    currency: this._selfApproveItemData.bounds[0].currencyCode,
                });
            }
        }
    }
    /**
     * Emit cancel event
     */
    onCancel() {
        this.cancel.emit();
    }
    /**
     * Emit data on save && enable action
     */
    onSave() {
        let dataForSelfApprove = { businessFunctionName: '', canSelfApprove: false };
        if (this.bf) {
            dataForSelfApprove = { businessFunctionName: this.bf.name, canSelfApprove: true };
        }
        if (this.isCurrencySet && this.amount.value && this.amount.value.amount) {
            dataForSelfApprove.bounds = [];
            dataForSelfApprove.bounds.push({
                currencyCode: this.currency,
                amount: this.amount.value.amount,
            });
        }
        this.selfApprovalDataEmit.emit(dataForSelfApprove);
    }
    /**
     * Emit data on disable action
     */
    onDisabled() {
        let dataForSelfApprove = {};
        if (this.bf) {
            dataForSelfApprove = { businessFunctionName: this.bf.name, canSelfApprove: false };
        }
        this.selfApprovalDataEmit.emit(dataForSelfApprove);
    }
    setForm(state) {
        this.isCurrencySet = state;
        this.amount.patchValue({ currency: 'undefined' });
        this.amount.markAsTouched();
    }
}
/** @nocollapse */ SelfApproveModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelfApproveModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelfApproveModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelfApproveModalComponent, selector: "bb-self-approve-modal", inputs: { isOpen: "isOpen", user: "user", currencyList: "currencyList", bf: "bf", jobRoleName: "jobRoleName", type: "type", isLimitSupport: "isLimitSupport", selfApproveItemData: "selfApproveItemData" }, outputs: { cancel: "cancel", selfApprovalDataEmit: "selfApprovalDataEmit" }, ngImport: i0, template: "<ng-container bbSelfApproveModalCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n\n<ng-template bbSelfApproveModalCustomizable let-hostRef>\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"self-approval-for-user-modal\">\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'enable'\"\n      i18n-title=\"Enable self approval header text@@self-approval-modal.enable.header.text\"\n      title=\"Enable self-approval for user?\"\n      data-role=\"account-modal-enable-header\"></bb-modal-header-ui>\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport\"\n      i18n-title=\"Edit self approval header text@@self-approval-modal.edit.header.text\"\n      title=\"Edit self-approval for user?\"\n      data-role=\"account-modal-edit-header\"></bb-modal-header-ui>\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'edit' && !hostRef.isLimitSupport\"\n      i18n-title=\"Disable self approval header text@@self-approval-modal.disable.header.text\"\n      title=\"Disable self-approval for user?\"\n      data-role=\"account-modal-disable-header\"></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <div *ngIf=\"hostRef.user\" class=\"bb-block bb-block--md\" data-role=\"approval-modal-body\">\n          <div class=\"bb-card bb-card--highlight bb-card--sm\">\n            <div class=\"bb-card__body\">\n              <div class=\"bb-stack bb-stack--density-lg\">\n                <bb-avatar-ui\n                  [name]=\"hostRef.user?.fullName\"\n                  data-role=\"self-approval-avatar\"\n                  size=\"lg\"\n                  class=\"bb-stack__item bb-stack__item--spacing-md\"></bb-avatar-ui>\n                <div class=\"bb-stack__item\">\n                  <h5 class=\"bb-block bb-header bb-text-bold bb-block--xs\" data-role=\"self-approval-header\">\n                    {{ hostRef.user?.fullName }}\n                  </h5>\n                  <div class=\"bb-block bb-header bb-block--xs\">\n                    <span\n                      class=\"bb-subtitle bb-text-support bb-text-bold\"\n                      i18n=\"User external ID label@@self-approval-modal.external.id.label\">\n                      ID:\n                    </span>\n                    <span class=\"bb-subtitle bb-text-support break-word\" data-role=\"self-approval-external-id\">{{\n                      hostRef.user?.externalId\n                    }}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div>\n                <strong i18n=\"Job Role section text@@self-approval-modal.job-role.section.text\"> Job role </strong>\n              </div>\n              <div class=\"bb-inline-stack\">\n                <bb-icon-ui class=\"bb-inline-stack__item bb-text-bold\" name=\"users\" size=\"md\"></bb-icon-ui>\n                <span class=\"bb-inline-stack__item\" data-role=\"self-approval-job-role-name\">\n                  {{ hostRef.jobRoleName }}\n                </span>\n              </div>\n            </div>\n            <div class=\"col-6\">\n              <div>\n                <strong i18n=\"Business Function section text@@self-approval-modal.bf.section.text\">\n                  Business Function\n                </strong>\n              </div>\n              <div>\n                <bb-business-function-name [businessFunction]=\"hostRef.bf\"></bb-business-function-name>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          class=\"bb-block bb-block--md\"\n          *ngIf=\"hostRef.isLimitSupport && hostRef.supportedCurrencies.length\"\n          data-role=\"limit-support-block\">\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-inline-stack\">\n              <strong\n                class=\"bb-inline-stack__item\"\n                i18n=\"Info label for max amount for self approve@@self-approval-modal.max-amount.section.text\">\n                Max amount for self-approve\n              </strong>\n            </div>\n          </div>\n          <div\n            class=\"bb-block bb-block--md\"\n            *ngIf=\"!hostRef.selfApproveItemData && !hostRef.isCurrencySet\"\n            data-role=\"no-currency-set-item-data-block\">\n            <button\n              bbButton\n              color=\"link-text\"\n              buttonSize=\"sm\"\n              data-role=\"currency-set-button\"\n              (click)=\"hostRef.setForm(true)\">\n              <bb-icon-ui name=\"add-outline\" [size]=\"'sm'\" cropped></bb-icon-ui>\n              <span i18n=\"Set max amount button text@@self-approval-modal.max-amount.button.text\">Set max amount</span>\n            </button>\n          </div>\n          <div class=\"bb-stack\" *ngIf=\"hostRef.isCurrencySet\" data-role=\"is-currency-set-block\">\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <div class=\"row\">\n                <div class=\"col-3\" *ngIf=\"hostRef.supportedCurrencies.length\" data-role=\"supported-currencies-block\">\n                  <bb-dropdown-single-select-ui\n                    label=\"Currency\"\n                    i18n-label=\"\n                      Label text for currency amount for self approve@@self-approval-modal.currency.amount.integerLabel\"\n                    [options]=\"hostRef.supportedCurrencies\"\n                    [required]=\"true\"\n                    [(ngModel)]=\"hostRef.currency\"\n                    class=\"d-block bb-block bb-block--lg\">\n                  </bb-dropdown-single-select-ui>\n                </div>\n\n                <div class=\"col\">\n                  <bb-currency-input-ui\n                    i18n-integerLabel=\"\n                      Label text for to amount for self approve@@self-approval-modal.to.amount.integerLabel\"\n                    integerLabel=\"To(including)\"\n                    [integer]=\"true\"\n                    resultType=\"number\"\n                    [formControl]=\"hostRef.amount\"\n                    placeholder=\"\"></bb-currency-input-ui>\n                </div>\n              </div>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--push-right align-self-center\">\n              <button\n                bbButton\n                color=\"link-text\"\n                [circle]=\"true\"\n                buttonSize=\"md\"\n                (click)=\"hostRef.setForm(false)\"\n                data-role=\"close-currency-block-button\">\n                <bb-icon-ui name=\"delete\"></bb-icon-ui>\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <ng-container *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport; else disabledButton\"></ng-container>\n          <button\n            *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport\"\n            bbButton\n            color=\"primary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onSave()\"\n            data-role=\"edit-type-save-btn\"\n            [disabled]=\"\n              (hostRef.currencyHistory === hostRef.currency && hostRef.amountHistory === hostRef.amount.value.amount) ||\n              (!hostRef.amount.value.amount && hostRef.isCurrencySet) ||\n              (!hostRef.isCurrencySet && !hostRef.currencyHistory && !hostRef.amountHistory)\n            \"\n            i18n=\"Save button text for self approve@self-approval-modal.save-btn.text\">\n            Save\n          </button>\n          <button\n            *ngIf=\"hostRef.type === 'enable'\"\n            bbButton\n            color=\"primary\"\n            class=\"bb-button-bar__button\"\n            data-role=\"enable-type-save-btn\"\n            (click)=\"hostRef.onSave()\"\n            i18n=\"Enable button text for self approve@self-approval-modal.enable-btn.text\">\n            Enable\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            data-role=\"cancel-btn\"\n            i18n=\"Cancel button text for self approve@self-approval-modal.cancel-btn.text\">\n            Cancel\n          </button>\n\n          <ng-container *ngIf=\"hostRef.type === 'edit' && !hostRef.isLimitSupport; else disabledButton\"></ng-container>\n\n          <ng-template #disabledButton>\n            <button\n              *ngIf=\"hostRef.type === 'edit'\"\n              bbButton\n              color=\"danger\"\n              class=\"bb-button-bar__button bb-button-bar__button--across\"\n              (click)=\"hostRef.onDisabled()\"\n              data-role=\"edit-type-disable-btn\"\n              i18n=\"Disable button text for self approve@self-approval-modal.disable-btn.text\">\n              Disable\n            </button>\n          </ng-template>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i2.AvatarComponent; }), selector: "bb-avatar-ui", inputs: ["image", "name", "imgAlt", "size"] }, { type: i0.forwardRef(function () { return i3.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i4.BusinessFunctionNameComponent; }), selector: "bb-business-function-name", inputs: ["businessFunction"] }, { type: i0.forwardRef(function () { return i5.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i6.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0.forwardRef(function () { return i1.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return SelfApproveModalCustomizableDirective; }), selector: "[bbSelfApproveModalCustomizable]" }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i8.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i9.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i9.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i9.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0.forwardRef(function () { return i9.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelfApproveModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-self-approve-modal',
                    templateUrl: './self-approve-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], user: [{
                type: Input
            }], currencyList: [{
                type: Input
            }], bf: [{
                type: Input
            }], jobRoleName: [{
                type: Input
            }], type: [{
                type: Input
            }], isLimitSupport: [{
                type: Input
            }], selfApproveItemData: [{
                type: Input
            }], cancel: [{
                type: Output
            }], selfApprovalDataEmit: [{
                type: Output
            }] } });
export class SelfApproveModalCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelfApproveModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelfApproveModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelfApproveModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelfApproveModalCustomizableDirective, selector: "[bbSelfApproveModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelfApproveModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelfApproveModalCustomizable]',
                }]
        }] });
//# sourceMappingURL=self-approve-modal.component.js.map