import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../privilege-indicator/privilege-indicator.component";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/ui-ang/button";
import * as i5 from "@backbase/ui-ang/tooltip-directive";
import * as i6 from "@backbase/ui-ang/keyboard-click-directive";
export class PrivilegeIndicatorListComponent {
    constructor() {
        /**
         * Business Function to check privileges against
         */
        this.emitLimitData = new EventEmitter();
    }
    /**
     * Check whether limit is allowed for specific privilege
     */
    showLimit(privilege) {
        var _a, _b, _c, _d;
        // @ts-ignore
        const fgKey = this.functionGroupId + ((_a = this.businessFunction) === null || _a === void 0 ? void 0 : _a.functionId) + privilege;
        return (this.limitData &&
            (this.limitData[((_b = this.businessFunction) === null || _b === void 0 ? void 0 : _b.functionId) + privilege] || this.limitData[fgKey]) &&
            ((_c = this.businessFunction) === null || _c === void 0 ? void 0 : _c.privileges[privilege].assigned) &&
            ((_d = this.businessFunction) === null || _d === void 0 ? void 0 : _d.privileges[privilege].applicable));
    }
    /**
     * Get limit context object
     */
    getLimitContext(privilege) {
        var _a, _b, _c;
        return {
            limit: this.functionGroupId
                ? this.limitData[this.functionGroupId + ((_a = this.businessFunction) === null || _a === void 0 ? void 0 : _a.functionId) + privilege]
                : this.limitData[((_b = this.businessFunction) === null || _b === void 0 ? void 0 : _b.functionId) + privilege],
            id: (_c = this.businessFunction) === null || _c === void 0 ? void 0 : _c.functionId,
            type: privilege,
        };
    }
    /**
     * Emit limit data
     */
    emitLimit(emitData) {
        if (this.functionGroupId) {
            this.emitLimitData.emit(Object.assign(Object.assign({}, emitData), { functionGroupId: this.functionGroupId }));
        }
        else {
            this.emitLimitData.emit(emitData);
        }
    }
    /**
     * Track when control has no amount and no limits button should be shown
     */
    isLimitBoundsEmpty(limitData) {
        const limitBounds = limitData.limitBounds;
        return limitBounds === null || limitBounds === void 0 ? void 0 : limitBounds.every(bound => { var _a, _b; return !((_a = bound.regular) === null || _a === void 0 ? void 0 : _a.amount) && !((_b = bound.shadow) === null || _b === void 0 ? void 0 : _b.amount); });
    }
}
/** @nocollapse */ PrivilegeIndicatorListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PrivilegeIndicatorListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PrivilegeIndicatorListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PrivilegeIndicatorListComponent, selector: "bb-privilege-indicator-list", inputs: { businessFunction: "businessFunction", limitData: "limitData", userPermission: "userPermission", functionGroupId: "functionGroupId" }, outputs: { emitLimitData: "emitLimitData" }, ngImport: i0, template: "<ng-container *ngIf=\"businessFunction\">\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-execute-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Execute privilege\"\n      i18n-aria-label=\"Execute privilege@@privilege-indicator-list.label.privilege.aria.execute\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-execute'\"\n      [applicable]=\"businessFunction.privileges.execute.applicable\"\n      [assigned]=\"businessFunction.privileges.execute.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('execute')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('execute')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-view-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"View privilege\"\n      i18n-aria-label=\"View privilege@@privilege-indicator-list.label.privilege.aria.view\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-view'\"\n      [applicable]=\"businessFunction.privileges.view.applicable\"\n      [assigned]=\"businessFunction.privileges.view.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('view')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('view')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-create-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Create privilege\"\n      i18n-aria-label=\"Create privilege@@privilege-indicator-list.label.privilege.aria.create\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-create'\"\n      [applicable]=\"businessFunction.privileges.create.applicable\"\n      [assigned]=\"businessFunction.privileges.create.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('create')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('create')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-edit-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Edit privilege\"\n      i18n-aria-label=\"Edit privilege@@privilege-indicator-list.label.privilege.aria.edit\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-edit'\"\n      [applicable]=\"businessFunction.privileges.edit.applicable\"\n      [assigned]=\"businessFunction.privileges.edit.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('edit')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('edit')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-delete-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Delete privilege\"\n      i18n-aria-label=\"Delete privilege@@privilege-indicator-list.label.privilege.aria.delete\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-delete'\"\n      [applicable]=\"businessFunction.privileges.delete.applicable\"\n      [assigned]=\"businessFunction.privileges.delete.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('delete')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('delete')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-cancel-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Cancel privilege\"\n      i18n-aria-label=\"Cancel privilege@@privilege-indicator-list.label.privilege.aria.cancel\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-cancel'\"\n      [applicable]=\"businessFunction.privileges.cancel.applicable\"\n      [assigned]=\"businessFunction.privileges.cancel.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('cancel')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('cancel')\">\n    </ng-container>\n  </span>\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-approve-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Approve privilege\"\n      i18n-aria-label=\"Approve privilege@@privilege-indicator-list.label.privilege.aria.approve\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-approve'\"\n      [applicable]=\"businessFunction.privileges.approve.applicable\"\n      [assigned]=\"businessFunction.privileges.approve.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('approve')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('approve')\">\n    </ng-container>\n  </span>\n</ng-container>\n\n<ng-template #limitTemplate let-limit=\"limit\" let-type=\"type\" let-id=\"id\">\n  <button\n    data-role=\"privilege-indicator-list-limit-create\"\n    bbButton\n    aria-label=\"Create Limit\"\n    i18n-aria-label=\"Create limit button@@privilege-indicator-list.limit.aria.label.create-limit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    color=\"link-text-light\"\n    bbTooltip=\"Click to set limit\"\n    container=\"body\"\n    i18n-bbTooltip=\"Set limit button tooltip@@privilege-indicator-list.limit.set-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'create', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"!limit?.created && (userPermission.regularLimit.create || userPermission.shadowLimit.create)\">\n    <bb-icon-ui name=\"control-point\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-edit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    aria-label=\"Edit Limit\"\n    i18n-aria-label=\"Edit limit button@@privilege-indicator-list.limit.aria.label.edit-limit\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Click to edit limit\"\n    i18n-bbTooltip=\"Edit limit button tooltip@@privilege-indicator-list.limit.edit-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'edit', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"\n      limit?.created &&\n      (userPermission.regularLimit.edit || userPermission.shadowLimit.edit) &&\n      !limit?.pending &&\n      !isLimitBoundsEmpty(limit)\n    \">\n    <bb-icon-ui name=\"create\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-create-empty\"\n    class=\"align-top bb-job-role-limit-icon\"\n    aria-label=\"Create Limit\"\n    i18n-aria-label=\"Create limit button@@privilege-indicator-list.limit.aria.label.create-empty-limit\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Click to set limit\"\n    i18n-bbTooltip=\"Set limit button tooltip@@privilege-indicator-list.limit.create-empty-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'edit', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"\n      limit?.created &&\n      (userPermission.regularLimit.edit || userPermission.shadowLimit.edit) &&\n      !limit?.pending &&\n      isLimitBoundsEmpty(limit)\n    \">\n    <bb-icon-ui name=\"control-point\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-pending\"\n    aria-label=\"Pending Limit\"\n    i18n-aria-label=\"Pending limit button@@privilege-indicator-list.limit.aria.label.pending-limit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Limit awaiting approval\"\n    i18n-bbTooltip=\"Pending view limit button tooltip@@privilege-indicator-list.limit.pending-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'view', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"limit?.pending\">\n    <bb-icon-ui name=\"access-time\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-view\"\n    aria-label=\"View Limit\"\n    i18n-aria-label=\"View limit button@@privilege-indicator-list.limit.aria.label.view-limit\"\n    *ngIf=\"\n      limit?.created &&\n      !userPermission.regularLimit.edit &&\n      !userPermission.shadowLimit.edit &&\n      !limit?.pending &&\n      (userPermission.regularLimit.view || userPermission.shadowLimit.view)\n    \"\n    class=\"align-top bb-job-role-limit-icon\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'view', limit: limit, privilegesType: type, id: id })\"\n    color=\"link-text-light\"\n    bbTooltip=\"Click to view limit\"\n    i18n-bbTooltip=\"View limit button tooltip@@privilege-indicator-list.limit.view-limit.tooltip\"\n    triggers=\"hover\"\n    container=\"body\"\n    bbButton>\n    <bb-icon-ui name=\"remove-red-eye\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n</ng-template>\n", components: [{ type: i1.PrivilegeIndicatorComponent, selector: "bb-privilege-indicator", inputs: ["applicable", "assigned", "iconClass", "color"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i6.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PrivilegeIndicatorListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-privilege-indicator-list',
                    templateUrl: './privilege-indicator-list.component.html',
                }]
        }], propDecorators: { businessFunction: [{
                type: Input
            }], limitData: [{
                type: Input
            }], userPermission: [{
                type: Input
            }], functionGroupId: [{
                type: Input
            }], emitLimitData: [{
                type: Output
            }] } });
//# sourceMappingURL=privilege-indicator-list.component.js.map