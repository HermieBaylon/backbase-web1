import { ChangeDetectionStrategy, Component, ContentChild, Directive, EventEmitter, Input, Output, TemplateRef, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "@backbase/ui-ang/infinite-scroll";
import * as i3 from "@backbase/ui-ang/input-checkbox";
import * as i4 from "@backbase/ui-ang/loading-indicator";
import * as i5 from "@backbase/ui-ang/empty-state";
import * as i6 from "@backbase/ui-ang/search-box";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "@backbase/ui-ang/button";
export class SelectItemsSearchDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsSearchDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsSearchDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsSearchDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsSearchDirective, selector: "ng-template[bbSelectItemsSearch]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsSearchDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsSearch]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class SelectItemsItemHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsItemHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsItemHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsItemHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsItemHeaderDirective, selector: "ng-template[bbSelectItemsItemHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsItemHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsItemHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class SelectItemsItemDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsItemDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsItemDirective, selector: "ng-template[bbSelectItemsItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsItemDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsItem]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class SelectItemsLoadingDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsLoadingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsLoadingDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsLoadingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsLoadingDirective, selector: "ng-template[bbSelectItemsLoading]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsLoadingDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsLoading]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class SelectItemsErrorDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsErrorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsErrorDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsErrorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsErrorDirective, selector: "ng-template[bbSelectItemsError]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsErrorDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsError]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class SelectItemsEmptyDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsEmptyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsEmptyDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsEmptyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsEmptyDirective, selector: "ng-template[bbSelectItemsEmpty]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsEmptyDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsEmpty]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class SelectItemsModalComponent {
    constructor() {
        this.loadingTemplate = null;
        this.errorTemplate = null;
        this.emptyTemplate = null;
        this.selectedItems = new Map();
        this._allItems = [];
        this._items = [];
        this._isOpen = false;
        this.searchValue = '';
        /**
         * Modal heading
         */
        this.title = '';
        /**
         * Number of items
         */
        this.totalCount = 0;
        /**
         * Loading flag
         */
        this.loading = false;
        /**
         * Loading flag when loading more
         */
        this.loadingMore = false;
        /**
         * Error flag
         */
        this.error = false;
        /**
         * Should the search box be shown
         */
        this.searchEnabled = false;
        /**
         * Indicates button group separation for selection
         */
        this.selectGroupsEnabled = false;
        /**
         * Placeholder for search box
         */
        this.searchPlaceholder = '';
        /**
         * Label for the submit button
         */
        this.submitLabel = '';
        /**
         * Dialog options. Defaults to empty object.
         */
        this.modalOptions = {};
        /**
         * Unique identifier for the items
         */
        this.itemIdProperty = 'id';
        /**
         * Event emitter that emits on confirm
         * The event contains a list of the items that were selected
         */
        this.confirm = new EventEmitter();
        /**
         * Event emitter that emits a search string
         */
        this.search = new EventEmitter();
        /**
         * Event emitter that emits when canceling the selection
         */
        this.cancel = new EventEmitter();
        /**
         * Event emitter which emits on modal close
         */
        this.isOpenChange = new EventEmitter();
        /**
         * Event emitter which emits when end of list is reached
         */
        this.loadMore = new EventEmitter();
        /**
         * Event emitter which emits when all items should be loaded
         */
        this.loadAllItems = new EventEmitter();
        this.allSelected = false;
        this.someSelected = false;
    }
    set isOpen(value) {
        this._isOpen = value;
        this.selectedItems.clear();
        this.searchValue = '';
        this.allSelected = false;
        this.someSelected = false;
    }
    /**
     * List of items to select from
     */
    set items(items) {
        this._items = items;
        this.updateSelectFlags();
    }
    /**
     * List of all available items (to manage toggleAll over not loaded items)
     * @param items
     */
    set allItems(items) {
        if (items) {
            this._allItems = items;
            this.toggleSelection(items, this.areAllItemsSelected(items));
        }
    }
    // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
    get isOpen() {
        return this._isOpen;
    }
    // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
    get items() {
        return this._items;
    }
    get selectedItemsLength() {
        return this.selectedItems.size;
    }
    /**
     * Case when totalCount > 0 indicates that we have paginated API
     *
     * TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
     */
    get areAllScrollableItemsLoaded() {
        return this.totalCount === 0 || (this._items && this._items.length === this.totalCount);
    }
    ngAfterContentInit() {
        if (!this.itemHeaderTemplate || !this.itemTemplate) {
            throw new Error('itemHeaderTemplate and itemTemplate are mandatory');
        }
    }
    isItemSelected(item) {
        return this.selectedItems.has(item[this.itemIdProperty]);
    }
    toggleOpen(event) {
        this.isOpenChange.emit(event);
    }
    onToggleAll(event) {
        event.preventDefault();
        // this.loadAndToggleAll.observers.length === 0 will keep backwards compatibility
        if (this.areAllScrollableItemsLoaded || this.loadAllItems.observers.length === 0) {
            this.toggleSelection(this._items, this.allSelected);
        }
        else {
            this.checkForAllLoadedItems();
        }
    }
    onToggleItem(event, item) {
        event.preventDefault();
        this.toggleSelection([item], this.selectedItems.has(item[this.itemIdProperty]));
    }
    onLastFocused() {
        if (!this.areAllScrollableItemsLoaded) {
            this.onLoadMore();
        }
    }
    onCancel() {
        this.isOpenChange.emit(false);
    }
    onSubmit() {
        this.confirm.emit(Array.from(this.selectedItems.values()));
        this.isOpenChange.emit(false);
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    onSearch(query) {
        if (typeof query === 'string') {
            this.search.emit(query);
            this._allItems = [];
        }
    }
    onLoadMore() {
        this.loadMore.emit();
    }
    trackByItemProp(_index, item) {
        return item[this.itemIdProperty];
    }
    checkForAllLoadedItems() {
        // checking if we already loaded all items
        if (this._allItems.length === this.totalCount) {
            this.toggleSelection(this._allItems, this.areAllItemsSelected(this._allItems));
        }
        else {
            this.loadAllItems.emit();
        }
    }
    toggleSelection(items, allSelected) {
        if (allSelected) {
            items.forEach(item => this.selectedItems.delete(item[this.itemIdProperty]));
        }
        else {
            items.forEach(item => this.selectedItems.set(item[this.itemIdProperty], item));
        }
        this.updateSelectFlags();
    }
    // TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
    updateSelectFlags() {
        this.allSelected = this.areAllItemsSelected(this._items);
        this.someSelected =
            !this.allSelected && this._items && this._items.some(item => this.selectedItems.has(item[this.itemIdProperty]));
    }
    // TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
    areAllItemsSelected(items) {
        return Boolean(items && items.every(item => this.selectedItems.has(item[this.itemIdProperty])));
    }
}
/** @nocollapse */ SelectItemsModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectItemsModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsModalComponent, selector: "bb-select-items-modal", inputs: { isOpen: "isOpen", title: "title", items: "items", allItems: "allItems", totalCount: "totalCount", loading: "loading", loadingMore: "loadingMore", error: "error", searchEnabled: "searchEnabled", selectGroupsEnabled: "selectGroupsEnabled", searchPlaceholder: "searchPlaceholder", submitLabel: "submitLabel", modalOptions: "modalOptions", itemIdProperty: "itemIdProperty" }, outputs: { confirm: "confirm", search: "search", cancel: "cancel", isOpenChange: "isOpenChange", loadMore: "loadMore", loadAllItems: "loadAllItems" }, queries: [{ propertyName: "searchTemplate", first: true, predicate: SelectItemsSearchDirective, descendants: true }, { propertyName: "itemHeaderTemplate", first: true, predicate: SelectItemsItemHeaderDirective, descendants: true }, { propertyName: "itemTemplate", first: true, predicate: SelectItemsItemDirective, descendants: true }, { propertyName: "loadingTemplate", first: true, predicate: SelectItemsLoadingDirective, descendants: true }, { propertyName: "errorTemplate", first: true, predicate: SelectItemsErrorDirective, descendants: true }, { propertyName: "emptyTemplate", first: true, predicate: SelectItemsEmptyDirective, descendants: true }], ngImport: i0, template: "<bb-modal-ui\n  data-role=\"select-items-modal\"\n  *ngIf=\"isOpen\"\n  [isOpen]=\"true\"\n  [modalOptions]=\"modalOptions\"\n  (isOpenChange)=\"toggleOpen($event)\">\n  <bb-modal-header-ui data-role=\"select-items-modal__header-label\" [title]=\"title\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-select-items bb-outline-spacer bb-outline-spacer--all\">\n        <ng-container *ngIf=\"searchEnabled\">\n          <ng-container *ngTemplateOutlet=\"searchTpl\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!error; else errorTpl\">\n          <ng-container *ngIf=\"!loading; else loadingTpl\">\n            <ng-container *ngIf=\"items?.length! > 0; else emptyTpl\">\n              <bb-infinite-scroll-ui\n                class=\"bb-infinite-scroll bb-outline-spacer bb-outline-spacer--left\"\n                data-role=\"select-items-modal__infinite-scroll\"\n                [offset]=\"5\"\n                [disableScrollEnd]=\"areAllScrollableItemsLoaded\"\n                (scrollEnd)=\"onLoadMore()\">\n                <div class=\"bb-list bb-list--density-sm\">\n                  <div\n                    class=\"\n                      sticky-top\n                      position-sticky\n                      bb-select-items__sticky-header-top\n                      bb-outline-spacer bb-outline-spacer--left\n                    \">\n                    <div class=\"bb-list__item\">\n                      <ng-container *ngIf=\"itemHeaderTemplate\">\n                        <div\n                          class=\"bb-stack bb-stack--density-sm bb_block bb-block--sm\"\n                          data-role=\"select-items-modal__items-header\">\n                          <div\n                            class=\"bb-stack__item\"\n                            data-role=\"select-items-modal__toggle-all\"\n                            (click)=\"onToggleAll($event)\"\n                            (keyup.space)=\"onToggleAll($event)\">\n                            <bb-input-checkbox-ui\n                              label=\"&nbsp;\"\n                              aria-label=\"Checkbox value to toggle all items\"\n                              i18n-aria-label=\"\n                                Checkbox value to toggle all items@@select-items-modal.label.aria.checkbox-for-all\"\n                              [ngModel]=\"allSelected\"\n                              [indeterminate]=\"someSelected\"></bb-input-checkbox-ui>\n                          </div>\n                          <div\n                            class=\"bb-stack__item bb-stack__item--fill\"\n                            data-role=\"select-items-modal__items-header-template\">\n                            <ng-container *ngTemplateOutlet=\"itemHeaderTemplate!.templateRef\"> </ng-container>\n                          </div>\n                        </div>\n                      </ng-container>\n                    </div>\n                    <!-- this div needed for border in bb-list__item above -->\n                    <div></div>\n                  </div>\n                  <div *ngIf=\"itemTemplate\" data-role=\"select-items-modal__list\" role=\"list\">\n                    <div\n                      *ngFor=\"let item of items; let last = last; trackBy: trackByItemProp\"\n                      class=\"bb-list__item\"\n                      (click)=\"onToggleItem($event, item)\"\n                      (keyup.space)=\"onToggleItem($event, item)\"\n                      data-role=\"select-items-modal__list-item\"\n                      role=\"listitem\">\n                      <div class=\"bb-stack bb-stack--density-sm\" role=\"button\">\n                        <bb-input-checkbox-ui\n                          label=\"&nbsp;\"\n                          aria-label=\"Checkbox value for the next item\"\n                          i18n-aria-label=\"\n                            Checkbox value for the next item@@select-items-modal.label.aria.checkbox-for-item\"\n                          [ngModel]=\"isItemSelected(item)\"\n                          (focus)=\"last && onLastFocused()\"\n                          class=\"bb-stack__item\"></bb-input-checkbox-ui>\n                        <div\n                          class=\"bb-stack__item bb-stack__item--fill\"\n                          data-role=\"select-items-modal__list-item-template\">\n                          <ng-container\n                            *ngTemplateOutlet=\"\n                              itemTemplate!.templateRef;\n                              context: {\n                                item: item,\n                                isSelected: isItemSelected(item),\n                                toggleItem: onToggleItem.bind(this)\n                              }\n                            \">\n                          </ng-container>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div\n                  *ngIf=\"!areAllScrollableItemsLoaded\"\n                  [class.invisible]=\"!loadingMore\"\n                  class=\"bb-block bb-block--sm\"\n                  data-role=\"select-items-modal__list-load-more-spinner\">\n                  <bb-loading-indicator-ui loaderSize=\"sm\"></bb-loading-indicator-ui>\n                </div>\n              </bb-infinite-scroll-ui>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          class=\"bb-button-bar__button\"\n          data-role=\"select-items-modal__add-btn\"\n          bbButton\n          (click)=\"onSubmit()\"\n          [disabled]=\"selectedItemsLength === 0\">\n          <ng-container *ngIf=\"!submitLabel; else submitLabelRef\" i18n=\"Submit@@select-items-modal.label.button.submit\"\n            >Submit</ng-container\n          >\n          <span data-role=\"select-items-modal__number-of-selected-items\" *ngIf=\"selectedItemsLength\"\n            >&nbsp;({{ selectedItemsLength }})</span\n          >\n          <ng-template #submitLabelRef>{{ submitLabel }}</ng-template>\n        </button>\n        <button\n          class=\"bb-button-bar__button\"\n          bbButton\n          (click)=\"onCancel()\"\n          color=\"secondary\"\n          i18n=\"Cancel@@select-items-modal.label.button.cancel\"\n          data-role=\"select-items-modal__cancel-btn\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<ng-template #errorTpl>\n  <ng-container *ngIf=\"errorTemplate; else defaultErrorTemplate\">\n    <ng-container *ngTemplateOutlet=\"errorTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultErrorTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__error-state\">\n      <bb-empty-state-ui\n        iconModifier=\"error\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"\n        title=\"Unknown error\"\n        i18n-title=\"Unknown error@@select-items-modal.label.fallback.error.title\"\n        subtitle=\"Please try again later\"\n        i18n-subtitle=\"Please try again later@@select-items-modal.label.fallback.error.message\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #searchTpl>\n  <ng-container *ngIf=\"searchTemplate; else defaultSearchTemplate\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        searchTemplate!.templateRef;\n        context: {\n          searchPlaceholder: searchPlaceholder,\n          searchValue: searchValue,\n          onSearch: onSearch.bind(this)\n        }\n      \">\n    </ng-container>\n  </ng-container>\n\n  <ng-template #defaultSearchTemplate>\n    <div class=\"bb-block bb-block--sm\">\n      <bb-search-box-ui\n        data-role=\"select-items-modal__search\"\n        class=\"bb-select-items__search-box\"\n        [aria-label]=\"searchPlaceholder\"\n        [showClear]=\"true\"\n        [showSearch]=\"true\"\n        [(ngModel)]=\"searchValue\"\n        [placeholder]=\"searchPlaceholder\"\n        (submit)=\"onSearch($event)\"\n        (clear)=\"onSearch('')\"></bb-search-box-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #loadingTpl>\n  <ng-container *ngIf=\"loadingTemplate; else defaultLoadingTemplate\">\n    <ng-container *ngTemplateOutlet=\"loadingTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultLoadingTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__loading-state\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #emptyTpl>\n  <ng-container *ngIf=\"emptyTemplate; else defaultEmptyTemplate\">\n    <ng-container *ngTemplateOutlet=\"emptyTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultEmptyTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__empty-state\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        title=\"No items\"\n        i18n-title=\"No items@@select-items-modal.label.fallback.empty.title\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i3.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i4.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i6.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-items-modal',
                    templateUrl: './select-items-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { searchTemplate: [{
                type: ContentChild,
                args: [SelectItemsSearchDirective]
            }], itemHeaderTemplate: [{
                type: ContentChild,
                args: [SelectItemsItemHeaderDirective]
            }], itemTemplate: [{
                type: ContentChild,
                args: [SelectItemsItemDirective]
            }], loadingTemplate: [{
                type: ContentChild,
                args: [SelectItemsLoadingDirective]
            }], errorTemplate: [{
                type: ContentChild,
                args: [SelectItemsErrorDirective]
            }], emptyTemplate: [{
                type: ContentChild,
                args: [SelectItemsEmptyDirective]
            }], isOpen: [{
                type: Input
            }], title: [{
                type: Input
            }], items: [{
                type: Input
            }], allItems: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], loading: [{
                type: Input
            }], loadingMore: [{
                type: Input
            }], error: [{
                type: Input
            }], searchEnabled: [{
                type: Input
            }], selectGroupsEnabled: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], submitLabel: [{
                type: Input
            }], modalOptions: [{
                type: Input
            }], itemIdProperty: [{
                type: Input
            }], confirm: [{
                type: Output
            }], search: [{
                type: Output
            }], cancel: [{
                type: Output
            }], isOpenChange: [{
                type: Output
            }], loadMore: [{
                type: Output
            }], loadAllItems: [{
                type: Output
            }] } });
//# sourceMappingURL=select-items-modal.component.js.map