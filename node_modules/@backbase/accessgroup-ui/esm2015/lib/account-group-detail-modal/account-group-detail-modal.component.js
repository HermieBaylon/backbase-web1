import { Component, Directive, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest, merge, of, ReplaySubject } from 'rxjs';
import { auditTime, catchError, map, mapTo, shareReplay, switchMap } from 'rxjs/operators';
import { getRouteParams, UserPermissionsDataGroupDetailsService, } from '@backbase/accessgroup-common-ang';
import { ActivatedRoute } from '@angular/router';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/accessgroup-common-ang";
import * as i2 from "@angular/router";
import * as i3 from "@backbase/ui-ang/modal";
import * as i4 from "@backbase/ui-ang/search-box";
import * as i5 from "@backbase/ui-ang/pagination";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "@backbase/ui-ang/empty-state";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
const ACCOUNT_GROUP_DETAILS_ERROR = 'ACCOUNT_GROUP_DETAILS_ERROR';
export class AccountGroupDetailModalComponent {
    constructor(dataGroupDetailsService, activeRoute) {
        this.dataGroupDetailsService = dataGroupDetailsService;
        this.activeRoute = activeRoute;
        /**
         * Component context
         */
        this.hostRef = this;
        this.itemsPerPage = 10;
        /**
         * Flag to show modal
         */
        this.isOpen = false;
        this.targetSaId = '';
        /**
         * Account group name
         */
        this.accountGroupName = '';
        this.legalEntityIds = [];
        /**
         * Event emitter that emits on cancel button click
         */
        this.cancel = new EventEmitter();
        this.serviceAgreement$ = getRouteParams(this.activeRoute, 'serviceAgreementId').pipe(switchMap((id) => {
            let idSa = id;
            if (this.targetSaId && !id) {
                idSa = this.targetSaId;
            }
            return idSa
                ? this.dataGroupDetailsService.getServiceAgreement(idSa)
                : this.dataGroupDetailsService.serviceAgreementFromContext;
        }), shareReplay(1));
        this.selectedAccountGroupAccountsCurrentPageSubject = new BehaviorSubject(0);
        this.selectedAccountGroupAccountsCurrentPage$ = this.selectedAccountGroupAccountsCurrentPageSubject.asObservable();
        this.selectedAccountGroupAccountsSearchQuerySubject = new BehaviorSubject('');
        this.selectedAccountGroupAccountsSearchQuery$ = this.selectedAccountGroupAccountsSearchQuerySubject.asObservable();
        this.selectedAccountGroupSubject = new ReplaySubject();
        this.selectedAccountGroup$ = this.selectedAccountGroupSubject.asObservable();
        this.selectedAccountGroupDetails$ = combineLatest([
            this.selectedAccountGroup$,
            this.selectedAccountGroupAccountsCurrentPage$,
            this.selectedAccountGroupAccountsSearchQuery$,
            this.serviceAgreement$,
        ]).pipe(auditTime(100), switchMap(([items, from, searchQuery, serviceAgreement]) => {
            let legalEntityIds = this.legalEntityIds;
            if (serviceAgreement.participants) {
                legalEntityIds = [];
                serviceAgreement.participants.forEach((el) => {
                    if (el.sharingAccounts) {
                        legalEntityIds.push(el.id);
                    }
                });
            }
            if (items.length) {
                return this.dataGroupDetailsService
                    .getAccountGroupItems({
                    items: items,
                    from: from,
                    size: this.itemsPerPage,
                    searchTerm: searchQuery,
                    legalEntityIds: legalEntityIds,
                })
                    .pipe(map(accounts => ({
                    data: accounts.items,
                    totalCount: accounts.totalCount,
                })), catchError(() => {
                    return of(ACCOUNT_GROUP_DETAILS_ERROR);
                }));
            }
            return of();
        }), shareReplay(1));
        this.selectedAccountGroupError$ = this.selectedAccountGroupDetails$.pipe(map((data) => data === ACCOUNT_GROUP_DETAILS_ERROR));
        this.loadingSelectedAccount$ = merge(this.selectedAccountGroupSubject.pipe(mapTo(true)), this.selectedAccountGroupAccountsCurrentPageSubject.pipe(mapTo(true)), this.selectedAccountGroupAccountsSearchQuerySubject.pipe(mapTo(true)), this.selectedAccountGroupDetails$.pipe(mapTo(false)));
    }
    /**
     * Setter for account Ids
     */
    set accountIds(val) {
        if (val) {
            this.selectedAccountGroupSubject.next(val);
            this.selectedAccountGroupAccountsCurrentPageSubject.next(0);
            this.selectedAccountGroupAccountsSearchQuerySubject.next('');
        }
    }
    onCancel() {
        this.cancel.emit();
    }
    pageChange(page) {
        this.selectedAccountGroupAccountsCurrentPageSubject.next(page);
    }
    searchSubmit(query) {
        this.selectedAccountGroupAccountsCurrentPageSubject.next(0);
        this.selectedAccountGroupAccountsSearchQuerySubject.next(query);
    }
}
/** @nocollapse */ AccountGroupDetailModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGroupDetailModalComponent, deps: [{ token: i1.UserPermissionsDataGroupDetailsService }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountGroupDetailModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountGroupDetailModalComponent, selector: "bb-account-group-detail-modal", inputs: { isOpen: "isOpen", targetSaId: "targetSaId", accountGroupName: "accountGroupName", legalEntityIds: "legalEntityIds", accountIds: "accountIds" }, outputs: { cancel: "cancel" }, providers: [], ngImport: i0, template: "<ng-container\n  bbAccountGroupDetailModalCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    selectedAccountGroupDetails: selectedAccountGroupDetails$ | async,\n    loadingSelectedAccount: loadingSelectedAccount$ | async,\n    selectedAccountGroupAccountsCurrentPage: selectedAccountGroupAccountsCurrentPage$ | async,\n    selectedAccountGroupError: selectedAccountGroupError$ | async,\n    selectedAccountGroup: selectedAccountGroup$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbAccountGroupDetailModalCustomizable\n  let-hostRef\n  let-selectedAccountGroupDetails=\"context.selectedAccountGroupDetails\"\n  let-loadingSelectedAccount=\"context.loadingSelectedAccount\"\n  let-selectedAccountGroupAccountsCurrentPage=\"context.selectedAccountGroupAccountsCurrentPage\"\n  let-selectedAccountGroupError=\"context.selectedAccountGroupError\"\n  let-selectedAccountGroup=\"context.selectedAccountGroup\">\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"account-group-detail-modal\">\n    <bb-modal-header-ui\n      title=\"Detail for {{ hostRef.accountGroupName }}\"\n      i18n-title=\"Title of account group modal detail@account-group-detail-modal.title\"\n      data-role=\"account-modal-title\"></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container *ngIf=\"!selectedAccountGroupError; else errorTemplate\">\n          <ng-container *ngIf=\"selectedAccountGroup && selectedAccountGroup.length; else empty\">\n            <div data-role=\"account-group-modal-detail\">\n              <bb-search-box-ui\n                *ngIf=\"hostRef.isOpen\"\n                size=\"md\"\n                placeholder=\"Search\"\n                i18n-placeholder=\"Search placeholder@@account-group-detail-modal.search.placeholder\"\n                [showClear]=\"true\"\n                [showSearch]=\"true\"\n                (clear)=\"hostRef.searchSubmit('')\"\n                (submit)=\"hostRef.searchSubmit($event)\"\n                data-role=\"account-group-table-search\"></bb-search-box-ui>\n              <ng-container *ngIf=\"selectedAccountGroupDetails && !loadingSelectedAccount; else loadingTemplate\">\n                <ng-container *ngIf=\"selectedAccountGroupDetails.data.length; else empty\">\n                  <div class=\"row\">\n                    <div class=\"col-6\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.name\"\n                        >Name</span\n                      >\n                    </div>\n                    <div class=\"col-4\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.number\">\n                        Number\n                      </span>\n                    </div>\n\n                    <div class=\"col-2\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.currency\">\n                        Currency\n                      </span>\n                    </div>\n                  </div>\n                  <hr />\n                  <div *ngFor=\"let account of selectedAccountGroupDetails.data\" data-role=\"account-item\">\n                    <div class=\"row\">\n                      <div class=\"col-6\">\n                        <div data-role=\"account-detail-name\">\n                          {{ account.displayName }}\n                        </div>\n                        <div class=\"bb-text-support text-small\" data-role=\"account-detail-type\">\n                          {{ account.productTypeName }}\n                        </div>\n                      </div>\n                      <div class=\"col-4\">\n                        <span class=\"text-small\" data-role=\"account-detail-number\">\n                          {{ account.IBAN || account.BBAN || account.productNumber || account.number }}\n                        </span>\n                      </div>\n\n                      <div class=\"col-2\">\n                        <span class=\"text-small\" data-role=\"account-detail-currency\">\n                          {{ account.currency }}\n                        </span>\n                      </div>\n                    </div>\n                    <hr />\n                  </div>\n\n                  <bb-pagination-ui\n                    data-role=\"account-group-table-pagination\"\n                    [page]=\"selectedAccountGroupAccountsCurrentPage\"\n                    [boundaryLinks]=\"true\"\n                    [directionLinks]=\"true\"\n                    [totalItems]=\"selectedAccountGroupDetails.totalCount\"\n                    [itemsPerPage]=\"itemsPerPage\"\n                    (pageChange)=\"hostRef.pageChange($event)\"></bb-pagination-ui>\n                </ng-container>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            i18n=\"Cancel button@account-group-detail-modal.cancel-btn\"\n            data-role=\"account-group-modal-detail-cancel-btn\">\n            Cancel\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"account-detail-loading\">\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorTemplate>\n  <bb-empty-state-ui\n    data-role=\"general-error-state\"\n    title=\"Unknown Error\"\n    i18n-title=\"Title for error state for account group errors@@account-group-detail-modal.unknown.title\"\n    subtitle=\"Try to reload the page or contact the system<br> administrator.\"\n    i18n-subtitle=\"Message for error state for account group errors@@account-group-detail-modal.unknown.subtitle\"\n    iconSize=\"xxl\"\n    iconModifier=\"error-outline\"></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #empty>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"account-group-table-empty-state\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"info\"\n      title=\"No accounts found\"\n      i18n-title=\"Label for empty list of accounts@@account-group-detail-modal.empty.title\"\n      subtitle=\"You don't have any accounts to be displayed.\"\n      i18n-subtitle=\"Accounts empty state message@@account-group-detail-modal.empty.subtitle\"></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i3.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i3.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i4.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i5.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0.forwardRef(function () { return i3.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i6.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i7.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return AccountGroupDetailModalCustomizableDirective; }), selector: "[bbAccountGroupDetailModalCustomizable]" }, { type: i0.forwardRef(function () { return i3.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i3.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i9.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i8.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGroupDetailModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-group-detail-modal',
                    templateUrl: './account-group-detail-modal.component.html',
                    providers: [],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.UserPermissionsDataGroupDetailsService }, { type: i2.ActivatedRoute }]; }, propDecorators: { isOpen: [{
                type: Input
            }], targetSaId: [{
                type: Input
            }], accountGroupName: [{
                type: Input
            }], legalEntityIds: [{
                type: Input
            }], accountIds: [{
                type: Input
            }], cancel: [{
                type: Output
            }] } });
export class AccountGroupDetailModalCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ AccountGroupDetailModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGroupDetailModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ AccountGroupDetailModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccountGroupDetailModalCustomizableDirective, selector: "[bbAccountGroupDetailModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGroupDetailModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountGroupDetailModalCustomizable]',
                }]
        }] });
//# sourceMappingURL=account-group-detail-modal.component.js.map