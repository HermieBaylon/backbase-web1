{"version":3,"file":"time-bounds.component.js","sourceRoot":"","sources":["../../../../../../libs/accessgroup-ui/src/lib/time-bounds/time-bounds.component.ts","../../../../../../libs/accessgroup-ui/src/lib/time-bounds/time-bounds.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;;;;AAO1D,MAAM,OAAO,mBAAmB;IAJhC;QAWE,mBAAc,GAAmB,EAAE,CAAC;KAgCrC;IA9BC;;OAEG;IACH,IAAa,UAAU,CAAC,KAA6B;QACnD,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAChD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;YAC/D,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAClD,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;YAClE,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;IACH,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACpC,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;SACvC;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACpC,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC;SACxC;QACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACnC,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC;SACxC;IACH,CAAC;;oIAtCU,mBAAmB;wHAAnB,mBAAmB,4FCRhC,08BAeA;4FDPa,mBAAmB;kBAJ/B,SAAS;mBAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,WAAW,EAAE,8BAA8B;iBAC5C;8BAac,UAAU;sBAAtB,KAAK","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { formatDate, formatTime } from '../model/helpers';\nimport { TimeBounds, ValidityFormat } from '../model/types';\n\n@Component({\n  selector: 'bb-time-bounds',\n  templateUrl: './time-bounds.component.html',\n})\nexport class TimeBoundsComponent {\n  private timeBoundsValue: TimeBounds | undefined;\n\n  fromDate: Date | undefined;\n  fromTime: Date | undefined;\n  untilDate: Date | undefined;\n  untilTime: Date | undefined;\n  validityFormat: ValidityFormat = '';\n\n  /**\n   * Function group\n   */\n  @Input() set timeBounds(value: TimeBounds | undefined) {\n    if (value) {\n      this.timeBoundsValue = value;\n      this.fromDate = formatDate(value.validFromDate);\n      this.fromTime = formatTime(this.fromDate, value.validFromTime);\n      this.untilDate = formatDate(value.validUntilDate);\n      this.untilTime = formatTime(this.untilDate, value.validUntilTime);\n      this.setValidityPeriod();\n    }\n  }\n\n  get timeBounds(): TimeBounds | undefined {\n    return this.timeBoundsValue;\n  }\n\n  private setValidityPeriod() {\n    this.validityFormat = '';\n    if (this.fromDate && !this.untilDate) {\n      this.validityFormat = 'validFromOnly';\n    }\n    if (!this.fromDate && this.untilDate) {\n      this.validityFormat = 'validUntilOnly';\n    }\n    if (this.fromDate && this.untilDate) {\n      this.validityFormat = 'validFromUntil';\n    }\n  }\n}\n","<div *ngIf=\"timeBounds && (fromDate || untilDate)\" class=\"bb-stack\" data-role=\"time-bounds\">\n  <bb-icon-ui name=\"access-time\" class=\"bb-stack__item bb-stack__item--spacing-sm\" size=\"sm\"></bb-icon-ui>\n  <div\n    class=\"bb-stack__item bb-subheader bb-subheader--regular\"\n    i18n=\"Time bound label@@time-bounds.label.validity-period\">\n    { validityFormat, select, validFromOnly {Active from\n    <span class=\"bb-text-bold\">{{ fromDate | date: 'mediumDate' }} {{ fromTime | date: 'shortTime' }}</span\n    >} validUntilOnly {Active until\n    <span class=\"bb-text-bold\">{{ untilDate | date: 'mediumDate' }} {{ untilTime | date: 'shortTime' }}</span\n    >} validFromUntil {Active from\n    <span class=\"bb-text-bold\">{{ fromDate | date: 'mediumDate' }} {{ fromTime | date: 'shortTime' }}</span> until\n    <span class=\"bb-text-bold\">{{ untilDate | date: 'mediumDate' }} {{ untilTime | date: 'shortTime' }}</span\n    >} }\n  </div>\n</div>\n"]}