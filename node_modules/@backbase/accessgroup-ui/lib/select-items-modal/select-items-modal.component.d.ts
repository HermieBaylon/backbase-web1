import { AfterContentInit, EventEmitter, TemplateRef } from '@angular/core';
import { NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';
import * as i0 from "@angular/core";
export declare class SelectItemsSearchDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectItemsSearchDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SelectItemsSearchDirective, "ng-template[bbSelectItemsSearch]", never, {}, {}, never>;
}
export declare class SelectItemsItemHeaderDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectItemsItemHeaderDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SelectItemsItemHeaderDirective, "ng-template[bbSelectItemsItemHeader]", never, {}, {}, never>;
}
export declare class SelectItemsItemDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectItemsItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SelectItemsItemDirective, "ng-template[bbSelectItemsItem]", never, {}, {}, never>;
}
export declare class SelectItemsLoadingDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectItemsLoadingDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SelectItemsLoadingDirective, "ng-template[bbSelectItemsLoading]", never, {}, {}, never>;
}
export declare class SelectItemsErrorDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectItemsErrorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SelectItemsErrorDirective, "ng-template[bbSelectItemsError]", never, {}, {}, never>;
}
export declare class SelectItemsEmptyDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectItemsEmptyDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SelectItemsEmptyDirective, "ng-template[bbSelectItemsEmpty]", never, {}, {}, never>;
}
export declare class SelectItemsModalComponent<T = any> implements AfterContentInit {
    searchTemplate: SelectItemsSearchDirective | undefined;
    itemHeaderTemplate: SelectItemsItemHeaderDirective | undefined;
    itemTemplate: SelectItemsItemDirective | undefined;
    loadingTemplate: SelectItemsLoadingDirective | null;
    errorTemplate: SelectItemsErrorDirective | null;
    emptyTemplate: SelectItemsEmptyDirective | null;
    private readonly selectedItems;
    private _allItems;
    private _items;
    private _isOpen;
    searchValue: string;
    set isOpen(value: boolean);
    /**
     * Modal heading
     */
    title: string;
    /**
     * List of items to select from
     */
    set items(items: T[]);
    /**
     * List of all available items (to manage toggleAll over not loaded items)
     * @param items
     */
    set allItems(items: T[]);
    /**
     * Number of items
     */
    totalCount: number;
    /**
     * Loading flag
     */
    loading: boolean;
    /**
     * Loading flag when loading more
     */
    loadingMore: boolean;
    /**
     * Error flag
     */
    error: boolean;
    /**
     * Should the search box be shown
     */
    searchEnabled: boolean;
    /**
     * Indicates button group separation for selection
     */
    selectGroupsEnabled: boolean;
    /**
     * Placeholder for search box
     */
    searchPlaceholder: string;
    /**
     * Label for the submit button
     */
    submitLabel: string;
    /**
     * Dialog options. Defaults to empty object.
     */
    modalOptions: NgbModalOptions;
    /**
     * Unique identifier for the items
     */
    itemIdProperty: keyof T;
    /**
     * Event emitter that emits on confirm
     * The event contains a list of the items that were selected
     */
    confirm: EventEmitter<T[]>;
    /**
     * Event emitter that emits a search string
     */
    search: EventEmitter<string>;
    /**
     * Event emitter that emits when canceling the selection
     */
    cancel: EventEmitter<void>;
    /**
     * Event emitter which emits on modal close
     */
    isOpenChange: EventEmitter<boolean>;
    /**
     * Event emitter which emits when end of list is reached
     */
    loadMore: EventEmitter<void>;
    /**
     * Event emitter which emits when all items should be loaded
     */
    loadAllItems: EventEmitter<void>;
    allSelected: boolean;
    someSelected: boolean;
    get isOpen(): boolean;
    get items(): T[];
    get selectedItemsLength(): number;
    /**
     * Case when totalCount > 0 indicates that we have paginated API
     *
     * TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
     */
    get areAllScrollableItemsLoaded(): boolean;
    ngAfterContentInit(): void;
    isItemSelected(item: T): boolean;
    toggleOpen(event: boolean): void;
    onToggleAll(event: Event): void;
    onToggleItem(event: Event, item: T): void;
    onLastFocused(): void;
    onCancel(): void;
    onSubmit(): void;
    onSearch(query: string | boolean | Object | null): void;
    onLoadMore(): void;
    trackByItemProp(_index: number, item: T): T[keyof T];
    private checkForAllLoadedItems;
    private toggleSelection;
    private updateSelectFlags;
    private areAllItemsSelected;
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectItemsModalComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SelectItemsModalComponent<any>, "bb-select-items-modal", never, { "isOpen": "isOpen"; "title": "title"; "items": "items"; "allItems": "allItems"; "totalCount": "totalCount"; "loading": "loading"; "loadingMore": "loadingMore"; "error": "error"; "searchEnabled": "searchEnabled"; "selectGroupsEnabled": "selectGroupsEnabled"; "searchPlaceholder": "searchPlaceholder"; "submitLabel": "submitLabel"; "modalOptions": "modalOptions"; "itemIdProperty": "itemIdProperty"; }, { "confirm": "confirm"; "search": "search"; "cancel": "cancel"; "isOpenChange": "isOpenChange"; "loadMore": "loadMore"; "loadAllItems": "loadAllItems"; }, ["searchTemplate", "itemHeaderTemplate", "itemTemplate", "loadingTemplate", "errorTemplate", "emptyTemplate"], never>;
}
