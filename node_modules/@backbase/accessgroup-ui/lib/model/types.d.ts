export { FunctionGroupItem as FunctionGroup } from '@backbase/data-ang/accesscontrol';
import { FunctionGroup, DataGroup } from '@backbase/accessgroup-common-ang';
export interface BusinessFunctionPrivilege {
    applicable: boolean;
    assigned: boolean;
    supportsLimits: boolean;
}
export interface BusinessFunctionPrivileges {
    [key: string]: BusinessFunctionPrivilege;
}
export interface BusinessFunction {
    functionId: string;
    functionCode: string;
    resource: string;
    name: string;
    privileges: BusinessFunctionPrivileges;
}
export interface BusinessFunctionGroup {
    groupKey: string;
    businessFunctions: BusinessFunction[];
}
export interface SelfApprovalPolicies {
    businessFunctionName: string;
    canSelfApprove: boolean;
    bounds?: Array<Bound>;
}
export interface Bound {
    amount: string | undefined;
    currencyCode: string | undefined;
}
export interface UserPermissions extends FunctionGroup {
    dataGroups: DataGroupWithPayee[];
    selfApprovalPolicies: Array<SelfApprovalPolicies>;
    groupedBusinessFunctions: BusinessFunctionGroup[];
}
export declare type ValidityFormat = 'validFromOnly' | 'validUntilOnly' | 'validFromUntil' | '';
export declare type SelfApprovalDefaultBehavior = 'enable' | 'disable';
export interface TimeBounds {
    validFromDate?: string | undefined;
    validFromTime?: string | undefined;
    validUntilDate?: string | undefined;
    validUntilTime?: string | undefined;
}
export interface DataGroupWithPayee extends DataGroup {
    payees: Array<DataGroup>;
}
