import { EventEmitter, TemplateRef } from '@angular/core';
import { ApprovalLevelStatus, DataGroup } from '@backbase/accessgroup-common-ang';
import { BehaviorSubject, Observable } from 'rxjs';
import { GetUser as User } from '@backbase/data-ang/user';
import { BusinessFunction, BusinessFunctionPrivileges, DataGroupWithPayee, SelfApprovalDefaultBehavior, SelfApprovalPolicies, UserPermissions } from '../model/types';
import * as i0 from "@angular/core";
export declare class UserPermissionsItemBusinessFunctionDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<UserPermissionsItemBusinessFunctionDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<UserPermissionsItemBusinessFunctionDirective, "ng-template[bbUserPermissionsItemBusinessFunction]", never, {}, {}, never>;
}
export declare class UserPermissionsItemBusinessFunctionGroupNameDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<UserPermissionsItemBusinessFunctionGroupNameDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<UserPermissionsItemBusinessFunctionGroupNameDirective, "ng-template[bbUserPermissionsItemBusinessFunctionGroupName]", never, {}, {}, never>;
}
export declare class UserPermissionsItemComponent {
    businessFunctionTemplate: UserPermissionsItemBusinessFunctionDirective | undefined;
    businessFunctionGroupKeyTemplate: UserPermissionsItemBusinessFunctionGroupNameDirective | undefined;
    _userPermissions: UserPermissions | undefined;
    allLinkedPayee: any;
    dataGroups: DataGroupWithPayee[];
    selectedDataGroups$: BehaviorSubject<any>;
    selectedDataGroupsForPayee$: BehaviorSubject<any>;
    selectedPayeeGroups$: BehaviorSubject<any>;
    readonly dataGroups$: BehaviorSubject<never[]>;
    readonly payeeGroups$: BehaviorSubject<never[]>;
    payeeDetailModal: boolean;
    accountDetailModal: boolean;
    selfApproveItemData: SelfApprovalPolicies | undefined;
    typeOfSelfApproveAction: string;
    selectedBFForSelfApprove: BusinessFunction | undefined;
    readonly approvalLevelStatus: typeof ApprovalLevelStatus;
    /**
     * User info
     */
    user: User | undefined;
    /**
     * Currency info
     */
    currencyList: any | undefined;
    /**
     * selfApproveDefaultBehavior
     */
    selfApproveDefaultBehavior: SelfApprovalDefaultBehavior | undefined;
    /**
     * Whether to show approval level
     */
    showApprovalLevel: boolean;
    /**
     * Approval level
     */
    approvalLevel?: string | ApprovalLevelStatus;
    /**
     * Approval level loading flag
     */
    approvalLevelLoading: boolean | undefined;
    /**
     * Approval level error flag
     */
    approvalLevelError: boolean | undefined;
    /**
     * Limit data
     */
    limitData: Array<any> | undefined;
    /**
     * Permission base on cxp and user permission
     */
    userLimitsPermission: any | undefined;
    /**
     * Business Function to check privileges against
     */
    emitLimitData: EventEmitter<any>;
    emitLimit(emitData: any, bfName: string, jrName: string): void;
    /**
     * Self approval data
     */
    selfApprovalPolicies: Array<SelfApprovalPolicies> | undefined;
    /**
     * Self approval data
     */
    selfApprovalPoliciesHistory: Array<SelfApprovalPolicies> | undefined;
    /**
     * User Permissions Object consisting of a
     * Function Group, Grouped Business Function, Data Groups
     */
    set userPermissions(val: UserPermissions | undefined);
    /**
     * Account Group setter
     */
    set dataGroup(val: any);
    /**
     * Payee Group setter
     */
    set payeeGroups(val: any);
    /**
     * Whether to show unassign buttons
     */
    showActions: boolean;
    /**
     * Whether to show self approval section
     */
    enableSelfApproval: boolean;
    /**
     * Whether to show payee table row
     */
    showPayee: boolean;
    /**
     * Whether to show unassign buttons
     */
    showFunctionGroupType: boolean;
    /**
     * Whether to disable save button
     */
    disableSaveButton: boolean;
    /**
     * Flag to indicate edit view
     */
    editView: boolean;
    /**
     * Legal Entity Id
     */
    legalEntityId: string;
    editedFunctionId: string | undefined;
    /**
     * Event emitter emiting on unassigning function group
     */
    removeFunctionGroup: EventEmitter<void>;
    /**
     * Event emitter emiting on unassigning data group
     */
    removeDataGroup: EventEmitter<DataGroup>;
    requestObjectEmit: EventEmitter<any>;
    editedFunctionIdEmit: EventEmitter<any>;
    changesMadedEmit: EventEmitter<any>;
    readonly availableDataGroupsSearchTerm$: BehaviorSubject<string>;
    readonly availableDataGroupsForPayeesSearchTerm$: BehaviorSubject<string>;
    readonly availablePayeeGroupsSearchTerm$: BehaviorSubject<string>;
    /**
     * Switcher state data
     * @private
     */
    private defaultSwitcherData;
    /**
     * Switcher value for account
     */
    switchAccountType$: BehaviorSubject<boolean>;
    readonly splittedAccountsByType$: Observable<{
        allAccounts: DataGroup[];
        wizardAccounts: DataGroup[];
        customAccounts: DataGroup[];
    }>;
    readonly availableDataGroups: Observable<DataGroup[]>;
    readonly availableDataGroupsForPayee: Observable<DataGroup[]>;
    readonly availablePayeeGroups: Observable<DataGroup[]>;
    payeeIds: undefined;
    accountIds: undefined;
    payeeGroupName: string;
    accountGroupName: string;
    selectAccountGroupsModalOpened: boolean;
    selectAccountGroupsForPayeesModalOpened: boolean;
    selectPayeeGroupsModalOpened: boolean;
    selectedForAssignAccountGroup: DataGroupWithPayee | undefined;
    selectedForAssignAccountGroupForPayee: DataGroupWithPayee | undefined;
    selectedDg: any;
    selectedPg: any;
    activeView: string;
    activeDataGroup: string;
    preEditDataGroupState: DataGroupWithPayee[];
    objectForRequest: any;
    dataGroupForRemove: any;
    switchAccounts(): void;
    onRemoveFunctionGroup(): void;
    onRemoveDataGroup(dg: DataGroup): void;
    showLinkedPayee(dg: any): void;
    selectedPG(pg: any): void;
    checkInclude(payees: any): any;
    getAccountGroupLinked(payee: any): any;
    getAccountGroupLinkedString(payee: any): any;
    assignDataGroups(val: DataGroupWithPayee[]): void;
    searchAvailableDataGroups(val: string): void;
    searchAvailablePayeeGroups(val: string): void;
    searchAvailableDataGroupsForPayees(val: string): void;
    addAccountGroup(): void;
    assignPayee(payees: any, dataGroups: any): void;
    assignPayeeGroups(val: any): void;
    assignDataGroupsForPayee(val: any): void;
    addAccountGroupToPayee(payee: any): void;
    getAllLinkedPayees(val: DataGroupWithPayee[]): void;
    removeAccountGroup(accountGroup: DataGroup): void;
    removedPayeeGroup(payyeGroup: DataGroup, accountGroup: DataGroup): void;
    removePayeeGroupLinking(payee: DataGroup): void;
    removedAccountGroupFromPayee(payee: DataGroup, account: DataGroup): void;
    onEditPayee(): void;
    onCancel(): void;
    emitRequestObject(): void;
    onSave(): void;
    checkForUnsetPolicies(el: SelfApprovalPolicies): boolean;
    checkChanges(): boolean;
    checkPayeesForChanges(savedObjects: DataGroup[], dataGroupPayeeObjects: DataGroup[]): boolean;
    onOpenUnassignModal(dataGroup: DataGroupWithPayee): void;
    openPayeeGroupDetail(payee: DataGroup): void;
    openAccountGroupDetail(account: DataGroup): void;
    /**
     * Return flag of financial BF and bound support for self approve
     * @param item - BF privileges
     */
    checkIfSelfApproveLimitsSupport(item: BusinessFunctionPrivileges): boolean;
    /**
     * Return flag of self approve supported
     * @param item - BF privileges
     */
    checkIfSelfApprove(item: BusinessFunctionPrivileges): boolean;
    /**
     * Return flag of present any self approval item in group of BF
     * @param items - BF privileges in Group
     */
    checkIfGroupHasSelfApprove(items: BusinessFunction[]): boolean;
    /**
     * Return flag of state of self approval
     * @param name - name of BF
     */
    checkIfSelfApprovalPoliciesSetted(name: string): boolean | undefined;
    /**
     * Return flag of disabled of self approval
     * @param name - name of BF
     */
    checkIfSelfApprovalDisabled(name: string): boolean;
    /**
     * Return bounds for self approve
     * @param name - name of BF
     */
    getBoundsForSelfApprove(name: string): import("../model/types").Bound[] | undefined;
    /**
     * Open modal for edit self Approve
     * @param bf -  BF
     */
    editSelfApprove(bf: BusinessFunction): void;
    /**
     * Open modal for enable self Approve
     * @param bf -  BF
     */
    enableSelfApprove(bf: BusinessFunction): void;
    /**
     * Changed response object when self approval item changed
     * @param event -  SelfApprovalPolicies
     */
    onSelfApproveChanges(event: SelfApprovalPolicies): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserPermissionsItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UserPermissionsItemComponent, "bb-user-permissions-item", never, { "user": "user"; "currencyList": "currencyList"; "selfApproveDefaultBehavior": "selfApproveDefaultBehavior"; "showApprovalLevel": "showApprovalLevel"; "approvalLevel": "approvalLevel"; "approvalLevelLoading": "approvalLevelLoading"; "approvalLevelError": "approvalLevelError"; "limitData": "limitData"; "userLimitsPermission": "userLimitsPermission"; "userPermissions": "userPermissions"; "dataGroup": "dataGroup"; "payeeGroups": "payeeGroups"; "showActions": "showActions"; "enableSelfApproval": "enableSelfApproval"; "showPayee": "showPayee"; "showFunctionGroupType": "showFunctionGroupType"; "disableSaveButton": "disableSaveButton"; "editView": "editView"; "legalEntityId": "legalEntityId"; "editedFunctionId": "editedFunctionId"; }, { "emitLimitData": "emitLimitData"; "removeFunctionGroup": "removeFunctionGroup"; "removeDataGroup": "removeDataGroup"; "requestObjectEmit": "requestObjectEmit"; "editedFunctionIdEmit": "editedFunctionIdEmit"; "changesMadedEmit": "changesMadedEmit"; }, ["businessFunctionTemplate", "businessFunctionGroupKeyTemplate"], never>;
}
