(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/table'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/keyboard-click-directive'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/ellipsis'), require('@backbase/ui-ang/pagination'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/avatar'), require('@backbase/ui-ang/currency-input'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/switch'), require('@backbase/ui-ang/empty-state'), require('@angular/localize/init'), require('@backbase/accessgroup-common-ang'), require('@backbase/ui-ang/infinite-scroll'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/search-box'), require('rxjs'), require('rxjs/operators'), require('@backbase/foundation-ang/core'), require('@angular/router'), require('@backbase/data-ang/accesscontrol')) :
    typeof define === 'function' && define.amd ? define('@backbase/accessgroup-ui', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@backbase/ui-ang/button', '@backbase/ui-ang/header', '@backbase/ui-ang/icon', '@backbase/ui-ang/modal', '@backbase/ui-ang/table', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/keyboard-click-directive', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/ellipsis', '@backbase/ui-ang/pagination', '@backbase/ui-ang/badge', '@backbase/ui-ang/amount', '@backbase/ui-ang/avatar', '@backbase/ui-ang/currency-input', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/switch', '@backbase/ui-ang/empty-state', '@angular/localize/init', '@backbase/accessgroup-common-ang', '@backbase/ui-ang/infinite-scroll', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/search-box', 'rxjs', 'rxjs/operators', '@backbase/foundation-ang/core', '@angular/router', '@backbase/data-ang/accesscontrol'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["accessgroup-ui"] = {}), global.ng.common, global.ng.core, global.ng.forms, global.i4, global.i1$1, global.i1$2, global.i1$4, global.i2$1, global.i3, global.i6, global.i3$1, global.i1$5, global.i3$2, global.i6$2, global.i1$6, global.i7, global.i2$3, global.i6$1, global.i5, global.i13, global.i1, global.ng.localize.init, global.i1$3, global.i2$2, global.i4$1, global.i4$2, global.rxjs, global.rxjs.operators, global.core, global.ng.router, global.i1$7));
})(this, (function (exports, i2, i0, i9, i4, i1$1, i1$2, i1$4, i2$1, i3, i6, i3$1, i1$5, i3$2, i6$2, i1$6, i7, i2$3, i6$1, i5, i13, i1, init, i1$3, i2$2, i4$1, i4$2, rxjs, operators, core, i2$4, i1$7) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);
    var i1__namespace$7 = /*#__PURE__*/_interopNamespace(i1$7);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var AccessgroupErrorComponent = /** @class */ (function () {
        function AccessgroupErrorComponent() {
        }
        return AccessgroupErrorComponent;
    }());
    /** @nocollapse */ AccessgroupErrorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupErrorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccessgroupErrorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccessgroupErrorComponent, selector: "bb-accessgroup-error", inputs: { error: "error" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"error\" [ngSwitch]=\"error?.kind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'AccessgroupUIAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view User\n      Permissons@@accessgroup-ui.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to view User Permissions.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state message label when user does not have permissions to view User\n      Permissons@@accessgroup-ui.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'AccessgroupUIConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity\n      error@@accessgroup-ui.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error message|Empty state message label when there is connectivity\n      error@@accessgroup-ui.error.connectivity.subtitle\"\n    iconModifier=\"error-outline\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n\n  <!-- AccessgroupUIUnknownError-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unknown Error\"\n    i18n-title=\"\n      Unknown Error title|Empty state label when there is an unknown error@@accessgroup-ui.error.unknown.title\"\n    subtitle=\"Try to reload the page or contact the system administrator.\"\n    i18n-subtitle=\"\n      Unknown Error message|Empty state message label when there is an unknown\n      error@@accessgroup-ui.error.unknown.subtitle\"\n    iconModifier=\"error-outline\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupErrorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-accessgroup-error',
                        templateUrl: './accessgroup-error.component.html',
                    }]
            }], propDecorators: { error: [{
                    type: i0.Input
                }] } });

    var AccessgroupHeaderComponent = /** @class */ (function () {
        function AccessgroupHeaderComponent() {
        }
        return AccessgroupHeaderComponent;
    }());
    /** @nocollapse */ AccessgroupHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupHeaderComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccessgroupHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccessgroupHeaderComponent, selector: "bb-accessgroup-header", inputs: { heading: "heading", description: "description" }, ngImport: i0__namespace, template: "<div>\n  <bb-header-ui [heading]=\"heading\" data-role=\"widget-header-heading\" headingType=\"h2\"></bb-header-ui>\n  <div data-role=\"widget-header-description\" class=\"bb-text-support\">{{ description }}</div>\n  <hr class=\"bb-block bb-block--lg\" />\n</div>\n", components: [{ type: i1__namespace$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-accessgroup-header',
                        templateUrl: './accessgroup-header.component.html',
                    }]
            }], propDecorators: { heading: [{
                    type: i0.Input
                }], description: [{
                    type: i0.Input
                }] } });

    exports.ApprovalStatus = void 0;
    (function (ApprovalStatus) {
        ApprovalStatus["APPROVED"] = "APPROVED";
        ApprovalStatus["REJECTED"] = "REJECTED";
    })(exports.ApprovalStatus || (exports.ApprovalStatus = {}));

    var translations = {
        approved: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":Approved status@@approvals-journey.approval-log.status.approved:Approved"], [":Approved status@@approvals-journey.approval-log.status.approved:Approved"]))),
        rejected: $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":Rejected status@@approvals-journey.approval-log.status.rejected:Rejected"], [":Rejected status@@approvals-journey.approval-log.status.rejected:Rejected"]))),
    };
    var AccessgroupApprovalLogComponent = /** @class */ (function () {
        function AccessgroupApprovalLogComponent() {
            var _c, _d, _e;
            /** Is pending status */
            this.isPending = false;
            this.records = [];
            /** Status name (translated) reference object */
            this.statusName = (_c = {},
                _c[exports.ApprovalStatus.REJECTED] = translations.rejected,
                _c[exports.ApprovalStatus.APPROVED] = translations.approved,
                _c);
            /** Icon name reference object */
            this.iconName = (_d = {},
                _d[exports.ApprovalStatus.REJECTED] = 'cancel',
                _d[exports.ApprovalStatus.APPROVED] = 'success',
                _d);
            /** Icon color reference object */
            this.iconColor = (_e = {},
                _e[exports.ApprovalStatus.REJECTED] = 'danger',
                _e[exports.ApprovalStatus.APPROVED] = 'success',
                _e);
        }
        Object.defineProperty(AccessgroupApprovalLogComponent.prototype, "approvalInfo", {
            /** Approval info setter */
            set: function (value) {
                var _this = this;
                this.records = [];
                if (value.records) {
                    value.records.forEach(function (el) {
                        var _a, _b;
                        el.approvalLevel = (_b = (_a = value === null || value === void 0 ? void 0 : value.approvalTypes) === null || _a === void 0 ? void 0 : _a.find(function (item) { return item.id === el.approvalTypeId; })) === null || _b === void 0 ? void 0 : _b.name;
                        _this.records.push(el);
                    });
                }
            },
            enumerable: false,
            configurable: true
        });
        return AccessgroupApprovalLogComponent;
    }());
    /** @nocollapse */ AccessgroupApprovalLogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupApprovalLogComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccessgroupApprovalLogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccessgroupApprovalLogComponent, selector: "bb-accessgroup-approval-log", inputs: { isPending: "isPending", approvalInfo: "approvalInfo" }, ngImport: i0__namespace, template: "<div class=\"bb-item-log bb-accessgroup-approval-log\">\n  <div *ngFor=\"let itemLogRecord of records\" class=\"bb-item-log__record\" data-role=\"approval-log-record\">\n    <div class=\"bb-stack bb-stack--align-top bb-stack--wrap\">\n      <bb-icon-ui\n        class=\"bb-item-log-record__icon\"\n        size=\"md\"\n        [name]=\"iconName[itemLogRecord.status]\"\n        [color]=\"iconColor[itemLogRecord.status]\"></bb-icon-ui>\n      <div class=\"bb-item-log-record__details\">\n        <span class=\"bb-text-bold\">{{ statusName[itemLogRecord.status] }} </span>\n\n        <!-- TODO: Replace letter with component -->\n        <span\n          *ngIf=\"itemLogRecord.approvalLevel\"\n          class=\"d-inline-block px-2 mx-1\"\n          style=\"background-color: #dedede; border-radius: 4px\"\n          >{{ itemLogRecord.approvalLevel }}</span\n        >\n\n        <small>\n          <ng-container> {{ itemLogRecord.userFullName }}</ng-container>\n          <ng-container *ngIf=\"itemLogRecord.externalUserId\"> ({{ itemLogRecord.externalUserId }})</ng-container>\n        </small>\n\n        <div class=\"bb-item-log-record__time\">\n          <time> {{ itemLogRecord.createdAt | date: 'd MMM YYYY' }}</time>\n          <ng-container i18n=\"At (used in date info)@@approvals-journey.approval-log.date.at\"> at</ng-container>\n          <time> {{ itemLogRecord.createdAt | date: 'shortTime' }}</time>\n        </div>\n      </div>\n\n      <div *ngIf=\"itemLogRecord.comment\" class=\"w-100 mt-3 mr-4 mb-2 ml-4\">\n        <div class=\"bb-card bb-card--sm bb-card--shadowless ml-2 bb-accessgroup-approval-log__comment\">\n          <div class=\"bb-card__body\">\n            <small>{{ itemLogRecord.comment }}</small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"isPending\" class=\"bb-item-log__record\" data-role=\"approval-log-pending\">\n    <bb-icon-ui class=\"bb-text-support bb-item-log-record__icon\" name=\"watch-later\" size=\"md\"></bb-icon-ui>\n    <div\n      class=\"bb-item-log__pending-record--details bb-text-bold\"\n      i18n=\"Waiting for further approval(s)@@approvals-journey.approval-log.pending.title\">\n      Waiting for further approval(s)\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupApprovalLogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-accessgroup-approval-log',
                        templateUrl: './accessgroup-approval-log.component.html',
                    }]
            }], propDecorators: { isPending: [{
                    type: i0.Input
                }], approvalInfo: [{
                    type: i0.Input
                }] } });
    var templateObject_1, templateObject_2;

    var BusinessFunctionGroupNameComponent = /** @class */ (function () {
        function BusinessFunctionGroupNameComponent(translationsService) {
            this.translationsService = translationsService;
        }
        Object.defineProperty(BusinessFunctionGroupNameComponent.prototype, "groupName", {
            get: function () {
                if (!this.groupKey)
                    return '';
                return this.translationsService.getBusinessFunctionGroupName(this.groupKey) || this.groupKey;
            },
            enumerable: false,
            configurable: true
        });
        return BusinessFunctionGroupNameComponent;
    }());
    /** @nocollapse */ BusinessFunctionGroupNameComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionGroupNameComponent, deps: [{ token: i1__namespace$3.TranslationsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BusinessFunctionGroupNameComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BusinessFunctionGroupNameComponent, selector: "bb-business-function-group-name", inputs: { groupKey: "groupKey" }, ngImport: i0__namespace, template: "{{ groupName }}" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionGroupNameComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-business-function-group-name',
                        templateUrl: './business-function-group-name.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.TranslationsService }]; }, propDecorators: { groupKey: [{
                    type: i0.Input
                }] } });

    var BusinessFunctionNameComponent = /** @class */ (function () {
        function BusinessFunctionNameComponent(translationsService) {
            this.translationsService = translationsService;
        }
        Object.defineProperty(BusinessFunctionNameComponent.prototype, "name", {
            get: function () {
                if (!this.businessFunction)
                    return '';
                return this.translationsService.getBusinessFunctionName(this.businessFunction.functionCode) || this.businessFunction.name;
            },
            enumerable: false,
            configurable: true
        });
        return BusinessFunctionNameComponent;
    }());
    /** @nocollapse */ BusinessFunctionNameComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionNameComponent, deps: [{ token: i1__namespace$3.TranslationsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BusinessFunctionNameComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BusinessFunctionNameComponent, selector: "bb-business-function-name", inputs: { businessFunction: "businessFunction" }, ngImport: i0__namespace, template: "{{ name }}" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionNameComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-business-function-name',
                        templateUrl: './business-function-name.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.TranslationsService }]; }, propDecorators: { businessFunction: [{
                    type: i0.Input
                }] } });

    var BusinessFunctionPrivilegesNameComponent = /** @class */ (function () {
        function BusinessFunctionPrivilegesNameComponent() {
            /**
             * Flag for hiding execute name
             */
            this.hideExecute = false;
        }
        return BusinessFunctionPrivilegesNameComponent;
    }());
    /** @nocollapse */ BusinessFunctionPrivilegesNameComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionPrivilegesNameComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BusinessFunctionPrivilegesNameComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BusinessFunctionPrivilegesNameComponent, selector: "bb-business-function-privileges-name", inputs: { hideExecute: "hideExecute" }, ngImport: i0__namespace, template: "<span\n  data-role=\"Execute\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Execute privilege@@accessgroup-ui.label.privilege.execute\"\n  *ngIf=\"!hideExecute\">\n  Execute\n</span>\n<span\n  data-role=\"View\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"View privilege@@accessgroup-ui.label.privilege.view\">\n  View\n</span>\n<span\n  data-role=\"Create\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Create privilege@@accessgroup-ui.label.privilege.create\">\n  Create\n</span>\n<span\n  data-role=\"Edit\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Edit privilege@@accessgroup-ui.label.privilege.edit\">\n  Edit\n</span>\n<span\n  data-role=\"Delete\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Delete privilege@@accessgroup-ui.label.privilege.delete\">\n  Delete\n</span>\n\n<span\n  data-role=\"Cancel\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Cancel privilege@@accessgroup-ui.label.privilege.cancel\">\n  Cancel\n</span>\n\n<span\n  data-role=\"Approve\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Approve privilege@@accessgroup-ui.label.privilege.approve\">\n  Approve\n</span>\n", directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionPrivilegesNameComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-business-function-privileges-name',
                        templateUrl: './business-function-privileges-name.component.html',
                    }]
            }], propDecorators: { hideExecute: [{
                    type: i0.Input
                }] } });

    var DataGroupItemsTableComponent = /** @class */ (function () {
        function DataGroupItemsTableComponent() {
            /**
             * List of Data Group Items
             */
            this.items = [];
            /**
             * If enabled, last column is shown
             */
            this.showDeleteColumn = false;
            /**
             * Event that fires when user clicks button to delete Data Group
             */
            this.removeItem = new i0.EventEmitter();
        }
        DataGroupItemsTableComponent.prototype.onRemoveItem = function (item) {
            if (this.showDeleteColumn) {
                this.removeItem.emit(item);
            }
        };
        return DataGroupItemsTableComponent;
    }());
    /** @nocollapse */ DataGroupItemsTableComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DataGroupItemsTableComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DataGroupItemsTableComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DataGroupItemsTableComponent, selector: "bb-data-group-items-table", inputs: { items: "items", showDeleteColumn: "showDeleteColumn" }, outputs: { removeItem: "removeItem" }, ngImport: i0__namespace, template: "<table class=\"table\" bbTableFocus [bbTable]=\"items\">\n  <caption class=\"sr-only\" i18n=\"Accounts in this group@@data-group-items-table.label.table-with-accounts\">\n    Table with accounts in this group\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\" i18n=\"Name, type@@data-group-items-table.table.header.name\">Name, type</th>\n      <th scope=\"col\" i18n=\"Number@@data-group-items-table.table.header.number\">Number</th>\n      <th scope=\"col\" i18n=\"Ccy@@data-group-items-table.table.header.ccy\">Ccy</th>\n      <th *ngIf=\"showDeleteColumn\" scope=\"col\"></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let item of items\" [bbRow]=\"item\">\n      <td class=\"break-word\">\n        <div class=\"bb-text-bold\">{{ item.displayName }}</div>\n        <div>{{ item.productTypeName }}</div>\n      </td>\n      <td class=\"break-word\">\n        {{ item.IBAN || item.BBAN || item.productNumber || item.number }}\n      </td>\n      <td class=\"break-word\">{{ item.currency }}</td>\n      <td *ngIf=\"showDeleteColumn\" class=\"bb-text-align-right\">\n        <button\n          bbButton\n          (click)=\"onRemoveItem(item)\"\n          (keyup.enter)=\"onRemoveItem(item)\"\n          aria-label=\"Remove Account\"\n          i18n-aria-label=\"Remove Account@@data-group-items-table.aria.label.remove-account\"\n          [circle]=\"true\"\n          [color]=\"$any('icon-link')\">\n          <bb-icon-ui name=\"delete\"></bb-icon-ui>\n        </button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n", components: [{ type: i1__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace$1.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i2__namespace$1.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }, { type: i4__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DataGroupItemsTableComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-data-group-items-table',
                        templateUrl: './data-group-items-table.component.html',
                    }]
            }], propDecorators: { items: [{
                    type: i0.Input
                }], showDeleteColumn: [{
                    type: i0.Input
                }], removeItem: [{
                    type: i0.Output
                }] } });

    var DiscardChangesModalComponent = /** @class */ (function () {
        function DiscardChangesModalComponent() {
            /**
             * Is modal open
             */
            this.isOpen = false;
            /**
             * Modal title
             */
            this.title = '';
            /**
             * Label for the discard changes button
             */
            this.discardButtonLabel = '';
            /**
             * Label for the cancel button
             */
            this.cancelButtonLabel = '';
            /**
             * Event emitter that emits the chosen action.
             * true to continue with action, false to cancel
             */
            this.resolve = new i0.EventEmitter();
        }
        DiscardChangesModalComponent.prototype.cancel = function () {
            this.resolve.emit(false);
        };
        DiscardChangesModalComponent.prototype.discard = function () {
            this.resolve.emit(true);
        };
        return DiscardChangesModalComponent;
    }());
    /** @nocollapse */ DiscardChangesModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DiscardChangesModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DiscardChangesModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DiscardChangesModalComponent, selector: "bb-discard-changes-modal", inputs: { isOpen: "isOpen", title: "title", discardButtonLabel: "discardButtonLabel", cancelButtonLabel: "cancelButtonLabel" }, outputs: { resolve: "resolve" }, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"isOpen\" (cancel)=\"cancel()\" data-role=\"discard-changes-modal\">\n  <bb-modal-header-ui data-role=\"discard-changes-modal-title\" [title]=\"title\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-content></ng-content>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"discard()\"\n          data-role=\"discard-changes-modal-discard-button\">\n          {{ discardButtonLabel }}\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          (click)=\"cancel()\"\n          data-role=\"discard-changes-modal-cancel-button\">\n          {{ cancelButtonLabel }}\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace$4.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$4.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace$4.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1__namespace$4.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1__namespace$4.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1__namespace$4.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i4__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DiscardChangesModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-discard-changes-modal',
                        templateUrl: './discard-changes-modal.component.html',
                    }]
            }], propDecorators: { isOpen: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], discardButtonLabel: [{
                    type: i0.Input
                }], cancelButtonLabel: [{
                    type: i0.Input
                }], resolve: [{
                    type: i0.Output
                }] } });

    var formatDate = function (dateString) {
        if (dateString) {
            var _a = __read(dateString.split('-'), 3), year = _a[0], month = _a[1], date = _a[2];
            return new Date(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(date, 10));
        }
        return undefined;
    };
    var formatTime = function (date, timeString) {
        if (date && timeString) {
            var _a = __read(timeString.split(':'), 3), hour = _a[0], minute = _a[1], second = _a[2];
            return new Date(date.getFullYear(), date.getMonth(), date.getDate(), parseInt(hour, 10), parseInt(minute, 10), parseInt(second, 10));
        }
        return undefined;
    };

    var TimeBoundsComponent = /** @class */ (function () {
        function TimeBoundsComponent() {
            this.validityFormat = '';
        }
        Object.defineProperty(TimeBoundsComponent.prototype, "timeBounds", {
            get: function () {
                return this.timeBoundsValue;
            },
            /**
             * Function group
             */
            set: function (value) {
                if (value) {
                    this.timeBoundsValue = value;
                    this.fromDate = formatDate(value.validFromDate);
                    this.fromTime = formatTime(this.fromDate, value.validFromTime);
                    this.untilDate = formatDate(value.validUntilDate);
                    this.untilTime = formatTime(this.untilDate, value.validUntilTime);
                    this.setValidityPeriod();
                }
            },
            enumerable: false,
            configurable: true
        });
        TimeBoundsComponent.prototype.setValidityPeriod = function () {
            this.validityFormat = '';
            if (this.fromDate && !this.untilDate) {
                this.validityFormat = 'validFromOnly';
            }
            if (!this.fromDate && this.untilDate) {
                this.validityFormat = 'validUntilOnly';
            }
            if (this.fromDate && this.untilDate) {
                this.validityFormat = 'validFromUntil';
            }
        };
        return TimeBoundsComponent;
    }());
    /** @nocollapse */ TimeBoundsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimeBoundsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TimeBoundsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TimeBoundsComponent, selector: "bb-time-bounds", inputs: { timeBounds: "timeBounds" }, ngImport: i0__namespace, template: "<div *ngIf=\"timeBounds && (fromDate || untilDate)\" class=\"bb-stack\" data-role=\"time-bounds\">\n  <bb-icon-ui name=\"access-time\" class=\"bb-stack__item bb-stack__item--spacing-sm\" size=\"sm\"></bb-icon-ui>\n  <div\n    class=\"bb-stack__item bb-subheader bb-subheader--regular\"\n    i18n=\"Time bound label@@time-bounds.label.validity-period\">\n    { validityFormat, select, validFromOnly {Active from\n    <span class=\"bb-text-bold\">{{ fromDate | date: 'mediumDate' }} {{ fromTime | date: 'shortTime' }}</span\n    >} validUntilOnly {Active until\n    <span class=\"bb-text-bold\">{{ untilDate | date: 'mediumDate' }} {{ untilTime | date: 'shortTime' }}</span\n    >} validFromUntil {Active from\n    <span class=\"bb-text-bold\">{{ fromDate | date: 'mediumDate' }} {{ fromTime | date: 'shortTime' }}</span> until\n    <span class=\"bb-text-bold\">{{ untilDate | date: 'mediumDate' }} {{ untilTime | date: 'shortTime' }}</span\n    >} }\n  </div>\n</div>\n", components: [{ type: i1__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimeBoundsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-time-bounds',
                        templateUrl: './time-bounds.component.html',
                    }]
            }], propDecorators: { timeBounds: [{
                    type: i0.Input
                }] } });

    var FunctionGroupTimeBoundsComponent = /** @class */ (function () {
        function FunctionGroupTimeBoundsComponent() {
            this.validityFormat = '';
        }
        Object.defineProperty(FunctionGroupTimeBoundsComponent.prototype, "functionGroup", {
            get: function () {
                return this.functionGroupValue;
            },
            /**
             * Function group
             */
            set: function (value) {
                if (value) {
                    this.functionGroupValue = value;
                    this.fromDate = formatDate(value.validFromDate);
                    this.fromTime = formatTime(this.fromDate, value.validFromTime);
                    this.untilDate = formatDate(value.validUntilDate);
                    this.untilTime = formatTime(this.untilDate, value.validUntilTime);
                    this.setValidityPeriod();
                }
            },
            enumerable: false,
            configurable: true
        });
        FunctionGroupTimeBoundsComponent.prototype.setValidityPeriod = function () {
            this.validityFormat = '';
            if (this.fromDate && !this.untilDate) {
                this.validityFormat = 'validFromOnly';
            }
            if (!this.fromDate && this.untilDate) {
                this.validityFormat = 'validUntilOnly';
            }
            if (this.fromDate && this.untilDate) {
                this.validityFormat = 'validFromUntil';
            }
        };
        return FunctionGroupTimeBoundsComponent;
    }());
    /** @nocollapse */ FunctionGroupTimeBoundsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FunctionGroupTimeBoundsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ FunctionGroupTimeBoundsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FunctionGroupTimeBoundsComponent, selector: "bb-function-group-time-bounds", inputs: { functionGroup: "functionGroup" }, ngImport: i0__namespace, template: "<bb-time-bounds [timeBounds]=\"functionGroup\"></bb-time-bounds>\n", components: [{ type: TimeBoundsComponent, selector: "bb-time-bounds", inputs: ["timeBounds"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FunctionGroupTimeBoundsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-function-group-time-bounds',
                        templateUrl: './function-group-time-bounds.component.html',
                    }]
            }], propDecorators: { functionGroup: [{
                    type: i0.Input
                }] } });

    var PrivilegeIndicatorComponent = /** @class */ (function () {
        function PrivilegeIndicatorComponent() {
            /**
             * Flag to indicate if the privilege is applicable. Default is false
             */
            this.applicable = false;
            /**
             * Flag to indicate if the privilege is assigned. Default is false
             */
            this.assigned = false;
            /**
             * Icon class name for changed indicator. Default is empty string
             */
            this.iconClass = '';
            /**
             * Color of privilege indicator, different color when item is removed in approval log. Default is empty string
             */
            this.color = '';
        }
        return PrivilegeIndicatorComponent;
    }());
    /** @nocollapse */ PrivilegeIndicatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PrivilegeIndicatorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PrivilegeIndicatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PrivilegeIndicatorComponent, selector: "bb-privilege-indicator", inputs: { applicable: "applicable", assigned: "assigned", iconClass: "iconClass", color: "color" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"applicable\">\n  <bb-icon-ui\n    *ngIf=\"assigned\"\n    [color]=\"color || 'success'\"\n    name=\"check\"\n    aria-label=\"Permitted\"\n    i18n-aria-label=\"Permitted aria label@@function-group-list.details.permission.aria.permitted\"\n    bbTooltip=\"Permitted\"\n    i18n-bbTooltip=\"Permitted tooltip@@function-group-list.details.permission.tooltip.permitted\"\n    triggers=\"hover\"\n    [class]=\"iconClass\"></bb-icon-ui>\n  <bb-icon-ui\n    *ngIf=\"!assigned\"\n    [color]=\"color || 'muted'\"\n    name=\"times\"\n    aria-label=\"Not permitted\"\n    i18n-aria-label=\"Not permitted aria label@@function-group-list.details.permission.aria.not-permitted\"\n    bbTooltip=\"Not permitted\"\n    i18n-bbTooltip=\"Not permitted tooltip@@function-group-list.details.permission.tooltip.not-permitted\"\n    triggers=\"hover\"\n    [class]=\"iconClass\"></bb-icon-ui>\n</ng-container>\n<ng-container *ngIf=\"!applicable\">\n  <bb-icon-ui\n    name=\"remove\"\n    [color]=\"color || 'muted'\"\n    aria-label=\"Not applicable for this business function\"\n    i18n-aria-label=\"Not applicable aria label@@function-group-list.details.permission.aria.not-applicable\"\n    bbTooltip=\"Not applicable for this function\"\n    i18n-bbTooltip=\"Not applicable tooltip@@function-group-list.details.permission.tooltip.not-applicable\"\n    triggers=\"hover\"></bb-icon-ui>\n</ng-container>\n", components: [{ type: i1__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PrivilegeIndicatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-privilege-indicator',
                        templateUrl: './privilege-indicator.component.html',
                    }]
            }], propDecorators: { applicable: [{
                    type: i0.Input
                }], assigned: [{
                    type: i0.Input
                }], iconClass: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] } });

    var PrivilegeIndicatorListComponent = /** @class */ (function () {
        function PrivilegeIndicatorListComponent() {
            /**
             * Business Function to check privileges against
             */
            this.emitLimitData = new i0.EventEmitter();
        }
        /**
         * Check whether limit is allowed for specific privilege
         */
        PrivilegeIndicatorListComponent.prototype.showLimit = function (privilege) {
            var _a, _b, _c, _d;
            // @ts-ignore
            var fgKey = this.functionGroupId + ((_a = this.businessFunction) === null || _a === void 0 ? void 0 : _a.functionId) + privilege;
            return (this.limitData &&
                (this.limitData[((_b = this.businessFunction) === null || _b === void 0 ? void 0 : _b.functionId) + privilege] || this.limitData[fgKey]) &&
                ((_c = this.businessFunction) === null || _c === void 0 ? void 0 : _c.privileges[privilege].assigned) &&
                ((_d = this.businessFunction) === null || _d === void 0 ? void 0 : _d.privileges[privilege].applicable));
        };
        /**
         * Get limit context object
         */
        PrivilegeIndicatorListComponent.prototype.getLimitContext = function (privilege) {
            var _a, _b, _c;
            return {
                limit: this.functionGroupId
                    ? this.limitData[this.functionGroupId + ((_a = this.businessFunction) === null || _a === void 0 ? void 0 : _a.functionId) + privilege]
                    : this.limitData[((_b = this.businessFunction) === null || _b === void 0 ? void 0 : _b.functionId) + privilege],
                id: (_c = this.businessFunction) === null || _c === void 0 ? void 0 : _c.functionId,
                type: privilege,
            };
        };
        /**
         * Emit limit data
         */
        PrivilegeIndicatorListComponent.prototype.emitLimit = function (emitData) {
            if (this.functionGroupId) {
                this.emitLimitData.emit(Object.assign(Object.assign({}, emitData), { functionGroupId: this.functionGroupId }));
            }
            else {
                this.emitLimitData.emit(emitData);
            }
        };
        /**
         * Track when control has no amount and no limits button should be shown
         */
        PrivilegeIndicatorListComponent.prototype.isLimitBoundsEmpty = function (limitData) {
            var limitBounds = limitData.limitBounds;
            return limitBounds === null || limitBounds === void 0 ? void 0 : limitBounds.every(function (bound) { var _a, _b; return !((_a = bound.regular) === null || _a === void 0 ? void 0 : _a.amount) && !((_b = bound.shadow) === null || _b === void 0 ? void 0 : _b.amount); });
        };
        return PrivilegeIndicatorListComponent;
    }());
    /** @nocollapse */ PrivilegeIndicatorListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PrivilegeIndicatorListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PrivilegeIndicatorListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PrivilegeIndicatorListComponent, selector: "bb-privilege-indicator-list", inputs: { businessFunction: "businessFunction", limitData: "limitData", userPermission: "userPermission", functionGroupId: "functionGroupId" }, outputs: { emitLimitData: "emitLimitData" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"businessFunction\">\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-execute-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Execute privilege\"\n      i18n-aria-label=\"Execute privilege@@privilege-indicator-list.label.privilege.aria.execute\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-execute'\"\n      [applicable]=\"businessFunction.privileges.execute.applicable\"\n      [assigned]=\"businessFunction.privileges.execute.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('execute')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('execute')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-view-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"View privilege\"\n      i18n-aria-label=\"View privilege@@privilege-indicator-list.label.privilege.aria.view\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-view'\"\n      [applicable]=\"businessFunction.privileges.view.applicable\"\n      [assigned]=\"businessFunction.privileges.view.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('view')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('view')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-create-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Create privilege\"\n      i18n-aria-label=\"Create privilege@@privilege-indicator-list.label.privilege.aria.create\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-create'\"\n      [applicable]=\"businessFunction.privileges.create.applicable\"\n      [assigned]=\"businessFunction.privileges.create.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('create')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('create')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-edit-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Edit privilege\"\n      i18n-aria-label=\"Edit privilege@@privilege-indicator-list.label.privilege.aria.edit\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-edit'\"\n      [applicable]=\"businessFunction.privileges.edit.applicable\"\n      [assigned]=\"businessFunction.privileges.edit.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('edit')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('edit')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-delete-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Delete privilege\"\n      i18n-aria-label=\"Delete privilege@@privilege-indicator-list.label.privilege.aria.delete\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-delete'\"\n      [applicable]=\"businessFunction.privileges.delete.applicable\"\n      [assigned]=\"businessFunction.privileges.delete.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('delete')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('delete')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-cancel-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Cancel privilege\"\n      i18n-aria-label=\"Cancel privilege@@privilege-indicator-list.label.privilege.aria.cancel\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-cancel'\"\n      [applicable]=\"businessFunction.privileges.cancel.applicable\"\n      [assigned]=\"businessFunction.privileges.cancel.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('cancel')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('cancel')\">\n    </ng-container>\n  </span>\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-approve-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Approve privilege\"\n      i18n-aria-label=\"Approve privilege@@privilege-indicator-list.label.privilege.aria.approve\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-approve'\"\n      [applicable]=\"businessFunction.privileges.approve.applicable\"\n      [assigned]=\"businessFunction.privileges.approve.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('approve')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('approve')\">\n    </ng-container>\n  </span>\n</ng-container>\n\n<ng-template #limitTemplate let-limit=\"limit\" let-type=\"type\" let-id=\"id\">\n  <button\n    data-role=\"privilege-indicator-list-limit-create\"\n    bbButton\n    aria-label=\"Create Limit\"\n    i18n-aria-label=\"Create limit button@@privilege-indicator-list.limit.aria.label.create-limit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    color=\"link-text-light\"\n    bbTooltip=\"Click to set limit\"\n    container=\"body\"\n    i18n-bbTooltip=\"Set limit button tooltip@@privilege-indicator-list.limit.set-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'create', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"!limit?.created && (userPermission.regularLimit.create || userPermission.shadowLimit.create)\">\n    <bb-icon-ui name=\"control-point\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-edit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    aria-label=\"Edit Limit\"\n    i18n-aria-label=\"Edit limit button@@privilege-indicator-list.limit.aria.label.edit-limit\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Click to edit limit\"\n    i18n-bbTooltip=\"Edit limit button tooltip@@privilege-indicator-list.limit.edit-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'edit', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"\n      limit?.created &&\n      (userPermission.regularLimit.edit || userPermission.shadowLimit.edit) &&\n      !limit?.pending &&\n      !isLimitBoundsEmpty(limit)\n    \">\n    <bb-icon-ui name=\"create\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-create-empty\"\n    class=\"align-top bb-job-role-limit-icon\"\n    aria-label=\"Create Limit\"\n    i18n-aria-label=\"Create limit button@@privilege-indicator-list.limit.aria.label.create-empty-limit\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Click to set limit\"\n    i18n-bbTooltip=\"Set limit button tooltip@@privilege-indicator-list.limit.create-empty-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'edit', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"\n      limit?.created &&\n      (userPermission.regularLimit.edit || userPermission.shadowLimit.edit) &&\n      !limit?.pending &&\n      isLimitBoundsEmpty(limit)\n    \">\n    <bb-icon-ui name=\"control-point\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-pending\"\n    aria-label=\"Pending Limit\"\n    i18n-aria-label=\"Pending limit button@@privilege-indicator-list.limit.aria.label.pending-limit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Limit awaiting approval\"\n    i18n-bbTooltip=\"Pending view limit button tooltip@@privilege-indicator-list.limit.pending-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'view', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"limit?.pending\">\n    <bb-icon-ui name=\"access-time\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-view\"\n    aria-label=\"View Limit\"\n    i18n-aria-label=\"View limit button@@privilege-indicator-list.limit.aria.label.view-limit\"\n    *ngIf=\"\n      limit?.created &&\n      !userPermission.regularLimit.edit &&\n      !userPermission.shadowLimit.edit &&\n      !limit?.pending &&\n      (userPermission.regularLimit.view || userPermission.shadowLimit.view)\n    \"\n    class=\"align-top bb-job-role-limit-icon\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'view', limit: limit, privilegesType: type, id: id })\"\n    color=\"link-text-light\"\n    bbTooltip=\"Click to view limit\"\n    i18n-bbTooltip=\"View limit button tooltip@@privilege-indicator-list.limit.view-limit.tooltip\"\n    triggers=\"hover\"\n    container=\"body\"\n    bbButton>\n    <bb-icon-ui name=\"remove-red-eye\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n</ng-template>\n", components: [{ type: PrivilegeIndicatorComponent, selector: "bb-privilege-indicator", inputs: ["applicable", "assigned", "iconClass", "color"] }, { type: i1__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i6__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PrivilegeIndicatorListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-privilege-indicator-list',
                        templateUrl: './privilege-indicator-list.component.html',
                    }]
            }], propDecorators: { businessFunction: [{
                    type: i0.Input
                }], limitData: [{
                    type: i0.Input
                }], userPermission: [{
                    type: i0.Input
                }], functionGroupId: [{
                    type: i0.Input
                }], emitLimitData: [{
                    type: i0.Output
                }] } });

    var SelectItemsSearchDirective = /** @class */ (function () {
        function SelectItemsSearchDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return SelectItemsSearchDirective;
    }());
    /** @nocollapse */ SelectItemsSearchDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsSearchDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ SelectItemsSearchDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsSearchDirective, selector: "ng-template[bbSelectItemsSearch]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsSearchDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbSelectItemsSearch]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var SelectItemsItemHeaderDirective = /** @class */ (function () {
        function SelectItemsItemHeaderDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return SelectItemsItemHeaderDirective;
    }());
    /** @nocollapse */ SelectItemsItemHeaderDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsItemHeaderDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ SelectItemsItemHeaderDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsItemHeaderDirective, selector: "ng-template[bbSelectItemsItemHeader]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsItemHeaderDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbSelectItemsItemHeader]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var SelectItemsItemDirective = /** @class */ (function () {
        function SelectItemsItemDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return SelectItemsItemDirective;
    }());
    /** @nocollapse */ SelectItemsItemDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsItemDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ SelectItemsItemDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsItemDirective, selector: "ng-template[bbSelectItemsItem]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsItemDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbSelectItemsItem]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var SelectItemsLoadingDirective = /** @class */ (function () {
        function SelectItemsLoadingDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return SelectItemsLoadingDirective;
    }());
    /** @nocollapse */ SelectItemsLoadingDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsLoadingDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ SelectItemsLoadingDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsLoadingDirective, selector: "ng-template[bbSelectItemsLoading]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsLoadingDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbSelectItemsLoading]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var SelectItemsErrorDirective = /** @class */ (function () {
        function SelectItemsErrorDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return SelectItemsErrorDirective;
    }());
    /** @nocollapse */ SelectItemsErrorDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsErrorDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ SelectItemsErrorDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsErrorDirective, selector: "ng-template[bbSelectItemsError]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsErrorDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbSelectItemsError]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var SelectItemsEmptyDirective = /** @class */ (function () {
        function SelectItemsEmptyDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return SelectItemsEmptyDirective;
    }());
    /** @nocollapse */ SelectItemsEmptyDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsEmptyDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ SelectItemsEmptyDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsEmptyDirective, selector: "ng-template[bbSelectItemsEmpty]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsEmptyDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbSelectItemsEmpty]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var SelectItemsModalComponent = /** @class */ (function () {
        function SelectItemsModalComponent() {
            this.loadingTemplate = null;
            this.errorTemplate = null;
            this.emptyTemplate = null;
            this.selectedItems = new Map();
            this._allItems = [];
            this._items = [];
            this._isOpen = false;
            this.searchValue = '';
            /**
             * Modal heading
             */
            this.title = '';
            /**
             * Number of items
             */
            this.totalCount = 0;
            /**
             * Loading flag
             */
            this.loading = false;
            /**
             * Loading flag when loading more
             */
            this.loadingMore = false;
            /**
             * Error flag
             */
            this.error = false;
            /**
             * Should the search box be shown
             */
            this.searchEnabled = false;
            /**
             * Indicates button group separation for selection
             */
            this.selectGroupsEnabled = false;
            /**
             * Placeholder for search box
             */
            this.searchPlaceholder = '';
            /**
             * Label for the submit button
             */
            this.submitLabel = '';
            /**
             * Dialog options. Defaults to empty object.
             */
            this.modalOptions = {};
            /**
             * Unique identifier for the items
             */
            this.itemIdProperty = 'id';
            /**
             * Event emitter that emits on confirm
             * The event contains a list of the items that were selected
             */
            this.confirm = new i0.EventEmitter();
            /**
             * Event emitter that emits a search string
             */
            this.search = new i0.EventEmitter();
            /**
             * Event emitter that emits when canceling the selection
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Event emitter which emits on modal close
             */
            this.isOpenChange = new i0.EventEmitter();
            /**
             * Event emitter which emits when end of list is reached
             */
            this.loadMore = new i0.EventEmitter();
            /**
             * Event emitter which emits when all items should be loaded
             */
            this.loadAllItems = new i0.EventEmitter();
            this.allSelected = false;
            this.someSelected = false;
        }
        Object.defineProperty(SelectItemsModalComponent.prototype, "isOpen", {
            // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
            get: function () {
                return this._isOpen;
            },
            set: function (value) {
                this._isOpen = value;
                this.selectedItems.clear();
                this.searchValue = '';
                this.allSelected = false;
                this.someSelected = false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SelectItemsModalComponent.prototype, "items", {
            // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
            get: function () {
                return this._items;
            },
            /**
             * List of items to select from
             */
            set: function (items) {
                this._items = items;
                this.updateSelectFlags();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SelectItemsModalComponent.prototype, "allItems", {
            /**
             * List of all available items (to manage toggleAll over not loaded items)
             * @param items
             */
            set: function (items) {
                if (items) {
                    this._allItems = items;
                    this.toggleSelection(items, this.areAllItemsSelected(items));
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SelectItemsModalComponent.prototype, "selectedItemsLength", {
            get: function () {
                return this.selectedItems.size;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SelectItemsModalComponent.prototype, "areAllScrollableItemsLoaded", {
            /**
             * Case when totalCount > 0 indicates that we have paginated API
             *
             * TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
             */
            get: function () {
                return this.totalCount === 0 || (this._items && this._items.length === this.totalCount);
            },
            enumerable: false,
            configurable: true
        });
        SelectItemsModalComponent.prototype.ngAfterContentInit = function () {
            if (!this.itemHeaderTemplate || !this.itemTemplate) {
                throw new Error('itemHeaderTemplate and itemTemplate are mandatory');
            }
        };
        SelectItemsModalComponent.prototype.isItemSelected = function (item) {
            return this.selectedItems.has(item[this.itemIdProperty]);
        };
        SelectItemsModalComponent.prototype.toggleOpen = function (event) {
            this.isOpenChange.emit(event);
        };
        SelectItemsModalComponent.prototype.onToggleAll = function (event) {
            event.preventDefault();
            // this.loadAndToggleAll.observers.length === 0 will keep backwards compatibility
            if (this.areAllScrollableItemsLoaded || this.loadAllItems.observers.length === 0) {
                this.toggleSelection(this._items, this.allSelected);
            }
            else {
                this.checkForAllLoadedItems();
            }
        };
        SelectItemsModalComponent.prototype.onToggleItem = function (event, item) {
            event.preventDefault();
            this.toggleSelection([item], this.selectedItems.has(item[this.itemIdProperty]));
        };
        SelectItemsModalComponent.prototype.onLastFocused = function () {
            if (!this.areAllScrollableItemsLoaded) {
                this.onLoadMore();
            }
        };
        SelectItemsModalComponent.prototype.onCancel = function () {
            this.isOpenChange.emit(false);
        };
        SelectItemsModalComponent.prototype.onSubmit = function () {
            this.confirm.emit(Array.from(this.selectedItems.values()));
            this.isOpenChange.emit(false);
        };
        // eslint-disable-next-line @typescript-eslint/ban-types
        SelectItemsModalComponent.prototype.onSearch = function (query) {
            if (typeof query === 'string') {
                this.search.emit(query);
                this._allItems = [];
            }
        };
        SelectItemsModalComponent.prototype.onLoadMore = function () {
            this.loadMore.emit();
        };
        SelectItemsModalComponent.prototype.trackByItemProp = function (_index, item) {
            return item[this.itemIdProperty];
        };
        SelectItemsModalComponent.prototype.checkForAllLoadedItems = function () {
            // checking if we already loaded all items
            if (this._allItems.length === this.totalCount) {
                this.toggleSelection(this._allItems, this.areAllItemsSelected(this._allItems));
            }
            else {
                this.loadAllItems.emit();
            }
        };
        SelectItemsModalComponent.prototype.toggleSelection = function (items, allSelected) {
            var _this = this;
            if (allSelected) {
                items.forEach(function (item) { return _this.selectedItems.delete(item[_this.itemIdProperty]); });
            }
            else {
                items.forEach(function (item) { return _this.selectedItems.set(item[_this.itemIdProperty], item); });
            }
            this.updateSelectFlags();
        };
        // TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
        SelectItemsModalComponent.prototype.updateSelectFlags = function () {
            var _this = this;
            this.allSelected = this.areAllItemsSelected(this._items);
            this.someSelected =
                !this.allSelected && this._items && this._items.some(function (item) { return _this.selectedItems.has(item[_this.itemIdProperty]); });
        };
        // TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
        SelectItemsModalComponent.prototype.areAllItemsSelected = function (items) {
            var _this = this;
            return Boolean(items && items.every(function (item) { return _this.selectedItems.has(item[_this.itemIdProperty]); }));
        };
        return SelectItemsModalComponent;
    }());
    /** @nocollapse */ SelectItemsModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SelectItemsModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsModalComponent, selector: "bb-select-items-modal", inputs: { isOpen: "isOpen", title: "title", items: "items", allItems: "allItems", totalCount: "totalCount", loading: "loading", loadingMore: "loadingMore", error: "error", searchEnabled: "searchEnabled", selectGroupsEnabled: "selectGroupsEnabled", searchPlaceholder: "searchPlaceholder", submitLabel: "submitLabel", modalOptions: "modalOptions", itemIdProperty: "itemIdProperty" }, outputs: { confirm: "confirm", search: "search", cancel: "cancel", isOpenChange: "isOpenChange", loadMore: "loadMore", loadAllItems: "loadAllItems" }, queries: [{ propertyName: "searchTemplate", first: true, predicate: SelectItemsSearchDirective, descendants: true }, { propertyName: "itemHeaderTemplate", first: true, predicate: SelectItemsItemHeaderDirective, descendants: true }, { propertyName: "itemTemplate", first: true, predicate: SelectItemsItemDirective, descendants: true }, { propertyName: "loadingTemplate", first: true, predicate: SelectItemsLoadingDirective, descendants: true }, { propertyName: "errorTemplate", first: true, predicate: SelectItemsErrorDirective, descendants: true }, { propertyName: "emptyTemplate", first: true, predicate: SelectItemsEmptyDirective, descendants: true }], ngImport: i0__namespace, template: "<bb-modal-ui\n  data-role=\"select-items-modal\"\n  *ngIf=\"isOpen\"\n  [isOpen]=\"true\"\n  [modalOptions]=\"modalOptions\"\n  (isOpenChange)=\"toggleOpen($event)\">\n  <bb-modal-header-ui data-role=\"select-items-modal__header-label\" [title]=\"title\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-select-items bb-outline-spacer bb-outline-spacer--all\">\n        <ng-container *ngIf=\"searchEnabled\">\n          <ng-container *ngTemplateOutlet=\"searchTpl\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!error; else errorTpl\">\n          <ng-container *ngIf=\"!loading; else loadingTpl\">\n            <ng-container *ngIf=\"items?.length! > 0; else emptyTpl\">\n              <bb-infinite-scroll-ui\n                class=\"bb-infinite-scroll bb-outline-spacer bb-outline-spacer--left\"\n                data-role=\"select-items-modal__infinite-scroll\"\n                [offset]=\"5\"\n                [disableScrollEnd]=\"areAllScrollableItemsLoaded\"\n                (scrollEnd)=\"onLoadMore()\">\n                <div class=\"bb-list bb-list--density-sm\">\n                  <div\n                    class=\"\n                      sticky-top\n                      position-sticky\n                      bb-select-items__sticky-header-top\n                      bb-outline-spacer bb-outline-spacer--left\n                    \">\n                    <div class=\"bb-list__item\">\n                      <ng-container *ngIf=\"itemHeaderTemplate\">\n                        <div\n                          class=\"bb-stack bb-stack--density-sm bb_block bb-block--sm\"\n                          data-role=\"select-items-modal__items-header\">\n                          <div\n                            class=\"bb-stack__item\"\n                            data-role=\"select-items-modal__toggle-all\"\n                            (click)=\"onToggleAll($event)\"\n                            (keyup.space)=\"onToggleAll($event)\">\n                            <bb-input-checkbox-ui\n                              label=\"&nbsp;\"\n                              aria-label=\"Checkbox value to toggle all items\"\n                              i18n-aria-label=\"\n                                Checkbox value to toggle all items@@select-items-modal.label.aria.checkbox-for-all\"\n                              [ngModel]=\"allSelected\"\n                              [indeterminate]=\"someSelected\"></bb-input-checkbox-ui>\n                          </div>\n                          <div\n                            class=\"bb-stack__item bb-stack__item--fill\"\n                            data-role=\"select-items-modal__items-header-template\">\n                            <ng-container *ngTemplateOutlet=\"itemHeaderTemplate!.templateRef\"> </ng-container>\n                          </div>\n                        </div>\n                      </ng-container>\n                    </div>\n                    <!-- this div needed for border in bb-list__item above -->\n                    <div></div>\n                  </div>\n                  <div *ngIf=\"itemTemplate\" data-role=\"select-items-modal__list\" role=\"list\">\n                    <div\n                      *ngFor=\"let item of items; let last = last; trackBy: trackByItemProp\"\n                      class=\"bb-list__item\"\n                      (click)=\"onToggleItem($event, item)\"\n                      (keyup.space)=\"onToggleItem($event, item)\"\n                      data-role=\"select-items-modal__list-item\"\n                      role=\"listitem\">\n                      <div class=\"bb-stack bb-stack--density-sm\" role=\"button\">\n                        <bb-input-checkbox-ui\n                          label=\"&nbsp;\"\n                          aria-label=\"Checkbox value for the next item\"\n                          i18n-aria-label=\"\n                            Checkbox value for the next item@@select-items-modal.label.aria.checkbox-for-item\"\n                          [ngModel]=\"isItemSelected(item)\"\n                          (focus)=\"last && onLastFocused()\"\n                          class=\"bb-stack__item\"></bb-input-checkbox-ui>\n                        <div\n                          class=\"bb-stack__item bb-stack__item--fill\"\n                          data-role=\"select-items-modal__list-item-template\">\n                          <ng-container\n                            *ngTemplateOutlet=\"\n                              itemTemplate!.templateRef;\n                              context: {\n                                item: item,\n                                isSelected: isItemSelected(item),\n                                toggleItem: onToggleItem.bind(this)\n                              }\n                            \">\n                          </ng-container>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div\n                  *ngIf=\"!areAllScrollableItemsLoaded\"\n                  [class.invisible]=\"!loadingMore\"\n                  class=\"bb-block bb-block--sm\"\n                  data-role=\"select-items-modal__list-load-more-spinner\">\n                  <bb-loading-indicator-ui loaderSize=\"sm\"></bb-loading-indicator-ui>\n                </div>\n              </bb-infinite-scroll-ui>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          class=\"bb-button-bar__button\"\n          data-role=\"select-items-modal__add-btn\"\n          bbButton\n          (click)=\"onSubmit()\"\n          [disabled]=\"selectedItemsLength === 0\">\n          <ng-container *ngIf=\"!submitLabel; else submitLabelRef\" i18n=\"Submit@@select-items-modal.label.button.submit\"\n            >Submit</ng-container\n          >\n          <span data-role=\"select-items-modal__number-of-selected-items\" *ngIf=\"selectedItemsLength\"\n            >&nbsp;({{ selectedItemsLength }})</span\n          >\n          <ng-template #submitLabelRef>{{ submitLabel }}</ng-template>\n        </button>\n        <button\n          class=\"bb-button-bar__button\"\n          bbButton\n          (click)=\"onCancel()\"\n          color=\"secondary\"\n          i18n=\"Cancel@@select-items-modal.label.button.cancel\"\n          data-role=\"select-items-modal__cancel-btn\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<ng-template #errorTpl>\n  <ng-container *ngIf=\"errorTemplate; else defaultErrorTemplate\">\n    <ng-container *ngTemplateOutlet=\"errorTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultErrorTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__error-state\">\n      <bb-empty-state-ui\n        iconModifier=\"error\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"\n        title=\"Unknown error\"\n        i18n-title=\"Unknown error@@select-items-modal.label.fallback.error.title\"\n        subtitle=\"Please try again later\"\n        i18n-subtitle=\"Please try again later@@select-items-modal.label.fallback.error.message\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #searchTpl>\n  <ng-container *ngIf=\"searchTemplate; else defaultSearchTemplate\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        searchTemplate!.templateRef;\n        context: {\n          searchPlaceholder: searchPlaceholder,\n          searchValue: searchValue,\n          onSearch: onSearch.bind(this)\n        }\n      \">\n    </ng-container>\n  </ng-container>\n\n  <ng-template #defaultSearchTemplate>\n    <div class=\"bb-block bb-block--sm\">\n      <bb-search-box-ui\n        data-role=\"select-items-modal__search\"\n        class=\"bb-select-items__search-box\"\n        [aria-label]=\"searchPlaceholder\"\n        [showClear]=\"true\"\n        [showSearch]=\"true\"\n        [(ngModel)]=\"searchValue\"\n        [placeholder]=\"searchPlaceholder\"\n        (submit)=\"onSearch($event)\"\n        (clear)=\"onSearch('')\"></bb-search-box-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #loadingTpl>\n  <ng-container *ngIf=\"loadingTemplate; else defaultLoadingTemplate\">\n    <ng-container *ngTemplateOutlet=\"loadingTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultLoadingTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__loading-state\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #emptyTpl>\n  <ng-container *ngIf=\"emptyTemplate; else defaultEmptyTemplate\">\n    <ng-container *ngTemplateOutlet=\"emptyTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultEmptyTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__empty-state\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        title=\"No items\"\n        i18n-title=\"No items@@select-items-modal.label.fallback.empty.title\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i1__namespace$4.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$4.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace$4.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2__namespace$2.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i3__namespace$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i4__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1__namespace$4.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i1__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i4__namespace$2.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$4.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$4.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i4__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-select-items-modal',
                        templateUrl: './select-items-modal.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { searchTemplate: [{
                    type: i0.ContentChild,
                    args: [SelectItemsSearchDirective]
                }], itemHeaderTemplate: [{
                    type: i0.ContentChild,
                    args: [SelectItemsItemHeaderDirective]
                }], itemTemplate: [{
                    type: i0.ContentChild,
                    args: [SelectItemsItemDirective]
                }], loadingTemplate: [{
                    type: i0.ContentChild,
                    args: [SelectItemsLoadingDirective]
                }], errorTemplate: [{
                    type: i0.ContentChild,
                    args: [SelectItemsErrorDirective]
                }], emptyTemplate: [{
                    type: i0.ContentChild,
                    args: [SelectItemsEmptyDirective]
                }], isOpen: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], allItems: [{
                    type: i0.Input
                }], totalCount: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], loadingMore: [{
                    type: i0.Input
                }], error: [{
                    type: i0.Input
                }], searchEnabled: [{
                    type: i0.Input
                }], selectGroupsEnabled: [{
                    type: i0.Input
                }], searchPlaceholder: [{
                    type: i0.Input
                }], submitLabel: [{
                    type: i0.Input
                }], modalOptions: [{
                    type: i0.Input
                }], itemIdProperty: [{
                    type: i0.Input
                }], confirm: [{
                    type: i0.Output
                }], search: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }], isOpenChange: [{
                    type: i0.Output
                }], loadMore: [{
                    type: i0.Output
                }], loadAllItems: [{
                    type: i0.Output
                }] } });

    var uiModules$2 = [
        i1$4.ModalModule,
        i4$2.SearchBoxModule,
        i4.ButtonModule,
        i3$1.InputCheckboxModule,
        i2$2.InfiniteScrollModule,
        i4$1.LoadingIndicatorModule,
        i1.EmptyStateModule,
    ];
    var uiComponents$1 = [
        SelectItemsModalComponent,
        SelectItemsItemHeaderDirective,
        SelectItemsItemDirective,
        SelectItemsLoadingDirective,
        SelectItemsSearchDirective,
        SelectItemsErrorDirective,
        SelectItemsEmptyDirective,
    ];
    var SelectItemsModalModule = /** @class */ (function () {
        function SelectItemsModalModule() {
        }
        return SelectItemsModalModule;
    }());
    /** @nocollapse */ SelectItemsModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ SelectItemsModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsModalModule, declarations: [SelectItemsModalComponent,
            SelectItemsItemHeaderDirective,
            SelectItemsItemDirective,
            SelectItemsLoadingDirective,
            SelectItemsSearchDirective,
            SelectItemsErrorDirective,
            SelectItemsEmptyDirective], imports: [i2.CommonModule, i9.FormsModule, i1$4.ModalModule,
            i4$2.SearchBoxModule,
            i4.ButtonModule,
            i3$1.InputCheckboxModule,
            i2$2.InfiniteScrollModule,
            i4$1.LoadingIndicatorModule,
            i1.EmptyStateModule], exports: [i1$4.ModalModule,
            i4$2.SearchBoxModule,
            i4.ButtonModule,
            i3$1.InputCheckboxModule,
            i2$2.InfiniteScrollModule,
            i4$1.LoadingIndicatorModule,
            i1.EmptyStateModule, SelectItemsModalComponent,
            SelectItemsItemHeaderDirective,
            SelectItemsItemDirective,
            SelectItemsLoadingDirective,
            SelectItemsSearchDirective,
            SelectItemsErrorDirective,
            SelectItemsEmptyDirective] });
    /** @nocollapse */ SelectItemsModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsModalModule, imports: [__spreadArray([i2.CommonModule, i9.FormsModule], __read(uiModules$2)), i1$4.ModalModule,
            i4$2.SearchBoxModule,
            i4.ButtonModule,
            i3$1.InputCheckboxModule,
            i2$2.InfiniteScrollModule,
            i4$1.LoadingIndicatorModule,
            i1.EmptyStateModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectItemsModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(uiComponents$1)),
                        imports: __spreadArray([i2.CommonModule, i9.FormsModule], __read(uiModules$2)),
                        exports: __spreadArray(__spreadArray([], __read(uiModules$2)), __read(uiComponents$1)),
                    }]
            }] });

    var UserContextIconComponent = /** @class */ (function () {
        function UserContextIconComponent() {
        }
        Object.defineProperty(UserContextIconComponent.prototype, "formattedName", {
            get: function () {
                if (this.name) {
                    var short = this.name
                        .split(/\s/)
                        .reduce(function (r, w) { return (r += w.slice(0, 1)); }, '')
                        .substring(0, 2);
                    return short.toLocaleUpperCase();
                }
                return '';
            },
            enumerable: false,
            configurable: true
        });
        return UserContextIconComponent;
    }());
    /** @nocollapse */ UserContextIconComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserContextIconComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UserContextIconComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserContextIconComponent, selector: "bb-user-context-icon-ui", inputs: { isMaster: "isMaster", name: "name" }, ngImport: i0__namespace, template: "<div class=\"bb-user-context-icon-ui user-context__icon\">\n  <div *ngIf=\"!isMaster\" class=\"bb-user-context-icon-text\">\n    {{ formattedName }}\n  </div>\n  <bb-icon-ui *ngIf=\"isMaster\" name=\"home\" color=\"white\" size=\"lg\"></bb-icon-ui>\n</div>\n", components: [{ type: i1__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserContextIconComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-user-context-icon-ui',
                        templateUrl: './user-context-icon.component.html',
                    }]
            }], propDecorators: { isMaster: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }] } });

    var SelfApproveModalComponent = /** @class */ (function () {
        function SelfApproveModalComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * Flag to show modal
             */
            this.isOpen = false;
            this.currencyHistory = '';
            this.amountHistory = '';
            /**
             * Event emitter that emits on cancel button click
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Event emitter that emits data on any action
             */
            this.selfApprovalDataEmit = new i0.EventEmitter();
            /**
             * Amount form
             */
            this.amount = new i9.FormControl({ currency: 'undefined' });
            /**
             * Supported currency list
             */
            this.supportedCurrencies = [];
            /**
             * Currency
             */
            this.currency = '';
            /**
             * Flag if max amount need to be set
             */
            this.isCurrencySet = false;
        }
        Object.defineProperty(SelfApproveModalComponent.prototype, "currencyList", {
            /**
             * Currency info
             */
            set: function (val) {
                if (val) {
                    if (!this.currency) {
                        this.currency = val.defaultCurrency;
                    }
                    this.supportedCurrencies = val.allowedCurrencyList;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SelfApproveModalComponent.prototype, "selfApproveItemData", {
            /**
             * SelfApproval item setter
             */
            set: function (val) {
                if (val) {
                    this._selfApproveItemData = val;
                    if (this._selfApproveItemData.bounds && this._selfApproveItemData.bounds.length) {
                        this.isCurrencySet = true;
                        // For MVP scope, in future change
                        this.currency = this._selfApproveItemData.bounds[0].currencyCode;
                        this.currencyHistory = this._selfApproveItemData.bounds[0].currencyCode;
                        this.amountHistory = this._selfApproveItemData.bounds[0].amount;
                        this.amount.patchValue({
                            amount: this._selfApproveItemData.bounds[0].amount,
                            currency: this._selfApproveItemData.bounds[0].currencyCode,
                        });
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Emit cancel event
         */
        SelfApproveModalComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        /**
         * Emit data on save && enable action
         */
        SelfApproveModalComponent.prototype.onSave = function () {
            var dataForSelfApprove = { businessFunctionName: '', canSelfApprove: false };
            if (this.bf) {
                dataForSelfApprove = { businessFunctionName: this.bf.name, canSelfApprove: true };
            }
            if (this.isCurrencySet && this.amount.value && this.amount.value.amount) {
                dataForSelfApprove.bounds = [];
                dataForSelfApprove.bounds.push({
                    currencyCode: this.currency,
                    amount: this.amount.value.amount,
                });
            }
            this.selfApprovalDataEmit.emit(dataForSelfApprove);
        };
        /**
         * Emit data on disable action
         */
        SelfApproveModalComponent.prototype.onDisabled = function () {
            var dataForSelfApprove = {};
            if (this.bf) {
                dataForSelfApprove = { businessFunctionName: this.bf.name, canSelfApprove: false };
            }
            this.selfApprovalDataEmit.emit(dataForSelfApprove);
        };
        SelfApproveModalComponent.prototype.setForm = function (state) {
            this.isCurrencySet = state;
            this.amount.patchValue({ currency: 'undefined' });
            this.amount.markAsTouched();
        };
        return SelfApproveModalComponent;
    }());
    /** @nocollapse */ SelfApproveModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelfApproveModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SelfApproveModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelfApproveModalComponent, selector: "bb-self-approve-modal", inputs: { isOpen: "isOpen", user: "user", currencyList: "currencyList", bf: "bf", jobRoleName: "jobRoleName", type: "type", isLimitSupport: "isLimitSupport", selfApproveItemData: "selfApproveItemData" }, outputs: { cancel: "cancel", selfApprovalDataEmit: "selfApprovalDataEmit" }, ngImport: i0__namespace, template: "<ng-container bbSelfApproveModalCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n\n<ng-template bbSelfApproveModalCustomizable let-hostRef>\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"self-approval-for-user-modal\">\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'enable'\"\n      i18n-title=\"Enable self approval header text@@self-approval-modal.enable.header.text\"\n      title=\"Enable self-approval for user?\"\n      data-role=\"account-modal-enable-header\"></bb-modal-header-ui>\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport\"\n      i18n-title=\"Edit self approval header text@@self-approval-modal.edit.header.text\"\n      title=\"Edit self-approval for user?\"\n      data-role=\"account-modal-edit-header\"></bb-modal-header-ui>\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'edit' && !hostRef.isLimitSupport\"\n      i18n-title=\"Disable self approval header text@@self-approval-modal.disable.header.text\"\n      title=\"Disable self-approval for user?\"\n      data-role=\"account-modal-disable-header\"></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <div *ngIf=\"hostRef.user\" class=\"bb-block bb-block--md\" data-role=\"approval-modal-body\">\n          <div class=\"bb-card bb-card--highlight bb-card--sm\">\n            <div class=\"bb-card__body\">\n              <div class=\"bb-stack bb-stack--density-lg\">\n                <bb-avatar-ui\n                  [name]=\"hostRef.user?.fullName\"\n                  data-role=\"self-approval-avatar\"\n                  size=\"lg\"\n                  class=\"bb-stack__item bb-stack__item--spacing-md\"></bb-avatar-ui>\n                <div class=\"bb-stack__item\">\n                  <h5 class=\"bb-block bb-header bb-text-bold bb-block--xs\" data-role=\"self-approval-header\">\n                    {{ hostRef.user?.fullName }}\n                  </h5>\n                  <div class=\"bb-block bb-header bb-block--xs\">\n                    <span\n                      class=\"bb-subtitle bb-text-support bb-text-bold\"\n                      i18n=\"User external ID label@@self-approval-modal.external.id.label\">\n                      ID:\n                    </span>\n                    <span class=\"bb-subtitle bb-text-support break-word\" data-role=\"self-approval-external-id\">{{\n                      hostRef.user?.externalId\n                    }}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div>\n                <strong i18n=\"Job Role section text@@self-approval-modal.job-role.section.text\"> Job role </strong>\n              </div>\n              <div class=\"bb-inline-stack\">\n                <bb-icon-ui class=\"bb-inline-stack__item bb-text-bold\" name=\"users\" size=\"md\"></bb-icon-ui>\n                <span class=\"bb-inline-stack__item\" data-role=\"self-approval-job-role-name\">\n                  {{ hostRef.jobRoleName }}\n                </span>\n              </div>\n            </div>\n            <div class=\"col-6\">\n              <div>\n                <strong i18n=\"Business Function section text@@self-approval-modal.bf.section.text\">\n                  Business Function\n                </strong>\n              </div>\n              <div>\n                <bb-business-function-name [businessFunction]=\"hostRef.bf\"></bb-business-function-name>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          class=\"bb-block bb-block--md\"\n          *ngIf=\"hostRef.isLimitSupport && hostRef.supportedCurrencies.length\"\n          data-role=\"limit-support-block\">\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-inline-stack\">\n              <strong\n                class=\"bb-inline-stack__item\"\n                i18n=\"Info label for max amount for self approve@@self-approval-modal.max-amount.section.text\">\n                Max amount for self-approve\n              </strong>\n            </div>\n          </div>\n          <div\n            class=\"bb-block bb-block--md\"\n            *ngIf=\"!hostRef.selfApproveItemData && !hostRef.isCurrencySet\"\n            data-role=\"no-currency-set-item-data-block\">\n            <button\n              bbButton\n              color=\"link-text\"\n              buttonSize=\"sm\"\n              data-role=\"currency-set-button\"\n              (click)=\"hostRef.setForm(true)\">\n              <bb-icon-ui name=\"add-outline\" [size]=\"'sm'\" cropped></bb-icon-ui>\n              <span i18n=\"Set max amount button text@@self-approval-modal.max-amount.button.text\">Set max amount</span>\n            </button>\n          </div>\n          <div class=\"bb-stack\" *ngIf=\"hostRef.isCurrencySet\" data-role=\"is-currency-set-block\">\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <div class=\"row\">\n                <div class=\"col-3\" *ngIf=\"hostRef.supportedCurrencies.length\" data-role=\"supported-currencies-block\">\n                  <bb-dropdown-single-select-ui\n                    label=\"Currency\"\n                    i18n-label=\"\n                      Label text for currency amount for self approve@@self-approval-modal.currency.amount.integerLabel\"\n                    [options]=\"hostRef.supportedCurrencies\"\n                    [required]=\"true\"\n                    [(ngModel)]=\"hostRef.currency\"\n                    class=\"d-block bb-block bb-block--lg\">\n                  </bb-dropdown-single-select-ui>\n                </div>\n\n                <div class=\"col\">\n                  <bb-currency-input-ui\n                    i18n-integerLabel=\"\n                      Label text for to amount for self approve@@self-approval-modal.to.amount.integerLabel\"\n                    integerLabel=\"To(including)\"\n                    [integer]=\"true\"\n                    resultType=\"number\"\n                    [formControl]=\"hostRef.amount\"\n                    placeholder=\"\"></bb-currency-input-ui>\n                </div>\n              </div>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--push-right align-self-center\">\n              <button\n                bbButton\n                color=\"link-text\"\n                [circle]=\"true\"\n                buttonSize=\"md\"\n                (click)=\"hostRef.setForm(false)\"\n                data-role=\"close-currency-block-button\">\n                <bb-icon-ui name=\"delete\"></bb-icon-ui>\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <ng-container *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport; else disabledButton\"></ng-container>\n          <button\n            *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport\"\n            bbButton\n            color=\"primary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onSave()\"\n            data-role=\"edit-type-save-btn\"\n            [disabled]=\"\n              (hostRef.currencyHistory === hostRef.currency && hostRef.amountHistory === hostRef.amount.value.amount) ||\n              (!hostRef.amount.value.amount && hostRef.isCurrencySet) ||\n              (!hostRef.isCurrencySet && !hostRef.currencyHistory && !hostRef.amountHistory)\n            \"\n            i18n=\"Save button text for self approve@self-approval-modal.save-btn.text\">\n            Save\n          </button>\n          <button\n            *ngIf=\"hostRef.type === 'enable'\"\n            bbButton\n            color=\"primary\"\n            class=\"bb-button-bar__button\"\n            data-role=\"enable-type-save-btn\"\n            (click)=\"hostRef.onSave()\"\n            i18n=\"Enable button text for self approve@self-approval-modal.enable-btn.text\">\n            Enable\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            data-role=\"cancel-btn\"\n            i18n=\"Cancel button text for self approve@self-approval-modal.cancel-btn.text\">\n            Cancel\n          </button>\n\n          <ng-container *ngIf=\"hostRef.type === 'edit' && !hostRef.isLimitSupport; else disabledButton\"></ng-container>\n\n          <ng-template #disabledButton>\n            <button\n              *ngIf=\"hostRef.type === 'edit'\"\n              bbButton\n              color=\"danger\"\n              class=\"bb-button-bar__button bb-button-bar__button--across\"\n              (click)=\"hostRef.onDisabled()\"\n              data-role=\"edit-type-disable-btn\"\n              i18n=\"Disable button text for self approve@self-approval-modal.disable-btn.text\">\n              Disable\n            </button>\n          </ng-template>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$3.AvatarComponent; }), selector: "bb-avatar-ui", inputs: ["image", "name", "imgAlt", "size"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return BusinessFunctionNameComponent; }), selector: "bb-business-function-name", inputs: ["businessFunction"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0__namespace.forwardRef(function () { return SelfApproveModalCustomizableDirective; }), selector: "[bbSelfApproveModalCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelfApproveModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-self-approve-modal',
                        templateUrl: './self-approve-modal.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { isOpen: [{
                    type: i0.Input
                }], user: [{
                    type: i0.Input
                }], currencyList: [{
                    type: i0.Input
                }], bf: [{
                    type: i0.Input
                }], jobRoleName: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], isLimitSupport: [{
                    type: i0.Input
                }], selfApproveItemData: [{
                    type: i0.Input
                }], cancel: [{
                    type: i0.Output
                }], selfApprovalDataEmit: [{
                    type: i0.Output
                }] } });
    var SelfApproveModalCustomizableDirective = /** @class */ (function (_super) {
        __extends(SelfApproveModalCustomizableDirective, _super);
        function SelfApproveModalCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SelfApproveModalCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ SelfApproveModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelfApproveModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ SelfApproveModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelfApproveModalCustomizableDirective, selector: "[bbSelfApproveModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelfApproveModalCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbSelfApproveModalCustomizable]',
                    }]
            }] });

    var PayeeItemDetailComponent = /** @class */ (function () {
        function PayeeItemDetailComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * Padding on top
             */
            this.isPaddingTop = true;
        }
        PayeeItemDetailComponent.prototype.getAddress = function (detail) {
            var keys = ['addressLine1', 'addressLine2', 'streetName', 'postCode', 'town', 'countrySubDivision', 'country'];
            return this.getAddressString(keys, detail);
        };
        PayeeItemDetailComponent.prototype.getBankAddress = function (account) {
            var keys = [
                'bankAddressLine1',
                'bankAddressLine2',
                'bankStreetName',
                'bankPostCode',
                'bankTown',
                'bankCountrySubDivision',
                'bankCountry',
            ];
            return this.getAddressString(keys, account);
        };
        PayeeItemDetailComponent.prototype.getHoldersAddress = function (account) {
            var keys = [
                'accountHolderAddressLine1',
                'accountHolderAddressLine2',
                'accountHolderStreetName',
                'accountHolderPostCode',
                'accountHolderTown',
                'accountHolderCountrySubDivision',
                'accountHolderCountry',
            ];
            return this.getAddressString(keys, account);
        };
        PayeeItemDetailComponent.prototype.getAddressString = function (keys, detail) {
            var addressData = [];
            keys.forEach(function (key) {
                if (detail[key]) {
                    addressData.push(detail[key]);
                }
            });
            return addressData.length ? addressData.join(', ') : undefined;
        };
        return PayeeItemDetailComponent;
    }());
    /** @nocollapse */ PayeeItemDetailComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeItemDetailComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayeeItemDetailComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayeeItemDetailComponent, selector: "bb-payee-item-detail", inputs: { payeeDetail: "payeeDetail", isPaddingTop: "isPaddingTop" }, ngImport: i0__namespace, template: "<ng-container bbPayeeItemDetailCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n\n<ng-template bbPayeeItemDetailCustomizable let-hostRef>\n  <div [ngClass]=\"{ isPaddingTop: 'pt-4' }\">\n    <bb-header-ui\n      headingType=\"h2\"\n      tabindex=\"0\"\n      [heading]=\"hostRef.payeeDetail.name\"\n      data-role=\"payee-item-detail-header-label\"></bb-header-ui>\n    <div tabindex=\"0\" class=\"bb-text-support bb-block bb-block--lg\">\n      <div data-role=\"payee-item-detail-header-definition\">\n        {{ hostRef.payeeDetail.alias }}\n      </div>\n    </div>\n    <hr class=\"bb-block\" />\n    <div class=\"row\">\n      <div tabindex=\"0\" class=\"col-6\" *ngIf=\"hostRef.payeeDetail.phoneNumber\">\n        <p class=\"bb-block bb-block--no-margin\">\n          <b i18n=\"Contact phone number@@payee-item-detail.contact.phone\"> Phone number </b>\n        </p>\n        <p data-role=\"payee-item-detail-phone-number\">\n          {{ hostRef.payeeDetail.phoneNumber }}\n        </p>\n      </div>\n      <div tabindex=\"0\" class=\"col-6\" *ngIf=\"hostRef.payeeDetail.emailId\">\n        <p class=\"bb-block bb-block--no-margin\">\n          <b i18n=\"Contact email@@payee-item-detail.contact.email\"> Email address </b>\n        </p>\n        <p data-role=\"payee-item-detail-email\">\n          {{ hostRef.payeeDetail.emailId }}\n        </p>\n      </div>\n      <div tabindex=\"0\" class=\"col-12\" *ngIf=\"hostRef.payeeDetail.contactPerson\">\n        <p class=\"bb-block bb-block--no-margin\">\n          <b i18n=\"Contact person for contact@@payee-item-detail.contact.contactPerson\"> Contact person </b>\n        </p>\n        <p data-role=\"payee-item-detail-contact-person\">\n          {{ hostRef.payeeDetail.contactPerson }}\n        </p>\n      </div>\n      <div tabindex=\"0\" class=\"col-12\" *ngIf=\"hostRef.getAddress(hostRef.payeeDetail)\">\n        <p class=\"bb-block bb-block--no-margin\">\n          <b i18n=\"Contact address@@payee-item-detail.contact.address\"> Contact address </b>\n        </p>\n        <p data-role=\"payee-item-detail-contact-address\">\n          {{ hostRef.getAddress(hostRef.payeeDetail) }}\n        </p>\n      </div>\n      <div\n        class=\"col-12\"\n        tabindex=\"0\"\n        role=\"list\"\n        *ngIf=\"hostRef.payeeDetail.accounts && hostRef.payeeDetail.accounts.length\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item\">\n            <bb-header-ui\n              headingType=\"h3\"\n              heading=\"Account information\"\n              i18n-heading=\"Account information header text@@payee-item-detail.account.information.text\"></bb-header-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <p [ngPlural]=\"hostRef.payeeDetail.accounts.length\" data-role=\"payee-item-detail-account-info\">\n              {{ hostRef.payeeDetail.accounts.length }}\n              <ng-template ngPluralCase=\"=1\" i18n=\"Account@@payee-item-detail.contact.account.info.text\"\n                >account</ng-template\n              >\n              <ng-template ngPluralCase=\"other\" i18n=\"Accounts@@payee-item-detail.contact.accounts.info.text\"\n                >accounts</ng-template\n              >\n            </p>\n          </div>\n        </div>\n        <div\n          data-role=\"payee-account-block\"\n          tabindex=\"0\"\n          role=\"listitem\"\n          *ngFor=\"let account of hostRef.payeeDetail.accounts\"\n          class=\"bb-block bb-block--lg card card-sm bg-gray-lighter rounded\">\n          <div class=\"card-body\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item bb-stack__item--align-top\">\n                <bb-icon-ui\n                  class=\"bb-text-support\"\n                  name=\"account\"\n                  size=\"md\"\n                  color=\"support\"\n                  cropped=\"true\"></bb-icon-ui>\n              </div>\n              <div class=\"bb-stack__item\">\n                <div class=\"bb-block bb-block--md\">\n                  <p class=\"bb-block bb-block--no-margin\">\n                    <b data-role=\"payee-item-detail-account-name\">\n                      {{ account.name }}\n                    </b>\n                  </p>\n                  <p data-role=\"payee-item-detail-account-alias\">\n                    {{ account.alias }}\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"account.IBAN\"\n                    data-role=\"payee-item-detail-account-iban\">\n                    <b i18n=\"Account IBAN@@payee-item-detail.contact.account.iban.label\">IBAN: </b>\n                    {{ account.IBAN }}\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"account.accountNumber\"\n                    data-role=\"payee-item-detail-account-accountNumber\">\n                    <b i18n=\"Account accountNumber@@payee-item-detail.contact.account.accountNumber.label\">Account Number: </b>\n                    {{ account.accountNumber }}\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"account.bankName\"\n                    data-role=\"payee-item-detail-account-bank-name\">\n                    <b i18n=\"Account Bank@@payee-item-detail.contact.account.bank.label\">Bank: </b>\n                    {{ account.bankName }}\n                  </p>\n                  <p class=\"bb-block bb-block--no-margin\" *ngIf=\"account.BIC\" data-role=\"payee-item-detail-account-bic\">\n                    <b i18n=\"Account BIC@@payee-item-detail.contact.account.bic.label\">BIC: </b>\n                    {{ account.BIC }}\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"account.bankCode\"\n                    data-role=\"payee-item-detail-account-bank-code\">\n                    <b i18n=\"Account Bank code@@payee-item-detail.contact.account.bankCode.label\">Bank code: </b>\n                    {{ account.bankCode }}\n                  </p>\n                </div>\n\n                <div class=\"bb-block\">\n                  <p class=\"bb-block bb-block--no-margin\" *ngIf=\"hostRef.getBankAddress(account)\">\n                    <b i18n=\"Account Bank Address@@payee-item-detail.contact.account.bank.address.label\"\n                      >Bank branch address:</b\n                    >\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"hostRef.getBankAddress(account)\"\n                    data-role=\"payee-item-detail-account-bank-address\">\n                    {{ hostRef.getBankAddress(account) }}\n                  </p>\n\n                  <p class=\"bb-block bb-block--no-margin\" *ngIf=\"hostRef.getHoldersAddress(account)\">\n                    <b i18n=\"Account holders address@@payee-item-detail.contact.account.holders.address.label\"\n                      >Account holder`s address:</b\n                    >\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"hostRef.getHoldersAddress(account)\"\n                    data-role=\"payee-item-detail-account-holders-address\">\n                    {{ hostRef.getHoldersAddress(account) }}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0__namespace.forwardRef(function () { return PayeeItemDetailCustomizableDirective; }), selector: "[bbPayeeItemDetailCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgPlural; }), selector: "[ngPlural]", inputs: ["ngPlural"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgPluralCase; }), selector: "[ngPluralCase]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeItemDetailComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payee-item-detail',
                        templateUrl: './payee-item-detail.component.html',
                    }]
            }], propDecorators: { payeeDetail: [{
                    type: i0.Input
                }], isPaddingTop: [{
                    type: i0.Input
                }] } });
    var PayeeItemDetailCustomizableDirective = /** @class */ (function (_super) {
        __extends(PayeeItemDetailCustomizableDirective, _super);
        function PayeeItemDetailCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PayeeItemDetailCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ PayeeItemDetailCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeItemDetailCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PayeeItemDetailCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayeeItemDetailCustomizableDirective, selector: "[bbPayeeItemDetailCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeItemDetailCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPayeeItemDetailCustomizable]',
                    }]
            }] });

    var PayeeGroupTableRowComponent = /** @class */ (function () {
        function PayeeGroupTableRowComponent() {
            /**
             * Checkbox enabled flag
             */
            this.checkboxEnabled = false;
            /**
             * Checkbox form control
             */
            this.checkboxFormControl = new i9.FormControl();
            /**
             * Row view modifier
             */
            this.modifier = 'none';
            /**
             * Checkbox change event emitter
             */
            this.checkboxChange = new i0.EventEmitter();
        }
        return PayeeGroupTableRowComponent;
    }());
    /** @nocollapse */ PayeeGroupTableRowComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeGroupTableRowComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayeeGroupTableRowComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayeeGroupTableRowComponent, selector: "bb-payee-group-table-row", inputs: { payee: "payee", checkboxEnabled: "checkboxEnabled", checkboxFormControl: "checkboxFormControl", modifier: "modifier" }, outputs: { checkboxChange: "checkboxChange" }, ngImport: i0__namespace, template: "<bb-collapsible-ui #collapsible>\n  <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n    <div\n      class=\"row no-gutters\"\n      role=\"button\"\n      (click)=\"toggle()\"\n      (keydown.enter)=\"toggle()\"\n      tabindex=\"0\"\n      [attr.aria-expanded]=\"isOpen\">\n      <div class=\"col-auto\" *ngIf=\"checkboxEnabled\">\n        <bb-input-checkbox-ui\n          data-role=\"payee-group-table-item-checkbox\"\n          label=\"&nbsp;\"\n          [formControl]=\"checkboxFormControl\"\n          (change)=\"checkboxChange.emit($event)\"></bb-input-checkbox-ui>\n      </div>\n      <div class=\"col-4 mr-auto\">\n        <div class=\"bb-inline-stack\">\n          <span\n            class=\"bb-inline-stack__item bb-subtitle\"\n            data-role=\"payee-group-table-row-name-container\"\n            [ngClass]=\"{\n              'bb-approval-log-item-bound-value--highlight': modifier === 'highlight',\n              'bb-text-bold': modifier === 'highlight' || modifier === 'line-thru'\n            }\">\n            <bb-ellipsis-ui\n              data-role=\"payee-group-table-row-name\"\n              [text]=\"payee.name\"\n              tooltipTriggers=\"hover\"></bb-ellipsis-ui>\n          </span>\n        </div>\n      </div>\n      <div class=\"col-auto\">\n        <bb-icon-ui [name]=\"collapsible.isOpen ? 'toggle-up' : 'toggle-down'\" [inverse]=\"true\" size=\"md\"></bb-icon-ui>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template bbCollapsibleBody>\n    <bb-payee-item-detail [payeeDetail]=\"payee\"></bb-payee-item-detail>\n  </ng-template>\n</bb-collapsible-ui>\n", components: [{ type: i1__namespace$5.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i3__namespace$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i3__namespace$2.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i1__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: PayeeItemDetailComponent, selector: "bb-payee-item-detail", inputs: ["payeeDetail", "isPaddingTop"] }], directives: [{ type: i1__namespace$5.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$5.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeGroupTableRowComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payee-group-table-row',
                        templateUrl: './payee-group-table-row.component.html',
                    }]
            }], propDecorators: { payee: [{
                    type: i0.Input
                }], checkboxEnabled: [{
                    type: i0.Input
                }], checkboxFormControl: [{
                    type: i0.Input
                }], modifier: [{
                    type: i0.Input
                }], checkboxChange: [{
                    type: i0.Output
                }] } });

    var PAYEE_GROUP_DETAILS_ERROR = 'PAYEE_GROUP_DETAILS_ERROR';
    var PayeeGroupDetailModalComponent = /** @class */ (function () {
        function PayeeGroupDetailModalComponent(dataGroupDetailsService, activeRoute) {
            var _this = this;
            this.dataGroupDetailsService = dataGroupDetailsService;
            this.activeRoute = activeRoute;
            /**
             * Component context
             */
            this.hostRef = this;
            this.itemsPerPage = 10;
            /**
             * Flag to show modal
             */
            this.isOpen = false;
            /**
             * Payee group name
             */
            this.payeeGroupName = '';
            this.targetSaId = '';
            /**
             * Event emitter that emits on cancel button click
             */
            this.cancel = new i0.EventEmitter();
            this.selectedPayeeGroupPayeesCurrentPageSubject = new rxjs.BehaviorSubject(0);
            this.selectedPayeeGroupPayeesCurrentPage$ = this.selectedPayeeGroupPayeesCurrentPageSubject.asObservable();
            this.selectedPayeeGroupPayeesSearchQuerySubject = new rxjs.BehaviorSubject('');
            this.selectedPayeeGroupPayeesSearchQuery$ = this.selectedPayeeGroupPayeesSearchQuerySubject.asObservable();
            this.selectedPayeeGroupSubject = new rxjs.ReplaySubject();
            this.selectedPayeeGroup$ = this.selectedPayeeGroupSubject.asObservable();
            this.serviceAgreement$ = i1$3.getRouteParams(this.activeRoute, 'serviceAgreementId').pipe(operators.switchMap(function (id) {
                var idSa = id;
                if (_this.targetSaId && !id) {
                    idSa = _this.targetSaId;
                }
                return idSa
                    ? _this.dataGroupDetailsService.getServiceAgreement(idSa)
                    : _this.dataGroupDetailsService.serviceAgreementFromContext;
            }), operators.shareReplay(1));
            this.selectedPayeeGroupDetails$ = rxjs.combineLatest([
                this.selectedPayeeGroup$,
                this.selectedPayeeGroupPayeesCurrentPage$,
                this.selectedPayeeGroupPayeesSearchQuery$,
                this.serviceAgreement$,
            ]).pipe(operators.auditTime(100), operators.switchMap(function (_a) {
                var _b = __read(_a, 4), items = _b[0], from = _b[1], query = _b[2], serviceAgreement = _b[3];
                if (items.length) {
                    return _this.dataGroupDetailsService
                        .getPayeeGroupContacts(items, { from: from, query: query, targetSaId: serviceAgreement.serviceAgreement.id })
                        .pipe(operators.map(function (payees) { return ({
                        data: payees.data,
                        totalCount: payees.totalCount,
                    }); }), operators.catchError(function () {
                        return rxjs.of(PAYEE_GROUP_DETAILS_ERROR);
                    }));
                }
                return rxjs.of();
            }), operators.shareReplay(1));
            this.selectedPayeeGroupError$ = this.selectedPayeeGroupDetails$.pipe(operators.map(function (data) { return data === PAYEE_GROUP_DETAILS_ERROR; }));
            this.loadingSelectedPayee$ = rxjs.merge(this.selectedPayeeGroupSubject.pipe(operators.mapTo(true)), this.selectedPayeeGroupPayeesCurrentPageSubject.pipe(operators.mapTo(true)), this.selectedPayeeGroupPayeesSearchQuerySubject.pipe(operators.mapTo(true)), this.selectedPayeeGroupDetails$.pipe(operators.mapTo(false)));
        }
        Object.defineProperty(PayeeGroupDetailModalComponent.prototype, "payeeIds", {
            /**
             * Setter for payee Ids
             */
            set: function (val) {
                if (val) {
                    this.selectedPayeeGroupSubject.next(val);
                    this.selectedPayeeGroupPayeesCurrentPageSubject.next(0);
                    this.selectedPayeeGroupPayeesSearchQuerySubject.next('');
                }
            },
            enumerable: false,
            configurable: true
        });
        PayeeGroupDetailModalComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        PayeeGroupDetailModalComponent.prototype.pageChange = function (page) {
            this.selectedPayeeGroupPayeesCurrentPageSubject.next(page);
        };
        PayeeGroupDetailModalComponent.prototype.searchSubmit = function (query) {
            this.selectedPayeeGroupPayeesCurrentPageSubject.next(0);
            this.selectedPayeeGroupPayeesSearchQuerySubject.next(query);
        };
        return PayeeGroupDetailModalComponent;
    }());
    /** @nocollapse */ PayeeGroupDetailModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeGroupDetailModalComponent, deps: [{ token: i1__namespace$3.UserPermissionsDataGroupDetailsService }, { token: i2__namespace$4.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayeeGroupDetailModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayeeGroupDetailModalComponent, selector: "bb-payee-group-detail-modal", inputs: { isOpen: "isOpen", payeeGroupName: "payeeGroupName", targetSaId: "targetSaId", payeeIds: "payeeIds" }, outputs: { cancel: "cancel" }, providers: [], ngImport: i0__namespace, template: "<ng-container\n  bbPayeeGroupDetailModalCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    selectedPayeeGroupDetails: selectedPayeeGroupDetails$ | async,\n    loadingSelectedPayee: loadingSelectedPayee$ | async,\n    selectedPayeeGroupPayeesCurrentPage: selectedPayeeGroupPayeesCurrentPage$ | async,\n    selectedPayeeGroupError: selectedPayeeGroupError$ | async,\n    selectedPayeeGroup: selectedPayeeGroup$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbPayeeGroupDetailModalCustomizable\n  let-hostRef\n  let-selectedPayeeGroupDetails=\"context.selectedPayeeGroupDetails\"\n  let-loadingSelectedPayee=\"context.loadingSelectedPayee\"\n  let-selectedPayeeGroupPayeesCurrentPage=\"context.selectedPayeeGroupPayeesCurrentPage\"\n  let-selectedPayeeGroupError=\"context.selectedPayeeGroupError\"\n  let-selectedPayeeGroup=\"context.selectedPayeeGroup\">\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"payee-group-detail-modal\">\n    <bb-modal-header-ui\n      title=\"Detail for {{ hostRef.payeeGroupName }}\"\n      i18n-title=\"Title of payee group modal detail@payee-group-detail-modal.title\"\n      data-role=\"payee-modal-title\"></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container *ngIf=\"!selectedPayeeGroupError; else errorTemplate\">\n          <ng-container *ngIf=\"selectedPayeeGroup && selectedPayeeGroup.length; else empty\">\n            <div data-role=\"payee-group-modal-detail\">\n              <bb-search-box-ui\n                *ngIf=\"hostRef.isOpen\"\n                size=\"md\"\n                placeholder=\"Search\"\n                i18n-placeholder=\"Search placeholder@@payee-group-detail-modal.search.placeholder\"\n                [showClear]=\"true\"\n                [showSearch]=\"true\"\n                (clear)=\"hostRef.searchSubmit('')\"\n                (submit)=\"hostRef.searchSubmit($event)\"\n                data-role=\"payee-group-table-search\"></bb-search-box-ui>\n              <ng-container *ngIf=\"selectedPayeeGroupDetails && !loadingSelectedPayee; else loadingTemplate\">\n                <ng-container *ngIf=\"selectedPayeeGroupDetails.data.length; else empty\">\n                  <div class=\"bb-inline-stack\">\n                    <span\n                      class=\"bb-inline-stack__item bb-subheader bb-subheader--regular bb-text-bold\"\n                      i18n=\"Table header name@@payee-group-detail-modal.row.header.name\"\n                      >Name</span\n                    >\n                  </div>\n                  <hr />\n                  <div *ngFor=\"let payee of selectedPayeeGroupDetails.data\">\n                    <bb-payee-group-table-row data-role=\"payee-item\" [payee]=\"payee\"></bb-payee-group-table-row>\n                    <hr />\n                  </div>\n                  <bb-pagination-ui\n                    data-role=\"payee-group-table-pagination\"\n                    [page]=\"selectedPayeeGroupPayeesCurrentPage\"\n                    [boundaryLinks]=\"true\"\n                    [directionLinks]=\"true\"\n                    [totalItems]=\"selectedPayeeGroupDetails.totalCount\"\n                    [itemsPerPage]=\"itemsPerPage\"\n                    (pageChange)=\"hostRef.pageChange($event)\"></bb-pagination-ui>\n                </ng-container>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            i18n=\"Cancel button@payee-group-detail-modal.cancel-btn\"\n            data-role=\"payee-group-modal-detail-cancel-btn\">\n            Cancel\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"payee-detail-loading\">\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorTemplate>\n  <bb-empty-state-ui\n    data-role=\"general-error-state\"\n    title=\"Unknown Error\"\n    i18n-title=\"Title for error state for payee group errors@@payee-group-detail-modal.unknown.title\"\n    subtitle=\"Try to reload the page or contact the system<br> administrator.\"\n    i18n-subtitle=\"Message for error state for payee group errors@@payee-group-detail-modal.unknown.subtitle\"\n    iconSize=\"xxl\"\n    iconModifier=\"error-outline\"></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #empty>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"payee-group-table-empty-state\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"info\"\n      title=\"No payees found\"\n      i18n-title=\"Label for empty list of payees@@payee-group-detail-modal.empty.title\"\n      subtitle=\"You don't have any payees to be displayed.\"\n      i18n-subtitle=\"Payees empty state message@@payee-group-detail-modal.empty.subtitle\"></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i4__namespace$2.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0__namespace.forwardRef(function () { return PayeeGroupTableRowComponent; }), selector: "bb-payee-group-table-row", inputs: ["payee", "checkboxEnabled", "checkboxFormControl", "modifier"], outputs: ["checkboxChange"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$2.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return PayeeGroupDetailModalCustomizableDirective; }), selector: "[bbPayeeGroupDetailModalCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace.AsyncPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeGroupDetailModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payee-group-detail-modal',
                        templateUrl: './payee-group-detail-modal.component.html',
                        providers: [],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.UserPermissionsDataGroupDetailsService }, { type: i2__namespace$4.ActivatedRoute }]; }, propDecorators: { isOpen: [{
                    type: i0.Input
                }], payeeGroupName: [{
                    type: i0.Input
                }], targetSaId: [{
                    type: i0.Input
                }], payeeIds: [{
                    type: i0.Input
                }], cancel: [{
                    type: i0.Output
                }] } });
    var PayeeGroupDetailModalCustomizableDirective = /** @class */ (function (_super) {
        __extends(PayeeGroupDetailModalCustomizableDirective, _super);
        function PayeeGroupDetailModalCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PayeeGroupDetailModalCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ PayeeGroupDetailModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeGroupDetailModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PayeeGroupDetailModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayeeGroupDetailModalCustomizableDirective, selector: "[bbPayeeGroupDetailModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayeeGroupDetailModalCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPayeeGroupDetailModalCustomizable]',
                    }]
            }] });

    var ACCOUNT_GROUP_DETAILS_ERROR = 'ACCOUNT_GROUP_DETAILS_ERROR';
    var AccountGroupDetailModalComponent = /** @class */ (function () {
        function AccountGroupDetailModalComponent(dataGroupDetailsService, activeRoute) {
            var _this = this;
            this.dataGroupDetailsService = dataGroupDetailsService;
            this.activeRoute = activeRoute;
            /**
             * Component context
             */
            this.hostRef = this;
            this.itemsPerPage = 10;
            /**
             * Flag to show modal
             */
            this.isOpen = false;
            this.targetSaId = '';
            /**
             * Account group name
             */
            this.accountGroupName = '';
            this.legalEntityIds = [];
            /**
             * Event emitter that emits on cancel button click
             */
            this.cancel = new i0.EventEmitter();
            this.serviceAgreement$ = i1$3.getRouteParams(this.activeRoute, 'serviceAgreementId').pipe(operators.switchMap(function (id) {
                var idSa = id;
                if (_this.targetSaId && !id) {
                    idSa = _this.targetSaId;
                }
                return idSa
                    ? _this.dataGroupDetailsService.getServiceAgreement(idSa)
                    : _this.dataGroupDetailsService.serviceAgreementFromContext;
            }), operators.shareReplay(1));
            this.selectedAccountGroupAccountsCurrentPageSubject = new rxjs.BehaviorSubject(0);
            this.selectedAccountGroupAccountsCurrentPage$ = this.selectedAccountGroupAccountsCurrentPageSubject.asObservable();
            this.selectedAccountGroupAccountsSearchQuerySubject = new rxjs.BehaviorSubject('');
            this.selectedAccountGroupAccountsSearchQuery$ = this.selectedAccountGroupAccountsSearchQuerySubject.asObservable();
            this.selectedAccountGroupSubject = new rxjs.ReplaySubject();
            this.selectedAccountGroup$ = this.selectedAccountGroupSubject.asObservable();
            this.selectedAccountGroupDetails$ = rxjs.combineLatest([
                this.selectedAccountGroup$,
                this.selectedAccountGroupAccountsCurrentPage$,
                this.selectedAccountGroupAccountsSearchQuery$,
                this.serviceAgreement$,
            ]).pipe(operators.auditTime(100), operators.switchMap(function (_a) {
                var _b = __read(_a, 4), items = _b[0], from = _b[1], searchQuery = _b[2], serviceAgreement = _b[3];
                var legalEntityIds = _this.legalEntityIds;
                if (serviceAgreement.participants) {
                    legalEntityIds = [];
                    serviceAgreement.participants.forEach(function (el) {
                        if (el.sharingAccounts) {
                            legalEntityIds.push(el.id);
                        }
                    });
                }
                if (items.length) {
                    return _this.dataGroupDetailsService
                        .getAccountGroupItems({
                        items: items,
                        from: from,
                        size: _this.itemsPerPage,
                        searchTerm: searchQuery,
                        legalEntityIds: legalEntityIds,
                    })
                        .pipe(operators.map(function (accounts) { return ({
                        data: accounts.items,
                        totalCount: accounts.totalCount,
                    }); }), operators.catchError(function () {
                        return rxjs.of(ACCOUNT_GROUP_DETAILS_ERROR);
                    }));
                }
                return rxjs.of();
            }), operators.shareReplay(1));
            this.selectedAccountGroupError$ = this.selectedAccountGroupDetails$.pipe(operators.map(function (data) { return data === ACCOUNT_GROUP_DETAILS_ERROR; }));
            this.loadingSelectedAccount$ = rxjs.merge(this.selectedAccountGroupSubject.pipe(operators.mapTo(true)), this.selectedAccountGroupAccountsCurrentPageSubject.pipe(operators.mapTo(true)), this.selectedAccountGroupAccountsSearchQuerySubject.pipe(operators.mapTo(true)), this.selectedAccountGroupDetails$.pipe(operators.mapTo(false)));
        }
        Object.defineProperty(AccountGroupDetailModalComponent.prototype, "accountIds", {
            /**
             * Setter for account Ids
             */
            set: function (val) {
                if (val) {
                    this.selectedAccountGroupSubject.next(val);
                    this.selectedAccountGroupAccountsCurrentPageSubject.next(0);
                    this.selectedAccountGroupAccountsSearchQuerySubject.next('');
                }
            },
            enumerable: false,
            configurable: true
        });
        AccountGroupDetailModalComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        AccountGroupDetailModalComponent.prototype.pageChange = function (page) {
            this.selectedAccountGroupAccountsCurrentPageSubject.next(page);
        };
        AccountGroupDetailModalComponent.prototype.searchSubmit = function (query) {
            this.selectedAccountGroupAccountsCurrentPageSubject.next(0);
            this.selectedAccountGroupAccountsSearchQuerySubject.next(query);
        };
        return AccountGroupDetailModalComponent;
    }());
    /** @nocollapse */ AccountGroupDetailModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountGroupDetailModalComponent, deps: [{ token: i1__namespace$3.UserPermissionsDataGroupDetailsService }, { token: i2__namespace$4.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccountGroupDetailModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountGroupDetailModalComponent, selector: "bb-account-group-detail-modal", inputs: { isOpen: "isOpen", targetSaId: "targetSaId", accountGroupName: "accountGroupName", legalEntityIds: "legalEntityIds", accountIds: "accountIds" }, outputs: { cancel: "cancel" }, providers: [], ngImport: i0__namespace, template: "<ng-container\n  bbAccountGroupDetailModalCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    selectedAccountGroupDetails: selectedAccountGroupDetails$ | async,\n    loadingSelectedAccount: loadingSelectedAccount$ | async,\n    selectedAccountGroupAccountsCurrentPage: selectedAccountGroupAccountsCurrentPage$ | async,\n    selectedAccountGroupError: selectedAccountGroupError$ | async,\n    selectedAccountGroup: selectedAccountGroup$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbAccountGroupDetailModalCustomizable\n  let-hostRef\n  let-selectedAccountGroupDetails=\"context.selectedAccountGroupDetails\"\n  let-loadingSelectedAccount=\"context.loadingSelectedAccount\"\n  let-selectedAccountGroupAccountsCurrentPage=\"context.selectedAccountGroupAccountsCurrentPage\"\n  let-selectedAccountGroupError=\"context.selectedAccountGroupError\"\n  let-selectedAccountGroup=\"context.selectedAccountGroup\">\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"account-group-detail-modal\">\n    <bb-modal-header-ui\n      title=\"Detail for {{ hostRef.accountGroupName }}\"\n      i18n-title=\"Title of account group modal detail@account-group-detail-modal.title\"\n      data-role=\"account-modal-title\"></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container *ngIf=\"!selectedAccountGroupError; else errorTemplate\">\n          <ng-container *ngIf=\"selectedAccountGroup && selectedAccountGroup.length; else empty\">\n            <div data-role=\"account-group-modal-detail\">\n              <bb-search-box-ui\n                *ngIf=\"hostRef.isOpen\"\n                size=\"md\"\n                placeholder=\"Search\"\n                i18n-placeholder=\"Search placeholder@@account-group-detail-modal.search.placeholder\"\n                [showClear]=\"true\"\n                [showSearch]=\"true\"\n                (clear)=\"hostRef.searchSubmit('')\"\n                (submit)=\"hostRef.searchSubmit($event)\"\n                data-role=\"account-group-table-search\"></bb-search-box-ui>\n              <ng-container *ngIf=\"selectedAccountGroupDetails && !loadingSelectedAccount; else loadingTemplate\">\n                <ng-container *ngIf=\"selectedAccountGroupDetails.data.length; else empty\">\n                  <div class=\"row\">\n                    <div class=\"col-6\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.name\"\n                        >Name</span\n                      >\n                    </div>\n                    <div class=\"col-4\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.number\">\n                        Number\n                      </span>\n                    </div>\n\n                    <div class=\"col-2\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.currency\">\n                        Currency\n                      </span>\n                    </div>\n                  </div>\n                  <hr />\n                  <div *ngFor=\"let account of selectedAccountGroupDetails.data\" data-role=\"account-item\">\n                    <div class=\"row\">\n                      <div class=\"col-6\">\n                        <div data-role=\"account-detail-name\">\n                          {{ account.displayName }}\n                        </div>\n                        <div class=\"bb-text-support text-small\" data-role=\"account-detail-type\">\n                          {{ account.productTypeName }}\n                        </div>\n                      </div>\n                      <div class=\"col-4\">\n                        <span class=\"text-small\" data-role=\"account-detail-number\">\n                          {{ account.IBAN || account.BBAN || account.productNumber || account.number }}\n                        </span>\n                      </div>\n\n                      <div class=\"col-2\">\n                        <span class=\"text-small\" data-role=\"account-detail-currency\">\n                          {{ account.currency }}\n                        </span>\n                      </div>\n                    </div>\n                    <hr />\n                  </div>\n\n                  <bb-pagination-ui\n                    data-role=\"account-group-table-pagination\"\n                    [page]=\"selectedAccountGroupAccountsCurrentPage\"\n                    [boundaryLinks]=\"true\"\n                    [directionLinks]=\"true\"\n                    [totalItems]=\"selectedAccountGroupDetails.totalCount\"\n                    [itemsPerPage]=\"itemsPerPage\"\n                    (pageChange)=\"hostRef.pageChange($event)\"></bb-pagination-ui>\n                </ng-container>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            i18n=\"Cancel button@account-group-detail-modal.cancel-btn\"\n            data-role=\"account-group-modal-detail-cancel-btn\">\n            Cancel\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"account-detail-loading\">\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorTemplate>\n  <bb-empty-state-ui\n    data-role=\"general-error-state\"\n    title=\"Unknown Error\"\n    i18n-title=\"Title for error state for account group errors@@account-group-detail-modal.unknown.title\"\n    subtitle=\"Try to reload the page or contact the system<br> administrator.\"\n    i18n-subtitle=\"Message for error state for account group errors@@account-group-detail-modal.unknown.subtitle\"\n    iconSize=\"xxl\"\n    iconModifier=\"error-outline\"></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #empty>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"account-group-table-empty-state\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"info\"\n      title=\"No accounts found\"\n      i18n-title=\"Label for empty list of accounts@@account-group-detail-modal.empty.title\"\n      subtitle=\"You don't have any accounts to be displayed.\"\n      i18n-subtitle=\"Accounts empty state message@@account-group-detail-modal.empty.subtitle\"></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i4__namespace$2.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$2.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountGroupDetailModalCustomizableDirective; }), selector: "[bbAccountGroupDetailModalCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace.AsyncPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountGroupDetailModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-group-detail-modal',
                        templateUrl: './account-group-detail-modal.component.html',
                        providers: [],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.UserPermissionsDataGroupDetailsService }, { type: i2__namespace$4.ActivatedRoute }]; }, propDecorators: { isOpen: [{
                    type: i0.Input
                }], targetSaId: [{
                    type: i0.Input
                }], accountGroupName: [{
                    type: i0.Input
                }], legalEntityIds: [{
                    type: i0.Input
                }], accountIds: [{
                    type: i0.Input
                }], cancel: [{
                    type: i0.Output
                }] } });
    var AccountGroupDetailModalCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountGroupDetailModalCustomizableDirective, _super);
        function AccountGroupDetailModalCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountGroupDetailModalCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ AccountGroupDetailModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountGroupDetailModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ AccountGroupDetailModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccountGroupDetailModalCustomizableDirective, selector: "[bbAccountGroupDetailModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountGroupDetailModalCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountGroupDetailModalCustomizable]',
                    }]
            }] });

    var UnassignDataGroupModalComponent = /** @class */ (function () {
        function UnassignDataGroupModalComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * Flag to show modal
             */
            this.isOpen = false;
            this.activeDataGroup = 'account';
            /**
             * Event emitter that emits on cancel button click
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Event emitter that emits on confirm button click
             */
            this.confirm = new i0.EventEmitter();
        }
        /**
         * Function to call on cancel button click
         */
        UnassignDataGroupModalComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        /**
         * Function to call on confirm button click
         */
        UnassignDataGroupModalComponent.prototype.onConfirm = function () {
            this.confirm.emit();
        };
        return UnassignDataGroupModalComponent;
    }());
    /** @nocollapse */ UnassignDataGroupModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UnassignDataGroupModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UnassignDataGroupModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UnassignDataGroupModalComponent, selector: "bb-unassign-data-group-modal", inputs: { isOpen: "isOpen", activeDataGroup: "activeDataGroup", jobRole: "jobRole", accountGroupName: "accountGroupName", payeeGroupName: "payeeGroupName" }, outputs: { cancel: "cancel", confirm: "confirm" }, ngImport: i0__namespace, template: "<ng-container bbUnassignDataGroupModalCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n\n<ng-template bbUnassignDataGroupModalCustomizable let-hostRef>\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"unassign-data-group-modal\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        hostRef.activeDataGroup === 'account' ? unassignAccountGroupHeader : unassignPayeeHeader\n      \"></ng-container>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-content></ng-content>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"danger\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onConfirm()\"\n            i18n=\"Delete button@payee-group-delete-modal.delete-btn\"\n            data-role=\"unassign-data-group-modal-unassign-btn\">\n            Unassign\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            i18n=\"Cancel button@payee-group-delete-modal.cancel-btn\"\n            data-role=\"unassign-data-group-modal-cancel-btn\">\n            Cancel\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <ng-template #unassignPayeeHeader>\n    <bb-modal-header-ui\n      title=\"Unassign '{{ hostRef.payeeGroupName }}' Payee Group from {{ hostRef.accountGroupName }} in the '{{\n        hostRef.jobRole\n      }}' job role?\"\n      i18n-title=\"Title of unassign payee modal@unassign-data-group-modal.title\"\n      data-role=\"unassign-payee-modal-modal-title\"></bb-modal-header-ui>\n  </ng-template>\n\n  <ng-template #unassignAccountGroupHeader>\n    <bb-modal-header-ui\n      title=\"Unassign '{{ hostRef.accountGroupName }}' Account Group from '{{ hostRef.jobRole }}' job role?\"\n      i18n-title=\"Title of unassign account group modal@unassign-data-group-modal.title\"\n      data-role=\"unassign-account-group-modal-title\"></bb-modal-header-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }], directives: [{ type: i0__namespace.forwardRef(function () { return UnassignDataGroupModalCustomizableDirective; }), selector: "[bbUnassignDataGroupModalCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UnassignDataGroupModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-unassign-data-group-modal',
                        templateUrl: './unassign-data-group-modal.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { isOpen: [{
                    type: i0.Input
                }], activeDataGroup: [{
                    type: i0.Input
                }], jobRole: [{
                    type: i0.Input
                }], accountGroupName: [{
                    type: i0.Input
                }], payeeGroupName: [{
                    type: i0.Input
                }], cancel: [{
                    type: i0.Output
                }], confirm: [{
                    type: i0.Output
                }] } });
    var UnassignDataGroupModalCustomizableDirective = /** @class */ (function (_super) {
        __extends(UnassignDataGroupModalCustomizableDirective, _super);
        function UnassignDataGroupModalCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UnassignDataGroupModalCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ UnassignDataGroupModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UnassignDataGroupModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ UnassignDataGroupModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UnassignDataGroupModalCustomizableDirective, selector: "[bbUnassignDataGroupModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UnassignDataGroupModalCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbUnassignDataGroupModalCustomizable]',
                    }]
            }] });

    var UserPermissionsItemBusinessFunctionDirective = /** @class */ (function () {
        function UserPermissionsItemBusinessFunctionDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return UserPermissionsItemBusinessFunctionDirective;
    }());
    /** @nocollapse */ UserPermissionsItemBusinessFunctionDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsItemBusinessFunctionDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ UserPermissionsItemBusinessFunctionDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemBusinessFunctionDirective, selector: "ng-template[bbUserPermissionsItemBusinessFunction]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsItemBusinessFunctionDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'ng-template[bbUserPermissionsItemBusinessFunction]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var UserPermissionsItemBusinessFunctionGroupNameDirective = /** @class */ (function () {
        function UserPermissionsItemBusinessFunctionGroupNameDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return UserPermissionsItemBusinessFunctionGroupNameDirective;
    }());
    /** @nocollapse */ UserPermissionsItemBusinessFunctionGroupNameDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsItemBusinessFunctionGroupNameDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ UserPermissionsItemBusinessFunctionGroupNameDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemBusinessFunctionGroupNameDirective, selector: "ng-template[bbUserPermissionsItemBusinessFunctionGroupName]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsItemBusinessFunctionGroupNameDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'ng-template[bbUserPermissionsItemBusinessFunctionGroupName]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var UserPermissionsItemComponent = /** @class */ (function () {
        function UserPermissionsItemComponent() {
            this.dataGroups = [];
            this.selectedDataGroups$ = new rxjs.BehaviorSubject([]);
            this.selectedDataGroupsForPayee$ = new rxjs.BehaviorSubject([]);
            this.selectedPayeeGroups$ = new rxjs.BehaviorSubject([]);
            this.dataGroups$ = new rxjs.BehaviorSubject([]);
            this.payeeGroups$ = new rxjs.BehaviorSubject([]);
            this.payeeDetailModal = false;
            this.accountDetailModal = false;
            this.selfApproveItemData = undefined;
            this.typeOfSelfApproveAction = '';
            this.selectedBFForSelfApprove = undefined;
            this.approvalLevelStatus = i1$3.ApprovalLevelStatus;
            /**
             * selfApproveDefaultBehavior
             */
            this.selfApproveDefaultBehavior = 'disable';
            /**
             * Whether to show approval level
             */
            this.showApprovalLevel = false;
            /**
             * Business Function to check privileges against
             */
            this.emitLimitData = new i0.EventEmitter();
            /**
             * Whether to show unassign buttons
             */
            this.showActions = false;
            /**
             * Whether to show self approval section
             */
            this.enableSelfApproval = false;
            /**
             * Whether to show payee table row
             */
            this.showPayee = true;
            /**
             * Whether to show unassign buttons
             */
            this.showFunctionGroupType = false;
            /**
             * Whether to disable save button
             */
            this.disableSaveButton = true;
            /**
             * Flag to indicate edit view
             */
            this.editView = false;
            /**
             * Legal Entity Id
             */
            this.legalEntityId = '';
            this.editedFunctionId = '';
            /**
             * Event emitter emiting on unassigning function group
             */
            this.removeFunctionGroup = new i0.EventEmitter();
            /**
             * Event emitter emiting on unassigning data group
             */
            this.removeDataGroup = new i0.EventEmitter();
            this.requestObjectEmit = new i0.EventEmitter();
            this.editedFunctionIdEmit = new i0.EventEmitter();
            this.changesMadedEmit = new i0.EventEmitter();
            this.availableDataGroupsSearchTerm$ = new rxjs.BehaviorSubject('');
            this.availableDataGroupsForPayeesSearchTerm$ = new rxjs.BehaviorSubject('');
            this.availablePayeeGroupsSearchTerm$ = new rxjs.BehaviorSubject('');
            /**
             * Switcher state data
             * @private
             */
            this.defaultSwitcherData = false;
            /**
             * Switcher value for account
             */
            this.switchAccountType$ = new rxjs.BehaviorSubject(false);
            this.splittedAccountsByType$ = rxjs.combineLatest([this.selectedDataGroups$, this.dataGroups$]).pipe(operators.map(function (_d) {
                var _e = __read(_d, 2), selectedDataGroups = _e[0], dataGroups = _e[1];
                var wizardAccounts = [];
                var customAccounts = [];
                if (dataGroups) {
                    var allDataGroups = dataGroups.filter(function (item) { return !selectedDataGroups.find(function (o) { return o.id === item.id; }); });
                    allDataGroups.forEach(function (item) {
                        var _a;
                        if ((_a = item.metadata) === null || _a === void 0 ? void 0 : _a.generated) {
                            wizardAccounts.push(Object.assign(Object.assign({}, item)));
                        }
                        else {
                            customAccounts.push(Object.assign(Object.assign({}, item)));
                        }
                    });
                }
                return { allAccounts: __spreadArray(__spreadArray([], __read(customAccounts)), __read(wizardAccounts)), wizardAccounts: wizardAccounts, customAccounts: customAccounts };
            }));
            this.availableDataGroups = rxjs.combineLatest([
                this.splittedAccountsByType$,
                this.switchAccountType$,
                this.availableDataGroupsSearchTerm$,
            ]).pipe(operators.map(function (_d) {
                var _e = __read(_d, 3), splittedAccounts = _e[0], switcherType = _e[1], query = _e[2];
                var accounts = [];
                if (!switcherType && splittedAccounts.customAccounts.length) {
                    accounts = splittedAccounts.customAccounts;
                }
                else {
                    accounts = splittedAccounts.allAccounts;
                }
                accounts = accounts.filter(function (f) { return f.name.toLowerCase().includes(query.toLowerCase()); });
                return accounts;
            }));
            this.availableDataGroupsForPayee = rxjs.combineLatest([
                this.selectedDataGroupsForPayee$,
                this.selectedDataGroups$,
                this.availableDataGroupsForPayeesSearchTerm$,
            ]).pipe(operators.map(function (_d) {
                var _e = __read(_d, 3), selectedDataGroups = _e[0], dataGroups = _e[1], query = _e[2];
                if (dataGroups) {
                    return dataGroups
                        .filter(function (item) { return !selectedDataGroups.find(function (o) { return o.id === item.id; }); })
                        .filter(function (f) { return f.name.toLowerCase().includes(query.toLowerCase()); });
                }
                return [];
            }));
            this.availablePayeeGroups = rxjs.combineLatest([
                this.selectedPayeeGroups$,
                this.payeeGroups$,
                this.availablePayeeGroupsSearchTerm$,
            ]).pipe(operators.map(function (_d) {
                var _e = __read(_d, 3), selectedDataGroups = _e[0], dataGroups = _e[1], query = _e[2];
                if (dataGroups) {
                    return dataGroups
                        .filter(function (item) { return !selectedDataGroups.find(function (o) { return o.id === item.id; }); })
                        .filter(function (f) { return f.name.toLowerCase().includes(query.toLowerCase()); });
                }
                return [];
            }));
            this.payeeIds = undefined;
            this.accountIds = undefined;
            this.payeeGroupName = '';
            this.accountGroupName = '';
            this.selectAccountGroupsModalOpened = false;
            this.selectAccountGroupsForPayeesModalOpened = false;
            this.selectPayeeGroupsModalOpened = false;
            this.activeView = 'table';
            this.activeDataGroup = 'account';
        }
        UserPermissionsItemComponent.prototype.emitLimit = function (emitData, bfName, jrName) {
            this.emitLimitData.emit(Object.assign(Object.assign({}, emitData), { bfName: bfName, jrName: jrName }));
        };
        Object.defineProperty(UserPermissionsItemComponent.prototype, "userPermissions", {
            /**
             * User Permissions Object consisting of a
             * Function Group, Grouped Business Function, Data Groups
             */
            set: function (val) {
                if (val) {
                    this._userPermissions = val;
                    if (val.dataGroups) {
                        this.dataGroups = JSON.parse(JSON.stringify(val.dataGroups));
                        this.selfApprovalPolicies = val.selfApprovalPolicies;
                        if (!this.selfApprovalPoliciesHistory) {
                            this.selfApprovalPoliciesHistory = val.selfApprovalPolicies;
                        }
                        this.selectedDataGroups$.next(val.dataGroups);
                        this.getAllLinkedPayees(val.dataGroups);
                        this.emitRequestObject();
                        this.preEditDataGroupState = JSON.parse(JSON.stringify(this.dataGroups));
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserPermissionsItemComponent.prototype, "dataGroup", {
            /**
             * Account Group setter
             */
            set: function (val) {
                if (val) {
                    this.dataGroups$.next(val);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserPermissionsItemComponent.prototype, "payeeGroups", {
            /**
             * Payee Group setter
             */
            set: function (val) {
                if (val) {
                    this.payeeGroups$.next(val);
                }
            },
            enumerable: false,
            configurable: true
        });
        UserPermissionsItemComponent.prototype.switchAccounts = function () {
            this.defaultSwitcherData = !this.defaultSwitcherData;
            this.switchAccountType$.next(this.defaultSwitcherData);
        };
        UserPermissionsItemComponent.prototype.onRemoveFunctionGroup = function () {
            this.removeFunctionGroup.emit();
        };
        UserPermissionsItemComponent.prototype.onRemoveDataGroup = function (dg) {
            this.removeDataGroup.emit(dg);
        };
        UserPermissionsItemComponent.prototype.showLinkedPayee = function (dg) {
            this.selectedPg = undefined;
            if (this.selectedDg === dg) {
                this.selectedDg = undefined;
            }
            else {
                this.selectedDg = dg;
            }
        };
        UserPermissionsItemComponent.prototype.selectedPG = function (pg) {
            if (this.selectedPg === pg) {
                this.selectedPg = undefined;
            }
            else {
                this.selectedPg = pg;
            }
        };
        UserPermissionsItemComponent.prototype.checkInclude = function (payees) {
            var _this = this;
            if (payees && this.selectedPg) {
                return payees.filter(function (val) {
                    return val.id === _this.selectedPg.id;
                }).length;
            }
            return false;
        };
        UserPermissionsItemComponent.prototype.getAccountGroupLinked = function (payee) {
            var accountGroups = [];
            this.dataGroups.forEach(function (el) {
                if (el['payees'] &&
                    el['payees'].filter(function (val) {
                        return val.id === payee.id;
                    }).length) {
                    accountGroups.push(el);
                }
            });
            return accountGroups;
        };
        UserPermissionsItemComponent.prototype.getAccountGroupLinkedString = function (payee) {
            var accountGroups = '';
            this.dataGroups.forEach(function (el, idx, array) {
                if (el['payees'] &&
                    el['payees'].filter(function (val) {
                        return val.id === payee.id;
                    }).length) {
                    accountGroups = accountGroups + "'" + el.name + "'";
                    if (idx !== array.length - 1) {
                        accountGroups = accountGroups + ', ';
                    }
                }
            });
            return accountGroups;
        };
        UserPermissionsItemComponent.prototype.assignDataGroups = function (val) {
            var _this = this;
            val.forEach(function (item) {
                _this.dataGroups.push(Object.assign({}, item));
            });
            this.selectedDataGroups$.next(this.dataGroups);
            this.emitRequestObject();
        };
        UserPermissionsItemComponent.prototype.searchAvailableDataGroups = function (val) {
            this.availableDataGroupsSearchTerm$.next(val);
        };
        UserPermissionsItemComponent.prototype.searchAvailablePayeeGroups = function (val) {
            this.availablePayeeGroupsSearchTerm$.next(val);
        };
        UserPermissionsItemComponent.prototype.searchAvailableDataGroupsForPayees = function (val) {
            this.availableDataGroupsForPayeesSearchTerm$.next(val);
        };
        UserPermissionsItemComponent.prototype.addAccountGroup = function () {
            this.defaultSwitcherData = false;
            this.switchAccountType$.next(false);
            this.availableDataGroupsSearchTerm$.next('');
            this.selectAccountGroupsModalOpened = true;
        };
        UserPermissionsItemComponent.prototype.assignPayee = function (payees, dataGroups) {
            this.availablePayeeGroupsSearchTerm$.next('');
            this.selectedPayeeGroups$.next(payees ? payees : []);
            this.selectPayeeGroupsModalOpened = true;
            this.selectedForAssignAccountGroup = this.dataGroups.find(function (o) { return o.id === dataGroups.id; });
        };
        UserPermissionsItemComponent.prototype.assignPayeeGroups = function (val) {
            var _this = this;
            this.dataGroups.forEach(function (element, index) {
                if (_this.selectedForAssignAccountGroup && element.id === _this.selectedForAssignAccountGroup.id) {
                    if (_this.dataGroups[index].payees) {
                        val.forEach(function (item) {
                            _this.dataGroups[index].payees.push(Object.assign({}, item));
                        });
                    }
                    else {
                        _this.dataGroups[index].payees = val;
                    }
                }
            });
            if (this._userPermissions) {
                this.getAllLinkedPayees(this.dataGroups);
            }
            this.emitRequestObject();
        };
        UserPermissionsItemComponent.prototype.assignDataGroupsForPayee = function (val) {
            var _this = this;
            val.forEach(function (el) {
                var _d;
                var filteredDataGroup = _this.dataGroups.find(function (o) { return o.id === el.id; });
                if (!filteredDataGroup) {
                    (_d = _this.dataGroups).push.apply(_d, __spreadArray([], __read(val)));
                }
                var findObject = _this.dataGroups.find(function (o) { return o.id === el.id; });
                if (findObject) {
                    if (filteredDataGroup && filteredDataGroup.payees && _this.selectedForAssignAccountGroupForPayee) {
                        findObject.payees.push(_this.selectedForAssignAccountGroupForPayee);
                    }
                    else {
                        findObject.payees = [];
                        if (_this.selectedForAssignAccountGroupForPayee) {
                            findObject.payees.push(_this.selectedForAssignAccountGroupForPayee);
                        }
                    }
                }
            });
            this.getAllLinkedPayees(this.dataGroups);
            this.emitRequestObject();
        };
        UserPermissionsItemComponent.prototype.addAccountGroupToPayee = function (payee) {
            this.selectedForAssignAccountGroupForPayee = payee;
            this.selectedDataGroupsForPayee$.next(this.getAccountGroupLinked(payee));
            this.selectAccountGroupsForPayeesModalOpened = true;
        };
        UserPermissionsItemComponent.prototype.getAllLinkedPayees = function (val) {
            var payees = [];
            val.forEach(function (el) {
                if (el['payees']) {
                    payees.push.apply(payees, __spreadArray([], __read(el['payees'])));
                }
            });
            this.allLinkedPayee = payees.filter(function (v, i, a) { return a.findIndex(function (t) { return t.id === v.id; }) === i; });
        };
        UserPermissionsItemComponent.prototype.removeAccountGroup = function (accountGroup) {
            var _this = this;
            this.dataGroups = this.dataGroups.filter(function (item) {
                _this.dataGroupForRemove = undefined;
                return item.id !== accountGroup.id;
            });
            this.getAllLinkedPayees(this.dataGroups);
            this.selectedDataGroups$.next(this.dataGroups);
            this.emitRequestObject();
        };
        UserPermissionsItemComponent.prototype.removedPayeeGroup = function (payyeGroup, accountGroup) {
            this.dataGroups.forEach(function (el) {
                if (el.id === accountGroup.id) {
                    el.payees = __spreadArray([], __read(el.payees.filter(function (item) {
                        return item !== payyeGroup;
                    })));
                }
            });
            this.getAllLinkedPayees(this.dataGroups);
            this.emitRequestObject();
        };
        UserPermissionsItemComponent.prototype.removePayeeGroupLinking = function (payee) {
            var _this = this;
            this.dataGroups.forEach(function (el) {
                if (el.payees) {
                    _this.dataGroupForRemove = undefined;
                    el.payees = el.payees.filter(function (value) {
                        return value.id !== payee.id;
                    });
                }
            });
            this.getAllLinkedPayees(this.dataGroups);
            if (this.allLinkedPayee.length === 0) {
                this.activeDataGroup = 'account';
            }
            this.emitRequestObject();
        };
        UserPermissionsItemComponent.prototype.removedAccountGroupFromPayee = function (payee, account) {
            this.dataGroups.forEach(function (el) {
                if (el.id === account.id) {
                    el.payees = el.payees.filter(function (value) {
                        return value.id !== payee.id;
                    });
                }
            });
            this.getAllLinkedPayees(this.dataGroups);
            if (this.allLinkedPayee.length === 0) {
                this.activeDataGroup = 'account';
            }
            this.emitRequestObject();
        };
        UserPermissionsItemComponent.prototype.onEditPayee = function () {
            this.preEditDataGroupState = JSON.parse(JSON.stringify(this.dataGroups));
            this.editedFunctionIdEmit.emit(this._userPermissions ? this._userPermissions.id : undefined);
        };
        UserPermissionsItemComponent.prototype.onCancel = function () {
            this.editView = false;
            this.dataGroups = JSON.parse(JSON.stringify(this.preEditDataGroupState));
            this.getAllLinkedPayees(this.dataGroups);
            this.selectedDataGroups$.next(this.dataGroups);
            this.editedFunctionIdEmit.emit(undefined);
        };
        UserPermissionsItemComponent.prototype.emitRequestObject = function () {
            var _d;
            var _this = this;
            this.objectForRequest = [];
            this.dataGroups.forEach(function (accountGroup) {
                if (_this._userPermissions) {
                    var dataObj_1 = [];
                    dataObj_1.push({ id: accountGroup.id });
                    if (accountGroup.payees) {
                        accountGroup.payees.forEach(function (payeeGroup) {
                            dataObj_1.push({ id: payeeGroup.id });
                        });
                    }
                    _this.objectForRequest.push({ functionGroupId: _this._userPermissions.id, dataGroupIds: dataObj_1 });
                }
            });
            if (this.objectForRequest.length === 0 && this._userPermissions) {
                this.objectForRequest.push({ functionGroupId: this._userPermissions.id, dataGroupIds: [] });
            }
            if (this.objectForRequest.length !== 0 && this.selfApprovalPolicies && this.selfApprovalPolicies.length) {
                this.objectForRequest.forEach(function (el) {
                    var _a;
                    el.selfApprovalPolicies = (_a = _this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.filter(function (item) { return !_this.checkForUnsetPolicies(item); });
                });
            }
            this.requestObjectEmit.emit(this.objectForRequest);
            if (this._userPermissions && this.dataGroups && this.preEditDataGroupState) {
                this.changesMadedEmit.emit((_d = {}, _d[this._userPermissions.id] = this.checkChanges(), _d));
            }
        };
        UserPermissionsItemComponent.prototype.onSave = function () {
            this.emitRequestObject();
        };
        UserPermissionsItemComponent.prototype.checkForUnsetPolicies = function (el) {
            var _a, _b;
            return ((el.canSelfApprove && this.selfApproveDefaultBehavior === 'enable' && !((_a = el.bounds) === null || _a === void 0 ? void 0 : _a.length)) ||
                (!el.canSelfApprove && this.selfApproveDefaultBehavior === 'disable' && !((_b = el.bounds) === null || _b === void 0 ? void 0 : _b.length)));
        };
        UserPermissionsItemComponent.prototype.checkChanges = function () {
            var _this = this;
            var _a, _b;
            if (this.dataGroups.length !== this.preEditDataGroupState.length) {
                return false;
            }
            else {
                var _loop_1 = function (i) {
                    var savedObject = this_1.preEditDataGroupState.find(function (el) { return el.id === _this.dataGroups[i].id; });
                    if (!savedObject) {
                        return { value: false };
                    }
                    else if (this_1.checkPayeesForChanges(savedObject.payees, this_1.dataGroups[i].payees)) {
                        return { value: false };
                    }
                };
                var this_1 = this;
                for (var i = 0; i < this.dataGroups.length; i++) {
                    var state_1 = _loop_1(i);
                    if (typeof state_1 === "object")
                        return state_1.value;
                }
            }
            var resultA = (_a = this.selfApprovalPoliciesHistory) === null || _a === void 0 ? void 0 : _a.filter(function (elm) { var _a; return !((_a = _this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.map(function (elm) { return JSON.stringify(elm); }).includes(JSON.stringify(elm))); });
            var resultB = (_b = this.selfApprovalPolicies) === null || _b === void 0 ? void 0 : _b.filter(function (elm) { var _a; return !((_a = _this.selfApprovalPoliciesHistory) === null || _a === void 0 ? void 0 : _a.map(function (elm) { return JSON.stringify(elm); }).includes(JSON.stringify(elm))); });
            if ((resultA === null || resultA === void 0 ? void 0 : resultA.length) || (resultB === null || resultB === void 0 ? void 0 : resultB.length)) {
                return false;
            }
            return true;
        };
        UserPermissionsItemComponent.prototype.checkPayeesForChanges = function (savedObjects, dataGroupPayeeObjects) {
            if ((!savedObjects && dataGroupPayeeObjects && dataGroupPayeeObjects.length) ||
                (savedObjects && savedObjects.length && !dataGroupPayeeObjects)) {
                return true;
            }
            if (savedObjects && dataGroupPayeeObjects && savedObjects.length !== dataGroupPayeeObjects.length) {
                return true;
            }
            if (savedObjects && dataGroupPayeeObjects && savedObjects.length === dataGroupPayeeObjects.length) {
                var _loop_2 = function (j) {
                    var savedObjectPayee = savedObjects.find(function (el) { return el.id === dataGroupPayeeObjects[j].id; });
                    if (!savedObjectPayee) {
                        return { value: true };
                    }
                };
                for (var j = 0; j < dataGroupPayeeObjects.length; j++) {
                    var state_2 = _loop_2(j);
                    if (typeof state_2 === "object")
                        return state_2.value;
                }
            }
            return false;
        };
        UserPermissionsItemComponent.prototype.onOpenUnassignModal = function (dataGroup) {
            this.dataGroupForRemove = dataGroup;
        };
        UserPermissionsItemComponent.prototype.openPayeeGroupDetail = function (payee) {
            // @ts-ignore
            this.payeeIds = payee.items;
            this.payeeGroupName = payee.name;
            this.payeeDetailModal = true;
        };
        UserPermissionsItemComponent.prototype.openAccountGroupDetail = function (account) {
            // @ts-ignore
            this.accountIds = account.items;
            this.accountGroupName = account.name;
            this.accountDetailModal = true;
        };
        /**
         * Return flag of financial BF and bound support for self approve
         * @param item - BF privileges
         */
        UserPermissionsItemComponent.prototype.checkIfSelfApproveLimitsSupport = function (item) {
            var countOfSupportLimit = 0;
            for (var property in item) {
                if (item[property].supportsLimits) {
                    countOfSupportLimit++;
                }
            }
            return item.approve && item.approve.assigned && countOfSupportLimit > 0;
        };
        /**
         * Return flag of self approve supported
         * @param item - BF privileges
         */
        UserPermissionsItemComponent.prototype.checkIfSelfApprove = function (item) {
            return item.approve && item.approve.assigned;
        };
        /**
         * Return flag of present any self approval item in group of BF
         * @param items - BF privileges in Group
         */
        UserPermissionsItemComponent.prototype.checkIfGroupHasSelfApprove = function (items) {
            var _this = this;
            var appovePrivelegCount = 0;
            items.forEach(function (el) {
                if (_this.checkIfSelfApprove(el.privileges)) {
                    appovePrivelegCount++;
                }
            });
            return appovePrivelegCount > 0;
        };
        /**
         * Return flag of state of self approval
         * @param name - name of BF
         */
        UserPermissionsItemComponent.prototype.checkIfSelfApprovalPoliciesSetted = function (name) {
            var _a, _b;
            return (_b = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find(function (el) { return el.businessFunctionName === name; })) === null || _b === void 0 ? void 0 : _b.canSelfApprove;
        };
        /**
         * Return flag of disabled of self approval
         * @param name - name of BF
         */
        UserPermissionsItemComponent.prototype.checkIfSelfApprovalDisabled = function (name) {
            var _a, _b, _c;
            if ((_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find(function (el) { return el.businessFunctionName === name; })) {
                return !((_c = (_b = this.selfApprovalPolicies) === null || _b === void 0 ? void 0 : _b.find(function (el) { return el.businessFunctionName === name; })) === null || _c === void 0 ? void 0 : _c.canSelfApprove);
            }
            return false;
        };
        /**
         * Return bounds for self approve
         * @param name - name of BF
         */
        UserPermissionsItemComponent.prototype.getBoundsForSelfApprove = function (name) {
            var _a, _b;
            return (_b = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find(function (el) { return el.businessFunctionName === name; })) === null || _b === void 0 ? void 0 : _b.bounds;
        };
        /**
         * Open modal for edit self Approve
         * @param bf -  BF
         */
        UserPermissionsItemComponent.prototype.editSelfApprove = function (bf) {
            var _a;
            this.selfApproveItemData = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find(function (el) { return el.businessFunctionName === bf.name; });
            this.typeOfSelfApproveAction = 'edit';
            this.selectedBFForSelfApprove = bf;
        };
        /**
         * Open modal for enable self Approve
         * @param bf -  BF
         */
        UserPermissionsItemComponent.prototype.enableSelfApprove = function (bf) {
            var _a;
            this.selfApproveItemData = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find(function (el) { return el.businessFunctionName === bf.name; });
            this.typeOfSelfApproveAction = 'enable';
            this.selectedBFForSelfApprove = bf;
        };
        /**
         * Changed response object when self approval item changed
         * @param event -  SelfApprovalPolicies
         */
        UserPermissionsItemComponent.prototype.onSelfApproveChanges = function (event) {
            var _a;
            this.selfApprovalPolicies = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.filter(function (obj) {
                return obj.businessFunctionName !== event.businessFunctionName;
            });
            if (this.selfApprovalPolicies && this.selfApprovalPolicies.length) {
                this.selfApprovalPolicies.push(event);
            }
            else {
                this.selfApprovalPolicies = [];
                this.selfApprovalPolicies.push(event);
            }
            this.emitRequestObject();
        };
        return UserPermissionsItemComponent;
    }());
    /** @nocollapse */ UserPermissionsItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsItemComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UserPermissionsItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemComponent, selector: "bb-user-permissions-item", inputs: { user: "user", currencyList: "currencyList", selfApproveDefaultBehavior: "selfApproveDefaultBehavior", showApprovalLevel: "showApprovalLevel", approvalLevel: "approvalLevel", approvalLevelLoading: "approvalLevelLoading", approvalLevelError: "approvalLevelError", limitData: "limitData", userLimitsPermission: "userLimitsPermission", userPermissions: "userPermissions", dataGroup: "dataGroup", payeeGroups: "payeeGroups", showActions: "showActions", enableSelfApproval: "enableSelfApproval", showPayee: "showPayee", showFunctionGroupType: "showFunctionGroupType", disableSaveButton: "disableSaveButton", editView: "editView", legalEntityId: "legalEntityId", editedFunctionId: "editedFunctionId" }, outputs: { emitLimitData: "emitLimitData", removeFunctionGroup: "removeFunctionGroup", removeDataGroup: "removeDataGroup", requestObjectEmit: "requestObjectEmit", editedFunctionIdEmit: "editedFunctionIdEmit", changesMadedEmit: "changesMadedEmit" }, queries: [{ propertyName: "businessFunctionTemplate", first: true, predicate: UserPermissionsItemBusinessFunctionDirective, descendants: true }, { propertyName: "businessFunctionGroupKeyTemplate", first: true, predicate: UserPermissionsItemBusinessFunctionGroupNameDirective, descendants: true }], ngImport: i0__namespace, template: "<div\n  *ngIf=\"_userPermissions && dataGroups\"\n  [attr.data-role]=\"_userPermissions.name + '-container'\"\n  class=\"bb-user-permission-item bb-block bb-block--sm\">\n  <div class=\"bb-block bb-block--sm\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-bottom bb-heading-3 break-word\">\n        {{ _userPermissions.name }}\n      </div>\n\n      <div class=\"bb-stack__item\" *ngIf=\"showFunctionGroupType\">\n        <bb-badge-ui\n          *ngIf=\"_userPermissions.type === 'TEMPLATE'\"\n          data-role=\"function-group-reference-badge\"\n          color=\"secondary\"\n          text=\"Reference\"\n          i18n-text=\"Reference function group@@user-permissions-item.function-group.type.reference\">\n        </bb-badge-ui>\n\n        <bb-badge-ui\n          *ngIf=\"_userPermissions.type === 'REGULAR'\"\n          data-role=\"function-group-custom-badge\"\n          color=\"secondary\"\n          text=\"Custom\"\n          i18n-text=\"Custom function group@@user-permissions-item.function-group.type.regular\">\n        </bb-badge-ui>\n\n        <bb-badge-ui\n          *ngIf=\"$any(_userPermissions.type) === 'SYSTEM'\"\n          data-role=\"function-group-system-badge\"\n          color=\"secondary\"\n          text=\"System\"\n          i18n-text=\"System function group@@user-permissions-item.function-group.type.System\">\n        </bb-badge-ui>\n      </div>\n\n      <div class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--no-shrink\">\n        <button\n          [attr.data-role]=\"'unassign-function-group-' + _userPermissions.name\"\n          *ngIf=\"showActions && $any(_userPermissions.type) !== 'SYSTEM'\"\n          bbButton\n          (click)=\"onRemoveFunctionGroup()\"\n          color=\"link\"\n          buttonSize=\"sm\">\n          <span i18n=\"Unassign job role@@user-permissions-item.label.unassign-function-group\"> Unassign job role </span>\n        </button>\n        <ng-container *ngIf=\"$any(_userPermissions.type) === 'SYSTEM'\">\n          <bb-badge-ui\n            data-role=\"locked-badge\"\n            i18n=\"Locked@@user-permissions-item.locked.budge.text\"\n            text=\"Locked\"\n            color=\"secondary\"\n            [abbr]=\"false\"\n            [circle]=\"false\"></bb-badge-ui>\n          <bb-icon-ui data-role=\"locked-icon\" class=\"bb-text-support align-middle\" name=\"lock\" size=\"md\"></bb-icon-ui>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n  <div data-role=\"function-group-description\" class=\"bb-block bb-block--md bb-text-support break-word\">\n    {{ _userPermissions.description }}\n  </div>\n\n  <ng-container *ngIf=\"showApprovalLevel\">\n    <ng-container *ngIf=\"!approvalLevelLoading; else loadingTmp\">\n      <ng-container *ngIf=\"approvalLevel !== approvalLevelStatus.ERROR; else errorTmp\">\n        <div class=\"bb-block bb-block--md\" data-role=\"approval-level-info\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item bb-stack__item--spacing-sm bb-stack__item--align-bottom\">\n              <bb-icon-ui\n                *ngIf=\"approvalLevel && $any(approvalLevel !== approvalLevelStatus.EMPTY); else noApprovalLevelIcon\"\n                name=\"authorizations\"\n                size=\"md\"\n                data-role=\"approval-level-icon\"></bb-icon-ui>\n              <ng-template #noApprovalLevelIcon>\n                <bb-icon-ui name=\"warning\" size=\"md\" color=\"warning\" data-role=\"no-approval-level-icon\"></bb-icon-ui>\n              </ng-template>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--align-top\">\n              <span\n                *ngIf=\"approvalLevel && $any(approvalLevel !== approvalLevelStatus.EMPTY); else noApprovalLevel\"\n                data-role=\"approval-level-details\"\n                i18n=\"Approval level type@@user-permissions-item.approval-level.info\"\n                class=\"bb-text-bold bb-text-support text-small\">\n                Approval level \"{{ approvalLevel }}\"\n              </span>\n              <ng-template #noApprovalLevel>\n                <span\n                  data-role=\"no-approval-level-assigned\"\n                  i18n=\"No approval level warning@@@user-permissions-item.approval-level.no-assigned\"\n                  class=\"bb-text-bold text-small text-warning\">\n                  No approval level\n                </span>\n              </ng-template>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingTmp>\n    <bb-loading-indicator-ui\n      data-role=\"approval-level-loading-spinner\"\n      loaderSize=\"sm\"\n      [inline]=\"true\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #errorTmp>\n    <div class=\"bb-stack\" data-role=\"approval-level-error\">\n      <bb-icon-ui\n        class=\"bb-stack__item bb-stack__item--spacing-sm bb-stack__item--align-bottom\"\n        name=\"warning\"\n        color=\"danger\"\n        size=\"md\"></bb-icon-ui>\n      <span\n        class=\"bb-text-bold text-small text-danger\"\n        i18n=\"Approval level error@@user-permissions-item.approval-level.error\">\n        Could not retrieve approval level\n      </span>\n    </div>\n  </ng-template>\n\n  <div class=\"bb-block bb-block--md bb-text-support\">\n    <bb-function-group-time-bounds [functionGroup]=\"_userPermissions\"></bb-function-group-time-bounds>\n  </div>\n\n  <div class=\"bb-block bb-block--sm\">\n    <u\n      class=\"bb-text-semi-bold bb-subtitle break-word\"\n      i18n=\"Permissions Within@@user-permissions-item.label.permissionsWithin\">\n      Permissions within '{{ _userPermissions.name }}'\n    </u>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" *ngFor=\"let bfGroups of _userPermissions.groupedBusinessFunctions\">\n    <div class=\"bb-stack bb-block bb-block--md row no-gutters\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-none bb-text-semi-bold col-3\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            businessFunctionGroupKeyTemplate?.templateRef || null;\n            context: { groupKey: bfGroups.groupKey }\n          \">\n        </ng-container>\n      </div>\n\n      <bb-business-function-privileges-name\n        class=\"col-6 bb-user-permission-item__business-function-privileges-name bb-subheader bb-subheader--regular\">\n      </bb-business-function-privileges-name>\n      <div\n        class=\"bb-user-permission-item__business-function-privileges-name bb-subheader bb-subheader--regular col-3\"\n        *ngIf=\"enableSelfApproval\"\n        data-role=\"self-approval-header\">\n        <span\n          [attr.data-role]=\"'self-approval-header-for-' + bfGroups.groupKey\"\n          class=\"bb-business-function-privilege-name-item bb-text-align-center\"\n          i18n=\"Self Approval header text@@user-permissions-item.self-approval.header.text\"\n          >Self Approve</span\n        >\n      </div>\n    </div>\n\n    <div *ngFor=\"let bf of bfGroups.businessFunctions\" class=\"bb-stack bb-block bb-block--md row no-gutters\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-none col-3\">\n        <div class=\"bb-user-permission-item__function-item__label bb-subtitle\">\n          <ng-container\n            *ngTemplateOutlet=\"businessFunctionTemplate?.templateRef || null; context: { businessFunction: bf }\">\n          </ng-container>\n        </div>\n      </div>\n\n      <bb-privilege-indicator-list\n        class=\"bb-stack col-6\"\n        [businessFunction]=\"bf\"\n        [limitData]=\"limitData\"\n        [userPermission]=\"userLimitsPermission\"\n        [functionGroupId]=\"_userPermissions.id\"\n        (emitLimitData)=\"emitLimit($event, bf.name, _userPermissions.name)\">\n      </bb-privilege-indicator-list>\n\n      <div\n        class=\"col-3 bb-block bb-subheader bb-subheader--regular\"\n        data-role=\"self-approval-info-block\"\n        *ngIf=\"checkIfSelfApprove(bf.privileges) && enableSelfApproval\">\n        <div [attr.data-role]=\"'self-approval-for-' + bf.name\">\n          <div class=\"bb-inline-stack\">\n            <ng-container\n              *ngIf=\"\n                checkIfSelfApprovalDisabled(bf.name) ||\n                (!checkIfSelfApprovalPoliciesSetted(bf.name) && selfApproveDefaultBehavior !== 'enable')\n              \">\n              <bb-icon-ui\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-support\"\n                name=\"cancel\"\n                size=\"sm\"\n                color=\"support\"></bb-icon-ui>\n              <span\n                data-role=\"self-approval-disabled-indicator\"\n                i18n=\"\n                  Self Approval disabled indicator text@@user-permissions-item.self-approval.disabled.indicator.text\"\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-lg bb-text-support\">\n                Disabled\n              </span>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                !checkIfSelfApprovalDisabled(bf.name) &&\n                (checkIfSelfApprovalPoliciesSetted(bf.name) || selfApproveDefaultBehavior === 'enable')\n              \">\n              <bb-icon-ui\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                name=\"authorizations\"\n                size=\"sm\"\n                color=\"support\"></bb-icon-ui>\n              <span\n                data-role=\"self-approval-enabled-indicator\"\n                i18n=\"Self Approval enabled indicator text@@user-permissions-item.self-approval.enabled.indicator.text\"\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-lg bb-text-bold\">\n                Enabled\n              </span>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                !checkIfSelfApprovalDisabled(bf.name) &&\n                (checkIfSelfApprovalPoliciesSetted(bf.name) || selfApproveDefaultBehavior === 'enable') &&\n                editView\n              \">\n              <button bbButton color=\"link-text\" data-role=\"self-approve-edit-button\" (click)=\"editSelfApprove(bf)\">\n                <ng-container *ngIf=\"checkIfSelfApproveLimitsSupport(bf.privileges); else disabledButton\">\n                  <bb-icon-ui\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                    name=\"edit\"\n                    size=\"sm\"></bb-icon-ui>\n                  <span\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-subheader bb-subheader--regular\"\n                    i18n=\"Self Approval edit button text@@user-permissions-item.self-approval.edit.button.text\">\n                    Edit\n                  </span>\n                </ng-container>\n                <ng-template #disabledButton>\n                  <bb-icon-ui\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                    name=\"cancel\"\n                    size=\"sm\"\n                    color=\"danger\"></bb-icon-ui>\n                  <span\n                    class=\"\n                      bb-inline-stack__item bb-inline-stack__item--spacing-none\n                      bb-subheader bb-subheader--regular\n                      bb-text-danger\n                    \"\n                    i18n=\"Self Approval disable button text@@user-permissions-item.self-approval.disable.button.text\">\n                    Disable\n                  </span>\n                </ng-template>\n              </button>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                (checkIfSelfApprovalDisabled(bf.name) ||\n                  (!checkIfSelfApprovalPoliciesSetted(bf.name) && selfApproveDefaultBehavior !== 'enable')) &&\n                editView\n              \">\n              <button bbButton color=\"link-text\" data-role=\"self-approve-enable-button\" (click)=\"enableSelfApprove(bf)\">\n                <bb-icon-ui\n                  class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                  name=\"edit\"\n                  size=\"sm\"></bb-icon-ui>\n                <span\n                  class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-subheader bb-subheader--regular\"\n                  i18n=\"Self Approval enable button text@@user-permissions-item.self-approval.enable.button.text\">\n                  Enable\n                </span>\n              </button>\n            </ng-container>\n          </div>\n          <ng-container *ngIf=\"checkIfSelfApproveLimitsSupport(bf.privileges)\">\n            <div\n              class=\"bb-block bb-text-bold bb-text-support\"\n              *ngFor=\"let bound of getBoundsForSelfApprove(bf.name)\"\n              data-role=\"self-approve-bound\">\n              <span>0 - </span>\n              <bb-amount-ui\n                data-role=\"self-approve-bound-amount\"\n                [amount]=\"$any(bound.amount)\"\n                [mapCurrency]=\"true\"\n                [showPlusSign]=\"false\"\n                [abbreviate]=\"false\"></bb-amount-ui>\n              <span> {{ bound.currencyCode }}</span>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n\n      <div\n        class=\"bb-user-permission-item__function-item__label\"\n        data-role=\"self-approve-not-applicable-icon\"\n        *ngIf=\"!checkIfSelfApprove(bf.privileges) && enableSelfApproval\">\n        <bb-icon-ui\n          name=\"remove\"\n          [color]=\"'muted'\"\n          aria-label=\"Not applicable for this business function\"\n          i18n-aria-label=\"Not applicable aria label@@user-permissions-item.self-approve.aria.not-applicable\"\n          bbTooltip=\"Not applicable for this function\"\n          i18n-bbTooltip=\"Not applicable tooltip@@user-permissions-item.self-approve..tooltip.not-applicable\"\n          triggers=\"hover\"></bb-icon-ui>\n      </div>\n    </div>\n  </div>\n  <bb-self-approve-modal\n    *ngIf=\"selectedBFForSelfApprove\"\n    [isOpen]=\"$any(selectedBFForSelfApprove)\"\n    [user]=\"user\"\n    [bf]=\"selectedBFForSelfApprove\"\n    [jobRoleName]=\"_userPermissions.name\"\n    [type]=\"typeOfSelfApproveAction\"\n    [selfApproveItemData]=\"selfApproveItemData\"\n    [isLimitSupport]=\"checkIfSelfApproveLimitsSupport(selectedBFForSelfApprove.privileges)\"\n    [currencyList]=\"currencyList\"\n    (cancel)=\"selectedBFForSelfApprove = undefined\"\n    (selfApprovalDataEmit)=\"onSelfApproveChanges($event); selectedBFForSelfApprove = undefined\"\n    data-role=\"self-approve-modal\">\n  </bb-self-approve-modal>\n\n  <!--different view, will be added after release MVP-->\n  <ng-template>\n    <div class=\"bb-stack\">\n      <div class=\"btn-group btn-group-sm bb-stack__item bb-stack__item--push-right\" data-role=\"btn-group-sm-icons\">\n        <button (click)=\"activeView = 'table'\" [color]=\"activeView === 'table' ? 'primary' : 'secondary'\" bbButton>\n          <bb-icon-ui name=\"view-module\"></bb-icon-ui>\n        </button>\n        <button (click)=\"activeView = 'list'\" [color]=\"activeView === 'list' ? 'primary' : 'secondary'\" bbButton>\n          <bb-icon-ui name=\"list\"></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"row m-0\" *ngIf=\"activeView === 'list'\">\n      <div\n        [ngClass]=\"{ 'col-8': allLinkedPayee?.length, 'col-12': !allLinkedPayee?.length }\"\n        class=\"bb-account-group-item col-8\">\n        <div class=\"card bb-account-group-item__card\" *ngIf=\"!($any(_userPermissions.type) === 'SYSTEM')\">\n          <div class=\"card-body\">\n            <div class=\"bb-block bb-block--sm\">\n              <u\n                class=\"bb-text-semi-bold bb-subtitle\"\n                i18n=\"Account Groups Assigned@@user-permissions-item.label.accountGroupsAssigned\">\n                { dataGroups.length, plural, =0 { No account groups assigned } =1 { 1 account group assigned } other {\n                {{ dataGroups.length }} account groups assigned } }\n              </u>\n            </div>\n\n            <div *ngIf=\"dataGroups.length\" class=\"row\">\n              <div *ngFor=\"let dataGroup of dataGroups\" class=\"col-4\">\n                <div\n                  class=\"bb-stack bb-block bb-block--md bb-account-group-item__card__item\"\n                  data-role=\"assigned-data-group-item\"\n                  [ngClass]=\"{ 'bb-account-group-item__card__item--active rounded': dataGroup === selectedDg }\">\n                  <bb-icon-ui\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                    *ngIf=\"!showActions\"\n                    name=\"check\"\n                    color=\"success\"></bb-icon-ui>\n                  <button\n                    *ngIf=\"showActions\"\n                    bbButton\n                    (click)=\"onRemoveDataGroup(dataGroup)\"\n                    color=\"link\"\n                    [circle]=\"true\"\n                    aria-label=\"Remove account group\"\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                    i18n-aria-label=\"Remove account group@@user-permissions-item.label.remove-account-group\"\n                    [attr.data-role]=\"'user-permissions-item-data-group-name-' + dataGroup.name\">\n                    <bb-icon-ui name=\"delete\" color=\"dark\"></bb-icon-ui>\n                  </button>\n                  <span\n                    class=\"bb-stack__item bb-subtitle break-word\"\n                    data-role=\"assigned-data-group\"\n                    [ngClass]=\"{ 'text-primary': checkInclude(dataGroup['payees']) }\">\n                    {{ dataGroup.name }}\n                  </span>\n                  <bb-icon-ui\n                    class=\"bb-account-group-item__card__item--link\"\n                    *ngIf=\"dataGroup['payees'] && dataGroup['payees'].length\"\n                    name=\"link\"\n                    color=\"primary\"\n                    (click)=\"showLinkedPayee(dataGroup)\"\n                    data-role=\"linked-button\"></bb-icon-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"allLinkedPayee && allLinkedPayee.length\" class=\"bb-linked-item\">\n        <div class=\"bb-linked-item__icon\">\n          <bb-icon-ui\n            circle=\"true\"\n            data-role=\"unlinked-button\"\n            backgroundType=\"circle\"\n            name=\"link\"\n            [inverse]=\"true\"\n            size=\"lg\"\n            (click)=\"selectedDg = undefined; selectedPg = undefined\"></bb-icon-ui>\n        </div>\n      </div>\n\n      <div class=\"col-4 bb-payee-group-item\" *ngIf=\"allLinkedPayee && allLinkedPayee.length\" data-role=\"linked-payees\">\n        <div class=\"card bb-payee-group-item__card\">\n          <div class=\"card-body\">\n            <div *ngIf=\"selectedDg\" data-role=\"selected-payees\">\n              <p\n                class=\"bb-subtitle bb-text-semi-bold\"\n                i18n=\"All Payee Groups Linked@@user-permissions-item.label.allPayeesLinked\">\n                { selectedDg?.payees?.length, plural, =1 { 1/{{ allLinkedPayee.length }} payee group linked } other {\n                {{ selectedDg?.payees?.length }}/{{ allLinkedPayee.length }} payee groups linked to } }\n                <b>{{ selectedDg?.name }}</b>\n              </p>\n              <p\n                *ngFor=\"let payeeGroup of selectedDg?.payees\"\n                class=\"bb-subtitle bb-payee-group-item__card__item rounded\"\n                (click)=\"selectedPG(payeeGroup)\">\n                <bb-icon-ui name=\"check\" *ngIf=\"selectedPg?.id !== payeeGroup.id\" class=\"align-bottom\"></bb-icon-ui>\n                <bb-icon-ui\n                  name=\"radio-button-checked\"\n                  *ngIf=\"selectedPg?.id === payeeGroup.id\"\n                  class=\"align-bottom\"></bb-icon-ui>\n                {{ payeeGroup.name }}\n              </p>\n            </div>\n\n            <div *ngIf=\"!selectedDg\" data-role=\"all-payees\">\n              <p\n                class=\"bb-subtitle bb-text-semi-bold\"\n                i18n=\"Selected Payee Groups Linked@@user-permissions-item.label.selectedPayeesLinked\">\n                { allLinkedPayee.length, plural, =1 { 1 payee group linked } other { {{ allLinkedPayee.length }} payee\n                groups linked } }\n              </p>\n              <p\n                *ngFor=\"let payeeGroup of allLinkedPayee\"\n                class=\"bb-subtitle bb-payee-group-item__card__item rounded\"\n                (click)=\"selectedPG(payeeGroup)\">\n                <bb-icon-ui name=\"check\" *ngIf=\"selectedPg?.id !== payeeGroup.id\" class=\"align-bottom\"></bb-icon-ui>\n                <bb-icon-ui\n                  name=\"radio-button-checked\"\n                  *ngIf=\"selectedPg?.id === payeeGroup.id\"\n                  class=\"align-bottom\"></bb-icon-ui>\n                {{ payeeGroup.name }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <!--different view, will be added after release MVP-->\n  <div class=\"card\" *ngIf=\"activeView === 'table'\">\n    <div\n      class=\"card-body\"\n      *ngIf=\"!($any(_userPermissions.type) === 'SYSTEM')\"\n      [attr.data-role]=\"'card-body-' + _userPermissions.name\">\n      <div *ngIf=\"!dataGroups.length\">\n        <div class=\"bb-block bb-block--sm\" data-role=\"no-assigned-item\">\n          <u\n            class=\"bb-text-semi-bold bb-subtitle\"\n            i18n=\"No Account Groups Assigned@@user-permissions-item.label.noAccountGroupsAssigned\">\n            No account groups assigned\n          </u>\n        </div>\n      </div>\n\n      <div *ngIf=\"dataGroups.length\">\n        <div\n          class=\"btn-group btn-group-sm bb-stack__item\"\n          data-role=\"btn-group-for-type-of-group\"\n          *ngIf=\"allLinkedPayee && allLinkedPayee.length\">\n          <button\n            (click)=\"activeDataGroup = 'account'\"\n            [color]=\"activeDataGroup === 'account' ? 'primary' : 'secondary'\"\n            bbButton\n            data-role=\"account-group-button\"\n            i18n=\"Account group toggle button@@user-permissions-item.toggle-button.account-group\">\n            Account Groups ({{ dataGroups.length }})\n          </button>\n          <button\n            (click)=\"activeDataGroup = 'payee'\"\n            [color]=\"activeDataGroup === 'payee' ? 'primary' : 'secondary'\"\n            bbButton\n            data-role=\"payee-group-button\"\n            i18n=\"Payee group toggle button@@user-permissions-item.toggle-button.payee-group\">\n            Payee Groups ({{ allLinkedPayee.length }})\n          </button>\n        </div>\n        <table\n          class=\"table table-striped table-hover table-fixed\"\n          bbTableFocus\n          [bbTable]=\"dataGroups\"\n          [attr.data-role]=\"'assigned-table-' + _userPermissions.name\">\n          <caption\n            class=\"sr-only\"\n            i18n=\"Linked Account Group Table@@user-permissions-item.linked-account-group.table.caption\">\n            Table with Account Groups linked to Payee Groups\n          </caption>\n\n          <thead>\n            <tr data-role=\"service-agreement-table-headers\">\n              <ng-container *ngIf=\"activeDataGroup === 'account'\">\n                <ng-container *ngTemplateOutlet=\"accountGroupHeader\"></ng-container>\n              </ng-container>\n\n              <th *ngIf=\"showPayee && ((allLinkedPayee && allLinkedPayee.length) || editView)\" scope=\"col\">\n                <span class=\"bb-stack\">\n                  <span\n                    i18n=\"Payee Groups table header name@@user-permissions-item.table.header.payee-group.name\"\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\">\n                    Payee Groups\n                  </span>\n                  <bb-icon-ui\n                    name=\"info\"\n                    data-role=\"payee-group-info\"\n                    size=\"md\"\n                    class=\"bb-stack__item bb-text-support\"\n                    [bbTooltip]=\"payeeHeaderTooltip\"\n                    tabindex=\"0\"\n                    aria-labelledby=\"payeeTooltip\"\n                    triggers=\"hover\"></bb-icon-ui>\n                  <ng-template #payeeHeaderTooltip>\n                    <span\n                      i18n=\"\n                        Payee Groups table header tooltip\n                        text@@user-permissions-item.table.header.payee-group.tooltip.text\">\n                      These are the payee group(s) linked with account group(s) assigned to\n                      {{ _userPermissions.name }} Job Role\n                    </span>\n                  </ng-template>\n                  <span\n                    class=\"d-none\"\n                    id=\"payeeTooltip\"\n                    i18n=\"\n                      Payee Groups table header tooltip aria-label\n                      text@@user-permissions-item.table.header.payee-group.tooltip.aria-label.text\">\n                    These are the payee group(s) linked with account group(s) assigned to\n                    {{ _userPermissions.name }} Job Role\n                  </span>\n                </span>\n              </th>\n\n              <ng-template #accountGroupHeader>\n                <th scope=\"col\">\n                  <span class=\"bb-stack\">\n                    <span\n                      i18n=\"Account Groups table header name@@user-permissions-item.table.header.account-group.name\"\n                      class=\"bb-stack__item bb-stack__item--spacing-sm\">\n                      Account Groups\n                      <span *ngIf=\"!allLinkedPayee.length\" data-role=\"account-table-counter\"\n                        >({{ dataGroups.length }})</span\n                      >\n                    </span>\n                    <bb-icon-ui\n                      name=\"info\"\n                      data-role=\"account-group-info\"\n                      size=\"md\"\n                      class=\"bb-stack__item bb-text-support\"\n                      [bbTooltip]=\"accountHeaderTooltip\"\n                      tabindex=\"0\"\n                      aria-labelledby=\"accountTooltip\"\n                      triggers=\"hover\"></bb-icon-ui>\n                    <ng-template #accountHeaderTooltip>\n                      <span\n                        i18n=\"\n                          Account Groups table header tooltip\n                          text@@user-permissions-item.table.header.account-group.tooltip.text\">\n                        These are the account group(s) assigned to {{ _userPermissions.name }} Job Role\n                      </span>\n                    </ng-template>\n                    <span\n                      class=\"d-none\"\n                      id=\"accountTooltip\"\n                      i18n=\"\n                        Account Groups table header tooltip aria-label\n                        text@@user-permissions-item.table.header.account-group.tooltip.aria-label.text\">\n                      These are the account group(s) assigned to {{ _userPermissions.name }} Job Role\n                    </span>\n                  </span>\n                </th>\n              </ng-template>\n\n              <ng-container *ngIf=\"activeDataGroup === 'payee'\">\n                <ng-container *ngTemplateOutlet=\"accountGroupHeader\"></ng-container>\n              </ng-container>\n            </tr>\n          </thead>\n\n          <tbody *ngIf=\"activeDataGroup === 'account'\" data-role=\"account-table-body\">\n            <tr *ngFor=\"let dataGroup of dataGroups\" [bbRow]=\"dataGroup\" data-role=\"service-agreement-table-info\">\n              <td data-role=\"account-table-data-group-row\">\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    removeAccountGroupBtn;\n                    context: { $implicit: dataGroup, icon: 'remove-circle', size: 'md' }\n                  \"></ng-container>\n                <u role=\"button\" class=\"text-primary\" (bbKeyboardClick)=\"openAccountGroupDetail(dataGroup)\" tabindex=\"0\"\n                  >{{ dataGroup.name }}\n                  <i triggers=\"hover\" [bbTooltip]=\"accountNumberTooltip\" class=\"bb-text-bold\"\n                    >({{ dataGroup.items?.length }})</i\n                  >\n                </u>\n              </td>\n              <td\n                *ngIf=\"showPayee && ((allLinkedPayee && allLinkedPayee.length) || editView)\"\n                data-role=\"account-table-payee-row\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-stack--center\">\n                    <ng-container\n                      *ngTemplateOutlet=\"\n                        assignPayeeBtn;\n                        context: { dataGroup: dataGroup, payees: dataGroup['payees'] }\n                      \"></ng-container>\n                  </div>\n                  <div class=\"bb-stack__item\">\n                    <ng-container *ngFor=\"let payee of dataGroup['payees']; let isLast = last\">\n                      <div class=\"bb-inline-stack bb-inline-stack__item--spacing-sm bb-text-nowrap\">\n                        <ng-container\n                          *ngTemplateOutlet=\"\n                            removePayeeBtn;\n                            context: { payee: payee, dataGroup: dataGroup, icon: 'clear', size: 'sm' }\n                          \"></ng-container>\n                        <span\n                          [attr.data-role]=\"'payee-item-account-table-' + dataGroup.name\"\n                          (bbKeyboardClick)=\"openPayeeGroupDetail(payee)\"\n                          class=\"text-primary\"\n                          role=\"button\"\n                          tabindex=\"0\">\n                          {{ payee.name\n                          }}<i triggers=\"hover\" [bbTooltip]=\"contactNumberTooltip\" class=\"bb-text-bold\" role=\"button\">\n                            ({{ payee.items?.length }})\n                          </i>\n                          <span *ngIf=\"!editView && !isLast\"> , </span>\n                        </span>\n                      </div>\n                    </ng-container>\n\n                    <span\n                      i18n=\"Not assigned payee groups@@user-permissions-item.table.no-assigned.text\"\n                      class=\"bb-text-support\"\n                      *ngIf=\"!dataGroup['payees'] || !dataGroup['payees'].length\">\n                      Not assigned\n                    </span>\n                  </div>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n          <tbody *ngIf=\"activeDataGroup === 'payee'\" data-role=\"payee-table-body\">\n            <tr *ngFor=\"let payee of allLinkedPayee\" [bbRow]=\"payee\" data-role=\"service-agreement-table-info\">\n              <td data-role=\"payee-table-payee-row\">\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    removePayeeLinkingBtn;\n                    context: {\n                      payee: payee,\n                      dataGroups: getAccountGroupLinkedString(payee),\n                      icon: 'remove-circle',\n                      size: 'md'\n                    }\n                  \"></ng-container>\n                <u\n                  role=\"button\"\n                  class=\"text-primary\"\n                  [attr.data-role]=\"'payee-name-' + payee.name\"\n                  (bbKeyboardClick)=\"openPayeeGroupDetail(payee)\"\n                  tabindex=\"0\"\n                  >{{ payee.name\n                  }}<i triggers=\"hover\" [bbTooltip]=\"contactNumberTooltip\" class=\"bb-text-bold\" role=\"button\"\n                    >({{ payee.items.length }})</i\n                  ></u\n                >\n              </td>\n              <td data-role=\"payee-table-data-group-row\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-stack--center\">\n                    <ng-container\n                      *ngTemplateOutlet=\"assignAccountGroupToPayeeBtn; context: { payee: payee }\"></ng-container>\n                  </div>\n                  <div class=\"bb-stack__item\">\n                    <ng-container *ngFor=\"let account of getAccountGroupLinked(payee); let isLast = last\">\n                      <div class=\"bb-inline-stack bb-text-nowrap\">\n                        <ng-container\n                          *ngTemplateOutlet=\"\n                            removeAccountGroupFromPayeeBtn;\n                            context: {\n                              payee: payee,\n                              dataGroup: account,\n                              dataGroupLength: getAccountGroupLinked(payee).length,\n                              icon: 'clear',\n                              size: 'sm'\n                            }\n                          \"></ng-container>\n                        <span data-role=\"payee-table-account-item\">\n                          <span\n                            class=\"text-primary\"\n                            role=\"button\"\n                            [attr.data-role]=\"'payee-table-account-item-' + payee.name\"\n                            (bbKeyboardClick)=\"openAccountGroupDetail(account)\"\n                            tabindex=\"0\"\n                            >{{ account.name }}\n                            <i triggers=\"hover\" [bbTooltip]=\"accountNumberTooltip\" class=\"bb-text-bold\"\n                              >({{ account.items.length }})</i\n                            >\n                          </span>\n                          <span *ngIf=\"!editView && !isLast\"> , </span>\n                        </span>\n                      </div>\n                    </ng-container>\n                  </div>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        <div\n          *ngIf=\"editView && activeDataGroup === 'account'\"\n          class=\"bb-block bb-block--sm bb-stack bb-stack--density-sm\">\n          <button bbButton color=\"link\" buttonSize=\"md\" data-role=\"add-account-groups-btn\" (click)=\"addAccountGroup()\">\n            <bb-icon-ui name=\"add\" [cropped]=\"true\"></bb-icon-ui>\n            <span i18n=\"Add Account Group@@user-permissions-item.label.add-account-group\">Add Account Groups</span>\n          </button>\n        </div>\n        <button\n          bbButton\n          (click)=\"onEditPayee()\"\n          *ngIf=\"!editView && !editedFunctionId && showActions\"\n          color=\"link\"\n          data-role=\"edit-payees-button\"\n          i18n=\"Edit payees button@@user-permissions-item.button.edit-payees\">\n          edit\n        </button>\n        <div *ngIf=\"editView && !showActions\" class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            data-role=\"save-linking\"\n            class=\"bb-button-bar__button\"\n            (click)=\"onSave()\"\n            bbButton\n            color=\"primary\"\n            type=\"button\"\n            [disabled]=\"checkChanges()\">\n            <span i18n=\"Save button|Button to save form @@user-permissions-item.saveButton\"> Save </span>\n          </button>\n          <button\n            data-role=\"cancel-linking\"\n            class=\"bb-button-bar__button\"\n            bbButton\n            type=\"button\"\n            (click)=\"onCancel()\"\n            color=\"secondary\">\n            <span i18n=\"Cancel Button|Button to cancel @@user-permissions-item.cancelButton\"> Cancel </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <bb-payee-group-detail-modal\n    *ngIf=\"dataGroups.length\"\n    [targetSaId]=\"_userPermissions.serviceAgreementId\"\n    [isOpen]=\"payeeDetailModal\"\n    [payeeIds]=\"payeeIds\"\n    [payeeGroupName]=\"payeeGroupName\"\n    (cancel)=\"payeeDetailModal = false\"\n    data-role=\"payee-detail-modal\"></bb-payee-group-detail-modal>\n\n  <bb-account-group-detail-modal\n    *ngIf=\"dataGroups.length\"\n    [isOpen]=\"accountDetailModal\"\n    [accountIds]=\"accountIds\"\n    [accountGroupName]=\"accountGroupName\"\n    (cancel)=\"accountDetailModal = false\"\n    [legalEntityIds]=\"$any([legalEntityId])\"\n    data-role=\"account-detail-modal\"></bb-account-group-detail-modal>\n</div>\n\n<ng-template #removePayeeBtn let-payee=\"payee\" let-dataGroup=\"dataGroup\" let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"removedPayeeGroup(payee, dataGroup)\"\n    [bbTooltip]=\"removePayeeGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove payee group\"\n    i18n-aria-label=\"Remove payee group@@user-permissions-item.label.remove-payee-group\"\n    data-role=\"assign-payee-group-button\"\n    [attr.data-role]=\"'remove-payee-group-' + payee.name + dataGroup.name\">\n    <bb-icon-ui [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n\n  <ng-template #removePayeeGroupTooltip>\n    <span i18n=\"Remove payee group tooltip text@@user-permissions-item.remove-payee-group.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removePayeeLinkingBtn let-payee=\"payee\" let-dataGroups=\"dataGroups\" let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"onOpenUnassignModal(payee)\"\n    [bbTooltip]=\"unassignPayeeGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove payee group linking\"\n    i18n-aria-label=\"Remove payee group linking@@user-permissions-item.label.remove-payee-group-linking\"\n    data-role=\"assign-payee-group-button\"\n    [attr.data-role]=\"'payee-unlink-button-' + payee.name\">\n    <bb-icon-ui [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <bb-unassign-data-group-modal\n    [isOpen]=\"dataGroupForRemove && dataGroupForRemove.id === payee.id\"\n    [jobRole]=\"_userPermissions?.name\"\n    [activeDataGroup]=\"'payee'\"\n    [payeeGroupName]=\"payee.name\"\n    [accountGroupName]=\"dataGroups\"\n    (confirm)=\"removePayeeGroupLinking(payee)\"\n    (cancel)=\"dataGroupForRemove = undefined\"\n    data-role=\"unnasign-payee-modal\"></bb-unassign-data-group-modal>\n\n  <ng-template #unassignPayeeGroupTooltip>\n    <span i18n=\"Unassign payee group tooltip text@@user-permissions-item.unassign-payee-group.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from Account Group(s)\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #assignPayeeBtn let-dataGroup=\"dataGroup\" let-payees=\"payees\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"assignPayee(payees, dataGroup)\"\n    [bbTooltip]=\"assignPayeeTooltip\"\n    [circle]=\"true\"\n    buttonSize=\"md\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Assign payee group\"\n    i18n-aria-label=\"Assign payee group@@user-permissions-item.label.assign-payee-group\"\n    [attr.data-role]=\"'assign-payee-group-' + dataGroup.name\">\n    <bb-icon-ui name=\"add-circle\" color=\"primary\"></bb-icon-ui>\n  </button>\n  <ng-template #assignPayeeTooltip>\n    <span i18n=\"Add payee group(s) tooltip text@@user-permissions-item.add-payee-group.btn.tooltip.text\">\n      Add payee group(s) to '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #assignAccountGroupToPayeeBtn let-payee=\"payee\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"addAccountGroupToPayee(payee)\"\n    [bbTooltip]=\"assignAccountGroupToPayeeTooltip\"\n    [circle]=\"true\"\n    buttonSize=\"md\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Assign account group to payee\"\n    i18n-aria-label=\"Assign account group to payee group@@user-permissions-item.label.assign-account-group-to-payee\"\n    [attr.data-role]=\"'link-account-group-to-payee-' + payee.name\">\n    <bb-icon-ui name=\"add-circle\" color=\"primary\"></bb-icon-ui>\n  </button>\n  <ng-template #assignAccountGroupToPayeeTooltip>\n    <span\n      i18n=\"\n        Assign Account Group to Payee tooltip text@@user-permissions-item.assign-account-group-to-payee.btn.tooltip.text\">\n      Add '{{ payee.name }}' Payee Group to Account Group(s)\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removeAccountGroupBtn let-dataGroup let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"showActions || editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"onOpenUnassignModal(dataGroup)\"\n    [bbTooltip]=\"removeAccountGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove account group\"\n    i18n-aria-label=\"Remove account group@@user-permissions-item.label.remove-account-group\"\n    [attr.data-role]=\"'user-permissions-item-data-group-name-' + dataGroup.name\">\n    <bb-icon-ui *ngIf=\"editView\" [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <bb-unassign-data-group-modal\n    [isOpen]=\"dataGroupForRemove && dataGroupForRemove.id === dataGroup.id\"\n    [accountGroupName]=\"dataGroup.name\"\n    [jobRole]=\"_userPermissions?.name\"\n    [activeDataGroup]=\"'account'\"\n    (confirm)=\"removeAccountGroup(dataGroup)\"\n    (cancel)=\"dataGroupForRemove = undefined\"\n    data-role=\"unassign-account-group-modal\"></bb-unassign-data-group-modal>\n</ng-template>\n\n<ng-template\n  #removeAccountGroupFromPayeeBtn\n  let-dataGroup=\"dataGroup\"\n  let-payee=\"payee\"\n  let-dataGroupLength=\"dataGroupLength\"\n  let-icon=\"icon\"\n  let-size=\"size\">\n  <button\n    *ngIf=\"showActions || editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"removedAccountGroupFromPayee(payee, dataGroup)\"\n    [bbTooltip]=\"removeAccountGroupFromPayeeTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove account group from payee\"\n    i18n-aria-label=\"Remove account group from payee@@user-permissions-item.label.remove-account-group-from-payee\"\n    [attr.data-role]=\"'unassign-account-group-from-payee-' + payee.name + dataGroup.name\">\n    <bb-icon-ui *ngIf=\"editView\" [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <ng-template #removeAccountGroupFromPayeeTooltip>\n    <span\n      i18n=\"Remove Account group tooltip text@@user-permissions-item.remove-account-group-from-payee.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removeAccountGroupTooltip>\n  <span i18n=\"Unassign account group tooltip text@@user-permissions-item.remove-account-group.btn.tooltip.text\">\n    Unassign Account group\n  </span>\n</ng-template>\n\n<bb-select-items-modal\n  data-role=\"assign-accounts-modal\"\n  title=\"Assign Account Group(s)\"\n  i18n-title=\"Assign Account Group(s)@@user-permissions-item.select-account-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-account-groups-modal.submit\"\n  searchPlaceholder=\"Search for Account Group(s)\"\n  i18n-searchPlaceholder=\"Search for Account Group(s)@@user-permissions-item.select-account-groups-modal.search\"\n  [(isOpen)]=\"selectAccountGroupsModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availableDataGroups | async)\"\n  (confirm)=\"assignDataGroups($any($event))\"\n  (search)=\"searchAvailableDataGroups($event)\">\n  <ng-template bbSelectItemsItemHeader *ngIf=\"splittedAccountsByType$ | async as splitAcc\">\n    <div class=\"bb-stack\">\n      <div\n        class=\"bb-text-bold bb-stack__item bb-subtitle\"\n        i18n=\"All@@user-permissions-item.select-account-groups-modal.header.column-all\">\n        All\n      </div>\n      <div\n        *ngIf=\"splitAcc?.wizardAccounts?.length && splitAcc?.customAccounts?.length\"\n        data-role=\"account-switcher\"\n        class=\"bb-stack__item bb-stack__item--push-right\">\n        <bb-switch-ui\n          class=\"bb-subtitle\"\n          [labelPosition]=\"'left'\"\n          label=\"Include Quick User Set Up Generated\"\n          i18n-label=\"\n            Include Quick User Set Up Generated@@user-permissions-item.select-account-groups-modal.switch.label\"\n          (change)=\"switchAccounts()\">\n        </bb-switch-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div class=\"bb-stack\">\n      <div [attr.data-role]=\"'data-group-name-' + item.name\" class=\"bb-stack__item\">\n        <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n        <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n      </div>\n      <div class=\"bb-stack__item bb-stack__item--push-right\" *ngIf=\"item.metadata?.generated\">\n        <bb-icon-ui [name]=\"'auto_fix_high'\" data-role=\"generated-account-icon\"></bb-icon-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availableDataGroupsSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Account Groups available\"\n        i18n-title=\"No Account Groups available@@user-permissions-item.select-account-groups-modal.empty.title\"\n        subtitle=\"You can create an account group within the 'Account Groups' section.\"\n        i18n-subtitle=\"\n          You can create an account group within the 'Account Groups'\n          section.@@user-permissions-item.select-account-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availableDataGroupsSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"No search results found@@user-permissions-item.select-account-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different criteria@@user-permissions-item.select-account-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<bb-select-items-modal\n  title=\"Link Account Group(s) to &quot;{{ selectedForAssignAccountGroupForPayee?.name }}&quot; Payee Group\"\n  i18n-title=\"Link Account Group(s)@@user-permissions-item.select-account-linked-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-account-linked-groups-modal.submit\"\n  searchPlaceholder=\"Search\"\n  i18n-searchPlaceholder=\"Search for Account Group(s)@@user-permissions-item.select-account-linked-groups-modal.search\"\n  [(isOpen)]=\"selectAccountGroupsForPayeesModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availableDataGroupsForPayee | async)\"\n  (confirm)=\"assignDataGroupsForPayee($event)\"\n  (search)=\"searchAvailableDataGroupsForPayees($event)\">\n  <ng-template bbSelectItemsItemHeader>\n    <div class=\"bb-text-bold\" i18n=\"All@@user-permissions-item.select-account-linked-groups-modal.header.column-all\">\n      All\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div [attr.data-role]=\"'data-group-name-' + item.name\">\n      <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n      <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availableDataGroupsForPayeesSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Account Groups available\"\n        i18n-title=\"No Account Groups available@@user-permissions-item.select-account-linked-groups-modal.empty.title\"\n        subtitle=\"All account groups assigned to &quot;{{\n          _userPermissions?.name\n        }}&quot; Job Role already linked to &quot;{{ selectedForAssignAccountGroupForPayee?.name }}&quot; payee group.\"\n        i18n-subtitle=\"All already linked.@@user-permissions-item.select-account-linked-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availableDataGroupsForPayeesSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"\n          No search results found@@user-permissions-item.select-account-linked-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different\n          criteria@@user-permissions-item.select-account-linked-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<bb-select-items-modal\n  title=\"Assign Payee Group(s) to &quot;{{ selectedForAssignAccountGroup?.name }}&quot; Account Group\"\n  i18n-title=\"Assign Payee Group(s)@@user-permissions-item.select-payee-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-payee-groups-modal.submit\"\n  searchPlaceholder=\"Search for Payee Group(s)\"\n  i18n-searchPlaceholder=\"Search for Payee Group(s)@@user-permissions-item.select-payee-groups-modal.search\"\n  [(isOpen)]=\"selectPayeeGroupsModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availablePayeeGroups | async)\"\n  (confirm)=\"assignPayeeGroups($event)\"\n  (search)=\"searchAvailablePayeeGroups($event)\">\n  <ng-template bbSelectItemsItemHeader>\n    <div class=\"bb-text-bold\" i18n=\"All@@user-permissions-item.select-payee-groups-modal.header.column-all\">All</div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div [attr.data-role]=\"'data-group-name-' + item.name\">\n      <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n      <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availablePayeeGroupsSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Payee Groups available\"\n        i18n-title=\"No Payee Groups available@@user-permissions-item.select-payee-groups-modal.empty.title\"\n        subtitle=\"You can create a payee group within the 'Payee Groups' section.\"\n        i18n-subtitle=\"\n          You can create a payee group within the 'Payee Groups'\n          section.@@user-permissions-item.select-payee-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availablePayeeGroupsSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"No search results found@@user-permissions-item.select-payee-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different criteria@@user-permissions-item.select-payee-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<ng-template #contactNumberTooltip>\n  <span i18n=\"Number of payee Group@@user-permissions-item.number-of-payee.tooltip.text\">\n    Number of contact in Payee Group.\n  </span>\n</ng-template>\n\n<ng-template #accountNumberTooltip>\n  <span i18n=\"Number of account Group@@user-permissions-item.number-of-account.tooltip.text\">\n    Number of account in Account Group.\n  </span>\n</ng-template>\n", components: [{ type: i1__namespace$6.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i1__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: FunctionGroupTimeBoundsComponent, selector: "bb-function-group-time-bounds", inputs: ["functionGroup"] }, { type: BusinessFunctionPrivilegesNameComponent, selector: "bb-business-function-privileges-name", inputs: ["hideExecute"] }, { type: PrivilegeIndicatorListComponent, selector: "bb-privilege-indicator-list", inputs: ["businessFunction", "limitData", "userPermission", "functionGroupId"], outputs: ["emitLimitData"] }, { type: i7__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: SelfApproveModalComponent, selector: "bb-self-approve-modal", inputs: ["isOpen", "user", "currencyList", "bf", "jobRoleName", "type", "isLimitSupport", "selfApproveItemData"], outputs: ["cancel", "selfApprovalDataEmit"] }, { type: PayeeGroupDetailModalComponent, selector: "bb-payee-group-detail-modal", inputs: ["isOpen", "payeeGroupName", "targetSaId", "payeeIds"], outputs: ["cancel"] }, { type: AccountGroupDetailModalComponent, selector: "bb-account-group-detail-modal", inputs: ["isOpen", "targetSaId", "accountGroupName", "legalEntityIds", "accountIds"], outputs: ["cancel"] }, { type: UnassignDataGroupModalComponent, selector: "bb-unassign-data-group-modal", inputs: ["isOpen", "activeDataGroup", "jobRole", "accountGroupName", "payeeGroupName"], outputs: ["cancel", "confirm"] }, { type: SelectItemsModalComponent, selector: "bb-select-items-modal", inputs: ["isOpen", "title", "items", "allItems", "totalCount", "loading", "loadingMore", "error", "searchEnabled", "selectGroupsEnabled", "searchPlaceholder", "submitLabel", "modalOptions", "itemIdProperty"], outputs: ["confirm", "search", "cancel", "isOpenChange", "loadMore", "loadAllItems"] }, { type: i13__namespace.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i1__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace$1.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i2__namespace$1.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i2__namespace$1.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }, { type: i6__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: SelectItemsItemHeaderDirective, selector: "ng-template[bbSelectItemsItemHeader]" }, { type: SelectItemsItemDirective, selector: "ng-template[bbSelectItemsItem]" }, { type: SelectItemsEmptyDirective, selector: "ng-template[bbSelectItemsEmpty]" }], pipes: { "async": i2__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-user-permissions-item',
                        templateUrl: './user-permissions-item.component.html',
                    }]
            }], propDecorators: { businessFunctionTemplate: [{
                    type: i0.ContentChild,
                    args: [UserPermissionsItemBusinessFunctionDirective]
                }], businessFunctionGroupKeyTemplate: [{
                    type: i0.ContentChild,
                    args: [UserPermissionsItemBusinessFunctionGroupNameDirective]
                }], user: [{
                    type: i0.Input
                }], currencyList: [{
                    type: i0.Input
                }], selfApproveDefaultBehavior: [{
                    type: i0.Input
                }], showApprovalLevel: [{
                    type: i0.Input
                }], approvalLevel: [{
                    type: i0.Input
                }], approvalLevelLoading: [{
                    type: i0.Input
                }], approvalLevelError: [{
                    type: i0.Input
                }], limitData: [{
                    type: i0.Input
                }], userLimitsPermission: [{
                    type: i0.Input
                }], emitLimitData: [{
                    type: i0.Output
                }], userPermissions: [{
                    type: i0.Input
                }], dataGroup: [{
                    type: i0.Input
                }], payeeGroups: [{
                    type: i0.Input
                }], showActions: [{
                    type: i0.Input
                }], enableSelfApproval: [{
                    type: i0.Input
                }], showPayee: [{
                    type: i0.Input
                }], showFunctionGroupType: [{
                    type: i0.Input
                }], disableSaveButton: [{
                    type: i0.Input
                }], editView: [{
                    type: i0.Input
                }], legalEntityId: [{
                    type: i0.Input
                }], editedFunctionId: [{
                    type: i0.Input
                }], removeFunctionGroup: [{
                    type: i0.Output
                }], removeDataGroup: [{
                    type: i0.Output
                }], requestObjectEmit: [{
                    type: i0.Output
                }], editedFunctionIdEmit: [{
                    type: i0.Output
                }], changesMadedEmit: [{
                    type: i0.Output
                }] } });

    var uiModules$1 = [
        i1$2.IconModule,
        i3.TooltipModule,
        SelectItemsModalModule,
        i4.ButtonModule,
        i1$4.ModalModule,
        i2$1.TableModule,
        i1$1.HeaderModule,
        i6.KeyboardClickModule,
        i3$1.InputCheckboxModule,
        i1$5.CollapsibleModule,
        i3$2.EllipsisModule,
        i1$6.BadgeModule,
        i6$2.PaginationModule,
        i13.SwitchModule,
        i7.AmountModule,
        i2$3.AvatarModule,
        i6$1.CurrencyInputModule,
        i5.DropdownSingleSelectModule,
    ];
    var directives = [
        UserPermissionsItemBusinessFunctionDirective,
        UserPermissionsItemBusinessFunctionGroupNameDirective,
    ];
    var uiComponents = [
        BusinessFunctionGroupNameComponent,
        BusinessFunctionNameComponent,
        PrivilegeIndicatorComponent,
        UserContextIconComponent,
        DiscardChangesModalComponent,
        DataGroupItemsTableComponent,
        PrivilegeIndicatorListComponent,
        BusinessFunctionPrivilegesNameComponent,
        UserPermissionsItemComponent,
        FunctionGroupTimeBoundsComponent,
        AccessgroupErrorComponent,
        AccessgroupHeaderComponent,
        AccessgroupApprovalLogComponent,
        TimeBoundsComponent,
        PayeeGroupTableRowComponent,
        PayeeItemDetailComponent,
        PayeeItemDetailCustomizableDirective,
        UnassignDataGroupModalComponent,
        UnassignDataGroupModalCustomizableDirective,
        PayeeGroupDetailModalComponent,
        PayeeGroupDetailModalCustomizableDirective,
        AccountGroupDetailModalComponent,
        AccountGroupDetailModalCustomizableDirective,
        SelfApproveModalComponent,
        SelfApproveModalCustomizableDirective,
    ];
    var formsModules = [i9.FormsModule, i9.ReactiveFormsModule];
    var AccessgroupUiModule = /** @class */ (function () {
        function AccessgroupUiModule() {
        }
        return AccessgroupUiModule;
    }());
    /** @nocollapse */ AccessgroupUiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupUiModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ AccessgroupUiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupUiModule, declarations: [BusinessFunctionGroupNameComponent,
            BusinessFunctionNameComponent,
            PrivilegeIndicatorComponent,
            UserContextIconComponent,
            DiscardChangesModalComponent,
            DataGroupItemsTableComponent,
            PrivilegeIndicatorListComponent,
            BusinessFunctionPrivilegesNameComponent,
            UserPermissionsItemComponent,
            FunctionGroupTimeBoundsComponent,
            AccessgroupErrorComponent,
            AccessgroupHeaderComponent,
            AccessgroupApprovalLogComponent,
            TimeBoundsComponent,
            PayeeGroupTableRowComponent,
            PayeeItemDetailComponent,
            PayeeItemDetailCustomizableDirective,
            UnassignDataGroupModalComponent,
            UnassignDataGroupModalCustomizableDirective,
            PayeeGroupDetailModalComponent,
            PayeeGroupDetailModalCustomizableDirective,
            AccountGroupDetailModalComponent,
            AccountGroupDetailModalCustomizableDirective,
            SelfApproveModalComponent,
            SelfApproveModalCustomizableDirective, UserPermissionsItemBusinessFunctionDirective,
            UserPermissionsItemBusinessFunctionGroupNameDirective], imports: [i2.CommonModule, i1$2.IconModule,
            i3.TooltipModule,
            SelectItemsModalModule,
            i4.ButtonModule,
            i1$4.ModalModule,
            i2$1.TableModule,
            i1$1.HeaderModule,
            i6.KeyboardClickModule,
            i3$1.InputCheckboxModule,
            i1$5.CollapsibleModule,
            i3$2.EllipsisModule,
            i1$6.BadgeModule,
            i6$2.PaginationModule,
            i13.SwitchModule,
            i7.AmountModule,
            i2$3.AvatarModule,
            i6$1.CurrencyInputModule,
            i5.DropdownSingleSelectModule, i9.FormsModule, i9.ReactiveFormsModule], exports: [BusinessFunctionGroupNameComponent,
            BusinessFunctionNameComponent,
            PrivilegeIndicatorComponent,
            UserContextIconComponent,
            DiscardChangesModalComponent,
            DataGroupItemsTableComponent,
            PrivilegeIndicatorListComponent,
            BusinessFunctionPrivilegesNameComponent,
            UserPermissionsItemComponent,
            FunctionGroupTimeBoundsComponent,
            AccessgroupErrorComponent,
            AccessgroupHeaderComponent,
            AccessgroupApprovalLogComponent,
            TimeBoundsComponent,
            PayeeGroupTableRowComponent,
            PayeeItemDetailComponent,
            PayeeItemDetailCustomizableDirective,
            UnassignDataGroupModalComponent,
            UnassignDataGroupModalCustomizableDirective,
            PayeeGroupDetailModalComponent,
            PayeeGroupDetailModalCustomizableDirective,
            AccountGroupDetailModalComponent,
            AccountGroupDetailModalCustomizableDirective,
            SelfApproveModalComponent,
            SelfApproveModalCustomizableDirective, i1$2.IconModule,
            i3.TooltipModule,
            SelectItemsModalModule,
            i4.ButtonModule,
            i1$4.ModalModule,
            i2$1.TableModule,
            i1$1.HeaderModule,
            i6.KeyboardClickModule,
            i3$1.InputCheckboxModule,
            i1$5.CollapsibleModule,
            i3$2.EllipsisModule,
            i1$6.BadgeModule,
            i6$2.PaginationModule,
            i13.SwitchModule,
            i7.AmountModule,
            i2$3.AvatarModule,
            i6$1.CurrencyInputModule,
            i5.DropdownSingleSelectModule, UserPermissionsItemBusinessFunctionDirective,
            UserPermissionsItemBusinessFunctionGroupNameDirective, i9.FormsModule, i9.ReactiveFormsModule] });
    /** @nocollapse */ AccessgroupUiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupUiModule, imports: [__spreadArray(__spreadArray([i2.CommonModule], __read(uiModules$1)), __read(formsModules)), i1$2.IconModule,
            i3.TooltipModule,
            SelectItemsModalModule,
            i4.ButtonModule,
            i1$4.ModalModule,
            i2$1.TableModule,
            i1$1.HeaderModule,
            i6.KeyboardClickModule,
            i3$1.InputCheckboxModule,
            i1$5.CollapsibleModule,
            i3$2.EllipsisModule,
            i1$6.BadgeModule,
            i6$2.PaginationModule,
            i13.SwitchModule,
            i7.AmountModule,
            i2$3.AvatarModule,
            i6$1.CurrencyInputModule,
            i5.DropdownSingleSelectModule, i9.FormsModule, i9.ReactiveFormsModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupUiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i2.CommonModule], __read(uiModules$1)), __read(formsModules)),
                        declarations: __spreadArray(__spreadArray([], __read(uiComponents)), __read(directives)),
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(uiComponents)), __read(uiModules$1)), __read(directives)), __read(formsModules)),
                    }]
            }] });

    var JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER = new i0.InjectionToken('Job Role Detail Modal :: ENTITLEMENT_WIZARD_BUSINESS_FUNCTION_TO_GROUP_MAPPER');
    var JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER = new i0.InjectionToken('Job Role Detail Modal :: ENTITLEMENT_WIZARD_BUSINESS_FUNCTION_GROUP_ORDER');

    var JobRoleDetailBusinessFunctionGroupService = /** @class */ (function (_super) {
        __extends(JobRoleDetailBusinessFunctionGroupService, _super);
        function JobRoleDetailBusinessFunctionGroupService(businessFunctionToGroupConverter, orderedBusinessFunctionGroup) {
            return _super.call(this, businessFunctionToGroupConverter, orderedBusinessFunctionGroup) || this;
        }
        return JobRoleDetailBusinessFunctionGroupService;
    }(i1$3.BusinessFunctionGroupService));
    /** @nocollapse */ JobRoleDetailBusinessFunctionGroupService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailBusinessFunctionGroupService, deps: [{ token: JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER }, { token: JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ JobRoleDetailBusinessFunctionGroupService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailBusinessFunctionGroupService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailBusinessFunctionGroupService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER]
                        }] }];
        } });

    var BusinessFunctionsService = /** @class */ (function () {
        function BusinessFunctionsService(serviceAgreementsHttpService) {
            this.serviceAgreementsHttpService = serviceAgreementsHttpService;
            /**
             * Business function error stream
             */
            this.businessFunctionsError$ = new rxjs.BehaviorSubject(undefined);
        }
        /**
         * Return business functions based on provided service agreement id
         * @param id: string - service agreement id
         */
        BusinessFunctionsService.prototype.getBusinessFunctions = function (id) {
            var _this = this;
            return this.serviceAgreementsHttpService.getBusinessfunctions({ id: id }).pipe(operators.tap(function () { return _this.businessFunctionsError$.next(undefined); }), operators.catchError(function (error) {
                _this.businessFunctionsError$.next(error);
                return rxjs.of([]);
            }));
        };
        return BusinessFunctionsService;
    }());
    /** @nocollapse */ BusinessFunctionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionsService, deps: [{ token: i1__namespace$7.ServiceAgreementsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ BusinessFunctionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BusinessFunctionsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$7.ServiceAgreementsHttpService }]; } });

    var JobRoleDetailPrivilegeIndicatorListComponent = /** @class */ (function () {
        function JobRoleDetailPrivilegeIndicatorListComponent() {
            /**
             * Flag for first row in BF group
             */
            this.first = false;
            /**
             * Flag for last row in BF group
             */
            this.last = false;
        }
        return JobRoleDetailPrivilegeIndicatorListComponent;
    }());
    /** @nocollapse */ JobRoleDetailPrivilegeIndicatorListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailPrivilegeIndicatorListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ JobRoleDetailPrivilegeIndicatorListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: JobRoleDetailPrivilegeIndicatorListComponent, selector: "bb-job-role-detail-privilege-indicator-list", inputs: { businessFunction: "businessFunction", first: "first", last: "last" }, ngImport: i0__namespace, template: "<ng-container bbJobRoleDetailPrivilegeIndicatorListCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbJobRoleDetailPrivilegeIndicatorListCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.businessFunction\">\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-view\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"View privilege\"\n        i18n-aria-label=\"View privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.view\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.view.applicable && !hostRef.businessFunction.privileges.view.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-view'\"\n        [applicable]=\"hostRef.businessFunction.privileges.view.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges.view.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-create\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Create privilege\"\n        i18n-aria-label=\"Create privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.create\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.create.applicable && !hostRef.businessFunction.privileges.create.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-create'\"\n        [applicable]=\"hostRef.businessFunction.privileges.create.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges.create.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-edit\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Edit privilege\"\n        i18n-aria-label=\"Edit privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.edit\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.edit.applicable && !hostRef.businessFunction.privileges.edit.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-edit'\"\n        [applicable]=\"hostRef.businessFunction.privileges?.edit?.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges?.edit?.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-delete\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Delete privilege\"\n        i18n-aria-label=\"Delete privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.delete\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.delete.applicable && !hostRef.businessFunction.privileges.delete.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-delete'\"\n        [applicable]=\"hostRef.businessFunction.privileges?.delete?.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges?.delete?.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-approve\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Approve privilege\"\n        i18n-aria-label=\"\n          Approve privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.approve\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.approve.applicable &&\n          !hostRef.businessFunction.privileges.approve.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-approve'\"\n        [applicable]=\"hostRef.businessFunction.privileges?.approve?.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges?.approve?.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-cancel\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Cancel privilege\"\n        i18n-aria-label=\"Cancel privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.cancel\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.cancel.applicable && !hostRef.businessFunction.privileges.cancel.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-cancel'\"\n        [applicable]=\"hostRef.businessFunction.privileges?.cancel?.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges?.cancel?.assigned\"></bb-privilege-indicator>\n    </span>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return PrivilegeIndicatorComponent; }), selector: "bb-privilege-indicator", inputs: ["applicable", "assigned", "iconClass", "color"] }], directives: [{ type: i0__namespace.forwardRef(function () { return JobRoleDetailPrivilegeIndicatorListCustomizableDirective; }), selector: "[bbJobRoleDetailPrivilegeIndicatorListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailPrivilegeIndicatorListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-job-role-detail-privilege-indicator-list',
                        templateUrl: './job-role-detail-privilege-indicator-list.component.html',
                    }]
            }], propDecorators: { businessFunction: [{
                    type: i0.Input
                }], first: [{
                    type: i0.Input
                }], last: [{
                    type: i0.Input
                }] } });
    var JobRoleDetailPrivilegeIndicatorListCustomizableDirective = /** @class */ (function (_super) {
        __extends(JobRoleDetailPrivilegeIndicatorListCustomizableDirective, _super);
        function JobRoleDetailPrivilegeIndicatorListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return JobRoleDetailPrivilegeIndicatorListCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ JobRoleDetailPrivilegeIndicatorListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailPrivilegeIndicatorListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ JobRoleDetailPrivilegeIndicatorListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: JobRoleDetailPrivilegeIndicatorListCustomizableDirective, selector: "[bbJobRoleDetailPrivilegeIndicatorListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailPrivilegeIndicatorListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbJobRoleDetailPrivilegeIndicatorListCustomizable]',
                    }]
            }] });

    var JobRoleDetailModalComponent = /** @class */ (function () {
        function JobRoleDetailModalComponent(groupService, businessFunctionsService) {
            var _this = this;
            this.groupService = groupService;
            this.businessFunctionsService = businessFunctionsService;
            /**
             * Filter hook
             * @default false
             */
            this.filterHookEnabled = false;
            this._serviceAgreementId$ = new rxjs.BehaviorSubject(undefined);
            /**
             * Close modal window event.
             * Propagate event when modal window should be closed.
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.close = new i0.EventEmitter();
            /**
             * Unsubscribe stream
             */
            this.destroy$ = new rxjs.Subject();
            /**
             * Stream of Grouped business functions
             */
            this.groupedBusinessFunctions$ = this._serviceAgreementId$.pipe(operators.filter(function (x) { return !!x; }), operators.switchMap(function (id) { return _this.businessFunctionsService.getBusinessFunctions(id); }), operators.map(function (allBusinessFunctions) { return i1$3.getExtendedBusinessFunctions(_this.jobRoleDetail, allBusinessFunctions, _this.filterHookEnabled); }), operators.map(function (businessFunctions) { return _this.groupService.convertToGroups(businessFunctions); }), operators.takeUntil(this.destroy$));
            /**
             * Stream of loading state for Grouped business functions
             */
            this.groupedBusinessFunctionsLoading$ = rxjs.merge(this.groupedBusinessFunctions$.pipe(operators.mapTo(false), operators.catchError(function () { return rxjs.of(false); }))).pipe(operators.startWith(true));
            /**
             * Stream of error state for Grouped business functions
             */
            this.groupedBusinessFunctionsError$ = this.businessFunctionsService.businessFunctionsError$;
        }
        Object.defineProperty(JobRoleDetailModalComponent.prototype, "serviceAgreementId", {
            /**
             * Setter for serviceAgreement Id
             */
            set: function (id) {
                this._serviceAgreementId$.next(id);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * OpenChange modal window event handler.
         * @param isOpen - boolean
         */
        JobRoleDetailModalComponent.prototype.onOpenChange = function (isOpen) {
            if (!isOpen) {
                this.close.emit();
            }
        };
        JobRoleDetailModalComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
        };
        return JobRoleDetailModalComponent;
    }());
    /** @nocollapse */ JobRoleDetailModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailModalComponent, deps: [{ token: JobRoleDetailBusinessFunctionGroupService }, { token: BusinessFunctionsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ JobRoleDetailModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: JobRoleDetailModalComponent, selector: "bb-job-role-detail-modal", inputs: { jobRoleDetail: "jobRoleDetail", serviceAgreementId: "serviceAgreementId", filterHookEnabled: "filterHookEnabled" }, outputs: { close: "close" }, ngImport: i0__namespace, template: "<ng-container\n  bbJobRoleDetailModalCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    groupedBusinessFunctions: groupedBusinessFunctions$ | async,\n    groupedBusinessFunctionsLoading: groupedBusinessFunctionsLoading$ | async,\n    groupedBusinessFunctionsError: groupedBusinessFunctionsError$ | async\n  }\"></ng-container>\n\n<ng-template\n  bbJobRoleDetailModalCustomizable\n  let-hostRef\n  let-groupedBusinessFunctions=\"context.groupedBusinessFunctions\"\n  let-groupedBusinessFunctionsLoading=\"context.groupedBusinessFunctionsLoading\"\n  let-groupedBusinessFunctionsError=\"context.groupedBusinessFunctionsError\">\n  <bb-modal-ui\n    data-role=\"job-role-modal\"\n    [isOpen]=\"true\"\n    [modalOptions]=\"{\n      backdrop: 'static',\n      centered: true,\n      size: 'lg'\n    }\"\n    (isOpenChange)=\"hostRef.onOpenChange($event)\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item\">\n            <bb-header-ui\n              [heading]=\"hostRef.jobRoleDetail.name\"\n              headingType=\"h2\"\n              data-role=\"job-role-modal-header-title\"></bb-header-ui>\n            <div data-role=\"job-role-modal-header-description\" class=\"bb-text-support\">\n              {{ hostRef.jobRoleDetail.description }}\n            </div>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--align-top\">\n            <button\n              (click)=\"hostRef.onOpenChange(false)\"\n              bbButton\n              class=\"bb-stack__item-sm\"\n              color=\"unstyled\"\n              aria-label=\"Close dialog\"\n              i18n-aria-label=\"Close modal button in header@@job-role-detail-modal.header.close-btn.aria-label\"\n              data-role=\"job-role-modal-header-close-btn\">\n              <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n            </button>\n          </div>\n        </div>\n      </ng-template>\n    </bb-modal-header-ui>\n\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container *ngIf=\"!groupedBusinessFunctionsLoading; else loadingTemplate\">\n          <ng-container *ngIf=\"!groupedBusinessFunctionsError; else errorTemplate\">\n            <ng-container *ngIf=\"groupedBusinessFunctions && groupedBusinessFunctions.length; else emptyStateTemplate\">\n              <div\n                *ngFor=\"let group of groupedBusinessFunctions\"\n                data-role=\"job-role-modal-grouped-bf\"\n                class=\"bb-block bb-block--xl\"\n                [attr.data-test-id]=\"group.groupKey\">\n                <bb-business-function-group-name\n                  [groupKey]=\"group.groupKey\"\n                  class=\"bb-highlight\"\n                  data-role=\"job-role-modal-grouped-bf-title\"></bb-business-function-group-name>\n\n                <hr />\n\n                <div class=\"row bb-block bb-block--md\">\n                  <div class=\"col-5\"></div>\n                  <div class=\"col\">\n                    <bb-business-function-privileges-name\n                      class=\"d-flex bb-text-support bb-subtitle\"\n                      [hideExecute]=\"true\"\n                      data-role=\"job-role-modal-business-function-privileges-name\"></bb-business-function-privileges-name>\n                  </div>\n                </div>\n\n                <div\n                  *ngFor=\"let bf of group.businessFunctions; first as isFirst; last as isLast\"\n                  class=\"row align-items-center\"\n                  data-role=\"job-role-modal-bf-item\">\n                  <bb-business-function-name\n                    [businessFunction]=\"bf\"\n                    class=\"col-5 bb-text-default\"\n                    data-role=\"job-role-modal-bf-name\"></bb-business-function-name>\n\n                  <div class=\"col\">\n                    <bb-job-role-detail-privilege-indicator-list\n                      class=\"d-flex\"\n                      [businessFunction]=\"bf\"\n                      [first]=\"isFirst\"\n                      [last]=\"isLast\"\n                      data-role=\"job-role-modal-privilege-indicator-list\"></bb-job-role-detail-privilege-indicator-list>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #loadingTemplate>\n          <div class=\"bb-state-container\" data-role=\"job-role-modal-loading-state-tmp\">\n            <bb-loading-indicator-ui></bb-loading-indicator-ui>\n          </div>\n        </ng-template>\n\n        <ng-template #errorTemplate>\n          <div class=\"bb-state-container\" data-role=\"job-role-modal-error-state-tmp\">\n            <bb-empty-state-ui\n              title=\"Failed to load business functions\"\n              i18n-title=\"Error status message title@@job-role-detail-modal.state.error.title\"\n              subtitle=\"Try to reload the page.<br> All data will be lost after reload.\"\n              i18n-subtitle=\"Error status message subtitle@@job-role-detail-modal.state.error.subtitle\"\n              iconSize=\"xxl\"\n              iconModifier=\"error-outline\"\n              iconColor=\"muted\">\n            </bb-empty-state-ui>\n          </div>\n        </ng-template>\n\n        <ng-template #emptyStateTemplate>\n          <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"job-role-modal-empty-state-tmp\">\n            <bb-empty-state-ui\n              iconSize=\"xxl\"\n              iconModifier=\"help-outline\"\n              title=\"No business function assigned to this job role.\"\n              i18n-title=\"Empty state title message@@job-role-detail-modal.state.empty.subtitle\"></bb-empty-state-ui>\n          </div>\n        </ng-template>\n      </ng-template>\n    </bb-modal-body-ui>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return BusinessFunctionGroupNameComponent; }), selector: "bb-business-function-group-name", inputs: ["groupKey"] }, { type: i0__namespace.forwardRef(function () { return BusinessFunctionPrivilegesNameComponent; }), selector: "bb-business-function-privileges-name", inputs: ["hideExecute"] }, { type: i0__namespace.forwardRef(function () { return BusinessFunctionNameComponent; }), selector: "bb-business-function-name", inputs: ["businessFunction"] }, { type: i0__namespace.forwardRef(function () { return JobRoleDetailPrivilegeIndicatorListComponent; }), selector: "bb-job-role-detail-privilege-indicator-list", inputs: ["businessFunction", "first", "last"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return JobRoleDetailModalCustomizableDirective; }), selector: "[bbJobRoleDetailModalCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-job-role-detail-modal',
                        templateUrl: 'job-role-detail-modal.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: JobRoleDetailBusinessFunctionGroupService }, { type: BusinessFunctionsService }]; }, propDecorators: { jobRoleDetail: [{
                    type: i0.Input
                }], serviceAgreementId: [{
                    type: i0.Input
                }], filterHookEnabled: [{
                    type: i0.Input
                }], close: [{
                    type: i0.Output
                }] } });
    var JobRoleDetailModalCustomizableDirective = /** @class */ (function (_super) {
        __extends(JobRoleDetailModalCustomizableDirective, _super);
        function JobRoleDetailModalCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return JobRoleDetailModalCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ JobRoleDetailModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ JobRoleDetailModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: JobRoleDetailModalCustomizableDirective, selector: "[bbJobRoleDetailModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailModalCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbJobRoleDetailModalCustomizable]',
                    }]
            }] });

    var uiModules = [i1$4.ModalModule, i1$1.HeaderModule, i1$2.IconModule, i4.ButtonModule, i4$1.LoadingIndicatorModule];
    var services = [
        JobRoleDetailBusinessFunctionGroupService,
        BusinessFunctionsService,
        { provide: JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER, useValue: i1$3.defaultGetGroupForBusinessFunction },
        { provide: JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER, useValue: i1$3.defaultOrderedBusinessFunctionGroups },
    ];
    var components = [
        JobRoleDetailModalComponent,
        JobRoleDetailModalCustomizableDirective,
        JobRoleDetailPrivilegeIndicatorListComponent,
        JobRoleDetailPrivilegeIndicatorListCustomizableDirective,
    ];
    var JobRoleDetailModalModule = /** @class */ (function () {
        function JobRoleDetailModalModule() {
        }
        return JobRoleDetailModalModule;
    }());
    /** @nocollapse */ JobRoleDetailModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ JobRoleDetailModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailModalModule, declarations: [JobRoleDetailModalComponent,
            JobRoleDetailModalCustomizableDirective,
            JobRoleDetailPrivilegeIndicatorListComponent,
            JobRoleDetailPrivilegeIndicatorListCustomizableDirective], imports: [i2.CommonModule, i1$4.ModalModule, i1$1.HeaderModule, i1$2.IconModule, i4.ButtonModule, i4$1.LoadingIndicatorModule, AccessgroupUiModule], exports: [JobRoleDetailModalComponent,
            JobRoleDetailModalCustomizableDirective,
            JobRoleDetailPrivilegeIndicatorListComponent,
            JobRoleDetailPrivilegeIndicatorListCustomizableDirective, i1$4.ModalModule, i1$1.HeaderModule, i1$2.IconModule, i4.ButtonModule, i4$1.LoadingIndicatorModule] });
    /** @nocollapse */ JobRoleDetailModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailModalModule, providers: __spreadArray([], __read(services)), imports: [__spreadArray(__spreadArray([i2.CommonModule], __read(uiModules)), [AccessgroupUiModule]), i1$4.ModalModule, i1$1.HeaderModule, i1$2.IconModule, i4.ButtonModule, i4$1.LoadingIndicatorModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: JobRoleDetailModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i2.CommonModule], __read(uiModules)), [AccessgroupUiModule]),
                        declarations: __spreadArray([], __read(components)),
                        providers: __spreadArray([], __read(services)),
                        exports: __spreadArray(__spreadArray([], __read(components)), __read(uiModules)),
                    }]
            }] });

    var parseError = function (error) { return i1$3.parseError('AccessgroupUI', error); };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccessgroupApprovalLogComponent = AccessgroupApprovalLogComponent;
    exports.AccessgroupErrorComponent = AccessgroupErrorComponent;
    exports.AccessgroupHeaderComponent = AccessgroupHeaderComponent;
    exports.AccessgroupUiModule = AccessgroupUiModule;
    exports.AccountGroupDetailModalComponent = AccountGroupDetailModalComponent;
    exports.BusinessFunctionGroupNameComponent = BusinessFunctionGroupNameComponent;
    exports.BusinessFunctionNameComponent = BusinessFunctionNameComponent;
    exports.BusinessFunctionPrivilegesNameComponent = BusinessFunctionPrivilegesNameComponent;
    exports.DataGroupItemsTableComponent = DataGroupItemsTableComponent;
    exports.DiscardChangesModalComponent = DiscardChangesModalComponent;
    exports.FunctionGroupTimeBoundsComponent = FunctionGroupTimeBoundsComponent;
    exports.JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER = JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER;
    exports.JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER = JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER;
    exports.JobRoleDetailModalComponent = JobRoleDetailModalComponent;
    exports.JobRoleDetailModalModule = JobRoleDetailModalModule;
    exports.JobRoleDetailPrivilegeIndicatorListComponent = JobRoleDetailPrivilegeIndicatorListComponent;
    exports.PayeeGroupDetailModalComponent = PayeeGroupDetailModalComponent;
    exports.PayeeGroupTableRowComponent = PayeeGroupTableRowComponent;
    exports.PayeeItemDetailComponent = PayeeItemDetailComponent;
    exports.PrivilegeIndicatorComponent = PrivilegeIndicatorComponent;
    exports.PrivilegeIndicatorListComponent = PrivilegeIndicatorListComponent;
    exports.SelectItemsEmptyDirective = SelectItemsEmptyDirective;
    exports.SelectItemsErrorDirective = SelectItemsErrorDirective;
    exports.SelectItemsItemDirective = SelectItemsItemDirective;
    exports.SelectItemsItemHeaderDirective = SelectItemsItemHeaderDirective;
    exports.SelectItemsLoadingDirective = SelectItemsLoadingDirective;
    exports.SelectItemsModalComponent = SelectItemsModalComponent;
    exports.SelectItemsModalModule = SelectItemsModalModule;
    exports.SelectItemsSearchDirective = SelectItemsSearchDirective;
    exports.SelfApproveModalComponent = SelfApproveModalComponent;
    exports.TimeBoundsComponent = TimeBoundsComponent;
    exports.UnassignDataGroupModalComponent = UnassignDataGroupModalComponent;
    exports.UserContextIconComponent = UserContextIconComponent;
    exports.UserPermissionsItemBusinessFunctionDirective = UserPermissionsItemBusinessFunctionDirective;
    exports.UserPermissionsItemBusinessFunctionGroupNameDirective = UserPermissionsItemBusinessFunctionGroupNameDirective;
    exports.UserPermissionsItemComponent = UserPermissionsItemComponent;
    exports.parseError = parseError;
    exports["ӨAccountGroupDetailModalCustomizableDirective"] = AccountGroupDetailModalCustomizableDirective;
    exports["ӨJobRoleDetailModalCustomizableDirective"] = JobRoleDetailModalCustomizableDirective;
    exports["ӨJobRoleDetailPrivilegeIndicatorListCustomizableDirective"] = JobRoleDetailPrivilegeIndicatorListCustomizableDirective;
    exports["ӨPayeeGroupDetailModalCustomizableDirective"] = PayeeGroupDetailModalCustomizableDirective;
    exports["ӨPayeeItemDetailCustomizableDirective"] = PayeeItemDetailCustomizableDirective;
    exports["ӨSelfApproveModalCustomizableDirective"] = SelfApproveModalCustomizableDirective;
    exports["ӨUnassignDataGroupModalCustomizableDirective"] = UnassignDataGroupModalCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-accessgroup-ui.umd.js.map
