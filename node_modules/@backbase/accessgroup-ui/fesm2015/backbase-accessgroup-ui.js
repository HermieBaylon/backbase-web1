import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, Input, EventEmitter, Output, Directive, ChangeDetectionStrategy, ContentChild, NgModule, Injectable, InjectionToken, Inject } from '@angular/core';
import * as i9 from '@angular/forms';
import { FormsModule, FormControl, ReactiveFormsModule } from '@angular/forms';
import * as i4 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i1$1 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i1$2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i1$4 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i2$1 from '@backbase/ui-ang/table';
import { TableModule } from '@backbase/ui-ang/table';
import * as i3 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i6 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import * as i3$1 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i1$5 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i3$2 from '@backbase/ui-ang/ellipsis';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';
import * as i6$2 from '@backbase/ui-ang/pagination';
import { PaginationModule } from '@backbase/ui-ang/pagination';
import * as i1$6 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i7 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i2$3 from '@backbase/ui-ang/avatar';
import { AvatarModule } from '@backbase/ui-ang/avatar';
import * as i6$1 from '@backbase/ui-ang/currency-input';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';
import * as i5 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i13 from '@backbase/ui-ang/switch';
import { SwitchModule } from '@backbase/ui-ang/switch';
import * as i1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import '@angular/localize/init';
import * as i1$3 from '@backbase/accessgroup-common-ang';
import { getRouteParams, ApprovalLevelStatus, BusinessFunctionGroupService, getExtendedBusinessFunctions, defaultGetGroupForBusinessFunction, defaultOrderedBusinessFunctionGroups, parseError as parseError$1 } from '@backbase/accessgroup-common-ang';
import * as i2$2 from '@backbase/ui-ang/infinite-scroll';
import { InfiniteScrollModule } from '@backbase/ui-ang/infinite-scroll';
import * as i4$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i4$2 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import { BehaviorSubject, ReplaySubject, combineLatest, of, merge, Subject } from 'rxjs';
import { switchMap, shareReplay, auditTime, map, catchError, mapTo, tap, filter, takeUntil, startWith } from 'rxjs/operators';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i2$4 from '@angular/router';
import * as i1$7 from '@backbase/data-ang/accesscontrol';

class AccessgroupErrorComponent {
}
/** @nocollapse */ AccessgroupErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccessgroupErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccessgroupErrorComponent, selector: "bb-accessgroup-error", inputs: { error: "error" }, ngImport: i0, template: "<ng-container *ngIf=\"error\" [ngSwitch]=\"error?.kind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'AccessgroupUIAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view User\n      Permissons@@accessgroup-ui.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to view User Permissions.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state message label when user does not have permissions to view User\n      Permissons@@accessgroup-ui.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'AccessgroupUIConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity\n      error@@accessgroup-ui.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error message|Empty state message label when there is connectivity\n      error@@accessgroup-ui.error.connectivity.subtitle\"\n    iconModifier=\"error-outline\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n\n  <!-- AccessgroupUIUnknownError-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unknown Error\"\n    i18n-title=\"\n      Unknown Error title|Empty state label when there is an unknown error@@accessgroup-ui.error.unknown.title\"\n    subtitle=\"Try to reload the page or contact the system administrator.\"\n    i18n-subtitle=\"\n      Unknown Error message|Empty state message label when there is an unknown\n      error@@accessgroup-ui.error.unknown.subtitle\"\n    iconModifier=\"error-outline\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accessgroup-error',
                    templateUrl: './accessgroup-error.component.html',
                }]
        }], propDecorators: { error: [{
                type: Input
            }] } });

class AccessgroupHeaderComponent {
}
/** @nocollapse */ AccessgroupHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccessgroupHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccessgroupHeaderComponent, selector: "bb-accessgroup-header", inputs: { heading: "heading", description: "description" }, ngImport: i0, template: "<div>\n  <bb-header-ui [heading]=\"heading\" data-role=\"widget-header-heading\" headingType=\"h2\"></bb-header-ui>\n  <div data-role=\"widget-header-description\" class=\"bb-text-support\">{{ description }}</div>\n  <hr class=\"bb-block bb-block--lg\" />\n</div>\n", components: [{ type: i1$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accessgroup-header',
                    templateUrl: './accessgroup-header.component.html',
                }]
        }], propDecorators: { heading: [{
                type: Input
            }], description: [{
                type: Input
            }] } });

var ApprovalStatus;
(function (ApprovalStatus) {
    ApprovalStatus["APPROVED"] = "APPROVED";
    ApprovalStatus["REJECTED"] = "REJECTED";
})(ApprovalStatus || (ApprovalStatus = {}));

const translations = {
    approved: $localize `:Approved status@@approvals-journey.approval-log.status.approved:Approved`,
    rejected: $localize `:Rejected status@@approvals-journey.approval-log.status.rejected:Rejected`,
};
class AccessgroupApprovalLogComponent {
    constructor() {
        /** Is pending status */
        this.isPending = false;
        this.records = [];
        /** Status name (translated) reference object */
        this.statusName = {
            [ApprovalStatus.REJECTED]: translations.rejected,
            [ApprovalStatus.APPROVED]: translations.approved,
        };
        /** Icon name reference object */
        this.iconName = {
            [ApprovalStatus.REJECTED]: 'cancel',
            [ApprovalStatus.APPROVED]: 'success',
        };
        /** Icon color reference object */
        this.iconColor = {
            [ApprovalStatus.REJECTED]: 'danger',
            [ApprovalStatus.APPROVED]: 'success',
        };
    }
    /** Approval info setter */
    set approvalInfo(value) {
        this.records = [];
        if (value.records) {
            value.records.forEach((el) => {
                var _a, _b;
                el.approvalLevel = (_b = (_a = value === null || value === void 0 ? void 0 : value.approvalTypes) === null || _a === void 0 ? void 0 : _a.find(item => item.id === el.approvalTypeId)) === null || _b === void 0 ? void 0 : _b.name;
                this.records.push(el);
            });
        }
    }
}
/** @nocollapse */ AccessgroupApprovalLogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupApprovalLogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccessgroupApprovalLogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccessgroupApprovalLogComponent, selector: "bb-accessgroup-approval-log", inputs: { isPending: "isPending", approvalInfo: "approvalInfo" }, ngImport: i0, template: "<div class=\"bb-item-log bb-accessgroup-approval-log\">\n  <div *ngFor=\"let itemLogRecord of records\" class=\"bb-item-log__record\" data-role=\"approval-log-record\">\n    <div class=\"bb-stack bb-stack--align-top bb-stack--wrap\">\n      <bb-icon-ui\n        class=\"bb-item-log-record__icon\"\n        size=\"md\"\n        [name]=\"iconName[itemLogRecord.status]\"\n        [color]=\"iconColor[itemLogRecord.status]\"></bb-icon-ui>\n      <div class=\"bb-item-log-record__details\">\n        <span class=\"bb-text-bold\">{{ statusName[itemLogRecord.status] }} </span>\n\n        <!-- TODO: Replace letter with component -->\n        <span\n          *ngIf=\"itemLogRecord.approvalLevel\"\n          class=\"d-inline-block px-2 mx-1\"\n          style=\"background-color: #dedede; border-radius: 4px\"\n          >{{ itemLogRecord.approvalLevel }}</span\n        >\n\n        <small>\n          <ng-container> {{ itemLogRecord.userFullName }}</ng-container>\n          <ng-container *ngIf=\"itemLogRecord.externalUserId\"> ({{ itemLogRecord.externalUserId }})</ng-container>\n        </small>\n\n        <div class=\"bb-item-log-record__time\">\n          <time> {{ itemLogRecord.createdAt | date: 'd MMM YYYY' }}</time>\n          <ng-container i18n=\"At (used in date info)@@approvals-journey.approval-log.date.at\"> at</ng-container>\n          <time> {{ itemLogRecord.createdAt | date: 'shortTime' }}</time>\n        </div>\n      </div>\n\n      <div *ngIf=\"itemLogRecord.comment\" class=\"w-100 mt-3 mr-4 mb-2 ml-4\">\n        <div class=\"bb-card bb-card--sm bb-card--shadowless ml-2 bb-accessgroup-approval-log__comment\">\n          <div class=\"bb-card__body\">\n            <small>{{ itemLogRecord.comment }}</small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"isPending\" class=\"bb-item-log__record\" data-role=\"approval-log-pending\">\n    <bb-icon-ui class=\"bb-text-support bb-item-log-record__icon\" name=\"watch-later\" size=\"md\"></bb-icon-ui>\n    <div\n      class=\"bb-item-log__pending-record--details bb-text-bold\"\n      i18n=\"Waiting for further approval(s)@@approvals-journey.approval-log.pending.title\">\n      Waiting for further approval(s)\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupApprovalLogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accessgroup-approval-log',
                    templateUrl: './accessgroup-approval-log.component.html',
                }]
        }], propDecorators: { isPending: [{
                type: Input
            }], approvalInfo: [{
                type: Input
            }] } });

class BusinessFunctionGroupNameComponent {
    constructor(translationsService) {
        this.translationsService = translationsService;
    }
    get groupName() {
        if (!this.groupKey)
            return '';
        return this.translationsService.getBusinessFunctionGroupName(this.groupKey) || this.groupKey;
    }
}
/** @nocollapse */ BusinessFunctionGroupNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionGroupNameComponent, deps: [{ token: i1$3.TranslationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BusinessFunctionGroupNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BusinessFunctionGroupNameComponent, selector: "bb-business-function-group-name", inputs: { groupKey: "groupKey" }, ngImport: i0, template: "{{ groupName }}" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionGroupNameComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-business-function-group-name',
                    templateUrl: './business-function-group-name.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$3.TranslationsService }]; }, propDecorators: { groupKey: [{
                type: Input
            }] } });

class BusinessFunctionNameComponent {
    constructor(translationsService) {
        this.translationsService = translationsService;
    }
    get name() {
        if (!this.businessFunction)
            return '';
        return this.translationsService.getBusinessFunctionName(this.businessFunction.functionCode) || this.businessFunction.name;
    }
}
/** @nocollapse */ BusinessFunctionNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionNameComponent, deps: [{ token: i1$3.TranslationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BusinessFunctionNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BusinessFunctionNameComponent, selector: "bb-business-function-name", inputs: { businessFunction: "businessFunction" }, ngImport: i0, template: "{{ name }}" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionNameComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-business-function-name',
                    templateUrl: './business-function-name.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$3.TranslationsService }]; }, propDecorators: { businessFunction: [{
                type: Input
            }] } });

class BusinessFunctionPrivilegesNameComponent {
    constructor() {
        /**
         * Flag for hiding execute name
         */
        this.hideExecute = false;
    }
}
/** @nocollapse */ BusinessFunctionPrivilegesNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionPrivilegesNameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BusinessFunctionPrivilegesNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BusinessFunctionPrivilegesNameComponent, selector: "bb-business-function-privileges-name", inputs: { hideExecute: "hideExecute" }, ngImport: i0, template: "<span\n  data-role=\"Execute\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Execute privilege@@accessgroup-ui.label.privilege.execute\"\n  *ngIf=\"!hideExecute\">\n  Execute\n</span>\n<span\n  data-role=\"View\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"View privilege@@accessgroup-ui.label.privilege.view\">\n  View\n</span>\n<span\n  data-role=\"Create\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Create privilege@@accessgroup-ui.label.privilege.create\">\n  Create\n</span>\n<span\n  data-role=\"Edit\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Edit privilege@@accessgroup-ui.label.privilege.edit\">\n  Edit\n</span>\n<span\n  data-role=\"Delete\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Delete privilege@@accessgroup-ui.label.privilege.delete\">\n  Delete\n</span>\n\n<span\n  data-role=\"Cancel\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Cancel privilege@@accessgroup-ui.label.privilege.cancel\">\n  Cancel\n</span>\n\n<span\n  data-role=\"Approve\"\n  class=\"col bb-business-function-privilege-name-item bb-text-align-center\"\n  i18n=\"Approve privilege@@accessgroup-ui.label.privilege.approve\">\n  Approve\n</span>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionPrivilegesNameComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-business-function-privileges-name',
                    templateUrl: './business-function-privileges-name.component.html',
                }]
        }], propDecorators: { hideExecute: [{
                type: Input
            }] } });

class DataGroupItemsTableComponent {
    constructor() {
        /**
         * List of Data Group Items
         */
        this.items = [];
        /**
         * If enabled, last column is shown
         */
        this.showDeleteColumn = false;
        /**
         * Event that fires when user clicks button to delete Data Group
         */
        this.removeItem = new EventEmitter();
    }
    onRemoveItem(item) {
        if (this.showDeleteColumn) {
            this.removeItem.emit(item);
        }
    }
}
/** @nocollapse */ DataGroupItemsTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DataGroupItemsTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ DataGroupItemsTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DataGroupItemsTableComponent, selector: "bb-data-group-items-table", inputs: { items: "items", showDeleteColumn: "showDeleteColumn" }, outputs: { removeItem: "removeItem" }, ngImport: i0, template: "<table class=\"table\" bbTableFocus [bbTable]=\"items\">\n  <caption class=\"sr-only\" i18n=\"Accounts in this group@@data-group-items-table.label.table-with-accounts\">\n    Table with accounts in this group\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\" i18n=\"Name, type@@data-group-items-table.table.header.name\">Name, type</th>\n      <th scope=\"col\" i18n=\"Number@@data-group-items-table.table.header.number\">Number</th>\n      <th scope=\"col\" i18n=\"Ccy@@data-group-items-table.table.header.ccy\">Ccy</th>\n      <th *ngIf=\"showDeleteColumn\" scope=\"col\"></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let item of items\" [bbRow]=\"item\">\n      <td class=\"break-word\">\n        <div class=\"bb-text-bold\">{{ item.displayName }}</div>\n        <div>{{ item.productTypeName }}</div>\n      </td>\n      <td class=\"break-word\">\n        {{ item.IBAN || item.BBAN || item.productNumber || item.number }}\n      </td>\n      <td class=\"break-word\">{{ item.currency }}</td>\n      <td *ngIf=\"showDeleteColumn\" class=\"bb-text-align-right\">\n        <button\n          bbButton\n          (click)=\"onRemoveItem(item)\"\n          (keyup.enter)=\"onRemoveItem(item)\"\n          aria-label=\"Remove Account\"\n          i18n-aria-label=\"Remove Account@@data-group-items-table.aria.label.remove-account\"\n          [circle]=\"true\"\n          [color]=\"$any('icon-link')\">\n          <bb-icon-ui name=\"delete\"></bb-icon-ui>\n        </button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n", components: [{ type: i1$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2$1.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i2$1.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DataGroupItemsTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-data-group-items-table',
                    templateUrl: './data-group-items-table.component.html',
                }]
        }], propDecorators: { items: [{
                type: Input
            }], showDeleteColumn: [{
                type: Input
            }], removeItem: [{
                type: Output
            }] } });

class DiscardChangesModalComponent {
    constructor() {
        /**
         * Is modal open
         */
        this.isOpen = false;
        /**
         * Modal title
         */
        this.title = '';
        /**
         * Label for the discard changes button
         */
        this.discardButtonLabel = '';
        /**
         * Label for the cancel button
         */
        this.cancelButtonLabel = '';
        /**
         * Event emitter that emits the chosen action.
         * true to continue with action, false to cancel
         */
        this.resolve = new EventEmitter();
    }
    cancel() {
        this.resolve.emit(false);
    }
    discard() {
        this.resolve.emit(true);
    }
}
/** @nocollapse */ DiscardChangesModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DiscardChangesModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ DiscardChangesModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DiscardChangesModalComponent, selector: "bb-discard-changes-modal", inputs: { isOpen: "isOpen", title: "title", discardButtonLabel: "discardButtonLabel", cancelButtonLabel: "cancelButtonLabel" }, outputs: { resolve: "resolve" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"isOpen\" (cancel)=\"cancel()\" data-role=\"discard-changes-modal\">\n  <bb-modal-header-ui data-role=\"discard-changes-modal-title\" [title]=\"title\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-content></ng-content>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"discard()\"\n          data-role=\"discard-changes-modal-discard-button\">\n          {{ discardButtonLabel }}\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          (click)=\"cancel()\"\n          data-role=\"discard-changes-modal-cancel-button\">\n          {{ cancelButtonLabel }}\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$4.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$4.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1$4.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$4.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$4.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$4.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DiscardChangesModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-discard-changes-modal',
                    templateUrl: './discard-changes-modal.component.html',
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], title: [{
                type: Input
            }], discardButtonLabel: [{
                type: Input
            }], cancelButtonLabel: [{
                type: Input
            }], resolve: [{
                type: Output
            }] } });

const formatDate = (dateString) => {
    if (dateString) {
        const [year, month, date] = dateString.split('-');
        return new Date(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(date, 10));
    }
    return undefined;
};
const formatTime = (date, timeString) => {
    if (date && timeString) {
        const [hour, minute, second] = timeString.split(':');
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), parseInt(hour, 10), parseInt(minute, 10), parseInt(second, 10));
    }
    return undefined;
};

class TimeBoundsComponent {
    constructor() {
        this.validityFormat = '';
    }
    /**
     * Function group
     */
    set timeBounds(value) {
        if (value) {
            this.timeBoundsValue = value;
            this.fromDate = formatDate(value.validFromDate);
            this.fromTime = formatTime(this.fromDate, value.validFromTime);
            this.untilDate = formatDate(value.validUntilDate);
            this.untilTime = formatTime(this.untilDate, value.validUntilTime);
            this.setValidityPeriod();
        }
    }
    get timeBounds() {
        return this.timeBoundsValue;
    }
    setValidityPeriod() {
        this.validityFormat = '';
        if (this.fromDate && !this.untilDate) {
            this.validityFormat = 'validFromOnly';
        }
        if (!this.fromDate && this.untilDate) {
            this.validityFormat = 'validUntilOnly';
        }
        if (this.fromDate && this.untilDate) {
            this.validityFormat = 'validFromUntil';
        }
    }
}
/** @nocollapse */ TimeBoundsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TimeBoundsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TimeBoundsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TimeBoundsComponent, selector: "bb-time-bounds", inputs: { timeBounds: "timeBounds" }, ngImport: i0, template: "<div *ngIf=\"timeBounds && (fromDate || untilDate)\" class=\"bb-stack\" data-role=\"time-bounds\">\n  <bb-icon-ui name=\"access-time\" class=\"bb-stack__item bb-stack__item--spacing-sm\" size=\"sm\"></bb-icon-ui>\n  <div\n    class=\"bb-stack__item bb-subheader bb-subheader--regular\"\n    i18n=\"Time bound label@@time-bounds.label.validity-period\">\n    { validityFormat, select, validFromOnly {Active from\n    <span class=\"bb-text-bold\">{{ fromDate | date: 'mediumDate' }} {{ fromTime | date: 'shortTime' }}</span\n    >} validUntilOnly {Active until\n    <span class=\"bb-text-bold\">{{ untilDate | date: 'mediumDate' }} {{ untilTime | date: 'shortTime' }}</span\n    >} validFromUntil {Active from\n    <span class=\"bb-text-bold\">{{ fromDate | date: 'mediumDate' }} {{ fromTime | date: 'shortTime' }}</span> until\n    <span class=\"bb-text-bold\">{{ untilDate | date: 'mediumDate' }} {{ untilTime | date: 'shortTime' }}</span\n    >} }\n  </div>\n</div>\n", components: [{ type: i1$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TimeBoundsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-time-bounds',
                    templateUrl: './time-bounds.component.html',
                }]
        }], propDecorators: { timeBounds: [{
                type: Input
            }] } });

class FunctionGroupTimeBoundsComponent {
    constructor() {
        this.validityFormat = '';
    }
    /**
     * Function group
     */
    set functionGroup(value) {
        if (value) {
            this.functionGroupValue = value;
            this.fromDate = formatDate(value.validFromDate);
            this.fromTime = formatTime(this.fromDate, value.validFromTime);
            this.untilDate = formatDate(value.validUntilDate);
            this.untilTime = formatTime(this.untilDate, value.validUntilTime);
            this.setValidityPeriod();
        }
    }
    get functionGroup() {
        return this.functionGroupValue;
    }
    setValidityPeriod() {
        this.validityFormat = '';
        if (this.fromDate && !this.untilDate) {
            this.validityFormat = 'validFromOnly';
        }
        if (!this.fromDate && this.untilDate) {
            this.validityFormat = 'validUntilOnly';
        }
        if (this.fromDate && this.untilDate) {
            this.validityFormat = 'validFromUntil';
        }
    }
}
/** @nocollapse */ FunctionGroupTimeBoundsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FunctionGroupTimeBoundsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ FunctionGroupTimeBoundsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FunctionGroupTimeBoundsComponent, selector: "bb-function-group-time-bounds", inputs: { functionGroup: "functionGroup" }, ngImport: i0, template: "<bb-time-bounds [timeBounds]=\"functionGroup\"></bb-time-bounds>\n", components: [{ type: TimeBoundsComponent, selector: "bb-time-bounds", inputs: ["timeBounds"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FunctionGroupTimeBoundsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-function-group-time-bounds',
                    templateUrl: './function-group-time-bounds.component.html',
                }]
        }], propDecorators: { functionGroup: [{
                type: Input
            }] } });

class PrivilegeIndicatorComponent {
    constructor() {
        /**
         * Flag to indicate if the privilege is applicable. Default is false
         */
        this.applicable = false;
        /**
         * Flag to indicate if the privilege is assigned. Default is false
         */
        this.assigned = false;
        /**
         * Icon class name for changed indicator. Default is empty string
         */
        this.iconClass = '';
        /**
         * Color of privilege indicator, different color when item is removed in approval log. Default is empty string
         */
        this.color = '';
    }
}
/** @nocollapse */ PrivilegeIndicatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PrivilegeIndicatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PrivilegeIndicatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PrivilegeIndicatorComponent, selector: "bb-privilege-indicator", inputs: { applicable: "applicable", assigned: "assigned", iconClass: "iconClass", color: "color" }, ngImport: i0, template: "<ng-container *ngIf=\"applicable\">\n  <bb-icon-ui\n    *ngIf=\"assigned\"\n    [color]=\"color || 'success'\"\n    name=\"check\"\n    aria-label=\"Permitted\"\n    i18n-aria-label=\"Permitted aria label@@function-group-list.details.permission.aria.permitted\"\n    bbTooltip=\"Permitted\"\n    i18n-bbTooltip=\"Permitted tooltip@@function-group-list.details.permission.tooltip.permitted\"\n    triggers=\"hover\"\n    [class]=\"iconClass\"></bb-icon-ui>\n  <bb-icon-ui\n    *ngIf=\"!assigned\"\n    [color]=\"color || 'muted'\"\n    name=\"times\"\n    aria-label=\"Not permitted\"\n    i18n-aria-label=\"Not permitted aria label@@function-group-list.details.permission.aria.not-permitted\"\n    bbTooltip=\"Not permitted\"\n    i18n-bbTooltip=\"Not permitted tooltip@@function-group-list.details.permission.tooltip.not-permitted\"\n    triggers=\"hover\"\n    [class]=\"iconClass\"></bb-icon-ui>\n</ng-container>\n<ng-container *ngIf=\"!applicable\">\n  <bb-icon-ui\n    name=\"remove\"\n    [color]=\"color || 'muted'\"\n    aria-label=\"Not applicable for this business function\"\n    i18n-aria-label=\"Not applicable aria label@@function-group-list.details.permission.aria.not-applicable\"\n    bbTooltip=\"Not applicable for this function\"\n    i18n-bbTooltip=\"Not applicable tooltip@@function-group-list.details.permission.tooltip.not-applicable\"\n    triggers=\"hover\"></bb-icon-ui>\n</ng-container>\n", components: [{ type: i1$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PrivilegeIndicatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-privilege-indicator',
                    templateUrl: './privilege-indicator.component.html',
                }]
        }], propDecorators: { applicable: [{
                type: Input
            }], assigned: [{
                type: Input
            }], iconClass: [{
                type: Input
            }], color: [{
                type: Input
            }] } });

class PrivilegeIndicatorListComponent {
    constructor() {
        /**
         * Business Function to check privileges against
         */
        this.emitLimitData = new EventEmitter();
    }
    /**
     * Check whether limit is allowed for specific privilege
     */
    showLimit(privilege) {
        var _a, _b, _c, _d;
        // @ts-ignore
        const fgKey = this.functionGroupId + ((_a = this.businessFunction) === null || _a === void 0 ? void 0 : _a.functionId) + privilege;
        return (this.limitData &&
            (this.limitData[((_b = this.businessFunction) === null || _b === void 0 ? void 0 : _b.functionId) + privilege] || this.limitData[fgKey]) &&
            ((_c = this.businessFunction) === null || _c === void 0 ? void 0 : _c.privileges[privilege].assigned) &&
            ((_d = this.businessFunction) === null || _d === void 0 ? void 0 : _d.privileges[privilege].applicable));
    }
    /**
     * Get limit context object
     */
    getLimitContext(privilege) {
        var _a, _b, _c;
        return {
            limit: this.functionGroupId
                ? this.limitData[this.functionGroupId + ((_a = this.businessFunction) === null || _a === void 0 ? void 0 : _a.functionId) + privilege]
                : this.limitData[((_b = this.businessFunction) === null || _b === void 0 ? void 0 : _b.functionId) + privilege],
            id: (_c = this.businessFunction) === null || _c === void 0 ? void 0 : _c.functionId,
            type: privilege,
        };
    }
    /**
     * Emit limit data
     */
    emitLimit(emitData) {
        if (this.functionGroupId) {
            this.emitLimitData.emit(Object.assign(Object.assign({}, emitData), { functionGroupId: this.functionGroupId }));
        }
        else {
            this.emitLimitData.emit(emitData);
        }
    }
    /**
     * Track when control has no amount and no limits button should be shown
     */
    isLimitBoundsEmpty(limitData) {
        const limitBounds = limitData.limitBounds;
        return limitBounds === null || limitBounds === void 0 ? void 0 : limitBounds.every(bound => { var _a, _b; return !((_a = bound.regular) === null || _a === void 0 ? void 0 : _a.amount) && !((_b = bound.shadow) === null || _b === void 0 ? void 0 : _b.amount); });
    }
}
/** @nocollapse */ PrivilegeIndicatorListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PrivilegeIndicatorListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PrivilegeIndicatorListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PrivilegeIndicatorListComponent, selector: "bb-privilege-indicator-list", inputs: { businessFunction: "businessFunction", limitData: "limitData", userPermission: "userPermission", functionGroupId: "functionGroupId" }, outputs: { emitLimitData: "emitLimitData" }, ngImport: i0, template: "<ng-container *ngIf=\"businessFunction\">\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-execute-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Execute privilege\"\n      i18n-aria-label=\"Execute privilege@@privilege-indicator-list.label.privilege.aria.execute\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-execute'\"\n      [applicable]=\"businessFunction.privileges.execute.applicable\"\n      [assigned]=\"businessFunction.privileges.execute.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('execute')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('execute')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-view-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"View privilege\"\n      i18n-aria-label=\"View privilege@@privilege-indicator-list.label.privilege.aria.view\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-view'\"\n      [applicable]=\"businessFunction.privileges.view.applicable\"\n      [assigned]=\"businessFunction.privileges.view.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('view')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('view')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-create-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Create privilege\"\n      i18n-aria-label=\"Create privilege@@privilege-indicator-list.label.privilege.aria.create\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-create'\"\n      [applicable]=\"businessFunction.privileges.create.applicable\"\n      [assigned]=\"businessFunction.privileges.create.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('create')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('create')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-edit-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Edit privilege\"\n      i18n-aria-label=\"Edit privilege@@privilege-indicator-list.label.privilege.aria.edit\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-edit'\"\n      [applicable]=\"businessFunction.privileges.edit.applicable\"\n      [assigned]=\"businessFunction.privileges.edit.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('edit')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('edit')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-delete-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Delete privilege\"\n      i18n-aria-label=\"Delete privilege@@privilege-indicator-list.label.privilege.aria.delete\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-delete'\"\n      [applicable]=\"businessFunction.privileges.delete.applicable\"\n      [assigned]=\"businessFunction.privileges.delete.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('delete')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('delete')\">\n    </ng-container>\n  </span>\n\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-cancel-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Cancel privilege\"\n      i18n-aria-label=\"Cancel privilege@@privilege-indicator-list.label.privilege.aria.cancel\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-cancel'\"\n      [applicable]=\"businessFunction.privileges.cancel.applicable\"\n      [assigned]=\"businessFunction.privileges.cancel.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('cancel')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('cancel')\">\n    </ng-container>\n  </span>\n  <span\n    class=\"col bb-privilege-indicator-list-item bb-text-align-center\"\n    data-role=\"privilege-indicator-list-approve-item\">\n    <span\n      class=\"sr-only\"\n      aria-label=\"Approve privilege\"\n      i18n-aria-label=\"Approve privilege@@privilege-indicator-list.label.privilege.aria.approve\">\n    </span>\n    <bb-privilege-indicator\n      [attr.data-role]=\"businessFunction.name + '-approve'\"\n      [applicable]=\"businessFunction.privileges.approve.applicable\"\n      [assigned]=\"businessFunction.privileges.approve.assigned\"></bb-privilege-indicator>\n    <ng-container\n      *ngIf=\"showLimit('approve')\"\n      [ngTemplateOutlet]=\"limitTemplate\"\n      [ngTemplateOutletContext]=\"getLimitContext('approve')\">\n    </ng-container>\n  </span>\n</ng-container>\n\n<ng-template #limitTemplate let-limit=\"limit\" let-type=\"type\" let-id=\"id\">\n  <button\n    data-role=\"privilege-indicator-list-limit-create\"\n    bbButton\n    aria-label=\"Create Limit\"\n    i18n-aria-label=\"Create limit button@@privilege-indicator-list.limit.aria.label.create-limit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    color=\"link-text-light\"\n    bbTooltip=\"Click to set limit\"\n    container=\"body\"\n    i18n-bbTooltip=\"Set limit button tooltip@@privilege-indicator-list.limit.set-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'create', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"!limit?.created && (userPermission.regularLimit.create || userPermission.shadowLimit.create)\">\n    <bb-icon-ui name=\"control-point\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-edit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    aria-label=\"Edit Limit\"\n    i18n-aria-label=\"Edit limit button@@privilege-indicator-list.limit.aria.label.edit-limit\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Click to edit limit\"\n    i18n-bbTooltip=\"Edit limit button tooltip@@privilege-indicator-list.limit.edit-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'edit', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"\n      limit?.created &&\n      (userPermission.regularLimit.edit || userPermission.shadowLimit.edit) &&\n      !limit?.pending &&\n      !isLimitBoundsEmpty(limit)\n    \">\n    <bb-icon-ui name=\"create\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-create-empty\"\n    class=\"align-top bb-job-role-limit-icon\"\n    aria-label=\"Create Limit\"\n    i18n-aria-label=\"Create limit button@@privilege-indicator-list.limit.aria.label.create-empty-limit\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Click to set limit\"\n    i18n-bbTooltip=\"Set limit button tooltip@@privilege-indicator-list.limit.create-empty-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'edit', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"\n      limit?.created &&\n      (userPermission.regularLimit.edit || userPermission.shadowLimit.edit) &&\n      !limit?.pending &&\n      isLimitBoundsEmpty(limit)\n    \">\n    <bb-icon-ui name=\"control-point\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-pending\"\n    aria-label=\"Pending Limit\"\n    i18n-aria-label=\"Pending limit button@@privilege-indicator-list.limit.aria.label.pending-limit\"\n    class=\"align-top bb-job-role-limit-icon\"\n    color=\"link-text-light\"\n    bbButton\n    container=\"body\"\n    bbTooltip=\"Limit awaiting approval\"\n    i18n-bbTooltip=\"Pending view limit button tooltip@@privilege-indicator-list.limit.pending-limit.tooltip\"\n    triggers=\"hover\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'view', limit: limit, privilegesType: type, id: id })\"\n    *ngIf=\"limit?.pending\">\n    <bb-icon-ui name=\"access-time\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n\n  <button\n    data-role=\"privilege-indicator-list-limit-view\"\n    aria-label=\"View Limit\"\n    i18n-aria-label=\"View limit button@@privilege-indicator-list.limit.aria.label.view-limit\"\n    *ngIf=\"\n      limit?.created &&\n      !userPermission.regularLimit.edit &&\n      !userPermission.shadowLimit.edit &&\n      !limit?.pending &&\n      (userPermission.regularLimit.view || userPermission.shadowLimit.view)\n    \"\n    class=\"align-top bb-job-role-limit-icon\"\n    (bbKeyboardClick)=\"emitLimit({ type: 'view', limit: limit, privilegesType: type, id: id })\"\n    color=\"link-text-light\"\n    bbTooltip=\"Click to view limit\"\n    i18n-bbTooltip=\"View limit button tooltip@@privilege-indicator-list.limit.view-limit.tooltip\"\n    triggers=\"hover\"\n    container=\"body\"\n    bbButton>\n    <bb-icon-ui name=\"remove-red-eye\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n  </button>\n</ng-template>\n", components: [{ type: PrivilegeIndicatorComponent, selector: "bb-privilege-indicator", inputs: ["applicable", "assigned", "iconClass", "color"] }, { type: i1$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i6.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PrivilegeIndicatorListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-privilege-indicator-list',
                    templateUrl: './privilege-indicator-list.component.html',
                }]
        }], propDecorators: { businessFunction: [{
                type: Input
            }], limitData: [{
                type: Input
            }], userPermission: [{
                type: Input
            }], functionGroupId: [{
                type: Input
            }], emitLimitData: [{
                type: Output
            }] } });

class SelectItemsSearchDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsSearchDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsSearchDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsSearchDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsSearchDirective, selector: "ng-template[bbSelectItemsSearch]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsSearchDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsSearch]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class SelectItemsItemHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsItemHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsItemHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsItemHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsItemHeaderDirective, selector: "ng-template[bbSelectItemsItemHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsItemHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsItemHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class SelectItemsItemDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsItemDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsItemDirective, selector: "ng-template[bbSelectItemsItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsItemDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsItem]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class SelectItemsLoadingDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsLoadingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsLoadingDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsLoadingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsLoadingDirective, selector: "ng-template[bbSelectItemsLoading]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsLoadingDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsLoading]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class SelectItemsErrorDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsErrorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsErrorDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsErrorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsErrorDirective, selector: "ng-template[bbSelectItemsError]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsErrorDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsError]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class SelectItemsEmptyDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ SelectItemsEmptyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsEmptyDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectItemsEmptyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsEmptyDirective, selector: "ng-template[bbSelectItemsEmpty]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsEmptyDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbSelectItemsEmpty]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class SelectItemsModalComponent {
    constructor() {
        this.loadingTemplate = null;
        this.errorTemplate = null;
        this.emptyTemplate = null;
        this.selectedItems = new Map();
        this._allItems = [];
        this._items = [];
        this._isOpen = false;
        this.searchValue = '';
        /**
         * Modal heading
         */
        this.title = '';
        /**
         * Number of items
         */
        this.totalCount = 0;
        /**
         * Loading flag
         */
        this.loading = false;
        /**
         * Loading flag when loading more
         */
        this.loadingMore = false;
        /**
         * Error flag
         */
        this.error = false;
        /**
         * Should the search box be shown
         */
        this.searchEnabled = false;
        /**
         * Indicates button group separation for selection
         */
        this.selectGroupsEnabled = false;
        /**
         * Placeholder for search box
         */
        this.searchPlaceholder = '';
        /**
         * Label for the submit button
         */
        this.submitLabel = '';
        /**
         * Dialog options. Defaults to empty object.
         */
        this.modalOptions = {};
        /**
         * Unique identifier for the items
         */
        this.itemIdProperty = 'id';
        /**
         * Event emitter that emits on confirm
         * The event contains a list of the items that were selected
         */
        this.confirm = new EventEmitter();
        /**
         * Event emitter that emits a search string
         */
        this.search = new EventEmitter();
        /**
         * Event emitter that emits when canceling the selection
         */
        this.cancel = new EventEmitter();
        /**
         * Event emitter which emits on modal close
         */
        this.isOpenChange = new EventEmitter();
        /**
         * Event emitter which emits when end of list is reached
         */
        this.loadMore = new EventEmitter();
        /**
         * Event emitter which emits when all items should be loaded
         */
        this.loadAllItems = new EventEmitter();
        this.allSelected = false;
        this.someSelected = false;
    }
    set isOpen(value) {
        this._isOpen = value;
        this.selectedItems.clear();
        this.searchValue = '';
        this.allSelected = false;
        this.someSelected = false;
    }
    /**
     * List of items to select from
     */
    set items(items) {
        this._items = items;
        this.updateSelectFlags();
    }
    /**
     * List of all available items (to manage toggleAll over not loaded items)
     * @param items
     */
    set allItems(items) {
        if (items) {
            this._allItems = items;
            this.toggleSelection(items, this.areAllItemsSelected(items));
        }
    }
    // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
    get isOpen() {
        return this._isOpen;
    }
    // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
    get items() {
        return this._items;
    }
    get selectedItemsLength() {
        return this.selectedItems.size;
    }
    /**
     * Case when totalCount > 0 indicates that we have paginated API
     *
     * TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
     */
    get areAllScrollableItemsLoaded() {
        return this.totalCount === 0 || (this._items && this._items.length === this.totalCount);
    }
    ngAfterContentInit() {
        if (!this.itemHeaderTemplate || !this.itemTemplate) {
            throw new Error('itemHeaderTemplate and itemTemplate are mandatory');
        }
    }
    isItemSelected(item) {
        return this.selectedItems.has(item[this.itemIdProperty]);
    }
    toggleOpen(event) {
        this.isOpenChange.emit(event);
    }
    onToggleAll(event) {
        event.preventDefault();
        // this.loadAndToggleAll.observers.length === 0 will keep backwards compatibility
        if (this.areAllScrollableItemsLoaded || this.loadAllItems.observers.length === 0) {
            this.toggleSelection(this._items, this.allSelected);
        }
        else {
            this.checkForAllLoadedItems();
        }
    }
    onToggleItem(event, item) {
        event.preventDefault();
        this.toggleSelection([item], this.selectedItems.has(item[this.itemIdProperty]));
    }
    onLastFocused() {
        if (!this.areAllScrollableItemsLoaded) {
            this.onLoadMore();
        }
    }
    onCancel() {
        this.isOpenChange.emit(false);
    }
    onSubmit() {
        this.confirm.emit(Array.from(this.selectedItems.values()));
        this.isOpenChange.emit(false);
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    onSearch(query) {
        if (typeof query === 'string') {
            this.search.emit(query);
            this._allItems = [];
        }
    }
    onLoadMore() {
        this.loadMore.emit();
    }
    trackByItemProp(_index, item) {
        return item[this.itemIdProperty];
    }
    checkForAllLoadedItems() {
        // checking if we already loaded all items
        if (this._allItems.length === this.totalCount) {
            this.toggleSelection(this._allItems, this.areAllItemsSelected(this._allItems));
        }
        else {
            this.loadAllItems.emit();
        }
    }
    toggleSelection(items, allSelected) {
        if (allSelected) {
            items.forEach(item => this.selectedItems.delete(item[this.itemIdProperty]));
        }
        else {
            items.forEach(item => this.selectedItems.set(item[this.itemIdProperty], item));
        }
        this.updateSelectFlags();
    }
    // TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
    updateSelectFlags() {
        this.allSelected = this.areAllItemsSelected(this._items);
        this.someSelected =
            !this.allSelected && this._items && this._items.some(item => this.selectedItems.has(item[this.itemIdProperty]));
    }
    // TODO: Replace with optional chaining(?.) once prettier will be updated to 2.1.*
    areAllItemsSelected(items) {
        return Boolean(items && items.every(item => this.selectedItems.has(item[this.itemIdProperty])));
    }
}
/** @nocollapse */ SelectItemsModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectItemsModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectItemsModalComponent, selector: "bb-select-items-modal", inputs: { isOpen: "isOpen", title: "title", items: "items", allItems: "allItems", totalCount: "totalCount", loading: "loading", loadingMore: "loadingMore", error: "error", searchEnabled: "searchEnabled", selectGroupsEnabled: "selectGroupsEnabled", searchPlaceholder: "searchPlaceholder", submitLabel: "submitLabel", modalOptions: "modalOptions", itemIdProperty: "itemIdProperty" }, outputs: { confirm: "confirm", search: "search", cancel: "cancel", isOpenChange: "isOpenChange", loadMore: "loadMore", loadAllItems: "loadAllItems" }, queries: [{ propertyName: "searchTemplate", first: true, predicate: SelectItemsSearchDirective, descendants: true }, { propertyName: "itemHeaderTemplate", first: true, predicate: SelectItemsItemHeaderDirective, descendants: true }, { propertyName: "itemTemplate", first: true, predicate: SelectItemsItemDirective, descendants: true }, { propertyName: "loadingTemplate", first: true, predicate: SelectItemsLoadingDirective, descendants: true }, { propertyName: "errorTemplate", first: true, predicate: SelectItemsErrorDirective, descendants: true }, { propertyName: "emptyTemplate", first: true, predicate: SelectItemsEmptyDirective, descendants: true }], ngImport: i0, template: "<bb-modal-ui\n  data-role=\"select-items-modal\"\n  *ngIf=\"isOpen\"\n  [isOpen]=\"true\"\n  [modalOptions]=\"modalOptions\"\n  (isOpenChange)=\"toggleOpen($event)\">\n  <bb-modal-header-ui data-role=\"select-items-modal__header-label\" [title]=\"title\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-select-items bb-outline-spacer bb-outline-spacer--all\">\n        <ng-container *ngIf=\"searchEnabled\">\n          <ng-container *ngTemplateOutlet=\"searchTpl\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!error; else errorTpl\">\n          <ng-container *ngIf=\"!loading; else loadingTpl\">\n            <ng-container *ngIf=\"items?.length! > 0; else emptyTpl\">\n              <bb-infinite-scroll-ui\n                class=\"bb-infinite-scroll bb-outline-spacer bb-outline-spacer--left\"\n                data-role=\"select-items-modal__infinite-scroll\"\n                [offset]=\"5\"\n                [disableScrollEnd]=\"areAllScrollableItemsLoaded\"\n                (scrollEnd)=\"onLoadMore()\">\n                <div class=\"bb-list bb-list--density-sm\">\n                  <div\n                    class=\"\n                      sticky-top\n                      position-sticky\n                      bb-select-items__sticky-header-top\n                      bb-outline-spacer bb-outline-spacer--left\n                    \">\n                    <div class=\"bb-list__item\">\n                      <ng-container *ngIf=\"itemHeaderTemplate\">\n                        <div\n                          class=\"bb-stack bb-stack--density-sm bb_block bb-block--sm\"\n                          data-role=\"select-items-modal__items-header\">\n                          <div\n                            class=\"bb-stack__item\"\n                            data-role=\"select-items-modal__toggle-all\"\n                            (click)=\"onToggleAll($event)\"\n                            (keyup.space)=\"onToggleAll($event)\">\n                            <bb-input-checkbox-ui\n                              label=\"&nbsp;\"\n                              aria-label=\"Checkbox value to toggle all items\"\n                              i18n-aria-label=\"\n                                Checkbox value to toggle all items@@select-items-modal.label.aria.checkbox-for-all\"\n                              [ngModel]=\"allSelected\"\n                              [indeterminate]=\"someSelected\"></bb-input-checkbox-ui>\n                          </div>\n                          <div\n                            class=\"bb-stack__item bb-stack__item--fill\"\n                            data-role=\"select-items-modal__items-header-template\">\n                            <ng-container *ngTemplateOutlet=\"itemHeaderTemplate!.templateRef\"> </ng-container>\n                          </div>\n                        </div>\n                      </ng-container>\n                    </div>\n                    <!-- this div needed for border in bb-list__item above -->\n                    <div></div>\n                  </div>\n                  <div *ngIf=\"itemTemplate\" data-role=\"select-items-modal__list\" role=\"list\">\n                    <div\n                      *ngFor=\"let item of items; let last = last; trackBy: trackByItemProp\"\n                      class=\"bb-list__item\"\n                      (click)=\"onToggleItem($event, item)\"\n                      (keyup.space)=\"onToggleItem($event, item)\"\n                      data-role=\"select-items-modal__list-item\"\n                      role=\"listitem\">\n                      <div class=\"bb-stack bb-stack--density-sm\" role=\"button\">\n                        <bb-input-checkbox-ui\n                          label=\"&nbsp;\"\n                          aria-label=\"Checkbox value for the next item\"\n                          i18n-aria-label=\"\n                            Checkbox value for the next item@@select-items-modal.label.aria.checkbox-for-item\"\n                          [ngModel]=\"isItemSelected(item)\"\n                          (focus)=\"last && onLastFocused()\"\n                          class=\"bb-stack__item\"></bb-input-checkbox-ui>\n                        <div\n                          class=\"bb-stack__item bb-stack__item--fill\"\n                          data-role=\"select-items-modal__list-item-template\">\n                          <ng-container\n                            *ngTemplateOutlet=\"\n                              itemTemplate!.templateRef;\n                              context: {\n                                item: item,\n                                isSelected: isItemSelected(item),\n                                toggleItem: onToggleItem.bind(this)\n                              }\n                            \">\n                          </ng-container>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div\n                  *ngIf=\"!areAllScrollableItemsLoaded\"\n                  [class.invisible]=\"!loadingMore\"\n                  class=\"bb-block bb-block--sm\"\n                  data-role=\"select-items-modal__list-load-more-spinner\">\n                  <bb-loading-indicator-ui loaderSize=\"sm\"></bb-loading-indicator-ui>\n                </div>\n              </bb-infinite-scroll-ui>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          class=\"bb-button-bar__button\"\n          data-role=\"select-items-modal__add-btn\"\n          bbButton\n          (click)=\"onSubmit()\"\n          [disabled]=\"selectedItemsLength === 0\">\n          <ng-container *ngIf=\"!submitLabel; else submitLabelRef\" i18n=\"Submit@@select-items-modal.label.button.submit\"\n            >Submit</ng-container\n          >\n          <span data-role=\"select-items-modal__number-of-selected-items\" *ngIf=\"selectedItemsLength\"\n            >&nbsp;({{ selectedItemsLength }})</span\n          >\n          <ng-template #submitLabelRef>{{ submitLabel }}</ng-template>\n        </button>\n        <button\n          class=\"bb-button-bar__button\"\n          bbButton\n          (click)=\"onCancel()\"\n          color=\"secondary\"\n          i18n=\"Cancel@@select-items-modal.label.button.cancel\"\n          data-role=\"select-items-modal__cancel-btn\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<ng-template #errorTpl>\n  <ng-container *ngIf=\"errorTemplate; else defaultErrorTemplate\">\n    <ng-container *ngTemplateOutlet=\"errorTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultErrorTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__error-state\">\n      <bb-empty-state-ui\n        iconModifier=\"error\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"\n        title=\"Unknown error\"\n        i18n-title=\"Unknown error@@select-items-modal.label.fallback.error.title\"\n        subtitle=\"Please try again later\"\n        i18n-subtitle=\"Please try again later@@select-items-modal.label.fallback.error.message\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #searchTpl>\n  <ng-container *ngIf=\"searchTemplate; else defaultSearchTemplate\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        searchTemplate!.templateRef;\n        context: {\n          searchPlaceholder: searchPlaceholder,\n          searchValue: searchValue,\n          onSearch: onSearch.bind(this)\n        }\n      \">\n    </ng-container>\n  </ng-container>\n\n  <ng-template #defaultSearchTemplate>\n    <div class=\"bb-block bb-block--sm\">\n      <bb-search-box-ui\n        data-role=\"select-items-modal__search\"\n        class=\"bb-select-items__search-box\"\n        [aria-label]=\"searchPlaceholder\"\n        [showClear]=\"true\"\n        [showSearch]=\"true\"\n        [(ngModel)]=\"searchValue\"\n        [placeholder]=\"searchPlaceholder\"\n        (submit)=\"onSearch($event)\"\n        (clear)=\"onSearch('')\"></bb-search-box-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #loadingTpl>\n  <ng-container *ngIf=\"loadingTemplate; else defaultLoadingTemplate\">\n    <ng-container *ngTemplateOutlet=\"loadingTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultLoadingTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__loading-state\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #emptyTpl>\n  <ng-container *ngIf=\"emptyTemplate; else defaultEmptyTemplate\">\n    <ng-container *ngTemplateOutlet=\"emptyTemplate!.templateRef\"> </ng-container>\n  </ng-container>\n\n  <ng-template #defaultEmptyTemplate>\n    <div class=\"bb-state-container bb-select-items__state\" data-role=\"select-items-modal__empty-state\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        title=\"No items\"\n        i18n-title=\"No items@@select-items-modal.label.fallback.empty.title\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i1$4.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$4.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1$4.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2$2.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i3$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i4$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1$4.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i4$2.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$4.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$4.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-items-modal',
                    templateUrl: './select-items-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { searchTemplate: [{
                type: ContentChild,
                args: [SelectItemsSearchDirective]
            }], itemHeaderTemplate: [{
                type: ContentChild,
                args: [SelectItemsItemHeaderDirective]
            }], itemTemplate: [{
                type: ContentChild,
                args: [SelectItemsItemDirective]
            }], loadingTemplate: [{
                type: ContentChild,
                args: [SelectItemsLoadingDirective]
            }], errorTemplate: [{
                type: ContentChild,
                args: [SelectItemsErrorDirective]
            }], emptyTemplate: [{
                type: ContentChild,
                args: [SelectItemsEmptyDirective]
            }], isOpen: [{
                type: Input
            }], title: [{
                type: Input
            }], items: [{
                type: Input
            }], allItems: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], loading: [{
                type: Input
            }], loadingMore: [{
                type: Input
            }], error: [{
                type: Input
            }], searchEnabled: [{
                type: Input
            }], selectGroupsEnabled: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], submitLabel: [{
                type: Input
            }], modalOptions: [{
                type: Input
            }], itemIdProperty: [{
                type: Input
            }], confirm: [{
                type: Output
            }], search: [{
                type: Output
            }], cancel: [{
                type: Output
            }], isOpenChange: [{
                type: Output
            }], loadMore: [{
                type: Output
            }], loadAllItems: [{
                type: Output
            }] } });

const uiModules$2 = [
    ModalModule,
    SearchBoxModule,
    ButtonModule,
    InputCheckboxModule,
    InfiniteScrollModule,
    LoadingIndicatorModule,
    EmptyStateModule,
];
const uiComponents$1 = [
    SelectItemsModalComponent,
    SelectItemsItemHeaderDirective,
    SelectItemsItemDirective,
    SelectItemsLoadingDirective,
    SelectItemsSearchDirective,
    SelectItemsErrorDirective,
    SelectItemsEmptyDirective,
];
class SelectItemsModalModule {
}
/** @nocollapse */ SelectItemsModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ SelectItemsModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsModalModule, declarations: [SelectItemsModalComponent,
        SelectItemsItemHeaderDirective,
        SelectItemsItemDirective,
        SelectItemsLoadingDirective,
        SelectItemsSearchDirective,
        SelectItemsErrorDirective,
        SelectItemsEmptyDirective], imports: [CommonModule, FormsModule, ModalModule,
        SearchBoxModule,
        ButtonModule,
        InputCheckboxModule,
        InfiniteScrollModule,
        LoadingIndicatorModule,
        EmptyStateModule], exports: [ModalModule,
        SearchBoxModule,
        ButtonModule,
        InputCheckboxModule,
        InfiniteScrollModule,
        LoadingIndicatorModule,
        EmptyStateModule, SelectItemsModalComponent,
        SelectItemsItemHeaderDirective,
        SelectItemsItemDirective,
        SelectItemsLoadingDirective,
        SelectItemsSearchDirective,
        SelectItemsErrorDirective,
        SelectItemsEmptyDirective] });
/** @nocollapse */ SelectItemsModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsModalModule, imports: [[CommonModule, FormsModule, ...uiModules$2], ModalModule,
        SearchBoxModule,
        ButtonModule,
        InputCheckboxModule,
        InfiniteScrollModule,
        LoadingIndicatorModule,
        EmptyStateModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectItemsModalModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...uiComponents$1],
                    imports: [CommonModule, FormsModule, ...uiModules$2],
                    exports: [...uiModules$2, ...uiComponents$1],
                }]
        }] });

class UserContextIconComponent {
    get formattedName() {
        if (this.name) {
            const short = this.name
                .split(/\s/)
                .reduce((r, w) => (r += w.slice(0, 1)), '')
                .substring(0, 2);
            return short.toLocaleUpperCase();
        }
        return '';
    }
}
/** @nocollapse */ UserContextIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserContextIconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserContextIconComponent, selector: "bb-user-context-icon-ui", inputs: { isMaster: "isMaster", name: "name" }, ngImport: i0, template: "<div class=\"bb-user-context-icon-ui user-context__icon\">\n  <div *ngIf=\"!isMaster\" class=\"bb-user-context-icon-text\">\n    {{ formattedName }}\n  </div>\n  <bb-icon-ui *ngIf=\"isMaster\" name=\"home\" color=\"white\" size=\"lg\"></bb-icon-ui>\n</div>\n", components: [{ type: i1$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextIconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-context-icon-ui',
                    templateUrl: './user-context-icon.component.html',
                }]
        }], propDecorators: { isMaster: [{
                type: Input
            }], name: [{
                type: Input
            }] } });

class SelfApproveModalComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Flag to show modal
         */
        this.isOpen = false;
        this.currencyHistory = '';
        this.amountHistory = '';
        /**
         * Event emitter that emits on cancel button click
         */
        this.cancel = new EventEmitter();
        /**
         * Event emitter that emits data on any action
         */
        this.selfApprovalDataEmit = new EventEmitter();
        /**
         * Amount form
         */
        this.amount = new FormControl({ currency: 'undefined' });
        /**
         * Supported currency list
         */
        this.supportedCurrencies = [];
        /**
         * Currency
         */
        this.currency = '';
        /**
         * Flag if max amount need to be set
         */
        this.isCurrencySet = false;
    }
    /**
     * Currency info
     */
    set currencyList(val) {
        if (val) {
            if (!this.currency) {
                this.currency = val.defaultCurrency;
            }
            this.supportedCurrencies = val.allowedCurrencyList;
        }
    }
    /**
     * SelfApproval item setter
     */
    set selfApproveItemData(val) {
        if (val) {
            this._selfApproveItemData = val;
            if (this._selfApproveItemData.bounds && this._selfApproveItemData.bounds.length) {
                this.isCurrencySet = true;
                // For MVP scope, in future change
                this.currency = this._selfApproveItemData.bounds[0].currencyCode;
                this.currencyHistory = this._selfApproveItemData.bounds[0].currencyCode;
                this.amountHistory = this._selfApproveItemData.bounds[0].amount;
                this.amount.patchValue({
                    amount: this._selfApproveItemData.bounds[0].amount,
                    currency: this._selfApproveItemData.bounds[0].currencyCode,
                });
            }
        }
    }
    /**
     * Emit cancel event
     */
    onCancel() {
        this.cancel.emit();
    }
    /**
     * Emit data on save && enable action
     */
    onSave() {
        let dataForSelfApprove = { businessFunctionName: '', canSelfApprove: false };
        if (this.bf) {
            dataForSelfApprove = { businessFunctionName: this.bf.name, canSelfApprove: true };
        }
        if (this.isCurrencySet && this.amount.value && this.amount.value.amount) {
            dataForSelfApprove.bounds = [];
            dataForSelfApprove.bounds.push({
                currencyCode: this.currency,
                amount: this.amount.value.amount,
            });
        }
        this.selfApprovalDataEmit.emit(dataForSelfApprove);
    }
    /**
     * Emit data on disable action
     */
    onDisabled() {
        let dataForSelfApprove = {};
        if (this.bf) {
            dataForSelfApprove = { businessFunctionName: this.bf.name, canSelfApprove: false };
        }
        this.selfApprovalDataEmit.emit(dataForSelfApprove);
    }
    setForm(state) {
        this.isCurrencySet = state;
        this.amount.patchValue({ currency: 'undefined' });
        this.amount.markAsTouched();
    }
}
/** @nocollapse */ SelfApproveModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelfApproveModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelfApproveModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelfApproveModalComponent, selector: "bb-self-approve-modal", inputs: { isOpen: "isOpen", user: "user", currencyList: "currencyList", bf: "bf", jobRoleName: "jobRoleName", type: "type", isLimitSupport: "isLimitSupport", selfApproveItemData: "selfApproveItemData" }, outputs: { cancel: "cancel", selfApprovalDataEmit: "selfApprovalDataEmit" }, ngImport: i0, template: "<ng-container bbSelfApproveModalCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n\n<ng-template bbSelfApproveModalCustomizable let-hostRef>\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"self-approval-for-user-modal\">\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'enable'\"\n      i18n-title=\"Enable self approval header text@@self-approval-modal.enable.header.text\"\n      title=\"Enable self-approval for user?\"\n      data-role=\"account-modal-enable-header\"></bb-modal-header-ui>\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport\"\n      i18n-title=\"Edit self approval header text@@self-approval-modal.edit.header.text\"\n      title=\"Edit self-approval for user?\"\n      data-role=\"account-modal-edit-header\"></bb-modal-header-ui>\n    <bb-modal-header-ui\n      *ngIf=\"hostRef.type === 'edit' && !hostRef.isLimitSupport\"\n      i18n-title=\"Disable self approval header text@@self-approval-modal.disable.header.text\"\n      title=\"Disable self-approval for user?\"\n      data-role=\"account-modal-disable-header\"></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <div *ngIf=\"hostRef.user\" class=\"bb-block bb-block--md\" data-role=\"approval-modal-body\">\n          <div class=\"bb-card bb-card--highlight bb-card--sm\">\n            <div class=\"bb-card__body\">\n              <div class=\"bb-stack bb-stack--density-lg\">\n                <bb-avatar-ui\n                  [name]=\"hostRef.user?.fullName\"\n                  data-role=\"self-approval-avatar\"\n                  size=\"lg\"\n                  class=\"bb-stack__item bb-stack__item--spacing-md\"></bb-avatar-ui>\n                <div class=\"bb-stack__item\">\n                  <h5 class=\"bb-block bb-header bb-text-bold bb-block--xs\" data-role=\"self-approval-header\">\n                    {{ hostRef.user?.fullName }}\n                  </h5>\n                  <div class=\"bb-block bb-header bb-block--xs\">\n                    <span\n                      class=\"bb-subtitle bb-text-support bb-text-bold\"\n                      i18n=\"User external ID label@@self-approval-modal.external.id.label\">\n                      ID:\n                    </span>\n                    <span class=\"bb-subtitle bb-text-support break-word\" data-role=\"self-approval-external-id\">{{\n                      hostRef.user?.externalId\n                    }}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div>\n                <strong i18n=\"Job Role section text@@self-approval-modal.job-role.section.text\"> Job role </strong>\n              </div>\n              <div class=\"bb-inline-stack\">\n                <bb-icon-ui class=\"bb-inline-stack__item bb-text-bold\" name=\"users\" size=\"md\"></bb-icon-ui>\n                <span class=\"bb-inline-stack__item\" data-role=\"self-approval-job-role-name\">\n                  {{ hostRef.jobRoleName }}\n                </span>\n              </div>\n            </div>\n            <div class=\"col-6\">\n              <div>\n                <strong i18n=\"Business Function section text@@self-approval-modal.bf.section.text\">\n                  Business Function\n                </strong>\n              </div>\n              <div>\n                <bb-business-function-name [businessFunction]=\"hostRef.bf\"></bb-business-function-name>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          class=\"bb-block bb-block--md\"\n          *ngIf=\"hostRef.isLimitSupport && hostRef.supportedCurrencies.length\"\n          data-role=\"limit-support-block\">\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-inline-stack\">\n              <strong\n                class=\"bb-inline-stack__item\"\n                i18n=\"Info label for max amount for self approve@@self-approval-modal.max-amount.section.text\">\n                Max amount for self-approve\n              </strong>\n            </div>\n          </div>\n          <div\n            class=\"bb-block bb-block--md\"\n            *ngIf=\"!hostRef.selfApproveItemData && !hostRef.isCurrencySet\"\n            data-role=\"no-currency-set-item-data-block\">\n            <button\n              bbButton\n              color=\"link-text\"\n              buttonSize=\"sm\"\n              data-role=\"currency-set-button\"\n              (click)=\"hostRef.setForm(true)\">\n              <bb-icon-ui name=\"add-outline\" [size]=\"'sm'\" cropped></bb-icon-ui>\n              <span i18n=\"Set max amount button text@@self-approval-modal.max-amount.button.text\">Set max amount</span>\n            </button>\n          </div>\n          <div class=\"bb-stack\" *ngIf=\"hostRef.isCurrencySet\" data-role=\"is-currency-set-block\">\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <div class=\"row\">\n                <div class=\"col-3\" *ngIf=\"hostRef.supportedCurrencies.length\" data-role=\"supported-currencies-block\">\n                  <bb-dropdown-single-select-ui\n                    label=\"Currency\"\n                    i18n-label=\"\n                      Label text for currency amount for self approve@@self-approval-modal.currency.amount.integerLabel\"\n                    [options]=\"hostRef.supportedCurrencies\"\n                    [required]=\"true\"\n                    [(ngModel)]=\"hostRef.currency\"\n                    class=\"d-block bb-block bb-block--lg\">\n                  </bb-dropdown-single-select-ui>\n                </div>\n\n                <div class=\"col\">\n                  <bb-currency-input-ui\n                    i18n-integerLabel=\"\n                      Label text for to amount for self approve@@self-approval-modal.to.amount.integerLabel\"\n                    integerLabel=\"To(including)\"\n                    [integer]=\"true\"\n                    resultType=\"number\"\n                    [formControl]=\"hostRef.amount\"\n                    placeholder=\"\"></bb-currency-input-ui>\n                </div>\n              </div>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--push-right align-self-center\">\n              <button\n                bbButton\n                color=\"link-text\"\n                [circle]=\"true\"\n                buttonSize=\"md\"\n                (click)=\"hostRef.setForm(false)\"\n                data-role=\"close-currency-block-button\">\n                <bb-icon-ui name=\"delete\"></bb-icon-ui>\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <ng-container *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport; else disabledButton\"></ng-container>\n          <button\n            *ngIf=\"hostRef.type === 'edit' && hostRef.isLimitSupport\"\n            bbButton\n            color=\"primary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onSave()\"\n            data-role=\"edit-type-save-btn\"\n            [disabled]=\"\n              (hostRef.currencyHistory === hostRef.currency && hostRef.amountHistory === hostRef.amount.value.amount) ||\n              (!hostRef.amount.value.amount && hostRef.isCurrencySet) ||\n              (!hostRef.isCurrencySet && !hostRef.currencyHistory && !hostRef.amountHistory)\n            \"\n            i18n=\"Save button text for self approve@self-approval-modal.save-btn.text\">\n            Save\n          </button>\n          <button\n            *ngIf=\"hostRef.type === 'enable'\"\n            bbButton\n            color=\"primary\"\n            class=\"bb-button-bar__button\"\n            data-role=\"enable-type-save-btn\"\n            (click)=\"hostRef.onSave()\"\n            i18n=\"Enable button text for self approve@self-approval-modal.enable-btn.text\">\n            Enable\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            data-role=\"cancel-btn\"\n            i18n=\"Cancel button text for self approve@self-approval-modal.cancel-btn.text\">\n            Cancel\n          </button>\n\n          <ng-container *ngIf=\"hostRef.type === 'edit' && !hostRef.isLimitSupport; else disabledButton\"></ng-container>\n\n          <ng-template #disabledButton>\n            <button\n              *ngIf=\"hostRef.type === 'edit'\"\n              bbButton\n              color=\"danger\"\n              class=\"bb-button-bar__button bb-button-bar__button--across\"\n              (click)=\"hostRef.onDisabled()\"\n              data-role=\"edit-type-disable-btn\"\n              i18n=\"Disable button text for self approve@self-approval-modal.disable-btn.text\">\n              Disable\n            </button>\n          </ng-template>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i2$3.AvatarComponent; }), selector: "bb-avatar-ui", inputs: ["image", "name", "imgAlt", "size"] }, { type: i0.forwardRef(function () { return i1$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return BusinessFunctionNameComponent; }), selector: "bb-business-function-name", inputs: ["businessFunction"] }, { type: i0.forwardRef(function () { return i5.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i6$1.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0.forwardRef(function () { return i1$4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return SelfApproveModalCustomizableDirective; }), selector: "[bbSelfApproveModalCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i9.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i9.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i9.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0.forwardRef(function () { return i9.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1$4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelfApproveModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-self-approve-modal',
                    templateUrl: './self-approve-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], user: [{
                type: Input
            }], currencyList: [{
                type: Input
            }], bf: [{
                type: Input
            }], jobRoleName: [{
                type: Input
            }], type: [{
                type: Input
            }], isLimitSupport: [{
                type: Input
            }], selfApproveItemData: [{
                type: Input
            }], cancel: [{
                type: Output
            }], selfApprovalDataEmit: [{
                type: Output
            }] } });
class SelfApproveModalCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelfApproveModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelfApproveModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelfApproveModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelfApproveModalCustomizableDirective, selector: "[bbSelfApproveModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelfApproveModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelfApproveModalCustomizable]',
                }]
        }] });

class PayeeItemDetailComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Padding on top
         */
        this.isPaddingTop = true;
    }
    getAddress(detail) {
        const keys = ['addressLine1', 'addressLine2', 'streetName', 'postCode', 'town', 'countrySubDivision', 'country'];
        return this.getAddressString(keys, detail);
    }
    getBankAddress(account) {
        const keys = [
            'bankAddressLine1',
            'bankAddressLine2',
            'bankStreetName',
            'bankPostCode',
            'bankTown',
            'bankCountrySubDivision',
            'bankCountry',
        ];
        return this.getAddressString(keys, account);
    }
    getHoldersAddress(account) {
        const keys = [
            'accountHolderAddressLine1',
            'accountHolderAddressLine2',
            'accountHolderStreetName',
            'accountHolderPostCode',
            'accountHolderTown',
            'accountHolderCountrySubDivision',
            'accountHolderCountry',
        ];
        return this.getAddressString(keys, account);
    }
    getAddressString(keys, detail) {
        const addressData = [];
        keys.forEach((key) => {
            if (detail[key]) {
                addressData.push(detail[key]);
            }
        });
        return addressData.length ? addressData.join(', ') : undefined;
    }
}
/** @nocollapse */ PayeeItemDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeItemDetailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayeeItemDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayeeItemDetailComponent, selector: "bb-payee-item-detail", inputs: { payeeDetail: "payeeDetail", isPaddingTop: "isPaddingTop" }, ngImport: i0, template: "<ng-container bbPayeeItemDetailCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n\n<ng-template bbPayeeItemDetailCustomizable let-hostRef>\n  <div [ngClass]=\"{ isPaddingTop: 'pt-4' }\">\n    <bb-header-ui\n      headingType=\"h2\"\n      tabindex=\"0\"\n      [heading]=\"hostRef.payeeDetail.name\"\n      data-role=\"payee-item-detail-header-label\"></bb-header-ui>\n    <div tabindex=\"0\" class=\"bb-text-support bb-block bb-block--lg\">\n      <div data-role=\"payee-item-detail-header-definition\">\n        {{ hostRef.payeeDetail.alias }}\n      </div>\n    </div>\n    <hr class=\"bb-block\" />\n    <div class=\"row\">\n      <div tabindex=\"0\" class=\"col-6\" *ngIf=\"hostRef.payeeDetail.phoneNumber\">\n        <p class=\"bb-block bb-block--no-margin\">\n          <b i18n=\"Contact phone number@@payee-item-detail.contact.phone\"> Phone number </b>\n        </p>\n        <p data-role=\"payee-item-detail-phone-number\">\n          {{ hostRef.payeeDetail.phoneNumber }}\n        </p>\n      </div>\n      <div tabindex=\"0\" class=\"col-6\" *ngIf=\"hostRef.payeeDetail.emailId\">\n        <p class=\"bb-block bb-block--no-margin\">\n          <b i18n=\"Contact email@@payee-item-detail.contact.email\"> Email address </b>\n        </p>\n        <p data-role=\"payee-item-detail-email\">\n          {{ hostRef.payeeDetail.emailId }}\n        </p>\n      </div>\n      <div tabindex=\"0\" class=\"col-12\" *ngIf=\"hostRef.payeeDetail.contactPerson\">\n        <p class=\"bb-block bb-block--no-margin\">\n          <b i18n=\"Contact person for contact@@payee-item-detail.contact.contactPerson\"> Contact person </b>\n        </p>\n        <p data-role=\"payee-item-detail-contact-person\">\n          {{ hostRef.payeeDetail.contactPerson }}\n        </p>\n      </div>\n      <div tabindex=\"0\" class=\"col-12\" *ngIf=\"hostRef.getAddress(hostRef.payeeDetail)\">\n        <p class=\"bb-block bb-block--no-margin\">\n          <b i18n=\"Contact address@@payee-item-detail.contact.address\"> Contact address </b>\n        </p>\n        <p data-role=\"payee-item-detail-contact-address\">\n          {{ hostRef.getAddress(hostRef.payeeDetail) }}\n        </p>\n      </div>\n      <div\n        class=\"col-12\"\n        tabindex=\"0\"\n        role=\"list\"\n        *ngIf=\"hostRef.payeeDetail.accounts && hostRef.payeeDetail.accounts.length\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item\">\n            <bb-header-ui\n              headingType=\"h3\"\n              heading=\"Account information\"\n              i18n-heading=\"Account information header text@@payee-item-detail.account.information.text\"></bb-header-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <p [ngPlural]=\"hostRef.payeeDetail.accounts.length\" data-role=\"payee-item-detail-account-info\">\n              {{ hostRef.payeeDetail.accounts.length }}\n              <ng-template ngPluralCase=\"=1\" i18n=\"Account@@payee-item-detail.contact.account.info.text\"\n                >account</ng-template\n              >\n              <ng-template ngPluralCase=\"other\" i18n=\"Accounts@@payee-item-detail.contact.accounts.info.text\"\n                >accounts</ng-template\n              >\n            </p>\n          </div>\n        </div>\n        <div\n          data-role=\"payee-account-block\"\n          tabindex=\"0\"\n          role=\"listitem\"\n          *ngFor=\"let account of hostRef.payeeDetail.accounts\"\n          class=\"bb-block bb-block--lg card card-sm bg-gray-lighter rounded\">\n          <div class=\"card-body\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item bb-stack__item--align-top\">\n                <bb-icon-ui\n                  class=\"bb-text-support\"\n                  name=\"account\"\n                  size=\"md\"\n                  color=\"support\"\n                  cropped=\"true\"></bb-icon-ui>\n              </div>\n              <div class=\"bb-stack__item\">\n                <div class=\"bb-block bb-block--md\">\n                  <p class=\"bb-block bb-block--no-margin\">\n                    <b data-role=\"payee-item-detail-account-name\">\n                      {{ account.name }}\n                    </b>\n                  </p>\n                  <p data-role=\"payee-item-detail-account-alias\">\n                    {{ account.alias }}\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"account.IBAN\"\n                    data-role=\"payee-item-detail-account-iban\">\n                    <b i18n=\"Account IBAN@@payee-item-detail.contact.account.iban.label\">IBAN: </b>\n                    {{ account.IBAN }}\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"account.accountNumber\"\n                    data-role=\"payee-item-detail-account-accountNumber\">\n                    <b i18n=\"Account accountNumber@@payee-item-detail.contact.account.accountNumber.label\">Account Number: </b>\n                    {{ account.accountNumber }}\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"account.bankName\"\n                    data-role=\"payee-item-detail-account-bank-name\">\n                    <b i18n=\"Account Bank@@payee-item-detail.contact.account.bank.label\">Bank: </b>\n                    {{ account.bankName }}\n                  </p>\n                  <p class=\"bb-block bb-block--no-margin\" *ngIf=\"account.BIC\" data-role=\"payee-item-detail-account-bic\">\n                    <b i18n=\"Account BIC@@payee-item-detail.contact.account.bic.label\">BIC: </b>\n                    {{ account.BIC }}\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"account.bankCode\"\n                    data-role=\"payee-item-detail-account-bank-code\">\n                    <b i18n=\"Account Bank code@@payee-item-detail.contact.account.bankCode.label\">Bank code: </b>\n                    {{ account.bankCode }}\n                  </p>\n                </div>\n\n                <div class=\"bb-block\">\n                  <p class=\"bb-block bb-block--no-margin\" *ngIf=\"hostRef.getBankAddress(account)\">\n                    <b i18n=\"Account Bank Address@@payee-item-detail.contact.account.bank.address.label\"\n                      >Bank branch address:</b\n                    >\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"hostRef.getBankAddress(account)\"\n                    data-role=\"payee-item-detail-account-bank-address\">\n                    {{ hostRef.getBankAddress(account) }}\n                  </p>\n\n                  <p class=\"bb-block bb-block--no-margin\" *ngIf=\"hostRef.getHoldersAddress(account)\">\n                    <b i18n=\"Account holders address@@payee-item-detail.contact.account.holders.address.label\"\n                      >Account holder`s address:</b\n                    >\n                  </p>\n                  <p\n                    class=\"bb-block bb-block--no-margin\"\n                    *ngIf=\"hostRef.getHoldersAddress(account)\"\n                    data-role=\"payee-item-detail-account-holders-address\">\n                    {{ hostRef.getHoldersAddress(account) }}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return PayeeItemDetailCustomizableDirective; }), selector: "[bbPayeeItemDetailCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.NgPlural; }), selector: "[ngPlural]", inputs: ["ngPlural"] }, { type: i0.forwardRef(function () { return i2.NgPluralCase; }), selector: "[ngPluralCase]" }, { type: i0.forwardRef(function () { return i2.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeItemDetailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payee-item-detail',
                    templateUrl: './payee-item-detail.component.html',
                }]
        }], propDecorators: { payeeDetail: [{
                type: Input
            }], isPaddingTop: [{
                type: Input
            }] } });
class PayeeItemDetailCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PayeeItemDetailCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeItemDetailCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PayeeItemDetailCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayeeItemDetailCustomizableDirective, selector: "[bbPayeeItemDetailCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeItemDetailCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPayeeItemDetailCustomizable]',
                }]
        }] });

class PayeeGroupTableRowComponent {
    constructor() {
        /**
         * Checkbox enabled flag
         */
        this.checkboxEnabled = false;
        /**
         * Checkbox form control
         */
        this.checkboxFormControl = new FormControl();
        /**
         * Row view modifier
         */
        this.modifier = 'none';
        /**
         * Checkbox change event emitter
         */
        this.checkboxChange = new EventEmitter();
    }
}
/** @nocollapse */ PayeeGroupTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeGroupTableRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayeeGroupTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayeeGroupTableRowComponent, selector: "bb-payee-group-table-row", inputs: { payee: "payee", checkboxEnabled: "checkboxEnabled", checkboxFormControl: "checkboxFormControl", modifier: "modifier" }, outputs: { checkboxChange: "checkboxChange" }, ngImport: i0, template: "<bb-collapsible-ui #collapsible>\n  <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n    <div\n      class=\"row no-gutters\"\n      role=\"button\"\n      (click)=\"toggle()\"\n      (keydown.enter)=\"toggle()\"\n      tabindex=\"0\"\n      [attr.aria-expanded]=\"isOpen\">\n      <div class=\"col-auto\" *ngIf=\"checkboxEnabled\">\n        <bb-input-checkbox-ui\n          data-role=\"payee-group-table-item-checkbox\"\n          label=\"&nbsp;\"\n          [formControl]=\"checkboxFormControl\"\n          (change)=\"checkboxChange.emit($event)\"></bb-input-checkbox-ui>\n      </div>\n      <div class=\"col-4 mr-auto\">\n        <div class=\"bb-inline-stack\">\n          <span\n            class=\"bb-inline-stack__item bb-subtitle\"\n            data-role=\"payee-group-table-row-name-container\"\n            [ngClass]=\"{\n              'bb-approval-log-item-bound-value--highlight': modifier === 'highlight',\n              'bb-text-bold': modifier === 'highlight' || modifier === 'line-thru'\n            }\">\n            <bb-ellipsis-ui\n              data-role=\"payee-group-table-row-name\"\n              [text]=\"payee.name\"\n              tooltipTriggers=\"hover\"></bb-ellipsis-ui>\n          </span>\n        </div>\n      </div>\n      <div class=\"col-auto\">\n        <bb-icon-ui [name]=\"collapsible.isOpen ? 'toggle-up' : 'toggle-down'\" [inverse]=\"true\" size=\"md\"></bb-icon-ui>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template bbCollapsibleBody>\n    <bb-payee-item-detail [payeeDetail]=\"payee\"></bb-payee-item-detail>\n  </ng-template>\n</bb-collapsible-ui>\n", components: [{ type: i1$5.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i3$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i3$2.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i1$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: PayeeItemDetailComponent, selector: "bb-payee-item-detail", inputs: ["payeeDetail", "isPaddingTop"] }], directives: [{ type: i1$5.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$5.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeGroupTableRowComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payee-group-table-row',
                    templateUrl: './payee-group-table-row.component.html',
                }]
        }], propDecorators: { payee: [{
                type: Input
            }], checkboxEnabled: [{
                type: Input
            }], checkboxFormControl: [{
                type: Input
            }], modifier: [{
                type: Input
            }], checkboxChange: [{
                type: Output
            }] } });

const PAYEE_GROUP_DETAILS_ERROR = 'PAYEE_GROUP_DETAILS_ERROR';
class PayeeGroupDetailModalComponent {
    constructor(dataGroupDetailsService, activeRoute) {
        this.dataGroupDetailsService = dataGroupDetailsService;
        this.activeRoute = activeRoute;
        /**
         * Component context
         */
        this.hostRef = this;
        this.itemsPerPage = 10;
        /**
         * Flag to show modal
         */
        this.isOpen = false;
        /**
         * Payee group name
         */
        this.payeeGroupName = '';
        this.targetSaId = '';
        /**
         * Event emitter that emits on cancel button click
         */
        this.cancel = new EventEmitter();
        this.selectedPayeeGroupPayeesCurrentPageSubject = new BehaviorSubject(0);
        this.selectedPayeeGroupPayeesCurrentPage$ = this.selectedPayeeGroupPayeesCurrentPageSubject.asObservable();
        this.selectedPayeeGroupPayeesSearchQuerySubject = new BehaviorSubject('');
        this.selectedPayeeGroupPayeesSearchQuery$ = this.selectedPayeeGroupPayeesSearchQuerySubject.asObservable();
        this.selectedPayeeGroupSubject = new ReplaySubject();
        this.selectedPayeeGroup$ = this.selectedPayeeGroupSubject.asObservable();
        this.serviceAgreement$ = getRouteParams(this.activeRoute, 'serviceAgreementId').pipe(switchMap((id) => {
            let idSa = id;
            if (this.targetSaId && !id) {
                idSa = this.targetSaId;
            }
            return idSa
                ? this.dataGroupDetailsService.getServiceAgreement(idSa)
                : this.dataGroupDetailsService.serviceAgreementFromContext;
        }), shareReplay(1));
        this.selectedPayeeGroupDetails$ = combineLatest([
            this.selectedPayeeGroup$,
            this.selectedPayeeGroupPayeesCurrentPage$,
            this.selectedPayeeGroupPayeesSearchQuery$,
            this.serviceAgreement$,
        ]).pipe(auditTime(100), switchMap(([items, from, query, serviceAgreement]) => {
            if (items.length) {
                return this.dataGroupDetailsService
                    .getPayeeGroupContacts(items, { from, query, targetSaId: serviceAgreement.serviceAgreement.id })
                    .pipe(map(payees => ({
                    data: payees.data,
                    totalCount: payees.totalCount,
                })), catchError(() => {
                    return of(PAYEE_GROUP_DETAILS_ERROR);
                }));
            }
            return of();
        }), shareReplay(1));
        this.selectedPayeeGroupError$ = this.selectedPayeeGroupDetails$.pipe(map((data) => data === PAYEE_GROUP_DETAILS_ERROR));
        this.loadingSelectedPayee$ = merge(this.selectedPayeeGroupSubject.pipe(mapTo(true)), this.selectedPayeeGroupPayeesCurrentPageSubject.pipe(mapTo(true)), this.selectedPayeeGroupPayeesSearchQuerySubject.pipe(mapTo(true)), this.selectedPayeeGroupDetails$.pipe(mapTo(false)));
    }
    /**
     * Setter for payee Ids
     */
    set payeeIds(val) {
        if (val) {
            this.selectedPayeeGroupSubject.next(val);
            this.selectedPayeeGroupPayeesCurrentPageSubject.next(0);
            this.selectedPayeeGroupPayeesSearchQuerySubject.next('');
        }
    }
    onCancel() {
        this.cancel.emit();
    }
    pageChange(page) {
        this.selectedPayeeGroupPayeesCurrentPageSubject.next(page);
    }
    searchSubmit(query) {
        this.selectedPayeeGroupPayeesCurrentPageSubject.next(0);
        this.selectedPayeeGroupPayeesSearchQuerySubject.next(query);
    }
}
/** @nocollapse */ PayeeGroupDetailModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeGroupDetailModalComponent, deps: [{ token: i1$3.UserPermissionsDataGroupDetailsService }, { token: i2$4.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayeeGroupDetailModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayeeGroupDetailModalComponent, selector: "bb-payee-group-detail-modal", inputs: { isOpen: "isOpen", payeeGroupName: "payeeGroupName", targetSaId: "targetSaId", payeeIds: "payeeIds" }, outputs: { cancel: "cancel" }, providers: [], ngImport: i0, template: "<ng-container\n  bbPayeeGroupDetailModalCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    selectedPayeeGroupDetails: selectedPayeeGroupDetails$ | async,\n    loadingSelectedPayee: loadingSelectedPayee$ | async,\n    selectedPayeeGroupPayeesCurrentPage: selectedPayeeGroupPayeesCurrentPage$ | async,\n    selectedPayeeGroupError: selectedPayeeGroupError$ | async,\n    selectedPayeeGroup: selectedPayeeGroup$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbPayeeGroupDetailModalCustomizable\n  let-hostRef\n  let-selectedPayeeGroupDetails=\"context.selectedPayeeGroupDetails\"\n  let-loadingSelectedPayee=\"context.loadingSelectedPayee\"\n  let-selectedPayeeGroupPayeesCurrentPage=\"context.selectedPayeeGroupPayeesCurrentPage\"\n  let-selectedPayeeGroupError=\"context.selectedPayeeGroupError\"\n  let-selectedPayeeGroup=\"context.selectedPayeeGroup\">\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"payee-group-detail-modal\">\n    <bb-modal-header-ui\n      title=\"Detail for {{ hostRef.payeeGroupName }}\"\n      i18n-title=\"Title of payee group modal detail@payee-group-detail-modal.title\"\n      data-role=\"payee-modal-title\"></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container *ngIf=\"!selectedPayeeGroupError; else errorTemplate\">\n          <ng-container *ngIf=\"selectedPayeeGroup && selectedPayeeGroup.length; else empty\">\n            <div data-role=\"payee-group-modal-detail\">\n              <bb-search-box-ui\n                *ngIf=\"hostRef.isOpen\"\n                size=\"md\"\n                placeholder=\"Search\"\n                i18n-placeholder=\"Search placeholder@@payee-group-detail-modal.search.placeholder\"\n                [showClear]=\"true\"\n                [showSearch]=\"true\"\n                (clear)=\"hostRef.searchSubmit('')\"\n                (submit)=\"hostRef.searchSubmit($event)\"\n                data-role=\"payee-group-table-search\"></bb-search-box-ui>\n              <ng-container *ngIf=\"selectedPayeeGroupDetails && !loadingSelectedPayee; else loadingTemplate\">\n                <ng-container *ngIf=\"selectedPayeeGroupDetails.data.length; else empty\">\n                  <div class=\"bb-inline-stack\">\n                    <span\n                      class=\"bb-inline-stack__item bb-subheader bb-subheader--regular bb-text-bold\"\n                      i18n=\"Table header name@@payee-group-detail-modal.row.header.name\"\n                      >Name</span\n                    >\n                  </div>\n                  <hr />\n                  <div *ngFor=\"let payee of selectedPayeeGroupDetails.data\">\n                    <bb-payee-group-table-row data-role=\"payee-item\" [payee]=\"payee\"></bb-payee-group-table-row>\n                    <hr />\n                  </div>\n                  <bb-pagination-ui\n                    data-role=\"payee-group-table-pagination\"\n                    [page]=\"selectedPayeeGroupPayeesCurrentPage\"\n                    [boundaryLinks]=\"true\"\n                    [directionLinks]=\"true\"\n                    [totalItems]=\"selectedPayeeGroupDetails.totalCount\"\n                    [itemsPerPage]=\"itemsPerPage\"\n                    (pageChange)=\"hostRef.pageChange($event)\"></bb-pagination-ui>\n                </ng-container>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            i18n=\"Cancel button@payee-group-detail-modal.cancel-btn\"\n            data-role=\"payee-group-modal-detail-cancel-btn\">\n            Cancel\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"payee-detail-loading\">\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorTemplate>\n  <bb-empty-state-ui\n    data-role=\"general-error-state\"\n    title=\"Unknown Error\"\n    i18n-title=\"Title for error state for payee group errors@@payee-group-detail-modal.unknown.title\"\n    subtitle=\"Try to reload the page or contact the system<br> administrator.\"\n    i18n-subtitle=\"Message for error state for payee group errors@@payee-group-detail-modal.unknown.subtitle\"\n    iconSize=\"xxl\"\n    iconModifier=\"error-outline\"></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #empty>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"payee-group-table-empty-state\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"info\"\n      title=\"No payees found\"\n      i18n-title=\"Label for empty list of payees@@payee-group-detail-modal.empty.title\"\n      subtitle=\"You don't have any payees to be displayed.\"\n      i18n-subtitle=\"Payees empty state message@@payee-group-detail-modal.empty.subtitle\"></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i4$2.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return PayeeGroupTableRowComponent; }), selector: "bb-payee-group-table-row", inputs: ["payee", "checkboxEnabled", "checkboxFormControl", "modifier"], outputs: ["checkboxChange"] }, { type: i0.forwardRef(function () { return i6$2.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0.forwardRef(function () { return i1$4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i4$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return PayeeGroupDetailModalCustomizableDirective; }), selector: "[bbPayeeGroupDetailModalCustomizable]" }, { type: i0.forwardRef(function () { return i1$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i1$4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i2.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeGroupDetailModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payee-group-detail-modal',
                    templateUrl: './payee-group-detail-modal.component.html',
                    providers: [],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$3.UserPermissionsDataGroupDetailsService }, { type: i2$4.ActivatedRoute }]; }, propDecorators: { isOpen: [{
                type: Input
            }], payeeGroupName: [{
                type: Input
            }], targetSaId: [{
                type: Input
            }], payeeIds: [{
                type: Input
            }], cancel: [{
                type: Output
            }] } });
class PayeeGroupDetailModalCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PayeeGroupDetailModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeGroupDetailModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PayeeGroupDetailModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayeeGroupDetailModalCustomizableDirective, selector: "[bbPayeeGroupDetailModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayeeGroupDetailModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPayeeGroupDetailModalCustomizable]',
                }]
        }] });

const ACCOUNT_GROUP_DETAILS_ERROR = 'ACCOUNT_GROUP_DETAILS_ERROR';
class AccountGroupDetailModalComponent {
    constructor(dataGroupDetailsService, activeRoute) {
        this.dataGroupDetailsService = dataGroupDetailsService;
        this.activeRoute = activeRoute;
        /**
         * Component context
         */
        this.hostRef = this;
        this.itemsPerPage = 10;
        /**
         * Flag to show modal
         */
        this.isOpen = false;
        this.targetSaId = '';
        /**
         * Account group name
         */
        this.accountGroupName = '';
        this.legalEntityIds = [];
        /**
         * Event emitter that emits on cancel button click
         */
        this.cancel = new EventEmitter();
        this.serviceAgreement$ = getRouteParams(this.activeRoute, 'serviceAgreementId').pipe(switchMap((id) => {
            let idSa = id;
            if (this.targetSaId && !id) {
                idSa = this.targetSaId;
            }
            return idSa
                ? this.dataGroupDetailsService.getServiceAgreement(idSa)
                : this.dataGroupDetailsService.serviceAgreementFromContext;
        }), shareReplay(1));
        this.selectedAccountGroupAccountsCurrentPageSubject = new BehaviorSubject(0);
        this.selectedAccountGroupAccountsCurrentPage$ = this.selectedAccountGroupAccountsCurrentPageSubject.asObservable();
        this.selectedAccountGroupAccountsSearchQuerySubject = new BehaviorSubject('');
        this.selectedAccountGroupAccountsSearchQuery$ = this.selectedAccountGroupAccountsSearchQuerySubject.asObservable();
        this.selectedAccountGroupSubject = new ReplaySubject();
        this.selectedAccountGroup$ = this.selectedAccountGroupSubject.asObservable();
        this.selectedAccountGroupDetails$ = combineLatest([
            this.selectedAccountGroup$,
            this.selectedAccountGroupAccountsCurrentPage$,
            this.selectedAccountGroupAccountsSearchQuery$,
            this.serviceAgreement$,
        ]).pipe(auditTime(100), switchMap(([items, from, searchQuery, serviceAgreement]) => {
            let legalEntityIds = this.legalEntityIds;
            if (serviceAgreement.participants) {
                legalEntityIds = [];
                serviceAgreement.participants.forEach((el) => {
                    if (el.sharingAccounts) {
                        legalEntityIds.push(el.id);
                    }
                });
            }
            if (items.length) {
                return this.dataGroupDetailsService
                    .getAccountGroupItems({
                    items: items,
                    from: from,
                    size: this.itemsPerPage,
                    searchTerm: searchQuery,
                    legalEntityIds: legalEntityIds,
                })
                    .pipe(map(accounts => ({
                    data: accounts.items,
                    totalCount: accounts.totalCount,
                })), catchError(() => {
                    return of(ACCOUNT_GROUP_DETAILS_ERROR);
                }));
            }
            return of();
        }), shareReplay(1));
        this.selectedAccountGroupError$ = this.selectedAccountGroupDetails$.pipe(map((data) => data === ACCOUNT_GROUP_DETAILS_ERROR));
        this.loadingSelectedAccount$ = merge(this.selectedAccountGroupSubject.pipe(mapTo(true)), this.selectedAccountGroupAccountsCurrentPageSubject.pipe(mapTo(true)), this.selectedAccountGroupAccountsSearchQuerySubject.pipe(mapTo(true)), this.selectedAccountGroupDetails$.pipe(mapTo(false)));
    }
    /**
     * Setter for account Ids
     */
    set accountIds(val) {
        if (val) {
            this.selectedAccountGroupSubject.next(val);
            this.selectedAccountGroupAccountsCurrentPageSubject.next(0);
            this.selectedAccountGroupAccountsSearchQuerySubject.next('');
        }
    }
    onCancel() {
        this.cancel.emit();
    }
    pageChange(page) {
        this.selectedAccountGroupAccountsCurrentPageSubject.next(page);
    }
    searchSubmit(query) {
        this.selectedAccountGroupAccountsCurrentPageSubject.next(0);
        this.selectedAccountGroupAccountsSearchQuerySubject.next(query);
    }
}
/** @nocollapse */ AccountGroupDetailModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGroupDetailModalComponent, deps: [{ token: i1$3.UserPermissionsDataGroupDetailsService }, { token: i2$4.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountGroupDetailModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountGroupDetailModalComponent, selector: "bb-account-group-detail-modal", inputs: { isOpen: "isOpen", targetSaId: "targetSaId", accountGroupName: "accountGroupName", legalEntityIds: "legalEntityIds", accountIds: "accountIds" }, outputs: { cancel: "cancel" }, providers: [], ngImport: i0, template: "<ng-container\n  bbAccountGroupDetailModalCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    selectedAccountGroupDetails: selectedAccountGroupDetails$ | async,\n    loadingSelectedAccount: loadingSelectedAccount$ | async,\n    selectedAccountGroupAccountsCurrentPage: selectedAccountGroupAccountsCurrentPage$ | async,\n    selectedAccountGroupError: selectedAccountGroupError$ | async,\n    selectedAccountGroup: selectedAccountGroup$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbAccountGroupDetailModalCustomizable\n  let-hostRef\n  let-selectedAccountGroupDetails=\"context.selectedAccountGroupDetails\"\n  let-loadingSelectedAccount=\"context.loadingSelectedAccount\"\n  let-selectedAccountGroupAccountsCurrentPage=\"context.selectedAccountGroupAccountsCurrentPage\"\n  let-selectedAccountGroupError=\"context.selectedAccountGroupError\"\n  let-selectedAccountGroup=\"context.selectedAccountGroup\">\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"account-group-detail-modal\">\n    <bb-modal-header-ui\n      title=\"Detail for {{ hostRef.accountGroupName }}\"\n      i18n-title=\"Title of account group modal detail@account-group-detail-modal.title\"\n      data-role=\"account-modal-title\"></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container *ngIf=\"!selectedAccountGroupError; else errorTemplate\">\n          <ng-container *ngIf=\"selectedAccountGroup && selectedAccountGroup.length; else empty\">\n            <div data-role=\"account-group-modal-detail\">\n              <bb-search-box-ui\n                *ngIf=\"hostRef.isOpen\"\n                size=\"md\"\n                placeholder=\"Search\"\n                i18n-placeholder=\"Search placeholder@@account-group-detail-modal.search.placeholder\"\n                [showClear]=\"true\"\n                [showSearch]=\"true\"\n                (clear)=\"hostRef.searchSubmit('')\"\n                (submit)=\"hostRef.searchSubmit($event)\"\n                data-role=\"account-group-table-search\"></bb-search-box-ui>\n              <ng-container *ngIf=\"selectedAccountGroupDetails && !loadingSelectedAccount; else loadingTemplate\">\n                <ng-container *ngIf=\"selectedAccountGroupDetails.data.length; else empty\">\n                  <div class=\"row\">\n                    <div class=\"col-6\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.name\"\n                        >Name</span\n                      >\n                    </div>\n                    <div class=\"col-4\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.number\">\n                        Number\n                      </span>\n                    </div>\n\n                    <div class=\"col-2\">\n                      <span\n                        class=\"bb-subheader bb-subheader--regular bb-text-bold\"\n                        i18n=\"Table header name@@account-group-detail-modal.row.header.currency\">\n                        Currency\n                      </span>\n                    </div>\n                  </div>\n                  <hr />\n                  <div *ngFor=\"let account of selectedAccountGroupDetails.data\" data-role=\"account-item\">\n                    <div class=\"row\">\n                      <div class=\"col-6\">\n                        <div data-role=\"account-detail-name\">\n                          {{ account.displayName }}\n                        </div>\n                        <div class=\"bb-text-support text-small\" data-role=\"account-detail-type\">\n                          {{ account.productTypeName }}\n                        </div>\n                      </div>\n                      <div class=\"col-4\">\n                        <span class=\"text-small\" data-role=\"account-detail-number\">\n                          {{ account.IBAN || account.BBAN || account.productNumber || account.number }}\n                        </span>\n                      </div>\n\n                      <div class=\"col-2\">\n                        <span class=\"text-small\" data-role=\"account-detail-currency\">\n                          {{ account.currency }}\n                        </span>\n                      </div>\n                    </div>\n                    <hr />\n                  </div>\n\n                  <bb-pagination-ui\n                    data-role=\"account-group-table-pagination\"\n                    [page]=\"selectedAccountGroupAccountsCurrentPage\"\n                    [boundaryLinks]=\"true\"\n                    [directionLinks]=\"true\"\n                    [totalItems]=\"selectedAccountGroupDetails.totalCount\"\n                    [itemsPerPage]=\"itemsPerPage\"\n                    (pageChange)=\"hostRef.pageChange($event)\"></bb-pagination-ui>\n                </ng-container>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            i18n=\"Cancel button@account-group-detail-modal.cancel-btn\"\n            data-role=\"account-group-modal-detail-cancel-btn\">\n            Cancel\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"account-detail-loading\">\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorTemplate>\n  <bb-empty-state-ui\n    data-role=\"general-error-state\"\n    title=\"Unknown Error\"\n    i18n-title=\"Title for error state for account group errors@@account-group-detail-modal.unknown.title\"\n    subtitle=\"Try to reload the page or contact the system<br> administrator.\"\n    i18n-subtitle=\"Message for error state for account group errors@@account-group-detail-modal.unknown.subtitle\"\n    iconSize=\"xxl\"\n    iconModifier=\"error-outline\"></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #empty>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"account-group-table-empty-state\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"info\"\n      title=\"No accounts found\"\n      i18n-title=\"Label for empty list of accounts@@account-group-detail-modal.empty.title\"\n      subtitle=\"You don't have any accounts to be displayed.\"\n      i18n-subtitle=\"Accounts empty state message@@account-group-detail-modal.empty.subtitle\"></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i4$2.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i6$2.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0.forwardRef(function () { return i1$4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i4$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return AccountGroupDetailModalCustomizableDirective; }), selector: "[bbAccountGroupDetailModalCustomizable]" }, { type: i0.forwardRef(function () { return i1$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i1$4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i2.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGroupDetailModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-group-detail-modal',
                    templateUrl: './account-group-detail-modal.component.html',
                    providers: [],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$3.UserPermissionsDataGroupDetailsService }, { type: i2$4.ActivatedRoute }]; }, propDecorators: { isOpen: [{
                type: Input
            }], targetSaId: [{
                type: Input
            }], accountGroupName: [{
                type: Input
            }], legalEntityIds: [{
                type: Input
            }], accountIds: [{
                type: Input
            }], cancel: [{
                type: Output
            }] } });
class AccountGroupDetailModalCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ AccountGroupDetailModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGroupDetailModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ AccountGroupDetailModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccountGroupDetailModalCustomizableDirective, selector: "[bbAccountGroupDetailModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGroupDetailModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountGroupDetailModalCustomizable]',
                }]
        }] });

class UnassignDataGroupModalComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Flag to show modal
         */
        this.isOpen = false;
        this.activeDataGroup = 'account';
        /**
         * Event emitter that emits on cancel button click
         */
        this.cancel = new EventEmitter();
        /**
         * Event emitter that emits on confirm button click
         */
        this.confirm = new EventEmitter();
    }
    /**
     * Function to call on cancel button click
     */
    onCancel() {
        this.cancel.emit();
    }
    /**
     * Function to call on confirm button click
     */
    onConfirm() {
        this.confirm.emit();
    }
}
/** @nocollapse */ UnassignDataGroupModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UnassignDataGroupModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UnassignDataGroupModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UnassignDataGroupModalComponent, selector: "bb-unassign-data-group-modal", inputs: { isOpen: "isOpen", activeDataGroup: "activeDataGroup", jobRole: "jobRole", accountGroupName: "accountGroupName", payeeGroupName: "payeeGroupName" }, outputs: { cancel: "cancel", confirm: "confirm" }, ngImport: i0, template: "<ng-container bbUnassignDataGroupModalCustomizable [bbHostRef]=\"hostRef\"> </ng-container>\n\n<ng-template bbUnassignDataGroupModalCustomizable let-hostRef>\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\" data-role=\"unassign-data-group-modal\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        hostRef.activeDataGroup === 'account' ? unassignAccountGroupHeader : unassignPayeeHeader\n      \"></ng-container>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-content></ng-content>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            color=\"danger\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onConfirm()\"\n            i18n=\"Delete button@payee-group-delete-modal.delete-btn\"\n            data-role=\"unassign-data-group-modal-unassign-btn\">\n            Unassign\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            class=\"bb-button-bar__button\"\n            (click)=\"hostRef.onCancel()\"\n            i18n=\"Cancel button@payee-group-delete-modal.cancel-btn\"\n            data-role=\"unassign-data-group-modal-cancel-btn\">\n            Cancel\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <ng-template #unassignPayeeHeader>\n    <bb-modal-header-ui\n      title=\"Unassign '{{ hostRef.payeeGroupName }}' Payee Group from {{ hostRef.accountGroupName }} in the '{{\n        hostRef.jobRole\n      }}' job role?\"\n      i18n-title=\"Title of unassign payee modal@unassign-data-group-modal.title\"\n      data-role=\"unassign-payee-modal-modal-title\"></bb-modal-header-ui>\n  </ng-template>\n\n  <ng-template #unassignAccountGroupHeader>\n    <bb-modal-header-ui\n      title=\"Unassign '{{ hostRef.accountGroupName }}' Account Group from '{{ hostRef.jobRole }}' job role?\"\n      i18n-title=\"Title of unassign account group modal@unassign-data-group-modal.title\"\n      data-role=\"unassign-account-group-modal-title\"></bb-modal-header-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i1$4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i1$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }], directives: [{ type: i0.forwardRef(function () { return UnassignDataGroupModalCustomizableDirective; }), selector: "[bbUnassignDataGroupModalCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i1$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i1$4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UnassignDataGroupModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-unassign-data-group-modal',
                    templateUrl: './unassign-data-group-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], activeDataGroup: [{
                type: Input
            }], jobRole: [{
                type: Input
            }], accountGroupName: [{
                type: Input
            }], payeeGroupName: [{
                type: Input
            }], cancel: [{
                type: Output
            }], confirm: [{
                type: Output
            }] } });
class UnassignDataGroupModalCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ UnassignDataGroupModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UnassignDataGroupModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UnassignDataGroupModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UnassignDataGroupModalCustomizableDirective, selector: "[bbUnassignDataGroupModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UnassignDataGroupModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUnassignDataGroupModalCustomizable]',
                }]
        }] });

class UserPermissionsItemBusinessFunctionDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ UserPermissionsItemBusinessFunctionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemBusinessFunctionDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UserPermissionsItemBusinessFunctionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemBusinessFunctionDirective, selector: "ng-template[bbUserPermissionsItemBusinessFunction]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemBusinessFunctionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[bbUserPermissionsItemBusinessFunction]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class UserPermissionsItemBusinessFunctionGroupNameDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
/** @nocollapse */ UserPermissionsItemBusinessFunctionGroupNameDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemBusinessFunctionGroupNameDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UserPermissionsItemBusinessFunctionGroupNameDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemBusinessFunctionGroupNameDirective, selector: "ng-template[bbUserPermissionsItemBusinessFunctionGroupName]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemBusinessFunctionGroupNameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[bbUserPermissionsItemBusinessFunctionGroupName]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class UserPermissionsItemComponent {
    constructor() {
        this.dataGroups = [];
        this.selectedDataGroups$ = new BehaviorSubject([]);
        this.selectedDataGroupsForPayee$ = new BehaviorSubject([]);
        this.selectedPayeeGroups$ = new BehaviorSubject([]);
        this.dataGroups$ = new BehaviorSubject([]);
        this.payeeGroups$ = new BehaviorSubject([]);
        this.payeeDetailModal = false;
        this.accountDetailModal = false;
        this.selfApproveItemData = undefined;
        this.typeOfSelfApproveAction = '';
        this.selectedBFForSelfApprove = undefined;
        this.approvalLevelStatus = ApprovalLevelStatus;
        /**
         * selfApproveDefaultBehavior
         */
        this.selfApproveDefaultBehavior = 'disable';
        /**
         * Whether to show approval level
         */
        this.showApprovalLevel = false;
        /**
         * Business Function to check privileges against
         */
        this.emitLimitData = new EventEmitter();
        /**
         * Whether to show unassign buttons
         */
        this.showActions = false;
        /**
         * Whether to show self approval section
         */
        this.enableSelfApproval = false;
        /**
         * Whether to show payee table row
         */
        this.showPayee = true;
        /**
         * Whether to show unassign buttons
         */
        this.showFunctionGroupType = false;
        /**
         * Whether to disable save button
         */
        this.disableSaveButton = true;
        /**
         * Flag to indicate edit view
         */
        this.editView = false;
        /**
         * Legal Entity Id
         */
        this.legalEntityId = '';
        this.editedFunctionId = '';
        /**
         * Event emitter emiting on unassigning function group
         */
        this.removeFunctionGroup = new EventEmitter();
        /**
         * Event emitter emiting on unassigning data group
         */
        this.removeDataGroup = new EventEmitter();
        this.requestObjectEmit = new EventEmitter();
        this.editedFunctionIdEmit = new EventEmitter();
        this.changesMadedEmit = new EventEmitter();
        this.availableDataGroupsSearchTerm$ = new BehaviorSubject('');
        this.availableDataGroupsForPayeesSearchTerm$ = new BehaviorSubject('');
        this.availablePayeeGroupsSearchTerm$ = new BehaviorSubject('');
        /**
         * Switcher state data
         * @private
         */
        this.defaultSwitcherData = false;
        /**
         * Switcher value for account
         */
        this.switchAccountType$ = new BehaviorSubject(false);
        this.splittedAccountsByType$ = combineLatest([this.selectedDataGroups$, this.dataGroups$]).pipe(map(([selectedDataGroups, dataGroups]) => {
            const wizardAccounts = [];
            const customAccounts = [];
            if (dataGroups) {
                const allDataGroups = dataGroups.filter((item) => !selectedDataGroups.find(o => o.id === item.id));
                allDataGroups.forEach((item) => {
                    var _a;
                    if ((_a = item.metadata) === null || _a === void 0 ? void 0 : _a.generated) {
                        wizardAccounts.push(Object.assign(Object.assign({}, item)));
                    }
                    else {
                        customAccounts.push(Object.assign(Object.assign({}, item)));
                    }
                });
            }
            return { allAccounts: [...customAccounts, ...wizardAccounts], wizardAccounts, customAccounts };
        }));
        this.availableDataGroups = combineLatest([
            this.splittedAccountsByType$,
            this.switchAccountType$,
            this.availableDataGroupsSearchTerm$,
        ]).pipe(map(([splittedAccounts, switcherType, query]) => {
            let accounts = [];
            if (!switcherType && splittedAccounts.customAccounts.length) {
                accounts = splittedAccounts.customAccounts;
            }
            else {
                accounts = splittedAccounts.allAccounts;
            }
            accounts = accounts.filter(f => f.name.toLowerCase().includes(query.toLowerCase()));
            return accounts;
        }));
        this.availableDataGroupsForPayee = combineLatest([
            this.selectedDataGroupsForPayee$,
            this.selectedDataGroups$,
            this.availableDataGroupsForPayeesSearchTerm$,
        ]).pipe(map(([selectedDataGroups, dataGroups, query]) => {
            if (dataGroups) {
                return dataGroups
                    .filter((item) => !selectedDataGroups.find(o => o.id === item.id))
                    .filter(f => f.name.toLowerCase().includes(query.toLowerCase()));
            }
            return [];
        }));
        this.availablePayeeGroups = combineLatest([
            this.selectedPayeeGroups$,
            this.payeeGroups$,
            this.availablePayeeGroupsSearchTerm$,
        ]).pipe(map(([selectedDataGroups, dataGroups, query]) => {
            if (dataGroups) {
                return dataGroups
                    .filter((item) => !selectedDataGroups.find(o => o.id === item.id))
                    .filter(f => f.name.toLowerCase().includes(query.toLowerCase()));
            }
            return [];
        }));
        this.payeeIds = undefined;
        this.accountIds = undefined;
        this.payeeGroupName = '';
        this.accountGroupName = '';
        this.selectAccountGroupsModalOpened = false;
        this.selectAccountGroupsForPayeesModalOpened = false;
        this.selectPayeeGroupsModalOpened = false;
        this.activeView = 'table';
        this.activeDataGroup = 'account';
    }
    emitLimit(emitData, bfName, jrName) {
        this.emitLimitData.emit(Object.assign(Object.assign({}, emitData), { bfName,
            jrName }));
    }
    /**
     * User Permissions Object consisting of a
     * Function Group, Grouped Business Function, Data Groups
     */
    set userPermissions(val) {
        if (val) {
            this._userPermissions = val;
            if (val.dataGroups) {
                this.dataGroups = JSON.parse(JSON.stringify(val.dataGroups));
                this.selfApprovalPolicies = val.selfApprovalPolicies;
                if (!this.selfApprovalPoliciesHistory) {
                    this.selfApprovalPoliciesHistory = val.selfApprovalPolicies;
                }
                this.selectedDataGroups$.next(val.dataGroups);
                this.getAllLinkedPayees(val.dataGroups);
                this.emitRequestObject();
                this.preEditDataGroupState = JSON.parse(JSON.stringify(this.dataGroups));
            }
        }
    }
    /**
     * Account Group setter
     */
    set dataGroup(val) {
        if (val) {
            this.dataGroups$.next(val);
        }
    }
    /**
     * Payee Group setter
     */
    set payeeGroups(val) {
        if (val) {
            this.payeeGroups$.next(val);
        }
    }
    switchAccounts() {
        this.defaultSwitcherData = !this.defaultSwitcherData;
        this.switchAccountType$.next(this.defaultSwitcherData);
    }
    onRemoveFunctionGroup() {
        this.removeFunctionGroup.emit();
    }
    onRemoveDataGroup(dg) {
        this.removeDataGroup.emit(dg);
    }
    showLinkedPayee(dg) {
        this.selectedPg = undefined;
        if (this.selectedDg === dg) {
            this.selectedDg = undefined;
        }
        else {
            this.selectedDg = dg;
        }
    }
    selectedPG(pg) {
        if (this.selectedPg === pg) {
            this.selectedPg = undefined;
        }
        else {
            this.selectedPg = pg;
        }
    }
    checkInclude(payees) {
        if (payees && this.selectedPg) {
            return payees.filter((val) => {
                return val.id === this.selectedPg.id;
            }).length;
        }
        return false;
    }
    getAccountGroupLinked(payee) {
        const accountGroups = [];
        this.dataGroups.forEach((el) => {
            if (el['payees'] &&
                el['payees'].filter((val) => {
                    return val.id === payee.id;
                }).length) {
                accountGroups.push(el);
            }
        });
        return accountGroups;
    }
    getAccountGroupLinkedString(payee) {
        let accountGroups = '';
        this.dataGroups.forEach((el, idx, array) => {
            if (el['payees'] &&
                el['payees'].filter((val) => {
                    return val.id === payee.id;
                }).length) {
                accountGroups = accountGroups + "'" + el.name + "'";
                if (idx !== array.length - 1) {
                    accountGroups = accountGroups + ', ';
                }
            }
        });
        return accountGroups;
    }
    assignDataGroups(val) {
        val.forEach((item) => {
            this.dataGroups.push(Object.assign({}, item));
        });
        this.selectedDataGroups$.next(this.dataGroups);
        this.emitRequestObject();
    }
    searchAvailableDataGroups(val) {
        this.availableDataGroupsSearchTerm$.next(val);
    }
    searchAvailablePayeeGroups(val) {
        this.availablePayeeGroupsSearchTerm$.next(val);
    }
    searchAvailableDataGroupsForPayees(val) {
        this.availableDataGroupsForPayeesSearchTerm$.next(val);
    }
    addAccountGroup() {
        this.defaultSwitcherData = false;
        this.switchAccountType$.next(false);
        this.availableDataGroupsSearchTerm$.next('');
        this.selectAccountGroupsModalOpened = true;
    }
    assignPayee(payees, dataGroups) {
        this.availablePayeeGroupsSearchTerm$.next('');
        this.selectedPayeeGroups$.next(payees ? payees : []);
        this.selectPayeeGroupsModalOpened = true;
        this.selectedForAssignAccountGroup = this.dataGroups.find(o => o.id === dataGroups.id);
    }
    assignPayeeGroups(val) {
        this.dataGroups.forEach((element, index) => {
            if (this.selectedForAssignAccountGroup && element.id === this.selectedForAssignAccountGroup.id) {
                if (this.dataGroups[index].payees) {
                    val.forEach((item) => {
                        this.dataGroups[index].payees.push(Object.assign({}, item));
                    });
                }
                else {
                    this.dataGroups[index].payees = val;
                }
            }
        });
        if (this._userPermissions) {
            this.getAllLinkedPayees(this.dataGroups);
        }
        this.emitRequestObject();
    }
    assignDataGroupsForPayee(val) {
        val.forEach((el) => {
            const filteredDataGroup = this.dataGroups.find(o => o.id === el.id);
            if (!filteredDataGroup) {
                this.dataGroups.push(...val);
            }
            const findObject = this.dataGroups.find(o => o.id === el.id);
            if (findObject) {
                if (filteredDataGroup && filteredDataGroup.payees && this.selectedForAssignAccountGroupForPayee) {
                    findObject.payees.push(this.selectedForAssignAccountGroupForPayee);
                }
                else {
                    findObject.payees = [];
                    if (this.selectedForAssignAccountGroupForPayee) {
                        findObject.payees.push(this.selectedForAssignAccountGroupForPayee);
                    }
                }
            }
        });
        this.getAllLinkedPayees(this.dataGroups);
        this.emitRequestObject();
    }
    addAccountGroupToPayee(payee) {
        this.selectedForAssignAccountGroupForPayee = payee;
        this.selectedDataGroupsForPayee$.next(this.getAccountGroupLinked(payee));
        this.selectAccountGroupsForPayeesModalOpened = true;
    }
    getAllLinkedPayees(val) {
        const payees = [];
        val.forEach((el) => {
            if (el['payees']) {
                payees.push(...el['payees']);
            }
        });
        this.allLinkedPayee = payees.filter((v, i, a) => a.findIndex(t => t.id === v.id) === i);
    }
    removeAccountGroup(accountGroup) {
        this.dataGroups = this.dataGroups.filter(item => {
            this.dataGroupForRemove = undefined;
            return item.id !== accountGroup.id;
        });
        this.getAllLinkedPayees(this.dataGroups);
        this.selectedDataGroups$.next(this.dataGroups);
        this.emitRequestObject();
    }
    removedPayeeGroup(payyeGroup, accountGroup) {
        this.dataGroups.forEach((el) => {
            if (el.id === accountGroup.id) {
                el.payees = [
                    ...el.payees.filter(item => {
                        return item !== payyeGroup;
                    }),
                ];
            }
        });
        this.getAllLinkedPayees(this.dataGroups);
        this.emitRequestObject();
    }
    removePayeeGroupLinking(payee) {
        this.dataGroups.forEach((el) => {
            if (el.payees) {
                this.dataGroupForRemove = undefined;
                el.payees = el.payees.filter(value => {
                    return value.id !== payee.id;
                });
            }
        });
        this.getAllLinkedPayees(this.dataGroups);
        if (this.allLinkedPayee.length === 0) {
            this.activeDataGroup = 'account';
        }
        this.emitRequestObject();
    }
    removedAccountGroupFromPayee(payee, account) {
        this.dataGroups.forEach((el) => {
            if (el.id === account.id) {
                el.payees = el.payees.filter(value => {
                    return value.id !== payee.id;
                });
            }
        });
        this.getAllLinkedPayees(this.dataGroups);
        if (this.allLinkedPayee.length === 0) {
            this.activeDataGroup = 'account';
        }
        this.emitRequestObject();
    }
    onEditPayee() {
        this.preEditDataGroupState = JSON.parse(JSON.stringify(this.dataGroups));
        this.editedFunctionIdEmit.emit(this._userPermissions ? this._userPermissions.id : undefined);
    }
    onCancel() {
        this.editView = false;
        this.dataGroups = JSON.parse(JSON.stringify(this.preEditDataGroupState));
        this.getAllLinkedPayees(this.dataGroups);
        this.selectedDataGroups$.next(this.dataGroups);
        this.editedFunctionIdEmit.emit(undefined);
    }
    emitRequestObject() {
        this.objectForRequest = [];
        this.dataGroups.forEach((accountGroup) => {
            if (this._userPermissions) {
                const dataObj = [];
                dataObj.push({ id: accountGroup.id });
                if (accountGroup.payees) {
                    accountGroup.payees.forEach((payeeGroup) => {
                        dataObj.push({ id: payeeGroup.id });
                    });
                }
                this.objectForRequest.push({ functionGroupId: this._userPermissions.id, dataGroupIds: dataObj });
            }
        });
        if (this.objectForRequest.length === 0 && this._userPermissions) {
            this.objectForRequest.push({ functionGroupId: this._userPermissions.id, dataGroupIds: [] });
        }
        if (this.objectForRequest.length !== 0 && this.selfApprovalPolicies && this.selfApprovalPolicies.length) {
            this.objectForRequest.forEach((el) => {
                var _a;
                el.selfApprovalPolicies = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.filter((item) => !this.checkForUnsetPolicies(item));
            });
        }
        this.requestObjectEmit.emit(this.objectForRequest);
        if (this._userPermissions && this.dataGroups && this.preEditDataGroupState) {
            this.changesMadedEmit.emit({ [this._userPermissions.id]: this.checkChanges() });
        }
    }
    onSave() {
        this.emitRequestObject();
    }
    checkForUnsetPolicies(el) {
        var _a, _b;
        return ((el.canSelfApprove && this.selfApproveDefaultBehavior === 'enable' && !((_a = el.bounds) === null || _a === void 0 ? void 0 : _a.length)) ||
            (!el.canSelfApprove && this.selfApproveDefaultBehavior === 'disable' && !((_b = el.bounds) === null || _b === void 0 ? void 0 : _b.length)));
    }
    checkChanges() {
        var _a, _b;
        if (this.dataGroups.length !== this.preEditDataGroupState.length) {
            return false;
        }
        else {
            for (let i = 0; i < this.dataGroups.length; i++) {
                const savedObject = this.preEditDataGroupState.find(el => el.id === this.dataGroups[i].id);
                if (!savedObject) {
                    return false;
                }
                else if (this.checkPayeesForChanges(savedObject.payees, this.dataGroups[i].payees)) {
                    return false;
                }
            }
        }
        const resultA = (_a = this.selfApprovalPoliciesHistory) === null || _a === void 0 ? void 0 : _a.filter(elm => { var _a; return !((_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.map(elm => JSON.stringify(elm)).includes(JSON.stringify(elm))); });
        const resultB = (_b = this.selfApprovalPolicies) === null || _b === void 0 ? void 0 : _b.filter(elm => { var _a; return !((_a = this.selfApprovalPoliciesHistory) === null || _a === void 0 ? void 0 : _a.map(elm => JSON.stringify(elm)).includes(JSON.stringify(elm))); });
        if ((resultA === null || resultA === void 0 ? void 0 : resultA.length) || (resultB === null || resultB === void 0 ? void 0 : resultB.length)) {
            return false;
        }
        return true;
    }
    checkPayeesForChanges(savedObjects, dataGroupPayeeObjects) {
        if ((!savedObjects && dataGroupPayeeObjects && dataGroupPayeeObjects.length) ||
            (savedObjects && savedObjects.length && !dataGroupPayeeObjects)) {
            return true;
        }
        if (savedObjects && dataGroupPayeeObjects && savedObjects.length !== dataGroupPayeeObjects.length) {
            return true;
        }
        if (savedObjects && dataGroupPayeeObjects && savedObjects.length === dataGroupPayeeObjects.length) {
            for (let j = 0; j < dataGroupPayeeObjects.length; j++) {
                const savedObjectPayee = savedObjects.find(el => el.id === dataGroupPayeeObjects[j].id);
                if (!savedObjectPayee) {
                    return true;
                }
            }
        }
        return false;
    }
    onOpenUnassignModal(dataGroup) {
        this.dataGroupForRemove = dataGroup;
    }
    openPayeeGroupDetail(payee) {
        // @ts-ignore
        this.payeeIds = payee.items;
        this.payeeGroupName = payee.name;
        this.payeeDetailModal = true;
    }
    openAccountGroupDetail(account) {
        // @ts-ignore
        this.accountIds = account.items;
        this.accountGroupName = account.name;
        this.accountDetailModal = true;
    }
    /**
     * Return flag of financial BF and bound support for self approve
     * @param item - BF privileges
     */
    checkIfSelfApproveLimitsSupport(item) {
        let countOfSupportLimit = 0;
        for (const property in item) {
            if (item[property].supportsLimits) {
                countOfSupportLimit++;
            }
        }
        return item.approve && item.approve.assigned && countOfSupportLimit > 0;
    }
    /**
     * Return flag of self approve supported
     * @param item - BF privileges
     */
    checkIfSelfApprove(item) {
        return item.approve && item.approve.assigned;
    }
    /**
     * Return flag of present any self approval item in group of BF
     * @param items - BF privileges in Group
     */
    checkIfGroupHasSelfApprove(items) {
        let appovePrivelegCount = 0;
        items.forEach((el) => {
            if (this.checkIfSelfApprove(el.privileges)) {
                appovePrivelegCount++;
            }
        });
        return appovePrivelegCount > 0;
    }
    /**
     * Return flag of state of self approval
     * @param name - name of BF
     */
    checkIfSelfApprovalPoliciesSetted(name) {
        var _a, _b;
        return (_b = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === name)) === null || _b === void 0 ? void 0 : _b.canSelfApprove;
    }
    /**
     * Return flag of disabled of self approval
     * @param name - name of BF
     */
    checkIfSelfApprovalDisabled(name) {
        var _a, _b, _c;
        if ((_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === name)) {
            return !((_c = (_b = this.selfApprovalPolicies) === null || _b === void 0 ? void 0 : _b.find((el) => el.businessFunctionName === name)) === null || _c === void 0 ? void 0 : _c.canSelfApprove);
        }
        return false;
    }
    /**
     * Return bounds for self approve
     * @param name - name of BF
     */
    getBoundsForSelfApprove(name) {
        var _a, _b;
        return (_b = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === name)) === null || _b === void 0 ? void 0 : _b.bounds;
    }
    /**
     * Open modal for edit self Approve
     * @param bf -  BF
     */
    editSelfApprove(bf) {
        var _a;
        this.selfApproveItemData = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === bf.name);
        this.typeOfSelfApproveAction = 'edit';
        this.selectedBFForSelfApprove = bf;
    }
    /**
     * Open modal for enable self Approve
     * @param bf -  BF
     */
    enableSelfApprove(bf) {
        var _a;
        this.selfApproveItemData = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.find((el) => el.businessFunctionName === bf.name);
        this.typeOfSelfApproveAction = 'enable';
        this.selectedBFForSelfApprove = bf;
    }
    /**
     * Changed response object when self approval item changed
     * @param event -  SelfApprovalPolicies
     */
    onSelfApproveChanges(event) {
        var _a;
        this.selfApprovalPolicies = (_a = this.selfApprovalPolicies) === null || _a === void 0 ? void 0 : _a.filter((obj) => {
            return obj.businessFunctionName !== event.businessFunctionName;
        });
        if (this.selfApprovalPolicies && this.selfApprovalPolicies.length) {
            this.selfApprovalPolicies.push(event);
        }
        else {
            this.selfApprovalPolicies = [];
            this.selfApprovalPolicies.push(event);
        }
        this.emitRequestObject();
    }
}
/** @nocollapse */ UserPermissionsItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserPermissionsItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserPermissionsItemComponent, selector: "bb-user-permissions-item", inputs: { user: "user", currencyList: "currencyList", selfApproveDefaultBehavior: "selfApproveDefaultBehavior", showApprovalLevel: "showApprovalLevel", approvalLevel: "approvalLevel", approvalLevelLoading: "approvalLevelLoading", approvalLevelError: "approvalLevelError", limitData: "limitData", userLimitsPermission: "userLimitsPermission", userPermissions: "userPermissions", dataGroup: "dataGroup", payeeGroups: "payeeGroups", showActions: "showActions", enableSelfApproval: "enableSelfApproval", showPayee: "showPayee", showFunctionGroupType: "showFunctionGroupType", disableSaveButton: "disableSaveButton", editView: "editView", legalEntityId: "legalEntityId", editedFunctionId: "editedFunctionId" }, outputs: { emitLimitData: "emitLimitData", removeFunctionGroup: "removeFunctionGroup", removeDataGroup: "removeDataGroup", requestObjectEmit: "requestObjectEmit", editedFunctionIdEmit: "editedFunctionIdEmit", changesMadedEmit: "changesMadedEmit" }, queries: [{ propertyName: "businessFunctionTemplate", first: true, predicate: UserPermissionsItemBusinessFunctionDirective, descendants: true }, { propertyName: "businessFunctionGroupKeyTemplate", first: true, predicate: UserPermissionsItemBusinessFunctionGroupNameDirective, descendants: true }], ngImport: i0, template: "<div\n  *ngIf=\"_userPermissions && dataGroups\"\n  [attr.data-role]=\"_userPermissions.name + '-container'\"\n  class=\"bb-user-permission-item bb-block bb-block--sm\">\n  <div class=\"bb-block bb-block--sm\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-bottom bb-heading-3 break-word\">\n        {{ _userPermissions.name }}\n      </div>\n\n      <div class=\"bb-stack__item\" *ngIf=\"showFunctionGroupType\">\n        <bb-badge-ui\n          *ngIf=\"_userPermissions.type === 'TEMPLATE'\"\n          data-role=\"function-group-reference-badge\"\n          color=\"secondary\"\n          text=\"Reference\"\n          i18n-text=\"Reference function group@@user-permissions-item.function-group.type.reference\">\n        </bb-badge-ui>\n\n        <bb-badge-ui\n          *ngIf=\"_userPermissions.type === 'REGULAR'\"\n          data-role=\"function-group-custom-badge\"\n          color=\"secondary\"\n          text=\"Custom\"\n          i18n-text=\"Custom function group@@user-permissions-item.function-group.type.regular\">\n        </bb-badge-ui>\n\n        <bb-badge-ui\n          *ngIf=\"$any(_userPermissions.type) === 'SYSTEM'\"\n          data-role=\"function-group-system-badge\"\n          color=\"secondary\"\n          text=\"System\"\n          i18n-text=\"System function group@@user-permissions-item.function-group.type.System\">\n        </bb-badge-ui>\n      </div>\n\n      <div class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--no-shrink\">\n        <button\n          [attr.data-role]=\"'unassign-function-group-' + _userPermissions.name\"\n          *ngIf=\"showActions && $any(_userPermissions.type) !== 'SYSTEM'\"\n          bbButton\n          (click)=\"onRemoveFunctionGroup()\"\n          color=\"link\"\n          buttonSize=\"sm\">\n          <span i18n=\"Unassign job role@@user-permissions-item.label.unassign-function-group\"> Unassign job role </span>\n        </button>\n        <ng-container *ngIf=\"$any(_userPermissions.type) === 'SYSTEM'\">\n          <bb-badge-ui\n            data-role=\"locked-badge\"\n            i18n=\"Locked@@user-permissions-item.locked.budge.text\"\n            text=\"Locked\"\n            color=\"secondary\"\n            [abbr]=\"false\"\n            [circle]=\"false\"></bb-badge-ui>\n          <bb-icon-ui data-role=\"locked-icon\" class=\"bb-text-support align-middle\" name=\"lock\" size=\"md\"></bb-icon-ui>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n  <div data-role=\"function-group-description\" class=\"bb-block bb-block--md bb-text-support break-word\">\n    {{ _userPermissions.description }}\n  </div>\n\n  <ng-container *ngIf=\"showApprovalLevel\">\n    <ng-container *ngIf=\"!approvalLevelLoading; else loadingTmp\">\n      <ng-container *ngIf=\"approvalLevel !== approvalLevelStatus.ERROR; else errorTmp\">\n        <div class=\"bb-block bb-block--md\" data-role=\"approval-level-info\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item bb-stack__item--spacing-sm bb-stack__item--align-bottom\">\n              <bb-icon-ui\n                *ngIf=\"approvalLevel && $any(approvalLevel !== approvalLevelStatus.EMPTY); else noApprovalLevelIcon\"\n                name=\"authorizations\"\n                size=\"md\"\n                data-role=\"approval-level-icon\"></bb-icon-ui>\n              <ng-template #noApprovalLevelIcon>\n                <bb-icon-ui name=\"warning\" size=\"md\" color=\"warning\" data-role=\"no-approval-level-icon\"></bb-icon-ui>\n              </ng-template>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--align-top\">\n              <span\n                *ngIf=\"approvalLevel && $any(approvalLevel !== approvalLevelStatus.EMPTY); else noApprovalLevel\"\n                data-role=\"approval-level-details\"\n                i18n=\"Approval level type@@user-permissions-item.approval-level.info\"\n                class=\"bb-text-bold bb-text-support text-small\">\n                Approval level \"{{ approvalLevel }}\"\n              </span>\n              <ng-template #noApprovalLevel>\n                <span\n                  data-role=\"no-approval-level-assigned\"\n                  i18n=\"No approval level warning@@@user-permissions-item.approval-level.no-assigned\"\n                  class=\"bb-text-bold text-small text-warning\">\n                  No approval level\n                </span>\n              </ng-template>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingTmp>\n    <bb-loading-indicator-ui\n      data-role=\"approval-level-loading-spinner\"\n      loaderSize=\"sm\"\n      [inline]=\"true\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #errorTmp>\n    <div class=\"bb-stack\" data-role=\"approval-level-error\">\n      <bb-icon-ui\n        class=\"bb-stack__item bb-stack__item--spacing-sm bb-stack__item--align-bottom\"\n        name=\"warning\"\n        color=\"danger\"\n        size=\"md\"></bb-icon-ui>\n      <span\n        class=\"bb-text-bold text-small text-danger\"\n        i18n=\"Approval level error@@user-permissions-item.approval-level.error\">\n        Could not retrieve approval level\n      </span>\n    </div>\n  </ng-template>\n\n  <div class=\"bb-block bb-block--md bb-text-support\">\n    <bb-function-group-time-bounds [functionGroup]=\"_userPermissions\"></bb-function-group-time-bounds>\n  </div>\n\n  <div class=\"bb-block bb-block--sm\">\n    <u\n      class=\"bb-text-semi-bold bb-subtitle break-word\"\n      i18n=\"Permissions Within@@user-permissions-item.label.permissionsWithin\">\n      Permissions within '{{ _userPermissions.name }}'\n    </u>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" *ngFor=\"let bfGroups of _userPermissions.groupedBusinessFunctions\">\n    <div class=\"bb-stack bb-block bb-block--md row no-gutters\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-none bb-text-semi-bold col-3\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            businessFunctionGroupKeyTemplate?.templateRef || null;\n            context: { groupKey: bfGroups.groupKey }\n          \">\n        </ng-container>\n      </div>\n\n      <bb-business-function-privileges-name\n        class=\"col-6 bb-user-permission-item__business-function-privileges-name bb-subheader bb-subheader--regular\">\n      </bb-business-function-privileges-name>\n      <div\n        class=\"bb-user-permission-item__business-function-privileges-name bb-subheader bb-subheader--regular col-3\"\n        *ngIf=\"enableSelfApproval\"\n        data-role=\"self-approval-header\">\n        <span\n          [attr.data-role]=\"'self-approval-header-for-' + bfGroups.groupKey\"\n          class=\"bb-business-function-privilege-name-item bb-text-align-center\"\n          i18n=\"Self Approval header text@@user-permissions-item.self-approval.header.text\"\n          >Self Approve</span\n        >\n      </div>\n    </div>\n\n    <div *ngFor=\"let bf of bfGroups.businessFunctions\" class=\"bb-stack bb-block bb-block--md row no-gutters\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-none col-3\">\n        <div class=\"bb-user-permission-item__function-item__label bb-subtitle\">\n          <ng-container\n            *ngTemplateOutlet=\"businessFunctionTemplate?.templateRef || null; context: { businessFunction: bf }\">\n          </ng-container>\n        </div>\n      </div>\n\n      <bb-privilege-indicator-list\n        class=\"bb-stack col-6\"\n        [businessFunction]=\"bf\"\n        [limitData]=\"limitData\"\n        [userPermission]=\"userLimitsPermission\"\n        [functionGroupId]=\"_userPermissions.id\"\n        (emitLimitData)=\"emitLimit($event, bf.name, _userPermissions.name)\">\n      </bb-privilege-indicator-list>\n\n      <div\n        class=\"col-3 bb-block bb-subheader bb-subheader--regular\"\n        data-role=\"self-approval-info-block\"\n        *ngIf=\"checkIfSelfApprove(bf.privileges) && enableSelfApproval\">\n        <div [attr.data-role]=\"'self-approval-for-' + bf.name\">\n          <div class=\"bb-inline-stack\">\n            <ng-container\n              *ngIf=\"\n                checkIfSelfApprovalDisabled(bf.name) ||\n                (!checkIfSelfApprovalPoliciesSetted(bf.name) && selfApproveDefaultBehavior !== 'enable')\n              \">\n              <bb-icon-ui\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-support\"\n                name=\"cancel\"\n                size=\"sm\"\n                color=\"support\"></bb-icon-ui>\n              <span\n                data-role=\"self-approval-disabled-indicator\"\n                i18n=\"\n                  Self Approval disabled indicator text@@user-permissions-item.self-approval.disabled.indicator.text\"\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-lg bb-text-support\">\n                Disabled\n              </span>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                !checkIfSelfApprovalDisabled(bf.name) &&\n                (checkIfSelfApprovalPoliciesSetted(bf.name) || selfApproveDefaultBehavior === 'enable')\n              \">\n              <bb-icon-ui\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                name=\"authorizations\"\n                size=\"sm\"\n                color=\"support\"></bb-icon-ui>\n              <span\n                data-role=\"self-approval-enabled-indicator\"\n                i18n=\"Self Approval enabled indicator text@@user-permissions-item.self-approval.enabled.indicator.text\"\n                class=\"bb-inline-stack__item bb-inline-stack__item--spacing-lg bb-text-bold\">\n                Enabled\n              </span>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                !checkIfSelfApprovalDisabled(bf.name) &&\n                (checkIfSelfApprovalPoliciesSetted(bf.name) || selfApproveDefaultBehavior === 'enable') &&\n                editView\n              \">\n              <button bbButton color=\"link-text\" data-role=\"self-approve-edit-button\" (click)=\"editSelfApprove(bf)\">\n                <ng-container *ngIf=\"checkIfSelfApproveLimitsSupport(bf.privileges); else disabledButton\">\n                  <bb-icon-ui\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                    name=\"edit\"\n                    size=\"sm\"></bb-icon-ui>\n                  <span\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-subheader bb-subheader--regular\"\n                    i18n=\"Self Approval edit button text@@user-permissions-item.self-approval.edit.button.text\">\n                    Edit\n                  </span>\n                </ng-container>\n                <ng-template #disabledButton>\n                  <bb-icon-ui\n                    class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                    name=\"cancel\"\n                    size=\"sm\"\n                    color=\"danger\"></bb-icon-ui>\n                  <span\n                    class=\"\n                      bb-inline-stack__item bb-inline-stack__item--spacing-none\n                      bb-subheader bb-subheader--regular\n                      bb-text-danger\n                    \"\n                    i18n=\"Self Approval disable button text@@user-permissions-item.self-approval.disable.button.text\">\n                    Disable\n                  </span>\n                </ng-template>\n              </button>\n            </ng-container>\n\n            <ng-container\n              *ngIf=\"\n                (checkIfSelfApprovalDisabled(bf.name) ||\n                  (!checkIfSelfApprovalPoliciesSetted(bf.name) && selfApproveDefaultBehavior !== 'enable')) &&\n                editView\n              \">\n              <button bbButton color=\"link-text\" data-role=\"self-approve-enable-button\" (click)=\"enableSelfApprove(bf)\">\n                <bb-icon-ui\n                  class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-text-bold\"\n                  name=\"edit\"\n                  size=\"sm\"></bb-icon-ui>\n                <span\n                  class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-subheader bb-subheader--regular\"\n                  i18n=\"Self Approval enable button text@@user-permissions-item.self-approval.enable.button.text\">\n                  Enable\n                </span>\n              </button>\n            </ng-container>\n          </div>\n          <ng-container *ngIf=\"checkIfSelfApproveLimitsSupport(bf.privileges)\">\n            <div\n              class=\"bb-block bb-text-bold bb-text-support\"\n              *ngFor=\"let bound of getBoundsForSelfApprove(bf.name)\"\n              data-role=\"self-approve-bound\">\n              <span>0 - </span>\n              <bb-amount-ui\n                data-role=\"self-approve-bound-amount\"\n                [amount]=\"$any(bound.amount)\"\n                [mapCurrency]=\"true\"\n                [showPlusSign]=\"false\"\n                [abbreviate]=\"false\"></bb-amount-ui>\n              <span> {{ bound.currencyCode }}</span>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n\n      <div\n        class=\"bb-user-permission-item__function-item__label\"\n        data-role=\"self-approve-not-applicable-icon\"\n        *ngIf=\"!checkIfSelfApprove(bf.privileges) && enableSelfApproval\">\n        <bb-icon-ui\n          name=\"remove\"\n          [color]=\"'muted'\"\n          aria-label=\"Not applicable for this business function\"\n          i18n-aria-label=\"Not applicable aria label@@user-permissions-item.self-approve.aria.not-applicable\"\n          bbTooltip=\"Not applicable for this function\"\n          i18n-bbTooltip=\"Not applicable tooltip@@user-permissions-item.self-approve..tooltip.not-applicable\"\n          triggers=\"hover\"></bb-icon-ui>\n      </div>\n    </div>\n  </div>\n  <bb-self-approve-modal\n    *ngIf=\"selectedBFForSelfApprove\"\n    [isOpen]=\"$any(selectedBFForSelfApprove)\"\n    [user]=\"user\"\n    [bf]=\"selectedBFForSelfApprove\"\n    [jobRoleName]=\"_userPermissions.name\"\n    [type]=\"typeOfSelfApproveAction\"\n    [selfApproveItemData]=\"selfApproveItemData\"\n    [isLimitSupport]=\"checkIfSelfApproveLimitsSupport(selectedBFForSelfApprove.privileges)\"\n    [currencyList]=\"currencyList\"\n    (cancel)=\"selectedBFForSelfApprove = undefined\"\n    (selfApprovalDataEmit)=\"onSelfApproveChanges($event); selectedBFForSelfApprove = undefined\"\n    data-role=\"self-approve-modal\">\n  </bb-self-approve-modal>\n\n  <!--different view, will be added after release MVP-->\n  <ng-template>\n    <div class=\"bb-stack\">\n      <div class=\"btn-group btn-group-sm bb-stack__item bb-stack__item--push-right\" data-role=\"btn-group-sm-icons\">\n        <button (click)=\"activeView = 'table'\" [color]=\"activeView === 'table' ? 'primary' : 'secondary'\" bbButton>\n          <bb-icon-ui name=\"view-module\"></bb-icon-ui>\n        </button>\n        <button (click)=\"activeView = 'list'\" [color]=\"activeView === 'list' ? 'primary' : 'secondary'\" bbButton>\n          <bb-icon-ui name=\"list\"></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"row m-0\" *ngIf=\"activeView === 'list'\">\n      <div\n        [ngClass]=\"{ 'col-8': allLinkedPayee?.length, 'col-12': !allLinkedPayee?.length }\"\n        class=\"bb-account-group-item col-8\">\n        <div class=\"card bb-account-group-item__card\" *ngIf=\"!($any(_userPermissions.type) === 'SYSTEM')\">\n          <div class=\"card-body\">\n            <div class=\"bb-block bb-block--sm\">\n              <u\n                class=\"bb-text-semi-bold bb-subtitle\"\n                i18n=\"Account Groups Assigned@@user-permissions-item.label.accountGroupsAssigned\">\n                { dataGroups.length, plural, =0 { No account groups assigned } =1 { 1 account group assigned } other {\n                {{ dataGroups.length }} account groups assigned } }\n              </u>\n            </div>\n\n            <div *ngIf=\"dataGroups.length\" class=\"row\">\n              <div *ngFor=\"let dataGroup of dataGroups\" class=\"col-4\">\n                <div\n                  class=\"bb-stack bb-block bb-block--md bb-account-group-item__card__item\"\n                  data-role=\"assigned-data-group-item\"\n                  [ngClass]=\"{ 'bb-account-group-item__card__item--active rounded': dataGroup === selectedDg }\">\n                  <bb-icon-ui\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                    *ngIf=\"!showActions\"\n                    name=\"check\"\n                    color=\"success\"></bb-icon-ui>\n                  <button\n                    *ngIf=\"showActions\"\n                    bbButton\n                    (click)=\"onRemoveDataGroup(dataGroup)\"\n                    color=\"link\"\n                    [circle]=\"true\"\n                    aria-label=\"Remove account group\"\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                    i18n-aria-label=\"Remove account group@@user-permissions-item.label.remove-account-group\"\n                    [attr.data-role]=\"'user-permissions-item-data-group-name-' + dataGroup.name\">\n                    <bb-icon-ui name=\"delete\" color=\"dark\"></bb-icon-ui>\n                  </button>\n                  <span\n                    class=\"bb-stack__item bb-subtitle break-word\"\n                    data-role=\"assigned-data-group\"\n                    [ngClass]=\"{ 'text-primary': checkInclude(dataGroup['payees']) }\">\n                    {{ dataGroup.name }}\n                  </span>\n                  <bb-icon-ui\n                    class=\"bb-account-group-item__card__item--link\"\n                    *ngIf=\"dataGroup['payees'] && dataGroup['payees'].length\"\n                    name=\"link\"\n                    color=\"primary\"\n                    (click)=\"showLinkedPayee(dataGroup)\"\n                    data-role=\"linked-button\"></bb-icon-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"allLinkedPayee && allLinkedPayee.length\" class=\"bb-linked-item\">\n        <div class=\"bb-linked-item__icon\">\n          <bb-icon-ui\n            circle=\"true\"\n            data-role=\"unlinked-button\"\n            backgroundType=\"circle\"\n            name=\"link\"\n            [inverse]=\"true\"\n            size=\"lg\"\n            (click)=\"selectedDg = undefined; selectedPg = undefined\"></bb-icon-ui>\n        </div>\n      </div>\n\n      <div class=\"col-4 bb-payee-group-item\" *ngIf=\"allLinkedPayee && allLinkedPayee.length\" data-role=\"linked-payees\">\n        <div class=\"card bb-payee-group-item__card\">\n          <div class=\"card-body\">\n            <div *ngIf=\"selectedDg\" data-role=\"selected-payees\">\n              <p\n                class=\"bb-subtitle bb-text-semi-bold\"\n                i18n=\"All Payee Groups Linked@@user-permissions-item.label.allPayeesLinked\">\n                { selectedDg?.payees?.length, plural, =1 { 1/{{ allLinkedPayee.length }} payee group linked } other {\n                {{ selectedDg?.payees?.length }}/{{ allLinkedPayee.length }} payee groups linked to } }\n                <b>{{ selectedDg?.name }}</b>\n              </p>\n              <p\n                *ngFor=\"let payeeGroup of selectedDg?.payees\"\n                class=\"bb-subtitle bb-payee-group-item__card__item rounded\"\n                (click)=\"selectedPG(payeeGroup)\">\n                <bb-icon-ui name=\"check\" *ngIf=\"selectedPg?.id !== payeeGroup.id\" class=\"align-bottom\"></bb-icon-ui>\n                <bb-icon-ui\n                  name=\"radio-button-checked\"\n                  *ngIf=\"selectedPg?.id === payeeGroup.id\"\n                  class=\"align-bottom\"></bb-icon-ui>\n                {{ payeeGroup.name }}\n              </p>\n            </div>\n\n            <div *ngIf=\"!selectedDg\" data-role=\"all-payees\">\n              <p\n                class=\"bb-subtitle bb-text-semi-bold\"\n                i18n=\"Selected Payee Groups Linked@@user-permissions-item.label.selectedPayeesLinked\">\n                { allLinkedPayee.length, plural, =1 { 1 payee group linked } other { {{ allLinkedPayee.length }} payee\n                groups linked } }\n              </p>\n              <p\n                *ngFor=\"let payeeGroup of allLinkedPayee\"\n                class=\"bb-subtitle bb-payee-group-item__card__item rounded\"\n                (click)=\"selectedPG(payeeGroup)\">\n                <bb-icon-ui name=\"check\" *ngIf=\"selectedPg?.id !== payeeGroup.id\" class=\"align-bottom\"></bb-icon-ui>\n                <bb-icon-ui\n                  name=\"radio-button-checked\"\n                  *ngIf=\"selectedPg?.id === payeeGroup.id\"\n                  class=\"align-bottom\"></bb-icon-ui>\n                {{ payeeGroup.name }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <!--different view, will be added after release MVP-->\n  <div class=\"card\" *ngIf=\"activeView === 'table'\">\n    <div\n      class=\"card-body\"\n      *ngIf=\"!($any(_userPermissions.type) === 'SYSTEM')\"\n      [attr.data-role]=\"'card-body-' + _userPermissions.name\">\n      <div *ngIf=\"!dataGroups.length\">\n        <div class=\"bb-block bb-block--sm\" data-role=\"no-assigned-item\">\n          <u\n            class=\"bb-text-semi-bold bb-subtitle\"\n            i18n=\"No Account Groups Assigned@@user-permissions-item.label.noAccountGroupsAssigned\">\n            No account groups assigned\n          </u>\n        </div>\n      </div>\n\n      <div *ngIf=\"dataGroups.length\">\n        <div\n          class=\"btn-group btn-group-sm bb-stack__item\"\n          data-role=\"btn-group-for-type-of-group\"\n          *ngIf=\"allLinkedPayee && allLinkedPayee.length\">\n          <button\n            (click)=\"activeDataGroup = 'account'\"\n            [color]=\"activeDataGroup === 'account' ? 'primary' : 'secondary'\"\n            bbButton\n            data-role=\"account-group-button\"\n            i18n=\"Account group toggle button@@user-permissions-item.toggle-button.account-group\">\n            Account Groups ({{ dataGroups.length }})\n          </button>\n          <button\n            (click)=\"activeDataGroup = 'payee'\"\n            [color]=\"activeDataGroup === 'payee' ? 'primary' : 'secondary'\"\n            bbButton\n            data-role=\"payee-group-button\"\n            i18n=\"Payee group toggle button@@user-permissions-item.toggle-button.payee-group\">\n            Payee Groups ({{ allLinkedPayee.length }})\n          </button>\n        </div>\n        <table\n          class=\"table table-striped table-hover table-fixed\"\n          bbTableFocus\n          [bbTable]=\"dataGroups\"\n          [attr.data-role]=\"'assigned-table-' + _userPermissions.name\">\n          <caption\n            class=\"sr-only\"\n            i18n=\"Linked Account Group Table@@user-permissions-item.linked-account-group.table.caption\">\n            Table with Account Groups linked to Payee Groups\n          </caption>\n\n          <thead>\n            <tr data-role=\"service-agreement-table-headers\">\n              <ng-container *ngIf=\"activeDataGroup === 'account'\">\n                <ng-container *ngTemplateOutlet=\"accountGroupHeader\"></ng-container>\n              </ng-container>\n\n              <th *ngIf=\"showPayee && ((allLinkedPayee && allLinkedPayee.length) || editView)\" scope=\"col\">\n                <span class=\"bb-stack\">\n                  <span\n                    i18n=\"Payee Groups table header name@@user-permissions-item.table.header.payee-group.name\"\n                    class=\"bb-stack__item bb-stack__item--spacing-sm\">\n                    Payee Groups\n                  </span>\n                  <bb-icon-ui\n                    name=\"info\"\n                    data-role=\"payee-group-info\"\n                    size=\"md\"\n                    class=\"bb-stack__item bb-text-support\"\n                    [bbTooltip]=\"payeeHeaderTooltip\"\n                    tabindex=\"0\"\n                    aria-labelledby=\"payeeTooltip\"\n                    triggers=\"hover\"></bb-icon-ui>\n                  <ng-template #payeeHeaderTooltip>\n                    <span\n                      i18n=\"\n                        Payee Groups table header tooltip\n                        text@@user-permissions-item.table.header.payee-group.tooltip.text\">\n                      These are the payee group(s) linked with account group(s) assigned to\n                      {{ _userPermissions.name }} Job Role\n                    </span>\n                  </ng-template>\n                  <span\n                    class=\"d-none\"\n                    id=\"payeeTooltip\"\n                    i18n=\"\n                      Payee Groups table header tooltip aria-label\n                      text@@user-permissions-item.table.header.payee-group.tooltip.aria-label.text\">\n                    These are the payee group(s) linked with account group(s) assigned to\n                    {{ _userPermissions.name }} Job Role\n                  </span>\n                </span>\n              </th>\n\n              <ng-template #accountGroupHeader>\n                <th scope=\"col\">\n                  <span class=\"bb-stack\">\n                    <span\n                      i18n=\"Account Groups table header name@@user-permissions-item.table.header.account-group.name\"\n                      class=\"bb-stack__item bb-stack__item--spacing-sm\">\n                      Account Groups\n                      <span *ngIf=\"!allLinkedPayee.length\" data-role=\"account-table-counter\"\n                        >({{ dataGroups.length }})</span\n                      >\n                    </span>\n                    <bb-icon-ui\n                      name=\"info\"\n                      data-role=\"account-group-info\"\n                      size=\"md\"\n                      class=\"bb-stack__item bb-text-support\"\n                      [bbTooltip]=\"accountHeaderTooltip\"\n                      tabindex=\"0\"\n                      aria-labelledby=\"accountTooltip\"\n                      triggers=\"hover\"></bb-icon-ui>\n                    <ng-template #accountHeaderTooltip>\n                      <span\n                        i18n=\"\n                          Account Groups table header tooltip\n                          text@@user-permissions-item.table.header.account-group.tooltip.text\">\n                        These are the account group(s) assigned to {{ _userPermissions.name }} Job Role\n                      </span>\n                    </ng-template>\n                    <span\n                      class=\"d-none\"\n                      id=\"accountTooltip\"\n                      i18n=\"\n                        Account Groups table header tooltip aria-label\n                        text@@user-permissions-item.table.header.account-group.tooltip.aria-label.text\">\n                      These are the account group(s) assigned to {{ _userPermissions.name }} Job Role\n                    </span>\n                  </span>\n                </th>\n              </ng-template>\n\n              <ng-container *ngIf=\"activeDataGroup === 'payee'\">\n                <ng-container *ngTemplateOutlet=\"accountGroupHeader\"></ng-container>\n              </ng-container>\n            </tr>\n          </thead>\n\n          <tbody *ngIf=\"activeDataGroup === 'account'\" data-role=\"account-table-body\">\n            <tr *ngFor=\"let dataGroup of dataGroups\" [bbRow]=\"dataGroup\" data-role=\"service-agreement-table-info\">\n              <td data-role=\"account-table-data-group-row\">\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    removeAccountGroupBtn;\n                    context: { $implicit: dataGroup, icon: 'remove-circle', size: 'md' }\n                  \"></ng-container>\n                <u role=\"button\" class=\"text-primary\" (bbKeyboardClick)=\"openAccountGroupDetail(dataGroup)\" tabindex=\"0\"\n                  >{{ dataGroup.name }}\n                  <i triggers=\"hover\" [bbTooltip]=\"accountNumberTooltip\" class=\"bb-text-bold\"\n                    >({{ dataGroup.items?.length }})</i\n                  >\n                </u>\n              </td>\n              <td\n                *ngIf=\"showPayee && ((allLinkedPayee && allLinkedPayee.length) || editView)\"\n                data-role=\"account-table-payee-row\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-stack--center\">\n                    <ng-container\n                      *ngTemplateOutlet=\"\n                        assignPayeeBtn;\n                        context: { dataGroup: dataGroup, payees: dataGroup['payees'] }\n                      \"></ng-container>\n                  </div>\n                  <div class=\"bb-stack__item\">\n                    <ng-container *ngFor=\"let payee of dataGroup['payees']; let isLast = last\">\n                      <div class=\"bb-inline-stack bb-inline-stack__item--spacing-sm bb-text-nowrap\">\n                        <ng-container\n                          *ngTemplateOutlet=\"\n                            removePayeeBtn;\n                            context: { payee: payee, dataGroup: dataGroup, icon: 'clear', size: 'sm' }\n                          \"></ng-container>\n                        <span\n                          [attr.data-role]=\"'payee-item-account-table-' + dataGroup.name\"\n                          (bbKeyboardClick)=\"openPayeeGroupDetail(payee)\"\n                          class=\"text-primary\"\n                          role=\"button\"\n                          tabindex=\"0\">\n                          {{ payee.name\n                          }}<i triggers=\"hover\" [bbTooltip]=\"contactNumberTooltip\" class=\"bb-text-bold\" role=\"button\">\n                            ({{ payee.items?.length }})\n                          </i>\n                          <span *ngIf=\"!editView && !isLast\"> , </span>\n                        </span>\n                      </div>\n                    </ng-container>\n\n                    <span\n                      i18n=\"Not assigned payee groups@@user-permissions-item.table.no-assigned.text\"\n                      class=\"bb-text-support\"\n                      *ngIf=\"!dataGroup['payees'] || !dataGroup['payees'].length\">\n                      Not assigned\n                    </span>\n                  </div>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n          <tbody *ngIf=\"activeDataGroup === 'payee'\" data-role=\"payee-table-body\">\n            <tr *ngFor=\"let payee of allLinkedPayee\" [bbRow]=\"payee\" data-role=\"service-agreement-table-info\">\n              <td data-role=\"payee-table-payee-row\">\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    removePayeeLinkingBtn;\n                    context: {\n                      payee: payee,\n                      dataGroups: getAccountGroupLinkedString(payee),\n                      icon: 'remove-circle',\n                      size: 'md'\n                    }\n                  \"></ng-container>\n                <u\n                  role=\"button\"\n                  class=\"text-primary\"\n                  [attr.data-role]=\"'payee-name-' + payee.name\"\n                  (bbKeyboardClick)=\"openPayeeGroupDetail(payee)\"\n                  tabindex=\"0\"\n                  >{{ payee.name\n                  }}<i triggers=\"hover\" [bbTooltip]=\"contactNumberTooltip\" class=\"bb-text-bold\" role=\"button\"\n                    >({{ payee.items.length }})</i\n                  ></u\n                >\n              </td>\n              <td data-role=\"payee-table-data-group-row\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-stack--center\">\n                    <ng-container\n                      *ngTemplateOutlet=\"assignAccountGroupToPayeeBtn; context: { payee: payee }\"></ng-container>\n                  </div>\n                  <div class=\"bb-stack__item\">\n                    <ng-container *ngFor=\"let account of getAccountGroupLinked(payee); let isLast = last\">\n                      <div class=\"bb-inline-stack bb-text-nowrap\">\n                        <ng-container\n                          *ngTemplateOutlet=\"\n                            removeAccountGroupFromPayeeBtn;\n                            context: {\n                              payee: payee,\n                              dataGroup: account,\n                              dataGroupLength: getAccountGroupLinked(payee).length,\n                              icon: 'clear',\n                              size: 'sm'\n                            }\n                          \"></ng-container>\n                        <span data-role=\"payee-table-account-item\">\n                          <span\n                            class=\"text-primary\"\n                            role=\"button\"\n                            [attr.data-role]=\"'payee-table-account-item-' + payee.name\"\n                            (bbKeyboardClick)=\"openAccountGroupDetail(account)\"\n                            tabindex=\"0\"\n                            >{{ account.name }}\n                            <i triggers=\"hover\" [bbTooltip]=\"accountNumberTooltip\" class=\"bb-text-bold\"\n                              >({{ account.items.length }})</i\n                            >\n                          </span>\n                          <span *ngIf=\"!editView && !isLast\"> , </span>\n                        </span>\n                      </div>\n                    </ng-container>\n                  </div>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        <div\n          *ngIf=\"editView && activeDataGroup === 'account'\"\n          class=\"bb-block bb-block--sm bb-stack bb-stack--density-sm\">\n          <button bbButton color=\"link\" buttonSize=\"md\" data-role=\"add-account-groups-btn\" (click)=\"addAccountGroup()\">\n            <bb-icon-ui name=\"add\" [cropped]=\"true\"></bb-icon-ui>\n            <span i18n=\"Add Account Group@@user-permissions-item.label.add-account-group\">Add Account Groups</span>\n          </button>\n        </div>\n        <button\n          bbButton\n          (click)=\"onEditPayee()\"\n          *ngIf=\"!editView && !editedFunctionId && showActions\"\n          color=\"link\"\n          data-role=\"edit-payees-button\"\n          i18n=\"Edit payees button@@user-permissions-item.button.edit-payees\">\n          edit\n        </button>\n        <div *ngIf=\"editView && !showActions\" class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            data-role=\"save-linking\"\n            class=\"bb-button-bar__button\"\n            (click)=\"onSave()\"\n            bbButton\n            color=\"primary\"\n            type=\"button\"\n            [disabled]=\"checkChanges()\">\n            <span i18n=\"Save button|Button to save form @@user-permissions-item.saveButton\"> Save </span>\n          </button>\n          <button\n            data-role=\"cancel-linking\"\n            class=\"bb-button-bar__button\"\n            bbButton\n            type=\"button\"\n            (click)=\"onCancel()\"\n            color=\"secondary\">\n            <span i18n=\"Cancel Button|Button to cancel @@user-permissions-item.cancelButton\"> Cancel </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <bb-payee-group-detail-modal\n    *ngIf=\"dataGroups.length\"\n    [targetSaId]=\"_userPermissions.serviceAgreementId\"\n    [isOpen]=\"payeeDetailModal\"\n    [payeeIds]=\"payeeIds\"\n    [payeeGroupName]=\"payeeGroupName\"\n    (cancel)=\"payeeDetailModal = false\"\n    data-role=\"payee-detail-modal\"></bb-payee-group-detail-modal>\n\n  <bb-account-group-detail-modal\n    *ngIf=\"dataGroups.length\"\n    [isOpen]=\"accountDetailModal\"\n    [accountIds]=\"accountIds\"\n    [accountGroupName]=\"accountGroupName\"\n    (cancel)=\"accountDetailModal = false\"\n    [legalEntityIds]=\"$any([legalEntityId])\"\n    data-role=\"account-detail-modal\"></bb-account-group-detail-modal>\n</div>\n\n<ng-template #removePayeeBtn let-payee=\"payee\" let-dataGroup=\"dataGroup\" let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"removedPayeeGroup(payee, dataGroup)\"\n    [bbTooltip]=\"removePayeeGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove payee group\"\n    i18n-aria-label=\"Remove payee group@@user-permissions-item.label.remove-payee-group\"\n    data-role=\"assign-payee-group-button\"\n    [attr.data-role]=\"'remove-payee-group-' + payee.name + dataGroup.name\">\n    <bb-icon-ui [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n\n  <ng-template #removePayeeGroupTooltip>\n    <span i18n=\"Remove payee group tooltip text@@user-permissions-item.remove-payee-group.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removePayeeLinkingBtn let-payee=\"payee\" let-dataGroups=\"dataGroups\" let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"onOpenUnassignModal(payee)\"\n    [bbTooltip]=\"unassignPayeeGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove payee group linking\"\n    i18n-aria-label=\"Remove payee group linking@@user-permissions-item.label.remove-payee-group-linking\"\n    data-role=\"assign-payee-group-button\"\n    [attr.data-role]=\"'payee-unlink-button-' + payee.name\">\n    <bb-icon-ui [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <bb-unassign-data-group-modal\n    [isOpen]=\"dataGroupForRemove && dataGroupForRemove.id === payee.id\"\n    [jobRole]=\"_userPermissions?.name\"\n    [activeDataGroup]=\"'payee'\"\n    [payeeGroupName]=\"payee.name\"\n    [accountGroupName]=\"dataGroups\"\n    (confirm)=\"removePayeeGroupLinking(payee)\"\n    (cancel)=\"dataGroupForRemove = undefined\"\n    data-role=\"unnasign-payee-modal\"></bb-unassign-data-group-modal>\n\n  <ng-template #unassignPayeeGroupTooltip>\n    <span i18n=\"Unassign payee group tooltip text@@user-permissions-item.unassign-payee-group.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from Account Group(s)\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #assignPayeeBtn let-dataGroup=\"dataGroup\" let-payees=\"payees\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"assignPayee(payees, dataGroup)\"\n    [bbTooltip]=\"assignPayeeTooltip\"\n    [circle]=\"true\"\n    buttonSize=\"md\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Assign payee group\"\n    i18n-aria-label=\"Assign payee group@@user-permissions-item.label.assign-payee-group\"\n    [attr.data-role]=\"'assign-payee-group-' + dataGroup.name\">\n    <bb-icon-ui name=\"add-circle\" color=\"primary\"></bb-icon-ui>\n  </button>\n  <ng-template #assignPayeeTooltip>\n    <span i18n=\"Add payee group(s) tooltip text@@user-permissions-item.add-payee-group.btn.tooltip.text\">\n      Add payee group(s) to '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #assignAccountGroupToPayeeBtn let-payee=\"payee\">\n  <button\n    *ngIf=\"editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"addAccountGroupToPayee(payee)\"\n    [bbTooltip]=\"assignAccountGroupToPayeeTooltip\"\n    [circle]=\"true\"\n    buttonSize=\"md\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Assign account group to payee\"\n    i18n-aria-label=\"Assign account group to payee group@@user-permissions-item.label.assign-account-group-to-payee\"\n    [attr.data-role]=\"'link-account-group-to-payee-' + payee.name\">\n    <bb-icon-ui name=\"add-circle\" color=\"primary\"></bb-icon-ui>\n  </button>\n  <ng-template #assignAccountGroupToPayeeTooltip>\n    <span\n      i18n=\"\n        Assign Account Group to Payee tooltip text@@user-permissions-item.assign-account-group-to-payee.btn.tooltip.text\">\n      Add '{{ payee.name }}' Payee Group to Account Group(s)\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removeAccountGroupBtn let-dataGroup let-icon=\"icon\" let-size=\"size\">\n  <button\n    *ngIf=\"showActions || editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"onOpenUnassignModal(dataGroup)\"\n    [bbTooltip]=\"removeAccountGroupTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove account group\"\n    i18n-aria-label=\"Remove account group@@user-permissions-item.label.remove-account-group\"\n    [attr.data-role]=\"'user-permissions-item-data-group-name-' + dataGroup.name\">\n    <bb-icon-ui *ngIf=\"editView\" [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <bb-unassign-data-group-modal\n    [isOpen]=\"dataGroupForRemove && dataGroupForRemove.id === dataGroup.id\"\n    [accountGroupName]=\"dataGroup.name\"\n    [jobRole]=\"_userPermissions?.name\"\n    [activeDataGroup]=\"'account'\"\n    (confirm)=\"removeAccountGroup(dataGroup)\"\n    (cancel)=\"dataGroupForRemove = undefined\"\n    data-role=\"unassign-account-group-modal\"></bb-unassign-data-group-modal>\n</ng-template>\n\n<ng-template\n  #removeAccountGroupFromPayeeBtn\n  let-dataGroup=\"dataGroup\"\n  let-payee=\"payee\"\n  let-dataGroupLength=\"dataGroupLength\"\n  let-icon=\"icon\"\n  let-size=\"size\">\n  <button\n    *ngIf=\"showActions || editView\"\n    triggers=\"hover\"\n    bbButton\n    (click)=\"removedAccountGroupFromPayee(payee, dataGroup)\"\n    [bbTooltip]=\"removeAccountGroupFromPayeeTooltip\"\n    [circle]=\"true\"\n    [buttonSize]=\"size\"\n    [color]=\"$any('icon-link')\"\n    aria-label=\"Remove account group from payee\"\n    i18n-aria-label=\"Remove account group from payee@@user-permissions-item.label.remove-account-group-from-payee\"\n    [attr.data-role]=\"'unassign-account-group-from-payee-' + payee.name + dataGroup.name\">\n    <bb-icon-ui *ngIf=\"editView\" [name]=\"icon\" color=\"danger\"></bb-icon-ui>\n  </button>\n  <ng-template #removeAccountGroupFromPayeeTooltip>\n    <span\n      i18n=\"Remove Account group tooltip text@@user-permissions-item.remove-account-group-from-payee.btn.tooltip.text\">\n      Remove '{{ payee.name }}' Payee Group from '{{ dataGroup.name }}' Account Group\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #removeAccountGroupTooltip>\n  <span i18n=\"Unassign account group tooltip text@@user-permissions-item.remove-account-group.btn.tooltip.text\">\n    Unassign Account group\n  </span>\n</ng-template>\n\n<bb-select-items-modal\n  data-role=\"assign-accounts-modal\"\n  title=\"Assign Account Group(s)\"\n  i18n-title=\"Assign Account Group(s)@@user-permissions-item.select-account-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-account-groups-modal.submit\"\n  searchPlaceholder=\"Search for Account Group(s)\"\n  i18n-searchPlaceholder=\"Search for Account Group(s)@@user-permissions-item.select-account-groups-modal.search\"\n  [(isOpen)]=\"selectAccountGroupsModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availableDataGroups | async)\"\n  (confirm)=\"assignDataGroups($any($event))\"\n  (search)=\"searchAvailableDataGroups($event)\">\n  <ng-template bbSelectItemsItemHeader *ngIf=\"splittedAccountsByType$ | async as splitAcc\">\n    <div class=\"bb-stack\">\n      <div\n        class=\"bb-text-bold bb-stack__item bb-subtitle\"\n        i18n=\"All@@user-permissions-item.select-account-groups-modal.header.column-all\">\n        All\n      </div>\n      <div\n        *ngIf=\"splitAcc?.wizardAccounts?.length && splitAcc?.customAccounts?.length\"\n        data-role=\"account-switcher\"\n        class=\"bb-stack__item bb-stack__item--push-right\">\n        <bb-switch-ui\n          class=\"bb-subtitle\"\n          [labelPosition]=\"'left'\"\n          label=\"Include Quick User Set Up Generated\"\n          i18n-label=\"\n            Include Quick User Set Up Generated@@user-permissions-item.select-account-groups-modal.switch.label\"\n          (change)=\"switchAccounts()\">\n        </bb-switch-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div class=\"bb-stack\">\n      <div [attr.data-role]=\"'data-group-name-' + item.name\" class=\"bb-stack__item\">\n        <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n        <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n      </div>\n      <div class=\"bb-stack__item bb-stack__item--push-right\" *ngIf=\"item.metadata?.generated\">\n        <bb-icon-ui [name]=\"'auto_fix_high'\" data-role=\"generated-account-icon\"></bb-icon-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availableDataGroupsSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Account Groups available\"\n        i18n-title=\"No Account Groups available@@user-permissions-item.select-account-groups-modal.empty.title\"\n        subtitle=\"You can create an account group within the 'Account Groups' section.\"\n        i18n-subtitle=\"\n          You can create an account group within the 'Account Groups'\n          section.@@user-permissions-item.select-account-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availableDataGroupsSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"No search results found@@user-permissions-item.select-account-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different criteria@@user-permissions-item.select-account-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<bb-select-items-modal\n  title=\"Link Account Group(s) to &quot;{{ selectedForAssignAccountGroupForPayee?.name }}&quot; Payee Group\"\n  i18n-title=\"Link Account Group(s)@@user-permissions-item.select-account-linked-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-account-linked-groups-modal.submit\"\n  searchPlaceholder=\"Search\"\n  i18n-searchPlaceholder=\"Search for Account Group(s)@@user-permissions-item.select-account-linked-groups-modal.search\"\n  [(isOpen)]=\"selectAccountGroupsForPayeesModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availableDataGroupsForPayee | async)\"\n  (confirm)=\"assignDataGroupsForPayee($event)\"\n  (search)=\"searchAvailableDataGroupsForPayees($event)\">\n  <ng-template bbSelectItemsItemHeader>\n    <div class=\"bb-text-bold\" i18n=\"All@@user-permissions-item.select-account-linked-groups-modal.header.column-all\">\n      All\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div [attr.data-role]=\"'data-group-name-' + item.name\">\n      <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n      <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availableDataGroupsForPayeesSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Account Groups available\"\n        i18n-title=\"No Account Groups available@@user-permissions-item.select-account-linked-groups-modal.empty.title\"\n        subtitle=\"All account groups assigned to &quot;{{\n          _userPermissions?.name\n        }}&quot; Job Role already linked to &quot;{{ selectedForAssignAccountGroupForPayee?.name }}&quot; payee group.\"\n        i18n-subtitle=\"All already linked.@@user-permissions-item.select-account-linked-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availableDataGroupsForPayeesSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"\n          No search results found@@user-permissions-item.select-account-linked-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different\n          criteria@@user-permissions-item.select-account-linked-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<bb-select-items-modal\n  title=\"Assign Payee Group(s) to &quot;{{ selectedForAssignAccountGroup?.name }}&quot; Account Group\"\n  i18n-title=\"Assign Payee Group(s)@@user-permissions-item.select-payee-groups-modal.title\"\n  itemIdProperty=\"id\"\n  submitLabel=\"Assign\"\n  i18n-submitLabel=\"Assign Account Group@@user-permissions-item.select-payee-groups-modal.submit\"\n  searchPlaceholder=\"Search for Payee Group(s)\"\n  i18n-searchPlaceholder=\"Search for Payee Group(s)@@user-permissions-item.select-payee-groups-modal.search\"\n  [(isOpen)]=\"selectPayeeGroupsModalOpened\"\n  [searchEnabled]=\"true\"\n  [items]=\"$any(availablePayeeGroups | async)\"\n  (confirm)=\"assignPayeeGroups($event)\"\n  (search)=\"searchAvailablePayeeGroups($event)\">\n  <ng-template bbSelectItemsItemHeader>\n    <div class=\"bb-text-bold\" i18n=\"All@@user-permissions-item.select-payee-groups-modal.header.column-all\">All</div>\n  </ng-template>\n\n  <ng-template bbSelectItemsItem let-item=\"item\">\n    <div [attr.data-role]=\"'data-group-name-' + item.name\">\n      <div class=\"bb-text-bold break-word\">{{ item.name }}</div>\n      <div class=\"bb-text-support break-word\">{{ item.description }}</div>\n    </div>\n  </ng-template>\n\n  <ng-template bbSelectItemsEmpty>\n    <div class=\"bb-state-container bb-select-items__state\">\n      <bb-empty-state-ui\n        *ngIf=\"!(availablePayeeGroupsSearchTerm$ | async)\"\n        data-role=\"empty-state\"\n        title=\"No Payee Groups available\"\n        i18n-title=\"No Payee Groups available@@user-permissions-item.select-payee-groups-modal.empty.title\"\n        subtitle=\"You can create a payee group within the 'Payee Groups' section.\"\n        i18n-subtitle=\"\n          You can create a payee group within the 'Payee Groups'\n          section.@@user-permissions-item.select-payee-groups-modal.empty.subtitle\"\n        iconModifier=\"error-outline\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"availablePayeeGroupsSearchTerm$ | async\"\n        data-role=\"empty-state\"\n        title=\"No search results found\"\n        i18n-title=\"No search results found@@user-permissions-item.select-payee-groups-modal.search.empty.title\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Please try a different criteria@@user-permissions-item.select-payee-groups-modal.empty.search.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</bb-select-items-modal>\n\n<ng-template #contactNumberTooltip>\n  <span i18n=\"Number of payee Group@@user-permissions-item.number-of-payee.tooltip.text\">\n    Number of contact in Payee Group.\n  </span>\n</ng-template>\n\n<ng-template #accountNumberTooltip>\n  <span i18n=\"Number of account Group@@user-permissions-item.number-of-account.tooltip.text\">\n    Number of account in Account Group.\n  </span>\n</ng-template>\n", components: [{ type: i1$6.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i1$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: FunctionGroupTimeBoundsComponent, selector: "bb-function-group-time-bounds", inputs: ["functionGroup"] }, { type: BusinessFunctionPrivilegesNameComponent, selector: "bb-business-function-privileges-name", inputs: ["hideExecute"] }, { type: PrivilegeIndicatorListComponent, selector: "bb-privilege-indicator-list", inputs: ["businessFunction", "limitData", "userPermission", "functionGroupId"], outputs: ["emitLimitData"] }, { type: i7.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: SelfApproveModalComponent, selector: "bb-self-approve-modal", inputs: ["isOpen", "user", "currencyList", "bf", "jobRoleName", "type", "isLimitSupport", "selfApproveItemData"], outputs: ["cancel", "selfApprovalDataEmit"] }, { type: PayeeGroupDetailModalComponent, selector: "bb-payee-group-detail-modal", inputs: ["isOpen", "payeeGroupName", "targetSaId", "payeeIds"], outputs: ["cancel"] }, { type: AccountGroupDetailModalComponent, selector: "bb-account-group-detail-modal", inputs: ["isOpen", "targetSaId", "accountGroupName", "legalEntityIds", "accountIds"], outputs: ["cancel"] }, { type: UnassignDataGroupModalComponent, selector: "bb-unassign-data-group-modal", inputs: ["isOpen", "activeDataGroup", "jobRole", "accountGroupName", "payeeGroupName"], outputs: ["cancel", "confirm"] }, { type: SelectItemsModalComponent, selector: "bb-select-items-modal", inputs: ["isOpen", "title", "items", "allItems", "totalCount", "loading", "loadingMore", "error", "searchEnabled", "selectGroupsEnabled", "searchPlaceholder", "submitLabel", "modalOptions", "itemIdProperty"], outputs: ["confirm", "search", "cancel", "isOpenChange", "loadMore", "loadAllItems"] }, { type: i13.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2$1.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i2$1.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i2$1.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }, { type: i6.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: SelectItemsItemHeaderDirective, selector: "ng-template[bbSelectItemsItemHeader]" }, { type: SelectItemsItemDirective, selector: "ng-template[bbSelectItemsItem]" }, { type: SelectItemsEmptyDirective, selector: "ng-template[bbSelectItemsEmpty]" }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-permissions-item',
                    templateUrl: './user-permissions-item.component.html',
                }]
        }], propDecorators: { businessFunctionTemplate: [{
                type: ContentChild,
                args: [UserPermissionsItemBusinessFunctionDirective]
            }], businessFunctionGroupKeyTemplate: [{
                type: ContentChild,
                args: [UserPermissionsItemBusinessFunctionGroupNameDirective]
            }], user: [{
                type: Input
            }], currencyList: [{
                type: Input
            }], selfApproveDefaultBehavior: [{
                type: Input
            }], showApprovalLevel: [{
                type: Input
            }], approvalLevel: [{
                type: Input
            }], approvalLevelLoading: [{
                type: Input
            }], approvalLevelError: [{
                type: Input
            }], limitData: [{
                type: Input
            }], userLimitsPermission: [{
                type: Input
            }], emitLimitData: [{
                type: Output
            }], userPermissions: [{
                type: Input
            }], dataGroup: [{
                type: Input
            }], payeeGroups: [{
                type: Input
            }], showActions: [{
                type: Input
            }], enableSelfApproval: [{
                type: Input
            }], showPayee: [{
                type: Input
            }], showFunctionGroupType: [{
                type: Input
            }], disableSaveButton: [{
                type: Input
            }], editView: [{
                type: Input
            }], legalEntityId: [{
                type: Input
            }], editedFunctionId: [{
                type: Input
            }], removeFunctionGroup: [{
                type: Output
            }], removeDataGroup: [{
                type: Output
            }], requestObjectEmit: [{
                type: Output
            }], editedFunctionIdEmit: [{
                type: Output
            }], changesMadedEmit: [{
                type: Output
            }] } });

const uiModules$1 = [
    IconModule,
    TooltipModule,
    SelectItemsModalModule,
    ButtonModule,
    ModalModule,
    TableModule,
    HeaderModule,
    KeyboardClickModule,
    InputCheckboxModule,
    CollapsibleModule,
    EllipsisModule,
    BadgeModule,
    PaginationModule,
    SwitchModule,
    AmountModule,
    AvatarModule,
    CurrencyInputModule,
    DropdownSingleSelectModule,
];
const directives = [
    UserPermissionsItemBusinessFunctionDirective,
    UserPermissionsItemBusinessFunctionGroupNameDirective,
];
const uiComponents = [
    BusinessFunctionGroupNameComponent,
    BusinessFunctionNameComponent,
    PrivilegeIndicatorComponent,
    UserContextIconComponent,
    DiscardChangesModalComponent,
    DataGroupItemsTableComponent,
    PrivilegeIndicatorListComponent,
    BusinessFunctionPrivilegesNameComponent,
    UserPermissionsItemComponent,
    FunctionGroupTimeBoundsComponent,
    AccessgroupErrorComponent,
    AccessgroupHeaderComponent,
    AccessgroupApprovalLogComponent,
    TimeBoundsComponent,
    PayeeGroupTableRowComponent,
    PayeeItemDetailComponent,
    PayeeItemDetailCustomizableDirective,
    UnassignDataGroupModalComponent,
    UnassignDataGroupModalCustomizableDirective,
    PayeeGroupDetailModalComponent,
    PayeeGroupDetailModalCustomizableDirective,
    AccountGroupDetailModalComponent,
    AccountGroupDetailModalCustomizableDirective,
    SelfApproveModalComponent,
    SelfApproveModalCustomizableDirective,
];
const formsModules = [FormsModule, ReactiveFormsModule];
class AccessgroupUiModule {
}
/** @nocollapse */ AccessgroupUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccessgroupUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupUiModule, declarations: [BusinessFunctionGroupNameComponent,
        BusinessFunctionNameComponent,
        PrivilegeIndicatorComponent,
        UserContextIconComponent,
        DiscardChangesModalComponent,
        DataGroupItemsTableComponent,
        PrivilegeIndicatorListComponent,
        BusinessFunctionPrivilegesNameComponent,
        UserPermissionsItemComponent,
        FunctionGroupTimeBoundsComponent,
        AccessgroupErrorComponent,
        AccessgroupHeaderComponent,
        AccessgroupApprovalLogComponent,
        TimeBoundsComponent,
        PayeeGroupTableRowComponent,
        PayeeItemDetailComponent,
        PayeeItemDetailCustomizableDirective,
        UnassignDataGroupModalComponent,
        UnassignDataGroupModalCustomizableDirective,
        PayeeGroupDetailModalComponent,
        PayeeGroupDetailModalCustomizableDirective,
        AccountGroupDetailModalComponent,
        AccountGroupDetailModalCustomizableDirective,
        SelfApproveModalComponent,
        SelfApproveModalCustomizableDirective, UserPermissionsItemBusinessFunctionDirective,
        UserPermissionsItemBusinessFunctionGroupNameDirective], imports: [CommonModule, IconModule,
        TooltipModule,
        SelectItemsModalModule,
        ButtonModule,
        ModalModule,
        TableModule,
        HeaderModule,
        KeyboardClickModule,
        InputCheckboxModule,
        CollapsibleModule,
        EllipsisModule,
        BadgeModule,
        PaginationModule,
        SwitchModule,
        AmountModule,
        AvatarModule,
        CurrencyInputModule,
        DropdownSingleSelectModule, FormsModule, ReactiveFormsModule], exports: [BusinessFunctionGroupNameComponent,
        BusinessFunctionNameComponent,
        PrivilegeIndicatorComponent,
        UserContextIconComponent,
        DiscardChangesModalComponent,
        DataGroupItemsTableComponent,
        PrivilegeIndicatorListComponent,
        BusinessFunctionPrivilegesNameComponent,
        UserPermissionsItemComponent,
        FunctionGroupTimeBoundsComponent,
        AccessgroupErrorComponent,
        AccessgroupHeaderComponent,
        AccessgroupApprovalLogComponent,
        TimeBoundsComponent,
        PayeeGroupTableRowComponent,
        PayeeItemDetailComponent,
        PayeeItemDetailCustomizableDirective,
        UnassignDataGroupModalComponent,
        UnassignDataGroupModalCustomizableDirective,
        PayeeGroupDetailModalComponent,
        PayeeGroupDetailModalCustomizableDirective,
        AccountGroupDetailModalComponent,
        AccountGroupDetailModalCustomizableDirective,
        SelfApproveModalComponent,
        SelfApproveModalCustomizableDirective, IconModule,
        TooltipModule,
        SelectItemsModalModule,
        ButtonModule,
        ModalModule,
        TableModule,
        HeaderModule,
        KeyboardClickModule,
        InputCheckboxModule,
        CollapsibleModule,
        EllipsisModule,
        BadgeModule,
        PaginationModule,
        SwitchModule,
        AmountModule,
        AvatarModule,
        CurrencyInputModule,
        DropdownSingleSelectModule, UserPermissionsItemBusinessFunctionDirective,
        UserPermissionsItemBusinessFunctionGroupNameDirective, FormsModule, ReactiveFormsModule] });
/** @nocollapse */ AccessgroupUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupUiModule, imports: [[CommonModule, ...uiModules$1, ...formsModules], IconModule,
        TooltipModule,
        SelectItemsModalModule,
        ButtonModule,
        ModalModule,
        TableModule,
        HeaderModule,
        KeyboardClickModule,
        InputCheckboxModule,
        CollapsibleModule,
        EllipsisModule,
        BadgeModule,
        PaginationModule,
        SwitchModule,
        AmountModule,
        AvatarModule,
        CurrencyInputModule,
        DropdownSingleSelectModule, FormsModule, ReactiveFormsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupUiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$1, ...formsModules],
                    declarations: [...uiComponents, ...directives],
                    exports: [...uiComponents, ...uiModules$1, ...directives, ...formsModules],
                }]
        }] });

class BusinessFunctionsService {
    constructor(serviceAgreementsHttpService) {
        this.serviceAgreementsHttpService = serviceAgreementsHttpService;
        /**
         * Business function error stream
         */
        this.businessFunctionsError$ = new BehaviorSubject(undefined);
    }
    /**
     * Return business functions based on provided service agreement id
     * @param id: string - service agreement id
     */
    getBusinessFunctions(id) {
        return this.serviceAgreementsHttpService.getBusinessfunctions({ id }).pipe(tap(() => this.businessFunctionsError$.next(undefined)), catchError((error) => {
            this.businessFunctionsError$.next(error);
            return of([]);
        }));
    }
}
/** @nocollapse */ BusinessFunctionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionsService, deps: [{ token: i1$7.ServiceAgreementsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BusinessFunctionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BusinessFunctionsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$7.ServiceAgreementsHttpService }]; } });

const JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER = new InjectionToken('Job Role Detail Modal :: ENTITLEMENT_WIZARD_BUSINESS_FUNCTION_TO_GROUP_MAPPER');
const JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER = new InjectionToken('Job Role Detail Modal :: ENTITLEMENT_WIZARD_BUSINESS_FUNCTION_GROUP_ORDER');

class JobRoleDetailBusinessFunctionGroupService extends BusinessFunctionGroupService {
    constructor(businessFunctionToGroupConverter, orderedBusinessFunctionGroup) {
        super(businessFunctionToGroupConverter, orderedBusinessFunctionGroup);
    }
}
/** @nocollapse */ JobRoleDetailBusinessFunctionGroupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailBusinessFunctionGroupService, deps: [{ token: JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER }, { token: JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ JobRoleDetailBusinessFunctionGroupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailBusinessFunctionGroupService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailBusinessFunctionGroupService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER]
                }] }]; } });

class JobRoleDetailPrivilegeIndicatorListComponent {
    constructor() {
        /**
         * Flag for first row in BF group
         */
        this.first = false;
        /**
         * Flag for last row in BF group
         */
        this.last = false;
    }
}
/** @nocollapse */ JobRoleDetailPrivilegeIndicatorListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailPrivilegeIndicatorListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ JobRoleDetailPrivilegeIndicatorListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: JobRoleDetailPrivilegeIndicatorListComponent, selector: "bb-job-role-detail-privilege-indicator-list", inputs: { businessFunction: "businessFunction", first: "first", last: "last" }, ngImport: i0, template: "<ng-container bbJobRoleDetailPrivilegeIndicatorListCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbJobRoleDetailPrivilegeIndicatorListCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.businessFunction\">\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-view\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"View privilege\"\n        i18n-aria-label=\"View privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.view\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.view.applicable && !hostRef.businessFunction.privileges.view.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-view'\"\n        [applicable]=\"hostRef.businessFunction.privileges.view.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges.view.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-create\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Create privilege\"\n        i18n-aria-label=\"Create privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.create\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.create.applicable && !hostRef.businessFunction.privileges.create.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-create'\"\n        [applicable]=\"hostRef.businessFunction.privileges.create.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges.create.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-edit\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Edit privilege\"\n        i18n-aria-label=\"Edit privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.edit\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.edit.applicable && !hostRef.businessFunction.privileges.edit.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-edit'\"\n        [applicable]=\"hostRef.businessFunction.privileges?.edit?.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges?.edit?.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-delete\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Delete privilege\"\n        i18n-aria-label=\"Delete privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.delete\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.delete.applicable && !hostRef.businessFunction.privileges.delete.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-delete'\"\n        [applicable]=\"hostRef.businessFunction.privileges?.delete?.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges?.delete?.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-approve\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Approve privilege\"\n        i18n-aria-label=\"\n          Approve privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.approve\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.approve.applicable &&\n          !hostRef.businessFunction.privileges.approve.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-approve'\"\n        [applicable]=\"hostRef.businessFunction.privileges?.approve?.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges?.approve?.assigned\"></bb-privilege-indicator>\n    </span>\n\n    <span\n      class=\"col bb-ew-privilege-indicator-item bb-text-align-center\"\n      [ngClass]=\"{\n        'bb-ew-privilege-indicator-item--first': hostRef.first,\n        'bb-ew-privilege-indicator-item--last': hostRef.last\n      }\"\n      data-role=\"jr-detail-privilege-indicator-item-cancel\">\n      <span\n        class=\"sr-only\"\n        aria-label=\"Cancel privilege\"\n        i18n-aria-label=\"Cancel privilege@@job-role-detail-modal.privilege-indicator-list.label.privileges.aria.cancel\">\n      </span>\n      <bb-privilege-indicator\n        [color]=\"\n          hostRef.businessFunction.privileges.cancel.applicable && !hostRef.businessFunction.privileges.cancel.assigned\n            ? 'danger'\n            : ''\n        \"\n        [attr.data-role]=\"hostRef.businessFunction.name + '-cancel'\"\n        [applicable]=\"hostRef.businessFunction.privileges?.cancel?.applicable\"\n        [assigned]=\"hostRef.businessFunction.privileges?.cancel?.assigned\"></bb-privilege-indicator>\n    </span>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return PrivilegeIndicatorComponent; }), selector: "bb-privilege-indicator", inputs: ["applicable", "assigned", "iconClass", "color"] }], directives: [{ type: i0.forwardRef(function () { return JobRoleDetailPrivilegeIndicatorListCustomizableDirective; }), selector: "[bbJobRoleDetailPrivilegeIndicatorListCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailPrivilegeIndicatorListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-job-role-detail-privilege-indicator-list',
                    templateUrl: './job-role-detail-privilege-indicator-list.component.html',
                }]
        }], propDecorators: { businessFunction: [{
                type: Input
            }], first: [{
                type: Input
            }], last: [{
                type: Input
            }] } });
class JobRoleDetailPrivilegeIndicatorListCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ JobRoleDetailPrivilegeIndicatorListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailPrivilegeIndicatorListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ JobRoleDetailPrivilegeIndicatorListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: JobRoleDetailPrivilegeIndicatorListCustomizableDirective, selector: "[bbJobRoleDetailPrivilegeIndicatorListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailPrivilegeIndicatorListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbJobRoleDetailPrivilegeIndicatorListCustomizable]',
                }]
        }] });

class JobRoleDetailModalComponent {
    constructor(groupService, businessFunctionsService) {
        this.groupService = groupService;
        this.businessFunctionsService = businessFunctionsService;
        /**
         * Filter hook
         * @default false
         */
        this.filterHookEnabled = false;
        this._serviceAgreementId$ = new BehaviorSubject(undefined);
        /**
         * Close modal window event.
         * Propagate event when modal window should be closed.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        /**
         * Unsubscribe stream
         */
        this.destroy$ = new Subject();
        /**
         * Stream of Grouped business functions
         */
        this.groupedBusinessFunctions$ = this._serviceAgreementId$.pipe(filter((x) => !!x), switchMap((id) => this.businessFunctionsService.getBusinessFunctions(id)), map((allBusinessFunctions) => getExtendedBusinessFunctions(this.jobRoleDetail, allBusinessFunctions, this.filterHookEnabled)), map((businessFunctions) => this.groupService.convertToGroups(businessFunctions)), takeUntil(this.destroy$));
        /**
         * Stream of loading state for Grouped business functions
         */
        this.groupedBusinessFunctionsLoading$ = merge(this.groupedBusinessFunctions$.pipe(mapTo(false), catchError(() => of(false)))).pipe(startWith(true));
        /**
         * Stream of error state for Grouped business functions
         */
        this.groupedBusinessFunctionsError$ = this.businessFunctionsService.businessFunctionsError$;
    }
    /**
     * Setter for serviceAgreement Id
     */
    set serviceAgreementId(id) {
        this._serviceAgreementId$.next(id);
    }
    /**
     * OpenChange modal window event handler.
     * @param isOpen - boolean
     */
    onOpenChange(isOpen) {
        if (!isOpen) {
            this.close.emit();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
/** @nocollapse */ JobRoleDetailModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailModalComponent, deps: [{ token: JobRoleDetailBusinessFunctionGroupService }, { token: BusinessFunctionsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ JobRoleDetailModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: JobRoleDetailModalComponent, selector: "bb-job-role-detail-modal", inputs: { jobRoleDetail: "jobRoleDetail", serviceAgreementId: "serviceAgreementId", filterHookEnabled: "filterHookEnabled" }, outputs: { close: "close" }, ngImport: i0, template: "<ng-container\n  bbJobRoleDetailModalCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    groupedBusinessFunctions: groupedBusinessFunctions$ | async,\n    groupedBusinessFunctionsLoading: groupedBusinessFunctionsLoading$ | async,\n    groupedBusinessFunctionsError: groupedBusinessFunctionsError$ | async\n  }\"></ng-container>\n\n<ng-template\n  bbJobRoleDetailModalCustomizable\n  let-hostRef\n  let-groupedBusinessFunctions=\"context.groupedBusinessFunctions\"\n  let-groupedBusinessFunctionsLoading=\"context.groupedBusinessFunctionsLoading\"\n  let-groupedBusinessFunctionsError=\"context.groupedBusinessFunctionsError\">\n  <bb-modal-ui\n    data-role=\"job-role-modal\"\n    [isOpen]=\"true\"\n    [modalOptions]=\"{\n      backdrop: 'static',\n      centered: true,\n      size: 'lg'\n    }\"\n    (isOpenChange)=\"hostRef.onOpenChange($event)\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item\">\n            <bb-header-ui\n              [heading]=\"hostRef.jobRoleDetail.name\"\n              headingType=\"h2\"\n              data-role=\"job-role-modal-header-title\"></bb-header-ui>\n            <div data-role=\"job-role-modal-header-description\" class=\"bb-text-support\">\n              {{ hostRef.jobRoleDetail.description }}\n            </div>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--align-top\">\n            <button\n              (click)=\"hostRef.onOpenChange(false)\"\n              bbButton\n              class=\"bb-stack__item-sm\"\n              color=\"unstyled\"\n              aria-label=\"Close dialog\"\n              i18n-aria-label=\"Close modal button in header@@job-role-detail-modal.header.close-btn.aria-label\"\n              data-role=\"job-role-modal-header-close-btn\">\n              <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n            </button>\n          </div>\n        </div>\n      </ng-template>\n    </bb-modal-header-ui>\n\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <ng-container *ngIf=\"!groupedBusinessFunctionsLoading; else loadingTemplate\">\n          <ng-container *ngIf=\"!groupedBusinessFunctionsError; else errorTemplate\">\n            <ng-container *ngIf=\"groupedBusinessFunctions && groupedBusinessFunctions.length; else emptyStateTemplate\">\n              <div\n                *ngFor=\"let group of groupedBusinessFunctions\"\n                data-role=\"job-role-modal-grouped-bf\"\n                class=\"bb-block bb-block--xl\"\n                [attr.data-test-id]=\"group.groupKey\">\n                <bb-business-function-group-name\n                  [groupKey]=\"group.groupKey\"\n                  class=\"bb-highlight\"\n                  data-role=\"job-role-modal-grouped-bf-title\"></bb-business-function-group-name>\n\n                <hr />\n\n                <div class=\"row bb-block bb-block--md\">\n                  <div class=\"col-5\"></div>\n                  <div class=\"col\">\n                    <bb-business-function-privileges-name\n                      class=\"d-flex bb-text-support bb-subtitle\"\n                      [hideExecute]=\"true\"\n                      data-role=\"job-role-modal-business-function-privileges-name\"></bb-business-function-privileges-name>\n                  </div>\n                </div>\n\n                <div\n                  *ngFor=\"let bf of group.businessFunctions; first as isFirst; last as isLast\"\n                  class=\"row align-items-center\"\n                  data-role=\"job-role-modal-bf-item\">\n                  <bb-business-function-name\n                    [businessFunction]=\"bf\"\n                    class=\"col-5 bb-text-default\"\n                    data-role=\"job-role-modal-bf-name\"></bb-business-function-name>\n\n                  <div class=\"col\">\n                    <bb-job-role-detail-privilege-indicator-list\n                      class=\"d-flex\"\n                      [businessFunction]=\"bf\"\n                      [first]=\"isFirst\"\n                      [last]=\"isLast\"\n                      data-role=\"job-role-modal-privilege-indicator-list\"></bb-job-role-detail-privilege-indicator-list>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #loadingTemplate>\n          <div class=\"bb-state-container\" data-role=\"job-role-modal-loading-state-tmp\">\n            <bb-loading-indicator-ui></bb-loading-indicator-ui>\n          </div>\n        </ng-template>\n\n        <ng-template #errorTemplate>\n          <div class=\"bb-state-container\" data-role=\"job-role-modal-error-state-tmp\">\n            <bb-empty-state-ui\n              title=\"Failed to load business functions\"\n              i18n-title=\"Error status message title@@job-role-detail-modal.state.error.title\"\n              subtitle=\"Try to reload the page.<br> All data will be lost after reload.\"\n              i18n-subtitle=\"Error status message subtitle@@job-role-detail-modal.state.error.subtitle\"\n              iconSize=\"xxl\"\n              iconModifier=\"error-outline\"\n              iconColor=\"muted\">\n            </bb-empty-state-ui>\n          </div>\n        </ng-template>\n\n        <ng-template #emptyStateTemplate>\n          <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"job-role-modal-empty-state-tmp\">\n            <bb-empty-state-ui\n              iconSize=\"xxl\"\n              iconModifier=\"help-outline\"\n              title=\"No business function assigned to this job role.\"\n              i18n-title=\"Empty state title message@@job-role-detail-modal.state.empty.subtitle\"></bb-empty-state-ui>\n          </div>\n        </ng-template>\n      </ng-template>\n    </bb-modal-body-ui>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1$2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i1$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return BusinessFunctionGroupNameComponent; }), selector: "bb-business-function-group-name", inputs: ["groupKey"] }, { type: i0.forwardRef(function () { return BusinessFunctionPrivilegesNameComponent; }), selector: "bb-business-function-privileges-name", inputs: ["hideExecute"] }, { type: i0.forwardRef(function () { return BusinessFunctionNameComponent; }), selector: "bb-business-function-name", inputs: ["businessFunction"] }, { type: i0.forwardRef(function () { return JobRoleDetailPrivilegeIndicatorListComponent; }), selector: "bb-job-role-detail-privilege-indicator-list", inputs: ["businessFunction", "first", "last"] }, { type: i0.forwardRef(function () { return i4$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return JobRoleDetailModalCustomizableDirective; }), selector: "[bbJobRoleDetailModalCustomizable]" }, { type: i0.forwardRef(function () { return i1$4.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i1$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0.forwardRef(function () { return i2.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-job-role-detail-modal',
                    templateUrl: 'job-role-detail-modal.component.html',
                }]
        }], ctorParameters: function () { return [{ type: JobRoleDetailBusinessFunctionGroupService }, { type: BusinessFunctionsService }]; }, propDecorators: { jobRoleDetail: [{
                type: Input
            }], serviceAgreementId: [{
                type: Input
            }], filterHookEnabled: [{
                type: Input
            }], close: [{
                type: Output
            }] } });
class JobRoleDetailModalCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ JobRoleDetailModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ JobRoleDetailModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: JobRoleDetailModalCustomizableDirective, selector: "[bbJobRoleDetailModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbJobRoleDetailModalCustomizable]',
                }]
        }] });

const uiModules = [ModalModule, HeaderModule, IconModule, ButtonModule, LoadingIndicatorModule];
const services = [
    JobRoleDetailBusinessFunctionGroupService,
    BusinessFunctionsService,
    { provide: JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER, useValue: defaultGetGroupForBusinessFunction },
    { provide: JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER, useValue: defaultOrderedBusinessFunctionGroups },
];
const components = [
    JobRoleDetailModalComponent,
    JobRoleDetailModalCustomizableDirective,
    JobRoleDetailPrivilegeIndicatorListComponent,
    JobRoleDetailPrivilegeIndicatorListCustomizableDirective,
];
class JobRoleDetailModalModule {
}
/** @nocollapse */ JobRoleDetailModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ JobRoleDetailModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailModalModule, declarations: [JobRoleDetailModalComponent,
        JobRoleDetailModalCustomizableDirective,
        JobRoleDetailPrivilegeIndicatorListComponent,
        JobRoleDetailPrivilegeIndicatorListCustomizableDirective], imports: [CommonModule, ModalModule, HeaderModule, IconModule, ButtonModule, LoadingIndicatorModule, AccessgroupUiModule], exports: [JobRoleDetailModalComponent,
        JobRoleDetailModalCustomizableDirective,
        JobRoleDetailPrivilegeIndicatorListComponent,
        JobRoleDetailPrivilegeIndicatorListCustomizableDirective, ModalModule, HeaderModule, IconModule, ButtonModule, LoadingIndicatorModule] });
/** @nocollapse */ JobRoleDetailModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailModalModule, providers: [...services], imports: [[CommonModule, ...uiModules, AccessgroupUiModule], ModalModule, HeaderModule, IconModule, ButtonModule, LoadingIndicatorModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: JobRoleDetailModalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules, AccessgroupUiModule],
                    declarations: [...components],
                    providers: [...services],
                    exports: [...components, ...uiModules],
                }]
        }] });

const parseError = (error) => parseError$1('AccessgroupUI', error);

/**
 * Generated bundle index. Do not edit.
 */

export { AccessgroupApprovalLogComponent, AccessgroupErrorComponent, AccessgroupHeaderComponent, AccessgroupUiModule, AccountGroupDetailModalComponent, ApprovalStatus, BusinessFunctionGroupNameComponent, BusinessFunctionNameComponent, BusinessFunctionPrivilegesNameComponent, DataGroupItemsTableComponent, DiscardChangesModalComponent, FunctionGroupTimeBoundsComponent, JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_GROUP_ORDER, JOB_ROLE_DETAIL_MODAL_BUSINESS_FUNCTION_TO_GROUP_MAPPER, JobRoleDetailModalComponent, JobRoleDetailModalModule, JobRoleDetailPrivilegeIndicatorListComponent, PayeeGroupDetailModalComponent, PayeeGroupTableRowComponent, PayeeItemDetailComponent, PrivilegeIndicatorComponent, PrivilegeIndicatorListComponent, SelectItemsEmptyDirective, SelectItemsErrorDirective, SelectItemsItemDirective, SelectItemsItemHeaderDirective, SelectItemsLoadingDirective, SelectItemsModalComponent, SelectItemsModalModule, SelectItemsSearchDirective, SelfApproveModalComponent, TimeBoundsComponent, UnassignDataGroupModalComponent, UserContextIconComponent, UserPermissionsItemBusinessFunctionDirective, UserPermissionsItemBusinessFunctionGroupNameDirective, UserPermissionsItemComponent, parseError, AccountGroupDetailModalCustomizableDirective as ӨAccountGroupDetailModalCustomizableDirective, JobRoleDetailModalCustomizableDirective as ӨJobRoleDetailModalCustomizableDirective, JobRoleDetailPrivilegeIndicatorListCustomizableDirective as ӨJobRoleDetailPrivilegeIndicatorListCustomizableDirective, PayeeGroupDetailModalCustomizableDirective as ӨPayeeGroupDetailModalCustomizableDirective, PayeeItemDetailCustomizableDirective as ӨPayeeItemDetailCustomizableDirective, SelfApproveModalCustomizableDirective as ӨSelfApproveModalCustomizableDirective, UnassignDataGroupModalCustomizableDirective as ӨUnassignDataGroupModalCustomizableDirective };
//# sourceMappingURL=backbase-accessgroup-ui.js.map
