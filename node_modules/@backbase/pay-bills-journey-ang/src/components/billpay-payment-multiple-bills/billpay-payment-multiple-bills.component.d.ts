import { OnInit, TemplateRef, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { BillpayDiscardChangesModalService, BillpayPaymentDataService, BillpayPaymentScheduleService, EndTypes } from '@backbase/billpay-journeys-common';
import { ActivatedRoute } from '@angular/router';
import { Account, PayeeSummary, PaymentServiceSummary } from '@backbase/data-ang/billpay';
import { BillpayPayeeDataService } from '@backbase/billpay-journeys-common';
import { FrequencyKeys, PayeeSummariesByEbill } from '@backbase/billpay-journeys-common';
import { PayBillsStateService } from '../../services/pay-bills-state.service';
import { Observable } from 'rxjs';
import { PayBillsNavigationService } from '../../services/pay-bills-navigation.service';
import { PayBillsJourneyConfigService } from '../../services/pay-bills-journey-config.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
export declare class BillpayPaymentMultipleBillsComponent implements OnInit, OnDestroy {
    private readonly payeeDataService;
    private readonly fb;
    private readonly scheduleService;
    private readonly paymentStateService;
    private readonly navigationService;
    private readonly route;
    private readonly paymentDataService;
    private readonly configService;
    private readonly notificationService;
    private readonly discardModalService;
    private cdRef;
    payeeSummariesByEbillObservable$?: Observable<PayeeSummariesByEbill | undefined>;
    private payeeSummaries?;
    private accounts?;
    paymentsFormGroup: FormGroup;
    totalAmount$: Observable<number>;
    accounts$?: Observable<Account[]>;
    readonly selectedDeleteEbills$: Observable<PayeeSummary | undefined>;
    readonly selectedDeletePayee$: Observable<PayeeSummary | undefined>;
    get isErrorState(): boolean;
    private readonly destroy$;
    notificationMessageTemplate: TemplateRef<any> | string;
    notificationHeaderTemplate: TemplateRef<any> | string;
    isDeleteModalOpened: boolean;
    isDeleteEbillsModalOpen: boolean;
    isNavigateModalOpened: boolean;
    notificationType: string;
    readonly id: string;
    get isDiscardModalOpen(): boolean;
    onWindowUnload($event: BeforeUnloadEvent): void;
    constructor(payeeDataService: BillpayPayeeDataService, fb: FormBuilder, scheduleService: BillpayPaymentScheduleService, paymentStateService: PayBillsStateService, navigationService: PayBillsNavigationService, route: ActivatedRoute, paymentDataService: BillpayPaymentDataService, configService: PayBillsJourneyConfigService, notificationService: NotificationService, discardModalService: BillpayDiscardChangesModalService, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    handleClearForm(): void;
    defaultFormState(payeeSummary: PayeeSummary): {
        accountFrom: Account | undefined;
        payeeTo: PayeeSummary;
        amount: {
            amount: string;
            currency: string;
        };
        memo: string;
        overnightDeliveryAddress: {
            address1: string | undefined;
            address2: string | undefined;
            city: string | undefined;
            state: string | undefined;
            postalCode: string | undefined;
        };
        schedule: {
            frequency: FrequencyKeys;
            startDate: string;
            sendDate: string;
            repeat: number;
            endDate: string;
            endType: EndTypes;
            paymentService: (payee: PayeeSummary) => PaymentServiceSummary | undefined;
            paymentServiceDate: string;
            alertPendingCheckbox: boolean;
            alertSentCheckbox: boolean;
            alertLastPendingCheckbox: boolean;
        };
    };
    areBothListsPresent({ ebillsEnabled, ebillsNotEnabled }: PayeeSummariesByEbill): boolean;
    createForm(payeeSummaries: PayeeSummary[]): void;
    onModalResolve(isConfirmed: boolean): void;
    private createOvernightAddressFormGroup;
    private hasOvernightCheck;
    private defaultPaymentService;
    handleSubmit(): void;
    private processFormData;
    private patchFormValue;
    onDeleteEbills(resolve: boolean): void;
    onDeletePayee(resolve: boolean): void;
    onNavigateToPayments(hasNavigated: boolean): void;
    private deletionNotify;
    private openNavigateModal;
    openModal(): Observable<boolean>;
    private patchPaymentDataToForm;
    private deletePayee;
    private deleteEbills;
    static ɵfac: i0.ɵɵFactoryDeclaration<BillpayPaymentMultipleBillsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BillpayPaymentMultipleBillsComponent, "bb-billpay-payment-multiple-bills", never, {}, {}, never, never>;
}
