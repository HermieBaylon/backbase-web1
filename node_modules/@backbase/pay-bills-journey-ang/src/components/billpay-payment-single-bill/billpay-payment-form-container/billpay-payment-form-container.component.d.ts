import { OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { BillPayAccountsGetResponseBody, BillPayPayeesSummaryGetResponseBody } from '@backbase/data-ang/billpay';
import { BillpayDiscardChangesFormComponent, BillpayDiscardChangesModalService, BillpayPaymentDataService, Frequency, LoadingState, PaymentFormState } from '@backbase/billpay-journeys-common';
import { PayBillsStateService } from '../../../services/pay-bills-state.service';
import { PaymentRouteParams } from '../../../model/route.model';
import { PayBillsNavigationService } from '../../../services/pay-bills-navigation.service';
import { ActivatedRoute } from '@angular/router';
import * as i0 from "@angular/core";
export declare class BillpayPaymentFormContainerComponent implements OnInit, BillpayDiscardChangesFormComponent {
    private readonly routerService;
    private readonly paymentDataService;
    private readonly paymentStateService;
    private readonly discardModalService;
    private readonly route;
    paymentRouteObservable$: Observable<PaymentRouteParams>;
    paymentDataObservable$: Observable<(BillPayPayeesSummaryGetResponseBody & BillPayAccountsGetResponseBody) | undefined> | undefined;
    private isFormTouched;
    frequencies?: Frequency[];
    /** @internal */
    constructor(routerService: PayBillsNavigationService, paymentDataService: BillpayPaymentDataService, paymentStateService: PayBillsStateService, discardModalService: BillpayDiscardChangesModalService, route: ActivatedRoute);
    get isDiscardModalOpen(): boolean;
    accountNumberMasked?: boolean;
    paymentDetailsTitle?: string;
    paymentDefaultCurrency?: string;
    ngOnInit(): void;
    onWindowUnload($event: BeforeUnloadEvent): void;
    hasNoErrorState(data: BillPayPayeesSummaryGetResponseBody & BillPayAccountsGetResponseBody): boolean;
    onSubmittedFormData(data: PaymentFormState): void;
    get paymentState(): Observable<PaymentFormState | undefined>;
    get payeesLoadingState(): LoadingState;
    get accountsLoadingState(): LoadingState;
    openModal(): Observable<boolean>;
    onModalResolve(isConfirmed: boolean): void;
    onFormValueChanged(): void;
    onCancelForm(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BillpayPaymentFormContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BillpayPaymentFormContainerComponent, "bb-billpay-payment-form-container", never, { "frequencies": "frequencies"; "accountNumberMasked": "accountNumberMasked"; "paymentDetailsTitle": "paymentDetailsTitle"; "paymentDefaultCurrency": "paymentDefaultCurrency"; }, {}, never, never>;
}
