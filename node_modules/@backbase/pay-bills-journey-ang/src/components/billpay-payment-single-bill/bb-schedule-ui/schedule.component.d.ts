import { OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { PaymentService } from '@backbase/data-ang/billpay';
import { FrequencyKeys, EndTypes, PaymentServicesTypes, PaymentServiceRadio, BillpayPaymentScheduleService, Frequency } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
export declare class ScheduleComponent implements OnInit, OnDestroy, OnChanges {
    private readonly scheduleService;
    readonly startDateLabelId: string;
    readonly endingLabelId: string;
    readonly id: string;
    /**
     * Array of valid frequencies that can be used to schedule payments.
     */
    frequencies: Array<Frequency> | undefined;
    /**
     * Minimum occurrences for the number of occurrences input box.
     */
    minOccurs: number | undefined;
    /**
     * Maximum occurrences for the number of occurrences input box.
     */
    maxOccurs: number | undefined;
    /**
     * Schedule form to be displayed.
     */
    scheduleForm: FormGroup | undefined;
    /**
     * Minimum start date for the datepicker elements.
     */
    minDate: string | undefined;
    /**
     * Set initial payment service for the initial component state.
     */
    defaultPaymentServiceType: PaymentServicesTypes;
    /**
     * Mark the form as submitted, controls validation elements. Defaults to false.
     */
    formSubmitted: boolean;
    /**
     * Display relevant payment service radio button elements.
     * @param services array of payment service details.
     */
    paymentServices: Array<PaymentService> | undefined;
    private _paymentServiceRadios;
    private readonly destroy$;
    /** @internal */
    constructor(scheduleService: BillpayPaymentScheduleService);
    get paymentServiceRadios(): PaymentServiceRadio[] | undefined;
    get frequencyValues(): typeof FrequencyKeys;
    get endTypes(): typeof EndTypes;
    get item(): any;
    get paymentServicesTypes(): typeof PaymentServicesTypes;
    private setDefaultPaymentServiceValue;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private processEndTypeValueChanges;
    private processPaymentServiceValueChanges;
    private processFrequencyValueChanges;
    getEstimatedStartDate(serviceType: PaymentServicesTypes): string;
    getEstimatedEndDate(): number | undefined;
    getEstimatedOccurs(): number;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ScheduleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ScheduleComponent, "bb-schedule-ui", never, { "frequencies": "frequencies"; "minOccurs": "minOccurs"; "maxOccurs": "maxOccurs"; "scheduleForm": "scheduleForm"; "minDate": "minDate"; "defaultPaymentServiceType": "defaultPaymentServiceType"; "formSubmitted": "formSubmitted"; "paymentServices": "paymentServices"; }, {}, never, never>;
}
