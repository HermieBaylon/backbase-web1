import { AfterViewInit, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormControl, FormGroup, ValidationErrors } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { Account, EbillSummary, PayeeSummary } from '@backbase/data-ang/billpay';
import { AccountNumberFormat, BillpayPaymentScheduleService, PaymentType, PaymentAmount, Frequency, FrequencyKeys, PaymentFormState, PaymentServicesTypes, Schedule } from '@backbase/billpay-journeys-common';
import { ProductSelectorComponent } from '@backbase/ui-ang/product-selector';
import * as i0 from "@angular/core";
export declare class BillpayPaymentFormComponent implements OnInit, OnDestroy, AfterViewInit {
    private readonly fb;
    private readonly scheduleService;
    /**
     * Array of payee summary details.
     */
    payeeSummaries: PayeeSummary[] | undefined;
    /**
     * Array of user's accounts.
     */
    accounts: Account[] | undefined;
    /**
     * Identifier for the payee that is currently selected to be paid from.
     */
    selectedPayeeId: string;
    /**
     * Details of the payment form.
     */
    paymentState: PaymentFormState | undefined;
    /**
     * Identifier for the payment when the form is an edit payment.
     */
    paymentId: string;
    /**
     * Whether the account number should be masked. Defaults to true.
     */
    accountNumberMask: boolean;
    /**
     * The type of the payment.
     */
    paymentType?: PaymentType;
    /**
     * Activates edit payment elements. Defaults to false.
     */
    isEditPayment: boolean;
    /**
     * get the payment details title preference. default to 'Payment details'.
     */
    paymentDetailsTitle: string;
    /**
     * get the payment default currency preference. default to 'USD'.
     */
    paymentDefaultCurrency: string;
    /**
     * Frequencies for schedule
     */
    private _frequencies?;
    set frequencies(value: Frequency[] | undefined);
    get frequencies(): Array<Frequency> | undefined;
    fromAccount: ProductSelectorComponent;
    submitPayment: EventEmitter<any>;
    cancelPayment: EventEmitter<any>;
    valueChanged: EventEmitter<void>;
    /**
     * Payment form group
     */
    paymentForm: FormGroup;
    /**
     * Flag to display if payment is submitted
     */
    formSubmitted: boolean;
    ebillSummary: EbillSummary | undefined;
    defaultAmount: PaymentAmount;
    readonly minDate$: BehaviorSubject<string>;
    readonly selectedAccount$: BehaviorSubject<Account | undefined>;
    readonly selectedPayee$: BehaviorSubject<PayeeSummary | undefined>;
    private readonly destroy$;
    /**
     * Maximum occurrences for the number of occurrences input box.
     */
    readonly maxOccurs = 999;
    /**
     * Minimum occurrences for the number of occurrences input box.
     */
    readonly minOccurs = 1;
    /**
     * unique key used for ids
     */
    readonly id: string;
    /** @internal */
    constructor(fb: FormBuilder, scheduleService: BillpayPaymentScheduleService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    cancel(): void;
    get defaultPaymentServiceType(): PaymentServicesTypes;
    get accountNumberFormatConfig(): AccountNumberFormat;
    get ebillPayment(): boolean;
    get frequencyKeys(): typeof FrequencyKeys;
    get schedule(): any;
    get amountGroup(): AbstractControl | null;
    get startDateControl(): AbstractControl | null;
    get endDateControl(): AbstractControl | null;
    get scheduleLabelData(): Schedule;
    private get defaultAccountFrom();
    private get defaultPayeeTo();
    private getOvernightAddress;
    private hasOvernightCheck;
    private get defaultOvernightAddressState();
    private get defaultFormState();
    private proccessPaymentServiceValueChanges;
    private proccessFrequencyValueChanges;
    private createOvernightAddressFormGroup;
    private createScheduleFormGroup;
    createForm(): void;
    amountValidator(control: AbstractControl): ValidationErrors | null;
    isInvalidControl(control: FormControl): boolean;
    private minDateValidator;
    private notEmptyObjectValidator;
    private processFormData;
    private setValidators;
    handleSubmit(): void;
    selectAccount(account: Account | undefined): void;
    private setOvernightAddress;
    selectPayee(payee: PayeeSummary | undefined): void;
    private getDefaultPaymentService;
    private findDefaultFrequency;
    static ɵfac: i0.ɵɵFactoryDeclaration<BillpayPaymentFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BillpayPaymentFormComponent, "bb-billpay-payment-form", never, { "payeeSummaries": "payeeSummaries"; "accounts": "accounts"; "selectedPayeeId": "selectedPayeeId"; "paymentState": "paymentState"; "paymentId": "paymentId"; "accountNumberMask": "accountNumberMask"; "paymentType": "paymentType"; "isEditPayment": "isEditPayment"; "paymentDetailsTitle": "paymentDetailsTitle"; "paymentDefaultCurrency": "paymentDefaultCurrency"; "frequencies": "frequencies"; }, { "submitPayment": "submitPayment"; "cancelPayment": "cancelPayment"; "valueChanged": "valueChanged"; }, never, never>;
}
