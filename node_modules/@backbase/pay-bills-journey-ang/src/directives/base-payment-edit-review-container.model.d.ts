import { OnDestroy, OnInit, TemplateRef, ElementRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { PayBillsStateService } from '../services/pay-bills-state.service';
import { PayBillsNavigationService } from '../services/pay-bills-navigation.service';
import { BillpayDiscardChangesFormComponent, BillpayDiscardChangesModalService, BillpayPaymentParserService, PaymentFormState, PaymentReview } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
export declare abstract class BasePaymentEditReviewContainerDirective implements OnInit, OnDestroy, BillpayDiscardChangesFormComponent {
    private readonly route;
    private readonly stateService;
    private readonly discardModalService;
    private readonly paymentParserService;
    readonly routerService: PayBillsNavigationService;
    payment?: PaymentFormState;
    paymentReview?: PaymentReview;
    readonly id$: Observable<string>;
    paymentError: boolean;
    hasDateError: boolean;
    protected readonly paymentConfirm$: BehaviorSubject<PaymentFormState | undefined>;
    protected readonly destroy$: Subject<void>;
    dismissTimeoutValue: number | undefined;
    accountNumberMasked?: boolean;
    notificationMessageTemplate: TemplateRef<any> | string;
    notificationHeaderTemplate: TemplateRef<any> | string;
    failAlert: ElementRef;
    onWindowUnload($event: BeforeUnloadEvent): void;
    abstract navigateToForm(id: string): void;
    protected abstract onPaymentConfirm(payment: PaymentFormState, id: string): void;
    /** @internal */
    protected constructor(route: ActivatedRoute, stateService: PayBillsStateService, discardModalService: BillpayDiscardChangesModalService, paymentParserService: BillpayPaymentParserService, routerService: PayBillsNavigationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    get isDiscardModalOpen(): boolean;
    confirmPayment(payment?: PaymentFormState): void;
    openModal(): Observable<boolean>;
    onModalResolve(isConfirmed: boolean): void;
    cancel(): void;
    protected get dismissTimeout(): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<BasePaymentEditReviewContainerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BasePaymentEditReviewContainerDirective, never, never, { "dismissTimeoutValue": "dismissTimeoutValue"; "accountNumberMasked": "accountNumberMasked"; }, {}, never>;
}
