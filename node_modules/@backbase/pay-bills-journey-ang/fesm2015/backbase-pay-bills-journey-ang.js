import * as i0 from '@angular/core';
import { Injectable, Optional, Component, InjectionToken, Inject, Input, EventEmitter, ViewChild, Output, HostListener, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i1$4 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1$2 from '@angular/forms';
import { Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import * as i2$3 from '@ng-bootstrap/ng-bootstrap';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import * as i1$1 from '@backbase/billpay-journeys-common';
import { ONE_OFF_PAYMENT, RECURRING_PAYMENT, accountNumberFullFormat, FrequencyKeys, BillpayUtilityService, PaymentServicesTypes, EndTypes, formControlOptions, frequencies, accountNumberMaskedFormat, LoadingState, BillpayDiscardChangesModalService, BillpayPayeeSummaryItemBaseComponent, BillpayBaseDeactivateGuardService, BillpayJourneysCommonModule, BillpayEnrolmentGuard, BillpayPaymentDataService, BillpayPayeeDataService } from '@backbase/billpay-journeys-common';
import { combineLatest, Subject, BehaviorSubject, of, forkJoin } from 'rxjs';
import { map, pluck, takeUntil, take, filter, switchMap, tap, shareReplay, catchError, first, distinctUntilChanged, skip, mapTo } from 'rxjs/operators';
import '@angular/localize/init';
import * as i3 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i4$2 from '@backbase/ui-ang/fieldset';
import { FieldsetModule } from '@backbase/ui-ang/fieldset';
import * as i5$1 from '@backbase/ui-ang/product-selector';
import { ProductSelectorModule } from '@backbase/ui-ang/product-selector';
import * as i6$1 from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i5 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i8$2 from '@backbase/ui-ang/product-item-current-account';
import { ProductItemCurrentAccountModule } from '@backbase/ui-ang/product-item-current-account';
import * as i7 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i2 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import * as i3$1 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i10 from '@backbase/ui-ang/amount-input';
import { AmountInputModule } from '@backbase/ui-ang/amount-input';
import * as i8 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i11 from '@backbase/ui-ang/textarea';
import { TextareaModule } from '@backbase/ui-ang/textarea';
import * as i12 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i3$2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2$1 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i4$1 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i6 from '@backbase/ui-ang/input-number';
import { InputNumberModule } from '@backbase/ui-ang/input-number';
import * as i8$1 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i4$3 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i6$2 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i7$1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i1$3 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i5$2 from '@backbase/ui-ang/notification';
import * as i3$3 from '@backbase/ui-ang/media-query-lib';
import * as i7$2 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i2$2 from '@backbase/ui-ang/ellipsis';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';
import * as i6$3 from '@backbase/ui-ang/payment-card-number-pipe';
import * as i17 from '@backbase/ui-ang/keyboard-click-directive';
import * as i6$4 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import { __awaiter } from 'tslib';
import * as i9 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import { CharCounterModule } from '@backbase/ui-ang/char-counter';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';

class CommunicationService {
}

class PayBillsNavigationService {
    constructor(router, route, communicationService) {
        this.router = router;
        this.route = route;
        this.communicationService = communicationService;
        this.routeParams = combineLatest([
            this.getRouteParam(this.route, 'payee'),
            this.getRouteParam(this.route, 'id'),
        ]).pipe(map(([payee, id]) => {
            const pageType = !!id ? 'edit' : 'new';
            const paymentType = this.extractPaymentTypeFromId(id, payee);
            const paymentId = (id && id.substring(2)) || '';
            const payeeId = (payee && payee.substring(2)) || '';
            return Object.assign(Object.assign({ pageType,
                paymentType }, (!!paymentId && { paymentId })), (!!payeeId && { payeeId }));
        }));
        this.defaultRelative = { relativeTo: this.route };
    }
    navigateToEditRecurringForm(id, extras) {
        this.router.navigate(['recurring', 'edit', id], extras || this.defaultRelative);
    }
    navigateToEditRecurringReview(id, extras) {
        this.router.navigate(['recurring', 'edit', id, 'review'], extras || this.defaultRelative);
    }
    navigateToEditOneOffForm(id, extras) {
        this.router.navigate(['one-off', 'edit', id], extras || this.defaultRelative);
    }
    navigateToEditOneOffReview(id, extras) {
        this.router.navigate(['one-off', 'edit', id, 'review'], extras || this.defaultRelative);
    }
    navigateToForm(extras) {
        this.router.navigate(['form'], extras || this.defaultRelative);
    }
    navigateToReview(extras) {
        this.router.navigate(['review'], extras || this.defaultRelative);
    }
    navigateToPayeeList() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayeesList();
    }
    navigateToPayments() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPaymentsList();
    }
    navigateToAddPayee() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToAddPayee();
    }
    navigateToMainAppPage() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToMainAppPage();
    }
    navigateToEditManualPayee(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToEditManualPayee(id);
    }
    navigateToEditElectronicPayee(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToEditElectronicPayee(id);
    }
    navigateToPayeeSummary(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayeeSummary(id);
    }
    navigateToPayverisEbillEnrol(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayverisEbillEnrol(id);
    }
    extractPaymentTypeFromId(paymentId, payeeId) {
        if (!paymentId && !payeeId) {
            return ONE_OFF_PAYMENT;
        }
        const idToUse = (paymentId ? paymentId : payeeId);
        return idToUse.substring(0, 1) === 'r' ? RECURRING_PAYMENT : ONE_OFF_PAYMENT;
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // Ensure that level that has actual value keeps it from being cleared.
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
PayBillsNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PayBillsNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });

class PayBillsJourneyComponent {
    constructor(navigationService, route, billpayNotificationRoutingService) {
        this.navigationService = navigationService;
        this.route = route;
        this.billpayNotificationRoutingService = billpayNotificationRoutingService;
        this.destroy$ = new Subject();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnInit() {
        this.setupNavigationSubscriptions();
    }
    setupNavigationSubscriptions() {
        this.billpayNotificationRoutingService.upcommingPaymentsSubject$
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.navigationService.navigateToPayments());
        this.route.paramMap.pipe(takeUntil(this.destroy$)).subscribe((param) => {
            if (param.has('editRecurringPayment')) {
                this.navigationService.navigateToEditRecurringForm(param.get('editRecurringPayment'));
            }
            else if (param.has('editOneOffPayment')) {
                this.navigationService.navigateToEditOneOffForm(param.get('editOneOffPayment'));
            }
        });
        this.billpayNotificationRoutingService.managePayeesSubject$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.navigationService.navigateToAddPayee();
        });
    }
}
PayBillsJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyComponent, deps: [{ token: PayBillsNavigationService }, { token: i1.ActivatedRoute }, { token: i1$1.BillpayNotificationRoutingService }], target: i0.ɵɵFactoryTarget.Component });
PayBillsJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PayBillsJourneyComponent, selector: "bb-pay-bills-journey", providers: [PayBillsNavigationService], ngImport: i0, template: "<router-outlet></router-outlet>\n", directives: [{ type: i1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pay-bills-journey',
                    templateUrl: './pay-bills-journey.component.html',
                    providers: [PayBillsNavigationService],
                }]
        }], ctorParameters: function () { return [{ type: PayBillsNavigationService }, { type: i1.ActivatedRoute }, { type: i1$1.BillpayNotificationRoutingService }]; } });

const PayBillsJourneyConfigurationToken = new InjectionToken('PayBillsJourneyConfigurationToken injection token');
const configDefaults = {
    notificationDismissTime: 5000,
    accountNumberMasked: false,
    paymentDetailsTitle: $localize `:@@pay-bills-journey-form-payment-details-title:Payment details`,
    paymentDefaultCurrency: 'USD',
    multipleBillsMode: false,
    productNumberFormat: accountNumberFullFormat,
    frequencies: [
        { name: $localize `:@@billpay-common.frequency-label.once:Once`, value: FrequencyKeys.Once },
        { name: $localize `:@@billpay-common.frequency-label.weekly:Weekly`, value: FrequencyKeys.Weekly },
        {
            name: $localize `:@@billpay-common.frequency-label.every-two-week:Every two weeks`,
            value: FrequencyKeys.Biweekly,
        },
        { name: $localize `:@@billpay-common.frequency-label.monthly:Monthly`, value: FrequencyKeys.Monthly },
    ],
};
class PayBillsJourneyConfigService {
    constructor(config) {
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
    }
    get defaults() {
        return configDefaults;
    }
    get notificationDismissTime() {
        return this._config.notificationDismissTime;
    }
    get accountNumberMasked() {
        return this._config.accountNumberMasked;
    }
    get paymentDetailsTitle() {
        return this._config.paymentDetailsTitle;
    }
    get paymentDefaultCurrency() {
        return this._config.paymentDefaultCurrency;
    }
    get multipleBillsMode() {
        return this._config.multipleBillsMode;
    }
    get productNumberFormat() {
        return this._config.productNumberFormat;
    }
    get frequencies() {
        return this._config.frequencies;
    }
}
PayBillsJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyConfigService, deps: [{ token: PayBillsJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PayBillsJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PayBillsJourneyConfigurationToken]
                }] }]; } });

class BillPayEnrolmentViewComponent {
    constructor(config) {
        this.config = config;
    }
}
BillPayEnrolmentViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentViewComponent, deps: [{ token: PayBillsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
BillPayEnrolmentViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillPayEnrolmentViewComponent, selector: "bb-billpay-enrolment-view", ngImport: i0, template: `
    <div class="bb-block bb-block--lg">
      <bb-header-ui
        headingType="h1"
        heading="Enrol in bill pay"
        i18n-heading="@@billpay-manage-payee-journey.enrolment-heading"
      ></bb-header-ui>
    </div>
    <bb-billpay-enrolment [notificationDismissTime]="config?.notificationDismissTime"></bb-billpay-enrolment>
  `, isInline: true, components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$1.BillpayEnrolmentComponent, selector: "bb-billpay-enrolment", inputs: ["notificationDismissTime"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-enrolment-view',
                    template: `
    <div class="bb-block bb-block--lg">
      <bb-header-ui
        headingType="h1"
        heading="Enrol in bill pay"
        i18n-heading="@@billpay-manage-payee-journey.enrolment-heading"
      ></bb-header-ui>
    </div>
    <bb-billpay-enrolment [notificationDismissTime]="config?.notificationDismissTime"></bb-billpay-enrolment>
  `,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }]; } });

class PayBillsStateService {
    constructor() {
        this.paymentStateSource = new BehaviorSubject(undefined);
        this.paymentState = this.paymentStateSource.asObservable();
        this.isFormProcessingValue = false;
    }
    set isFormProcessing(value) {
        this.isFormProcessingValue = value;
    }
    get isFormProcessing() {
        return this.isFormProcessingValue;
    }
    updatePaymentState(state) {
        this.paymentStateSource.next(state);
    }
    reset() {
        this.isFormProcessing = false;
        this.updatePaymentState();
    }
}
PayBillsStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
PayBillsStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsStateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsStateService, decorators: [{
            type: Injectable
        }] });

class BillpayEbillPaymentUIComponent {
    constructor() {
        /**
         * Mark the form as submitted, controls validation elements. Defaults to false.
         */
        this.isSubmitted = false;
        /**
         * get the payment default currency preference. default to 'USD'.
         */
        this.eBillDefaultCurrency = 'USD';
        /**
         * unique key used for ids
         */
        this.id = BillpayUtilityService.generateId();
    }
    ngOnInit() {
        this.customValue = {
            amount: '',
            currency: this.eBillDefaultCurrency,
            type: undefined,
        };
    }
    setAmount(type) {
        this.customValue.type = type;
        if (type === 'Custom') {
            this.setCustomAmount(this.customValue.amount);
        }
        else {
            const currency = this.getAmount(type);
            if (currency) {
                this.setValue({
                    amount: currency.amount,
                    currency: currency.currencyCode,
                    type: type,
                });
            }
        }
    }
    setCustomAmount(ev) {
        this.customValue.amount = ev;
        this.setValue(Object.assign(Object.assign({}, this.customValue), { type: 'Custom' }));
    }
    get showBalance() {
        return !!(this.latestBill && this.isDifferentAndNonZero(this.latestBill.outstandingBalance, this.latestBill.amount));
    }
    get showMinumum() {
        return !!(this.latestBill && this.isDifferentAndNonZero(this.latestBill.minAmountDue, this.latestBill.amount));
    }
    isDifferentAndNonZero(otherEbillAmount, ebillAmount) {
        return !!(otherEbillAmount &&
            ebillAmount &&
            otherEbillAmount.amount !== ebillAmount.amount &&
            0 !== +otherEbillAmount.amount);
    }
    setValue(newValue) {
        if (this.control) {
            this.control.setValue(newValue);
        }
    }
    getAmount(value) {
        switch (value) {
            case 'Minimum':
                return this.latestBill && this.latestBill.minAmountDue;
            case 'Balance':
                return this.latestBill && this.latestBill.outstandingBalance;
            case 'Due':
            default:
                return this.latestBill && this.latestBill.amount;
        }
    }
}
BillpayEbillPaymentUIComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayEbillPaymentUIComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayEbillPaymentUIComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayEbillPaymentUIComponent, selector: "bb-billpay-ebill-payment", inputs: { latestBill: "latestBill", control: "control", isSubmitted: "isSubmitted", eBillDefaultCurrency: "eBillDefaultCurrency" }, ngImport: i0, template: "<bb-alert-ui modifier=\"info\" title=\"\">\n  <span\n    data-role=\"ebill-info-alert\"\n    class=\"bb-text-bold\"\n    i18n=\"eBill payment alert|Alert for eBill information@@billpay.bb-payment-ebill.alert\"\n  >\n    eBill due on {{ latestBill?.paymentDate | bbDate: 'fullDate' }}.\n  </span>\n</bb-alert-ui>\n\n<bb-input-radio-group-ui\n  data-role=\"ebill-payment-group\"\n  [required]=\"true\"\n  [ngModel]=\"control?.value?.type\"\n  (ngModelChange)=\"setAmount($event)\"\n  [preselect]=\"false\"\n>\n  <bb-input-radio-ui value=\"Due\" [labelTemplate]=\"ebillPaymentDueLabelTemplate\">\n    <ng-template #ebillPaymentDueLabelTemplate>\n      <div class=\"pl-2 bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-stack__item--fill\" data-role=\"ebill-due-message\">\n          <div\n            i18n=\"\n              eBill due amount radio label|Label for the radio button for selecting the eBill due\n              amount@@bb-billpay-payment-ebill.radio.due-amount\"\n          >\n            eBill amount due\n          </div>\n          <span\n            class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n            i18n=\"\n              eBill due amount radio description|Description for the radio button for selecting the eBill due\n              amount@@bb-billpay-payment-ebill.radio.due-amount.description\"\n          >\n            Amount due on the latest billing cycle\n          </span>\n        </div>\n        <div class=\"bb-stack__item bb-stack__break--sm-down\">\n          <bb-amount-ui\n            data-role=\"ebill-due-message-amount\"\n            [amount]=\"latestBill?.amount?.amount\"\n            [currency]=\"latestBill?.amount?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </bb-input-radio-ui>\n\n  <bb-input-radio-ui value=\"Balance\" *ngIf=\"showBalance\" [labelTemplate]=\"ebillPaymentBalanceLabelTemplate\">\n    <ng-template #ebillPaymentBalanceLabelTemplate>\n      <div class=\"pl-2 bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-stack__item--fill\" data-role=\"ebill-balance-message\">\n          <div\n            i18n=\"\n              eBill outstanding balance amount radio label|Label for the radio button for selecting the eBill\n              outstanding balance amount@@bb-billpay-payment-ebill.radio.outstanding-balance-amount\"\n          >\n            Total payee balance\n          </div>\n          <span\n            class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n            i18n=\"\n              eBill total amount radio description|Description for the radio button for selecting the eBill total\n              amount@@bb-billpay-payment-ebill.radio.total-amount.description\"\n          >\n            Total amount owed\n          </span>\n        </div>\n        <div class=\"bb-stack__item bb-stack__break--sm-down\">\n          <bb-amount-ui\n            data-role=\"ebill-balance-message-amount\"\n            [amount]=\"latestBill?.outstandingBalance?.amount\"\n            [currency]=\"latestBill?.outstandingBalance?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </bb-input-radio-ui>\n\n  <bb-input-radio-ui value=\"Minimum\" *ngIf=\"showMinumum\" [labelTemplate]=\"ebillPaymentMinimumLabelTemplate\">\n    <ng-template #ebillPaymentMinimumLabelTemplate>\n      <div class=\"pl-2 bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-stack__item--fill\" data-role=\"ebill-minimum-message\">\n          <div\n            i18n=\"\n              eBill minimum amount radio label|Label for the radio button for selecting the eBill minimum\n              amount@@bb-billpay-payment-ebill.radio.minimum-amount\"\n          >\n            eBill minimum payment\n          </div>\n          <span\n            class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n            i18n=\"\n              eBill minimum amount radio description|Description for the radio button for selecting the eBill minimum\n              amount@@bb-billpay-payment-ebill.radio.minimum-amount.description\"\n          >\n            5% of the total balance\n          </span>\n        </div>\n        <div class=\"bb-stack__item bb-stack__break--sm-down\">\n          <bb-amount-ui\n            data-role=\"ebill-minimum-message-amount\"\n            [amount]=\"latestBill?.minAmountDue?.amount\"\n            [currency]=\"latestBill?.minAmountDue?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </bb-input-radio-ui>\n\n  <bb-input-radio-ui value=\"Custom\" [labelTemplate]=\"ebillPaymentOtherLabelTemplate\">\n    <ng-template #ebillPaymentOtherLabelTemplate>\n      <div class=\"pl-2 bb-form-field bb-form-field--md\">\n        <div\n          data-role=\"ebill-custom-message\"\n          i18n=\"\n            eBill other amount radio label|Label for the radio button for selecting an eBill other\n            amount@@bb-billpay-payment-ebill.radio.other-amount\"\n        >\n          Other amount\n        </div>\n        <span\n          class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n          i18n=\"\n            eBill other amount radio description|Description for the radio button for selecting the eBill other\n            amount@@bb-billpay-payment-ebill.radio.other-amount.description\"\n        >\n          Enter amount manually\n        </span>\n        <ng-container *ngIf=\"control?.value?.type === 'Custom'\">\n          <div class=\"position-relative\" [class.was-validated]=\"touched && !customValue?.amount\">\n            <bb-amount-input-ui\n              data-role=\"ebill-amount-input\"\n              [ngModel]=\"control?.value?.amount\"\n              (ngModelChange)=\"setCustomAmount($event)\"\n              (focusout)=\"touched = true\"\n              [autoDecimal]=\"true\"\n              wrapperClasses=\"bb-amount-input__field--large\"\n              [currency]=\"latestBill?.amount?.currencyCode\"\n              [required]=\"true\"\n              [aria-describedby]=\"'compact-amount-error-message' + id\"\n              [placeholder]=\"'0.00'\"\n            ></bb-amount-input-ui>\n          </div>\n          <bb-input-validation-message-ui\n            id=\"{{ 'compact-amount-error-message' + id }}\"\n            [showErrors]=\"touched && !customValue?.amount\"\n          >\n            <span> Field is required. </span>\n          </bb-input-validation-message-ui>\n        </ng-container>\n      </div>\n    </ng-template>\n  </bb-input-radio-ui>\n</bb-input-radio-group-ui>\n\n<bb-input-validation-message-ui role=\"alert\" [showErrors]=\"isSubmitted && control?.invalid\">\n  <p\n    *ngIf=\"!control?.errors?.amountInvalid\"\n    i18n=\"Payment amount cannot be zero|Error zero amount@@bb-billpay-payment-form.error.amount\"\n    data-role=\"invalid-amount\"\n  >\n    Payment amount cannot be zero.\n  </p>\n</bb-input-validation-message-ui>\n", components: [{ type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i10.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "bbDate": i8.BbDatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayEbillPaymentUIComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-ebill-payment',
                    templateUrl: './billpay-ebill-payment-ui.component.html',
                }]
        }], propDecorators: { latestBill: [{
                type: Input
            }], control: [{
                type: Input
            }], isSubmitted: [{
                type: Input
            }], eBillDefaultCurrency: [{
                type: Input
            }] } });

class ScheduleLabelComponent {
    constructor() {
        /**
         * Selects elements appropriate to a one-off payment. Defaults to true.
         */
        this.isSingleTransfer = true;
        /**
         * Minimum number of occurrences for recurring payments.
         */
        this.minOccurrences = 1;
    }
    get frequencyLabel() {
        var _a;
        const frequency = (_a = this.frequencies) === null || _a === void 0 ? void 0 : _a.find(freq => { var _a; return ((_a = this.item) === null || _a === void 0 ? void 0 : _a.frequency) === freq.value; });
        return $localize `:@@billpay-payment.form.schedule-frequency-label:${(frequency === null || frequency === void 0 ? void 0 : frequency.name) || ''}`;
    }
    get startDate() {
        var _a, _b, _c;
        const date = String((((_a = this.item) === null || _a === void 0 ? void 0 : _a.frequency) === FrequencyKeys.Once &&
            ((_b = this.item.paymentService) === null || _b === void 0 ? void 0 : _b.index) !== PaymentServicesTypes.Other &&
            this.item.paymentServiceDate) ||
            ((_c = this.item) === null || _c === void 0 ? void 0 : _c.startDate));
        return (this.item && date) || undefined;
    }
    get endDate() {
        return this.item && this.item.endDate && Date.parse(this.item.endDate) ? new Date(this.item.endDate) : undefined;
    }
    isToday() {
        if (this.item === undefined) {
            throw new Error('`item` input is required in `bb-schedule-label-ui` component');
        }
        const today = new Date().setHours(0, 0, 0, 0);
        const startDate = new Date(this.item.startDate);
        return startDate.setHours(0, 0, 0, 0) === today;
    }
    hasEnd() {
        return !!this.item && (this.item.endDate !== undefined || this.item.repeat !== undefined);
    }
    hasLimit() {
        return this.hasEnd() && !this.isSingleTransfer;
    }
}
ScheduleLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ScheduleLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ScheduleLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: { item: "item", isSingleTransfer: "isSingleTransfer", minOccurrences: "minOccurrences", frequencies: "frequencies" }, ngImport: i0, template: "<span>\n  <ng-container *ngIf=\"frequencyLabel; else defaultLabels\">{{ frequencyLabel }},</ng-container>\n  <!-- Remove default labels after journey migration phase 2 -->\n  <ng-template #defaultLabels>\n    <span\n      i18n=\"\n        Schedule frequency title list|List of titles for available schedule\n        frequencies@@billpay.bb-schedule-label-ui.frequency.list\"\n    >\n      {item?.frequency, select, ONCE {Once} WEEKLY {Weekly} EVERY_2_WEEKS {Every two weeks} MONTHLY {Monthly}\n      EVERY_4_WEEKS {Every for weeks} TWICE_A_MONTH {Semi monthly} EVERY_2_MONTHS {Every two months} EVERY_3_MONTHS {\n      Every three months} EVERY_6_MONTHS {Every six months} ANNUALLY {Annually}},\n    </span>\n  </ng-template>\n</span>\n<ng-container *ngIf=\"isSingleTransfer\">\n  <span\n    i18n=\"\n      On|Word to be used before a date to indicate that the payment will be executed on that\n      date@@billpay.bb-schedule-label-ui.label.on\"\n    >&nbsp;on</span\n  >\n</ng-container>\n\n<ng-container *ngIf=\"!isSingleTransfer\">\n  <span\n    i18n=\"\n      Schedule start|Word to be used before a date to indicate that this date is a starting date of the\n      schedule@@billpay.bb-schedule-label-ui.label.start\"\n    >&nbsp;starting</span\n  >\n</ng-container>\n\n<span>&nbsp;{{ startDate | date: 'mediumDate' }}</span>\n\n<ng-container *ngIf=\"hasLimit() && item?.endDate\"\n  >&sbquo;\n  <span\n    i18n=\"\n      Schedule end|Word to be used before a date to indicate that this date is an end date of the\n      schedule@@billpay.bb-schedule-label-ui.label.end\"\n    >Until&nbsp;{{ endDate | date: 'mediumDate' }}</span\n  >\n</ng-container>\n\n<ng-container *ngIf=\"hasLimit() && (item?.repeat || 0) >= minOccurrences\"\n  >&sbquo;\n  <span>{ item?.repeat, plural, =1 { {{ item?.repeat }} time} other { {{ item?.repeat }} times}}</span>\n</ng-container>\n", directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i4.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ScheduleLabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-schedule-label-ui',
                    templateUrl: './schedule-label.component.html',
                }]
        }], propDecorators: { item: [{
                type: Input
            }], isSingleTransfer: [{
                type: Input
            }], minOccurrences: [{
                type: Input
            }], frequencies: [{
                type: Input
            }] } });

class ScheduleComponent {
    /** @internal */
    constructor(scheduleService) {
        this.scheduleService = scheduleService;
        this.startDateLabelId = BillpayUtilityService.generateId();
        this.endingLabelId = BillpayUtilityService.generateId();
        this.id = BillpayUtilityService.generateId();
        /**
         * Set initial payment service for the initial component state.
         */
        this.defaultPaymentServiceType = PaymentServicesTypes.Regular;
        /**
         * Mark the form as submitted, controls validation elements. Defaults to false.
         */
        this.formSubmitted = false;
        this.destroy$ = new Subject();
    }
    get paymentServiceRadios() {
        return this._paymentServiceRadios;
    }
    get frequencyValues() {
        return FrequencyKeys;
    }
    get endTypes() {
        return EndTypes;
    }
    get item() {
        return this.scheduleForm && this.scheduleForm.getRawValue();
    }
    get paymentServicesTypes() {
        return PaymentServicesTypes;
    }
    setDefaultPaymentServiceValue(index, options) {
        // set default value from initial state form for mapped `paymentServiceRadios`
        const paymentServiceControl = this.scheduleForm && this.scheduleForm.controls['paymentService'];
        if (paymentServiceControl) {
            paymentServiceControl.setValue(this.paymentServiceRadios &&
                this.paymentServiceRadios.find(item => !!(item.service && item.index === (index || paymentServiceControl.value.index))), options);
        }
    }
    ngOnInit() {
        if (this.scheduleForm === undefined) {
            throw new Error('`scheduleForm` input is required in `bb-schedule-ui` component');
        }
        if (this.frequencies === undefined) {
            throw new Error('`frequencies` input is required in `bb-schedule-ui` component');
        }
        this.processEndTypeValueChanges();
        this.processPaymentServiceValueChanges();
        this.processFrequencyValueChanges();
    }
    ngOnChanges(changes) {
        if (changes.paymentServices) {
            const isFirstChange = !this.paymentServiceRadios;
            const service = changes.paymentServices.currentValue;
            this._paymentServiceRadios =
                service &&
                    service.map(item => ({
                        index: item.paymentServiceType || '',
                        service: item,
                    }));
            if (this._paymentServiceRadios) {
                this._paymentServiceRadios.push({
                    index: PaymentServicesTypes.Other,
                    service: service && service.find(item => item.paymentServiceType === PaymentServicesTypes.Regular),
                });
            }
            this.setDefaultPaymentServiceValue(this.defaultPaymentServiceType, { emitEvent: !isFirstChange });
        }
    }
    processEndTypeValueChanges() {
        if (!this.scheduleForm)
            return;
        const endTypeControl = this.scheduleForm.controls['endType'];
        const endDateControl = this.scheduleForm.controls['endDate'];
        const repeatControl = this.scheduleForm.controls['repeat'];
        if (endTypeControl && endDateControl && repeatControl) {
            endTypeControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                switch (value) {
                    case EndTypes.After: {
                        repeatControl.enable(formControlOptions);
                        endDateControl.disable(formControlOptions);
                        break;
                    }
                    case EndTypes.On: {
                        endDateControl.enable(formControlOptions);
                        repeatControl.disable(formControlOptions);
                        break;
                    }
                    case EndTypes.Never:
                    default: {
                        endDateControl.disable(formControlOptions);
                        repeatControl.disable(formControlOptions);
                        break;
                    }
                }
            });
        }
    }
    processPaymentServiceValueChanges() {
        if (!this.scheduleForm)
            return;
        const startDateControl = this.scheduleForm.controls['startDate'];
        const paymentServiceControl = this.scheduleForm.controls['paymentService'];
        const paymentServiceDateControl = this.scheduleForm.controls['paymentServiceDate'];
        const frequencyControl = this.scheduleForm.controls['frequency'];
        const disableStartDate = () => frequencyControl.value === FrequencyKeys.Once && startDateControl.disable(formControlOptions);
        if (startDateControl && paymentServiceControl && paymentServiceDateControl && frequencyControl) {
            paymentServiceControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (value.index === PaymentServicesTypes.Other) {
                    startDateControl.enable(formControlOptions);
                    paymentServiceDateControl.disable(formControlOptions);
                }
                else {
                    paymentServiceDateControl.enable(formControlOptions);
                    disableStartDate();
                    paymentServiceDateControl.setValue(this.getEstimatedStartDate(value.service.paymentServiceType));
                }
            });
        }
    }
    processFrequencyValueChanges() {
        if (!this.scheduleForm)
            return;
        const endTypeControl = this.scheduleForm.controls['endType'];
        const endDateControl = this.scheduleForm.controls['endDate'];
        const repeatControl = this.scheduleForm.controls['repeat'];
        const startDateControl = this.scheduleForm.controls['startDate'];
        const paymentServiceControl = this.scheduleForm.controls['paymentService'];
        const frequencyControl = this.scheduleForm.controls['frequency'];
        const paymentServiceDateControl = this.scheduleForm.controls['paymentServiceDate'];
        if (startDateControl && frequencyControl && paymentServiceControl && endTypeControl && endDateControl) {
            frequencyControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (value === FrequencyKeys.Once) {
                    paymentServiceControl.enable(formControlOptions);
                    paymentServiceControl.updateValueAndValidity();
                    paymentServiceDateControl.enable(formControlOptions);
                    endDateControl.disable(formControlOptions);
                    endTypeControl.disable(formControlOptions);
                    repeatControl.disable(formControlOptions);
                }
                else {
                    paymentServiceControl.disable(formControlOptions);
                    paymentServiceDateControl.disable(formControlOptions);
                    startDateControl.enable(formControlOptions);
                    endDateControl.enable(formControlOptions);
                    repeatControl.enable(formControlOptions);
                    endTypeControl.enable();
                }
            });
        }
    }
    getEstimatedStartDate(serviceType) {
        const services = this.paymentServiceRadios && this.paymentServiceRadios.map(item => item.service);
        return this.scheduleService.estimatedPaymentServiceDate(services, serviceType);
    }
    getEstimatedEndDate() {
        const startDate = this.scheduleForm && this.scheduleForm.controls['startDate'].value;
        const occurrences = this.scheduleForm && this.scheduleForm.controls['repeat'].value;
        const freq = this.scheduleForm && this.scheduleForm.controls['frequency'].value;
        return startDate && this.scheduleService.estimatedEndDate(startDate, freq, occurrences);
    }
    getEstimatedOccurs() {
        const startDate = this.scheduleForm && this.scheduleForm.controls['startDate'].value;
        const endDate = this.scheduleForm && this.scheduleForm.controls['endDate'].value;
        const freq = this.scheduleForm && this.scheduleForm.controls['frequency'].value;
        return (startDate && this.scheduleService.estimatedOccurences(startDate, endDate, freq)) || 0;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ScheduleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ScheduleComponent, deps: [{ token: i1$1.BillpayPaymentScheduleService }], target: i0.ɵɵFactoryTarget.Component });
ScheduleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ScheduleComponent, selector: "bb-schedule-ui", inputs: { frequencies: "frequencies", minOccurs: "minOccurs", maxOccurs: "maxOccurs", scheduleForm: "scheduleForm", minDate: "minDate", defaultPaymentServiceType: "defaultPaymentServiceType", formSubmitted: "formSubmitted", paymentServices: "paymentServices" }, usesOnChanges: true, ngImport: i0, template: "<div [formGroup]=\"scheduleForm\" class=\"bb-block bb-block--md\">\n  <div class=\"bb-form-field bb-form-field--md bb-block bb-block--md\" *ngIf=\"frequencies?.length\">\n    <label\n      data-role=\"frequency-label\"\n      class=\"form-label\"\n      i18n=\"\n        Schedule frequency label|Label for a frequency dropdown in the component@@billpay.bb-schedule-ui.label.frequency\"\n    >\n      Frequency\n    </label>\n    <bb-dropdown-single-select-ui data-role=\"frequency-dropdown\" aria-label=\"frequency\" formControlName=\"frequency\">\n      <bb-dropdown-single-select-option-ui\n        *ngFor=\"let frequency of frequencies\"\n        [value]=\"frequency.value\"\n        [label]=\"frequency.name\"\n      ></bb-dropdown-single-select-option-ui>\n    </bb-dropdown-single-select-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency !== frequencyValues.Once\">\n    <label\n      data-role=\"payment-date-label\"\n      class=\"bb-label\"\n      i18n=\"\n        Schedule once payment section name|Label for the section containing inputs that determine way of once payment\n        the scheduled payments@@billpay.bb-schedule-ui.label.once-date\"\n    >\n      Execution date\n    </label>\n    <bb-input-radio-group-ui\n      data-role=\"once-payment-group\"\n      formControlName=\"paymentService\"\n      [required]=\"true\"\n      aria-label=\"once-date-type\"\n    >\n      <bb-input-radio-ui\n        *ngFor=\"let radio of paymentServiceRadios\"\n        [value]=\"radio\"\n        aria-invalid=\"false\"\n        [labelTemplate]=\"radio.index !== 'OTHER' ? paymentServiceLabelTemplate : paymentServiceOtherLabelTemplate\"\n      >\n        <ng-template #paymentServiceLabelTemplate>\n          <div class=\"bb-text-align-left\">\n            <div>\n              <span\n                data-role=\"payment-option\"\n                i18n=\"Service label list|Radio Label@@billpay.bb-input-radio-ui.radio.label.once-date.service\"\n              >\n                { radio.service.paymentServiceType, select, REGULAR_PAYMENT {Earliest free delivery} EXPEDITED_PAYMENT\n                {Rush payment} OVERNIGHT_CHECK {Overnight check} }\n              </span>\n              <span\n                *ngIf=\"\n                  radio.service.paymentServiceType === paymentServicesTypes.Expedited ||\n                  radio.service.paymentServiceType === paymentServicesTypes.Overnight\n                \"\n                i18n=\"\n                  Service label fee text|Radio Label fee@@billpay.bb-input-radio-ui.radio.label.once-date.service.fee\"\n                >&nbsp;-&nbsp;{{\n                  radio.service.fee.amount | currency: radio.service.fee.currencyCode:'symbol-narrow'\n                }}&nbsp;fee</span\n              >\n            </div>\n            <div\n              data-role=\"delivery-by\"\n              class=\"bb-text-support bb-subtitle\"\n              i18n=\"\n                Service label subtext|Radio Label\n                subtext@@billpay.bb-input-radio-ui.radio.label.once-date.service.subtext\"\n            >\n              Delivery by {{ getEstimatedStartDate(radio.service.paymentServiceType) | date: 'longDate' }}\n            </div>\n          </div>\n        </ng-template>\n        <ng-template #paymentServiceOtherLabelTemplate>\n          <div class=\"bb-stack\">\n            <span\n              class=\"bb-stack__item bb-text-bold\"\n              id=\"billpay-schedule-other-date-{{ id }}\"\n              i18n=\"Other date|Radio Label@@billpay.bb-input-radio-ui.radio.label.once-date.other\"\n              data-role=\"other-date-label\"\n              >Other date</span\n            >\n            <span class=\"bb-stack__item\">\n              <bb-input-datepicker-ui\n                (click)=\"$event.preventDefault()\"\n                formControlName=\"startDate\"\n                [minDate]=\"minDate\"\n                data-role=\"once-start-date-calendar\"\n                aria-label=\"start-date\"\n                placement=\"top-right\"\n                aria-labelledby=\"billpay-schedule-other-date-{{ id }}\"\n                [datepickerDescribedby]=\"'billpay-schedule-other-date-describe-{{ id }}'\"\n              ></bb-input-datepicker-ui>\n              <bb-input-validation-message-ui\n                role=\"alert\"\n                id=\"'billpay-schedule-other-date-describe-{{ id }}'\"\n                [showErrors]=\"scheduleForm?.get('startDate')?.invalid && formSubmitted\"\n              >\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n                  i18n=\"\n                    Execution date required error text|Error required message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.required.startDate\"\n                  data-role=\"missing-schedule-execution-date\"\n                >\n                  Execution date is required.\n                </span>\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.pastDate\"\n                  i18n=\"\n                    Execution date past date error text |Error past date message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.pastDate.startDate\"\n                  data-role=\"past-date-schedule-execution-date\"\n                >\n                  Execution date cannot be before delivery date.\n                </span>\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n                  i18n=\"\n                    Execution date invalid date error text |Error invalid date format message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.invalidDateFormat\"\n                  data-role=\"invalid-date-schedule-execution-date\"\n                >\n                  Invalid date format.\n                </span>\n              </bb-input-validation-message-ui>\n            </span>\n          </div>\n        </ng-template>\n      </bb-input-radio-ui>\n    </bb-input-radio-group-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" *ngIf=\"item?.frequency !== frequencyValues.Once\">\n    <label id=\"{{ startDateLabelId }}\" class=\"bb-text-bold\">\n      <span\n        *ngIf=\"true\"\n        id=\"billpay-schedule-start-date-{{ id }}\"\n        i18n-label=\"\n          Schedule start label|Label for an start date in scheduling component@@billpay.bb-schedule-ui.label.start\"\n        data-role=\"start-date-label\"\n      >\n        Start on\n      </span>\n    </label>\n    <div class=\"bb-form-field bb-form-field--sm\">\n      <bb-input-datepicker-ui\n        [aria-labelledby]=\"startDateLabelId\"\n        formControlName=\"startDate\"\n        [minDate]=\"minDate\"\n        data-role=\"start-date-calendar\"\n        aria-labelledby=\"billpay-schedule-start-date-{{ id }}\"\n        [datepickerDescribedby]=\"'billpay-schedule-start-date-error-{{ id }}'\"\n      ></bb-input-datepicker-ui>\n    </div>\n\n    <bb-input-validation-message-ui\n      id=\"'billpay-schedule-start-date-error-{{ id }}'\"\n      role=\"alert\"\n      [showErrors]=\"scheduleForm?.get('startDate')?.invalid && formSubmitted\"\n    >\n      <span\n        *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n        i18n=\"\n          Execution date required error text|Error required message for Execution date input\n          field@@billpay.bb-schedule-ui.error.required.startDate\"\n        data-role=\"missing-schedule-execution-date\"\n      >\n        Execution date is required.\n      </span>\n      <span\n        *ngIf=\"\n          scheduleForm?.get('startDate')?.errors?.pastDate ||\n          scheduleForm?.get('startDate')?.errors?.dateLessThanMinDate\n        \"\n        i18n=\"\n          Execution date past date error text |Error past date message for Execution date input\n          field@@billpay.bb-schedule-ui.error.pastDate.startDate\"\n        data-role=\"past-date-schedule-execution-date\"\n      >\n        Execution date cannot be before delivery date.\n      </span>\n      <span\n        *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n        i18n=\"\n          Execution date invalid date error text |Error invalid date format message for Execution date input\n          field@@billpay.bb-schedule-ui.error.invalidDateFormat\"\n        data-role=\"invalid-date-schedule-execution-date\"\n      >\n        Invalid date format.\n      </span>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency == frequencyValues.Once\">\n    <label\n      id=\"{{ endingLabelId }}\"\n      data-role=\"ending-label\"\n      class=\"bb-label\"\n      i18n=\"\n        Schedule ending section name|Label for the section containing inputs that determine way of ending of the\n        scheduled payments@@billpay.bb-schedule-ui.label.ending\"\n    >\n      End\n    </label>\n    <div class=\"bb-stack bb-stack--align-bottom\">\n      <div class=\"bb-stack__item\">\n        <bb-input-radio-group-ui [required]=\"true\" formControlName=\"endType\">\n          <bb-input-radio-ui\n            [value]=\"endTypes.Never\"\n            label=\"Never\"\n            aria-invalid=\"false\"\n            i18n-label=\"\n              Schedule never ends|Label for an option to never end the payment\n              schedule@@billpay.bb-schedule-ui.label.ending.never\"\n          >\n          </bb-input-radio-ui>\n          <bb-input-radio-ui [value]=\"endTypes.On\" aria-invalid=\"false\" [labelTemplate]=\"endingTemplate\">\n          </bb-input-radio-ui>\n          <bb-input-radio-ui [value]=\"endTypes.After\" aria-invalid=\"false\" [labelTemplate]=\"afterTemplate\">\n          </bb-input-radio-ui>\n          <ng-template #endingTemplate>\n            <div class=\"bb-stack\">\n              <span\n                data-role=\"ending-date-on-label\"\n                class=\"bb-stack__item bb-stack__item--spacing-lg\"\n                id=\"billpay-schedule-end-date-on-{{ id }}\"\n                i18n=\"\n                  Schedule end date|Label for an option to end the payment schedule on a specific\n                  date@@billpay.bb-schedule-ui.label.ending.on\"\n                >On</span\n              >\n              <div class=\"bb-stack__item\">\n                <bb-input-datepicker-ui\n                  formControlName=\"endDate\"\n                  data-role=\"ending-end-date\"\n                  i18n-aria-label=\"\n                    Schedule end date datepicker label|Aria label for end date payment schedule\n                    control@@billpay.bb-schedule-ui.label.end-date\"\n                  aria-label=\"end-date\"\n                  [minDate]=\"scheduleForm?.get('startDate')?.value\"\n                  placement=\"top-right\"\n                  aria-labelledby=\"billpay-schedule-end-date-on-{{ id }}\"\n                ></bb-input-datepicker-ui>\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  *ngIf=\"scheduleForm?.get('endDate') as control\"\n                  [showErrors]=\"control?.invalid && formSubmitted\"\n                >\n                  <span\n                    *ngIf=\"control?.errors?.pastDate || control?.errors?.dateLessThanMinDate\"\n                    i18n=\"\n                      End date past date error text |Error past date message for End date input\n                      field@@billpay.bb-schedule-ui.end-date.past-date-error\"\n                    data-role=\"past-date-ending-end-date\"\n                  >\n                    End date could not be lower than start date.\n                  </span>\n                  <span\n                    *ngIf=\"control?.errors?.invalidDateFormat\"\n                    i18n=\"\n                      End date invalid date error text |Error invalid date format message for End date input\n                      field@@billpay.bb-schedule-ui.end-date.invalid-date-format-error\"\n                    data-role=\"invalid-date-schedule-end-date\"\n                  >\n                    Invalid date format.\n                  </span>\n                  <span\n                    *ngIf=\"control?.errors?.required\"\n                    i18n=\"\n                      End date invalid date error text |Date is required for End date input\n                      field@@billpay.bb-schedule-ui.end-date.date-required-error\"\n                    data-role=\"required-date-schedule-end-date\"\n                  >\n                    End date is required.\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </ng-template>\n          <ng-template #afterTemplate>\n            <div class=\"bb-stack\">\n              <span\n                class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                i18n=\"\n                  Schedule number of occurrences|Label for an option to end the payment schedule after some number of\n                  occurrences@@billpay.bb-schedule-ui.label.ending.after\"\n              >\n                After\n              </span>\n              <div class=\"bb-stack__item\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-form-field bb-form-field--xs\">\n                    <bb-input-number-ui\n                      formControlName=\"repeat\"\n                      [min]=\"minOccurs\"\n                      [max]=\"maxOccurs\"\n                      data-role=\"ending-occurrences\"\n                      aria-label=\"occurrences\"\n                    ></bb-input-number-ui>\n                  </div>\n                  <span\n                    class=\"bb-stack__item\"\n                    i18n-label=\"\n                      Schedule occurrences text|Text to be appended after schedule end after some number of occurrences\n                      input@@billpay.bb-schedule-ui.label.ending.occurrences\"\n                  >\n                    Occurrences\n                  </span>\n                </div>\n              </div>\n            </div>\n          </ng-template>\n        </bb-input-radio-group-ui>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"item?.frequency !== frequencyValues.Once && item?.endType !== endTypes.Never && item?.startDate\">\n    <bb-alert-ui modifier=\"info\" title=\"\">\n      <span class=\"bb-text-bold\" *ngIf=\"item?.endType === endTypes.After\" data-role=\"estimated-end-date-label\">\n        <span\n          i18n=\"Estimated end date|Label for estimated end date section@@billpay.bb-schedule-ui.label.estimated.date\"\n        >\n          Estimated end date {{ getEstimatedEndDate() | date: 'longDate' }}\n        </span>\n      </span>\n      <span class=\"bb-text-bold\" *ngIf=\"item?.endType === endTypes.On\">\n        <ng-container\n          i18n=\"\n            Estimated payment in total|Label for estimated payment in total\n            section@@billpay.bb-schedule-ui.label.estimated.occurs\"\n        >\n          { getEstimatedOccurs(), plural, =1 { {{ getEstimatedOccurs() }} payment in total } other {\n          {{ getEstimatedOccurs() }} payments in total }}\n        </ng-container>\n      </span>\n    </bb-alert-ui>\n  </div>\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency == frequencyValues.Once\">\n    <label\n      data-role=\"notify-me-label\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        Notify me section name|Label for the section notify containing checkboxes @@billpay.bb-schedule-ui.label.notify\"\n    >\n      Notify me\n    </label>\n    <div>\n      <div class=\"bb-block bb-block--xs\">\n        <bb-input-checkbox-ui\n          [id]=\"'alertPendingCheckbox'\"\n          label=\"When a payment is pending\"\n          i18n-label=\"When a payment is pending|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.pending\"\n          formControlName=\"alertPendingCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n      <div class=\"bb-block bb-block--xs\">\n        <bb-input-checkbox-ui\n          [id]=\"'alertSentCheckbox'\"\n          label=\"When a payment has been sent\"\n          i18n-label=\"When a payment has been sent|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.sent\"\n          formControlName=\"alertSentCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n      <div>\n        <bb-input-checkbox-ui\n          [id]=\"'alertLastPendingCheckbox'\"\n          label=\"When the last payment is pending\"\n          i18n-label=\"When the last payment is pending|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.last-pending\"\n          formControlName=\"alertLastPendingCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2$1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2$1.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i4$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i8$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }], pipes: { "currency": i4.CurrencyPipe, "date": i4.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ScheduleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-schedule-ui',
                    templateUrl: './schedule.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.BillpayPaymentScheduleService }]; }, propDecorators: { frequencies: [{
                type: Input
            }], minOccurs: [{
                type: Input
            }], maxOccurs: [{
                type: Input
            }], scheduleForm: [{
                type: Input
            }], minDate: [{
                type: Input
            }], defaultPaymentServiceType: [{
                type: Input
            }], formSubmitted: [{
                type: Input
            }], paymentServices: [{
                type: Input
            }] } });

class BillpayPaymentFormComponent {
    /** @internal */
    constructor(fb, scheduleService) {
        this.fb = fb;
        this.scheduleService = scheduleService;
        /**
         * Identifier for the payee that is currently selected to be paid from.
         */
        this.selectedPayeeId = '';
        /**
         * Identifier for the payment when the form is an edit payment.
         */
        this.paymentId = '';
        /**
         * Whether the account number should be masked. Defaults to true.
         */
        this.accountNumberMask = true;
        /**
         * Activates edit payment elements. Defaults to false.
         */
        this.isEditPayment = false;
        /**
         * get the payment details title preference. default to 'Payment details'.
         */
        this.paymentDetailsTitle = 'Payment details';
        /**
         * get the payment default currency preference. default to 'USD'.
         */
        this.paymentDefaultCurrency = 'USD';
        this.submitPayment = new EventEmitter();
        this.cancelPayment = new EventEmitter();
        this.valueChanged = new EventEmitter();
        /**
         * Payment form group
         */
        this.paymentForm = this.fb.group({});
        /**
         * Flag to display if payment is submitted
         */
        this.formSubmitted = false;
        this.minDate$ = new BehaviorSubject(this.scheduleService.today);
        this.selectedAccount$ = new BehaviorSubject(undefined);
        this.selectedPayee$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        /**
         * Maximum occurrences for the number of occurrences input box.
         */
        this.maxOccurs = 999;
        /**
         * Minimum occurrences for the number of occurrences input box.
         */
        this.minOccurs = 1;
        /**
         * unique key used for ids
         */
        this.id = BillpayUtilityService.generateId();
    }
    set frequencies(value) {
        this._frequencies = value;
    }
    get frequencies() {
        const isEditRecurring = this.isEditPayment && this.paymentType === RECURRING_PAYMENT;
        const usableFrequencies = this._frequencies ? this._frequencies : frequencies;
        return isEditRecurring ? usableFrequencies.filter(freq => freq.value !== FrequencyKeys.Once) : usableFrequencies;
    }
    ngOnInit() {
        this.defaultAmount = {
            amount: '',
            currency: this.paymentDefaultCurrency,
            type: undefined,
        };
        this.selectedAccount$.next(this.defaultAccountFrom);
        this.selectedPayee$.next(this.defaultPayeeTo);
        if (this.defaultPayeeTo) {
            this.ebillSummary = this.defaultPayeeTo.ebill;
        }
        this.minDate$.next(this.scheduleService.estimatedPaymentServiceDate(this.defaultPayeeTo && this.defaultPayeeTo.paymentServices, PaymentServicesTypes.Regular));
        this.createForm();
        this.proccessPaymentServiceValueChanges();
        this.proccessFrequencyValueChanges();
        this.paymentForm.valueChanges.pipe(takeUntil(this.destroy$), take(1)).subscribe(() => {
            this.valueChanged.emit();
        });
    }
    ngAfterViewInit() {
        setTimeout(() => {
            if (this.fromAccount) {
                this.fromAccount.dropdownToggle.nativeElement.focus();
            }
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    cancel() {
        this.cancelPayment.emit();
    }
    get defaultPaymentServiceType() {
        const payee = this.selectedPayee$.getValue();
        return ((this.paymentState &&
            payee &&
            this.paymentState.payeeTo.id === payee.id &&
            this.paymentState.schedule &&
            this.paymentState.schedule.paymentService &&
            this.paymentState.schedule.paymentService.index) || PaymentServicesTypes.Regular);
    }
    get accountNumberFormatConfig() {
        return this.accountNumberMask ? accountNumberMaskedFormat : accountNumberFullFormat;
    }
    get ebillPayment() {
        return !!(!this.isEditPayment &&
            this.ebillSummary &&
            this.ebillSummary.latestBill &&
            this.ebillSummary.latestBill.status === 'UNPAID' &&
            (!this.ebillSummary.status || this.ebillSummary.status === 'ACTIVE'));
    }
    get frequencyKeys() {
        return FrequencyKeys;
    }
    get schedule() {
        var _a;
        return (_a = this.paymentForm) === null || _a === void 0 ? void 0 : _a.controls['schedule'].value;
    }
    get amountGroup() {
        var _a;
        return (_a = this.paymentForm) === null || _a === void 0 ? void 0 : _a.get('amount');
    }
    get startDateControl() {
        return this.paymentForm.get('schedule.startDate');
    }
    get endDateControl() {
        return this.paymentForm.get('schedule.endDate');
    }
    get scheduleLabelData() {
        const schedule = this.schedule;
        return Object.assign(Object.assign({}, schedule), { endDate: schedule.endType === EndTypes.On ? schedule.endDate : undefined, repeat: schedule.endType === EndTypes.After ? schedule.repeat : undefined });
    }
    get defaultAccountFrom() {
        var _a;
        return this.paymentState && this.paymentState.accountFrom ? this.paymentState.accountFrom : (_a = this.accounts) === null || _a === void 0 ? void 0 : _a[0];
    }
    get defaultPayeeTo() {
        var _a;
        return ((_a = this.paymentState) === null || _a === void 0 ? void 0 : _a.payeeTo)
            ? this.paymentState.payeeTo
            : this.payeeSummaries && this.payeeSummaries.find(acc => acc.id === this.selectedPayeeId);
    }
    getOvernightAddress(payee) {
        return (this.hasOvernightCheck(payee.paymentServices) && payee.overnightDeliveryAddress) || undefined;
    }
    hasOvernightCheck(services) {
        return !!(services === null || services === void 0 ? void 0 : services.find((item) => item.paymentServiceType === PaymentServicesTypes.Overnight));
    }
    get defaultOvernightAddressState() {
        const payee = this.selectedPayee$.getValue() || {};
        const address = this.getOvernightAddress(payee) || {};
        return {
            address1: address.address1 || '',
            address2: address.address2 || '',
            city: address.city || '',
            state: address.state,
            postalCode: address.postalCode || '',
        };
    }
    get defaultFormState() {
        const payee = this.selectedPayee$.getValue() || {};
        const paymentPayeeService = payee.paymentServices &&
            payee.paymentServices.find((item) => item.paymentServiceType === this.defaultPaymentServiceType);
        const paymentPayeeServiceDate = !this.paymentState || this.paymentState.schedule.frequency === this.frequencyKeys.Once
            ? payee.paymentServices &&
                this.scheduleService.estimatedPaymentServiceDate(payee.paymentServices, this.defaultPaymentServiceType)
            : undefined;
        const { paymentId, accountFrom = this.selectedAccount$.getValue() || {}, payeeTo = payee, amount = this.defaultAmount, memo = '', overnightDeliveryAddress = this.defaultOvernightAddressState, schedule: { frequency = this.findDefaultFrequency(), startDate = this.minDate$.getValue(), endDate = this.minDate$.getValue(), repeat = 1, endType = EndTypes.Never, paymentService = this.getDefaultPaymentService(paymentPayeeService), paymentServiceDate = paymentPayeeServiceDate, alertPendingCheckbox = false, alertSentCheckbox = false, alertLastPendingCheckbox = false, } = {}, } = this.paymentState || {};
        return {
            paymentId,
            accountFrom,
            payeeTo,
            amount,
            memo,
            overnightDeliveryAddress,
            schedule: {
                frequency,
                startDate,
                endDate,
                repeat,
                endType,
                paymentService,
                paymentServiceDate,
                alertPendingCheckbox,
                alertSentCheckbox,
                alertLastPendingCheckbox,
            },
        };
    }
    proccessPaymentServiceValueChanges() {
        const paymentServiceControl = this.paymentForm.get('schedule.paymentService');
        const overnightAddressControl = this.paymentForm.controls['overnightDeliveryAddress'];
        if (paymentServiceControl && overnightAddressControl) {
            paymentServiceControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(val => {
                if (val.service.paymentServiceType === PaymentServicesTypes.Overnight) {
                    overnightAddressControl.enable(formControlOptions);
                }
                else {
                    overnightAddressControl.disable(formControlOptions);
                }
            });
        }
    }
    proccessFrequencyValueChanges() {
        const frequencyControl = this.paymentForm.get('schedule.frequency');
        const overnightAddressControl = this.paymentForm.controls['overnightDeliveryAddress'];
        if (frequencyControl && overnightAddressControl) {
            frequencyControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(val => {
                if (val.value !== FrequencyKeys.Once) {
                    overnightAddressControl.disable(formControlOptions);
                }
            });
        }
    }
    createOvernightAddressFormGroup() {
        const overnightAddress = this.defaultFormState.overnightDeliveryAddress || {};
        const paymentService = this.defaultFormState.schedule.paymentService;
        const isOvernightAddressDisabled = !paymentService ||
            !paymentService.service ||
            !paymentService.service.paymentServiceType ||
            paymentService.service.paymentServiceType !== PaymentServicesTypes.Overnight;
        return this.fb.group({
            address1: [
                {
                    value: overnightAddress.address1,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            address2: [
                {
                    value: overnightAddress.address2,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            city: [
                {
                    value: overnightAddress.city,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            state: [
                {
                    value: overnightAddress.state,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            postalCode: [
                {
                    value: overnightAddress.postalCode,
                    disabled: isOvernightAddressDisabled,
                },
            ],
        });
    }
    createScheduleFormGroup() {
        const initState = this.defaultFormState;
        const paymentService = initState.schedule.paymentService;
        const isEndDateDisabled = initState.schedule.endType !== EndTypes.On;
        const isRepeatDisabled = initState.schedule.endType !== EndTypes.After;
        const isStartDateDisabled = !!(paymentService &&
            paymentService.index !== PaymentServicesTypes.Other &&
            initState.schedule.frequency === this.frequencyKeys.Once);
        //@TODO Replace startDate, endDate validators after fix angular issues
        //https://github.com/angular/angular/issues/13461#issuecomment-502674629
        //https://github.com/angular/angular/issues/10567
        return this.fb.group({
            frequency: [initState.schedule.frequency],
            startDate: [
                {
                    value: this.scheduleService.getLocalISODate(initState.schedule.startDate),
                    disabled: isStartDateDisabled,
                },
                [Validators.required, this.minDateValidator(this.minDate$.getValue())],
            ],
            endDate: [
                {
                    value: this.scheduleService.getLocalISODate(initState.schedule.endDate),
                    disabled: isEndDateDisabled,
                },
                [Validators.required, this.minDateValidator(this.minDate$.getValue())],
            ],
            repeat: [{ value: initState.schedule.repeat, disabled: isRepeatDisabled }],
            endType: [initState.schedule.endType],
            paymentService: [initState.schedule.paymentService],
            paymentServiceDate: [
                {
                    value: initState.schedule.paymentServiceDate,
                    disabled: !isStartDateDisabled,
                },
            ],
            alertPendingCheckbox: [initState.schedule.alertPendingCheckbox],
            alertSentCheckbox: [initState.schedule.alertSentCheckbox],
            alertLastPendingCheckbox: [initState.schedule.alertLastPendingCheckbox],
        });
    }
    createForm() {
        var _a;
        const initState = this.defaultFormState;
        const amount = ((_a = initState.amount.amount) === null || _a === void 0 ? void 0 : _a.toString()) || undefined;
        this.paymentForm = this.fb.group({
            paymentId: [this.paymentId],
            accountFrom: [initState.accountFrom],
            payeeTo: [initState.payeeTo],
            amount: this.fb.group({
                amount: [amount],
                currency: [initState.amount.currency],
                type: [initState.amount.type],
            }),
            memo: [initState.memo],
            overnightDeliveryAddress: this.createOvernightAddressFormGroup(),
            schedule: this.createScheduleFormGroup(),
        });
        this.setValidators();
    }
    amountValidator(control) {
        if (!control.value.amount || +control.value.amount <= 0) {
            return {
                amountInvalid: false,
            };
        }
        else {
            // eslint-disable-next-line no-null/no-null
            return null;
        }
    }
    isInvalidControl(control) {
        return this.formSubmitted && control.invalid && control.touched;
    }
    minDateValidator(minDate) {
        return (fg) => {
            if (!fg.value) {
                // eslint-disable-next-line no-null/no-null
                return null;
            }
            if (new Date(fg.value).setHours(0, 0, 0, 0) < new Date(minDate).setHours(0, 0, 0, 0)) {
                return {
                    pastDate: true,
                };
            }
            else {
                // eslint-disable-next-line no-null/no-null
                return null;
            }
        };
    }
    notEmptyObjectValidator(control) {
        // eslint-disable-next-line no-null/no-null
        return Object.keys(control.value).length ? null : { notEmptyObject: false };
    }
    processFormData(data) {
        switch (data.schedule.endType) {
            case EndTypes.After:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { endDate: new Date(this.scheduleService.estimatedEndDate(data.schedule.startDate, data.schedule.frequency, data.schedule.repeat)).toISOString() }) });
            case EndTypes.On:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { repeat: this.scheduleService.estimatedOccurences(data.schedule.startDate, data.schedule.endDate || data.schedule.startDate, data.schedule.frequency) }) });
            default:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), (!data.schedule.startDate &&
                        this.defaultFormState.schedule.startDate && { startDate: this.defaultFormState.schedule.startDate })) });
        }
    }
    setValidators() {
        [
            ['accountFrom', [this.notEmptyObjectValidator]],
            ['payeeTo', [this.notEmptyObjectValidator]],
            ['amount', [Validators.required, this.amountValidator]],
            ['schedule.repeat', [Validators.required, Validators.min(this.minOccurs), Validators.max(this.maxOccurs)]],
            ['overnightDeliveryAddress.address1', [Validators.required, Validators.maxLength(40)]],
            ['overnightDeliveryAddress.address2', [Validators.maxLength(40)]],
            ['overnightDeliveryAddress.city', [Validators.required, Validators.maxLength(32)]],
            ['overnightDeliveryAddress.state', [Validators.required]],
            ['overnightDeliveryAddress.postalCode', [Validators.required, Validators.pattern(/^\d{5}(\d{4})?$/)]],
        ].forEach(([controlName, validators]) => {
            const control = this.paymentForm.get(controlName);
            if (control) {
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        });
    }
    handleSubmit() {
        if (!this.formSubmitted) {
            this.formSubmitted = true;
        }
        if (this.paymentForm.valid) {
            this.submitPayment.emit(this.processFormData(this.paymentForm.value));
        }
        this.paymentForm.markAllAsTouched();
    }
    selectAccount(account) {
        this.selectedAccount$.next(account);
        this.paymentForm.controls['accountFrom'].setValue(account);
    }
    setOvernightAddress(payee) {
        const control = this.paymentForm.controls['overnightDeliveryAddress'];
        if ((payee === null || payee === void 0 ? void 0 : payee.overnightDeliveryAddress) && this.hasOvernightCheck(payee.paymentServices)) {
            control.setValue({
                address1: payee.overnightDeliveryAddress.address1,
                address2: payee.overnightDeliveryAddress.address2 || '',
                city: payee.overnightDeliveryAddress.city,
                state: payee.overnightDeliveryAddress.state,
                postalCode: payee.overnightDeliveryAddress.postalCode,
            });
        }
        else {
            control.reset();
        }
    }
    selectPayee(payee) {
        this.selectedPayee$.next(payee);
        this.paymentForm.controls['payeeTo'].setValue(payee);
        this.minDate$.next(this.scheduleService.estimatedPaymentServiceDate(payee && payee.paymentServices, PaymentServicesTypes.Regular));
        if (this.startDateControl && this.endDateControl) {
            this.startDateControl.setValue(this.minDate$.getValue());
            this.endDateControl.setValue(this.minDate$.getValue());
        }
        this.setOvernightAddress(payee);
        if (payee) {
            this.ebillSummary = payee.ebill;
        }
        if (this.amountGroup) {
            this.amountGroup.patchValue({ amount: ' ', type: undefined });
        }
    }
    getDefaultPaymentService(paymentService) {
        return {
            index: this.isEditPayment && this.paymentType === ONE_OFF_PAYMENT
                ? PaymentServicesTypes.Other
                : (paymentService === null || paymentService === void 0 ? void 0 : paymentService.paymentServiceType) || '',
            service: paymentService,
        };
    }
    findDefaultFrequency() {
        var _a, _b, _c;
        let defaultFrequency;
        switch (this.paymentType) {
            case ONE_OFF_PAYMENT: {
                defaultFrequency = (_a = this.frequencies) === null || _a === void 0 ? void 0 : _a.find(item => item.value === FrequencyKeys.Once);
                break;
            }
            case RECURRING_PAYMENT: {
                defaultFrequency = (_b = this.frequencies) === null || _b === void 0 ? void 0 : _b.find(item => item.value === FrequencyKeys.Monthly);
                break;
            }
        }
        if (defaultFrequency === undefined) {
            defaultFrequency = ((_c = this.frequencies) === null || _c === void 0 ? void 0 : _c[0]) || { value: FrequencyKeys.Once, name: '' };
        }
        return defaultFrequency.value;
    }
}
BillpayPaymentFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormComponent, deps: [{ token: i1$2.FormBuilder }, { token: i1$1.BillpayPaymentScheduleService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: { payeeSummaries: "payeeSummaries", accounts: "accounts", selectedPayeeId: "selectedPayeeId", paymentState: "paymentState", paymentId: "paymentId", accountNumberMask: "accountNumberMask", paymentType: "paymentType", isEditPayment: "isEditPayment", paymentDetailsTitle: "paymentDetailsTitle", paymentDefaultCurrency: "paymentDefaultCurrency", frequencies: "frequencies" }, outputs: { submitPayment: "submitPayment", cancelPayment: "cancelPayment", valueChanged: "valueChanged" }, viewQueries: [{ propertyName: "fromAccount", first: true, predicate: ["fromAccount"], descendants: true }], ngImport: i0, template: "<form data-role=\"payment-form\" [formGroup]=\"paymentForm\" (ngSubmit)=\"handleSubmit()\">\n  <!-- Payee To edit Label -->\n  <ng-container *ngIf=\"isEditPayment\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        *ngIf=\"selectedPayee$ | async as payee\"\n        data-role=\"payee-to-edit-header\"\n        headingType=\"h1\"\n        heading=\"Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }}\"\n        i18n-heading=\"Payment to|Payee to edit label@@billpay-manage-payment.payee-to.edit.header\"\n      ></bb-header-ui>\n    </div>\n  </ng-container>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <!-- Account From -->\n      <ng-container *ngTemplateOutlet=\"paymentFormAccountFrom\"> </ng-container>\n\n      <!-- Payee To -->\n      <ng-container *ngTemplateOutlet=\"paymentFormPayeeTo\"> </ng-container>\n\n      <!-- Payment details -->\n      <ng-container *ngTemplateOutlet=\"formDetails\"> </ng-container>\n\n      <!-- Payment overnight delivery address -->\n      <ng-container *ngTemplateOutlet=\"formOvernightAddress\"> </ng-container>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          i18n=\"Make payment button|Button text to make a payment@@bb-billpay-payment-form.button.submit\"\n          data-role=\"button-submit\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Continue\n        </button>\n        <button\n          bbButton\n          i18n=\"Make payment cancel button|Button text to make cancel a payment@@bb-billpay-payment-form.button.cancel\"\n          data-role=\"cancel-payment-button\"\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          (click)=\"cancel()\"\n          color=\"link\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n</form>\n\n<ng-template #paymentFormAccountFrom>\n  <bb-fieldset-ui class=\"bb-block bb-block--lg\" data-role=\"account-from-selected\">\n    <label\n      data-role=\"select-account-label\"\n      aria-live=\"polite\"\n      class=\"bb-label\"\n      i18n=\"From|From section title@@billpay-manage-payment.section.from\"\n    >\n      From\n    </label>\n    <bb-product-selector-ui #fromAccount>\n      <ng-container bbDropdownToggle *ngIf=\"selectedAccount$ | async as selectedAccount\">\n        <bb-product-item-basic-account-ui\n          *ngIf=\"selectedAccount\"\n          [title]=\"selectedAccount.accountNickName\"\n          [productNumber]=\"selectedAccount.accountNumber\"\n          [productNumberFormat]=\"accountNumberFormatConfig\"\n          [amount]=\"selectedAccount.accountBalance?.amount\"\n          [currency]=\"selectedAccount.accountBalance?.currencyCode\"\n          [highlight]=\"false\"\n          [active]=\"false\"\n          data-role=\"account-from-selected-toggle\"\n          class=\"bb-text-align-left\"\n        >\n        </bb-product-item-basic-account-ui>\n\n        <div\n          *ngIf=\"!selectedAccount\"\n          data-role=\"select-account-option\"\n          i18n-aria-label=\"\n            Account selector aria label|Aria label to show when no account is being\n            selected@@bb-billpay-manage-payment.account.placeholder.label\"\n          aria-label=\"Select a debit account\"\n          i18n=\"\n            Account selector placeholder|Text to show when no account is being\n            selected@@bb-billpay-manage-payment.payee.placeholder\"\n          class=\"bb-text-align-left\"\n        >\n          Select an account\n        </div>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          #listItem\n          bbButton\n          class=\"bb-product-selector__dropdown-item\"\n          color=\"unstyled\"\n          [block]=\"true\"\n          *ngFor=\"let account of accounts\"\n          (click)=\"selectAccount(account)\"\n          data-role=\"account-item\"\n        >\n          <bb-product-item-basic-account-ui\n            [title]=\"account.accountNickName\"\n            [productNumber]=\"account.accountNumber\"\n            [productNumberFormat]=\"accountNumberFormatConfig\"\n            [amount]=\"account.accountBalance?.amount\"\n            [currency]=\"account.accountBalance?.currencyCode\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n            class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\"\n            role=\"menuitem\"\n          >\n          </bb-product-item-basic-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n    <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"isInvalidControl(paymentForm?.get('accountFrom'))\">\n      <span\n        *ngIf=\"!paymentForm?.get('accountFrom')?.errors?.notEmptyObject\"\n        i18n=\"Account from required error message@@bb-billpay-payment-form.error.account-from\"\n        data-role=\"invalid-account-from\"\n        >Please select an account</span\n      >\n    </bb-input-validation-message-ui>\n  </bb-fieldset-ui>\n</ng-template>\n\n<ng-template #paymentFormPayeeTo>\n  <bb-fieldset-ui *ngIf=\"!isEditPayment\" data-role=\"payee-to-product-selector\" class=\"bb-block bb-block--lg\">\n    <label\n      data-role=\"select-payee-label\"\n      aria-live=\"polite\"\n      class=\"bb-label\"\n      i18n=\"To|To section title@@billpay-manage-payment.section.to\"\n    >\n      To\n    </label>\n    <bb-product-selector-ui>\n      <ng-container bbDropdownToggle>\n        <ng-container *ngIf=\"selectedPayee$ | async as selectedPayee; else selectPauee\">\n          <bb-product-item-current-account-ui\n            *ngIf=\"selectedPayee\"\n            [title]=\"selectedPayee.nickName || selectedPayee.name\"\n            [mainSectionTitle]=\"(selectedPayee.nickName && selectedPayee.name) || ''\"\n            [highlight]=\"false\"\n            data-role=\"payee-to-selected-toggle\"\n            [active]=\"false\"\n            class=\"bb-text-align-left\"\n          >\n            <ng-template bbCustomProductItemCurrentAccountMainSection let-mainSectionTitle=\"mainSectionTitle\">\n              <div>\n                <span class=\"bb-text-support bb-subtitle\">{{ mainSectionTitle }}</span>\n              </div>\n            </ng-template>\n          </bb-product-item-current-account-ui>\n        </ng-container>\n        <ng-template #selectPauee>\n          <div\n            data-role=\"select-payee-label\"\n            class=\"bb-text-align-left\"\n            i18n=\"\n              Payee selector placeholder|Text to show when no payee is being\n              selected@@bb-billpay-manage-payment.payee.placeholder\"\n          >\n            Select a payee\n          </div>\n        </ng-template>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          #listItem\n          bbButton\n          class=\"bb-product-selector__dropdown-item\"\n          color=\"unstyled\"\n          [block]=\"true\"\n          *ngFor=\"let payee of payeeSummaries\"\n          (click)=\"selectPayee(payee)\"\n          data-role=\"payee-item\"\n        >\n          <bb-product-item-current-account-ui\n            [title]=\"payee.nickName || payee.name\"\n            [mainSectionTitle]=\"(payee.nickName && payee.name) || ''\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n            class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\"\n            role=\"menuitem\"\n          >\n            <ng-template bbCustomProductItemCurrentAccountMainSection let-mainSectionTitle=\"mainSectionTitle\">\n              <div>\n                <span class=\"bb-text-support bb-subtitle\">\n                  {{ mainSectionTitle }}\n                </span>\n              </div>\n            </ng-template>\n          </bb-product-item-current-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n    <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"isInvalidControl(paymentForm?.get('payeeTo'))\">\n      <span\n        *ngIf=\"!paymentForm?.get('payeeTo')?.errors?.notEmptyObject\"\n        i18n=\"Payee to required error message@@bb-billpay-payment-form.error.payee-to\"\n        data-role=\"invalid-payee-to\"\n      >\n        Please select a payee\n      </span>\n    </bb-input-validation-message-ui>\n  </bb-fieldset-ui>\n</ng-template>\n\n<ng-template #formDetails>\n  <fieldset class=\"bb-fieldset\" data-role=\"payment-details-fieldset\" *ngIf=\"selectedPayee$ | async\">\n    <legend class=\"bb-fieldset__heading border-bottom\">\n      <div class=\"bb-block bb-block--sm\">\n        <span i18n=\"Payment details|text for the 'payment details' payment@@bb-billpay-payment-form.payment-details\">{{\n          paymentDetailsTitle\n        }}</span>\n        <span\n          *ngIf=\"ebillPayment\"\n          class=\"bb-text-support bb-text-default\"\n          i18n=\"\n            Payment description Due|text for the 'payment description'\n            payment@@bb-billpay-payment-form.payment-description\"\n        >\n          - { paymentForm?.get('amount')?.value?.type, select, Due { eBill due amount } Minimum { eBill minimum amount }\n          Balance { eBill total amount } other { eBill custom amount } }\n        </span>\n      </div>\n    </legend>\n    <div class=\"bb-block bb-block--md\" *ngIf=\"ebillPayment\">\n      <bb-billpay-ebill-payment\n        [control]=\"amountGroup\"\n        [eBillDefaultCurrency]=\"paymentDefaultCurrency\"\n        [latestBill]=\"ebillSummary?.latestBill\"\n        [isSubmitted]=\"formSubmitted\"\n      ></bb-billpay-ebill-payment>\n    </div>\n\n    <div class=\"bb-block bb-block--md\" [formGroup]=\"amountGroup\" *ngIf=\"!ebillPayment\">\n      <label\n        class=\"bb-label\"\n        data-role=\"payment-amount-label\"\n        for=\"{{ 'billpay-amount-input-' + id }}\"\n        i18n=\"Amount of payment|ext for the 'payment details' amount@@bb-billpay-payment-form.payment-details.amount\"\n        >Amount</label\n      >\n      <div class=\"bb-form-field bb-form-field--md\">\n        <bb-amount-input-ui\n          formControlName=\"amount\"\n          data-role=\"amount\"\n          [id]=\"'billpay-amount-input-' + id\"\n          [autoDecimal]=\"true\"\n          wrapperClasses=\"bb-amount-input__field--large\"\n          [currency]=\"(selectedAccount$ | async)?.accountBalance?.currencyCode || defaultAmount.currency\"\n          placeholder=\"0.00\"\n          aria-describedby=\"{{ 'billpay-amount-errors-' + id }}\"\n        >\n        </bb-amount-input-ui>\n      </div>\n      <bb-input-validation-message-ui\n        role=\"alert\"\n        id=\"{{ 'billpay-amount-errors-' + id }}\"\n        [showErrors]=\"isInvalidControl(paymentForm?.get('amount'))\"\n      >\n        <span\n          *ngIf=\"!paymentForm?.get('amount')?.errors?.amountInvalid\"\n          i18n=\"Please add amount of this payment|Error zero amount@@bb-billpay-payment-form.error.amount\"\n          data-role=\"invalid-amount\"\n        >\n          Please add amount of this payment.\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"bb-fieldset\" [formGroup]=\"paymentForm\">\n      <label class=\"bb-label\" data-role=\"add-memo-label\" for=\"bb-billpay-payment-form-memo\">\n        <span i18n=\"Memo label|Label for payment memo@@bb-billpay-payment-form.label.memo\">Payment description</span>\n        <span class=\"bb-text-support\" i18n=\"label helper|optional text@@bb-billpay-payment-form.label.memo-helper\">\n          (Optional)</span\n        >\n      </label>\n      <div class=\"bb-form-field bb-form-field--md\">\n        <bb-textarea-ui\n          [id]=\"'bb-billpay-payment-form-memo'\"\n          formControlName=\"memo\"\n          data-role=\"memo\"\n          placeholder=\"Enter payment description\"\n          i18n-placeholder=\"\n            Enter payment description|Placeholder for payment description@@bb-billpay-payment-form.payment.description\"\n          [showCharCounter]=\"true\"\n          [maxLength]=\"140\"\n          [rows]=\"2\"\n        >\n        </bb-textarea-ui>\n      </div>\n    </div>\n\n    <!-- Payment scheduler -->\n    <bb-collapsible-ui\n      *ngIf=\"(selectedPayee$ | async) && (!isEditPayment || paymentType !== 'oneOff'); else editOneOffPaymentSchedule\"\n      data-role=\"schedule-toggle\"\n      [isOpen]=\"true\"\n    >\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div class=\"border-bottom bb-block bb-block--md\">\n          <button\n            bbButton\n            class=\"bb-stack bb-product-selector__item-content\"\n            (click)=\"toggle()\"\n            type=\"button\"\n            color=\"unstyled\"\n          >\n            <div class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\">\n              <div class=\"bb-block bb-block--sm\">\n                <span\n                  class=\"bb-heading-2\"\n                  data-role=\"schedule-section-title\"\n                  i18n=\"\n                    Schedule section title|Title of the form section with payment schedule\n                    fields@@bb-billpay-payment-form.section.schedule.title\"\n                >\n                  Schedule\n                </span>\n                <span class=\"bb-text-support bb-text-default\">\n                  <bb-schedule-label-ui\n                    [item]=\"scheduleLabelData\"\n                    [frequencies]=\"frequencies\"\n                    [minOccurrences]=\"minOccurs\"\n                    [isSingleTransfer]=\"schedule.frequency === frequencyKeys.Once\"\n                  >\n                  </bb-schedule-label-ui>\n                </span>\n              </div>\n            </div>\n            <bb-icon-ui\n              class=\"bb-stack__item\"\n              cropped\n              data-role=\"schedule-toggle-icon\"\n              aria-label=\"Schedule toggle\"\n              i18n-aria-label=\"\n                Schedule toggle label|Aria label for schedule\n                toggle@@bb-billpay-payment-form.bb-schedule-ui.label.toggle\"\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <bb-schedule-ui\n          [scheduleForm]=\"paymentForm.get('schedule')\"\n          [paymentServices]=\"(selectedPayee$ | async)?.paymentServices\"\n          [defaultPaymentServiceType]=\"defaultPaymentServiceType\"\n          [frequencies]=\"frequencies\"\n          [minOccurs]=\"minOccurs\"\n          [maxOccurs]=\"maxOccurs\"\n          [minDate]=\"minDate$ | async\"\n          [formSubmitted]=\"formSubmitted\"\n          data-role=\"payment-schedule\"\n        >\n        </bb-schedule-ui>\n      </ng-template>\n    </bb-collapsible-ui>\n\n    <ng-template #editOneOffPaymentSchedule>\n      <div *ngIf=\"selectedPayee$ | async\" class=\"bb-block bb-block--md\" [formGroup]=\"paymentForm.get('schedule')\">\n        <label class=\"bb-label\" data-role=\"deliver-payment-by-date\">\n          <span\n            id=\"billpay-schedule-end-date-on-{{ id }}\"\n            i18n=\"Deliver payment by label|Edit one off payment date@@bb-billpay-payment-form.label.deliver-payment-by\"\n            >Deliver payment by</span\n          >\n          <div>\n            <bb-input-datepicker-ui\n              formControlName=\"startDate\"\n              [minDate]=\"minDate$ | async\"\n              data-role=\"once-start-date-calendar\"\n              aria-label=\"start-date\"\n              aria-labelledby=\"billpay-schedule-end-date-on-{{ id }}\"\n              datepickerDescribedby=\"billpay-schedule-end-date-on-error-{{ id }}\"\n            ></bb-input-datepicker-ui>\n          </div>\n          <bb-input-validation-message-ui\n            id=\"billpay-schedule-end-date-on-error-{{ id }}\"\n            aria-live=\"polite\"\n            [showErrors]=\"paymentForm.get('schedule.startDate')?.invalid && formSubmitted\"\n          >\n            <span\n              *ngIf=\"paymentForm.get('schedule.startDate')?.hasError('required')\"\n              i18n=\"\n                Execution date required error text|Error required message for Execution date input\n                field@@bb-billpay-payment-form.error.required.startDate\"\n              data-role=\"missing-schedule-execution-date\"\n            >\n              Execution date is required.\n            </span>\n            <span\n              *ngIf=\"\n                paymentForm.get('schedule.startDate')?.hasError('pastDate') ||\n                paymentForm.get('schedule.startDate')?.hasError('dateLessThanMinDate')\n              \"\n              i18n=\"\n                Execution date past date error text |Error past date message for Execution date input\n                field@@bb-billpay-payment-form.error.pastDate.startDate\"\n              data-role=\"past-date-schedule-execution-date\"\n            >\n              Execution date cannot be before delivery date.\n            </span>\n            <span\n              *ngIf=\"paymentForm?.get('schedule.startDate')?.hasError('invalidDateFormat')\"\n              i18n=\"\n                Execution date invalid date error text |Error invalid date format message for Execution date input\n                field@@bb-billpay-payment-form.error.invalidDateFormat\"\n              data-role=\"invalid-date-schedule-execution-date\"\n            >\n              Invalid date format.\n            </span>\n          </bb-input-validation-message-ui>\n        </label>\n      </div>\n    </ng-template>\n  </fieldset>\n</ng-template>\n\n<ng-template #formOvernightAddress>\n  <ng-container\n    *ngIf=\"schedule.paymentService?.service?.paymentServiceType === 'OVERNIGHT_CHECK'\"\n    [formGroup]=\"paymentForm\"\n  >\n    <bb-fieldset-ui\n      i18n-heading=\"\n        Overnight check address|Text for the payment overnight\n        address@@bb-billpay-payment-form.payment-overnight-address\"\n      heading=\"Overnight check address\"\n      class=\"bb-block bb-block-xl\"\n    >\n      <bb-alert-ui\n        modifier=\"info\"\n        class=\"d-block\"\n        title=\"This address might be a dedicated PO box for overnight payments. Please check with your biller\"\n        i18n-title=\"alert title|Address alert@@bb-billpay-payment-form.payment-overnight-address.alert\"\n        data-role=\"overnight-alert-message\"\n      >\n      </bb-alert-ui>\n      <bb-billpay-address-form\n        [formGroup]=\"paymentForm.get('overnightDeliveryAddress')\"\n        formGroupName=\"overnightDeliveryAddress\"\n      ></bb-billpay-address-form>\n    </bb-fieldset-ui>\n  </ng-container>\n</ng-template>\n", components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4$2.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i5$1.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i6$1.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i8$2.ProductItemCurrentAccountComponent, selector: "bb-product-item-current-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: BillpayEbillPaymentUIComponent, selector: "bb-billpay-ebill-payment", inputs: ["latestBill", "control", "isSubmitted", "eBillDefaultCurrency"] }, { type: i10.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i11.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i12.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: ["item", "isSingleTransfer", "minOccurrences", "frequencies"] }, { type: i3$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ScheduleComponent, selector: "bb-schedule-ui", inputs: ["frequencies", "minOccurs", "maxOccurs", "scheduleForm", "minDate", "defaultPaymentServiceType", "formSubmitted", "paymentServices"] }, { type: i4$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1$1.ӨBillpayAddressFormComponent, selector: "bb-billpay-address-form" }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8$2.CustomProductItemCurrentAccountMainSectionDirective, selector: "ng-template[bbCustomProductItemCurrentAccountMainSection]" }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i12.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i12.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }, { type: i4$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-form',
                    templateUrl: './billpay-payment-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }, { type: i1$1.BillpayPaymentScheduleService }]; }, propDecorators: { payeeSummaries: [{
                type: Input
            }], accounts: [{
                type: Input
            }], selectedPayeeId: [{
                type: Input
            }], paymentState: [{
                type: Input
            }], paymentId: [{
                type: Input
            }], accountNumberMask: [{
                type: Input
            }], paymentType: [{
                type: Input
            }], isEditPayment: [{
                type: Input
            }], paymentDetailsTitle: [{
                type: Input
            }], paymentDefaultCurrency: [{
                type: Input
            }], frequencies: [{
                type: Input
            }], fromAccount: [{
                type: ViewChild,
                args: ['fromAccount']
            }], submitPayment: [{
                type: Output
            }], cancelPayment: [{
                type: Output
            }], valueChanged: [{
                type: Output
            }] } });

class BillpayPaymentDiscardChangesModalComponent {
    constructor() {
        this.resolve = new EventEmitter();
    }
    cancelModal() {
        this.resolve.emit(false);
    }
    confirmModal() {
        this.resolve.emit(true);
    }
}
BillpayPaymentDiscardChangesModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentDiscardChangesModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentDiscardChangesModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: { title: "title", subtitle: "subtitle", confirmButtonLabel: ["confirm-button-label", "confirmButtonLabel"], cancelButtonLabel: ["cancel-button-label", "cancelButtonLabel"] }, outputs: { resolve: "resolve" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"true\" (cancel)=\"cancelModal()\" data-role=\"discard-payment-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-header-ui\n        data-role=\"discard-payment-modal-header\"\n        headingType=\"h2\"\n        heading=\"{{ title }}\"\n        i18n-heading=\"Discard payment modal header@@billpay.payment-discard-changes.modal.header\"\n      >\n      </bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span\n        i18n=\"Discard payment modal body@@billpay.payment-discard-changes.modal.body\"\n        data-role=\"discard-payment-modal-body\"\n        >{{ subtitle }}</span\n      >\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"confirmModal()\"\n          data-role=\"discard-payment-modal-confirm-button\"\n          i18n=\"\n            Confirm button|Discard payment modal footer button@@billpay.payment-discard-changes.modal.footer.confirm\"\n        >\n          {{ confirmButtonLabel }}\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          (click)=\"cancelModal()\"\n          data-role=\"discard-payment-modal-cancel-button\"\n          i18n=\"Cancel button|Discard payment modal footer button@@billpay.payment-discard-changes.modal.footer.cancel\"\n        >\n          {{ cancelButtonLabel }}\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$3.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$3.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentDiscardChangesModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-discard-changes-modal',
                    templateUrl: './billpay-payment-discard-changes-modal.component.html',
                }]
        }], propDecorators: { title: [{
                type: Input
            }], subtitle: [{
                type: Input
            }], confirmButtonLabel: [{
                type: Input,
                args: ['confirm-button-label']
            }], cancelButtonLabel: [{
                type: Input,
                args: ['cancel-button-label']
            }], resolve: [{
                type: Output
            }] } });

class BillpayPaymentFormContainerComponent {
    /** @internal */
    constructor(routerService, paymentDataService, paymentStateService, discardModalService, route) {
        this.routerService = routerService;
        this.paymentDataService = paymentDataService;
        this.paymentStateService = paymentStateService;
        this.discardModalService = discardModalService;
        this.route = route;
        this.isFormTouched = false;
        this.paymentRouteObservable$ = this.routerService.routeParams;
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    ngOnInit() {
        this.paymentDataObservable$ = combineLatest([
            this.paymentRouteObservable$,
            this.paymentDataService.getPayeesAndAccounts(),
        ]).pipe(map(([routeParams, payeeSummariesAndAccounts]) => (Object.assign(Object.assign({}, routeParams), payeeSummariesAndAccounts))));
    }
    onWindowUnload($event) {
        if ((this.isFormTouched || this.paymentStateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    hasNoErrorState(data) {
        return (this.payeesLoadingState !== LoadingState.Error &&
            this.accountsLoadingState !== LoadingState.Error &&
            !!data.accounts &&
            !!data.payeeSummaries);
    }
    onSubmittedFormData(data) {
        this.paymentStateService.isFormProcessing = true;
        this.paymentStateService.updatePaymentState([data]);
        this.routerService.navigateToReview({ relativeTo: this.route.parent });
    }
    get paymentState() {
        return this.paymentStateService.paymentState.pipe(map((state) => state === null || state === void 0 ? void 0 : state[0]));
    }
    get payeesLoadingState() {
        return this.paymentDataService.payeesLoadingState;
    }
    get accountsLoadingState() {
        return this.paymentDataService.accountsLoadingState;
    }
    openModal() {
        return this.isFormTouched || this.paymentStateService.isFormProcessing
            ? this.discardModalService.openModal()
            : of(true);
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    onFormValueChanged() {
        this.isFormTouched = true;
    }
    onCancelForm() {
        this.routerService.navigateToPayeeList();
    }
}
BillpayPaymentFormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormContainerComponent, deps: [{ token: PayBillsNavigationService }, { token: i1$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i1$1.BillpayDiscardChangesModalService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentFormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFormContainerComponent, selector: "bb-billpay-payment-form-container", inputs: { frequencies: "frequencies", accountNumberMasked: "accountNumberMasked", paymentDetailsTitle: "paymentDetailsTitle", paymentDefaultCurrency: "paymentDefaultCurrency" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], ngImport: i0, template: "<ng-container *ngIf=\"paymentDataObservable$ | async as paymentData; else loadingState\">\n  <ng-container *ngIf=\"hasNoErrorState(paymentData); else errorState\">\n    <section>\n      <bb-billpay-payment-form\n        *ngIf=\"paymentData.pageType === 'new'\"\n        [payeeSummaries]=\"paymentData?.payeeSummaries\"\n        [accounts]=\"paymentData?.accounts\"\n        [selectedPayeeId]=\"paymentData.payeeId\"\n        (submitPayment)=\"onSubmittedFormData($event)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        (cancelPayment)=\"onCancelForm()\"\n        [paymentState]=\"paymentState | async\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        [isEditPayment]=\"false\"\n        [paymentType]=\"paymentData.paymentType\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [paymentDefaultCurrency]=\"paymentDefaultCurrency\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </section>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n        subtitle=\"Try to reload the page or contact support\"\n        i18n-subtitle=\"\n          Try to reload the page or contact support|Payment loading error\n          subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n        title=\"Payment information is not loading\"\n        i18n-title=\"\n          Payment information is not loading|Payment loading error\n          title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-create-form-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel payment?\"\n  i18n-title=\"Discard changes modal header@@billpay.manage-payment.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel this payment? You will lose any details entered.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.manage-payment.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-form-container',
                    templateUrl: './billpay-payment-form-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: PayBillsNavigationService }, { type: i1$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i1$1.BillpayDiscardChangesModalService }, { type: i1.ActivatedRoute }]; }, propDecorators: { frequencies: [{
                type: Input
            }], accountNumberMasked: [{
                type: Input
            }], paymentDetailsTitle: [{
                type: Input
            }], paymentDefaultCurrency: [{
                type: Input
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayPaymentFormViewComponent {
    constructor(config, routerService) {
        this.config = config;
        this.routerService = routerService;
    }
    openModal() {
        return this.child.openModal();
    }
    goBack() {
        this.routerService.navigateToPayeeList();
    }
}
BillpayPaymentFormViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentFormViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFormViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentFormContainer"], descendants: true }], ngImport: i0, template: `
    <div class="bb-stack">
      <div class="bb-block bb-block--sm bb-stack__item bb-stack__item--fill">
        <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
          <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
          <span i18n="button label|Back button@@pay-bills-journey.payee-list.back">Back to Payee List</span>
        </button>
        <bb-header-ui
          headingType="h1"
          heading="Make a payment"
          i18n-heading="@@pay-bills-journey.title.make-a-payment"
          data-role="pay-a-bill-journey-title"
        >
        </bb-header-ui>
        <p i18n="@@pay-bills-journey.pay-payee.header-description" data-role="multiple-bills-widget-title-info">
          Add payees if you would like to pay a single bill or multiple bills
        </p>
      </div>
    </div>
    <bb-billpay-payment-form-container
      [accountNumberMasked]="config.accountNumberMasked"
      [paymentDetailsTitle]="config.paymentDetailsTitle"
      [paymentDefaultCurrency]="config.paymentDefaultCurrency"
      [frequencies]="config.frequencies"
      #paymentFormContainer
    ></bb-billpay-payment-form-container>
  `, isInline: true, components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentFormContainerComponent, selector: "bb-billpay-payment-form-container", inputs: ["frequencies", "accountNumberMasked", "paymentDetailsTitle", "paymentDefaultCurrency"] }], directives: [{ type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormViewComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
    <div class="bb-stack">
      <div class="bb-block bb-block--sm bb-stack__item bb-stack__item--fill">
        <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
          <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
          <span i18n="button label|Back button@@pay-bills-journey.payee-list.back">Back to Payee List</span>
        </button>
        <bb-header-ui
          headingType="h1"
          heading="Make a payment"
          i18n-heading="@@pay-bills-journey.title.make-a-payment"
          data-role="pay-a-bill-journey-title"
        >
        </bb-header-ui>
        <p i18n="@@pay-bills-journey.pay-payee.header-description" data-role="multiple-bills-widget-title-info">
          Add payees if you would like to pay a single bill or multiple bills
        </p>
      </div>
    </div>
    <bb-billpay-payment-form-container
      [accountNumberMasked]="config.accountNumberMasked"
      [paymentDetailsTitle]="config.paymentDetailsTitle"
      [paymentDefaultCurrency]="config.paymentDefaultCurrency"
      [frequencies]="config.frequencies"
      #paymentFormContainer
    ></bb-billpay-payment-form-container>
  `,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                type: ViewChild,
                args: ['paymentFormContainer']
            }] } });

class BillpayPaymentReviewContainerComponent {
    /** @internal */
    constructor(navigationService, dataService, stateService, notificationService, discardModalService, paymentParserService, route, cdRef) {
        this.navigationService = navigationService;
        this.dataService = dataService;
        this.stateService = stateService;
        this.notificationService = notificationService;
        this.discardModalService = discardModalService;
        this.paymentParserService = paymentParserService;
        this.route = route;
        this.cdRef = cdRef;
        this.paymentConfirm$ = new BehaviorSubject(undefined);
        this.componentDestroyed$ = new Subject();
        this.paymentError = false;
        this.hasDateError = false;
        this.editMode = false;
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    get dismissTimeout() {
        if (this.dismissTimeoutValue === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.dismissTimeoutValue;
    }
    ngOnInit() {
        this.stateService.paymentState.pipe(take(1)).subscribe(payment => {
            var _a;
            this.payment = payment === null || payment === void 0 ? void 0 : payment[0];
            this.paymentReview = this.payment && this.paymentParserService.paymentFormStateToReview(this.payment);
            const frequency = (_a = this.frequencies) === null || _a === void 0 ? void 0 : _a.find(freq => { var _a, _b; return ((_b = (_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.frequency) === freq.value; });
            this.frequencyLabel = (frequency === null || frequency === void 0 ? void 0 : frequency.name) || '';
            if (!this.payment) {
                this.navigationService.navigateToForm({ relativeTo: this.route.parent });
            }
        });
        this.paymentConfirm$
            .pipe(takeUntil(this.componentDestroyed$), filter(Boolean))
            .subscribe(payment => this.onPaymentConfirm(payment));
    }
    ngOnDestroy() {
        this.componentDestroyed$.next();
        this.componentDestroyed$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    onEdit() {
        this.editMode = true;
        this.navigationService.navigateToForm({ relativeTo: this.route.parent });
    }
    navigateToPayments() {
        this.navigationService.navigateToPayments();
    }
    cancel() {
        this.navigationService.navigateToPayeeList();
    }
    confirmPayment(payment) {
        if (!payment)
            return;
        this.paymentConfirm$.next(payment);
    }
    openModal() {
        return this.paymentConfirm$.pipe(switchMap(payment => (payment || this.editMode ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && !this.editMode && this.stateService.reset()));
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    onPaymentConfirm(payment) {
        this.paymentError = false;
        this.hasDateError = false;
        this.dataService
            .createPayment(payment)
            .pipe(takeUntil(this.componentDestroyed$))
            .subscribe(() => {
            this.navigationService.navigateToPayeeList();
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }, response => {
            var _a, _b;
            this.paymentError = true;
            this.hasDateError = (_b = (_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.some((a) => a.key === 'billpay.api.invalidPaymentDate');
            this.cdRef.markForCheck();
            this.failAlert.nativeElement.scrollIntoView(false);
        });
    }
}
BillpayPaymentReviewContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentReviewContainerComponent, deps: [{ token: PayBillsNavigationService }, { token: i1$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i5$2.NotificationService }, { token: i1$1.BillpayDiscardChangesModalService }, { token: i1$1.BillpayPaymentParserService }, { token: i1.ActivatedRoute }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentReviewContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentReviewContainerComponent, selector: "bb-billpay-payment-review-container", inputs: { frequencies: "frequencies", dismissTimeoutValue: "dismissTimeoutValue", accountNumberMasked: "accountNumberMasked" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"payment\">\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-block bb-block--xl\">\n        <ng-container *ngTemplateOutlet=\"reviewContent\"></ng-container>\n      </div>\n      <ng-container *ngTemplateOutlet=\"reviewButtons\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #reviewContent>\n  <div #failAlert>\n    <bb-alert-ui\n      title=\"Failed to submit payment. Please try again later.\"\n      i18n-title=\"Failed to submit payment|Title for payment error@@billpay-payment-review-container.error-alert\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-message\"\n      *ngIf=\"paymentError && !hasDateError\"\n    >\n    </bb-alert-ui>\n    <bb-alert-ui\n      title=\"The date selected is invalid.\"\n      i18n-title=\"\n        Failed to submit payment date|Title for payment date error@@billpay-payment-review-container.error-date-alert\"\n      message=\"The payment cannot be scheduled on this date. Please select another date in the previous step.\"\n      i18n-message=\"Date payment error|Date error for payment@@billpay-payment-review.date-error-alert.message\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-date-message\"\n      *ngIf=\"paymentError && hasDateError\"\n    >\n    </bb-alert-ui>\n  </div>\n  <bb-billpay-payment-review-card\n    [accountNumberMask]=\"accountNumberMasked\"\n    [paymentReview]=\"paymentReview\"\n    [frequencyLabel]=\"frequencyLabel\"\n  >\n  </bb-billpay-payment-review-card>\n</ng-template>\n\n<ng-template #reviewButtons>\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      data-role=\"confirm-payment-button\"\n      i18n=\"Payment details confirm button|Label for confirm payment button@@billpay-payment-review.confirm\"\n      (click)=\"confirmPayment(payment)\"\n      class=\"bb-button-bar__button\"\n    >\n      Submit\n    </button>\n    <button\n      bbButton\n      data-role=\"edit-payment-button\"\n      i18n=\"Payment details edit button|Label for edit payment button@@billpay-payment-review.edit\"\n      (click)=\"onEdit()\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n    >\n      Edit\n    </button>\n    <button\n      bbButton\n      data-role=\"cancel-payment-button\"\n      i18n=\"Payment details cancel button|Label for cancel payment button@@billpay-payment-review.cancel\"\n      (click)=\"cancel()\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n    >\n      Discard\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <ng-container *ngIf=\"payment?.payeeTo as payee\">\n    <span\n      i18n=\"\n        payment notification message|Payment confirmation success notification\n        message@@billpay-payment-review.confirm.notification.message\"\n      >Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }} has been scheduled\n      successfully</span\n    >\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"notification-secondary-button\"\n        class=\"bb-button-bar__button\"\n        (click)=\"navigateToPayments()\"\n        i18n=\"\n          payment notification button|Navigate to scheduled payments@@billpay-payment-review.confirm.notification.button\"\n      >\n        View scheduled payments\n      </button>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <span\n    i18n=\"\n      payment notification header|Payment confirmation success notification\n      header@@billpay-payment-review.confirm.notification.header\"\n    >Payment scheduled</span\n  >\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel payment?\"\n  i18n-title=\"Discard changes modal header@@billpay.manage-payment.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel this payment? You will lose any details entered.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.manage-payment.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1$1.BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: ["paymentReview", "accountNumberMask", "frequencyLabel"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentReviewContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-review-container',
                    templateUrl: './billpay-payment-review-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsNavigationService }, { type: i1$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i5$2.NotificationService }, { type: i1$1.BillpayDiscardChangesModalService }, { type: i1$1.BillpayPaymentParserService }, { type: i1.ActivatedRoute }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { frequencies: [{
                type: Input
            }], dismissTimeoutValue: [{
                type: Input
            }], accountNumberMasked: [{
                type: Input
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], failAlert: [{
                type: ViewChild,
                args: ['failAlert']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayPaymentReviewViewComponent {
    constructor(config, routerService) {
        this.config = config;
        this.routerService = routerService;
    }
    openModal() {
        return this.child.openModal();
    }
    goBack() {
        this.routerService.navigateToPayeeList();
    }
}
BillpayPaymentReviewViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentReviewViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentReviewViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentReviewViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentReviewContainer"], descendants: true }], ngImport: i0, template: `
    <div class="bb-stack">
      <div class="bb-block bb-block--sm bb-stack__item bb-stack__item--fill">
        <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
          <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
          <span i18n="button label|Back button@@pay-bills-journey.payee-list.back">Back to Payee List</span>
        </button>
        <bb-header-ui
          headingType="h1"
          heading="Review your payment"
          i18n-heading="@@pay-bills-journey.title.make-a-payment"
          data-role="pay-a-bill-journey-review-title"
        >
        </bb-header-ui>
      </div>
    </div>
    <bb-billpay-payment-review-container
      [accountNumberMasked]="config.accountNumberMasked"
      [dismissTimeoutValue]="config.notificationDismissTime"
      [frequencies]="config.frequencies"
      #paymentReviewContainer
    ></bb-billpay-payment-review-container>
  `, isInline: true, components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentReviewContainerComponent, selector: "bb-billpay-payment-review-container", inputs: ["frequencies", "dismissTimeoutValue", "accountNumberMasked"] }], directives: [{ type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentReviewViewComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
    <div class="bb-stack">
      <div class="bb-block bb-block--sm bb-stack__item bb-stack__item--fill">
        <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
          <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
          <span i18n="button label|Back button@@pay-bills-journey.payee-list.back">Back to Payee List</span>
        </button>
        <bb-header-ui
          headingType="h1"
          heading="Review your payment"
          i18n-heading="@@pay-bills-journey.title.make-a-payment"
          data-role="pay-a-bill-journey-review-title"
        >
        </bb-header-ui>
      </div>
    </div>
    <bb-billpay-payment-review-container
      [accountNumberMasked]="config.accountNumberMasked"
      [dismissTimeoutValue]="config.notificationDismissTime"
      [frequencies]="config.frequencies"
      #paymentReviewContainer
    ></bb-billpay-payment-review-container>
  `,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                type: ViewChild,
                args: ['paymentReviewContainer']
            }] } });

class BasePaymentEditFormContainerDirective {
    /** @internal */
    constructor(dataService, stateService, route, discardModalService, routerService) {
        this.dataService = dataService;
        this.stateService = stateService;
        this.route = route;
        this.discardModalService = discardModalService;
        this.routerService = routerService;
        this.destroy$ = new Subject();
        this.isFormTouched = false;
        this.id$ = this.route.paramMap.pipe(take(1), map(params => params.get('id') || ''));
        this.payeesAndAccounts$ = this.dataService.getPayeesAndAccounts().pipe(shareReplay(1), takeUntil(this.destroy$));
    }
    onWindowUnload($event) {
        if ((this.isFormTouched || this.stateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    openModal() {
        return this.isFormTouched || this.stateService.isFormProcessing ? this.discardModalService.openModal() : of(true);
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    onFormValueChanged() {
        this.isFormTouched = true;
    }
    onCancelForm() {
        this.routerService.navigateToPayeeList();
    }
}
BasePaymentEditFormContainerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BasePaymentEditFormContainerDirective, deps: [{ token: i1$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i1.ActivatedRoute }, { token: i1$1.BillpayDiscardChangesModalService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Directive });
BasePaymentEditFormContainerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BasePaymentEditFormContainerDirective, inputs: { accountNumberMasked: "accountNumberMasked", paymentDetailsTitle: "paymentDetailsTitle" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BasePaymentEditFormContainerDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i1.ActivatedRoute }, { type: i1$1.BillpayDiscardChangesModalService }, { type: PayBillsNavigationService }]; }, propDecorators: { accountNumberMasked: [{
                type: Input
            }], paymentDetailsTitle: [{
                type: Input
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayPaymentRecurringEditFormContainerComponent extends BasePaymentEditFormContainerDirective {
    /** @internal */
    constructor(dataService, stateService, route, discardModalService, routerService, parserService) {
        super(dataService, stateService, route, discardModalService, routerService);
        this.routerService = routerService;
        this.parserService = parserService;
        this.hasLoadingError = false;
        this.activatedRoute = route;
    }
    ngOnInit() {
        this.paymentRecurringState$ = combineLatest([
            this.id$,
            this.stateService.paymentState.pipe(map((state) => state === null || state === void 0 ? void 0 : state[0])),
            this.payeesAndAccounts$,
        ]).pipe(switchMap(([id, state, data]) => {
            return ((state && of(state)) ||
                this.dataService.getRecurringPayment(id).pipe(map(payment => payment &&
                    (data === null || data === void 0 ? void 0 : data.payeeSummaries) &&
                    this.parserService.paymentRecurringToFormState(payment, data.payeeSummaries)), catchError(() => {
                    this.hasLoadingError = true;
                    return of({});
                })));
        }));
    }
    onPaymentSubmitted(data, id) {
        var _a;
        this.stateService.isFormProcessing = true;
        this.stateService.updatePaymentState([data]);
        this.routerService.navigateToEditRecurringReview(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
    }
}
BillpayPaymentRecurringEditFormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditFormContainerComponent, deps: [{ token: i1$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i1.ActivatedRoute }, { token: i1$1.BillpayDiscardChangesModalService }, { token: PayBillsNavigationService }, { token: i1$1.BillpayPaymentParserService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentRecurringEditFormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditFormContainerComponent, selector: "bb-billpay-payment-recurring-edit-form-container", inputs: { frequencies: "frequencies" }, providers: [BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0, template: "<ng-container\n  *ngIf=\"{\n    state: paymentRecurringState$ | async,\n    payeeSummaries: (payeesAndAccounts$ | async)?.payeeSummaries,\n    accounts: (payeesAndAccounts$ | async)?.accounts,\n    paymentId: id$ | async\n  } as data\"\n>\n  <ng-container *ngIf=\"data.state; else loadingState\">\n    <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n      <bb-billpay-payment-form\n        [payeeSummaries]=\"data.payeeSummaries\"\n        [accounts]=\"data.accounts\"\n        [selectedPayeeId]=\"data.state?.payeeTo?.id\"\n        [paymentState]=\"data.state\"\n        [isEditPayment]=\"true\"\n        [paymentType]=\"'recurring'\"\n        (cancelPayment)=\"onCancelForm()\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        (submitPayment)=\"onPaymentSubmitted($event, data.paymentId)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"\n            Try to reload the page or contact support|Payee List loading\n            subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n          title=\"Payment information is not loading\"\n          i18n-title=\"\n            Payment information is not loading|Form List loading\n            title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <bb-billpay-payment-discard-changes-modal\n    *ngIf=\"isDiscardModalOpen\"\n    data-role=\"billpay-payment-edit-review-page-lose-changes-modal\"\n    (resolve)=\"onModalResolve($event)\"\n    title=\"Lose changes?\"\n    i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n    subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n    i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n    confirm-button-label=\"Lose changes\"\n    i18n-confirm-button-label=\"\n      confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n    cancel-button-label=\"Continue editing\"\n    i18n-cancel-button-label=\"\n      cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n  ></bb-billpay-payment-discard-changes-modal>\n</ng-container>\n", components: [{ type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditFormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-recurring-edit-form-container',
                    templateUrl: './billpay-payment-recurring-edit-form-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i1.ActivatedRoute }, { type: i1$1.BillpayDiscardChangesModalService }, { type: PayBillsNavigationService }, { type: i1$1.BillpayPaymentParserService }]; }, propDecorators: { frequencies: [{
                type: Input
            }] } });

class BillpayPaymentRecurringEditFormViewComponent {
    constructor(config, routerService) {
        this.config = config;
        this.routerService = routerService;
    }
    openModal() {
        return this.child.openModal();
    }
    goBack() {
        this.routerService.navigateToPayments();
    }
}
BillpayPaymentRecurringEditFormViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditFormViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentRecurringEditFormViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditFormViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentRecurringEditForm"], descendants: true }], ngImport: i0, template: `
    <div class="bb-block">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span i18n="button label|Back button@@pay-bills-journey.payments-list.back">Back to payments list</span>
      </button>
    </div>
    <bb-billpay-payment-recurring-edit-form-container
      [accountNumberMasked]="config.accountNumberMasked"
      [paymentDetailsTitle]="config.paymentDetailsTitle"
      [frequencies]="config.frequencies"
      #paymentRecurringEditForm
    ></bb-billpay-payment-recurring-edit-form-container>
  `, isInline: true, components: [{ type: BillpayPaymentRecurringEditFormContainerComponent, selector: "bb-billpay-payment-recurring-edit-form-container", inputs: ["frequencies"] }], directives: [{ type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditFormViewComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
    <div class="bb-block">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span i18n="button label|Back button@@pay-bills-journey.payments-list.back">Back to payments list</span>
      </button>
    </div>
    <bb-billpay-payment-recurring-edit-form-container
      [accountNumberMasked]="config.accountNumberMasked"
      [paymentDetailsTitle]="config.paymentDetailsTitle"
      [frequencies]="config.frequencies"
      #paymentRecurringEditForm
    ></bb-billpay-payment-recurring-edit-form-container>
  `,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                type: ViewChild,
                args: ['paymentRecurringEditForm']
            }] } });

class BasePaymentEditReviewContainerDirective {
    /** @internal */
    constructor(route, stateService, discardModalService, paymentParserService, routerService) {
        this.route = route;
        this.stateService = stateService;
        this.discardModalService = discardModalService;
        this.paymentParserService = paymentParserService;
        this.routerService = routerService;
        this.paymentError = false;
        this.hasDateError = false;
        this.paymentConfirm$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
        this.id$ = this.route.paramMap.pipe(first(), map(params => params.get('id') || ''));
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    ngOnInit() {
        combineLatest([this.stateService.paymentState, this.id$])
            .pipe(take(1))
            .subscribe(([payment, id]) => {
            this.payment = payment === null || payment === void 0 ? void 0 : payment[0];
            this.paymentReview = this.payment && this.paymentParserService.paymentFormStateToReview(this.payment);
            if (!this.payment) {
                this.navigateToForm(id);
            }
        });
        combineLatest([this.paymentConfirm$.pipe(filter(Boolean)), this.id$])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([payment, id]) => this.onPaymentConfirm(payment, id));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    confirmPayment(payment) {
        if (!payment)
            return;
        this.paymentConfirm$.next(payment);
    }
    openModal() {
        return this.paymentConfirm$.pipe(switchMap(payment => (payment ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && this.stateService.reset()));
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    cancel() {
        this.routerService.navigateToPayeeList();
    }
    get dismissTimeout() {
        if (this.dismissTimeoutValue === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.dismissTimeoutValue;
    }
}
BasePaymentEditReviewContainerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BasePaymentEditReviewContainerDirective, deps: [{ token: i1.ActivatedRoute }, { token: PayBillsStateService }, { token: i1$1.BillpayDiscardChangesModalService }, { token: i1$1.BillpayPaymentParserService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Directive });
BasePaymentEditReviewContainerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BasePaymentEditReviewContainerDirective, inputs: { dismissTimeoutValue: "dismissTimeoutValue", accountNumberMasked: "accountNumberMasked" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BasePaymentEditReviewContainerDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: PayBillsStateService }, { type: i1$1.BillpayDiscardChangesModalService }, { type: i1$1.BillpayPaymentParserService }, { type: PayBillsNavigationService }]; }, propDecorators: { dismissTimeoutValue: [{
                type: Input
            }], accountNumberMasked: [{
                type: Input
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], failAlert: [{
                type: ViewChild,
                args: ['failAlert']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayPaymentRecurringEditReviewContainerComponent extends BasePaymentEditReviewContainerDirective {
    /** @internal */
    constructor(route, stateService, discardModalService, paymentParserService, routerService, dataService, notificationService, cdRef) {
        super(route, stateService, discardModalService, paymentParserService, routerService);
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.cdRef = cdRef;
        this.activatedRoute = route;
    }
    navigateToForm(id) {
        var _a;
        this.routerService.navigateToEditRecurringForm(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
    }
    onPaymentConfirm(payment, id) {
        this.paymentError = false;
        this.hasDateError = false;
        this.dataService
            .updatePaymentRecurring(payment, id)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.routerService.navigateToPayments();
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }, response => {
            var _a, _b;
            this.paymentError = true;
            this.hasDateError = (_b = (_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.some((a) => a.key === 'billpay.api.invalidPaymentDate');
            this.cdRef.markForCheck();
            this.failAlert.nativeElement.scrollIntoView(false);
        });
    }
}
BillpayPaymentRecurringEditReviewContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditReviewContainerComponent, deps: [{ token: i1.ActivatedRoute }, { token: PayBillsStateService }, { token: i1$1.BillpayDiscardChangesModalService }, { token: i1$1.BillpayPaymentParserService }, { token: PayBillsNavigationService }, { token: i1$1.BillpayPaymentDataService }, { token: i5$2.NotificationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentRecurringEditReviewContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditReviewContainerComponent, selector: "bb-billpay-payment-recurring-edit-review-container", providers: [BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"payment\">\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-block bb-block--xl\">\n        <ng-container *ngTemplateOutlet=\"recurringEditReviewContent\"></ng-container>\n      </div>\n\n      <ng-container *ngTemplateOutlet=\"recurringEditReviewButtons\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-edit-form-page-lose-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Lose changes?\"\n  i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n  i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n  confirm-button-label=\"Lose changes\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue editing\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n\n<ng-template #recurringEditReviewContent let-payment>\n  <div #failAlert>\n    <bb-alert-ui\n      title=\"Failed to submit payment. Please try again later.\"\n      i18n-title=\"Failed to submit payment|Title for payment error@@billpay-payment-review-container.error-alert\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-message\"\n      *ngIf=\"paymentError && !hasDateError\"\n    >\n    </bb-alert-ui>\n    <bb-alert-ui\n      title=\"The date selected is invalid.\"\n      i18n-title=\"\n        Failed to submit payment date|Title for payment date error@@billpay-payment-review-container.error-date-alert\"\n      message=\"The payment cannot be scheduled on this date. Please select another date in the previous step.\"\n      i18n-message=\"Date payment error|Date error for payment@@billpay-payment-review.date-error-alert.message\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-date-message\"\n      *ngIf=\"paymentError && hasDateError\"\n    >\n    </bb-alert-ui>\n  </div>\n  <bb-billpay-payment-review-card [accountNumberMask]=\"accountNumberMasked\" [paymentReview]=\"paymentReview\">\n  </bb-billpay-payment-review-card>\n</ng-template>\n\n<ng-template #recurringEditReviewButtons>\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      data-role=\"confirm-payment-button\"\n      i18n=\"\n        Payment details confirm button|Label for confirm payment recurring\n        button@@billpay-payment-recurring-review.confirm\"\n      (click)=\"confirmPayment(payment)\"\n      class=\"bb-button-bar__button\"\n    >\n      Confirm payment\n    </button>\n    <button\n      *ngIf=\"id$ | async as paymentId\"\n      bbButton\n      data-role=\"edit-payment-button\"\n      i18n=\"\n        Payment details edit button|Label for edit payment payment recurring\n        button@@billpay-payment-recurring-review.edit\"\n      (click)=\"navigateToForm(paymentId)\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n    >\n      Edit payment\n    </button>\n    <button\n      bbButton\n      data-role=\"cancel-payment-button\"\n      i18n=\"\n        Payment details cancel button|Label for cancel payment payment recurring\n        button@@billpay-payment-recurring-review.cancel\"\n      (click)=\"cancel()\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n    >\n      Cancel\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <ng-container *ngIf=\"payment?.payeeTo as payee\">\n    <span\n      i18n=\"\n        payment notification message|Payment confirmation success notification\n        message@@billpay-payment-recurring-review.confirm.notification.message\"\n      >Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }} has been edited\n      successfully</span\n    >\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <span\n    i18n=\"\n      payment notification header|Payment confirmation success notification\n      header@@billpay-payment-recurring-review.confirm.notification.header\"\n    >Payment edited</span\n  >\n</ng-template>\n", components: [{ type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }, { type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1$1.BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: ["paymentReview", "accountNumberMask", "frequencyLabel"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditReviewContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-recurring-edit-review-container',
                    templateUrl: './billpay-payment-recurring-edit-review-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: PayBillsStateService }, { type: i1$1.BillpayDiscardChangesModalService }, { type: i1$1.BillpayPaymentParserService }, { type: PayBillsNavigationService }, { type: i1$1.BillpayPaymentDataService }, { type: i5$2.NotificationService }, { type: i0.ChangeDetectorRef }]; } });

class BillpayPaymentRecurringEditReviewViewComponent {
    constructor(config, routerService) {
        this.config = config;
        this.routerService = routerService;
    }
    openModal() {
        return this.child.openModal();
    }
    goBack() {
        this.routerService.navigateToPayments();
    }
}
BillpayPaymentRecurringEditReviewViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditReviewViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentRecurringEditReviewViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditReviewViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentRecurringEditReviewContainer"], descendants: true }], ngImport: i0, template: `
    <div class="bb-block">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span i18n="button label|Back button@@pay-bills-journey.payments-list.back">Back to payments list</span>
      </button>
    </div>
    <bb-billpay-payment-recurring-edit-review-container
      [accountNumberMasked]="config.accountNumberMasked"
      [dismissTimeoutValue]="config.notificationDismissTime"
      #paymentRecurringEditReviewContainer
    ></bb-billpay-payment-recurring-edit-review-container>
  `, isInline: true, components: [{ type: BillpayPaymentRecurringEditReviewContainerComponent, selector: "bb-billpay-payment-recurring-edit-review-container" }], directives: [{ type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditReviewViewComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
    <div class="bb-block">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span i18n="button label|Back button@@pay-bills-journey.payments-list.back">Back to payments list</span>
      </button>
    </div>
    <bb-billpay-payment-recurring-edit-review-container
      [accountNumberMasked]="config.accountNumberMasked"
      [dismissTimeoutValue]="config.notificationDismissTime"
      #paymentRecurringEditReviewContainer
    ></bb-billpay-payment-recurring-edit-review-container>
  `,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                type: ViewChild,
                args: ['paymentRecurringEditReviewContainer']
            }] } });

class BillpayPaymentOneOffEditFormContainerComponent extends BasePaymentEditFormContainerDirective {
    /** @internal */
    constructor(dataService, stateService, route, discardModalService, routerService, parserService) {
        super(dataService, stateService, route, discardModalService, routerService);
        this.routerService = routerService;
        this.parserService = parserService;
        this.hasLoadingError = false;
        this.activatedRoute = route;
    }
    ngOnInit() {
        this.paymentOneOffState$ = combineLatest([
            this.id$,
            this.stateService.paymentState.pipe(map((state) => state === null || state === void 0 ? void 0 : state[0])),
            this.payeesAndAccounts$,
        ]).pipe(switchMap(([id, state, payeesAndAccounts]) => state
            ? of(state)
            : this.dataService.getOneOffPayment(id).pipe(map(payment => payment &&
                payeesAndAccounts.payeeSummaries &&
                this.parserService.paymentOneOffToFormState(payment, payeesAndAccounts.payeeSummaries)), catchError(() => {
                this.hasLoadingError = true;
                return of({});
            }))));
    }
    onPaymentSubmitted(payment, id) {
        var _a;
        this.stateService.isFormProcessing = true;
        this.stateService.updatePaymentState([payment]);
        this.routerService.navigateToEditOneOffReview(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
    }
}
BillpayPaymentOneOffEditFormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditFormContainerComponent, deps: [{ token: i1$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i1.ActivatedRoute }, { token: i1$1.BillpayDiscardChangesModalService }, { token: PayBillsNavigationService }, { token: i1$1.BillpayPaymentParserService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentOneOffEditFormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditFormContainerComponent, selector: "bb-billpay-payment-one-off-edit-form-container", inputs: { frequencies: "frequencies" }, providers: [BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0, template: "<ng-container\n  *ngIf=\"{\n    state: paymentOneOffState$ | async,\n    paymentId: id$ | async,\n    accounts: (payeesAndAccounts$ | async)?.accounts,\n    payeeSummaries: (payeesAndAccounts$ | async)?.payeeSummaries\n  } as data\"\n>\n  <ng-container *ngIf=\"data.state; else loadingState\">\n    <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n      <bb-billpay-payment-form\n        [payeeSummaries]=\"data.payeeSummaries\"\n        [accounts]=\"data.accounts\"\n        [selectedPayeeId]=\"data.state?.payeeTo?.id\"\n        [paymentState]=\"data.state\"\n        [isEditPayment]=\"true\"\n        [paymentType]=\"'oneOff'\"\n        (cancelPayment)=\"onCancelForm()\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        (submitPayment)=\"onPaymentSubmitted($event, data.paymentId)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"\n            Try to reload the page or contact support|Payee List loading\n            subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n          title=\"Payment information is not loading\"\n          i18n-title=\"\n            Payment information is not loading|Form List loading\n            title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <bb-billpay-payment-discard-changes-modal\n    *ngIf=\"isDiscardModalOpen\"\n    data-role=\"billpay-payment-edit-form-page-lose-changes-modal\"\n    (resolve)=\"onModalResolve($event)\"\n    title=\"Lose changes?\"\n    i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n    subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n    i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n    confirm-button-label=\"Lose changes\"\n    i18n-confirm-button-label=\"\n      confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n    cancel-button-label=\"Continue editing\"\n    i18n-cancel-button-label=\"\n      cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n  ></bb-billpay-payment-discard-changes-modal>\n</ng-container>\n", components: [{ type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditFormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-one-off-edit-form-container',
                    templateUrl: './billpay-payment-one-off-edit-form-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i1.ActivatedRoute }, { type: i1$1.BillpayDiscardChangesModalService }, { type: PayBillsNavigationService }, { type: i1$1.BillpayPaymentParserService }]; }, propDecorators: { frequencies: [{
                type: Input
            }] } });

class BillpayPaymentOneOffEditFormViewComponent {
    constructor(config, routerService) {
        this.config = config;
        this.routerService = routerService;
    }
    openModal() {
        return this.child.openModal();
    }
    goBack() {
        this.routerService.navigateToPayments();
    }
}
BillpayPaymentOneOffEditFormViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditFormViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentOneOffEditFormViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditFormViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentOneOffEditForm"], descendants: true }], ngImport: i0, template: `
    <div class="bb-block">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span i18n="button label|Back button@@pay-bills-journey.payments-list.back">Back to payments list</span>
      </button>
    </div>
    <bb-billpay-payment-one-off-edit-form-container
      [accountNumberMasked]="config.accountNumberMasked"
      [paymentDetailsTitle]="config.paymentDetailsTitle"
      [frequencies]="config.frequencies"
      #paymentOneOffEditForm
    ></bb-billpay-payment-one-off-edit-form-container>
  `, isInline: true, components: [{ type: BillpayPaymentOneOffEditFormContainerComponent, selector: "bb-billpay-payment-one-off-edit-form-container", inputs: ["frequencies"] }], directives: [{ type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditFormViewComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
    <div class="bb-block">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span i18n="button label|Back button@@pay-bills-journey.payments-list.back">Back to payments list</span>
      </button>
    </div>
    <bb-billpay-payment-one-off-edit-form-container
      [accountNumberMasked]="config.accountNumberMasked"
      [paymentDetailsTitle]="config.paymentDetailsTitle"
      [frequencies]="config.frequencies"
      #paymentOneOffEditForm
    ></bb-billpay-payment-one-off-edit-form-container>
  `,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                type: ViewChild,
                args: ['paymentOneOffEditForm']
            }] } });

class BillpayPaymentOneOffEditReviewContainerComponent extends BasePaymentEditReviewContainerDirective {
    /** @internal */
    constructor(route, stateService, discardModalService, paymentParserService, routerService, dataService, notificationService, cdRef) {
        super(route, stateService, discardModalService, paymentParserService, routerService);
        this.routerService = routerService;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.cdRef = cdRef;
        this.activatedRoute = route;
    }
    navigateToForm(id) {
        var _a;
        this.routerService.navigateToEditOneOffForm(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
    }
    onPaymentConfirm(payment, id) {
        this.paymentError = false;
        this.hasDateError = false;
        this.dataService
            .updatePaymentOneOff(payment, id)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.routerService.navigateToPayments();
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }, error => {
            var _a, _b;
            this.paymentError = true;
            this.hasDateError = (_b = (_a = error.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.some((a) => a.key === 'billpay.api.invalidPaymentDate');
            this.cdRef.detectChanges();
            this.failAlert.nativeElement.scrollIntoView(false);
        });
    }
}
BillpayPaymentOneOffEditReviewContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditReviewContainerComponent, deps: [{ token: i1.ActivatedRoute }, { token: PayBillsStateService }, { token: i1$1.BillpayDiscardChangesModalService }, { token: i1$1.BillpayPaymentParserService }, { token: PayBillsNavigationService }, { token: i1$1.BillpayPaymentDataService }, { token: i5$2.NotificationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentOneOffEditReviewContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditReviewContainerComponent, selector: "bb-billpay-payment-one-off-edit-review-container", providers: [BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"payment\">\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-block bb-block--xl\">\n        <ng-container *ngTemplateOutlet=\"oneOffEditReviewContent\"></ng-container>\n      </div>\n\n      <ng-container *ngTemplateOutlet=\"oneOffEditReviewButtons\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-edit-review-page-lose-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Lose changes?\"\n  i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n  i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n  confirm-button-label=\"Lose changes\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue editing\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n\n<ng-template #oneOffEditReviewContent>\n  <div #failAlert>\n    <bb-alert-ui\n      title=\"Failed to submit payment. Please try again later.\"\n      i18n-title=\"Failed to submit payment|Title for payment error@@billpay-payment-review-container.error-alert\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-message\"\n      *ngIf=\"paymentError && !hasDateError\"\n    >\n    </bb-alert-ui>\n    <bb-alert-ui\n      title=\"The date selected is invalid.\"\n      i18n-title=\"\n        Failed to submit payment date|Title for payment date error@@billpay-payment-review-container.error-date-alert\"\n      message=\"The payment cannot be scheduled on this date. Please select another date in the previous step.\"\n      i18n-message=\"Date payment error|Date error for payment@@billpay-payment-review.date-error-alert.message\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-date-message\"\n      *ngIf=\"paymentError && hasDateError\"\n    >\n    </bb-alert-ui>\n  </div>\n  <bb-billpay-payment-review-card [accountNumberMask]=\"accountNumberMasked\" [paymentReview]=\"paymentReview\">\n  </bb-billpay-payment-review-card>\n</ng-template>\n\n<ng-template #oneOffEditReviewButtons>\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      data-role=\"confirm-payment-button\"\n      i18n=\"\n        Payment details confirm button|Label for confirm payment oneOff button@@billpay-payment-oneOff-review.confirm\"\n      (click)=\"confirmPayment(payment)\"\n      class=\"bb-button-bar__button\"\n    >\n      Confirm payment\n    </button>\n    <button\n      *ngIf=\"id$ | async as paymentId\"\n      bbButton\n      data-role=\"edit-payment-button\"\n      i18n=\"\n        Payment details edit button|Label for edit payment payment oneOff button@@billpay-payment-oneOff-review.edit\"\n      (click)=\"navigateToForm(paymentId)\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n    >\n      Edit payment\n    </button>\n    <button\n      bbButton\n      data-role=\"cancel-payment-button\"\n      i18n=\"\n        Payment details cancel button|Label for cancel payment payment oneOff\n        button@@billpay-payment-oneOff-review.cancel\"\n      (click)=\"cancel()\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n    >\n      Cancel\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <ng-container *ngIf=\"payment?.payeeTo as payee\">\n    <span\n      i18n=\"\n        payment notification message|Payment confirmation success notification\n        message@@billpay-payment-oneOff-review.confirm.notification.message\"\n      >Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }} has been edited\n      successfully</span\n    >\n  </ng-container>\n</ng-template>\n\n<ng-template notificationHeader>\n  <span\n    i18n=\"\n      payment notification header|Payment confirmation success notification\n      header@@billpay-payment-oneOff-review.confirm.notification.header\"\n    >Payment edited</span\n  >\n</ng-template>\n", components: [{ type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }, { type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1$1.BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: ["paymentReview", "accountNumberMask", "frequencyLabel"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditReviewContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-one-off-edit-review-container',
                    templateUrl: './billpay-payment-one-off-edit-review-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: PayBillsStateService }, { type: i1$1.BillpayDiscardChangesModalService }, { type: i1$1.BillpayPaymentParserService }, { type: PayBillsNavigationService }, { type: i1$1.BillpayPaymentDataService }, { type: i5$2.NotificationService }, { type: i0.ChangeDetectorRef }]; } });

class BillpayPaymentOneOffEditReviewViewComponent {
    constructor(config, routerService) {
        this.config = config;
        this.routerService = routerService;
    }
    openModal() {
        return this.child.openModal();
    }
    goBack() {
        this.routerService.navigateToPayments();
    }
}
BillpayPaymentOneOffEditReviewViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditReviewViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentOneOffEditReviewViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditReviewViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentOneOffEditReviewContainer"], descendants: true }], ngImport: i0, template: `
    <div class="bb-block">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span i18n="button label|Back button@@pay-bills-journey.payments-list.back">Back to payments list</span>
      </button>
    </div>
    <bb-billpay-payment-one-off-edit-review-container
      [accountNumberMasked]="config.accountNumberMasked"
      [dismissTimeoutValue]="config.notificationDismissTime"
      #paymentOneOffEditReviewContainer
    ></bb-billpay-payment-one-off-edit-review-container>
  `, isInline: true, components: [{ type: BillpayPaymentOneOffEditReviewContainerComponent, selector: "bb-billpay-payment-one-off-edit-review-container" }], directives: [{ type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditReviewViewComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
    <div class="bb-block">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="goBack()">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span i18n="button label|Back button@@pay-bills-journey.payments-list.back">Back to payments list</span>
      </button>
    </div>
    <bb-billpay-payment-one-off-edit-review-container
      [accountNumberMasked]="config.accountNumberMasked"
      [dismissTimeoutValue]="config.notificationDismissTime"
      #paymentOneOffEditReviewContainer
    ></bb-billpay-payment-one-off-edit-review-container>
  `,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                type: ViewChild,
                args: ['paymentOneOffEditReviewContainer']
            }] } });

class BillpayPaymentFrequencyComponent {
    constructor() {
        this.destroy$ = new Subject();
        this.id = BillpayUtilityService.generateId();
    }
    ngOnInit() {
        this.processFrequencyValueChanges();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    processFrequencyValueChanges() {
        if (!this.scheduleForm)
            return;
        const endTypeControl = this.scheduleForm.controls['endType'];
        const endDateControl = this.scheduleForm.controls['endDate'];
        const repeatControl = this.scheduleForm.controls['repeat'];
        const startDateControl = this.scheduleForm.controls['startDate'];
        const paymentServiceControl = this.scheduleForm.controls['paymentService'];
        const frequencyControl = this.scheduleForm.controls['frequency'];
        const paymentServiceDateControl = this.scheduleForm.controls['paymentServiceDate'];
        const sendDateControl = this.scheduleForm.controls['sendDate'];
        if (startDateControl && frequencyControl && paymentServiceControl && endTypeControl && endDateControl) {
            frequencyControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (value === FrequencyKeys.Once) {
                    paymentServiceControl.enable(formControlOptions);
                    sendDateControl.enable(formControlOptions);
                    paymentServiceControl.updateValueAndValidity();
                    paymentServiceDateControl.enable(formControlOptions);
                    endDateControl.disable(formControlOptions);
                    endTypeControl.disable(formControlOptions);
                    repeatControl.disable(formControlOptions);
                }
                else {
                    paymentServiceControl.disable(formControlOptions);
                    paymentServiceDateControl.disable(formControlOptions);
                    sendDateControl.disable(formControlOptions);
                    startDateControl.enable(formControlOptions);
                    endDateControl.enable(formControlOptions);
                    repeatControl.enable(formControlOptions);
                    endTypeControl.enable();
                }
            });
        }
    }
}
BillpayPaymentFrequencyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFrequencyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentFrequencyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFrequencyComponent, selector: "bb-billpay-payment-frequency", inputs: { scheduleForm: "scheduleForm", frequencies: "frequencies" }, ngImport: i0, template: "<div class=\"bb-form-field bb-form-field--md bb-block bb-block--md\">\n  <label\n    data-role=\"billpay-payment-frequency-label\"\n    class=\"form-label\"\n    i18n=\"@@billpay.billpay-payment-schedule.label.frequency\"\n    [id]=\"'billpay-payment-frequency-label' + id\"\n  >\n    Frequency\n  </label>\n  <bb-dropdown-single-select-ui\n    [formControl]=\"scheduleForm?.get('frequency')\"\n    [aria-labelledby]=\"'billpay-payment-frequency-label' + id\"\n    data-role=\"billpay-payment-frequency\"\n  >\n    <bb-dropdown-single-select-option-ui\n      *ngFor=\"let frequency of frequencies\"\n      [value]=\"frequency.value\"\n      [label]=\"frequency.name\"\n    >\n    </bb-dropdown-single-select-option-ui>\n  </bb-dropdown-single-select-ui>\n</div>\n", components: [{ type: i2$1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2$1.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }], directives: [{ type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFrequencyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-frequency',
                    templateUrl: './billpay-payment-frequency.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { scheduleForm: [{
                type: Input
            }], frequencies: [{
                type: Input
            }] } });

class BillpayPaymentStartDateComponent {
    constructor() {
        this.frequencyValues = FrequencyKeys;
        this.id = BillpayUtilityService.generateId();
    }
    get formValue() {
        var _a;
        return (_a = this.scheduleForm) === null || _a === void 0 ? void 0 : _a.getRawValue();
    }
}
BillpayPaymentStartDateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentStartDateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentStartDateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentStartDateComponent, selector: "bb-billpay-payment-start-date", inputs: { scheduleForm: "scheduleForm", frequencies: "frequencies", minDate: "minDate" }, ngImport: i0, template: "<div class=\"bb-block bb-block--md\" *ngIf=\"formValue?.frequency !== frequencyValues.Once\">\n  <label id=\"billpay-start-date-{{ id }}\" class=\"bb-text-bold\">\n    <span\n      *ngIf=\"true\"\n      i18n-label=\"@@billpay.billpay-payment-start-date.label.start\"\n      data-role=\"billpay-start-date-label\"\n      id=\"'billpay-start-date-' + {{ id }}\"\n    >\n      Start On\n    </span>\n  </label>\n  <div class=\"bb-form-field bb-form-field--sm\">\n    <bb-input-datepicker-ui\n      [aria-labelledby]=\"'billpay-start-date-' + id\"\n      [formControl]=\"scheduleForm?.get('startDate')\"\n      [minDate]=\"minDate\"\n      data-role=\"billpay-start-date-calendar\"\n      [datepickerDescribedby]=\"'billpay-start-date-error-{{ id }}'\"\n    ></bb-input-datepicker-ui>\n  </div>\n\n  <bb-input-validation-message-ui\n    id=\"billpay-start-date-error-{{ id }}\"\n    role=\"alert\"\n    [showErrors]=\"scheduleForm?.get('startDate')?.invalid && scheduleForm?.get('startDate')?.touched\"\n  >\n    <span\n      *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n      i18n=\"@@billpay.billpay-payment-start-date.error.required.startDate\"\n      data-role=\"missing-schedule-execution-date\"\n    >\n      Execution date is required.\n    </span>\n    <span\n      *ngIf=\"\n        scheduleForm?.get('startDate')?.errors?.pastDate || scheduleForm?.get('startDate')?.errors?.dateLessThanMinDate\n      \"\n      i18n=\"@@billpay.billpay-payment-start-date.error.pastDate.startDate\"\n      data-role=\"past-date-schedule-execution-date\"\n    >\n      Execution date could not be in a past.\n    </span>\n    <span\n      *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n      i18n=\"@@billpay.billpay-payment-start-date.error.invalidDateFormat\"\n      data-role=\"invalid-date-schedule-execution-date\"\n    >\n      Invalid date format.\n    </span>\n  </bb-input-validation-message-ui>\n</div>\n", components: [{ type: i4$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentStartDateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-start-date',
                    templateUrl: './billpay-payment-start-date.component.html',
                }]
        }], propDecorators: { scheduleForm: [{
                type: Input
            }], frequencies: [{
                type: Input
            }], minDate: [{
                type: Input
            }] } });

class BillpayPaymentEndDateComponent {
    constructor() {
        this.endTypes = EndTypes;
        this.frequencyValues = FrequencyKeys;
        this.id = BillpayUtilityService.generateId();
        this.destroy$ = new Subject();
    }
    get formValue() {
        var _a;
        return (_a = this.scheduleForm) === null || _a === void 0 ? void 0 : _a.getRawValue();
    }
    ngOnInit() {
        this.processEndTypeValueChanges();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    processEndTypeValueChanges() {
        if (!this.scheduleForm)
            return;
        const endTypeControl = this.scheduleForm.controls['endType'];
        const endDateControl = this.scheduleForm.controls['endDate'];
        const repeatControl = this.scheduleForm.controls['repeat'];
        if (endTypeControl && endDateControl && repeatControl) {
            endTypeControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                switch (value) {
                    case EndTypes.After: {
                        repeatControl.enable(formControlOptions);
                        endDateControl.disable(formControlOptions);
                        break;
                    }
                    case EndTypes.On: {
                        endDateControl.enable(formControlOptions);
                        repeatControl.disable(formControlOptions);
                        break;
                    }
                    case EndTypes.Never:
                    default: {
                        endDateControl.disable(formControlOptions);
                        repeatControl.disable(formControlOptions);
                        break;
                    }
                }
            });
        }
    }
}
BillpayPaymentEndDateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentEndDateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentEndDateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentEndDateComponent, selector: "bb-billpay-payment-end-date", inputs: { scheduleForm: "scheduleForm" }, ngImport: i0, template: "<div class=\"bb-block bb-block--md\" [hidden]=\"formValue?.frequency == frequencyValues.Once\">\n  <label\n    id=\"billpay-end-date-label-{{ id }}\"\n    data-role=\"billpay-form-end-date-label\"\n    class=\"bb-label\"\n    i18n=\"@@billpay.billpay-payment-end-date.label.ending\"\n  >\n    End\n  </label>\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div class=\"bb-stack__item\">\n      <bb-input-radio-group-ui\n        data-role=\"billpay-end-date-options\"\n        [required]=\"true\"\n        [aria-labelledby]=\"'billpay-end-date-label-' + id\"\n        [formControl]=\"scheduleForm?.get('endType')\"\n      >\n        <bb-input-radio-ui\n          [value]=\"endTypes.Never\"\n          label=\"Never\"\n          aria-invalid=\"false\"\n          data-role=\"ending-never-selector\"\n          i18n-label=\"\n            Schedule never ends|Label for an option to never end the payment\n            schedule@@billpay.billpay-payment-end-date.label.ending.never\"\n          role=\"radio\"\n        >\n        </bb-input-radio-ui>\n        <bb-input-radio-ui\n          [value]=\"endTypes.On\"\n          aria-invalid=\"false\"\n          [labelTemplate]=\"endingTemplate\"\n          data-role=\"ending-on-selector\"\n          role=\"radio\"\n        >\n        </bb-input-radio-ui>\n        <bb-input-radio-ui\n          [value]=\"endTypes.After\"\n          aria-invalid=\"false\"\n          data-role=\"ending-after-selector\"\n          [labelTemplate]=\"afterTemplate\"\n          role=\"radio\"\n        >\n        </bb-input-radio-ui>\n        <ng-template #endingTemplate>\n          <div class=\"bb-stack\">\n            <span\n              data-role=\"ending-date-on-label\"\n              class=\"bb-stack__item bb-stack__item--spacing-lg\"\n              i18n=\"@@billpay.billpay-payment-end-date.label.ending.on\"\n              id=\"billpay-end-date-on-{{ id }}\"\n              >On</span\n            >\n            <div class=\"bb-stack__item\">\n              <bb-input-datepicker-ui\n                [formControl]=\"scheduleForm?.get('endDate')\"\n                data-role=\"ending-end-date\"\n                i18n-aria-label=\"@@billpay.billpay-payment-end-date.label.end-date\"\n                aria-label=\"end-date\"\n                [minDate]=\"scheduleForm?.get('startDate')?.value\"\n                placement=\"top-right\"\n                datepickerDescribedby=\"billpay-end-date-on-{{ id }}\"\n                aria-labelledby=\"billpay-end-date-on-{{ id }}\"\n              ></bb-input-datepicker-ui>\n              <bb-input-validation-message-ui\n                role=\"alert\"\n                *ngIf=\"scheduleForm?.get('endDate') as control\"\n                [showErrors]=\"control?.invalid && control?.touched\"\n              >\n                <span\n                  *ngIf=\"control.errors?.pastDate || control.errors?.dateLessThanMinDate\"\n                  i18n=\"\n                    End date past date error text |Error past date message for End date input\n                    field@@billpay.billpay-payment-end-date.past-date-error\"\n                  data-role=\"past-date-ending-end-date\"\n                >\n                  End date could not be lower than start date.\n                </span>\n                <span\n                  *ngIf=\"control.errors?.invalidDateFormat\"\n                  i18n=\"@@billpay.billpay-payment-end-date.invalid-date-format-error\"\n                  data-role=\"invalid-date-schedule-end-date\"\n                >\n                  Invalid date format.\n                </span>\n                <span\n                  *ngIf=\"control.errors?.required\"\n                  i18n=\"@@billpay.billpay-payment-end-date.date-required-error\"\n                  data-role=\"required-date-schedule-end-date\"\n                >\n                  End date is required.\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </ng-template>\n        <ng-template #afterTemplate>\n          <div class=\"bb-stack\">\n            <span\n              class=\"bb-stack__item bb-stack__item--spacing-sm\"\n              i18n=\"@@billpay.billpay-payment-end-date.label.ending.after\"\n            >\n              After\n            </span>\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item bb-form-field bb-form-field--xs\">\n                  <bb-input-number-ui\n                    [formControl]=\"scheduleForm?.get('repeat')\"\n                    data-role=\"ending-occurrences\"\n                    aria-label=\"occurrences\"\n                  ></bb-input-number-ui>\n                </div>\n                <span class=\"bb-stack__item\" i18n-label=\"@@billpay.billpay-payment-end-date.label.ending.occurrences\">\n                  Occurrences\n                </span>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n      </bb-input-radio-group-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i4$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }], directives: [{ type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentEndDateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-end-date',
                    templateUrl: './billpay-payment-end-date.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { scheduleForm: [{
                type: Input
            }] } });

class BillpayPaymentCompactProductSelectorComponent {
    constructor() {
        this.selectItem = new EventEmitter();
    }
    onSelectItem(account) {
        this.selectItem.emit(account);
    }
}
BillpayPaymentCompactProductSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentCompactProductSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentCompactProductSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentCompactProductSelectorComponent, selector: "bb-billpay-payment-compact-product-selector", inputs: { paymentForm: "paymentForm", accounts: "accounts", productNumberFormat: "productNumberFormat" }, outputs: { selectItem: "selectItem" }, ngImport: i0, template: "<div class=\"bb-form-field bb-form-field--md\">\n  <label\n    i18n=\"@@bb-billpay-multiple-bills-list-item.product-selector.label\"\n    data-role=\"multiple-bills-form-from-account-label\"\n    >Pay From</label\n  >\n  <bb-product-selector-ui [autoClose]=\"true\" *ngIf=\"paymentForm?.get('accountFrom')?.value as selectedAccount\">\n    <ng-container bbDropdownToggle>\n      <ng-container *ngTemplateOutlet=\"productItemContent; context: { $implicit: selectedAccount }\"></ng-container>\n    </ng-container>\n    <ng-container bbDropdownMenu>\n      <ng-container *ngIf=\"accounts?.length\">\n        <button\n          *ngFor=\"let account of accounts\"\n          (click)=\"onSelectItem(account)\"\n          bbButton\n          color=\"unstyled\"\n          class=\"bb-product-selector__dropdown-item bb-billpay-multiple-bills-selector\"\n          data-role=\"product-selector-dropdown-item\"\n          [ngClass]=\"{\n            'bb-billpay-multiple-bills-selector--selected-bg': account.accountNumber === selectedAccount?.accountNumber\n          }\"\n        >\n          <ng-container *ngTemplateOutlet=\"productItemContent; context: { $implicit: account }\"></ng-container>\n        </button>\n      </ng-container>\n    </ng-container>\n  </bb-product-selector-ui>\n</div>\n\n<ng-template #productItemContent let-account>\n  <bb-ellipsis-ui [text]=\"account?.accountNickName\" data-role=\"compact-product-selector-account-name\"></bb-ellipsis-ui>\n  <div class=\"bb-account-info bb-text-default\">\n    <bb-ellipsis-ui\n      [text]=\"account?.accountNumber | paymentCardNumber: productNumberFormat\"\n      class=\"bb-account-info__product-number\"\n      data-role=\"compact-product-selector-account-number\"\n    ></bb-ellipsis-ui>\n  </div>\n  <bb-amount-ui\n    class=\"bb-subtitle bb-text-bold\"\n    [currency]=\"account?.accountBalance?.currencyCode\"\n    [amount]=\"account?.accountBalance?.amount\"\n    [mapCurrency]=\"true\"\n    data-role=\"compact-product-selector-amount\"\n  >\n  </bb-amount-ui>\n</ng-template>\n", components: [{ type: i5$1.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i2$2.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i3$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "paymentCardNumber": i6$3.PaymentCardNumberPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentCompactProductSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-compact-product-selector',
                    templateUrl: './billpay-payment-compact-product-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { paymentForm: [{
                type: Input
            }], accounts: [{
                type: Input
            }], productNumberFormat: [{
                type: Input
            }], selectItem: [{
                type: Output
            }] } });

class BillpayPaymentMultipleBillsListItemComponent extends BillpayPayeeSummaryItemBaseComponent {
    constructor(payeeDataService, dropdownButtonConfig, mediaQueryService, scheduleService, configService, navigationService) {
        super(payeeDataService, dropdownButtonConfig);
        this.mediaQueryService = mediaQueryService;
        this.scheduleService = scheduleService;
        this.configService = configService;
        this.navigationService = navigationService;
        this.isCollapsed = true;
        this.id = BillpayUtilityService.generateId();
        this.productNumberFormat = this.configService.productNumberFormat;
        this.frequencies = this.configService.frequencies;
    }
    get latestBill() {
        var _a, _b;
        return (_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.latestBill;
    }
    ngOnInit() {
        var _a, _b;
        this.minDate = this.scheduleService.estimatedPaymentServiceDate((_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.paymentServices, PaymentServicesTypes.Regular);
        this.syncPeerFields((_b = this.paymentForm) === null || _b === void 0 ? void 0 : _b.get('schedule.sendDate'));
    }
    // Sync peer datepicker fields that are duplicated for the sake of responsive designs
    syncPeerFields(formControl) {
        this.mediaQueryService
            .isMediaBreakpointMatches('max-width', 'lg')
            .pipe(takeUntil(this.destroy$), distinctUntilChanged())
            .subscribe(() => {
            formControl === null || formControl === void 0 ? void 0 : formControl.patchValue(formControl.value, { emitEvent: false, onlySelf: true });
        });
    }
    selectItem(account) {
        var _a;
        (_a = this.paymentForm) === null || _a === void 0 ? void 0 : _a.patchValue({ accountFrom: account });
    }
    handleEditPayee() {
        var _a;
        if (this.payeeSummary && !this.payeeSummary.electronic) {
            this.navigationService.navigateToEditManualPayee(this.payeeSummary.id);
        }
        else if ((_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.electronic) {
            this.navigationService.navigateToEditElectronicPayee(this.payeeSummary.id);
        }
    }
    handleViewSummary() {
        if (this.payeeSummary) {
            this.navigationService.navigateToPayeeSummary(this.payeeSummary.id);
        }
    }
    handleGetEbills() {
        if (this.payeeSummary) {
            this.navigationService.navigateToPayverisEbillEnrol(this.payeeSummary.id);
        }
    }
}
BillpayPaymentMultipleBillsListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsListItemComponent, deps: [{ token: i1$1.BillpayPayeeDataService }, { token: i2$3.NgbDropdownConfig }, { token: i3$3.MediaQueryService }, { token: i1$1.BillpayPaymentScheduleService }, { token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsListItemComponent, selector: "bb-billpay-multiple-bills-list-item", inputs: { payeeSummary: "payeeSummary", paymentForm: "paymentForm", accounts: "accounts", inheritedId: "inheritedId" }, usesInheritance: true, ngImport: i0, template: "<div class=\"bb-billpay-multiple-bills-list-item__content\">\n  <div class=\"bb-billpay-multiple-bills__grid-container\">\n    <div class=\"bb-billpay-multiple-bills__grid-item bb-stack__item bb-stack__item--spacing-sm\">\n      <ng-container *ngTemplateOutlet=\"payeeDescTemp\"></ng-container>\n    </div>\n    <div\n      class=\"bb-billpay-multiple-bills__grid-item bb-billpay-multiple-bills__grid-item--higher bb-text-align-center bb-d-none bb-d-lg-block\"\n      data-role=\"multiple-bills-list-titles-due-date\"\n    >\n      <span>{{ latestBill?.paymentDate | bbDate: 'MM/dd/y' }}</span>\n    </div>\n    <div\n      class=\"bb-text-align-left bb-text-align-right--lg-up bb-billpay-multiple-bills__grid-item bb-stack__item bb-stack__item--spacing-sm bb-billpay-multiple-bills__grid-item--second-row bb-billpay-multiple-bills__grid-item--higher\"\n      data-role=\"multiple-bills-minimum-amount-due\"\n    >\n      <bb-amount-ui\n        *ngIf=\"latestBill?.minAmountDue as minAmountDue\"\n        class=\"bb-text-bold\"\n        [currency]=\"minAmountDue.currencyCode || 'USD'\"\n        [amount]=\"minAmountDue.amount || 0\"\n      ></bb-amount-ui>\n    </div>\n    <div class=\"bb-billpay-multiple-bills__grid-item bb-d-none bb-d-lg-block bb-stack__item bb-stack__item--spacing-xs\">\n      <ng-container *ngTemplateOutlet=\"deliveryDateTemp\"></ng-container>\n    </div>\n    <div\n      class=\"bb-billpay-multiple-bills__grid-item bb-stack__item bb-stack__item--spacing-none bb-billpay-multiple-bills__grid-item--second-row\"\n    >\n      <ng-container *ngTemplateOutlet=\"amountInputTemp\"></ng-container>\n    </div>\n    <div\n      class=\"bb-billpay-multiple-bills__grid-item bb-billpay-multiple-bills__grid-item--higher bb-text-align-right bb-stack bb-stack--align-top\"\n    >\n      <div\n        class=\"bb-stack__item bb-stack__item--spacing-md bb-stack__item--push-right\"\n        data-role=\"multiple-bills-actions-list\"\n      >\n        <bb-dropdown-menu-ui\n          btnColor=\"text-link\"\n          container=\"body\"\n          icon=\"ellipsis-h\"\n          buttonSize=\"sm\"\n          iconSize=\"sm\"\n          [btnCircle]=\"true\"\n          [attr.aria-label]=\"'More options for ' + payeeName\"\n          i18n-attr.aria-label=\"\n            More options for payee aria label|Aria label for more payee\n            options@@bb-billpay-payee-list-item.aria-label.more-payee-options\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <ng-container *ngIf=\"payeeSummary?.ebill?.capable\">\n              <a\n              role=\"menuitem\"\n              target=\"_blank\"\n              data-role=\"stop-ebills-menu-item\"\n              class=\"dropdown-item bb-dropdown-single-select\"\n              *ngIf=\"showStopEbills\"\n              (bbKeyboardClick)=\"handleStopEbills($event)\"\n              >\n                <span\n                  i18n=\"\n                    Stop eBills dropdown list button|Button in the dropdown list for getting\n                    eBills@@bb-billpay-payee-summary-item.button.dropdown.stop-eBills\"\n                  >Stop eBills</span\n                >\n              </a>\n            </ng-container>\n\n            <a\n              role=\"menuitem\"\n              data-role=\"view-payee-menu-item\"\n              class=\"dropdown-item bb-dropdown-single-select\"\n              (bbKeyboardClick)=\"handleViewSummary($event)\"\n            >\n              <span\n                i18n=\"\n                  View payee dropdown list button|Button in the dropdown list for viewing the\n                  payee@@bb-billpay-payee-summary-item.button.dropdown.view-payee\"\n                >View payee</span\n              >\n            </a>\n            <a\n              role=\"menuitem\"\n              data-role=\"edit-payee-menu-item\"\n              class=\"dropdown-item bb-dropdown-single-select\"\n              (bbKeyboardClick)=\"handleEditPayee()\"\n            >\n              <span\n                i18n=\"\n                  Edit payee dropdown list button|Button in the dropdown list for editing the\n                  payee@@bb-billpay-payee-summary-item.button.dropdown.edit-payee\"\n                >Edit payee</span\n              >\n            </a>\n            <a\n              role=\"menuitem\"\n              data-role=\"delete-payee-menu-item\"\n              class=\"dropdown-item bb-dropdown-single-select\"\n              (bbKeyboardClick)=\"handleDeletePayee($event)\"\n            >\n              <span\n                i18n=\"\n                  Delete payee dropdown list button|Button in the dropdown list for deleting the\n                  payee@@bb-billpay-payee-summary-item.button.dropdown.delete-payee\"\n                >Delete payee</span\n              >\n            </a>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n      </div>\n      <div class=\"bb-stack__item\">\n        <button\n          bbButton\n          color=\"text-link\"\n          [circle]=\"true\"\n          aria-label=\"dropdown-button\"\n          buttonSize=\"sm\"\n          (click)=\"isCollapsed = !isCollapsed\"\n          [attr.aria-expanded]=\"!isCollapsed\"\n          [attr.aria-controls]=\"'collapse' + id\"\n          data-role=\"multiple-bills-item-dropdown-button\"\n        >\n          <bb-icon-ui\n            name=\"{{ isCollapsed ? 'toggle-down' : 'toggle-up' }}\"\n            data-role=\"schedule-toggle-icon\"\n          ></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div\n    [ngbCollapse]=\"isCollapsed\"\n    [attr.id]=\"'collapse' + id\"\n    class=\"bb-billpay-multiple-bills-list-item__collapsible-area\"\n  >\n    <div class=\"bb-stack bb-d-block bb-d-lg-flex\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-xl\">\n        <div class=\"bb-block bb-block--md\" *ngIf=\"accounts\">\n          <ng-container *ngTemplateOutlet=\"productSelectorTemp\"></ng-container>\n        </div>\n        <div class=\"bb-form-field bb-form-field--md bb-d-lg-none bb-block bb-block--md\">\n          <label\n            id=\"billpay-delivery-date-label-{{ id }}\"\n            i18n=\"@@bb-billpay-multiple-bills-list-item.sen-date.label\"\n            data-role=\"multiple-bills-form-delivery-date-label\"\n            >Est. Delivery</label\n          >\n          <ng-container *ngTemplateOutlet=\"deliveryDateTemp\"></ng-container>\n        </div>\n        <div>\n          <ng-container *ngTemplateOutlet=\"scheduleTemp\"></ng-container>\n        </div>\n        <div class=\"bb-block bb-block--sm\">\n          <ng-container *ngTemplateOutlet=\"memoTemp\"></ng-container>\n        </div>\n      </div>\n      <div class=\"bb-stack__item--align-top\" data-role=\"multiple-bills-outstanding-amount\">\n        <div class=\"bb-stack__item--align-top\">\n          <ng-container *ngIf=\"latestBill?.outstandingBalance as outstandingBalance\">\n            <label for=\"outstanding-amount-{{ id }}\" class=\"bb-text-semi-bold bb-block bb-block--sm\"\n              >Outstanding Amount</label\n            >\n            <br />\n            <bb-amount-ui\n              id=\"outstanding-amount-{{ id }}\"\n              class=\"bb-text-default\"\n              [currency]=\"outstandingBalance.currencyCode || 'USD'\"\n              [amount]=\"outstandingBalance.amount || 0\"\n            ></bb-amount-ui>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Delivery date  -->\n  <ng-template #deliveryDateTemp>\n    <bb-input-datepicker-ui\n      [formControl]=\"paymentForm?.get('schedule.sendDate')\"\n      [minDate]=\"minDate\"\n      data-role=\"once-delivery-date-calendar\"\n      aria-label=\"delivery-date\"\n      datepickerDescribedby=\"multiple-payments-start-date-tooltip-{{ inheritedId }}\"\n      aria-labelledby=\"billpay-delivery-date-label-{{ id }}\"\n    ></bb-input-datepicker-ui>\n  </ng-template>\n\n  <!-- Amount Input -->\n  <ng-template #amountInputTemp>\n    <bb-amount-input-ui\n      [formControl]=\"paymentForm?.get('amount.amount')\"\n      data-role=\"multiple-bills-amount-input\"\n      [autoDecimal]=\"true\"\n      wrapperClasses=\"bb-text-bold\"\n      [currency]=\"paymentForm?.get('amount.currency')?.value\"\n      placeholder=\"0.00\"\n      aria-labelledby=\"multiple-payments-amount-label-{{ inheritedId }}\"\n    ></bb-amount-input-ui>\n  </ng-template>\n\n  <!-- Memo -->\n  <ng-template #memoTemp>\n    <label class=\"bb-label\" data-role=\"multiple-bills-form-memo-label\" for=\"bb-billpay-payment-form-memo-{{ id }}\">\n      <span i18n=\"bb-billpay-multiple-bills-list-item.memo.label\">Memo</span>\n      <span class=\"bb-text-default bb-text-support\" i18n=\"@@bb-billpay-multiple-bills-list-item.memo.title-suffix\">\n        (Optional)\n      </span>\n    </label>\n    <br />\n    <span\n      class=\"bb-subtitle text-muted\"\n      i18n=\"@@bb-billpay-multiple-bills-list-item.memo.helper-text\"\n      data-role=\"multiple-bills-form-memo-desc\"\n      id=\"'bb-billpay-payment-form-memo-desc-'{{ id }}\"\n      >This will be printed on the check sent to the payee</span\n    >\n    <div class=\"bb-form-field bb-form-field--md\">\n      <bb-textarea-ui\n        [id]=\"'bb-billpay-payment-form-memo-' + id\"\n        [aria-describedby]=\"'bb-billpay-payment-form-memo-desc-' + id\"\n        [formControl]=\"paymentForm?.get('memo')\"\n        data-role=\"memo\"\n        [maxLength]=\"140\"\n        [rows]=\"2\"\n        [showCharCounter]=\"true\"\n      >\n      </bb-textarea-ui>\n    </div>\n  </ng-template>\n\n  <!-- Schedule -->\n  <ng-template #scheduleTemp>\n    <bb-billpay-payment-frequency\n      *ngIf=\"frequencies?.length\"\n      [scheduleForm]=\"paymentForm?.get('schedule')\"\n      [frequencies]=\"frequencies\"\n    ></bb-billpay-payment-frequency>\n    <bb-billpay-payment-start-date\n      [scheduleForm]=\"paymentForm?.get('schedule')\"\n      [frequencies]=\"frequencies\"\n      [minDate]=\"minDate\"\n    ></bb-billpay-payment-start-date>\n    <bb-billpay-payment-end-date [scheduleForm]=\"paymentForm?.get('schedule')\"></bb-billpay-payment-end-date>\n  </ng-template>\n\n  <ng-template #productSelectorTemp>\n    <bb-billpay-payment-compact-product-selector\n      [accounts]=\"accounts\"\n      [paymentForm]=\"paymentForm\"\n      (selectItem)=\"selectItem($event)\"\n      [productNumberFormat]=\"productNumberFormat\"\n    ></bb-billpay-payment-compact-product-selector>\n  </ng-template>\n\n  <!-- Payee infos -->\n  <ng-template #payeeDescTemp>\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <a\n          attr.aria-describedby=\"{{\n            [\n              ebillRetrieveErrorId,\n              noEbillsDueId,\n              ebillsAvailableId,\n              recurringPaymentScheduledIdId,\n              ebillPaymentScheduledId,\n              ebillDueOnId,\n              ebillSupportErrorId,\n              ebillUserActionErrorId,\n              ebillUnknownErrorId\n            ].join(' ')\n          }}\"\n          (bbKeyboardClick)=\"handleViewSummary($event)\"\n          role=\"link\"\n          tabindex=\"0\"\n          class=\"bb-text-bold bb-text-default\"\n          [attr.aria-label]=\"'view payee summary for ' + payeeName\"\n          data-role=\"payee-name\"\n          >{{ payeeName }}</a\n        >\n\n        <div *ngIf=\"isLatestEbillPaid\" class=\"bb-stack bb-stack--align-top\">\n          <bb-icon-ui\n            class=\"bb-stack__item bb-stack__item--spacing-none\"\n            data-role=\"ebill-payment-icon\"\n            name=\"savings-accounts\"\n            color=\"secondary\"\n          ></bb-icon-ui>\n          <span\n            id=\"{{ ebillPaymentScheduledId }}\"\n            class=\"bb-stack__item bb-text-support\"\n            data-role=\"ebill-payment-label\"\n            i18n=\"\n              eBill payment scheduled note|Text for the information that an eBill payment is\n              scheduled@@bb-billpay-multiple-bills-list-item.note.eBill-payment-scheduled\"\n            >eBill payment scheduled</span\n          >\n        </div>\n\n        <div *ngIf=\"areEbillsDue\" class=\"bb-stack bb-d-lg-none\">\n          <bb-icon-ui\n            class=\"bb-stack__item bb-stack__item--spacing-sm\"\n            data-role=\"receipt-icon\"\n            size=\"sm\"\n            name=\"receipt\"\n            color=\"secondary\"\n          ></bb-icon-ui>\n          <span\n            id=\"{{ ebillDueOnId }}\"\n            class=\"bb-stack__item bb-subtitle bb-text-support\"\n            data-role=\"due-date-label\"\n            *ngIf=\"latestBill?.paymentDate as ebillPaymentDate\"\n            i18n=\"\n              Ebill due note|Text for the information about the due\n              eBill@@bb-billpay-multiple-bills-list-item.note.ebill-due\"\n            >eBill due on {{ ebillPaymentDate | bbDate: 'MMM d' }}</span\n          >\n        </div>\n\n        <div *ngIf=\"areEbillsInErrorState\" class=\"bb-stack bb-stack--wrap bb-stack--align-top\">\n          <ng-container *ngIf=\"isEbillsErrorUpdateCredentials\">\n            <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n              <div class=\"bb-stack\">\n                <bb-icon-ui\n                  class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                  data-role=\"ebills-error-icon\"\n                  size=\"sm\"\n                  name=\"error-outline\"\n                  color=\"danger\"\n                ></bb-icon-ui>\n                <div\n                  id=\"{{ ebillRetrieveErrorId }}\"\n                  class=\"bb-stack__item bb-subtitle bb-text-danger\"\n                  data-role=\"ebills-error-cannot-be-retrieved-message\"\n                  i18n=\"\n                    Ebills cannot be retrieved error|Error text to display when the eBills cannot be retrieved due to\n                    invalid login\n                    credentials@@bb-billpay-multiple-bills-list-item.ebill-error.ebills-cannot-be-retrieved\"\n                >\n                  eBills cannot be retrieved.\n                </div>\n              </div>\n            </div>\n            <a\n              class=\"bb-stack__item\"\n              (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n              tabindex=\"0\"\n              role=\"button\"\n              class=\"bb-stack__item bb-subtitle\"\n              i18n=\"\n                Ebills update login credentials link|Button text to display for updating login credentials for the\n                payee@@bb-billpay-multiple-bills-list-item.ebill-link.update-login-credentials\"\n              attr.aria-label=\"Update login credentials for {{ payeeName }}\"\n              i18n-attr.aria-label=\"\n                Ebills update login credentials link aria label|Aria label for updating login credentials for the\n                payee@@bb-billpay-multiple-bills-list-item.ebill-link.aria-label.update-login-credentials\"\n              data-role=\"ebills-update-login-credentials-button\"\n              >Update login credentials\n            </a>\n          </ng-container>\n\n          <ng-container *ngIf=\"isEbillsErrorNotSupported\">\n            <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n              <div class=\"bb-stack\">\n                <bb-icon-ui\n                  class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                  data-role=\"ebills-error-icon\"\n                  size=\"sm\"\n                  name=\"error-outline\"\n                  color=\"danger\"\n                ></bb-icon-ui>\n                <div\n                  id=\"{{ ebillSupportErrorId }}\"\n                  class=\"bb-stack__item bb-subtitle bb-text-danger\"\n                  data-role=\"ebills-error-no-longer-supported-message\"\n                  i18n=\"\n                    Biller no longer supports ebills error|Error text to display when the payee no longer supports\n                    eBills@@bb-billpay-multiple-bills-list-item.ebill-error.ebills-no-longer-available\"\n                >\n                  This biller no longer supports eBills.\n                </div>\n              </div>\n            </div>\n            <a\n              (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n              tabindex=\"0\"\n              role=\"button\"\n              class=\"bb-stack__item bb-subtitle\"\n              attr.aria-label=\"Disable eBills for {{ payeeName }}\"\n              i18n-attr.aria-label=\"\n                Disable eBills link aria label|Aria label for Disable\n                eBills@@bb-billpay-multiple-bills-list-item.ebill-link.ebills-no-longer-available\"\n              i18n=\"\n                Disable eBills for this payee link|Button text to display to disable eBills for the\n                payee@@bb-billpay-multiple-bills-list-item.ebill-link.aria-label.ebills-no-longer-available\"\n              data-role=\"ebills-disabled-button\"\n              >Disable eBills for this payee\n            </a>\n          </ng-container>\n\n          <ng-container *ngIf=\"isEbillsErrorUserAction\">\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-stack\">\n                <bb-icon-ui\n                  class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                  data-role=\"ebills-error-icon\"\n                  name=\"error-outline\"\n                  size=\"sm\"\n                  color=\"danger\"\n                ></bb-icon-ui>\n                <div\n                  id=\"{{ ebillUserActionErrorId }}\"\n                  class=\"bb-stack__item bb-subtitle bb-text-danger\"\n                  data-role=\"ebills-error-login-to-biller-message\"\n                  i18n=\"\n                    Please log in to biller to resolve error|Error text to display when the user must log into the\n                    biller's site to resolve an\n                    issue@@bb-billpay-multiple-bills-list-item.ebill-error.log-in-to-bille-site\"\n                >\n                  Please log in to the biller's site to resolve an issue and continue receiving eBills for this payee.\n                </div>\n              </div>\n            </div>\n            <a\n              (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n              tabindex=\"0\"\n              role=\"button\"\n              class=\"bb-stack__item bb-subtitle\"\n              i18n=\"\n                Refresh status for payee link|Button text to display for refreshing the status of eBills for the\n                payee@@bb-billpay-multiple-bills-list-item.ebill-link.refresh-status\"\n              attr.aria-label=\"Refresh status for {{ payeeName }}\"\n              i18n-attr.aria-label=\"\n                Refresh status for payee link aria label|Aria label for Refresh\n                status@@bb-billpay-multiple-bills-list-item.ebill-link.aria-label.refresh-status\"\n              data-role=\"ebills-refresh-status-button\"\n              >Refresh status\n            </a>\n          </ng-container>\n\n          <ng-container *ngIf=\"isEbillsErrorUnknown\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui\n                class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                data-role=\"ebills-error-icon\"\n                name=\"error-outline\"\n                size=\"sm\"\n                color=\"danger\"\n              ></bb-icon-ui>\n              <div\n                attr.id=\"{{ ebillUnknownErrorId }}\"\n                class=\"bb-stack__item bb-subtitle bb-text-danger\"\n                data-role=\"ebills-error-try-again-later-message\"\n                i18n=\"\n                  Ebills cannot be retrieved error|Error text to display when eBills cannot currently be retreived for\n                  the payee@@bb-billpay-multiple-bills-list-item.ebill-error.ebills-cannot-be-retrieved\"\n              >\n                eBills cannot be retrieved, please try again later or contact support\n              </div>\n            </div>\n          </ng-container>\n        </div>\n\n        <div\n          *ngIf=\"areEbillsEnabledButNotDue\"\n          id=\"{{ noEbillsDueId }}\"\n          class=\"bb-text-support\"\n          data-role=\"no-due-date-label\"\n          i18n=\"\n            No eBill due note|Text for the information that no eBill is\n            due@@bb-billpay-multiple-bills-list-item.note.no-ebill-due\"\n        >\n          No eBills due\n        </div>\n\n        <div *ngIf=\"areEbillsAvailable\" class=\"bb-stack\">\n          <a data-role=\"get-ebills-menu-item\" (bbKeyboardClick)=\"handleGetEbills()\" tabindex=\"0\" role=\"button\" class=\"bb-stack__item bb-subtitle\">\n            <span\n              i18n=\"\n                Get eBills dropdown list button|Button in the dropdown list for getting\n                eBills@@bb-billpay-payee-summary-item.button.dropdown.get-eBills\"\n              >Get eBills</span\n            >\n          </a>\n        </div>\n\n        <div *ngIf=\"areRecurringPaymentsScheduled\" class=\"bb-stack bb-stack--align-top\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n            <bb-icon-ui data-role=\"recurring-payment-icon\" size=\"sm\" name=\"repeat\" color=\"secondary\"></bb-icon-ui>\n          </div>\n          <div\n            id=\"{{ recurringPaymentScheduledIdId }}\"\n            class=\"bb-stack__item bb-subtitle bb-text-support\"\n            data-role=\"recurring-payment-label\"\n            i18n=\"\n              Recurring payments scheduled note|Text for the information that recurring payments are\n              scheduled@@bb-billpay-multiple-bills-list-item.note.recurring-payments-scheduled\"\n          >\n            Recurring Payments Scheduled\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</div>\n", components: [{ type: i3$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i7$2.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i10.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i11.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: BillpayPaymentFrequencyComponent, selector: "bb-billpay-payment-frequency", inputs: ["scheduleForm", "frequencies"] }, { type: BillpayPaymentStartDateComponent, selector: "bb-billpay-payment-start-date", inputs: ["scheduleForm", "frequencies", "minDate"] }, { type: BillpayPaymentEndDateComponent, selector: "bb-billpay-payment-end-date", inputs: ["scheduleForm"] }, { type: BillpayPaymentCompactProductSelectorComponent, selector: "bb-billpay-payment-compact-product-selector", inputs: ["paymentForm", "accounts", "productNumberFormat"], outputs: ["selectItem"] }], directives: [{ type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7$2.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i17.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2$3.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }, { type: i4$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "bbDate": i8.BbDatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-multiple-bills-list-item',
                    templateUrl: './billpay-payment-multiple-bills-list-item.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.BillpayPayeeDataService }, { type: i2$3.NgbDropdownConfig }, { type: i3$3.MediaQueryService }, { type: i1$1.BillpayPaymentScheduleService }, { type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { payeeSummary: [{
                type: Input
            }], paymentForm: [{
                type: Input
            }], accounts: [{
                type: Input
            }], inheritedId: [{
                type: Input
            }] } });

class BillpayPaymentMultipleBillsListComponent {
    constructor() {
        this._payeeSummaries = [];
        this.isForEbills = false;
        this.id = BillpayUtilityService.generateId();
        /**
         * Indicates the way payees are sorted in the list
         */
        this.ascendingList = true;
    }
    set payeeSummaries(value) {
        this._payeeSummaries = this.sortByDueDate(value);
    }
    get payeeSummaries() {
        return this._payeeSummaries;
    }
    /**
     * Sorting payee summaries by due date. Initial view display ascending list(earliest date first)
     */
    sortByDueDate(payeeSummaries = this.payeeSummaries) {
        const payeeWithoutDate = payeeSummaries.filter(payee => { var _a, _b; return !((_b = (_a = payee.ebill) === null || _a === void 0 ? void 0 : _a.latestBill) === null || _b === void 0 ? void 0 : _b.paymentDate); });
        const payeeWithDate = payeeSummaries
            .filter(payee => { var _a, _b; return !!((_b = (_a = payee.ebill) === null || _a === void 0 ? void 0 : _a.latestBill) === null || _b === void 0 ? void 0 : _b.paymentDate); })
            .sort((payee1, payee2) => {
            var _a, _b, _c, _d;
            const date1 = new Date(((_b = (_a = payee1.ebill) === null || _a === void 0 ? void 0 : _a.latestBill) === null || _b === void 0 ? void 0 : _b.paymentDate) || '').getTime();
            const date2 = new Date(((_d = (_c = payee2.ebill) === null || _c === void 0 ? void 0 : _c.latestBill) === null || _d === void 0 ? void 0 : _d.paymentDate) || '').getTime();
            return this.ascendingList ? date1 - date2 : date2 - date1;
        });
        return [...payeeWithDate, ...payeeWithoutDate];
    }
    /**
     * Set sorted payees
     */
    onSortClick() {
        this.ascendingList = !this.ascendingList;
        this.payeeSummaries = this.sortByDueDate();
    }
    /**
     * Set sorted payees
     */
    trackByFunction(_index, payee) {
        var _a, _b;
        return (_b = (_a = payee.ebill) === null || _a === void 0 ? void 0 : _a.latestBill) === null || _b === void 0 ? void 0 : _b.paymentDate;
    }
}
BillpayPaymentMultipleBillsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsListComponent, selector: "bb-billpay-payment-multiple-bills-list", inputs: { payeeSummaries: "payeeSummaries", paymentsFormGroup: "paymentsFormGroup", accounts: "accounts", isForEbills: "isForEbills" }, ngImport: i0, template: "<form [formGroup]=\"paymentsFormGroup\" class=\"bb-billpay-multiple-bills-form\">\n  <div class=\"bb-d-none bb-d-lg-block bb-billpay-multiple-bills-form__titles\">\n    <div class=\"bb-billpay-multiple-bills__grid-container bb-stack\">\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-stack__item\">\n        <span\n          class=\"bb-subtitle bb-text-semi-bold\"\n          i18n=\"@@bb-billpay-multiple-bills-list.titles.payee\"\n          data-role=\"multiple-bills-list-titles-payee\"\n          >Payee</span\n        >\n      </div>\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-text-align-center\">\n        <div class=\"bb-inline-stack\" *ngIf=\"isForEbills\" data-role=\"multiple-bills-list-titles-due-date-label\">\n          <span\n            class=\"bb-subtitle bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"@@bb-billpay-multiple-bills-list.titles.due-date\"\n            >Due Date</span\n          >\n          <button bbButton color=\"unstyled\" (click)=\"onSortClick()\" aria-label=\"Sort by due date ascending\">\n            <bb-icon-ui name=\"{{ ascendingList ? 'caret-down' : 'caret-up' }}\" size=\"xs\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-stack__item bb-stack__item--spacing-sm bb-text-align-right\">\n        <span\n          *ngIf=\"isForEbills\"\n          class=\"bb-subtitle bb-text-semi-bold\"\n          i18n=\"@@bb-billpay-multiple-bills-list.titles.amount-due\"\n          data-role=\"multiple-bills-list-titles-amount-due\"\n          >Amount Due</span\n        >\n      </div>\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-stack bb-stack__item\">\n        <span\n          class=\"bb-subtitle bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n          i18n=\"@@bb-billpay-multiple-bills-list.titles.delivery-date\"\n          data-role=\"multiple-bills-list-titles-delivery-date\"\n          >Est. Delivery\n        </span>\n        <span\n          bbTooltip=\"The date we expect your payment to reach the payee. That may vary from payee to payee.\"\n          placement=\"top\"\n          [triggers]=\"'hover'\"\n          i18n=\"@@bb-billpay-multiple-bills-list.delivery-date.label.tooltip\"\n          class=\"bb-stack__item bb-d-flex\"\n          id=\"multiple-payments-start-date-tooltip-{{ id }}\"\n        >\n          <bb-icon-ui name=\"info\" size=\"sm\" class=\"bb-billpay-multiple-bills__tooltip\"></bb-icon-ui>\n        </span>\n      </div>\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-stack__item\">\n        <span\n          class=\"bb-subtitle bb-text-semi-bold\"\n          i18n=\"@@bb-billpay-multiple-bills-list.titles.amount\"\n          id=\"multiple-payments-amount-label-{{ id }}\"\n          data-role=\"multiple-bills-list-titles-amount\"\n          >Amount</span\n        >\n      </div>\n    </div>\n  </div>\n  <bb-billpay-multiple-bills-list-item\n    *ngFor=\"let payeeSummary of payeeSummaries; trackBy: trackByFunction\"\n    [payeeSummary]=\"payeeSummary\"\n    [paymentForm]=\"paymentsFormGroup?.controls[payeeSummary.id]\"\n    [accounts]=\"accounts\"\n    [inheritedId]=\"id\"\n    class=\"bb-billpay-multiple-bills-list-item\"\n  ></bb-billpay-multiple-bills-list-item>\n</form>\n", components: [{ type: i3$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: BillpayPaymentMultipleBillsListItemComponent, selector: "bb-billpay-multiple-bills-list-item", inputs: ["payeeSummary", "paymentForm", "accounts", "inheritedId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6$4.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills-list',
                    templateUrl: './billpay-payment-multiple-bills-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { payeeSummaries: [{
                type: Input
            }], paymentsFormGroup: [{
                type: Input
            }], accounts: [{
                type: Input
            }], isForEbills: [{
                type: Input
            }] } });

class BillpayPaymentMultipleBillsSumBoardComponent {
    constructor(configService) {
        this.configService = configService;
        this.currency = this.configService.paymentDefaultCurrency;
    }
}
BillpayPaymentMultipleBillsSumBoardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsSumBoardComponent, deps: [{ token: PayBillsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsSumBoardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsSumBoardComponent, selector: "bb-billpay-payment-multiple-bills-sum-board", inputs: { totalAmount: "totalAmount", actionButtons: "actionButtons", inheritedId: "inheritedId" }, ngImport: i0, template: "<div data-role=\"multiple-bills-sum-board\" class=\"bb-billpay-multiple-bills-board bb-stack\">\n  <div class=\"bb-stack bb-stack--wrap container\">\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <label\n        id=\"total-amount-label-{{ inheritedId }}\"\n        class=\"bb-text-default bb-subtitle bb-block bb-block--xs\"\n        i18n=\"label|amount label@@billpay-payments-journey.multiple-bills.board.amount-label\"\n        data-role=\"multiple-bills-sum-board-amount-label\"\n        >Total Amount</label\n      >\n      <br />\n      <bb-amount-ui\n        id=\"total-amount-{{ inheritedId }}\"\n        class=\"bb-heading-1\"\n        [currency]=\"currency\"\n        [amount]=\"totalAmount || 0\"\n        data-role=\"multiple-bills-sum-board-amount\"\n      ></bb-amount-ui>\n    </div>\n    <div class=\"bb-stack__item bb-billpay-multiple-bills-board-desc\" *ngIf=\"!totalAmount; else buttonsTemp\">\n      <div class=\"card card-sm card--shadowless bb-inline-stack bb-billpay-multiple-bills-board-desc__body\">\n        <div class=\"card-body\">\n          <span\n            bbTooltip=\"You can start by filling the amounts on the bills you would like to pay\"\n            i18n-bbbTooltip=\"\n              description|description\n              tooltip[classList]@@billpay-payments-journey.multiple-bills.board.description-tooltip\"\n            triggers=\"hover\"\n            placement=\"top\"\n            class=\"bb-stack bb-d-md-none\"\n          >\n            <bb-icon-ui name=\"dns\" size=\"md\" color=\"primary\"></bb-icon-ui>\n          </span>\n          <div class=\"bb-inline-stack bb-d-none bb-d-md-flex\">\n            <bb-icon-ui name=\"dns\" size=\"md\" class=\"bb-stack__item bb-stack__item--spacing-sm\"></bb-icon-ui>\n            <div\n              class=\"bb-subtitle\"\n              i18n=\"description|description text@@billpay-payments-journey.multiple-bills.board.description\"\n              data-role=\"multiple-bills-sum-board-description\"\n            >\n              You can start by filling the amounts on the bills you would like to pay\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #buttonsTemp>\n  <ng-container [ngTemplateOutlet]=\"actionButtons\"></ng-container>\n</ng-template>\n", components: [{ type: i3$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i3$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6$4.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsSumBoardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills-sum-board',
                    templateUrl: './billpay-payment-multiple-bills-sum-board.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }]; }, propDecorators: { totalAmount: [{
                type: Input
            }], actionButtons: [{
                type: Input
            }], inheritedId: [{
                type: Input
            }] } });

class BillpayPaymentMultipleBillsComponent {
    constructor(payeeDataService, fb, scheduleService, paymentStateService, navigationService, route, paymentDataService, configService, notificationService, discardModalService, cdRef) {
        this.payeeDataService = payeeDataService;
        this.fb = fb;
        this.scheduleService = scheduleService;
        this.paymentStateService = paymentStateService;
        this.navigationService = navigationService;
        this.route = route;
        this.paymentDataService = paymentDataService;
        this.configService = configService;
        this.notificationService = notificationService;
        this.discardModalService = discardModalService;
        this.cdRef = cdRef;
        this.paymentsFormGroup = this.fb.group({});
        this.totalAmount$ = this.paymentsFormGroup.valueChanges.pipe(map((forms) => Object.values(forms).reduce((acc, form) => acc + +form.amount.amount, 0)));
        this.selectedDeleteEbills$ = this.payeeDataService.selectedDeleteEbills;
        this.selectedDeletePayee$ = this.payeeDataService.selectedDeletePayee;
        this.destroy$ = new Subject();
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
        this.isDeleteModalOpened = false;
        this.isDeleteEbillsModalOpen = false;
        this.isNavigateModalOpened = false;
        this.notificationType = '';
        this.id = BillpayUtilityService.generateId();
        this.hasOvernightCheck = (services) => {
            return !!(services === null || services === void 0 ? void 0 : services.find(item => item.paymentServiceType === PaymentServicesTypes.Overnight));
        };
    }
    get isErrorState() {
        const payeeState = this.payeeDataService.payeesLoadingState;
        const accountState = this.paymentDataService.accountsLoadingState;
        return payeeState === 'error' || accountState === LoadingState.Error;
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    onWindowUnload($event) {
        if ((this.paymentsFormGroup.touched || this.paymentStateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    ngOnInit() {
        this.payeeSummariesByEbillObservable$ = this.payeeDataService.getPayees().pipe(tap(payeeSummariesByEbill => {
            const { ebillsEnabled = [], ebillsNotEnabled = [] } = payeeSummariesByEbill || {};
            this.payeeSummaries = [...ebillsEnabled, ...ebillsNotEnabled];
            this.createForm(this.payeeSummaries);
            if (this.paymentStateService.isFormProcessing) {
                this.patchPaymentDataToForm();
            }
        }), shareReplay());
        this.accounts$ = this.paymentDataService.getPayeesAndAccounts().pipe(map(data => {
            var _a;
            this.accounts = data.accounts;
            this.patchFormValue({ accountFrom: (_a = data.accounts) === null || _a === void 0 ? void 0 : _a[0] });
            return data.accounts;
        }), shareReplay());
        this.payeeDataService.selectedDeletePayee
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe(payee => (payee ? (this.isDeleteModalOpened = true) : this.openNavigateModal()));
        this.payeeDataService.selectedDeleteEbills
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe(payee => (payee ? (this.isDeleteEbillsModalOpen = true) : this.openNavigateModal()));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    handleClearForm() {
        this.patchFormValue();
        this.paymentsFormGroup.markAsUntouched();
        this.paymentStateService.isFormProcessing = false;
    }
    defaultFormState(payeeSummary) {
        var _a;
        const address = this.hasOvernightCheck(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices)
            ? payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.overnightDeliveryAddress
            : {};
        const paymentServiceDate = this.scheduleService.estimatedPaymentServiceDate(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices, PaymentServicesTypes.Regular);
        const minDate = this.scheduleService.estimatedPaymentServiceDate(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices, PaymentServicesTypes.Regular);
        return {
            accountFrom: (_a = this.accounts) === null || _a === void 0 ? void 0 : _a[0],
            payeeTo: payeeSummary,
            amount: {
                amount: ' ',
                currency: this.configService.paymentDefaultCurrency,
            },
            memo: '',
            overnightDeliveryAddress: {
                address1: address === null || address === void 0 ? void 0 : address.address1,
                address2: address === null || address === void 0 ? void 0 : address.address2,
                city: address === null || address === void 0 ? void 0 : address.city,
                state: address === null || address === void 0 ? void 0 : address.state,
                postalCode: address === null || address === void 0 ? void 0 : address.postalCode,
            },
            schedule: {
                frequency: FrequencyKeys.Once,
                startDate: minDate,
                sendDate: minDate,
                repeat: 1,
                endDate: minDate,
                endType: EndTypes.Never,
                paymentService: this.defaultPaymentService,
                paymentServiceDate,
                alertPendingCheckbox: false,
                alertSentCheckbox: false,
                alertLastPendingCheckbox: false,
            },
        };
    }
    areBothListsPresent({ ebillsEnabled, ebillsNotEnabled }) {
        return Boolean((ebillsEnabled === null || ebillsEnabled === void 0 ? void 0 : ebillsEnabled.length) && (ebillsNotEnabled === null || ebillsNotEnabled === void 0 ? void 0 : ebillsNotEnabled.length));
    }
    createForm(payeeSummaries) {
        payeeSummaries.forEach(payee => {
            var _a;
            const defaults = this.defaultFormState(payee);
            (_a = this.paymentsFormGroup) === null || _a === void 0 ? void 0 : _a.registerControl(payee.id, this.fb.group({
                accountFrom: [defaults.accountFrom],
                payeeTo: [defaults.payeeTo],
                amount: this.fb.group({
                    amount: [defaults.amount.amount],
                    currency: [defaults.amount.currency],
                }),
                memo: [defaults.memo],
                overnightDeliveryAddress: this.createOvernightAddressFormGroup(payee),
                schedule: this.fb.group({
                    frequency: defaults.schedule.frequency,
                    startDate: [defaults.schedule.startDate],
                    sendDate: [defaults.schedule.sendDate],
                    repeat: [defaults.schedule.repeat],
                    endDate: [defaults.schedule.endDate],
                    endType: [defaults.schedule.endType],
                    paymentService: [defaults.schedule.paymentService],
                    paymentServiceDate: [defaults.schedule.paymentServiceDate],
                    alertPendingCheckbox: [defaults.schedule.alertPendingCheckbox],
                    alertSentCheckbox: [defaults.schedule.alertSentCheckbox],
                    alertLastPendingCheckbox: [defaults.schedule.alertLastPendingCheckbox],
                }),
            }));
        });
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    createOvernightAddressFormGroup(payeeSummary) {
        const address = this.hasOvernightCheck(payeeSummary.paymentServices)
            ? payeeSummary.overnightDeliveryAddress
            : {};
        const paymentService = this.defaultPaymentService(payeeSummary);
        const isOvernightAddressDisabled = !(paymentService === null || paymentService === void 0 ? void 0 : paymentService.paymentServiceType) || paymentService.paymentServiceType !== PaymentServicesTypes.Overnight;
        return this.fb.group({
            address1: [
                {
                    value: address === null || address === void 0 ? void 0 : address.address1,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            address2: [
                {
                    value: address === null || address === void 0 ? void 0 : address.address2,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            city: [
                {
                    value: address === null || address === void 0 ? void 0 : address.city,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            state: [
                {
                    value: address === null || address === void 0 ? void 0 : address.state,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            postalCode: [
                {
                    value: address === null || address === void 0 ? void 0 : address.postalCode,
                    disabled: isOvernightAddressDisabled,
                },
            ],
        });
    }
    defaultPaymentService(payee) {
        var _a;
        return (_a = payee === null || payee === void 0 ? void 0 : payee.paymentServices) === null || _a === void 0 ? void 0 : _a.find((item) => item.paymentServiceType === PaymentServicesTypes.Regular);
    }
    handleSubmit() {
        const paymentForms = Object.entries(this.paymentsFormGroup.value)
            .filter(([_id, form]) => !!+form.amount.amount)
            .map(([_id, form]) => this.processFormData(form));
        this.paymentStateService.isFormProcessing = true;
        this.paymentStateService.updatePaymentState(paymentForms);
        this.navigationService.navigateToReview({ relativeTo: this.route.parent });
    }
    processFormData(data) {
        const startDate = data.schedule.frequency === FrequencyKeys.Once ? data.schedule.sendDate : data.schedule.startDate;
        switch (data.schedule.endType) {
            case EndTypes.After:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '', endDate: new Date(this.scheduleService.estimatedEndDate(data.schedule.startDate, data.schedule.frequency, data.schedule.repeat)).toISOString() }) });
            case EndTypes.On:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '', repeat: this.scheduleService.estimatedOccurences(data.schedule.startDate, data.schedule.endDate || data.schedule.startDate, data.schedule.frequency) }) });
            default:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '' }) });
        }
    }
    patchFormValue(value) {
        var _a;
        (_a = this.payeeSummaries) === null || _a === void 0 ? void 0 : _a.forEach(payee => {
            const formValue = value || this.defaultFormState(payee);
            this.paymentsFormGroup.controls[payee.id].patchValue(formValue);
        });
    }
    onDeleteEbills(resolve) {
        this.isDeleteEbillsModalOpen = false;
        if (resolve) {
            this.deleteEbills()
                .pipe(take(1))
                .subscribe(() => {
                this.deletionNotify('ebills');
            });
        }
    }
    onDeletePayee(resolve) {
        this.isDeleteModalOpened = false;
        if (resolve) {
            this.deletePayee()
                .pipe(take(1))
                .subscribe(() => {
                this.deletionNotify('delete');
            });
        }
    }
    onNavigateToPayments(hasNavigated) {
        if (hasNavigated) {
            this.navigationService.navigateToPayments();
        }
        this.isNavigateModalOpened = false;
    }
    deletionNotify(type) {
        this.payeeDataService.reloadPayees();
        this.notificationType = type;
        this.notificationService.showNotification({
            header: this.notificationHeaderTemplate,
            message: this.notificationMessageTemplate,
            modifier: 'success',
            ttl: this.configService.notificationDismissTime,
        });
    }
    openNavigateModal() {
        this.isNavigateModalOpened = true;
    }
    openModal() {
        this.cdRef.markForCheck();
        return this.paymentsFormGroup.touched || this.paymentStateService.isFormProcessing
            ? this.discardModalService.openModal()
            : of(true);
    }
    patchPaymentDataToForm() {
        this.paymentStateService.paymentState.pipe(take(1)).subscribe(paymentsState => {
            if (paymentsState) {
                paymentsState.forEach(payment => {
                    var _a;
                    (_a = this.paymentsFormGroup.get(payment.payeeTo.id)) === null || _a === void 0 ? void 0 : _a.patchValue(payment);
                });
            }
        });
    }
    deletePayee() {
        return this.payeeDataService.selectedDeletePayee.pipe(switchMap((payee) => payee ? this.payeeDataService.deletePayee(payee.id, payee.electronic) : of()));
    }
    deleteEbills() {
        return this.payeeDataService.selectedDeleteEbills.pipe(switchMap((payee) => (payee ? this.payeeDataService.deleteEbills(payee.id) : of())));
    }
}
BillpayPaymentMultipleBillsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsComponent, deps: [{ token: i1$1.BillpayPayeeDataService }, { token: i1$2.FormBuilder }, { token: i1$1.BillpayPaymentScheduleService }, { token: PayBillsStateService }, { token: PayBillsNavigationService }, { token: i1.ActivatedRoute }, { token: i1$1.BillpayPaymentDataService }, { token: PayBillsJourneyConfigService }, { token: i5$2.NotificationService }, { token: i1$1.BillpayDiscardChangesModalService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsComponent, selector: "bb-billpay-payment-multiple-bills", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"!isErrorState; else errorState\">\n  <ng-container\n    *ngIf=\"(accounts$ | async) && payeeSummariesByEbillObservable$ | async as ebillGroupedData; else loadingState\"\n  >\n    <ng-container\n      *ngIf=\"\n        (ebillGroupedData.ebillsEnabled.length || ebillGroupedData.ebillsNotEnabled.length) &&\n          (accounts$ | async)?.length;\n        else emptyState\n      \"\n    >\n      <div class=\"bb-billpay-multiple-bills\">\n        <div\n          class=\"bb-block bb-block--lg\"\n          *ngIf=\"ebillGroupedData.ebillsEnabled.length\"\n          data-role=\"payees-with-active-e-bills-list\"\n        >\n          <div class=\"card card-lg\">\n            <div class=\"card-body\">\n              <div class=\"bb-block bb-block--lg\">\n                <bb-header-ui\n                  headingType=\"h2\"\n                  *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                  data-role=\"sub-header\"\n                  heading=\"Payees with Active eBills\"\n                  i18n-heading=\"\n                    Payees with eBills title|Title for the list of payees with eBills\n                    enabled@@billpay-payments-journey.multiple-bills.title.payees-with-ebills\"\n                >\n                </bb-header-ui>\n              </div>\n              <bb-billpay-payment-multiple-bills-list\n                [paymentsFormGroup]=\"paymentsFormGroup\"\n                [payeeSummaries]=\"ebillGroupedData.ebillsEnabled\"\n                [accounts]=\"accounts$ | async\"\n                [isForEbills]=\"true\"\n              ></bb-billpay-payment-multiple-bills-list>\n            </div>\n          </div>\n        </div>\n\n        <div\n          class=\"bb-billpay-multiple-bills-other-payees-card card card-lg\"\n          data-role=\"all-other-payees-list\"\n          *ngIf=\"ebillGroupedData.ebillsNotEnabled.length\"\n        >\n          <div class=\"card-body\">\n            <div class=\"bb-block bb-block--lg\">\n              <bb-header-ui\n                headingType=\"h2\"\n                *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                data-role=\"sub-header\"\n                heading=\"All Other Payees\"\n                i18n-heading=\"\n                  Payees without eBills title|Title for the list of payees that do not have eBills\n                  enabled@@billpay-payments-journey.multiple-bills.title.other-payees\"\n              >\n              </bb-header-ui>\n            </div>\n            <bb-billpay-payment-multiple-bills-list\n              [paymentsFormGroup]=\"paymentsFormGroup\"\n              [payeeSummaries]=\"ebillGroupedData.ebillsNotEnabled\"\n              [accounts]=\"accounts$ | async\"\n            ></bb-billpay-payment-multiple-bills-list>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payment-multiple-bills-sum-board\n  [totalAmount]=\"totalAmount$ | async\"\n  [actionButtons]=\"actionButtons\"\n  [inheritedId]=\"id\"\n></bb-billpay-payment-multiple-bills-sum-board>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"assignment-ind\"\n        subtitle=\"Add a payee to make a bill payment\"\n        i18n-subtitle=\"\n          Add a payee to make a bill payment|Payee List no payees\n          subtitle@@bb-billpay-manage-widget-ang.bb-empty-state-ui.subtitle\"\n        title=\"No Payees\"\n        i18n-title=\"\n          No payees state text|Payee List no payees\n          title@@billpay-payments-journey.multiple-bills.bb-empty-state-ui.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error-outline\"\n        subtitle=\"Try to reload the page or contact support\"\n        i18n-subtitle=\"\n          Try to reload the page or contact the support.|Payee List loading\n          subtitle@@bb-billpay-payee-list-widget-ang.loading.subtitle\"\n        title=\"Payee list is not loading\"\n        i18n-title=\"Payee list is not loading|Payee List loading title@@bb-billpay-payee-list-widget-ang.loading.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #actionButtons>\n  <div>\n    <div class=\"bb-stack\">\n      <button\n        bbButton\n        color=\"link\"\n        class=\"bb-stack__item bb-stack__item--spacing-md\"\n        (click)=\"handleClearForm()\"\n        data-role=\"multiple-bills-clear-button\"\n        i18n=\"@@billpay-payments-journey.multiple-bills.board.clear-button\"\n      >\n        Clear All\n      </button>\n      <button\n        bbButton\n        color=\"primary\"\n        class=\"bb-button-bar__button bb-stack__item bb-stack__item--spacing-none\"\n        data-role=\"multiple-bills-confirm-button\"\n        i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button\"\n        attr.aria-describedby=\"total-amount-label-{{ id }}  total-amount-{{ id }}\"\n        (click)=\"handleSubmit()\"\n      >\n        Confirm Payment\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<bb-billpay-payee-delete-modal\n  *ngIf=\"isDeleteModalOpened\"\n  (resolve)=\"onDeletePayee($event)\"\n></bb-billpay-payee-delete-modal>\n\n<bb-billpay-ebills-delete-modal\n  *ngIf=\"isDeleteEbillsModalOpen\"\n  (resolve)=\"onDeleteEbills($event)\"\n></bb-billpay-ebills-delete-modal>\n\n<bb-billpay-payee-navigate-modal\n  *ngIf=\"isNavigateModalOpened\"\n  (resolve)=\"onNavigateToPayments($event)\"\n></bb-billpay-payee-navigate-modal>\n\n<ng-template #notificationMessage>\n  <div [ngSwitch]=\"notificationType\">\n    <div *ngSwitchCase=\"'ebills'\">\n      <span\n        *ngIf=\"selectedDeleteEbills$ | async as payee\"\n        i18n=\"\n          stop ebill notification message|Payee stop ebill confirmation success notification\n          message@@billpay-payee-list.stop-ebill-confirm.notification.message\"\n        >eBills for {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been stopped\n        successfully</span\n      >\n    </div>\n    <div *ngSwitchCase=\"'delete'\">\n      <span\n        *ngIf=\"selectedDeletePayee$ | async as payee\"\n        i18n=\"\n          delete payee notification message|Payee delete confirmation success notification\n          message@@billpay-payee-list.delete-payee-confirm.notification.message\"\n        >The payee {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been deleted\n        successfully</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <div [ngSwitch]=\"notificationType\">\n    <span\n      *ngSwitchCase=\"'ebills'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        eBills stopped notification header|eBills stopped confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >eBills stopped</span\n    >\n    <span\n      *ngSwitchCase=\"'delete'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        delete payee notification header|Payee delete confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >Payee deleted</span\n    >\n  </div>\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel Bill Payments?\"\n  i18n-title=\"Discard changes modal header@@billpay.multiple-bills.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel bill payments? Entered data will be lost.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.multiple-bills.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.multiple-bills.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.multiple-bills.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentMultipleBillsListComponent, selector: "bb-billpay-payment-multiple-bills-list", inputs: ["payeeSummaries", "paymentsFormGroup", "accounts", "isForEbills"] }, { type: BillpayPaymentMultipleBillsSumBoardComponent, selector: "bb-billpay-payment-multiple-bills-sum-board", inputs: ["totalAmount", "actionButtons", "inheritedId"] }, { type: i6$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i1$1.ӨBillpayPayeeDeleteModalComponent, selector: "bb-billpay-payee-delete-modal", outputs: ["resolve"] }, { type: i1$1.ӨBillpayEbillsDeleteModalComponent, selector: "bb-billpay-ebills-delete-modal", outputs: ["resolve"] }, { type: i1$1.ӨBillpayPayeeNavigateModalComponent, selector: "bb-billpay-payee-navigate-modal", outputs: ["resolve"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills',
                    templateUrl: './billpay-payment-multiple-bills.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.BillpayPayeeDataService }, { type: i1$2.FormBuilder }, { type: i1$1.BillpayPaymentScheduleService }, { type: PayBillsStateService }, { type: PayBillsNavigationService }, { type: i1.ActivatedRoute }, { type: i1$1.BillpayPaymentDataService }, { type: PayBillsJourneyConfigService }, { type: i5$2.NotificationService }, { type: i1$1.BillpayDiscardChangesModalService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayPaymentMultipleBillsViewComponent {
    constructor(navigationService) {
        this.navigationService = navigationService;
    }
    openModal() {
        return this.child.openModal();
    }
    addPayee() {
        var _a;
        (_a = this.navigationService) === null || _a === void 0 ? void 0 : _a.navigateToAddPayee();
    }
}
BillpayPaymentMultipleBillsViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsViewComponent, deps: [{ token: PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsViewComponent, selector: "ng-component", providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "child", first: true, predicate: ["multipleBillsReview"], descendants: true }], ngImport: i0, template: `
    <div class="bb-stack bb-block bb-block--lg">
      <div class="bb-stack__item bb-stack__item--fill">
        <bb-header-ui
          headingType="h1"
          heading="Pay Bills"
          i18n-heading="@@pay-bills-journey.title.pay-bills"
          data-role="multiple-bills-widget-title"
        >
        </bb-header-ui>
        <p i18n="@@pay-bills-journey.pay-payee.header-description" data-role="multiple-bills-widget-title-info">
          Add payees if you would like to pay a single bill or multiple bills
        </p>
      </div>
      <div class="bb-stack__item">
        <button bbButton color="secondary" data-role="pay-a-bill-add-payee" (click)="addPayee()">
          <i class="bb-icon bb-icon-add"></i>
          <span class="bb-accounts-overview-table__header-row" i18n="@@pay-bills-journey.pay-bills.add-payee-button"
            >Add Payee</span
          >
        </button>
      </div>
    </div>
    <bb-billpay-payment-multiple-bills #multipleBillsReview></bb-billpay-payment-multiple-bills>
  `, isInline: true, components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentMultipleBillsComponent, selector: "bb-billpay-payment-multiple-bills" }], directives: [{ type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsViewComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
    <div class="bb-stack bb-block bb-block--lg">
      <div class="bb-stack__item bb-stack__item--fill">
        <bb-header-ui
          headingType="h1"
          heading="Pay Bills"
          i18n-heading="@@pay-bills-journey.title.pay-bills"
          data-role="multiple-bills-widget-title"
        >
        </bb-header-ui>
        <p i18n="@@pay-bills-journey.pay-payee.header-description" data-role="multiple-bills-widget-title-info">
          Add payees if you would like to pay a single bill or multiple bills
        </p>
      </div>
      <div class="bb-stack__item">
        <button bbButton color="secondary" data-role="pay-a-bill-add-payee" (click)="addPayee()">
          <i class="bb-icon bb-icon-add"></i>
          <span class="bb-accounts-overview-table__header-row" i18n="@@pay-bills-journey.pay-bills.add-payee-button"
            >Add Payee</span
          >
        </button>
      </div>
    </div>
    <bb-billpay-payment-multiple-bills #multipleBillsReview></bb-billpay-payment-multiple-bills>
  `,
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                type: ViewChild,
                args: ['multipleBillsReview']
            }] } });

class BillpayPaymentMultipleBillsReviewItemComponent {
    constructor(scheduleService, configservice) {
        this.scheduleService = scheduleService;
        this.configservice = configservice;
        this.isCollapsed = true;
        this.id = BillpayUtilityService.generateId();
    }
    get endDate() {
        var _a;
        const { startDate, repeat, frequency } = ((_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule) || {};
        const date = startDate || new Date().toISOString();
        return this.scheduleService.estimatedEndDate(date, frequency, repeat);
    }
    get frequencyLabel() {
        const frequency = this.configservice.frequencies.find(frequency => { var _a; return ((_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule.frequency) === frequency.value; });
        return $localize `:@@pay-bill-journey.review-item.frequency-label:${(frequency === null || frequency === void 0 ? void 0 : frequency.name) || ''}`;
    }
}
BillpayPaymentMultipleBillsReviewItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewItemComponent, deps: [{ token: i1$1.BillpayPaymentScheduleService }, { token: PayBillsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsReviewItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewItemComponent, selector: "[bb-billpay-payment-multiple-bills-review-item]", inputs: { payment: "payment", last: "last" }, ngImport: i0, template: "<tr class=\"billpay-multipl-ebills-review__tr\" [class.billpay-multipl-ebills-review__item--expanded]=\"!isCollapsed\">\n  <td class=\"billpay-multipl-ebills-review__cell bb-d-block bb-d-md-table-cell\">\n    <ng-container *ngIf=\"payment?.hasOwnProperty('succeeded'); else payeeTmp\">\n      <div class=\"bb-stack\">\n        <bb-icon-ui\n          class=\"bb-stack__item bb-stack__item--spacing-md\"\n          [name]=\"payment?.succeeded ? 'success' : 'error-outline'\"\n          size=\"md\"\n          [color]=\"payment?.succeeded ? 'success' : 'danger'\"\n        ></bb-icon-ui>\n        <div class=\"bb-stack__item\">\n          <ng-container *ngTemplateOutlet=\"payeeNameTmp\"></ng-container>\n        </div>\n      </div>\n    </ng-container>\n  </td>\n  <td class=\"billpay-multipl-ebills-review__cell bb-d-none bb-d-md-table-cell\">\n    {{ payment?.accountFrom.accountNickName }} (*{{ payment?.accountFrom.accountNumber | slice: -4 }})\n  </td>\n  <td class=\"billpay-multipl-ebills-review__cell bb-d-none bb-d-md-table-cell\">\n    {{ payment?.schedule?.startDate | bbDate: 'MM/dd/yyyy' }}\n  </td>\n  <td class=\"billpay-multipl-ebills-review__cell bb-d-none bb-d-md-table-cell\">\n    <ng-container *ngTemplateOutlet=\"amountTmp; context: payment\"></ng-container>\n  </td>\n  <td class=\"billpay-multipl-ebills-review__cell bb-text-align-right\">\n    <button\n      bbButton\n      class=\"billpay-multipl-ebills-review__toggler\"\n      buttonSize=\"sm\"\n      color=\"text-link\"\n      [circle]=\"true\"\n      aria-label=\"dropdown-button\"\n      data-role=\"multipl-ebills-review-toggler\"\n      (click)=\"isCollapsed = !isCollapsed\"\n      [attr.aria-expanded]=\"!isCollapsed\"\n      [attr.aria-controls]=\"'collapse' + id\"\n    >\n      <bb-icon-ui\n        class=\"bb-stack__item\"\n        [name]=\"isCollapsed ? 'toggle-down' : 'toggle-up'\"\n        size=\"md\"\n        data-role=\"toggle-icon\"\n      ></bb-icon-ui>\n    </button>\n  </td>\n</tr>\n<tr *ngIf=\"payment?.hasOwnProperty('succeeded')\" class=\"billpay-multipl-ebills-review__tr\">\n  <td *ngIf=\"!payment?.succeeded\" colspan=\"5\" class=\"billpay-multipl-ebills-review__cell\">\n    <span class=\"bb-text-danger\" i18n=\"@@bb-billpay-multiple-bills-review.mixed-results.fail-message\"\n      >The payment of this bill could not be scheduled.</span\n    >\n  </td>\n</tr>\n<!-- Mobile screen view -->\n<tr class=\"bb-d-md-none billpay-multipl-ebills-review__tr\">\n  <td colspan=\"2\" class=\"billpay-multipl-ebills-review__cell\">\n    <ng-container *ngTemplateOutlet=\"amountTmp; context: payment\"></ng-container>\n  </td>\n</tr>\n<!-- Extra fields -->\n<tr data-role=\"multipl-ebills-extended-fields\" class=\"billpay-multipl-ebills-review__tr\">\n  <td colspan=\"5\">\n    <div [id]=\"'collapse' + id\" [ngbCollapse]=\"isCollapsed\">\n      <div class=\"billpay-multipl-ebills-review__cell\">\n        <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\" *ngIf=\"payment?.memo\">\n          <bb-icon-ui\n            name=\"subject\"\n            size=\"sm\"\n            color=\"secondary\"\n            class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n          ></bb-icon-ui>\n          <div class=\"bb-stack__item\">\n            <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n              <span i18n=\"@@bb-billpay-multiple-bills-review.memo\">Memo</span>\n            </div>\n            <div class=\"break-word bb-subtitle bb-text-support\" data-role=\"payment-description\">\n              {{ payment?.memo }}\n            </div>\n          </div>\n        </div>\n        <ng-container *ngIf=\"payment?.schedule as schedule\">\n          <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\">\n            <bb-icon-ui\n              name=\"cached\"\n              size=\"sm\"\n              color=\"secondary\"\n              class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n            ></bb-icon-ui>\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n                <span\n                  i18n=\"\n                    Payment details frequency|Label for frequency in details\n                    group@@billpay-multiple-bills-review.details.frequency-label\"\n                  >Frequency</span\n                >\n              </div>\n              <div data-role=\"payment-frequency\">\n                {{ frequencyLabel }}\n              </div>\n            </div>\n          </div>\n          <ng-container *ngIf=\"schedule.frequency === 'ONCE'\">\n            <ng-container *ngIf=\"payment?.overnightDeliveryAddress as address\">\n              <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\">\n                <bb-icon-ui\n                  name=\"subject\"\n                  size=\"sm\"\n                  color=\"secondary\"\n                  class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n                ></bb-icon-ui>\n                <div class=\"bb-stack__item\">\n                  <div\n                    data-role=\"overnight-address-label\"\n                    i18n=\"\n                      Payment overnight address|Label for overnight\n                      address@@billpay-payment-review-card.details.overnight-address.label\"\n                    class=\"bb-text-bold\"\n                  >\n                    Overnight check address\n                  </div>\n                  <div data-role=\"overnight-address\" class=\"bb-block bb-block--md\">\n                    <div>{{ address.address1 }}</div>\n                    <div *ngIf=\"address.address2\">{{ address.address2 }}</div>\n                    <div>{{ address.city }}&nbsp;{{ address.state }}&nbsp;{{ address.postalCode }}</div>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n          </ng-container>\n\n          <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\">\n            <bb-icon-ui\n              name=\"today\"\n              size=\"sm\"\n              color=\"secondary\"\n              class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n            ></bb-icon-ui>\n            <div class=\"bb-stack__item\">\n              <div\n                i18n=\"\n                  Payment details deliver by|Label for deliver by in details\n                  group@@billpay-payment-review-card.details.amount.other\"\n                class=\"bb-text-bold\"\n                data-role=\"deliver-by\"\n              >\n                { schedule.frequency, select, ONCE {Deliver payment by } other {Deliver first payment by } }\n              </div>\n              <div data-role=\"deliver-date\">\n                {{ schedule.startDate | date: 'mediumDate' }}\n              </div>\n            </div>\n          </div>\n\n          <ng-container *ngIf=\"schedule.frequency !== 'ONCE'\">\n            <!-- EndDate -->\n            <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\">\n              <bb-icon-ui\n                name=\"today\"\n                size=\"sm\"\n                color=\"secondary\"\n                class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n              ></bb-icon-ui>\n              <div class=\"bb-stack__item\">\n                <div\n                  i18n=\"\n                    Payment details ending|Label for ending in details\n                    group@@billpay-payment-review-card.details.ending-label\"\n                  class=\"bb-text-bold\"\n                  data-role=\"ending-label\"\n                >\n                  Ending\n                </div>\n                <div data-role=\"ending\">\n                  <span\n                    *ngIf=\"schedule?.repeat; else neverEndingTmp\"\n                    i18n=\"\n                      Payment details ending|Label for ending in details\n                      group@@billpay-payment-review-card.details.ending\"\n                    >After { schedule.repeat, plural, =1 {{{schedule.repeat}} payment } other\n                    {{{schedule.repeat}} payments } } (estimated {{ endDate | date: 'mediumDate' }})\n                  </span>\n                  <ng-template #neverEndingTmp>\n                    <span\n                      i18n=\"\n                        Payment details ending|Label for never ending\n                        payment@@billpay-payment-review-card.details.ending.never\"\n                      >Never\n                    </span>\n                  </ng-template>\n                </div>\n              </div>\n            </div>\n\n            <!-- Notify section -->\n            <ng-container\n              *ngIf=\"\n                schedule?.alertPendingCheckbox || schedule?.alertSentCheckbox || schedule?.alertLastPendingCheckbox\n              \"\n            >\n              <div\n                i18n=\"\n                  Payment details notify me|Label for notify me in details\n                  group@@billpay-payment-review-card.details.notify\"\n                class=\"bb-text-bold\"\n                data-role=\"notify-label\"\n              >\n                Notify me\n              </div>\n              <div>\n                <ul>\n                  <li\n                    *ngIf=\"schedule?.alertPendingCheckbox\"\n                    i18n=\"\n                      Payment details when a payment is pending|Label for when a payment is pending in details\n                      group@@billpay-payment-review-card.details.notify.pending\"\n                    data-role=\"alertPendingCheckbox\"\n                  >\n                    When a payment is pending\n                  </li>\n                  <li\n                    *ngIf=\"schedule?.alertSentCheckbox\"\n                    i18n=\"\n                      Payment details when a payment has been sent|Label for when a payment has been sent in details\n                      group@@billpay-payment-review-card.details.notify.sent\"\n                    data-role=\"alertSentCheckbox\"\n                  >\n                    When a payment has been sent\n                  </li>\n                  <li\n                    *ngIf=\"schedule?.alertLastPendingCheckbox\"\n                    i18n=\"\n                      Payment details when the last payment is pending|Label for when the last payment is pending in\n                      details group@@billpay-payment-review-card.details.notify.pending.last\"\n                    data-role=\"alertLastPendingCheckbox\"\n                  >\n                    When the last payment is pending\n                  </li>\n                </ul>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </td>\n</tr>\n<tr class=\"billpay-multipl-ebills-review__tr billpay-multipl-ebills-review__tr--last\" aria-hidden=\"true\">\n  <td colspan=\"5\"></td>\n</tr>\n<tr class=\"billpay-multipl-ebills-review__seperator\" aria-hidden=\"true\" *ngIf=\"!last\"></tr>\n<!-- Payee -->\n<ng-template #payeeTmp>\n  <ng-container\n    *ngIf=\"\n      payment?.payeeTo?.ebill?.enabled &&\n        payment?.payeeTo?.ebill?.latestBill?.status !== 'PAID' &&\n        payment?.payeeTo?.ebill?.latestBill?.paymentDate;\n      else payeeNameTmp\n    \"\n  >\n    <label class=\"bb-block bb-block--no-margin\">{{ payment?.payeeTo?.nickName || payment?.payeeTo?.name }}</label>\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        class=\"bb-stack__item bb-stack__item--spacing-sm\"\n        data-role=\"receipt-icon\"\n        size=\"sm\"\n        name=\"receipt\"\n        color=\"secondary\"\n      ></bb-icon-ui>\n      <span\n        class=\"bb-stack__item bb-subtitle bb-text-support\"\n        data-role=\"due-date-label\"\n        *ngIf=\"payment?.payeeTo?.ebill?.latestBill?.paymentDate as ebillPaymentDate\"\n      >\n        <bb-amount-ui\n          *ngIf=\"payment?.payeeTo?.ebill?.latestBill?.minAmountDue as minAmountDue\"\n          [currency]=\"minAmountDue?.currency\"\n          [amount]=\"minAmountDue?.amount\"\n        ></bb-amount-ui>\n        <span\n          i18n=\"\n            Ebill due note|Text for the information about the due eBill@@bb-billpay-multiple-bills-review.note.ebill-due\"\n        >\n          due on</span\n        >\n        {{ ebillPaymentDate | bbDate: 'MMM d' }}\n      </span>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #payeeNameTmp>\n  <label class=\"bb-label\">{{ payment?.payeeTo?.nickName || payment?.payeeTo?.name }}</label>\n</ng-template>\n<!-- Amount -->\n<ng-template #amountTmp let-amount=\"amount\">\n  <bb-amount-ui class=\"bb-text-semi-bold\" [currency]=\"amount.currency\" [amount]=\"amount.amount\"> </bb-amount-ui>\n</ng-template>\n", components: [{ type: i3$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2$3.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }], pipes: { "slice": i4.SlicePipe, "bbDate": i8.BbDatePipe, "date": i4.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewItemComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[bb-billpay-payment-multiple-bills-review-item]',
                    templateUrl: 'billpay-payment-multiple-bills-review-item.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.BillpayPaymentScheduleService }, { type: PayBillsJourneyConfigService }]; }, propDecorators: { payment: [{
                type: Input
            }], last: [{
                type: Input
            }] } });

class BillpayPaymentMultipleBillsReviewTableComponent {
}
BillpayPaymentMultipleBillsReviewTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsReviewTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewTableComponent, selector: "bb-billpay-payment-multiple-bills-review-table", inputs: { payments: "payments" }, ngImport: i0, template: "<table\n  class=\"billpay-multipl-ebills-review\"\n  aria-label=\"Review Your Payment\"\n  i18n-aria-label=\"@@billpay-payments-journey.multiple-bills.table-description\"\n>\n  <thead>\n    <tr class=\"bb-d-none bb-d-md-table-row\">\n      <th scope=\"col\" class=\"billpay-multipl-ebills-review__cell\">\n        <span\n          i18n=\"@@bb-billpay-multiple-bills-review.titles.payee\"\n          class=\"bb-subtitle bb-text-semi-bold\"\n          data-role=\"multiple-ebills-review-payee\"\n          >Payee</span\n        >\n      </th>\n      <th scope=\"col\" class=\"billpay-multipl-ebills-review__cell\">\n        <span\n          i18n=\"@@bb-billpay-multiple-bills-review.titles.from-account\"\n          class=\"bb-subtitle bb-text-semi-bold\"\n          data-role=\"multiple-ebills-review-from-account\"\n          >From Account</span\n        >\n      </th>\n      <th scope=\"col\" class=\"billpay-multipl-ebills-review__cell\">\n        <div class=\"bb-stack\">\n          <span\n            class=\"bb-subtitle bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"@@bb-billpay-multiple-bills-review.titles.delivery-date\"\n            data-role=\"multiple-bills-review-delivery-date\"\n            >Est. Delivery\n          </span>\n          <span\n            bbTooltip=\"The date we expect your payment to reach the payee. That may vary from payee to payee.\"\n            placement=\"top\"\n            [triggers]=\"'hover'\"\n            i18n=\"@@bb-billpay-multiple-bills-review.delivery-date.tooltip\"\n            class=\"bb-d-flex\"\n          >\n            <bb-icon-ui name=\"info\" size=\"sm\" class=\"bb-billpay-multiple-bills__tooltip\"></bb-icon-ui>\n          </span>\n        </div>\n      </th>\n      <th scope=\"col\" class=\"billpay-multipl-ebills-review__cell\">\n        <span\n          i18n=\"@@bb-billpay-multiple-bills-review.titles.amount\"\n          class=\"bb-subtitle bb-text-semi-bold\"\n          data-role=\"multiple-ebills-review-amount\"\n          >Amount</span\n        >\n      </th>\n      <th scope=\"col\" aria-hidden=\"true\"></th>\n    </tr>\n  </thead>\n  <tbody\n    bb-billpay-payment-multiple-bills-review-item\n    *ngFor=\"let payment of payments; let last = last\"\n    [last]=\"last\"\n    [payment]=\"payment\"\n  ></tbody>\n</table>\n", components: [{ type: i3$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: BillpayPaymentMultipleBillsReviewItemComponent, selector: "[bb-billpay-payment-multiple-bills-review-item]", inputs: ["payment", "last"] }], directives: [{ type: i6$4.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills-review-table',
                    templateUrl: 'billpay-payment-multiple-bills-review-table.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { payments: [{
                type: Input
            }] } });

class BillpayPaymentMultipleBillsSuccessComponent {
    constructor(assetsService, navigationService, route) {
        this.assetsService = assetsService;
        this.navigationService = navigationService;
        this.route = route;
        this.id = BillpayUtilityService.generateId();
        this.allSucceeded = true;
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-pay-bills-journey',
            getURIFromAssetID: (assetId) => `${assetId}`,
        });
        this.successImg = this.resolveAsset('succeed.svg');
        this.successImgNoMotion = this.resolveAsset('no-motion.svg');
    }
    set results(value) {
        const succeded = value.filter(payment => payment.succeeded);
        this.allSucceeded = succeded.length === value.length;
        if (this.allSucceeded) {
            const getPayee = (payment) => payment.payeeTo.nickName || payment.payeeTo.name;
            const payees = value
                .map((payment, i) => {
                if (i === 0)
                    return getPayee(payment);
                return i === value.length - 1 ? ' and ' + getPayee(payment) : ', ' + getPayee(payment);
            })
                .join('');
            this.successMsg = $localize `You’ve just scheduled ${value.length} payment${value.length > 1 ? 's' : ''} to ${payees}.`;
        }
        else {
            this.payments = value;
            this.mixedMsg = $localize `You scheduled sucessfully ${succeded.length} out of ${value.length} bills.`;
        }
    }
    payMore() {
        this.navigationService.navigateToForm({ relativeTo: this.route.parent });
    }
    goToMyAccounts() {
        var _a;
        (_a = this.navigationService) === null || _a === void 0 ? void 0 : _a.navigateToMainAppPage();
    }
}
BillpayPaymentMultipleBillsSuccessComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsSuccessComponent, deps: [{ token: i1$4.AssetsService }, { token: PayBillsNavigationService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsSuccessComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsSuccessComponent, selector: "bb-billpay-payment-multiple-bills-success", inputs: { results: "results" }, ngImport: i0, template: "<div class=\"card card-lg bb-billpay-multiple-bills-other-payees-card\">\n  <div class=\"card-body\">\n    <ng-container *ngIf=\"allSucceeded; else mixedStatus\">\n      <div class=\"bb-text-align-center bb-block--xl\" role=\"alert\">\n        <picture>\n          <source srcset=\"{{ successImgNoMotion | async }}\" media=\"(prefers-reduced-motion: reduce)\" />\n          <img\n            srcset=\"{{ (successImg | async) + '?' + id }}\"\n            alt=\"Success!\"\n            i18n-alt=\"Success!|Text for transfer succeeded@@bb-billpay-multiple-bills-review.transfer-succeeded\"\n            data-role=\"transfer-success-anim\"\n            class=\"img-fluid\"\n          />\n        </picture>\n        <bb-header-ui\n          headingClasses=\"bb-text-semi-bold\"\n          headingType=\"h2\"\n          data-role=\"success-title\"\n          heading=\"Your Bills Were Successfully Scheduled!\"\n          i18n-heading=\"@@billpay-payments-journey.multiple-bills.success.title\"\n        ></bb-header-ui>\n        <span class=\"bb-text-support\">{{ successMsg }}</span>\n      </div>\n    </ng-container>\n    <div class=\"bb-stack bb-stack--center\">\n      <button\n        bbButton\n        color=\"primary\"\n        class=\"bb-stack__item\"\n        data-role=\"multiple-bills-success-pay-more\"\n        i18n=\"@@bb-billpay-multiple-bills-review.transfer-done\"\n        (click)=\"payMore()\"\n      >\n        Pay Another Bill\n      </button>\n      <button bbButton color=\"secondary\" class=\"bb-stack__item\" i18n=\"@@bb-billpay-multiple-bills-review.my-accounts\" (click)=\"goToMyAccounts()\">\n        Go to My Accounts\n      </button>\n    </div>\n  </div>\n</div>\n\n<ng-template #mixedStatus>\n  <div class=\"bb-text-align-center bb-block--xl\">\n    <bb-header-ui\n      headingClasses=\"bb-text-semi-bold\"\n      headingType=\"h2\"\n      data-role=\"success-title\"\n      [heading]=\"mixedMsg\"\n    ></bb-header-ui>\n    <span class=\"bb-text-support\" i18n=\"@@billpay-payments-journey.multiple-bills.mixed-status.message\"\n      >Review the payments that have been processed and the other that failed below</span\n    >\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <bb-billpay-payment-multiple-bills-review-table\n      [payments]=\"payments\"\n    ></bb-billpay-payment-multiple-bills-review-table>\n  </div>\n</ng-template>\n", components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentMultipleBillsReviewTableComponent, selector: "bb-billpay-payment-multiple-bills-review-table", inputs: ["payments"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsSuccessComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills-success',
                    templateUrl: 'billpay-payment-multiple-bills-success.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$4.AssetsService }, { type: PayBillsNavigationService }, { type: i1.ActivatedRoute }]; }, propDecorators: { results: [{
                type: Input
            }] } });

class BillpayPaymentMultipleBillsReviewComponent {
    constructor(paymentStateService, dataService, navigationService, route, discardModalService, cdRef) {
        this.paymentStateService = paymentStateService;
        this.dataService = dataService;
        this.navigationService = navigationService;
        this.route = route;
        this.discardModalService = discardModalService;
        this.cdRef = cdRef;
        this.destroy$ = new Subject();
        this.editMode = false;
        /**
         * Flag for payment error
         */
        this.paymentError = false;
        /**
         * Flag for submitting payment
         */
        this.submittingPayment = false;
        this.id = BillpayUtilityService.generateId();
        /**
         * List of payments
         */
        this.payments$ = this.paymentStateService.paymentState.pipe(tap(paymentForms => {
            if (!(paymentForms === null || paymentForms === void 0 ? void 0 : paymentForms.length)) {
                this.navigationService.navigateToForm({ relativeTo: this.route.parent });
            }
        }));
        /**
         * Carry the amount for total amount to be paid
         */
        this.totalAmount$ = this.payments$.pipe(map(payments => payments === null || payments === void 0 ? void 0 : payments.reduce((acc, payment) => acc + +payment.amount.amount, 0)));
        /**
         * List of responses results
         */
        this.results = [];
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    /**
     * Methos to send payment to server
     */
    onPaymentConfirm(payments) {
        this.paymentError = false;
        this.results = [];
        this.submittingPayment = true;
        forkJoin(payments.map(payment => this.dataService.createPayment(payment).pipe(mapTo(Object.assign(Object.assign({}, payment), { succeeded: true })), catchError(() => of(Object.assign({ succeeded: false }, payment))))))
            .pipe(takeUntil(this.destroy$))
            .subscribe((responseList) => __awaiter(this, void 0, void 0, function* () {
            this.submittingPayment = false;
            this.paymentStateService.isFormProcessing = false;
            const errors = responseList.filter(response => !(response === null || response === void 0 ? void 0 : response.succeeded));
            errors.length === payments.length ? this.allFailed() : (this.results = responseList);
            this.cdRef.markForCheck();
        }));
    }
    navigateToForm(resetFormValue = false) {
        if (resetFormValue) {
            this.paymentStateService.reset();
        }
        this.navigationService.navigateToForm({ relativeTo: this.route.parent });
    }
    allFailed() {
        var _a;
        this.paymentStateService.isFormProcessing = true;
        this.submittingPayment = false;
        this.paymentError = true;
        this.cdRef.markForCheck();
        (_a = this.failAlert) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollIntoView(false);
    }
    openModal() {
        if (this.paymentStateService.isFormProcessing && !this.editMode && !this.paymentError) {
            return this.discardModalService.openModal();
        }
        return of(true);
    }
    onCancel() {
        this.navigateToForm(!!this.paymentError);
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
        if (isConfirmed) {
            this.paymentStateService.reset();
        }
    }
    onEdit() {
        this.editMode = true;
        this.navigateToForm();
    }
}
BillpayPaymentMultipleBillsReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewComponent, deps: [{ token: PayBillsStateService }, { token: i1$1.BillpayPaymentDataService }, { token: PayBillsNavigationService }, { token: i1.ActivatedRoute }, { token: i1$1.BillpayDiscardChangesModalService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewComponent, selector: "bb-billpay-payment-multiple-bills-review", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"payments$ | async as payments\">\n  <ng-container *ngTemplateOutlet=\"results?.length ? successScreen : reviewTemplate\"> </ng-container>\n  <ng-template #reviewTemplate>\n    <div class=\"card card-lg bb-billpay-multiple-bills-other-payees-card\">\n      <div class=\"card-body\">\n        <div #failAlert>\n          <bb-alert-ui\n            title=\"Something went wrong. Please try again\"\n            i18n-title=\"@@billpay-payments-journey.multiple-bills.fail-message\"\n            (close)=\"(false)\"\n            modifier=\"error\"\n            data-role=\"failure-message\"\n            *ngIf=\"paymentError\"\n          >\n          </bb-alert-ui>\n        </div>\n        <bb-billpay-payment-multiple-bills-review-table\n          [payments]=\"payments\"\n        ></bb-billpay-payment-multiple-bills-review-table>\n      </div>\n    </div>\n\n    <bb-billpay-payment-multiple-bills-sum-board\n      [totalAmount]=\"totalAmount$ | async\"\n      [actionButtons]=\"actionButtons\"\n      [inheritedId]=\"id\"\n    ></bb-billpay-payment-multiple-bills-sum-board>\n  </ng-template>\n  <ng-template #actionButtons>\n    <div>\n      <div class=\"bb-stack\">\n        <button\n          bbButton\n          color=\"link\"\n          class=\"btn-link bb-stack__item bb-stack__item--spacing-md bb-d-none bb-d-md-block\"\n          data-role=\"multiple-bills-cancel-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.cancel-button\"\n          (click)=\"onCancel()\"\n        >\n          Cancel\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-d-none bb-d-md-block bb-stack__item bb-stack__item--spacing-md\"\n          data-role=\"multiple-bills-edit-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.edit-button\"\n          (click)=\"onEdit()\"\n        >\n          Edit Payment\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          [circle]=\"true\"\n          class=\"bb-d-md-none bb-stack__item bb-stack__item--spacing-md\"\n          data-role=\"multiple-bills-edit-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.edit-button\"\n          (click)=\"onEdit()\"\n        >\n          <bb-icon-ui name=\"edit\"></bb-icon-ui>\n        </button>\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-stack__item bb-stack__item--spacing-none\"\n          data-role=\"multiple-bills-confirm-button\"\n          [isLoading]=\"submittingPayment\"\n          (click)=\"onPaymentConfirm(payments)\"\n          attr.aria-describedby=\"total-amount-label-{{ id }}  total-amount-{{ id }}\"\n        >\n          <span i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button\" class=\"bb-d-none bb-d-md-block\"\n            >Confirm Payment</span\n          >\n          <span i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button.mobile\" class=\"bb-d-md-none\"\n            >Pay</span\n          >\n        </bb-load-button-ui>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template #successScreen>\n    <bb-billpay-payment-multiple-bills-success [results]=\"results\"></bb-billpay-payment-multiple-bills-success>\n  </ng-template>\n</ng-container>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel Bill Payments?\"\n  i18n-title=\"Discard changes modal header@@billpay.multiple-bills.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel bill payments? Entered data will be lost.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.multiple-bills.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel Payments\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.multiple-bills.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Not Now\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.multiple-bills.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: BillpayPaymentMultipleBillsReviewTableComponent, selector: "bb-billpay-payment-multiple-bills-review-table", inputs: ["payments"] }, { type: BillpayPaymentMultipleBillsSumBoardComponent, selector: "bb-billpay-payment-multiple-bills-sum-board", inputs: ["totalAmount", "actionButtons", "inheritedId"] }, { type: i3$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i9.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: BillpayPaymentMultipleBillsSuccessComponent, selector: "bb-billpay-payment-multiple-bills-success", inputs: ["results"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills-review',
                    templateUrl: 'billpay-payment-multiple-bills-review.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: PayBillsStateService }, { type: i1$1.BillpayPaymentDataService }, { type: PayBillsNavigationService }, { type: i1.ActivatedRoute }, { type: i1$1.BillpayDiscardChangesModalService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { failAlert: [{
                type: ViewChild,
                args: ['failAlert']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayPaymentMultipleBillsReviewViewComponent {
    openModal() {
        return this.child.openModal();
    }
    navigateToForm() {
        this.child.onCancel();
    }
}
BillpayPaymentMultipleBillsReviewViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsReviewViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["multipleBillsReview"], descendants: true }], ngImport: i0, template: `
    <div class="bb-block bb-block--lg bb-stack">
      <div class="bb-stack__item bb-stack__item--fill">
        <button
          bbButton
          color="link"
          class="bb-block bb-block--md pl-0"
          data-role="pay-a-bill-journey-back"
          (click)="navigateToForm()"
        >
          <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
          <span i18n="button label|Back button@@pay-bills-journey.back-to-multiple-bills">Back To Pay Bills</span>
        </button>
        <bb-header-ui
          headingType="h1"
          heading="Review Your Payments"
          i18n-heading="@@pay-bills-journey.title.review-bills"
          data-role="pay-a-bill-journey-title"
        >
        </bb-header-ui>
      </div>
    </div>
    <bb-billpay-payment-multiple-bills-review #multipleBillsReview></bb-billpay-payment-multiple-bills-review>
  `, isInline: true, components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentMultipleBillsReviewComponent, selector: "bb-billpay-payment-multiple-bills-review" }], directives: [{ type: i4$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewViewComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
    <div class="bb-block bb-block--lg bb-stack">
      <div class="bb-stack__item bb-stack__item--fill">
        <button
          bbButton
          color="link"
          class="bb-block bb-block--md pl-0"
          data-role="pay-a-bill-journey-back"
          (click)="navigateToForm()"
        >
          <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
          <span i18n="button label|Back button@@pay-bills-journey.back-to-multiple-bills">Back To Pay Bills</span>
        </button>
        <bb-header-ui
          headingType="h1"
          heading="Review Your Payments"
          i18n-heading="@@pay-bills-journey.title.review-bills"
          data-role="pay-a-bill-journey-title"
        >
        </bb-header-ui>
      </div>
    </div>
    <bb-billpay-payment-multiple-bills-review #multipleBillsReview></bb-billpay-payment-multiple-bills-review>
  `,
                }]
        }], propDecorators: { child: [{
                type: ViewChild,
                args: ['multipleBillsReview']
            }] } });

class BillpayManagePaymentDeactivateGuardService extends BillpayBaseDeactivateGuardService {
    /** @internal */
    constructor(router, location) {
        super(router, location);
        this.allowedNextRoutes = [
            /^.*;payee=.+$/,
            /^.*\/review$/,
            /^.*\/recurring\/edit\/.+(\/review.+)?$/,
            /^.*\/one-off\/edit\/.+(\/review.+)?$/,
        ];
        this.allowedPreviousRoutes = [
            /^.*;payee=.+$/,
            /^.*(\/review)$/,
            /^.*(\/form){1}$/,
            /^.*\/recurring\/edit\/.+(\/review.+)?$/,
            /^.*\/one-off\/edit\/.+(\/review.+)?$/,
        ];
    }
}
BillpayManagePaymentDeactivateGuardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePaymentDeactivateGuardService, deps: [{ token: i1.Router }, { token: i4.Location }], target: i0.ɵɵFactoryTarget.Injectable });
BillpayManagePaymentDeactivateGuardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePaymentDeactivateGuardService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePaymentDeactivateGuardService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i4.Location }]; } });

const uiAngModules = [
    LoadingIndicatorModule,
    BbDatePipeModule,
    EmptyStateModule,
    ModalModule,
    DropdownSingleSelectModule,
    InputRadioGroupModule,
    InputNumberModule,
    ButtonModule,
    InputCheckboxModule,
    ProductItemCurrentAccountModule,
    ProductItemBasicAccountModule,
    ProductSelectorModule,
    CurrencyInputModule,
    CharCounterModule,
    IconModule,
    FieldsetModule,
    AlertModule,
    InputValidationMessageModule,
    InputDatepickerModule,
    CollapsibleModule,
    TextareaModule,
    AmountInputModule,
    AlertModule,
    AmountModule,
    DropdownMenuModule,
    EllipsisModule,
    HeaderModule,
    LoadButtonModule,
    TooltipModule,
];
const components$1 = [
    BillpayPaymentMultipleBillsComponent,
    BillpayPaymentMultipleBillsSumBoardComponent,
    BillpayPaymentMultipleBillsListItemComponent,
    BillpayPaymentMultipleBillsListComponent,
    BillpayPaymentMultipleBillsReviewComponent,
    BillpayPaymentMultipleBillsReviewItemComponent,
    BillpayPaymentMultipleBillsReviewTableComponent,
    BillpayPaymentMultipleBillsSuccessComponent,
    BillpayPaymentFrequencyComponent,
    BillpayPaymentStartDateComponent,
    BillpayPaymentEndDateComponent,
    BillpayPaymentCompactProductSelectorComponent,
    BillpayPaymentFormContainerComponent,
    BillpayEbillPaymentUIComponent,
    ScheduleComponent,
    ScheduleLabelComponent,
    BillpayPaymentDiscardChangesModalComponent,
    BillpayPaymentFormComponent,
    BillpayPaymentRecurringEditReviewContainerComponent,
    BillpayPaymentReviewContainerComponent,
    BillpayPaymentRecurringEditFormContainerComponent,
    BillpayPaymentOneOffEditReviewContainerComponent,
    BillpayPaymentOneOffEditFormContainerComponent,
];
class PayBillsJourneyUiModule {
}
PayBillsJourneyUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PayBillsJourneyUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyUiModule, declarations: [BillpayPaymentMultipleBillsComponent,
        BillpayPaymentMultipleBillsSumBoardComponent,
        BillpayPaymentMultipleBillsListItemComponent,
        BillpayPaymentMultipleBillsListComponent,
        BillpayPaymentMultipleBillsReviewComponent,
        BillpayPaymentMultipleBillsReviewItemComponent,
        BillpayPaymentMultipleBillsReviewTableComponent,
        BillpayPaymentMultipleBillsSuccessComponent,
        BillpayPaymentFrequencyComponent,
        BillpayPaymentStartDateComponent,
        BillpayPaymentEndDateComponent,
        BillpayPaymentCompactProductSelectorComponent,
        BillpayPaymentFormContainerComponent,
        BillpayEbillPaymentUIComponent,
        ScheduleComponent,
        ScheduleLabelComponent,
        BillpayPaymentDiscardChangesModalComponent,
        BillpayPaymentFormComponent,
        BillpayPaymentRecurringEditReviewContainerComponent,
        BillpayPaymentReviewContainerComponent,
        BillpayPaymentRecurringEditFormContainerComponent,
        BillpayPaymentOneOffEditReviewContainerComponent,
        BillpayPaymentOneOffEditFormContainerComponent], imports: [CommonModule, ReactiveFormsModule, NgbModule, BillpayJourneysCommonModule, LoadingIndicatorModule,
        BbDatePipeModule,
        EmptyStateModule,
        ModalModule,
        DropdownSingleSelectModule,
        InputRadioGroupModule,
        InputNumberModule,
        ButtonModule,
        InputCheckboxModule,
        ProductItemCurrentAccountModule,
        ProductItemBasicAccountModule,
        ProductSelectorModule,
        CurrencyInputModule,
        CharCounterModule,
        IconModule,
        FieldsetModule,
        AlertModule,
        InputValidationMessageModule,
        InputDatepickerModule,
        CollapsibleModule,
        TextareaModule,
        AmountInputModule,
        AlertModule,
        AmountModule,
        DropdownMenuModule,
        EllipsisModule,
        HeaderModule,
        LoadButtonModule,
        TooltipModule], exports: [BillpayPaymentMultipleBillsComponent,
        BillpayPaymentMultipleBillsSumBoardComponent,
        BillpayPaymentMultipleBillsListItemComponent,
        BillpayPaymentMultipleBillsListComponent,
        BillpayPaymentMultipleBillsReviewComponent,
        BillpayPaymentMultipleBillsReviewItemComponent,
        BillpayPaymentMultipleBillsReviewTableComponent,
        BillpayPaymentMultipleBillsSuccessComponent,
        BillpayPaymentFrequencyComponent,
        BillpayPaymentStartDateComponent,
        BillpayPaymentEndDateComponent,
        BillpayPaymentCompactProductSelectorComponent,
        BillpayPaymentFormContainerComponent,
        BillpayEbillPaymentUIComponent,
        ScheduleComponent,
        ScheduleLabelComponent,
        BillpayPaymentDiscardChangesModalComponent,
        BillpayPaymentFormComponent,
        BillpayPaymentRecurringEditReviewContainerComponent,
        BillpayPaymentReviewContainerComponent,
        BillpayPaymentRecurringEditFormContainerComponent,
        BillpayPaymentOneOffEditReviewContainerComponent,
        BillpayPaymentOneOffEditFormContainerComponent, LoadingIndicatorModule,
        BbDatePipeModule,
        EmptyStateModule,
        ModalModule,
        DropdownSingleSelectModule,
        InputRadioGroupModule,
        InputNumberModule,
        ButtonModule,
        InputCheckboxModule,
        ProductItemCurrentAccountModule,
        ProductItemBasicAccountModule,
        ProductSelectorModule,
        CurrencyInputModule,
        CharCounterModule,
        IconModule,
        FieldsetModule,
        AlertModule,
        InputValidationMessageModule,
        InputDatepickerModule,
        CollapsibleModule,
        TextareaModule,
        AmountInputModule,
        AlertModule,
        AmountModule,
        DropdownMenuModule,
        EllipsisModule,
        HeaderModule,
        LoadButtonModule,
        TooltipModule] });
PayBillsJourneyUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyUiModule, imports: [[CommonModule, ReactiveFormsModule, NgbModule, BillpayJourneysCommonModule, ...uiAngModules], LoadingIndicatorModule,
        BbDatePipeModule,
        EmptyStateModule,
        ModalModule,
        DropdownSingleSelectModule,
        InputRadioGroupModule,
        InputNumberModule,
        ButtonModule,
        InputCheckboxModule,
        ProductItemCurrentAccountModule,
        ProductItemBasicAccountModule,
        ProductSelectorModule,
        CurrencyInputModule,
        CharCounterModule,
        IconModule,
        FieldsetModule,
        AlertModule,
        InputValidationMessageModule,
        InputDatepickerModule,
        CollapsibleModule,
        TextareaModule,
        AmountInputModule,
        AlertModule,
        AmountModule,
        DropdownMenuModule,
        EllipsisModule,
        HeaderModule,
        LoadButtonModule,
        TooltipModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyUiModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components$1],
                    imports: [CommonModule, ReactiveFormsModule, NgbModule, BillpayJourneysCommonModule, ...uiAngModules],
                    exports: [...components$1, ...uiAngModules],
                }]
        }] });

const defaultRoute = {
    path: '',
    component: PayBillsJourneyComponent,
    children: [
        { path: 'enrolment', component: BillPayEnrolmentViewComponent },
        {
            path: '',
            canActivate: [BillpayEnrolmentGuard],
            children: [
                { path: '', redirectTo: 'form', pathMatch: 'full' },
                {
                    path: 'form',
                    component: BillpayPaymentMultipleBillsViewComponent,
                    canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                },
                {
                    path: 'review',
                    component: BillpayPaymentMultipleBillsReviewViewComponent,
                    canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                },
                {
                    path: 'recurring/edit/:id',
                    component: BillpayPaymentRecurringEditFormViewComponent,
                    canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                },
                {
                    path: 'recurring/edit/:id/review',
                    component: BillpayPaymentRecurringEditReviewViewComponent,
                    canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                },
                {
                    path: 'one-off/edit/:id',
                    component: BillpayPaymentOneOffEditFormViewComponent,
                    canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                },
                {
                    path: 'one-off/edit/:id/review',
                    component: BillpayPaymentOneOffEditReviewViewComponent,
                    canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                },
            ],
        },
    ],
};
const components = [
    BillPayEnrolmentViewComponent,
    BillpayPaymentFormViewComponent,
    BillpayPaymentReviewViewComponent,
    BillpayPaymentRecurringEditFormViewComponent,
    BillpayPaymentRecurringEditReviewViewComponent,
    BillpayPaymentOneOffEditFormViewComponent,
    BillpayPaymentOneOffEditReviewViewComponent,
    BillpayPaymentMultipleBillsViewComponent,
    BillpayPaymentMultipleBillsReviewViewComponent,
];
class PayBillsJourneyModule {
    static forRoot(data = { route: defaultRoute }) {
        return {
            ngModule: PayBillsJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
PayBillsJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PayBillsJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyModule, declarations: [PayBillsJourneyComponent, BillPayEnrolmentViewComponent,
        BillpayPaymentFormViewComponent,
        BillpayPaymentReviewViewComponent,
        BillpayPaymentRecurringEditFormViewComponent,
        BillpayPaymentRecurringEditReviewViewComponent,
        BillpayPaymentOneOffEditFormViewComponent,
        BillpayPaymentOneOffEditReviewViewComponent,
        BillpayPaymentMultipleBillsViewComponent,
        BillpayPaymentMultipleBillsReviewViewComponent], imports: [CommonModule,
        RouterModule,
        BillpayJourneysCommonModule,
        ReactiveFormsModule,
        PayBillsJourneyUiModule,
        FormsModule,
        NgbModule, i1$4.BackbaseCoreModule] });
PayBillsJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyModule, providers: [
        BillpayManagePaymentDeactivateGuardService,
        PayBillsStateService,
        BillpayPaymentDataService,
        PayBillsJourneyConfigService,
        BillpayPayeeDataService,
    ], imports: [[
            CommonModule,
            RouterModule,
            BillpayJourneysCommonModule,
            ReactiveFormsModule,
            PayBillsJourneyUiModule,
            FormsModule,
            NgbModule,
            BackbaseCoreModule.withConfig({
                classMap: { PayBillsJourneyComponent },
            }),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PayBillsJourneyComponent, ...components],
                    imports: [
                        CommonModule,
                        RouterModule,
                        BillpayJourneysCommonModule,
                        ReactiveFormsModule,
                        PayBillsJourneyUiModule,
                        FormsModule,
                        NgbModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { PayBillsJourneyComponent },
                        }),
                    ],
                    providers: [
                        BillpayManagePaymentDeactivateGuardService,
                        PayBillsStateService,
                        BillpayPaymentDataService,
                        PayBillsJourneyConfigService,
                        BillpayPayeeDataService,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BasePaymentEditFormContainerDirective, BasePaymentEditReviewContainerDirective, BillPayEnrolmentViewComponent, BillpayManagePaymentDeactivateGuardService, BillpayPaymentFormViewComponent, BillpayPaymentMultipleBillsReviewViewComponent, BillpayPaymentMultipleBillsViewComponent, BillpayPaymentOneOffEditFormViewComponent, BillpayPaymentOneOffEditReviewViewComponent, BillpayPaymentRecurringEditFormViewComponent, BillpayPaymentRecurringEditReviewViewComponent, BillpayPaymentReviewViewComponent, CommunicationService as PayBillsCommunicationService, PayBillsJourneyComponent, PayBillsJourneyConfigService, PayBillsJourneyConfigurationToken, PayBillsJourneyModule, PayBillsNavigationService, PayBillsStateService };
//# sourceMappingURL=backbase-pay-bills-journey-ang.js.map
