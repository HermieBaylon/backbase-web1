import { HostListener, Directive, Input } from '@angular/core';
import { of, Subject } from 'rxjs';
import { map, shareReplay, take, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/billpay-journeys-common";
import * as i2 from "../services/pay-bills-state.service";
import * as i3 from "@angular/router";
import * as i4 from "../services/pay-bills-navigation.service";
export class BasePaymentEditFormContainerDirective {
    /** @internal */
    constructor(dataService, stateService, route, discardModalService, routerService) {
        this.dataService = dataService;
        this.stateService = stateService;
        this.route = route;
        this.discardModalService = discardModalService;
        this.routerService = routerService;
        this.destroy$ = new Subject();
        this.isFormTouched = false;
        this.id$ = this.route.paramMap.pipe(take(1), map(params => params.get('id') || ''));
        this.payeesAndAccounts$ = this.dataService.getPayeesAndAccounts().pipe(shareReplay(1), takeUntil(this.destroy$));
    }
    onWindowUnload($event) {
        if ((this.isFormTouched || this.stateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    openModal() {
        return this.isFormTouched || this.stateService.isFormProcessing ? this.discardModalService.openModal() : of(true);
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    onFormValueChanged() {
        this.isFormTouched = true;
    }
    onCancelForm() {
        this.routerService.navigateToPayeeList();
    }
}
BasePaymentEditFormContainerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BasePaymentEditFormContainerDirective, deps: [{ token: i1.BillpayPaymentDataService }, { token: i2.PayBillsStateService }, { token: i3.ActivatedRoute }, { token: i1.BillpayDiscardChangesModalService }, { token: i4.PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Directive });
BasePaymentEditFormContainerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BasePaymentEditFormContainerDirective, inputs: { accountNumberMasked: "accountNumberMasked", paymentDetailsTitle: "paymentDetailsTitle" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BasePaymentEditFormContainerDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.BillpayPaymentDataService }, { type: i2.PayBillsStateService }, { type: i3.ActivatedRoute }, { type: i1.BillpayDiscardChangesModalService }, { type: i4.PayBillsNavigationService }]; }, propDecorators: { accountNumberMasked: [{
                type: Input
            }], paymentDetailsTitle: [{
                type: Input
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1wYXltZW50LWVkaXQtZm9ybS1jb250YWluZXIubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3BheS1iaWxscy1qb3VybmV5L3NyYy9kaXJlY3RpdmVzL2Jhc2UtcGF5bWVudC1lZGl0LWZvcm0tY29udGFpbmVyLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQWEsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7OztBQWFuRSxNQUFNLE9BQWdCLHFDQUFxQztJQW1CekQsZ0JBQWdCO0lBQ2hCLFlBQ3FCLFdBQXNDLEVBQ3RDLFlBQWtDLEVBQ3BDLEtBQXFCLEVBQ3JCLG1CQUFzRCxFQUM5RCxhQUF3QztRQUo5QixnQkFBVyxHQUFYLFdBQVcsQ0FBMkI7UUFDdEMsaUJBQVksR0FBWixZQUFZLENBQXNCO1FBQ3BDLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBbUM7UUFDOUQsa0JBQWEsR0FBYixhQUFhLENBQTJCO1FBckJoQyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUMxQyxrQkFBYSxHQUFHLEtBQUssQ0FBQztRQXNCNUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2pDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUN0QyxDQUFDO1FBRUYsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNuSCxDQUFDO0lBcEJELGNBQWMsQ0FBQyxNQUF5QjtRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDMUYsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBa0JELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksa0JBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDO0lBQ3JELENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BILENBQUM7SUFFRCxjQUFjLENBQUMsV0FBb0I7UUFDakMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzNDLENBQUM7O21JQTFEbUIscUNBQXFDO3VIQUFyQyxxQ0FBcUM7NEZBQXJDLHFDQUFxQztrQkFEMUQsU0FBUzt3UUFRQyxtQkFBbUI7c0JBQTNCLEtBQUs7Z0JBQ0csbUJBQW1CO3NCQUEzQixLQUFLO2dCQUtOLGNBQWM7c0JBRGIsWUFBWTt1QkFBQyxxQkFBcUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhvc3RMaXN0ZW5lciwgT25EZXN0cm95LCBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZVJlcGxheSwgdGFrZSwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQmlsbFBheUFjY291bnRzR2V0UmVzcG9uc2VCb2R5LCBCaWxsUGF5UGF5ZWVzU3VtbWFyeUdldFJlc3BvbnNlQm9keSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9iaWxscGF5JztcblxuaW1wb3J0IHsgUGF5QmlsbHNTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wYXktYmlsbHMtc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBQYXlCaWxsc05hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcGF5LWJpbGxzLW5hdmlnYXRpb24uc2VydmljZSc7XG5pbXBvcnQge1xuICBCaWxscGF5RGlzY2FyZENoYW5nZXNGb3JtQ29tcG9uZW50LFxuICBCaWxscGF5RGlzY2FyZENoYW5nZXNNb2RhbFNlcnZpY2UsXG4gIEJpbGxwYXlQYXltZW50RGF0YVNlcnZpY2UsXG4gIFBheW1lbnRGb3JtU3RhdGUsXG59IGZyb20gJ0BiYWNrYmFzZS9iaWxscGF5LWpvdXJuZXlzLWNvbW1vbic7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VQYXltZW50RWRpdEZvcm1Db250YWluZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEJpbGxwYXlEaXNjYXJkQ2hhbmdlc0Zvcm1Db21wb25lbnQge1xuICByZWFkb25seSBpZCQ6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgcmVhZG9ubHkgcGF5ZWVzQW5kQWNjb3VudHMkOiBPYnNlcnZhYmxlPEJpbGxQYXlQYXllZXNTdW1tYXJ5R2V0UmVzcG9uc2VCb2R5ICYgQmlsbFBheUFjY291bnRzR2V0UmVzcG9uc2VCb2R5PjtcblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIGlzRm9ybVRvdWNoZWQgPSBmYWxzZTtcblxuICBASW5wdXQoKSBhY2NvdW50TnVtYmVyTWFza2VkPzogYm9vbGVhbjtcbiAgQElucHV0KCkgcGF5bWVudERldGFpbHNUaXRsZT86IHN0cmluZztcblxuICBhYnN0cmFjdCBvblBheW1lbnRTdWJtaXR0ZWQocGF5bWVudDogUGF5bWVudEZvcm1TdGF0ZSwgaWQ6IHN0cmluZyk6IHZvaWQ7XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OmJlZm9yZXVubG9hZCcsIFsnJGV2ZW50J10pXG4gIG9uV2luZG93VW5sb2FkKCRldmVudDogQmVmb3JlVW5sb2FkRXZlbnQpIHtcbiAgICBpZiAoKHRoaXMuaXNGb3JtVG91Y2hlZCB8fCB0aGlzLnN0YXRlU2VydmljZS5pc0Zvcm1Qcm9jZXNzaW5nKSAmJiAhdGhpcy5pc0Rpc2NhcmRNb2RhbE9wZW4pIHtcbiAgICAgICRldmVudC5yZXR1cm5WYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRhdGFTZXJ2aWNlOiBCaWxscGF5UGF5bWVudERhdGFTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBzdGF0ZVNlcnZpY2U6IFBheUJpbGxzU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGlzY2FyZE1vZGFsU2VydmljZTogQmlsbHBheURpc2NhcmRDaGFuZ2VzTW9kYWxTZXJ2aWNlLFxuICAgIHJlYWRvbmx5IHJvdXRlclNlcnZpY2U6IFBheUJpbGxzTmF2aWdhdGlvblNlcnZpY2UsXG4gICkge1xuICAgIHRoaXMuaWQkID0gdGhpcy5yb3V0ZS5wYXJhbU1hcC5waXBlKFxuICAgICAgdGFrZSgxKSxcbiAgICAgIG1hcChwYXJhbXMgPT4gcGFyYW1zLmdldCgnaWQnKSB8fCAnJyksXG4gICAgKTtcblxuICAgIHRoaXMucGF5ZWVzQW5kQWNjb3VudHMkID0gdGhpcy5kYXRhU2VydmljZS5nZXRQYXllZXNBbmRBY2NvdW50cygpLnBpcGUoc2hhcmVSZXBsYXkoMSksIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBnZXQgaXNEaXNjYXJkTW9kYWxPcGVuKCkge1xuICAgIHJldHVybiB0aGlzLmRpc2NhcmRNb2RhbFNlcnZpY2UuaXNEaXNjYXJkTW9kYWxPcGVuO1xuICB9XG5cbiAgb3Blbk1vZGFsKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmlzRm9ybVRvdWNoZWQgfHwgdGhpcy5zdGF0ZVNlcnZpY2UuaXNGb3JtUHJvY2Vzc2luZyA/IHRoaXMuZGlzY2FyZE1vZGFsU2VydmljZS5vcGVuTW9kYWwoKSA6IG9mKHRydWUpO1xuICB9XG5cbiAgb25Nb2RhbFJlc29sdmUoaXNDb25maXJtZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmRpc2NhcmRNb2RhbFNlcnZpY2Uub25Nb2RhbFJlc29sdmUoaXNDb25maXJtZWQpO1xuICB9XG5cbiAgb25Gb3JtVmFsdWVDaGFuZ2VkKCkge1xuICAgIHRoaXMuaXNGb3JtVG91Y2hlZCA9IHRydWU7XG4gIH1cblxuICBvbkNhbmNlbEZvcm0oKSB7XG4gICAgdGhpcy5yb3V0ZXJTZXJ2aWNlLm5hdmlnYXRlVG9QYXllZUxpc3QoKTtcbiAgfVxufVxuIl19