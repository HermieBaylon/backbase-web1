import { HostListener, ViewChild, Directive, Input } from '@angular/core';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { filter, first, map, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../services/pay-bills-state.service";
import * as i3 from "@backbase/billpay-journeys-common";
import * as i4 from "../services/pay-bills-navigation.service";
export class BasePaymentEditReviewContainerDirective {
    /** @internal */
    constructor(route, stateService, discardModalService, paymentParserService, routerService) {
        this.route = route;
        this.stateService = stateService;
        this.discardModalService = discardModalService;
        this.paymentParserService = paymentParserService;
        this.routerService = routerService;
        this.paymentError = false;
        this.hasDateError = false;
        this.paymentConfirm$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
        this.id$ = this.route.paramMap.pipe(first(), map(params => params.get('id') || ''));
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    ngOnInit() {
        combineLatest([this.stateService.paymentState, this.id$])
            .pipe(take(1))
            .subscribe(([payment, id]) => {
            this.payment = payment === null || payment === void 0 ? void 0 : payment[0];
            this.paymentReview = this.payment && this.paymentParserService.paymentFormStateToReview(this.payment);
            if (!this.payment) {
                this.navigateToForm(id);
            }
        });
        combineLatest([this.paymentConfirm$.pipe(filter(Boolean)), this.id$])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([payment, id]) => this.onPaymentConfirm(payment, id));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    confirmPayment(payment) {
        if (!payment)
            return;
        this.paymentConfirm$.next(payment);
    }
    openModal() {
        return this.paymentConfirm$.pipe(switchMap(payment => (payment ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && this.stateService.reset()));
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    cancel() {
        this.routerService.navigateToPayeeList();
    }
    get dismissTimeout() {
        if (this.dismissTimeoutValue === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.dismissTimeoutValue;
    }
}
BasePaymentEditReviewContainerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BasePaymentEditReviewContainerDirective, deps: [{ token: i1.ActivatedRoute }, { token: i2.PayBillsStateService }, { token: i3.BillpayDiscardChangesModalService }, { token: i3.BillpayPaymentParserService }, { token: i4.PayBillsNavigationService }], target: i0.ɵɵFactoryTarget.Directive });
BasePaymentEditReviewContainerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BasePaymentEditReviewContainerDirective, inputs: { dismissTimeoutValue: "dismissTimeoutValue", accountNumberMasked: "accountNumberMasked" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BasePaymentEditReviewContainerDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.PayBillsStateService }, { type: i3.BillpayDiscardChangesModalService }, { type: i3.BillpayPaymentParserService }, { type: i4.PayBillsNavigationService }]; }, propDecorators: { dismissTimeoutValue: [{
                type: Input
            }], accountNumberMasked: [{
                type: Input
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], failAlert: [{
                type: ViewChild,
                args: ['failAlert']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,