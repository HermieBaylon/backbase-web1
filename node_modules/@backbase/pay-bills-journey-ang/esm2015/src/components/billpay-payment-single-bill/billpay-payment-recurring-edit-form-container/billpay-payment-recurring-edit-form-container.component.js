import { Component, Input } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { map, switchMap, catchError } from 'rxjs/operators';
import { BillpayDiscardChangesModalService, } from '@backbase/billpay-journeys-common';
import { BasePaymentEditFormContainerDirective } from '../../../directives/base-payment-edit-form-container.model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/billpay-journeys-common";
import * as i2 from "../../../services/pay-bills-state.service";
import * as i3 from "@angular/router";
import * as i4 from "../../../services/pay-bills-navigation.service";
import * as i5 from "../billpay-payment-form/billpay-payment-form.component";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "@backbase/ui-ang/empty-state";
import * as i8 from "../billpay-payment-discard-changes-modal/billpay-payment-discard-changes-modal.component";
import * as i9 from "@angular/common";
export class BillpayPaymentRecurringEditFormContainerComponent extends BasePaymentEditFormContainerDirective {
    /** @internal */
    constructor(dataService, stateService, route, discardModalService, routerService, parserService) {
        super(dataService, stateService, route, discardModalService, routerService);
        this.routerService = routerService;
        this.parserService = parserService;
        this.hasLoadingError = false;
        this.activatedRoute = route;
    }
    ngOnInit() {
        this.paymentRecurringState$ = combineLatest([
            this.id$,
            this.stateService.paymentState.pipe(map((state) => state === null || state === void 0 ? void 0 : state[0])),
            this.payeesAndAccounts$,
        ]).pipe(switchMap(([id, state, data]) => {
            return ((state && of(state)) ||
                this.dataService.getRecurringPayment(id).pipe(map(payment => payment &&
                    (data === null || data === void 0 ? void 0 : data.payeeSummaries) &&
                    this.parserService.paymentRecurringToFormState(payment, data.payeeSummaries)), catchError(() => {
                    this.hasLoadingError = true;
                    return of({});
                })));
        }));
    }
    onPaymentSubmitted(data, id) {
        var _a;
        this.stateService.isFormProcessing = true;
        this.stateService.updatePaymentState([data]);
        this.routerService.navigateToEditRecurringReview(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
    }
}
BillpayPaymentRecurringEditFormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditFormContainerComponent, deps: [{ token: i1.BillpayPaymentDataService }, { token: i2.PayBillsStateService }, { token: i3.ActivatedRoute }, { token: i1.BillpayDiscardChangesModalService }, { token: i4.PayBillsNavigationService }, { token: i1.BillpayPaymentParserService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentRecurringEditFormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditFormContainerComponent, selector: "bb-billpay-payment-recurring-edit-form-container", inputs: { frequencies: "frequencies" }, providers: [BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0, template: "<ng-container\n  *ngIf=\"{\n    state: paymentRecurringState$ | async,\n    payeeSummaries: (payeesAndAccounts$ | async)?.payeeSummaries,\n    accounts: (payeesAndAccounts$ | async)?.accounts,\n    paymentId: id$ | async\n  } as data\"\n>\n  <ng-container *ngIf=\"data.state; else loadingState\">\n    <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n      <bb-billpay-payment-form\n        [payeeSummaries]=\"data.payeeSummaries\"\n        [accounts]=\"data.accounts\"\n        [selectedPayeeId]=\"data.state?.payeeTo?.id\"\n        [paymentState]=\"data.state\"\n        [isEditPayment]=\"true\"\n        [paymentType]=\"'recurring'\"\n        (cancelPayment)=\"onCancelForm()\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        (submitPayment)=\"onPaymentSubmitted($event, data.paymentId)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"\n            Try to reload the page or contact support|Payee List loading\n            subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n          title=\"Payment information is not loading\"\n          i18n-title=\"\n            Payment information is not loading|Form List loading\n            title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <bb-billpay-payment-discard-changes-modal\n    *ngIf=\"isDiscardModalOpen\"\n    data-role=\"billpay-payment-edit-review-page-lose-changes-modal\"\n    (resolve)=\"onModalResolve($event)\"\n    title=\"Lose changes?\"\n    i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n    subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n    i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n    confirm-button-label=\"Lose changes\"\n    i18n-confirm-button-label=\"\n      confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n    cancel-button-label=\"Continue editing\"\n    i18n-cancel-button-label=\"\n      cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n  ></bb-billpay-payment-discard-changes-modal>\n</ng-container>\n", components: [{ type: i5.BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i8.BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i9.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentRecurringEditFormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-recurring-edit-form-container',
                    templateUrl: './billpay-payment-recurring-edit-form-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1.BillpayPaymentDataService }, { type: i2.PayBillsStateService }, { type: i3.ActivatedRoute }, { type: i1.BillpayDiscardChangesModalService }, { type: i4.PayBillsNavigationService }, { type: i1.BillpayPaymentParserService }]; }, propDecorators: { frequencies: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1wYXltZW50LXJlY3VycmluZy1lZGl0LWZvcm0tY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcGF5LWJpbGxzLWpvdXJuZXkvc3JjL2NvbXBvbmVudHMvYmlsbHBheS1wYXltZW50LXNpbmdsZS1iaWxsL2JpbGxwYXktcGF5bWVudC1yZWN1cnJpbmctZWRpdC1mb3JtLWNvbnRhaW5lci9iaWxscGF5LXBheW1lbnQtcmVjdXJyaW5nLWVkaXQtZm9ybS1jb250YWluZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wYXktYmlsbHMtam91cm5leS9zcmMvY29tcG9uZW50cy9iaWxscGF5LXBheW1lbnQtc2luZ2xlLWJpbGwvYmlsbHBheS1wYXltZW50LXJlY3VycmluZy1lZGl0LWZvcm0tY29udGFpbmVyL2JpbGxwYXktcGF5bWVudC1yZWN1cnJpbmctZWRpdC1mb3JtLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQWMsYUFBYSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQ0wsaUNBQWlDLEdBS2xDLE1BQU0sbUNBQW1DLENBQUM7QUFJM0MsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sNERBQTRELENBQUM7Ozs7Ozs7Ozs7O0FBT25ILE1BQU0sT0FBTyxpREFDWCxTQUFRLHFDQUFxQztJQVE3QyxnQkFBZ0I7SUFDaEIsWUFDRSxXQUFzQyxFQUN0QyxZQUFrQyxFQUNsQyxLQUFxQixFQUNyQixtQkFBc0QsRUFDN0MsYUFBd0MsRUFDaEMsYUFBMEM7UUFFM0QsS0FBSyxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBSG5FLGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUNoQyxrQkFBYSxHQUFiLGFBQWEsQ0FBNkI7UUFaN0Qsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFldEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsc0JBQXNCLEdBQUcsYUFBYSxDQUFDO1lBQzFDLElBQUksQ0FBQyxHQUFHO1lBQ1IsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQTBCLEVBQUUsRUFBRSxDQUFDLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BGLElBQUksQ0FBQyxrQkFBa0I7U0FDeEIsQ0FBQyxDQUFDLElBQUksQ0FDTCxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUM5QixPQUFPLENBQ0wsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDM0MsR0FBRyxDQUNELE9BQU8sQ0FBQyxFQUFFLENBQ1IsT0FBTztxQkFDUCxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsY0FBYyxDQUFBO29CQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQy9FLEVBQ0QsVUFBVSxDQUFDLEdBQUcsRUFBRTtvQkFDZCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztvQkFDNUIsT0FBTyxFQUFFLENBQUMsRUFBc0IsQ0FBQyxDQUFDO2dCQUNwQyxDQUFDLENBQUMsQ0FDSCxDQUNGLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELGtCQUFrQixDQUFDLElBQXNCLEVBQUUsRUFBVTs7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBQSxJQUFJLENBQUMsY0FBYywwQ0FBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7OytJQXBEVSxpREFBaUQ7bUlBQWpELGlEQUFpRCxtSEFGakQsQ0FBQyxpQ0FBaUMsQ0FBQyxpRENwQmhELG8vRkF5RUE7NEZEbkRhLGlEQUFpRDtrQkFMN0QsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0RBQWtEO29CQUM1RCxXQUFXLEVBQUUsZ0VBQWdFO29CQUM3RSxTQUFTLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztpQkFDL0M7a1RBUVUsV0FBVztzQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgY29tYmluZUxhdGVzdCwgb2YgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBCaWxscGF5RGlzY2FyZENoYW5nZXNNb2RhbFNlcnZpY2UsXG4gIEJpbGxwYXlQYXltZW50RGF0YVNlcnZpY2UsXG4gIEJpbGxwYXlQYXltZW50UGFyc2VyU2VydmljZSxcbiAgRnJlcXVlbmN5LFxuICBQYXltZW50Rm9ybVN0YXRlLFxufSBmcm9tICdAYmFja2Jhc2UvYmlsbHBheS1qb3VybmV5cy1jb21tb24nO1xuXG5pbXBvcnQgeyBQYXlCaWxsc1N0YXRlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BheS1iaWxscy1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBheUJpbGxzTmF2aWdhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wYXktYmlsbHMtbmF2aWdhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VQYXltZW50RWRpdEZvcm1Db250YWluZXJEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi8uLi9kaXJlY3RpdmVzL2Jhc2UtcGF5bWVudC1lZGl0LWZvcm0tY29udGFpbmVyLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItYmlsbHBheS1wYXltZW50LXJlY3VycmluZy1lZGl0LWZvcm0tY29udGFpbmVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2JpbGxwYXktcGF5bWVudC1yZWN1cnJpbmctZWRpdC1mb3JtLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW0JpbGxwYXlEaXNjYXJkQ2hhbmdlc01vZGFsU2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIEJpbGxwYXlQYXltZW50UmVjdXJyaW5nRWRpdEZvcm1Db250YWluZXJDb21wb25lbnRcbiAgZXh0ZW5kcyBCYXNlUGF5bWVudEVkaXRGb3JtQ29udGFpbmVyRGlyZWN0aXZlXG4gIGltcGxlbWVudHMgT25Jbml0IHtcbiAgcGF5bWVudFJlY3VycmluZ1N0YXRlJD86IE9ic2VydmFibGU8UGF5bWVudEZvcm1TdGF0ZSB8IFBheW1lbnRGb3JtU3RhdGVbXT47XG4gIGhhc0xvYWRpbmdFcnJvciA9IGZhbHNlO1xuICBwcml2YXRlIGFjdGl2YXRlZFJvdXRlPzogQWN0aXZhdGVkUm91dGU7XG5cbiAgQElucHV0KCkgZnJlcXVlbmNpZXM/OiBGcmVxdWVuY3lbXTtcblxuICAvKiogQGludGVybmFsICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGRhdGFTZXJ2aWNlOiBCaWxscGF5UGF5bWVudERhdGFTZXJ2aWNlLFxuICAgIHN0YXRlU2VydmljZTogUGF5QmlsbHNTdGF0ZVNlcnZpY2UsXG4gICAgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgIGRpc2NhcmRNb2RhbFNlcnZpY2U6IEJpbGxwYXlEaXNjYXJkQ2hhbmdlc01vZGFsU2VydmljZSxcbiAgICByZWFkb25seSByb3V0ZXJTZXJ2aWNlOiBQYXlCaWxsc05hdmlnYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFyc2VyU2VydmljZTogQmlsbHBheVBheW1lbnRQYXJzZXJTZXJ2aWNlLFxuICApIHtcbiAgICBzdXBlcihkYXRhU2VydmljZSwgc3RhdGVTZXJ2aWNlLCByb3V0ZSwgZGlzY2FyZE1vZGFsU2VydmljZSwgcm91dGVyU2VydmljZSk7XG4gICAgdGhpcy5hY3RpdmF0ZWRSb3V0ZSA9IHJvdXRlO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5wYXltZW50UmVjdXJyaW5nU3RhdGUkID0gY29tYmluZUxhdGVzdChbXG4gICAgICB0aGlzLmlkJCxcbiAgICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnBheW1lbnRTdGF0ZS5waXBlKG1hcCgoc3RhdGU/OiBQYXltZW50Rm9ybVN0YXRlW10pID0+IHN0YXRlPy5bMF0pKSxcbiAgICAgIHRoaXMucGF5ZWVzQW5kQWNjb3VudHMkLFxuICAgIF0pLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKFtpZCwgc3RhdGUsIGRhdGFdKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHN0YXRlICYmIG9mKHN0YXRlKSkgfHxcbiAgICAgICAgICB0aGlzLmRhdGFTZXJ2aWNlLmdldFJlY3VycmluZ1BheW1lbnQoaWQpLnBpcGUoXG4gICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgIHBheW1lbnQgPT5cbiAgICAgICAgICAgICAgICBwYXltZW50ICYmXG4gICAgICAgICAgICAgICAgZGF0YT8ucGF5ZWVTdW1tYXJpZXMgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlclNlcnZpY2UucGF5bWVudFJlY3VycmluZ1RvRm9ybVN0YXRlKHBheW1lbnQsIGRhdGEucGF5ZWVTdW1tYXJpZXMpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmhhc0xvYWRpbmdFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiBvZih7fSBhcyBQYXltZW50Rm9ybVN0YXRlKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBvblBheW1lbnRTdWJtaXR0ZWQoZGF0YTogUGF5bWVudEZvcm1TdGF0ZSwgaWQ6IHN0cmluZykge1xuICAgIHRoaXMuc3RhdGVTZXJ2aWNlLmlzRm9ybVByb2Nlc3NpbmcgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnVwZGF0ZVBheW1lbnRTdGF0ZShbZGF0YV0pO1xuICAgIHRoaXMucm91dGVyU2VydmljZS5uYXZpZ2F0ZVRvRWRpdFJlY3VycmluZ1JldmlldyhpZCwgeyByZWxhdGl2ZVRvOiB0aGlzLmFjdGl2YXRlZFJvdXRlPy5wYXJlbnQgfSk7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXJcbiAgKm5nSWY9XCJ7XG4gICAgc3RhdGU6IHBheW1lbnRSZWN1cnJpbmdTdGF0ZSQgfCBhc3luYyxcbiAgICBwYXllZVN1bW1hcmllczogKHBheWVlc0FuZEFjY291bnRzJCB8IGFzeW5jKT8ucGF5ZWVTdW1tYXJpZXMsXG4gICAgYWNjb3VudHM6IChwYXllZXNBbmRBY2NvdW50cyQgfCBhc3luYyk/LmFjY291bnRzLFxuICAgIHBheW1lbnRJZDogaWQkIHwgYXN5bmNcbiAgfSBhcyBkYXRhXCJcbj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImRhdGEuc3RhdGU7IGVsc2UgbG9hZGluZ1N0YXRlXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFoYXNMb2FkaW5nRXJyb3I7IGVsc2UgZXJyb3JTdGF0ZVwiPlxuICAgICAgPGJiLWJpbGxwYXktcGF5bWVudC1mb3JtXG4gICAgICAgIFtwYXllZVN1bW1hcmllc109XCJkYXRhLnBheWVlU3VtbWFyaWVzXCJcbiAgICAgICAgW2FjY291bnRzXT1cImRhdGEuYWNjb3VudHNcIlxuICAgICAgICBbc2VsZWN0ZWRQYXllZUlkXT1cImRhdGEuc3RhdGU/LnBheWVlVG8/LmlkXCJcbiAgICAgICAgW3BheW1lbnRTdGF0ZV09XCJkYXRhLnN0YXRlXCJcbiAgICAgICAgW2lzRWRpdFBheW1lbnRdPVwidHJ1ZVwiXG4gICAgICAgIFtwYXltZW50VHlwZV09XCIncmVjdXJyaW5nJ1wiXG4gICAgICAgIChjYW5jZWxQYXltZW50KT1cIm9uQ2FuY2VsRm9ybSgpXCJcbiAgICAgICAgW2FjY291bnROdW1iZXJNYXNrXT1cImFjY291bnROdW1iZXJNYXNrZWRcIlxuICAgICAgICAoc3VibWl0UGF5bWVudCk9XCJvblBheW1lbnRTdWJtaXR0ZWQoJGV2ZW50LCBkYXRhLnBheW1lbnRJZClcIlxuICAgICAgICAodmFsdWVDaGFuZ2VkKT1cIm9uRm9ybVZhbHVlQ2hhbmdlZCgpXCJcbiAgICAgICAgW3BheW1lbnREZXRhaWxzVGl0bGVdPVwicGF5bWVudERldGFpbHNUaXRsZVwiXG4gICAgICAgIFtmcmVxdWVuY2llc109XCJmcmVxdWVuY2llc1wiXG4gICAgICA+XG4gICAgICA8L2JiLWJpbGxwYXktcGF5bWVudC1mb3JtPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L25nLWNvbnRhaW5lcj5cblxuICA8bmctdGVtcGxhdGUgI2xvYWRpbmdTdGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLWxnXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxiYi1sb2FkaW5nLWluZGljYXRvci11aSBsb2FkZXJTaXplPVwibGdcIiBkYXRhLXJvbGU9XCJsb2FkaW5nLXN0YXRlXCI+IDwvYmItbG9hZGluZy1pbmRpY2F0b3ItdWk+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9uZy10ZW1wbGF0ZT5cblxuICA8bmctdGVtcGxhdGUgI2Vycm9yU3RhdGU+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1sZ1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8YmItZW1wdHktc3RhdGUtdWlcbiAgICAgICAgICBkYXRhLXJvbGU9XCJlcnJvci1zdGF0ZVwiXG4gICAgICAgICAgaWNvblNpemU9XCJ4eGxcIlxuICAgICAgICAgIGljb25Nb2RpZmllcj1cImVycm9yXCJcbiAgICAgICAgICBzdWJ0aXRsZT1cIlRyeSB0byByZWxvYWQgdGhlIHBhZ2Ugb3IgY29udGFjdCBzdXBwb3J0XCJcbiAgICAgICAgICBpMThuLXN1YnRpdGxlPVwiXG4gICAgICAgICAgICBUcnkgdG8gcmVsb2FkIHRoZSBwYWdlIG9yIGNvbnRhY3Qgc3VwcG9ydHxQYXllZSBMaXN0IGxvYWRpbmdcbiAgICAgICAgICAgIHN1YnRpdGxlQEBiYi1iaWxscGF5LW1hbmFnZS1wYXltZW50LXdpZGdldC1hbmcubG9hZGluZy5zdWJ0aXRsZVwiXG4gICAgICAgICAgdGl0bGU9XCJQYXltZW50IGluZm9ybWF0aW9uIGlzIG5vdCBsb2FkaW5nXCJcbiAgICAgICAgICBpMThuLXRpdGxlPVwiXG4gICAgICAgICAgICBQYXltZW50IGluZm9ybWF0aW9uIGlzIG5vdCBsb2FkaW5nfEZvcm0gTGlzdCBsb2FkaW5nXG4gICAgICAgICAgICB0aXRsZUBAYmItYmlsbHBheS1tYW5hZ2UtcGF5bWVudC13aWRnZXQtYW5nLmxvYWRpbmcudGl0bGVcIlxuICAgICAgICA+XG4gICAgICAgIDwvYmItZW1wdHktc3RhdGUtdWk+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9uZy10ZW1wbGF0ZT5cblxuICA8YmItYmlsbHBheS1wYXltZW50LWRpc2NhcmQtY2hhbmdlcy1tb2RhbFxuICAgICpuZ0lmPVwiaXNEaXNjYXJkTW9kYWxPcGVuXCJcbiAgICBkYXRhLXJvbGU9XCJiaWxscGF5LXBheW1lbnQtZWRpdC1yZXZpZXctcGFnZS1sb3NlLWNoYW5nZXMtbW9kYWxcIlxuICAgIChyZXNvbHZlKT1cIm9uTW9kYWxSZXNvbHZlKCRldmVudClcIlxuICAgIHRpdGxlPVwiTG9zZSBjaGFuZ2VzP1wiXG4gICAgaTE4bi10aXRsZT1cIkxvc2UgY2hhbmdlcyBtb2RhbCBoZWFkZXJAQGJpbGxwYXkubWFuYWdlLXBheW1lbnQubG9zZS1jaGFuZ2VzLW1vZGFsLmhlYWRlclwiXG4gICAgc3VidGl0bGU9XCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2FuY2VsIGVkaXRpbmcgdGhpcyBwYXltZW50PyBZb3Ugd2lsbCBsb3NlIGFueSBjaGFuZ2VzIG1hZGUuXCJcbiAgICBpMThuLXN1YnRpdGxlPVwiTG9zZSBjaGFuZ2VzIG1vZGFsIGJvZHlAQGJpbGxwYXkubWFuYWdlLXBheW1lbnQubG9zZS1jaGFuZ2VzLW1vZGFsLmJvZHlcIlxuICAgIGNvbmZpcm0tYnV0dG9uLWxhYmVsPVwiTG9zZSBjaGFuZ2VzXCJcbiAgICBpMThuLWNvbmZpcm0tYnV0dG9uLWxhYmVsPVwiXG4gICAgICBjb25maXJtIG1vZGFsIGJ1dHRvbnxDYW5jZWwgcGF5bWVudCBjb25maXJtYXRpb24gYnV0dG9uQEBiaWxscGF5Lm1hbmFnZS1wYXltZW50Lmxvc2UtY2hhbmdlcy1tb2RhbC5jb25maXJtLWJ1dHRvblwiXG4gICAgY2FuY2VsLWJ1dHRvbi1sYWJlbD1cIkNvbnRpbnVlIGVkaXRpbmdcIlxuICAgIGkxOG4tY2FuY2VsLWJ1dHRvbi1sYWJlbD1cIlxuICAgICAgY2FuY2VsIG1vZGFsIGJ1dHRvbnxDb250aW51ZSB3aXRoIGN1cnJlbnQgcGF5bWVudCBidXR0b25AQGJpbGxwYXkubWFuYWdlLXBheW1lbnQubG9zZS1jaGFuZ2VzLW1vZGFsLmNhbmNlbC1idXR0b25cIlxuICA+PC9iYi1iaWxscGF5LXBheW1lbnQtZGlzY2FyZC1jaGFuZ2VzLW1vZGFsPlxuPC9uZy1jb250YWluZXI+XG4iXX0=