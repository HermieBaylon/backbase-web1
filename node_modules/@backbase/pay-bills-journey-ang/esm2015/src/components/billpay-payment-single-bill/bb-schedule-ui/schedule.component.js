import { Component, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { FrequencyKeys, EndTypes, PaymentServicesTypes, formControlOptions, BillpayUtilityService as Utility, } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/billpay-journeys-common";
import * as i2 from "@backbase/ui-ang/dropdown-single-select";
import * as i3 from "@backbase/ui-ang/input-radio-group";
import * as i4 from "@backbase/ui-ang/input-datepicker";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@backbase/ui-ang/input-number";
import * as i7 from "@backbase/ui-ang/alert";
import * as i8 from "@backbase/ui-ang/input-checkbox";
import * as i9 from "@angular/forms";
import * as i10 from "@angular/common";
export class ScheduleComponent {
    /** @internal */
    constructor(scheduleService) {
        this.scheduleService = scheduleService;
        this.startDateLabelId = Utility.generateId();
        this.endingLabelId = Utility.generateId();
        this.id = Utility.generateId();
        /**
         * Set initial payment service for the initial component state.
         */
        this.defaultPaymentServiceType = PaymentServicesTypes.Regular;
        /**
         * Mark the form as submitted, controls validation elements. Defaults to false.
         */
        this.formSubmitted = false;
        this.destroy$ = new Subject();
    }
    get paymentServiceRadios() {
        return this._paymentServiceRadios;
    }
    get frequencyValues() {
        return FrequencyKeys;
    }
    get endTypes() {
        return EndTypes;
    }
    get item() {
        return this.scheduleForm && this.scheduleForm.getRawValue();
    }
    get paymentServicesTypes() {
        return PaymentServicesTypes;
    }
    setDefaultPaymentServiceValue(index, options) {
        // set default value from initial state form for mapped `paymentServiceRadios`
        const paymentServiceControl = this.scheduleForm && this.scheduleForm.controls['paymentService'];
        if (paymentServiceControl) {
            paymentServiceControl.setValue(this.paymentServiceRadios &&
                this.paymentServiceRadios.find(item => !!(item.service && item.index === (index || paymentServiceControl.value.index))), options);
        }
    }
    ngOnInit() {
        if (this.scheduleForm === undefined) {
            throw new Error('`scheduleForm` input is required in `bb-schedule-ui` component');
        }
        if (this.frequencies === undefined) {
            throw new Error('`frequencies` input is required in `bb-schedule-ui` component');
        }
        this.processEndTypeValueChanges();
        this.processPaymentServiceValueChanges();
        this.processFrequencyValueChanges();
    }
    ngOnChanges(changes) {
        if (changes.paymentServices) {
            const isFirstChange = !this.paymentServiceRadios;
            const service = changes.paymentServices.currentValue;
            this._paymentServiceRadios =
                service &&
                    service.map(item => ({
                        index: item.paymentServiceType || '',
                        service: item,
                    }));
            if (this._paymentServiceRadios) {
                this._paymentServiceRadios.push({
                    index: PaymentServicesTypes.Other,
                    service: service && service.find(item => item.paymentServiceType === PaymentServicesTypes.Regular),
                });
            }
            this.setDefaultPaymentServiceValue(this.defaultPaymentServiceType, { emitEvent: !isFirstChange });
        }
    }
    processEndTypeValueChanges() {
        if (!this.scheduleForm)
            return;
        const endTypeControl = this.scheduleForm.controls['endType'];
        const endDateControl = this.scheduleForm.controls['endDate'];
        const repeatControl = this.scheduleForm.controls['repeat'];
        if (endTypeControl && endDateControl && repeatControl) {
            endTypeControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                switch (value) {
                    case EndTypes.After: {
                        repeatControl.enable(formControlOptions);
                        endDateControl.disable(formControlOptions);
                        break;
                    }
                    case EndTypes.On: {
                        endDateControl.enable(formControlOptions);
                        repeatControl.disable(formControlOptions);
                        break;
                    }
                    case EndTypes.Never:
                    default: {
                        endDateControl.disable(formControlOptions);
                        repeatControl.disable(formControlOptions);
                        break;
                    }
                }
            });
        }
    }
    processPaymentServiceValueChanges() {
        if (!this.scheduleForm)
            return;
        const startDateControl = this.scheduleForm.controls['startDate'];
        const paymentServiceControl = this.scheduleForm.controls['paymentService'];
        const paymentServiceDateControl = this.scheduleForm.controls['paymentServiceDate'];
        const frequencyControl = this.scheduleForm.controls['frequency'];
        const disableStartDate = () => frequencyControl.value === FrequencyKeys.Once && startDateControl.disable(formControlOptions);
        if (startDateControl && paymentServiceControl && paymentServiceDateControl && frequencyControl) {
            paymentServiceControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (value.index === PaymentServicesTypes.Other) {
                    startDateControl.enable(formControlOptions);
                    paymentServiceDateControl.disable(formControlOptions);
                }
                else {
                    paymentServiceDateControl.enable(formControlOptions);
                    disableStartDate();
                    paymentServiceDateControl.setValue(this.getEstimatedStartDate(value.service.paymentServiceType));
                }
            });
        }
    }
    processFrequencyValueChanges() {
        if (!this.scheduleForm)
            return;
        const endTypeControl = this.scheduleForm.controls['endType'];
        const endDateControl = this.scheduleForm.controls['endDate'];
        const repeatControl = this.scheduleForm.controls['repeat'];
        const startDateControl = this.scheduleForm.controls['startDate'];
        const paymentServiceControl = this.scheduleForm.controls['paymentService'];
        const frequencyControl = this.scheduleForm.controls['frequency'];
        const paymentServiceDateControl = this.scheduleForm.controls['paymentServiceDate'];
        if (startDateControl && frequencyControl && paymentServiceControl && endTypeControl && endDateControl) {
            frequencyControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (value === FrequencyKeys.Once) {
                    paymentServiceControl.enable(formControlOptions);
                    paymentServiceControl.updateValueAndValidity();
                    paymentServiceDateControl.enable(formControlOptions);
                    endDateControl.disable(formControlOptions);
                    endTypeControl.disable(formControlOptions);
                    repeatControl.disable(formControlOptions);
                }
                else {
                    paymentServiceControl.disable(formControlOptions);
                    paymentServiceDateControl.disable(formControlOptions);
                    startDateControl.enable(formControlOptions);
                    endDateControl.enable(formControlOptions);
                    repeatControl.enable(formControlOptions);
                    endTypeControl.enable();
                }
            });
        }
    }
    getEstimatedStartDate(serviceType) {
        const services = this.paymentServiceRadios && this.paymentServiceRadios.map(item => item.service);
        return this.scheduleService.estimatedPaymentServiceDate(services, serviceType);
    }
    getEstimatedEndDate() {
        const startDate = this.scheduleForm && this.scheduleForm.controls['startDate'].value;
        const occurrences = this.scheduleForm && this.scheduleForm.controls['repeat'].value;
        const freq = this.scheduleForm && this.scheduleForm.controls['frequency'].value;
        return startDate && this.scheduleService.estimatedEndDate(startDate, freq, occurrences);
    }
    getEstimatedOccurs() {
        const startDate = this.scheduleForm && this.scheduleForm.controls['startDate'].value;
        const endDate = this.scheduleForm && this.scheduleForm.controls['endDate'].value;
        const freq = this.scheduleForm && this.scheduleForm.controls['frequency'].value;
        return (startDate && this.scheduleService.estimatedOccurences(startDate, endDate, freq)) || 0;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ScheduleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ScheduleComponent, deps: [{ token: i1.BillpayPaymentScheduleService }], target: i0.ɵɵFactoryTarget.Component });
ScheduleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ScheduleComponent, selector: "bb-schedule-ui", inputs: { frequencies: "frequencies", minOccurs: "minOccurs", maxOccurs: "maxOccurs", scheduleForm: "scheduleForm", minDate: "minDate", defaultPaymentServiceType: "defaultPaymentServiceType", formSubmitted: "formSubmitted", paymentServices: "paymentServices" }, usesOnChanges: true, ngImport: i0, template: "<div [formGroup]=\"scheduleForm\" class=\"bb-block bb-block--md\">\n  <div class=\"bb-form-field bb-form-field--md bb-block bb-block--md\" *ngIf=\"frequencies?.length\">\n    <label\n      data-role=\"frequency-label\"\n      class=\"form-label\"\n      i18n=\"\n        Schedule frequency label|Label for a frequency dropdown in the component@@billpay.bb-schedule-ui.label.frequency\"\n    >\n      Frequency\n    </label>\n    <bb-dropdown-single-select-ui data-role=\"frequency-dropdown\" aria-label=\"frequency\" formControlName=\"frequency\">\n      <bb-dropdown-single-select-option-ui\n        *ngFor=\"let frequency of frequencies\"\n        [value]=\"frequency.value\"\n        [label]=\"frequency.name\"\n      ></bb-dropdown-single-select-option-ui>\n    </bb-dropdown-single-select-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency !== frequencyValues.Once\">\n    <label\n      data-role=\"payment-date-label\"\n      class=\"bb-label\"\n      i18n=\"\n        Schedule once payment section name|Label for the section containing inputs that determine way of once payment\n        the scheduled payments@@billpay.bb-schedule-ui.label.once-date\"\n    >\n      Execution date\n    </label>\n    <bb-input-radio-group-ui\n      data-role=\"once-payment-group\"\n      formControlName=\"paymentService\"\n      [required]=\"true\"\n      aria-label=\"once-date-type\"\n    >\n      <bb-input-radio-ui\n        *ngFor=\"let radio of paymentServiceRadios\"\n        [value]=\"radio\"\n        aria-invalid=\"false\"\n        [labelTemplate]=\"radio.index !== 'OTHER' ? paymentServiceLabelTemplate : paymentServiceOtherLabelTemplate\"\n      >\n        <ng-template #paymentServiceLabelTemplate>\n          <div class=\"bb-text-align-left\">\n            <div>\n              <span\n                data-role=\"payment-option\"\n                i18n=\"Service label list|Radio Label@@billpay.bb-input-radio-ui.radio.label.once-date.service\"\n              >\n                { radio.service.paymentServiceType, select, REGULAR_PAYMENT {Earliest free delivery} EXPEDITED_PAYMENT\n                {Rush payment} OVERNIGHT_CHECK {Overnight check} }\n              </span>\n              <span\n                *ngIf=\"\n                  radio.service.paymentServiceType === paymentServicesTypes.Expedited ||\n                  radio.service.paymentServiceType === paymentServicesTypes.Overnight\n                \"\n                i18n=\"\n                  Service label fee text|Radio Label fee@@billpay.bb-input-radio-ui.radio.label.once-date.service.fee\"\n                >&nbsp;-&nbsp;{{\n                  radio.service.fee.amount | currency: radio.service.fee.currencyCode:'symbol-narrow'\n                }}&nbsp;fee</span\n              >\n            </div>\n            <div\n              data-role=\"delivery-by\"\n              class=\"bb-text-support bb-subtitle\"\n              i18n=\"\n                Service label subtext|Radio Label\n                subtext@@billpay.bb-input-radio-ui.radio.label.once-date.service.subtext\"\n            >\n              Delivery by {{ getEstimatedStartDate(radio.service.paymentServiceType) | date: 'longDate' }}\n            </div>\n          </div>\n        </ng-template>\n        <ng-template #paymentServiceOtherLabelTemplate>\n          <div class=\"bb-stack\">\n            <span\n              class=\"bb-stack__item bb-text-bold\"\n              id=\"billpay-schedule-other-date-{{ id }}\"\n              i18n=\"Other date|Radio Label@@billpay.bb-input-radio-ui.radio.label.once-date.other\"\n              data-role=\"other-date-label\"\n              >Other date</span\n            >\n            <span class=\"bb-stack__item\">\n              <bb-input-datepicker-ui\n                (click)=\"$event.preventDefault()\"\n                formControlName=\"startDate\"\n                [minDate]=\"minDate\"\n                data-role=\"once-start-date-calendar\"\n                aria-label=\"start-date\"\n                placement=\"top-right\"\n                aria-labelledby=\"billpay-schedule-other-date-{{ id }}\"\n                [datepickerDescribedby]=\"'billpay-schedule-other-date-describe-{{ id }}'\"\n              ></bb-input-datepicker-ui>\n              <bb-input-validation-message-ui\n                role=\"alert\"\n                id=\"'billpay-schedule-other-date-describe-{{ id }}'\"\n                [showErrors]=\"scheduleForm?.get('startDate')?.invalid && formSubmitted\"\n              >\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n                  i18n=\"\n                    Execution date required error text|Error required message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.required.startDate\"\n                  data-role=\"missing-schedule-execution-date\"\n                >\n                  Execution date is required.\n                </span>\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.pastDate\"\n                  i18n=\"\n                    Execution date past date error text |Error past date message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.pastDate.startDate\"\n                  data-role=\"past-date-schedule-execution-date\"\n                >\n                  Execution date cannot be before delivery date.\n                </span>\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n                  i18n=\"\n                    Execution date invalid date error text |Error invalid date format message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.invalidDateFormat\"\n                  data-role=\"invalid-date-schedule-execution-date\"\n                >\n                  Invalid date format.\n                </span>\n              </bb-input-validation-message-ui>\n            </span>\n          </div>\n        </ng-template>\n      </bb-input-radio-ui>\n    </bb-input-radio-group-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" *ngIf=\"item?.frequency !== frequencyValues.Once\">\n    <label id=\"{{ startDateLabelId }}\" class=\"bb-text-bold\">\n      <span\n        *ngIf=\"true\"\n        id=\"billpay-schedule-start-date-{{ id }}\"\n        i18n-label=\"\n          Schedule start label|Label for an start date in scheduling component@@billpay.bb-schedule-ui.label.start\"\n        data-role=\"start-date-label\"\n      >\n        Start on\n      </span>\n    </label>\n    <div class=\"bb-form-field bb-form-field--sm\">\n      <bb-input-datepicker-ui\n        [aria-labelledby]=\"startDateLabelId\"\n        formControlName=\"startDate\"\n        [minDate]=\"minDate\"\n        data-role=\"start-date-calendar\"\n        aria-labelledby=\"billpay-schedule-start-date-{{ id }}\"\n        [datepickerDescribedby]=\"'billpay-schedule-start-date-error-{{ id }}'\"\n      ></bb-input-datepicker-ui>\n    </div>\n\n    <bb-input-validation-message-ui\n      id=\"'billpay-schedule-start-date-error-{{ id }}'\"\n      role=\"alert\"\n      [showErrors]=\"scheduleForm?.get('startDate')?.invalid && formSubmitted\"\n    >\n      <span\n        *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n        i18n=\"\n          Execution date required error text|Error required message for Execution date input\n          field@@billpay.bb-schedule-ui.error.required.startDate\"\n        data-role=\"missing-schedule-execution-date\"\n      >\n        Execution date is required.\n      </span>\n      <span\n        *ngIf=\"\n          scheduleForm?.get('startDate')?.errors?.pastDate ||\n          scheduleForm?.get('startDate')?.errors?.dateLessThanMinDate\n        \"\n        i18n=\"\n          Execution date past date error text |Error past date message for Execution date input\n          field@@billpay.bb-schedule-ui.error.pastDate.startDate\"\n        data-role=\"past-date-schedule-execution-date\"\n      >\n        Execution date cannot be before delivery date.\n      </span>\n      <span\n        *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n        i18n=\"\n          Execution date invalid date error text |Error invalid date format message for Execution date input\n          field@@billpay.bb-schedule-ui.error.invalidDateFormat\"\n        data-role=\"invalid-date-schedule-execution-date\"\n      >\n        Invalid date format.\n      </span>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency == frequencyValues.Once\">\n    <label\n      id=\"{{ endingLabelId }}\"\n      data-role=\"ending-label\"\n      class=\"bb-label\"\n      i18n=\"\n        Schedule ending section name|Label for the section containing inputs that determine way of ending of the\n        scheduled payments@@billpay.bb-schedule-ui.label.ending\"\n    >\n      End\n    </label>\n    <div class=\"bb-stack bb-stack--align-bottom\">\n      <div class=\"bb-stack__item\">\n        <bb-input-radio-group-ui [required]=\"true\" formControlName=\"endType\">\n          <bb-input-radio-ui\n            [value]=\"endTypes.Never\"\n            label=\"Never\"\n            aria-invalid=\"false\"\n            i18n-label=\"\n              Schedule never ends|Label for an option to never end the payment\n              schedule@@billpay.bb-schedule-ui.label.ending.never\"\n          >\n          </bb-input-radio-ui>\n          <bb-input-radio-ui [value]=\"endTypes.On\" aria-invalid=\"false\" [labelTemplate]=\"endingTemplate\">\n          </bb-input-radio-ui>\n          <bb-input-radio-ui [value]=\"endTypes.After\" aria-invalid=\"false\" [labelTemplate]=\"afterTemplate\">\n          </bb-input-radio-ui>\n          <ng-template #endingTemplate>\n            <div class=\"bb-stack\">\n              <span\n                data-role=\"ending-date-on-label\"\n                class=\"bb-stack__item bb-stack__item--spacing-lg\"\n                id=\"billpay-schedule-end-date-on-{{ id }}\"\n                i18n=\"\n                  Schedule end date|Label for an option to end the payment schedule on a specific\n                  date@@billpay.bb-schedule-ui.label.ending.on\"\n                >On</span\n              >\n              <div class=\"bb-stack__item\">\n                <bb-input-datepicker-ui\n                  formControlName=\"endDate\"\n                  data-role=\"ending-end-date\"\n                  i18n-aria-label=\"\n                    Schedule end date datepicker label|Aria label for end date payment schedule\n                    control@@billpay.bb-schedule-ui.label.end-date\"\n                  aria-label=\"end-date\"\n                  [minDate]=\"scheduleForm?.get('startDate')?.value\"\n                  placement=\"top-right\"\n                  aria-labelledby=\"billpay-schedule-end-date-on-{{ id }}\"\n                ></bb-input-datepicker-ui>\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  *ngIf=\"scheduleForm?.get('endDate') as control\"\n                  [showErrors]=\"control?.invalid && formSubmitted\"\n                >\n                  <span\n                    *ngIf=\"control?.errors?.pastDate || control?.errors?.dateLessThanMinDate\"\n                    i18n=\"\n                      End date past date error text |Error past date message for End date input\n                      field@@billpay.bb-schedule-ui.end-date.past-date-error\"\n                    data-role=\"past-date-ending-end-date\"\n                  >\n                    End date could not be lower than start date.\n                  </span>\n                  <span\n                    *ngIf=\"control?.errors?.invalidDateFormat\"\n                    i18n=\"\n                      End date invalid date error text |Error invalid date format message for End date input\n                      field@@billpay.bb-schedule-ui.end-date.invalid-date-format-error\"\n                    data-role=\"invalid-date-schedule-end-date\"\n                  >\n                    Invalid date format.\n                  </span>\n                  <span\n                    *ngIf=\"control?.errors?.required\"\n                    i18n=\"\n                      End date invalid date error text |Date is required for End date input\n                      field@@billpay.bb-schedule-ui.end-date.date-required-error\"\n                    data-role=\"required-date-schedule-end-date\"\n                  >\n                    End date is required.\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </ng-template>\n          <ng-template #afterTemplate>\n            <div class=\"bb-stack\">\n              <span\n                class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                i18n=\"\n                  Schedule number of occurrences|Label for an option to end the payment schedule after some number of\n                  occurrences@@billpay.bb-schedule-ui.label.ending.after\"\n              >\n                After\n              </span>\n              <div class=\"bb-stack__item\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-form-field bb-form-field--xs\">\n                    <bb-input-number-ui\n                      formControlName=\"repeat\"\n                      [min]=\"minOccurs\"\n                      [max]=\"maxOccurs\"\n                      data-role=\"ending-occurrences\"\n                      aria-label=\"occurrences\"\n                    ></bb-input-number-ui>\n                  </div>\n                  <span\n                    class=\"bb-stack__item\"\n                    i18n-label=\"\n                      Schedule occurrences text|Text to be appended after schedule end after some number of occurrences\n                      input@@billpay.bb-schedule-ui.label.ending.occurrences\"\n                  >\n                    Occurrences\n                  </span>\n                </div>\n              </div>\n            </div>\n          </ng-template>\n        </bb-input-radio-group-ui>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"item?.frequency !== frequencyValues.Once && item?.endType !== endTypes.Never && item?.startDate\">\n    <bb-alert-ui modifier=\"info\" title=\"\">\n      <span class=\"bb-text-bold\" *ngIf=\"item?.endType === endTypes.After\" data-role=\"estimated-end-date-label\">\n        <span\n          i18n=\"Estimated end date|Label for estimated end date section@@billpay.bb-schedule-ui.label.estimated.date\"\n        >\n          Estimated end date {{ getEstimatedEndDate() | date: 'longDate' }}\n        </span>\n      </span>\n      <span class=\"bb-text-bold\" *ngIf=\"item?.endType === endTypes.On\">\n        <ng-container\n          i18n=\"\n            Estimated payment in total|Label for estimated payment in total\n            section@@billpay.bb-schedule-ui.label.estimated.occurs\"\n        >\n          { getEstimatedOccurs(), plural, =1 { {{ getEstimatedOccurs() }} payment in total } other {\n          {{ getEstimatedOccurs() }} payments in total }}\n        </ng-container>\n      </span>\n    </bb-alert-ui>\n  </div>\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency == frequencyValues.Once\">\n    <label\n      data-role=\"notify-me-label\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        Notify me section name|Label for the section notify containing checkboxes @@billpay.bb-schedule-ui.label.notify\"\n    >\n      Notify me\n    </label>\n    <div>\n      <div class=\"bb-block bb-block--xs\">\n        <bb-input-checkbox-ui\n          [id]=\"'alertPendingCheckbox'\"\n          label=\"When a payment is pending\"\n          i18n-label=\"When a payment is pending|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.pending\"\n          formControlName=\"alertPendingCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n      <div class=\"bb-block bb-block--xs\">\n        <bb-input-checkbox-ui\n          [id]=\"'alertSentCheckbox'\"\n          label=\"When a payment has been sent\"\n          i18n-label=\"When a payment has been sent|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.sent\"\n          formControlName=\"alertSentCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n      <div>\n        <bb-input-checkbox-ui\n          [id]=\"'alertLastPendingCheckbox'\"\n          label=\"When the last payment is pending\"\n          i18n-label=\"When the last payment is pending|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.last-pending\"\n          formControlName=\"alertLastPendingCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i3.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i3.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i4.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i7.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i8.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i9.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i9.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }], pipes: { "currency": i10.CurrencyPipe, "date": i10.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ScheduleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-schedule-ui',
                    templateUrl: './schedule.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.BillpayPaymentScheduleService }]; }, propDecorators: { frequencies: [{
                type: Input
            }], minOccurs: [{
                type: Input
            }], maxOccurs: [{
                type: Input
            }], scheduleForm: [{
                type: Input
            }], minDate: [{
                type: Input
            }], defaultPaymentServiceType: [{
                type: Input
            }], formSubmitted: [{
                type: Input
            }], paymentServices: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,