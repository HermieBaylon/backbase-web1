import { Component, Input } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { map, switchMap, catchError } from 'rxjs/operators';
import { BasePaymentEditFormContainerDirective } from '../../../directives/base-payment-edit-form-container.model';
import { BillpayDiscardChangesModalService, } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/billpay-journeys-common";
import * as i2 from "../../../services/pay-bills-state.service";
import * as i3 from "@angular/router";
import * as i4 from "../../../services/pay-bills-navigation.service";
import * as i5 from "../billpay-payment-form/billpay-payment-form.component";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "@backbase/ui-ang/empty-state";
import * as i8 from "../billpay-payment-discard-changes-modal/billpay-payment-discard-changes-modal.component";
import * as i9 from "@angular/common";
export class BillpayPaymentOneOffEditFormContainerComponent extends BasePaymentEditFormContainerDirective {
    /** @internal */
    constructor(dataService, stateService, route, discardModalService, routerService, parserService) {
        super(dataService, stateService, route, discardModalService, routerService);
        this.routerService = routerService;
        this.parserService = parserService;
        this.hasLoadingError = false;
        this.activatedRoute = route;
    }
    ngOnInit() {
        this.paymentOneOffState$ = combineLatest([
            this.id$,
            this.stateService.paymentState.pipe(map((state) => state === null || state === void 0 ? void 0 : state[0])),
            this.payeesAndAccounts$,
        ]).pipe(switchMap(([id, state, payeesAndAccounts]) => state
            ? of(state)
            : this.dataService.getOneOffPayment(id).pipe(map(payment => payment &&
                payeesAndAccounts.payeeSummaries &&
                this.parserService.paymentOneOffToFormState(payment, payeesAndAccounts.payeeSummaries)), catchError(() => {
                this.hasLoadingError = true;
                return of({});
            }))));
    }
    onPaymentSubmitted(payment, id) {
        var _a;
        this.stateService.isFormProcessing = true;
        this.stateService.updatePaymentState([payment]);
        this.routerService.navigateToEditOneOffReview(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
    }
}
BillpayPaymentOneOffEditFormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditFormContainerComponent, deps: [{ token: i1.BillpayPaymentDataService }, { token: i2.PayBillsStateService }, { token: i3.ActivatedRoute }, { token: i1.BillpayDiscardChangesModalService }, { token: i4.PayBillsNavigationService }, { token: i1.BillpayPaymentParserService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentOneOffEditFormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditFormContainerComponent, selector: "bb-billpay-payment-one-off-edit-form-container", inputs: { frequencies: "frequencies" }, providers: [BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0, template: "<ng-container\n  *ngIf=\"{\n    state: paymentOneOffState$ | async,\n    paymentId: id$ | async,\n    accounts: (payeesAndAccounts$ | async)?.accounts,\n    payeeSummaries: (payeesAndAccounts$ | async)?.payeeSummaries\n  } as data\"\n>\n  <ng-container *ngIf=\"data.state; else loadingState\">\n    <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n      <bb-billpay-payment-form\n        [payeeSummaries]=\"data.payeeSummaries\"\n        [accounts]=\"data.accounts\"\n        [selectedPayeeId]=\"data.state?.payeeTo?.id\"\n        [paymentState]=\"data.state\"\n        [isEditPayment]=\"true\"\n        [paymentType]=\"'oneOff'\"\n        (cancelPayment)=\"onCancelForm()\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        (submitPayment)=\"onPaymentSubmitted($event, data.paymentId)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"\n            Try to reload the page or contact support|Payee List loading\n            subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n          title=\"Payment information is not loading\"\n          i18n-title=\"\n            Payment information is not loading|Form List loading\n            title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <bb-billpay-payment-discard-changes-modal\n    *ngIf=\"isDiscardModalOpen\"\n    data-role=\"billpay-payment-edit-form-page-lose-changes-modal\"\n    (resolve)=\"onModalResolve($event)\"\n    title=\"Lose changes?\"\n    i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n    subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n    i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n    confirm-button-label=\"Lose changes\"\n    i18n-confirm-button-label=\"\n      confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n    cancel-button-label=\"Continue editing\"\n    i18n-cancel-button-label=\"\n      cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n  ></bb-billpay-payment-discard-changes-modal>\n</ng-container>\n", components: [{ type: i5.BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i8.BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i9.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentOneOffEditFormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-one-off-edit-form-container',
                    templateUrl: './billpay-payment-one-off-edit-form-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1.BillpayPaymentDataService }, { type: i2.PayBillsStateService }, { type: i3.ActivatedRoute }, { type: i1.BillpayDiscardChangesModalService }, { type: i4.PayBillsNavigationService }, { type: i1.BillpayPaymentParserService }]; }, propDecorators: { frequencies: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,