import { Component, HostListener, Input } from '@angular/core';
import { map } from 'rxjs/operators';
import { combineLatest, of } from 'rxjs';
import { BillpayDiscardChangesModalService, LoadingState, } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/pay-bills-navigation.service";
import * as i2 from "@backbase/billpay-journeys-common";
import * as i3 from "../../../services/pay-bills-state.service";
import * as i4 from "@angular/router";
import * as i5 from "../billpay-payment-form/billpay-payment-form.component";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "@backbase/ui-ang/empty-state";
import * as i8 from "../billpay-payment-discard-changes-modal/billpay-payment-discard-changes-modal.component";
import * as i9 from "@angular/common";
export class BillpayPaymentFormContainerComponent {
    /** @internal */
    constructor(routerService, paymentDataService, paymentStateService, discardModalService, route) {
        this.routerService = routerService;
        this.paymentDataService = paymentDataService;
        this.paymentStateService = paymentStateService;
        this.discardModalService = discardModalService;
        this.route = route;
        this.isFormTouched = false;
        this.paymentRouteObservable$ = this.routerService.routeParams;
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    ngOnInit() {
        this.paymentDataObservable$ = combineLatest([
            this.paymentRouteObservable$,
            this.paymentDataService.getPayeesAndAccounts(),
        ]).pipe(map(([routeParams, payeeSummariesAndAccounts]) => (Object.assign(Object.assign({}, routeParams), payeeSummariesAndAccounts))));
    }
    onWindowUnload($event) {
        if ((this.isFormTouched || this.paymentStateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    hasNoErrorState(data) {
        return (this.payeesLoadingState !== LoadingState.Error &&
            this.accountsLoadingState !== LoadingState.Error &&
            !!data.accounts &&
            !!data.payeeSummaries);
    }
    onSubmittedFormData(data) {
        this.paymentStateService.isFormProcessing = true;
        this.paymentStateService.updatePaymentState([data]);
        this.routerService.navigateToReview({ relativeTo: this.route.parent });
    }
    get paymentState() {
        return this.paymentStateService.paymentState.pipe(map((state) => state === null || state === void 0 ? void 0 : state[0]));
    }
    get payeesLoadingState() {
        return this.paymentDataService.payeesLoadingState;
    }
    get accountsLoadingState() {
        return this.paymentDataService.accountsLoadingState;
    }
    openModal() {
        return this.isFormTouched || this.paymentStateService.isFormProcessing
            ? this.discardModalService.openModal()
            : of(true);
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    onFormValueChanged() {
        this.isFormTouched = true;
    }
    onCancelForm() {
        this.routerService.navigateToPayeeList();
    }
}
BillpayPaymentFormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormContainerComponent, deps: [{ token: i1.PayBillsNavigationService }, { token: i2.BillpayPaymentDataService }, { token: i3.PayBillsStateService }, { token: i2.BillpayDiscardChangesModalService }, { token: i4.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentFormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFormContainerComponent, selector: "bb-billpay-payment-form-container", inputs: { frequencies: "frequencies", accountNumberMasked: "accountNumberMasked", paymentDetailsTitle: "paymentDetailsTitle", paymentDefaultCurrency: "paymentDefaultCurrency" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], ngImport: i0, template: "<ng-container *ngIf=\"paymentDataObservable$ | async as paymentData; else loadingState\">\n  <ng-container *ngIf=\"hasNoErrorState(paymentData); else errorState\">\n    <section>\n      <bb-billpay-payment-form\n        *ngIf=\"paymentData.pageType === 'new'\"\n        [payeeSummaries]=\"paymentData?.payeeSummaries\"\n        [accounts]=\"paymentData?.accounts\"\n        [selectedPayeeId]=\"paymentData.payeeId\"\n        (submitPayment)=\"onSubmittedFormData($event)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        (cancelPayment)=\"onCancelForm()\"\n        [paymentState]=\"paymentState | async\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        [isEditPayment]=\"false\"\n        [paymentType]=\"paymentData.paymentType\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [paymentDefaultCurrency]=\"paymentDefaultCurrency\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </section>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n        subtitle=\"Try to reload the page or contact support\"\n        i18n-subtitle=\"\n          Try to reload the page or contact support|Payment loading error\n          subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n        title=\"Payment information is not loading\"\n        i18n-title=\"\n          Payment information is not loading|Payment loading error\n          title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-create-form-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel payment?\"\n  i18n-title=\"Discard changes modal header@@billpay.manage-payment.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel this payment? You will lose any details entered.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.manage-payment.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i5.BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i8.BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i9.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-form-container',
                    templateUrl: './billpay-payment-form-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1.PayBillsNavigationService }, { type: i2.BillpayPaymentDataService }, { type: i3.PayBillsStateService }, { type: i2.BillpayDiscardChangesModalService }, { type: i4.ActivatedRoute }]; }, propDecorators: { frequencies: [{
                type: Input
            }], accountNumberMasked: [{
                type: Input
            }], paymentDetailsTitle: [{
                type: Input
            }], paymentDefaultCurrency: [{
                type: Input
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,