import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Validators, } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';
import { accountNumberFullFormat, accountNumberMaskedFormat, EndTypes, formControlOptions, frequencies, RECURRING_PAYMENT, ONE_OFF_PAYMENT, FrequencyKeys, PaymentServicesTypes, BillpayUtilityService as Utility, } from '@backbase/billpay-journeys-common';
import { take, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/billpay-journeys-common";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "@backbase/ui-ang/fieldset";
import * as i5 from "@backbase/ui-ang/product-selector";
import * as i6 from "@backbase/ui-ang/product-item-basic-account";
import * as i7 from "@backbase/ui-ang/input-validation-message";
import * as i8 from "@backbase/ui-ang/product-item-current-account";
import * as i9 from "../billpay-ebill-payment-ui/billpay-ebill-payment-ui.component";
import * as i10 from "@backbase/ui-ang/amount-input";
import * as i11 from "@backbase/ui-ang/textarea";
import * as i12 from "@backbase/ui-ang/collapsible";
import * as i13 from "../bb-schedule-label-ui/schedule-label.component";
import * as i14 from "@backbase/ui-ang/icon";
import * as i15 from "../bb-schedule-ui/schedule.component";
import * as i16 from "@backbase/ui-ang/input-datepicker";
import * as i17 from "@backbase/ui-ang/alert";
import * as i18 from "@angular/common";
import * as i19 from "@backbase/ui-ang/button";
export class BillpayPaymentFormComponent {
    /** @internal */
    constructor(fb, scheduleService) {
        this.fb = fb;
        this.scheduleService = scheduleService;
        /**
         * Identifier for the payee that is currently selected to be paid from.
         */
        this.selectedPayeeId = '';
        /**
         * Identifier for the payment when the form is an edit payment.
         */
        this.paymentId = '';
        /**
         * Whether the account number should be masked. Defaults to true.
         */
        this.accountNumberMask = true;
        /**
         * Activates edit payment elements. Defaults to false.
         */
        this.isEditPayment = false;
        /**
         * get the payment details title preference. default to 'Payment details'.
         */
        this.paymentDetailsTitle = 'Payment details';
        /**
         * get the payment default currency preference. default to 'USD'.
         */
        this.paymentDefaultCurrency = 'USD';
        this.submitPayment = new EventEmitter();
        this.cancelPayment = new EventEmitter();
        this.valueChanged = new EventEmitter();
        /**
         * Payment form group
         */
        this.paymentForm = this.fb.group({});
        /**
         * Flag to display if payment is submitted
         */
        this.formSubmitted = false;
        this.minDate$ = new BehaviorSubject(this.scheduleService.today);
        this.selectedAccount$ = new BehaviorSubject(undefined);
        this.selectedPayee$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        /**
         * Maximum occurrences for the number of occurrences input box.
         */
        this.maxOccurs = 999;
        /**
         * Minimum occurrences for the number of occurrences input box.
         */
        this.minOccurs = 1;
        /**
         * unique key used for ids
         */
        this.id = Utility.generateId();
    }
    set frequencies(value) {
        this._frequencies = value;
    }
    get frequencies() {
        const isEditRecurring = this.isEditPayment && this.paymentType === RECURRING_PAYMENT;
        const usableFrequencies = this._frequencies ? this._frequencies : frequencies;
        return isEditRecurring ? usableFrequencies.filter(freq => freq.value !== FrequencyKeys.Once) : usableFrequencies;
    }
    ngOnInit() {
        this.defaultAmount = {
            amount: '',
            currency: this.paymentDefaultCurrency,
            type: undefined,
        };
        this.selectedAccount$.next(this.defaultAccountFrom);
        this.selectedPayee$.next(this.defaultPayeeTo);
        if (this.defaultPayeeTo) {
            this.ebillSummary = this.defaultPayeeTo.ebill;
        }
        this.minDate$.next(this.scheduleService.estimatedPaymentServiceDate(this.defaultPayeeTo && this.defaultPayeeTo.paymentServices, PaymentServicesTypes.Regular));
        this.createForm();
        this.proccessPaymentServiceValueChanges();
        this.proccessFrequencyValueChanges();
        this.paymentForm.valueChanges.pipe(takeUntil(this.destroy$), take(1)).subscribe(() => {
            this.valueChanged.emit();
        });
    }
    ngAfterViewInit() {
        setTimeout(() => {
            if (this.fromAccount) {
                this.fromAccount.dropdownToggle.nativeElement.focus();
            }
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    cancel() {
        this.cancelPayment.emit();
    }
    get defaultPaymentServiceType() {
        const payee = this.selectedPayee$.getValue();
        return ((this.paymentState &&
            payee &&
            this.paymentState.payeeTo.id === payee.id &&
            this.paymentState.schedule &&
            this.paymentState.schedule.paymentService &&
            this.paymentState.schedule.paymentService.index) || PaymentServicesTypes.Regular);
    }
    get accountNumberFormatConfig() {
        return this.accountNumberMask ? accountNumberMaskedFormat : accountNumberFullFormat;
    }
    get ebillPayment() {
        return !!(!this.isEditPayment &&
            this.ebillSummary &&
            this.ebillSummary.latestBill &&
            this.ebillSummary.latestBill.status === 'UNPAID' &&
            (!this.ebillSummary.status || this.ebillSummary.status === 'ACTIVE'));
    }
    get frequencyKeys() {
        return FrequencyKeys;
    }
    get schedule() {
        var _a;
        return (_a = this.paymentForm) === null || _a === void 0 ? void 0 : _a.controls['schedule'].value;
    }
    get amountGroup() {
        var _a;
        return (_a = this.paymentForm) === null || _a === void 0 ? void 0 : _a.get('amount');
    }
    get startDateControl() {
        return this.paymentForm.get('schedule.startDate');
    }
    get endDateControl() {
        return this.paymentForm.get('schedule.endDate');
    }
    get scheduleLabelData() {
        const schedule = this.schedule;
        return Object.assign(Object.assign({}, schedule), { endDate: schedule.endType === EndTypes.On ? schedule.endDate : undefined, repeat: schedule.endType === EndTypes.After ? schedule.repeat : undefined });
    }
    get defaultAccountFrom() {
        var _a;
        return this.paymentState && this.paymentState.accountFrom ? this.paymentState.accountFrom : (_a = this.accounts) === null || _a === void 0 ? void 0 : _a[0];
    }
    get defaultPayeeTo() {
        var _a;
        return ((_a = this.paymentState) === null || _a === void 0 ? void 0 : _a.payeeTo)
            ? this.paymentState.payeeTo
            : this.payeeSummaries && this.payeeSummaries.find(acc => acc.id === this.selectedPayeeId);
    }
    getOvernightAddress(payee) {
        return (this.hasOvernightCheck(payee.paymentServices) && payee.overnightDeliveryAddress) || undefined;
    }
    hasOvernightCheck(services) {
        return !!(services === null || services === void 0 ? void 0 : services.find((item) => item.paymentServiceType === PaymentServicesTypes.Overnight));
    }
    get defaultOvernightAddressState() {
        const payee = this.selectedPayee$.getValue() || {};
        const address = this.getOvernightAddress(payee) || {};
        return {
            address1: address.address1 || '',
            address2: address.address2 || '',
            city: address.city || '',
            state: address.state,
            postalCode: address.postalCode || '',
        };
    }
    get defaultFormState() {
        const payee = this.selectedPayee$.getValue() || {};
        const paymentPayeeService = payee.paymentServices &&
            payee.paymentServices.find((item) => item.paymentServiceType === this.defaultPaymentServiceType);
        const paymentPayeeServiceDate = !this.paymentState || this.paymentState.schedule.frequency === this.frequencyKeys.Once
            ? payee.paymentServices &&
                this.scheduleService.estimatedPaymentServiceDate(payee.paymentServices, this.defaultPaymentServiceType)
            : undefined;
        const { paymentId, accountFrom = this.selectedAccount$.getValue() || {}, payeeTo = payee, amount = this.defaultAmount, memo = '', overnightDeliveryAddress = this.defaultOvernightAddressState, schedule: { frequency = this.findDefaultFrequency(), startDate = this.minDate$.getValue(), endDate = this.minDate$.getValue(), repeat = 1, endType = EndTypes.Never, paymentService = this.getDefaultPaymentService(paymentPayeeService), paymentServiceDate = paymentPayeeServiceDate, alertPendingCheckbox = false, alertSentCheckbox = false, alertLastPendingCheckbox = false, } = {}, } = this.paymentState || {};
        return {
            paymentId,
            accountFrom,
            payeeTo,
            amount,
            memo,
            overnightDeliveryAddress,
            schedule: {
                frequency,
                startDate,
                endDate,
                repeat,
                endType,
                paymentService,
                paymentServiceDate,
                alertPendingCheckbox,
                alertSentCheckbox,
                alertLastPendingCheckbox,
            },
        };
    }
    proccessPaymentServiceValueChanges() {
        const paymentServiceControl = this.paymentForm.get('schedule.paymentService');
        const overnightAddressControl = this.paymentForm.controls['overnightDeliveryAddress'];
        if (paymentServiceControl && overnightAddressControl) {
            paymentServiceControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(val => {
                if (val.service.paymentServiceType === PaymentServicesTypes.Overnight) {
                    overnightAddressControl.enable(formControlOptions);
                }
                else {
                    overnightAddressControl.disable(formControlOptions);
                }
            });
        }
    }
    proccessFrequencyValueChanges() {
        const frequencyControl = this.paymentForm.get('schedule.frequency');
        const overnightAddressControl = this.paymentForm.controls['overnightDeliveryAddress'];
        if (frequencyControl && overnightAddressControl) {
            frequencyControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(val => {
                if (val.value !== FrequencyKeys.Once) {
                    overnightAddressControl.disable(formControlOptions);
                }
            });
        }
    }
    createOvernightAddressFormGroup() {
        const overnightAddress = this.defaultFormState.overnightDeliveryAddress || {};
        const paymentService = this.defaultFormState.schedule.paymentService;
        const isOvernightAddressDisabled = !paymentService ||
            !paymentService.service ||
            !paymentService.service.paymentServiceType ||
            paymentService.service.paymentServiceType !== PaymentServicesTypes.Overnight;
        return this.fb.group({
            address1: [
                {
                    value: overnightAddress.address1,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            address2: [
                {
                    value: overnightAddress.address2,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            city: [
                {
                    value: overnightAddress.city,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            state: [
                {
                    value: overnightAddress.state,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            postalCode: [
                {
                    value: overnightAddress.postalCode,
                    disabled: isOvernightAddressDisabled,
                },
            ],
        });
    }
    createScheduleFormGroup() {
        const initState = this.defaultFormState;
        const paymentService = initState.schedule.paymentService;
        const isEndDateDisabled = initState.schedule.endType !== EndTypes.On;
        const isRepeatDisabled = initState.schedule.endType !== EndTypes.After;
        const isStartDateDisabled = !!(paymentService &&
            paymentService.index !== PaymentServicesTypes.Other &&
            initState.schedule.frequency === this.frequencyKeys.Once);
        //@TODO Replace startDate, endDate validators after fix angular issues
        //https://github.com/angular/angular/issues/13461#issuecomment-502674629
        //https://github.com/angular/angular/issues/10567
        return this.fb.group({
            frequency: [initState.schedule.frequency],
            startDate: [
                {
                    value: this.scheduleService.getLocalISODate(initState.schedule.startDate),
                    disabled: isStartDateDisabled,
                },
                [Validators.required, this.minDateValidator(this.minDate$.getValue())],
            ],
            endDate: [
                {
                    value: this.scheduleService.getLocalISODate(initState.schedule.endDate),
                    disabled: isEndDateDisabled,
                },
                [Validators.required, this.minDateValidator(this.minDate$.getValue())],
            ],
            repeat: [{ value: initState.schedule.repeat, disabled: isRepeatDisabled }],
            endType: [initState.schedule.endType],
            paymentService: [initState.schedule.paymentService],
            paymentServiceDate: [
                {
                    value: initState.schedule.paymentServiceDate,
                    disabled: !isStartDateDisabled,
                },
            ],
            alertPendingCheckbox: [initState.schedule.alertPendingCheckbox],
            alertSentCheckbox: [initState.schedule.alertSentCheckbox],
            alertLastPendingCheckbox: [initState.schedule.alertLastPendingCheckbox],
        });
    }
    createForm() {
        var _a;
        const initState = this.defaultFormState;
        const amount = ((_a = initState.amount.amount) === null || _a === void 0 ? void 0 : _a.toString()) || undefined;
        this.paymentForm = this.fb.group({
            paymentId: [this.paymentId],
            accountFrom: [initState.accountFrom],
            payeeTo: [initState.payeeTo],
            amount: this.fb.group({
                amount: [amount],
                currency: [initState.amount.currency],
                type: [initState.amount.type],
            }),
            memo: [initState.memo],
            overnightDeliveryAddress: this.createOvernightAddressFormGroup(),
            schedule: this.createScheduleFormGroup(),
        });
        this.setValidators();
    }
    amountValidator(control) {
        if (!control.value.amount || +control.value.amount <= 0) {
            return {
                amountInvalid: false,
            };
        }
        else {
            // eslint-disable-next-line no-null/no-null
            return null;
        }
    }
    isInvalidControl(control) {
        return this.formSubmitted && control.invalid && control.touched;
    }
    minDateValidator(minDate) {
        return (fg) => {
            if (!fg.value) {
                // eslint-disable-next-line no-null/no-null
                return null;
            }
            if (new Date(fg.value).setHours(0, 0, 0, 0) < new Date(minDate).setHours(0, 0, 0, 0)) {
                return {
                    pastDate: true,
                };
            }
            else {
                // eslint-disable-next-line no-null/no-null
                return null;
            }
        };
    }
    notEmptyObjectValidator(control) {
        // eslint-disable-next-line no-null/no-null
        return Object.keys(control.value).length ? null : { notEmptyObject: false };
    }
    processFormData(data) {
        switch (data.schedule.endType) {
            case EndTypes.After:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { endDate: new Date(this.scheduleService.estimatedEndDate(data.schedule.startDate, data.schedule.frequency, data.schedule.repeat)).toISOString() }) });
            case EndTypes.On:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { repeat: this.scheduleService.estimatedOccurences(data.schedule.startDate, data.schedule.endDate || data.schedule.startDate, data.schedule.frequency) }) });
            default:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), (!data.schedule.startDate &&
                        this.defaultFormState.schedule.startDate && { startDate: this.defaultFormState.schedule.startDate })) });
        }
    }
    setValidators() {
        [
            ['accountFrom', [this.notEmptyObjectValidator]],
            ['payeeTo', [this.notEmptyObjectValidator]],
            ['amount', [Validators.required, this.amountValidator]],
            ['schedule.repeat', [Validators.required, Validators.min(this.minOccurs), Validators.max(this.maxOccurs)]],
            ['overnightDeliveryAddress.address1', [Validators.required, Validators.maxLength(40)]],
            ['overnightDeliveryAddress.address2', [Validators.maxLength(40)]],
            ['overnightDeliveryAddress.city', [Validators.required, Validators.maxLength(32)]],
            ['overnightDeliveryAddress.state', [Validators.required]],
            ['overnightDeliveryAddress.postalCode', [Validators.required, Validators.pattern(/^\d{5}(\d{4})?$/)]],
        ].forEach(([controlName, validators]) => {
            const control = this.paymentForm.get(controlName);
            if (control) {
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        });
    }
    handleSubmit() {
        if (!this.formSubmitted) {
            this.formSubmitted = true;
        }
        if (this.paymentForm.valid) {
            this.submitPayment.emit(this.processFormData(this.paymentForm.value));
        }
        this.paymentForm.markAllAsTouched();
    }
    selectAccount(account) {
        this.selectedAccount$.next(account);
        this.paymentForm.controls['accountFrom'].setValue(account);
    }
    setOvernightAddress(payee) {
        const control = this.paymentForm.controls['overnightDeliveryAddress'];
        if ((payee === null || payee === void 0 ? void 0 : payee.overnightDeliveryAddress) && this.hasOvernightCheck(payee.paymentServices)) {
            control.setValue({
                address1: payee.overnightDeliveryAddress.address1,
                address2: payee.overnightDeliveryAddress.address2 || '',
                city: payee.overnightDeliveryAddress.city,
                state: payee.overnightDeliveryAddress.state,
                postalCode: payee.overnightDeliveryAddress.postalCode,
            });
        }
        else {
            control.reset();
        }
    }
    selectPayee(payee) {
        this.selectedPayee$.next(payee);
        this.paymentForm.controls['payeeTo'].setValue(payee);
        this.minDate$.next(this.scheduleService.estimatedPaymentServiceDate(payee && payee.paymentServices, PaymentServicesTypes.Regular));
        if (this.startDateControl && this.endDateControl) {
            this.startDateControl.setValue(this.minDate$.getValue());
            this.endDateControl.setValue(this.minDate$.getValue());
        }
        this.setOvernightAddress(payee);
        if (payee) {
            this.ebillSummary = payee.ebill;
        }
        if (this.amountGroup) {
            this.amountGroup.patchValue({ amount: ' ', type: undefined });
        }
    }
    getDefaultPaymentService(paymentService) {
        return {
            index: this.isEditPayment && this.paymentType === ONE_OFF_PAYMENT
                ? PaymentServicesTypes.Other
                : (paymentService === null || paymentService === void 0 ? void 0 : paymentService.paymentServiceType) || '',
            service: paymentService,
        };
    }
    findDefaultFrequency() {
        var _a, _b, _c;
        let defaultFrequency;
        switch (this.paymentType) {
            case ONE_OFF_PAYMENT: {
                defaultFrequency = (_a = this.frequencies) === null || _a === void 0 ? void 0 : _a.find(item => item.value === FrequencyKeys.Once);
                break;
            }
            case RECURRING_PAYMENT: {
                defaultFrequency = (_b = this.frequencies) === null || _b === void 0 ? void 0 : _b.find(item => item.value === FrequencyKeys.Monthly);
                break;
            }
        }
        if (defaultFrequency === undefined) {
            defaultFrequency = ((_c = this.frequencies) === null || _c === void 0 ? void 0 : _c[0]) || { value: FrequencyKeys.Once, name: '' };
        }
        return defaultFrequency.value;
    }
}
BillpayPaymentFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormComponent, deps: [{ token: i1.FormBuilder }, { token: i2.BillpayPaymentScheduleService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: { payeeSummaries: "payeeSummaries", accounts: "accounts", selectedPayeeId: "selectedPayeeId", paymentState: "paymentState", paymentId: "paymentId", accountNumberMask: "accountNumberMask", paymentType: "paymentType", isEditPayment: "isEditPayment", paymentDetailsTitle: "paymentDetailsTitle", paymentDefaultCurrency: "paymentDefaultCurrency", frequencies: "frequencies" }, outputs: { submitPayment: "submitPayment", cancelPayment: "cancelPayment", valueChanged: "valueChanged" }, viewQueries: [{ propertyName: "fromAccount", first: true, predicate: ["fromAccount"], descendants: true }], ngImport: i0, template: "<form data-role=\"payment-form\" [formGroup]=\"paymentForm\" (ngSubmit)=\"handleSubmit()\">\n  <!-- Payee To edit Label -->\n  <ng-container *ngIf=\"isEditPayment\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        *ngIf=\"selectedPayee$ | async as payee\"\n        data-role=\"payee-to-edit-header\"\n        headingType=\"h1\"\n        heading=\"Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }}\"\n        i18n-heading=\"Payment to|Payee to edit label@@billpay-manage-payment.payee-to.edit.header\"\n      ></bb-header-ui>\n    </div>\n  </ng-container>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <!-- Account From -->\n      <ng-container *ngTemplateOutlet=\"paymentFormAccountFrom\"> </ng-container>\n\n      <!-- Payee To -->\n      <ng-container *ngTemplateOutlet=\"paymentFormPayeeTo\"> </ng-container>\n\n      <!-- Payment details -->\n      <ng-container *ngTemplateOutlet=\"formDetails\"> </ng-container>\n\n      <!-- Payment overnight delivery address -->\n      <ng-container *ngTemplateOutlet=\"formOvernightAddress\"> </ng-container>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          i18n=\"Make payment button|Button text to make a payment@@bb-billpay-payment-form.button.submit\"\n          data-role=\"button-submit\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Continue\n        </button>\n        <button\n          bbButton\n          i18n=\"Make payment cancel button|Button text to make cancel a payment@@bb-billpay-payment-form.button.cancel\"\n          data-role=\"cancel-payment-button\"\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          (click)=\"cancel()\"\n          color=\"link\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n</form>\n\n<ng-template #paymentFormAccountFrom>\n  <bb-fieldset-ui class=\"bb-block bb-block--lg\" data-role=\"account-from-selected\">\n    <label\n      data-role=\"select-account-label\"\n      aria-live=\"polite\"\n      class=\"bb-label\"\n      i18n=\"From|From section title@@billpay-manage-payment.section.from\"\n    >\n      From\n    </label>\n    <bb-product-selector-ui #fromAccount>\n      <ng-container bbDropdownToggle *ngIf=\"selectedAccount$ | async as selectedAccount\">\n        <bb-product-item-basic-account-ui\n          *ngIf=\"selectedAccount\"\n          [title]=\"selectedAccount.accountNickName\"\n          [productNumber]=\"selectedAccount.accountNumber\"\n          [productNumberFormat]=\"accountNumberFormatConfig\"\n          [amount]=\"selectedAccount.accountBalance?.amount\"\n          [currency]=\"selectedAccount.accountBalance?.currencyCode\"\n          [highlight]=\"false\"\n          [active]=\"false\"\n          data-role=\"account-from-selected-toggle\"\n          class=\"bb-text-align-left\"\n        >\n        </bb-product-item-basic-account-ui>\n\n        <div\n          *ngIf=\"!selectedAccount\"\n          data-role=\"select-account-option\"\n          i18n-aria-label=\"\n            Account selector aria label|Aria label to show when no account is being\n            selected@@bb-billpay-manage-payment.account.placeholder.label\"\n          aria-label=\"Select a debit account\"\n          i18n=\"\n            Account selector placeholder|Text to show when no account is being\n            selected@@bb-billpay-manage-payment.payee.placeholder\"\n          class=\"bb-text-align-left\"\n        >\n          Select an account\n        </div>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          #listItem\n          bbButton\n          class=\"bb-product-selector__dropdown-item\"\n          color=\"unstyled\"\n          [block]=\"true\"\n          *ngFor=\"let account of accounts\"\n          (click)=\"selectAccount(account)\"\n          data-role=\"account-item\"\n        >\n          <bb-product-item-basic-account-ui\n            [title]=\"account.accountNickName\"\n            [productNumber]=\"account.accountNumber\"\n            [productNumberFormat]=\"accountNumberFormatConfig\"\n            [amount]=\"account.accountBalance?.amount\"\n            [currency]=\"account.accountBalance?.currencyCode\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n            class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\"\n            role=\"menuitem\"\n          >\n          </bb-product-item-basic-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n    <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"isInvalidControl(paymentForm?.get('accountFrom'))\">\n      <span\n        *ngIf=\"!paymentForm?.get('accountFrom')?.errors?.notEmptyObject\"\n        i18n=\"Account from required error message@@bb-billpay-payment-form.error.account-from\"\n        data-role=\"invalid-account-from\"\n        >Please select an account</span\n      >\n    </bb-input-validation-message-ui>\n  </bb-fieldset-ui>\n</ng-template>\n\n<ng-template #paymentFormPayeeTo>\n  <bb-fieldset-ui *ngIf=\"!isEditPayment\" data-role=\"payee-to-product-selector\" class=\"bb-block bb-block--lg\">\n    <label\n      data-role=\"select-payee-label\"\n      aria-live=\"polite\"\n      class=\"bb-label\"\n      i18n=\"To|To section title@@billpay-manage-payment.section.to\"\n    >\n      To\n    </label>\n    <bb-product-selector-ui>\n      <ng-container bbDropdownToggle>\n        <ng-container *ngIf=\"selectedPayee$ | async as selectedPayee; else selectPauee\">\n          <bb-product-item-current-account-ui\n            *ngIf=\"selectedPayee\"\n            [title]=\"selectedPayee.nickName || selectedPayee.name\"\n            [mainSectionTitle]=\"(selectedPayee.nickName && selectedPayee.name) || ''\"\n            [highlight]=\"false\"\n            data-role=\"payee-to-selected-toggle\"\n            [active]=\"false\"\n            class=\"bb-text-align-left\"\n          >\n            <ng-template bbCustomProductItemCurrentAccountMainSection let-mainSectionTitle=\"mainSectionTitle\">\n              <div>\n                <span class=\"bb-text-support bb-subtitle\">{{ mainSectionTitle }}</span>\n              </div>\n            </ng-template>\n          </bb-product-item-current-account-ui>\n        </ng-container>\n        <ng-template #selectPauee>\n          <div\n            data-role=\"select-payee-label\"\n            class=\"bb-text-align-left\"\n            i18n=\"\n              Payee selector placeholder|Text to show when no payee is being\n              selected@@bb-billpay-manage-payment.payee.placeholder\"\n          >\n            Select a payee\n          </div>\n        </ng-template>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          #listItem\n          bbButton\n          class=\"bb-product-selector__dropdown-item\"\n          color=\"unstyled\"\n          [block]=\"true\"\n          *ngFor=\"let payee of payeeSummaries\"\n          (click)=\"selectPayee(payee)\"\n          data-role=\"payee-item\"\n        >\n          <bb-product-item-current-account-ui\n            [title]=\"payee.nickName || payee.name\"\n            [mainSectionTitle]=\"(payee.nickName && payee.name) || ''\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n            class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\"\n            role=\"menuitem\"\n          >\n            <ng-template bbCustomProductItemCurrentAccountMainSection let-mainSectionTitle=\"mainSectionTitle\">\n              <div>\n                <span class=\"bb-text-support bb-subtitle\">\n                  {{ mainSectionTitle }}\n                </span>\n              </div>\n            </ng-template>\n          </bb-product-item-current-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n    <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"isInvalidControl(paymentForm?.get('payeeTo'))\">\n      <span\n        *ngIf=\"!paymentForm?.get('payeeTo')?.errors?.notEmptyObject\"\n        i18n=\"Payee to required error message@@bb-billpay-payment-form.error.payee-to\"\n        data-role=\"invalid-payee-to\"\n      >\n        Please select a payee\n      </span>\n    </bb-input-validation-message-ui>\n  </bb-fieldset-ui>\n</ng-template>\n\n<ng-template #formDetails>\n  <fieldset class=\"bb-fieldset\" data-role=\"payment-details-fieldset\" *ngIf=\"selectedPayee$ | async\">\n    <legend class=\"bb-fieldset__heading border-bottom\">\n      <div class=\"bb-block bb-block--sm\">\n        <span i18n=\"Payment details|text for the 'payment details' payment@@bb-billpay-payment-form.payment-details\">{{\n          paymentDetailsTitle\n        }}</span>\n        <span\n          *ngIf=\"ebillPayment\"\n          class=\"bb-text-support bb-text-default\"\n          i18n=\"\n            Payment description Due|text for the 'payment description'\n            payment@@bb-billpay-payment-form.payment-description\"\n        >\n          - { paymentForm?.get('amount')?.value?.type, select, Due { eBill due amount } Minimum { eBill minimum amount }\n          Balance { eBill total amount } other { eBill custom amount } }\n        </span>\n      </div>\n    </legend>\n    <div class=\"bb-block bb-block--md\" *ngIf=\"ebillPayment\">\n      <bb-billpay-ebill-payment\n        [control]=\"amountGroup\"\n        [eBillDefaultCurrency]=\"paymentDefaultCurrency\"\n        [latestBill]=\"ebillSummary?.latestBill\"\n        [isSubmitted]=\"formSubmitted\"\n      ></bb-billpay-ebill-payment>\n    </div>\n\n    <div class=\"bb-block bb-block--md\" [formGroup]=\"amountGroup\" *ngIf=\"!ebillPayment\">\n      <label\n        class=\"bb-label\"\n        data-role=\"payment-amount-label\"\n        for=\"{{ 'billpay-amount-input-' + id }}\"\n        i18n=\"Amount of payment|ext for the 'payment details' amount@@bb-billpay-payment-form.payment-details.amount\"\n        >Amount</label\n      >\n      <div class=\"bb-form-field bb-form-field--md\">\n        <bb-amount-input-ui\n          formControlName=\"amount\"\n          data-role=\"amount\"\n          [id]=\"'billpay-amount-input-' + id\"\n          [autoDecimal]=\"true\"\n          wrapperClasses=\"bb-amount-input__field--large\"\n          [currency]=\"(selectedAccount$ | async)?.accountBalance?.currencyCode || defaultAmount.currency\"\n          placeholder=\"0.00\"\n          aria-describedby=\"{{ 'billpay-amount-errors-' + id }}\"\n        >\n        </bb-amount-input-ui>\n      </div>\n      <bb-input-validation-message-ui\n        role=\"alert\"\n        id=\"{{ 'billpay-amount-errors-' + id }}\"\n        [showErrors]=\"isInvalidControl(paymentForm?.get('amount'))\"\n      >\n        <span\n          *ngIf=\"!paymentForm?.get('amount')?.errors?.amountInvalid\"\n          i18n=\"Please add amount of this payment|Error zero amount@@bb-billpay-payment-form.error.amount\"\n          data-role=\"invalid-amount\"\n        >\n          Please add amount of this payment.\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"bb-fieldset\" [formGroup]=\"paymentForm\">\n      <label class=\"bb-label\" data-role=\"add-memo-label\" for=\"bb-billpay-payment-form-memo\">\n        <span i18n=\"Memo label|Label for payment memo@@bb-billpay-payment-form.label.memo\">Payment description</span>\n        <span class=\"bb-text-support\" i18n=\"label helper|optional text@@bb-billpay-payment-form.label.memo-helper\">\n          (Optional)</span\n        >\n      </label>\n      <div class=\"bb-form-field bb-form-field--md\">\n        <bb-textarea-ui\n          [id]=\"'bb-billpay-payment-form-memo'\"\n          formControlName=\"memo\"\n          data-role=\"memo\"\n          placeholder=\"Enter payment description\"\n          i18n-placeholder=\"\n            Enter payment description|Placeholder for payment description@@bb-billpay-payment-form.payment.description\"\n          [showCharCounter]=\"true\"\n          [maxLength]=\"140\"\n          [rows]=\"2\"\n        >\n        </bb-textarea-ui>\n      </div>\n    </div>\n\n    <!-- Payment scheduler -->\n    <bb-collapsible-ui\n      *ngIf=\"(selectedPayee$ | async) && (!isEditPayment || paymentType !== 'oneOff'); else editOneOffPaymentSchedule\"\n      data-role=\"schedule-toggle\"\n      [isOpen]=\"true\"\n    >\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div class=\"border-bottom bb-block bb-block--md\">\n          <button\n            bbButton\n            class=\"bb-stack bb-product-selector__item-content\"\n            (click)=\"toggle()\"\n            type=\"button\"\n            color=\"unstyled\"\n          >\n            <div class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\">\n              <div class=\"bb-block bb-block--sm\">\n                <span\n                  class=\"bb-heading-2\"\n                  data-role=\"schedule-section-title\"\n                  i18n=\"\n                    Schedule section title|Title of the form section with payment schedule\n                    fields@@bb-billpay-payment-form.section.schedule.title\"\n                >\n                  Schedule\n                </span>\n                <span class=\"bb-text-support bb-text-default\">\n                  <bb-schedule-label-ui\n                    [item]=\"scheduleLabelData\"\n                    [frequencies]=\"frequencies\"\n                    [minOccurrences]=\"minOccurs\"\n                    [isSingleTransfer]=\"schedule.frequency === frequencyKeys.Once\"\n                  >\n                  </bb-schedule-label-ui>\n                </span>\n              </div>\n            </div>\n            <bb-icon-ui\n              class=\"bb-stack__item\"\n              cropped\n              data-role=\"schedule-toggle-icon\"\n              aria-label=\"Schedule toggle\"\n              i18n-aria-label=\"\n                Schedule toggle label|Aria label for schedule\n                toggle@@bb-billpay-payment-form.bb-schedule-ui.label.toggle\"\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <bb-schedule-ui\n          [scheduleForm]=\"paymentForm.get('schedule')\"\n          [paymentServices]=\"(selectedPayee$ | async)?.paymentServices\"\n          [defaultPaymentServiceType]=\"defaultPaymentServiceType\"\n          [frequencies]=\"frequencies\"\n          [minOccurs]=\"minOccurs\"\n          [maxOccurs]=\"maxOccurs\"\n          [minDate]=\"minDate$ | async\"\n          [formSubmitted]=\"formSubmitted\"\n          data-role=\"payment-schedule\"\n        >\n        </bb-schedule-ui>\n      </ng-template>\n    </bb-collapsible-ui>\n\n    <ng-template #editOneOffPaymentSchedule>\n      <div *ngIf=\"selectedPayee$ | async\" class=\"bb-block bb-block--md\" [formGroup]=\"paymentForm.get('schedule')\">\n        <label class=\"bb-label\" data-role=\"deliver-payment-by-date\">\n          <span\n            id=\"billpay-schedule-end-date-on-{{ id }}\"\n            i18n=\"Deliver payment by label|Edit one off payment date@@bb-billpay-payment-form.label.deliver-payment-by\"\n            >Deliver payment by</span\n          >\n          <div>\n            <bb-input-datepicker-ui\n              formControlName=\"startDate\"\n              [minDate]=\"minDate$ | async\"\n              data-role=\"once-start-date-calendar\"\n              aria-label=\"start-date\"\n              aria-labelledby=\"billpay-schedule-end-date-on-{{ id }}\"\n              datepickerDescribedby=\"billpay-schedule-end-date-on-error-{{ id }}\"\n            ></bb-input-datepicker-ui>\n          </div>\n          <bb-input-validation-message-ui\n            id=\"billpay-schedule-end-date-on-error-{{ id }}\"\n            aria-live=\"polite\"\n            [showErrors]=\"paymentForm.get('schedule.startDate')?.invalid && formSubmitted\"\n          >\n            <span\n              *ngIf=\"paymentForm.get('schedule.startDate')?.hasError('required')\"\n              i18n=\"\n                Execution date required error text|Error required message for Execution date input\n                field@@bb-billpay-payment-form.error.required.startDate\"\n              data-role=\"missing-schedule-execution-date\"\n            >\n              Execution date is required.\n            </span>\n            <span\n              *ngIf=\"\n                paymentForm.get('schedule.startDate')?.hasError('pastDate') ||\n                paymentForm.get('schedule.startDate')?.hasError('dateLessThanMinDate')\n              \"\n              i18n=\"\n                Execution date past date error text |Error past date message for Execution date input\n                field@@bb-billpay-payment-form.error.pastDate.startDate\"\n              data-role=\"past-date-schedule-execution-date\"\n            >\n              Execution date cannot be before delivery date.\n            </span>\n            <span\n              *ngIf=\"paymentForm?.get('schedule.startDate')?.hasError('invalidDateFormat')\"\n              i18n=\"\n                Execution date invalid date error text |Error invalid date format message for Execution date input\n                field@@bb-billpay-payment-form.error.invalidDateFormat\"\n              data-role=\"invalid-date-schedule-execution-date\"\n            >\n              Invalid date format.\n            </span>\n          </bb-input-validation-message-ui>\n        </label>\n      </div>\n    </ng-template>\n  </fieldset>\n</ng-template>\n\n<ng-template #formOvernightAddress>\n  <ng-container\n    *ngIf=\"schedule.paymentService?.service?.paymentServiceType === 'OVERNIGHT_CHECK'\"\n    [formGroup]=\"paymentForm\"\n  >\n    <bb-fieldset-ui\n      i18n-heading=\"\n        Overnight check address|Text for the payment overnight\n        address@@bb-billpay-payment-form.payment-overnight-address\"\n      heading=\"Overnight check address\"\n      class=\"bb-block bb-block-xl\"\n    >\n      <bb-alert-ui\n        modifier=\"info\"\n        class=\"d-block\"\n        title=\"This address might be a dedicated PO box for overnight payments. Please check with your biller\"\n        i18n-title=\"alert title|Address alert@@bb-billpay-payment-form.payment-overnight-address.alert\"\n        data-role=\"overnight-alert-message\"\n      >\n      </bb-alert-ui>\n      <bb-billpay-address-form\n        [formGroup]=\"paymentForm.get('overnightDeliveryAddress')\"\n        formGroupName=\"overnightDeliveryAddress\"\n      ></bb-billpay-address-form>\n    </bb-fieldset-ui>\n  </ng-container>\n</ng-template>\n", components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i5.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i6.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i7.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i8.ProductItemCurrentAccountComponent, selector: "bb-product-item-current-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i9.BillpayEbillPaymentUIComponent, selector: "bb-billpay-ebill-payment", inputs: ["latestBill", "control", "isSubmitted", "eBillDefaultCurrency"] }, { type: i10.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i11.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i12.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i13.ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: ["item", "isSingleTransfer", "minOccurrences", "frequencies"] }, { type: i14.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i15.ScheduleComponent, selector: "bb-schedule-ui", inputs: ["frequencies", "minOccurs", "maxOccurs", "scheduleForm", "minDate", "defaultPaymentServiceType", "formSubmitted", "paymentServices"] }, { type: i16.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i17.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2.ӨBillpayAddressFormComponent, selector: "bb-billpay-address-form" }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i18.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i18.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i19.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i18.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.CustomProductItemCurrentAccountMainSectionDirective, selector: "ng-template[bbCustomProductItemCurrentAccountMainSection]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i12.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i12.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }, { type: i16.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "async": i18.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-form',
                    templateUrl: './billpay-payment-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.BillpayPaymentScheduleService }]; }, propDecorators: { payeeSummaries: [{
                type: Input
            }], accounts: [{
                type: Input
            }], selectedPayeeId: [{
                type: Input
            }], paymentState: [{
                type: Input
            }], paymentId: [{
                type: Input
            }], accountNumberMask: [{
                type: Input
            }], paymentType: [{
                type: Input
            }], isEditPayment: [{
                type: Input
            }], paymentDetailsTitle: [{
                type: Input
            }], paymentDefaultCurrency: [{
                type: Input
            }], frequencies: [{
                type: Input
            }], fromAccount: [{
                type: ViewChild,
                args: ['fromAccount']
            }], submitPayment: [{
                type: Output
            }], cancelPayment: [{
                type: Output
            }], valueChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,