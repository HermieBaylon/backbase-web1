import { ChangeDetectionStrategy, Component, HostListener, Input, ViewChild, } from '@angular/core';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { filter, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { BillpayDiscardChangesModalService, } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/pay-bills-navigation.service";
import * as i2 from "@backbase/billpay-journeys-common";
import * as i3 from "../../../services/pay-bills-state.service";
import * as i4 from "@backbase/ui-ang/notification";
import * as i5 from "@angular/router";
import * as i6 from "@backbase/ui-ang/alert";
import * as i7 from "../billpay-payment-discard-changes-modal/billpay-payment-discard-changes-modal.component";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
export class BillpayPaymentReviewContainerComponent {
    /** @internal */
    constructor(navigationService, dataService, stateService, notificationService, discardModalService, paymentParserService, route, cdRef) {
        this.navigationService = navigationService;
        this.dataService = dataService;
        this.stateService = stateService;
        this.notificationService = notificationService;
        this.discardModalService = discardModalService;
        this.paymentParserService = paymentParserService;
        this.route = route;
        this.cdRef = cdRef;
        this.paymentConfirm$ = new BehaviorSubject(undefined);
        this.componentDestroyed$ = new Subject();
        this.paymentError = false;
        this.hasDateError = false;
        this.editMode = false;
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    get dismissTimeout() {
        if (this.dismissTimeoutValue === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.dismissTimeoutValue;
    }
    ngOnInit() {
        this.stateService.paymentState.pipe(take(1)).subscribe(payment => {
            var _a;
            this.payment = payment === null || payment === void 0 ? void 0 : payment[0];
            this.paymentReview = this.payment && this.paymentParserService.paymentFormStateToReview(this.payment);
            const frequency = (_a = this.frequencies) === null || _a === void 0 ? void 0 : _a.find(freq => { var _a, _b; return ((_b = (_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.frequency) === freq.value; });
            this.frequencyLabel = (frequency === null || frequency === void 0 ? void 0 : frequency.name) || '';
            if (!this.payment) {
                this.navigationService.navigateToForm({ relativeTo: this.route.parent });
            }
        });
        this.paymentConfirm$
            .pipe(takeUntil(this.componentDestroyed$), filter(Boolean))
            .subscribe(payment => this.onPaymentConfirm(payment));
    }
    ngOnDestroy() {
        this.componentDestroyed$.next();
        this.componentDestroyed$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    onEdit() {
        this.editMode = true;
        this.navigationService.navigateToForm({ relativeTo: this.route.parent });
    }
    navigateToPayments() {
        this.navigationService.navigateToPayments();
    }
    cancel() {
        this.navigationService.navigateToPayeeList();
    }
    confirmPayment(payment) {
        if (!payment)
            return;
        this.paymentConfirm$.next(payment);
    }
    openModal() {
        return this.paymentConfirm$.pipe(switchMap(payment => (payment || this.editMode ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && !this.editMode && this.stateService.reset()));
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    onPaymentConfirm(payment) {
        this.paymentError = false;
        this.hasDateError = false;
        this.dataService
            .createPayment(payment)
            .pipe(takeUntil(this.componentDestroyed$))
            .subscribe(() => {
            this.navigationService.navigateToPayeeList();
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }, response => {
            var _a, _b;
            this.paymentError = true;
            this.hasDateError = (_b = (_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.some((a) => a.key === 'billpay.api.invalidPaymentDate');
            this.cdRef.markForCheck();
            this.failAlert.nativeElement.scrollIntoView(false);
        });
    }
}
BillpayPaymentReviewContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentReviewContainerComponent, deps: [{ token: i1.PayBillsNavigationService }, { token: i2.BillpayPaymentDataService }, { token: i3.PayBillsStateService }, { token: i4.NotificationService }, { token: i2.BillpayDiscardChangesModalService }, { token: i2.BillpayPaymentParserService }, { token: i5.ActivatedRoute }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentReviewContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentReviewContainerComponent, selector: "bb-billpay-payment-review-container", inputs: { frequencies: "frequencies", dismissTimeoutValue: "dismissTimeoutValue", accountNumberMasked: "accountNumberMasked" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"payment\">\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-block bb-block--xl\">\n        <ng-container *ngTemplateOutlet=\"reviewContent\"></ng-container>\n      </div>\n      <ng-container *ngTemplateOutlet=\"reviewButtons\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #reviewContent>\n  <div #failAlert>\n    <bb-alert-ui\n      title=\"Failed to submit payment. Please try again later.\"\n      i18n-title=\"Failed to submit payment|Title for payment error@@billpay-payment-review-container.error-alert\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-message\"\n      *ngIf=\"paymentError && !hasDateError\"\n    >\n    </bb-alert-ui>\n    <bb-alert-ui\n      title=\"The date selected is invalid.\"\n      i18n-title=\"\n        Failed to submit payment date|Title for payment date error@@billpay-payment-review-container.error-date-alert\"\n      message=\"The payment cannot be scheduled on this date. Please select another date in the previous step.\"\n      i18n-message=\"Date payment error|Date error for payment@@billpay-payment-review.date-error-alert.message\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-date-message\"\n      *ngIf=\"paymentError && hasDateError\"\n    >\n    </bb-alert-ui>\n  </div>\n  <bb-billpay-payment-review-card\n    [accountNumberMask]=\"accountNumberMasked\"\n    [paymentReview]=\"paymentReview\"\n    [frequencyLabel]=\"frequencyLabel\"\n  >\n  </bb-billpay-payment-review-card>\n</ng-template>\n\n<ng-template #reviewButtons>\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      data-role=\"confirm-payment-button\"\n      i18n=\"Payment details confirm button|Label for confirm payment button@@billpay-payment-review.confirm\"\n      (click)=\"confirmPayment(payment)\"\n      class=\"bb-button-bar__button\"\n    >\n      Submit\n    </button>\n    <button\n      bbButton\n      data-role=\"edit-payment-button\"\n      i18n=\"Payment details edit button|Label for edit payment button@@billpay-payment-review.edit\"\n      (click)=\"onEdit()\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n    >\n      Edit\n    </button>\n    <button\n      bbButton\n      data-role=\"cancel-payment-button\"\n      i18n=\"Payment details cancel button|Label for cancel payment button@@billpay-payment-review.cancel\"\n      (click)=\"cancel()\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n    >\n      Discard\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <ng-container *ngIf=\"payment?.payeeTo as payee\">\n    <span\n      i18n=\"\n        payment notification message|Payment confirmation success notification\n        message@@billpay-payment-review.confirm.notification.message\"\n      >Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }} has been scheduled\n      successfully</span\n    >\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"notification-secondary-button\"\n        class=\"bb-button-bar__button\"\n        (click)=\"navigateToPayments()\"\n        i18n=\"\n          payment notification button|Navigate to scheduled payments@@billpay-payment-review.confirm.notification.button\"\n      >\n        View scheduled payments\n      </button>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <span\n    i18n=\"\n      payment notification header|Payment confirmation success notification\n      header@@billpay-payment-review.confirm.notification.header\"\n    >Payment scheduled</span\n  >\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel payment?\"\n  i18n-title=\"Discard changes modal header@@billpay.manage-payment.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel this payment? You will lose any details entered.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.manage-payment.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i6.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2.BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: ["paymentReview", "accountNumberMask", "frequencyLabel"] }, { type: i7.BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentReviewContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-review-container',
                    templateUrl: './billpay-payment-review-container.component.html',
                    providers: [BillpayDiscardChangesModalService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.PayBillsNavigationService }, { type: i2.BillpayPaymentDataService }, { type: i3.PayBillsStateService }, { type: i4.NotificationService }, { type: i2.BillpayDiscardChangesModalService }, { type: i2.BillpayPaymentParserService }, { type: i5.ActivatedRoute }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { frequencies: [{
                type: Input
            }], dismissTimeoutValue: [{
                type: Input
            }], accountNumberMasked: [{
                type: Input
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], failAlert: [{
                type: ViewChild,
                args: ['failAlert']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,