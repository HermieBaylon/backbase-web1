import { Component, Input } from '@angular/core';
import { FrequencyKeys, PaymentServicesTypes } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ScheduleLabelComponent {
    constructor() {
        /**
         * Selects elements appropriate to a one-off payment. Defaults to true.
         */
        this.isSingleTransfer = true;
        /**
         * Minimum number of occurrences for recurring payments.
         */
        this.minOccurrences = 1;
    }
    get frequencyLabel() {
        var _a;
        const frequency = (_a = this.frequencies) === null || _a === void 0 ? void 0 : _a.find(freq => { var _a; return ((_a = this.item) === null || _a === void 0 ? void 0 : _a.frequency) === freq.value; });
        return $localize `:@@billpay-payment.form.schedule-frequency-label:${(frequency === null || frequency === void 0 ? void 0 : frequency.name) || ''}`;
    }
    get startDate() {
        var _a, _b, _c;
        const date = String((((_a = this.item) === null || _a === void 0 ? void 0 : _a.frequency) === FrequencyKeys.Once &&
            ((_b = this.item.paymentService) === null || _b === void 0 ? void 0 : _b.index) !== PaymentServicesTypes.Other &&
            this.item.paymentServiceDate) ||
            ((_c = this.item) === null || _c === void 0 ? void 0 : _c.startDate));
        return (this.item && date) || undefined;
    }
    get endDate() {
        return this.item && this.item.endDate && Date.parse(this.item.endDate) ? new Date(this.item.endDate) : undefined;
    }
    isToday() {
        if (this.item === undefined) {
            throw new Error('`item` input is required in `bb-schedule-label-ui` component');
        }
        const today = new Date().setHours(0, 0, 0, 0);
        const startDate = new Date(this.item.startDate);
        return startDate.setHours(0, 0, 0, 0) === today;
    }
    hasEnd() {
        return !!this.item && (this.item.endDate !== undefined || this.item.repeat !== undefined);
    }
    hasLimit() {
        return this.hasEnd() && !this.isSingleTransfer;
    }
}
ScheduleLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ScheduleLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ScheduleLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: { item: "item", isSingleTransfer: "isSingleTransfer", minOccurrences: "minOccurrences", frequencies: "frequencies" }, ngImport: i0, template: "<span>\n  <ng-container *ngIf=\"frequencyLabel; else defaultLabels\">{{ frequencyLabel }},</ng-container>\n  <!-- Remove default labels after journey migration phase 2 -->\n  <ng-template #defaultLabels>\n    <span\n      i18n=\"\n        Schedule frequency title list|List of titles for available schedule\n        frequencies@@billpay.bb-schedule-label-ui.frequency.list\"\n    >\n      {item?.frequency, select, ONCE {Once} WEEKLY {Weekly} EVERY_2_WEEKS {Every two weeks} MONTHLY {Monthly}\n      EVERY_4_WEEKS {Every for weeks} TWICE_A_MONTH {Semi monthly} EVERY_2_MONTHS {Every two months} EVERY_3_MONTHS {\n      Every three months} EVERY_6_MONTHS {Every six months} ANNUALLY {Annually}},\n    </span>\n  </ng-template>\n</span>\n<ng-container *ngIf=\"isSingleTransfer\">\n  <span\n    i18n=\"\n      On|Word to be used before a date to indicate that the payment will be executed on that\n      date@@billpay.bb-schedule-label-ui.label.on\"\n    >&nbsp;on</span\n  >\n</ng-container>\n\n<ng-container *ngIf=\"!isSingleTransfer\">\n  <span\n    i18n=\"\n      Schedule start|Word to be used before a date to indicate that this date is a starting date of the\n      schedule@@billpay.bb-schedule-label-ui.label.start\"\n    >&nbsp;starting</span\n  >\n</ng-container>\n\n<span>&nbsp;{{ startDate | date: 'mediumDate' }}</span>\n\n<ng-container *ngIf=\"hasLimit() && item?.endDate\"\n  >&sbquo;\n  <span\n    i18n=\"\n      Schedule end|Word to be used before a date to indicate that this date is an end date of the\n      schedule@@billpay.bb-schedule-label-ui.label.end\"\n    >Until&nbsp;{{ endDate | date: 'mediumDate' }}</span\n  >\n</ng-container>\n\n<ng-container *ngIf=\"hasLimit() && (item?.repeat || 0) >= minOccurrences\"\n  >&sbquo;\n  <span>{ item?.repeat, plural, =1 { {{ item?.repeat }} time} other { {{ item?.repeat }} times}}</span>\n</ng-container>\n", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i1.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ScheduleLabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-schedule-label-ui',
                    templateUrl: './schedule-label.component.html',
                }]
        }], propDecorators: { item: [{
                type: Input
            }], isSingleTransfer: [{
                type: Input
            }], minOccurrences: [{
                type: Input
            }], frequencies: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,