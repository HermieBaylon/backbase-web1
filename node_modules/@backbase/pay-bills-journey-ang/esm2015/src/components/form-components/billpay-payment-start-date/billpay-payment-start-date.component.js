import { Component, Input } from '@angular/core';
import { BillpayUtilityService as Utility } from '@backbase/billpay-journeys-common';
import { FrequencyKeys } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/input-datepicker";
import * as i2 from "@backbase/ui-ang/input-validation-message";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class BillpayPaymentStartDateComponent {
    constructor() {
        this.frequencyValues = FrequencyKeys;
        this.id = Utility.generateId();
    }
    get formValue() {
        var _a;
        return (_a = this.scheduleForm) === null || _a === void 0 ? void 0 : _a.getRawValue();
    }
}
BillpayPaymentStartDateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentStartDateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentStartDateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentStartDateComponent, selector: "bb-billpay-payment-start-date", inputs: { scheduleForm: "scheduleForm", frequencies: "frequencies", minDate: "minDate" }, ngImport: i0, template: "<div class=\"bb-block bb-block--md\" *ngIf=\"formValue?.frequency !== frequencyValues.Once\">\n  <label id=\"billpay-start-date-{{ id }}\" class=\"bb-text-bold\">\n    <span\n      *ngIf=\"true\"\n      i18n-label=\"@@billpay.billpay-payment-start-date.label.start\"\n      data-role=\"billpay-start-date-label\"\n      id=\"'billpay-start-date-' + {{ id }}\"\n    >\n      Start On\n    </span>\n  </label>\n  <div class=\"bb-form-field bb-form-field--sm\">\n    <bb-input-datepicker-ui\n      [aria-labelledby]=\"'billpay-start-date-' + id\"\n      [formControl]=\"scheduleForm?.get('startDate')\"\n      [minDate]=\"minDate\"\n      data-role=\"billpay-start-date-calendar\"\n      [datepickerDescribedby]=\"'billpay-start-date-error-{{ id }}'\"\n    ></bb-input-datepicker-ui>\n  </div>\n\n  <bb-input-validation-message-ui\n    id=\"billpay-start-date-error-{{ id }}\"\n    role=\"alert\"\n    [showErrors]=\"scheduleForm?.get('startDate')?.invalid && scheduleForm?.get('startDate')?.touched\"\n  >\n    <span\n      *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n      i18n=\"@@billpay.billpay-payment-start-date.error.required.startDate\"\n      data-role=\"missing-schedule-execution-date\"\n    >\n      Execution date is required.\n    </span>\n    <span\n      *ngIf=\"\n        scheduleForm?.get('startDate')?.errors?.pastDate || scheduleForm?.get('startDate')?.errors?.dateLessThanMinDate\n      \"\n      i18n=\"@@billpay.billpay-payment-start-date.error.pastDate.startDate\"\n      data-role=\"past-date-schedule-execution-date\"\n    >\n      Execution date could not be in a past.\n    </span>\n    <span\n      *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n      i18n=\"@@billpay.billpay-payment-start-date.error.invalidDateFormat\"\n      data-role=\"invalid-date-schedule-execution-date\"\n    >\n      Invalid date format.\n    </span>\n  </bb-input-validation-message-ui>\n</div>\n", components: [{ type: i1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentStartDateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-start-date',
                    templateUrl: './billpay-payment-start-date.component.html',
                }]
        }], propDecorators: { scheduleForm: [{
                type: Input
            }], frequencies: [{
                type: Input
            }], minDate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1wYXltZW50LXN0YXJ0LWRhdGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wYXktYmlsbHMtam91cm5leS9zcmMvY29tcG9uZW50cy9mb3JtLWNvbXBvbmVudHMvYmlsbHBheS1wYXltZW50LXN0YXJ0LWRhdGUvYmlsbHBheS1wYXltZW50LXN0YXJ0LWRhdGUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wYXktYmlsbHMtam91cm5leS9zcmMvY29tcG9uZW50cy9mb3JtLWNvbXBvbmVudHMvYmlsbHBheS1wYXltZW50LXN0YXJ0LWRhdGUvYmlsbHBheS1wYXltZW50LXN0YXJ0LWRhdGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFhLHFCQUFxQixJQUFJLE9BQU8sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7O0FBTWxFLE1BQU0sT0FBTyxnQ0FBZ0M7SUFKN0M7UUFRRSxvQkFBZSxHQUFHLGFBQWEsQ0FBQztRQUN2QixPQUFFLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBS3BDO0lBSEMsSUFBSSxTQUFTOztRQUNYLE9BQU8sTUFBQSxJQUFJLENBQUMsWUFBWSwwQ0FBRSxXQUFXLEVBQUUsQ0FBQztJQUMxQyxDQUFDOzs4SEFUVSxnQ0FBZ0M7a0hBQWhDLGdDQUFnQywrSkNUN0MscTVEQW1EQTs0RkQxQ2EsZ0NBQWdDO2tCQUo1QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwrQkFBK0I7b0JBQ3pDLFdBQVcsRUFBRSw2Q0FBNkM7aUJBQzNEOzhCQUVVLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSztnQkFDRyxPQUFPO3NCQUFmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGcmVxdWVuY3ksIEJpbGxwYXlVdGlsaXR5U2VydmljZSBhcyBVdGlsaXR5IH0gZnJvbSAnQGJhY2tiYXNlL2JpbGxwYXktam91cm5leXMtY29tbW9uJztcbmltcG9ydCB7IEZyZXF1ZW5jeUtleXMgfSBmcm9tICdAYmFja2Jhc2UvYmlsbHBheS1qb3VybmV5cy1jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1iaWxscGF5LXBheW1lbnQtc3RhcnQtZGF0ZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9iaWxscGF5LXBheW1lbnQtc3RhcnQtZGF0ZS5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEJpbGxwYXlQYXltZW50U3RhcnREYXRlQ29tcG9uZW50IHtcbiAgQElucHV0KCkgc2NoZWR1bGVGb3JtPzogRm9ybUdyb3VwO1xuICBASW5wdXQoKSBmcmVxdWVuY2llcz86IEFycmF5PEZyZXF1ZW5jeT47XG4gIEBJbnB1dCgpIG1pbkRhdGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZnJlcXVlbmN5VmFsdWVzID0gRnJlcXVlbmN5S2V5cztcbiAgcmVhZG9ubHkgaWQgPSBVdGlsaXR5LmdlbmVyYXRlSWQoKTtcblxuICBnZXQgZm9ybVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnNjaGVkdWxlRm9ybT8uZ2V0UmF3VmFsdWUoKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1tZFwiICpuZ0lmPVwiZm9ybVZhbHVlPy5mcmVxdWVuY3kgIT09IGZyZXF1ZW5jeVZhbHVlcy5PbmNlXCI+XG4gIDxsYWJlbCBpZD1cImJpbGxwYXktc3RhcnQtZGF0ZS17eyBpZCB9fVwiIGNsYXNzPVwiYmItdGV4dC1ib2xkXCI+XG4gICAgPHNwYW5cbiAgICAgICpuZ0lmPVwidHJ1ZVwiXG4gICAgICBpMThuLWxhYmVsPVwiQEBiaWxscGF5LmJpbGxwYXktcGF5bWVudC1zdGFydC1kYXRlLmxhYmVsLnN0YXJ0XCJcbiAgICAgIGRhdGEtcm9sZT1cImJpbGxwYXktc3RhcnQtZGF0ZS1sYWJlbFwiXG4gICAgICBpZD1cIidiaWxscGF5LXN0YXJ0LWRhdGUtJyArIHt7IGlkIH19XCJcbiAgICA+XG4gICAgICBTdGFydCBPblxuICAgIDwvc3Bhbj5cbiAgPC9sYWJlbD5cbiAgPGRpdiBjbGFzcz1cImJiLWZvcm0tZmllbGQgYmItZm9ybS1maWVsZC0tc21cIj5cbiAgICA8YmItaW5wdXQtZGF0ZXBpY2tlci11aVxuICAgICAgW2FyaWEtbGFiZWxsZWRieV09XCInYmlsbHBheS1zdGFydC1kYXRlLScgKyBpZFwiXG4gICAgICBbZm9ybUNvbnRyb2xdPVwic2NoZWR1bGVGb3JtPy5nZXQoJ3N0YXJ0RGF0ZScpXCJcbiAgICAgIFttaW5EYXRlXT1cIm1pbkRhdGVcIlxuICAgICAgZGF0YS1yb2xlPVwiYmlsbHBheS1zdGFydC1kYXRlLWNhbGVuZGFyXCJcbiAgICAgIFtkYXRlcGlja2VyRGVzY3JpYmVkYnldPVwiJ2JpbGxwYXktc3RhcnQtZGF0ZS1lcnJvci17eyBpZCB9fSdcIlxuICAgID48L2JiLWlucHV0LWRhdGVwaWNrZXItdWk+XG4gIDwvZGl2PlxuXG4gIDxiYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWlcbiAgICBpZD1cImJpbGxwYXktc3RhcnQtZGF0ZS1lcnJvci17eyBpZCB9fVwiXG4gICAgcm9sZT1cImFsZXJ0XCJcbiAgICBbc2hvd0Vycm9yc109XCJzY2hlZHVsZUZvcm0/LmdldCgnc3RhcnREYXRlJyk/LmludmFsaWQgJiYgc2NoZWR1bGVGb3JtPy5nZXQoJ3N0YXJ0RGF0ZScpPy50b3VjaGVkXCJcbiAgPlxuICAgIDxzcGFuXG4gICAgICAqbmdJZj1cInNjaGVkdWxlRm9ybT8uZ2V0KCdzdGFydERhdGUnKT8uZXJyb3JzPy5yZXF1aXJlZFwiXG4gICAgICBpMThuPVwiQEBiaWxscGF5LmJpbGxwYXktcGF5bWVudC1zdGFydC1kYXRlLmVycm9yLnJlcXVpcmVkLnN0YXJ0RGF0ZVwiXG4gICAgICBkYXRhLXJvbGU9XCJtaXNzaW5nLXNjaGVkdWxlLWV4ZWN1dGlvbi1kYXRlXCJcbiAgICA+XG4gICAgICBFeGVjdXRpb24gZGF0ZSBpcyByZXF1aXJlZC5cbiAgICA8L3NwYW4+XG4gICAgPHNwYW5cbiAgICAgICpuZ0lmPVwiXG4gICAgICAgIHNjaGVkdWxlRm9ybT8uZ2V0KCdzdGFydERhdGUnKT8uZXJyb3JzPy5wYXN0RGF0ZSB8fCBzY2hlZHVsZUZvcm0/LmdldCgnc3RhcnREYXRlJyk/LmVycm9ycz8uZGF0ZUxlc3NUaGFuTWluRGF0ZVxuICAgICAgXCJcbiAgICAgIGkxOG49XCJAQGJpbGxwYXkuYmlsbHBheS1wYXltZW50LXN0YXJ0LWRhdGUuZXJyb3IucGFzdERhdGUuc3RhcnREYXRlXCJcbiAgICAgIGRhdGEtcm9sZT1cInBhc3QtZGF0ZS1zY2hlZHVsZS1leGVjdXRpb24tZGF0ZVwiXG4gICAgPlxuICAgICAgRXhlY3V0aW9uIGRhdGUgY291bGQgbm90IGJlIGluIGEgcGFzdC5cbiAgICA8L3NwYW4+XG4gICAgPHNwYW5cbiAgICAgICpuZ0lmPVwic2NoZWR1bGVGb3JtPy5nZXQoJ3N0YXJ0RGF0ZScpPy5lcnJvcnM/LmludmFsaWREYXRlRm9ybWF0XCJcbiAgICAgIGkxOG49XCJAQGJpbGxwYXkuYmlsbHBheS1wYXltZW50LXN0YXJ0LWRhdGUuZXJyb3IuaW52YWxpZERhdGVGb3JtYXRcIlxuICAgICAgZGF0YS1yb2xlPVwiaW52YWxpZC1kYXRlLXNjaGVkdWxlLWV4ZWN1dGlvbi1kYXRlXCJcbiAgICA+XG4gICAgICBJbnZhbGlkIGRhdGUgZm9ybWF0LlxuICAgIDwvc3Bhbj5cbiAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG48L2Rpdj5cbiJdfQ==