import { Component, ChangeDetectionStrategy, ViewChild, HostListener, } from '@angular/core';
import { BillpayUtilityService as Utility, EndTypes, LoadingState, PaymentServicesTypes, } from '@backbase/billpay-journeys-common';
import { map, shareReplay, skip, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { FrequencyKeys } from '@backbase/billpay-journeys-common';
import { of, Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/billpay-journeys-common";
import * as i2 from "@angular/forms";
import * as i3 from "../../services/pay-bills-state.service";
import * as i4 from "../../services/pay-bills-navigation.service";
import * as i5 from "@angular/router";
import * as i6 from "../../services/pay-bills-journey-config.service";
import * as i7 from "@backbase/ui-ang/notification";
import * as i8 from "@backbase/ui-ang/header";
import * as i9 from "./billpay-payment-multiple-bills-list/billpay-payment-multiple-bills-list.component";
import * as i10 from "./billpay-payment-multiple-bills-sum-board/billpay-payment-multiple-bills-sum-board.component";
import * as i11 from "@backbase/ui-ang/loading-indicator";
import * as i12 from "@backbase/ui-ang/empty-state";
import * as i13 from "../billpay-payment-single-bill/billpay-payment-discard-changes-modal/billpay-payment-discard-changes-modal.component";
import * as i14 from "@angular/common";
import * as i15 from "@backbase/ui-ang/button";
export class BillpayPaymentMultipleBillsComponent {
    constructor(payeeDataService, fb, scheduleService, paymentStateService, navigationService, route, paymentDataService, configService, notificationService, discardModalService, cdRef) {
        this.payeeDataService = payeeDataService;
        this.fb = fb;
        this.scheduleService = scheduleService;
        this.paymentStateService = paymentStateService;
        this.navigationService = navigationService;
        this.route = route;
        this.paymentDataService = paymentDataService;
        this.configService = configService;
        this.notificationService = notificationService;
        this.discardModalService = discardModalService;
        this.cdRef = cdRef;
        this.paymentsFormGroup = this.fb.group({});
        this.totalAmount$ = this.paymentsFormGroup.valueChanges.pipe(map((forms) => Object.values(forms).reduce((acc, form) => acc + +form.amount.amount, 0)));
        this.selectedDeleteEbills$ = this.payeeDataService.selectedDeleteEbills;
        this.selectedDeletePayee$ = this.payeeDataService.selectedDeletePayee;
        this.destroy$ = new Subject();
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
        this.isDeleteModalOpened = false;
        this.isDeleteEbillsModalOpen = false;
        this.isNavigateModalOpened = false;
        this.notificationType = '';
        this.id = Utility.generateId();
        this.hasOvernightCheck = (services) => {
            return !!(services === null || services === void 0 ? void 0 : services.find(item => item.paymentServiceType === PaymentServicesTypes.Overnight));
        };
    }
    get isErrorState() {
        const payeeState = this.payeeDataService.payeesLoadingState;
        const accountState = this.paymentDataService.accountsLoadingState;
        return payeeState === 'error' || accountState === LoadingState.Error;
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    onWindowUnload($event) {
        if ((this.paymentsFormGroup.touched || this.paymentStateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    ngOnInit() {
        this.payeeSummariesByEbillObservable$ = this.payeeDataService.getPayees().pipe(tap(payeeSummariesByEbill => {
            const { ebillsEnabled = [], ebillsNotEnabled = [] } = payeeSummariesByEbill || {};
            this.payeeSummaries = [...ebillsEnabled, ...ebillsNotEnabled];
            this.createForm(this.payeeSummaries);
            if (this.paymentStateService.isFormProcessing) {
                this.patchPaymentDataToForm();
            }
        }), shareReplay());
        this.accounts$ = this.paymentDataService.getPayeesAndAccounts().pipe(map(data => {
            var _a;
            this.accounts = data.accounts;
            this.patchFormValue({ accountFrom: (_a = data.accounts) === null || _a === void 0 ? void 0 : _a[0] });
            return data.accounts;
        }), shareReplay());
        this.payeeDataService.selectedDeletePayee
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe(payee => (payee ? (this.isDeleteModalOpened = true) : this.openNavigateModal()));
        this.payeeDataService.selectedDeleteEbills
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe(payee => (payee ? (this.isDeleteEbillsModalOpen = true) : this.openNavigateModal()));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    handleClearForm() {
        this.patchFormValue();
        this.paymentsFormGroup.markAsUntouched();
        this.paymentStateService.isFormProcessing = false;
    }
    defaultFormState(payeeSummary) {
        var _a;
        const address = this.hasOvernightCheck(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices)
            ? payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.overnightDeliveryAddress
            : {};
        const paymentServiceDate = this.scheduleService.estimatedPaymentServiceDate(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices, PaymentServicesTypes.Regular);
        const minDate = this.scheduleService.estimatedPaymentServiceDate(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices, PaymentServicesTypes.Regular);
        return {
            accountFrom: (_a = this.accounts) === null || _a === void 0 ? void 0 : _a[0],
            payeeTo: payeeSummary,
            amount: {
                amount: ' ',
                currency: this.configService.paymentDefaultCurrency,
            },
            memo: '',
            overnightDeliveryAddress: {
                address1: address === null || address === void 0 ? void 0 : address.address1,
                address2: address === null || address === void 0 ? void 0 : address.address2,
                city: address === null || address === void 0 ? void 0 : address.city,
                state: address === null || address === void 0 ? void 0 : address.state,
                postalCode: address === null || address === void 0 ? void 0 : address.postalCode,
            },
            schedule: {
                frequency: FrequencyKeys.Once,
                startDate: minDate,
                sendDate: minDate,
                repeat: 1,
                endDate: minDate,
                endType: EndTypes.Never,
                paymentService: this.defaultPaymentService,
                paymentServiceDate,
                alertPendingCheckbox: false,
                alertSentCheckbox: false,
                alertLastPendingCheckbox: false,
            },
        };
    }
    areBothListsPresent({ ebillsEnabled, ebillsNotEnabled }) {
        return Boolean((ebillsEnabled === null || ebillsEnabled === void 0 ? void 0 : ebillsEnabled.length) && (ebillsNotEnabled === null || ebillsNotEnabled === void 0 ? void 0 : ebillsNotEnabled.length));
    }
    createForm(payeeSummaries) {
        payeeSummaries.forEach(payee => {
            var _a;
            const defaults = this.defaultFormState(payee);
            (_a = this.paymentsFormGroup) === null || _a === void 0 ? void 0 : _a.registerControl(payee.id, this.fb.group({
                accountFrom: [defaults.accountFrom],
                payeeTo: [defaults.payeeTo],
                amount: this.fb.group({
                    amount: [defaults.amount.amount],
                    currency: [defaults.amount.currency],
                }),
                memo: [defaults.memo],
                overnightDeliveryAddress: this.createOvernightAddressFormGroup(payee),
                schedule: this.fb.group({
                    frequency: defaults.schedule.frequency,
                    startDate: [defaults.schedule.startDate],
                    sendDate: [defaults.schedule.sendDate],
                    repeat: [defaults.schedule.repeat],
                    endDate: [defaults.schedule.endDate],
                    endType: [defaults.schedule.endType],
                    paymentService: [defaults.schedule.paymentService],
                    paymentServiceDate: [defaults.schedule.paymentServiceDate],
                    alertPendingCheckbox: [defaults.schedule.alertPendingCheckbox],
                    alertSentCheckbox: [defaults.schedule.alertSentCheckbox],
                    alertLastPendingCheckbox: [defaults.schedule.alertLastPendingCheckbox],
                }),
            }));
        });
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
    }
    createOvernightAddressFormGroup(payeeSummary) {
        const address = this.hasOvernightCheck(payeeSummary.paymentServices)
            ? payeeSummary.overnightDeliveryAddress
            : {};
        const paymentService = this.defaultPaymentService(payeeSummary);
        const isOvernightAddressDisabled = !(paymentService === null || paymentService === void 0 ? void 0 : paymentService.paymentServiceType) || paymentService.paymentServiceType !== PaymentServicesTypes.Overnight;
        return this.fb.group({
            address1: [
                {
                    value: address === null || address === void 0 ? void 0 : address.address1,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            address2: [
                {
                    value: address === null || address === void 0 ? void 0 : address.address2,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            city: [
                {
                    value: address === null || address === void 0 ? void 0 : address.city,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            state: [
                {
                    value: address === null || address === void 0 ? void 0 : address.state,
                    disabled: isOvernightAddressDisabled,
                },
            ],
            postalCode: [
                {
                    value: address === null || address === void 0 ? void 0 : address.postalCode,
                    disabled: isOvernightAddressDisabled,
                },
            ],
        });
    }
    defaultPaymentService(payee) {
        var _a;
        return (_a = payee === null || payee === void 0 ? void 0 : payee.paymentServices) === null || _a === void 0 ? void 0 : _a.find((item) => item.paymentServiceType === PaymentServicesTypes.Regular);
    }
    handleSubmit() {
        const paymentForms = Object.entries(this.paymentsFormGroup.value)
            .filter(([_id, form]) => !!+form.amount.amount)
            .map(([_id, form]) => this.processFormData(form));
        this.paymentStateService.isFormProcessing = true;
        this.paymentStateService.updatePaymentState(paymentForms);
        this.navigationService.navigateToReview({ relativeTo: this.route.parent });
    }
    processFormData(data) {
        const startDate = data.schedule.frequency === FrequencyKeys.Once ? data.schedule.sendDate : data.schedule.startDate;
        switch (data.schedule.endType) {
            case EndTypes.After:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '', endDate: new Date(this.scheduleService.estimatedEndDate(data.schedule.startDate, data.schedule.frequency, data.schedule.repeat)).toISOString() }) });
            case EndTypes.On:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '', repeat: this.scheduleService.estimatedOccurences(data.schedule.startDate, data.schedule.endDate || data.schedule.startDate, data.schedule.frequency) }) });
            default:
                return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '' }) });
        }
    }
    patchFormValue(value) {
        var _a;
        (_a = this.payeeSummaries) === null || _a === void 0 ? void 0 : _a.forEach(payee => {
            const formValue = value || this.defaultFormState(payee);
            this.paymentsFormGroup.controls[payee.id].patchValue(formValue);
        });
    }
    onDeleteEbills(resolve) {
        this.isDeleteEbillsModalOpen = false;
        if (resolve) {
            this.deleteEbills()
                .pipe(take(1))
                .subscribe(() => {
                this.deletionNotify('ebills');
            });
        }
    }
    onDeletePayee(resolve) {
        this.isDeleteModalOpened = false;
        if (resolve) {
            this.deletePayee()
                .pipe(take(1))
                .subscribe(() => {
                this.deletionNotify('delete');
            });
        }
    }
    onNavigateToPayments(hasNavigated) {
        if (hasNavigated) {
            this.navigationService.navigateToPayments();
        }
        this.isNavigateModalOpened = false;
    }
    deletionNotify(type) {
        this.payeeDataService.reloadPayees();
        this.notificationType = type;
        this.notificationService.showNotification({
            header: this.notificationHeaderTemplate,
            message: this.notificationMessageTemplate,
            modifier: 'success',
            ttl: this.configService.notificationDismissTime,
        });
    }
    openNavigateModal() {
        this.isNavigateModalOpened = true;
    }
    openModal() {
        this.cdRef.markForCheck();
        return this.paymentsFormGroup.touched || this.paymentStateService.isFormProcessing
            ? this.discardModalService.openModal()
            : of(true);
    }
    patchPaymentDataToForm() {
        this.paymentStateService.paymentState.pipe(take(1)).subscribe(paymentsState => {
            if (paymentsState) {
                paymentsState.forEach(payment => {
                    var _a;
                    (_a = this.paymentsFormGroup.get(payment.payeeTo.id)) === null || _a === void 0 ? void 0 : _a.patchValue(payment);
                });
            }
        });
    }
    deletePayee() {
        return this.payeeDataService.selectedDeletePayee.pipe(switchMap((payee) => payee ? this.payeeDataService.deletePayee(payee.id, payee.electronic) : of()));
    }
    deleteEbills() {
        return this.payeeDataService.selectedDeleteEbills.pipe(switchMap((payee) => (payee ? this.payeeDataService.deleteEbills(payee.id) : of())));
    }
}
BillpayPaymentMultipleBillsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsComponent, deps: [{ token: i1.BillpayPayeeDataService }, { token: i2.FormBuilder }, { token: i1.BillpayPaymentScheduleService }, { token: i3.PayBillsStateService }, { token: i4.PayBillsNavigationService }, { token: i5.ActivatedRoute }, { token: i1.BillpayPaymentDataService }, { token: i6.PayBillsJourneyConfigService }, { token: i7.NotificationService }, { token: i1.BillpayDiscardChangesModalService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsComponent, selector: "bb-billpay-payment-multiple-bills", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"!isErrorState; else errorState\">\n  <ng-container\n    *ngIf=\"(accounts$ | async) && payeeSummariesByEbillObservable$ | async as ebillGroupedData; else loadingState\"\n  >\n    <ng-container\n      *ngIf=\"\n        (ebillGroupedData.ebillsEnabled.length || ebillGroupedData.ebillsNotEnabled.length) &&\n          (accounts$ | async)?.length;\n        else emptyState\n      \"\n    >\n      <div class=\"bb-billpay-multiple-bills\">\n        <div\n          class=\"bb-block bb-block--lg\"\n          *ngIf=\"ebillGroupedData.ebillsEnabled.length\"\n          data-role=\"payees-with-active-e-bills-list\"\n        >\n          <div class=\"card card-lg\">\n            <div class=\"card-body\">\n              <div class=\"bb-block bb-block--lg\">\n                <bb-header-ui\n                  headingType=\"h2\"\n                  *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                  data-role=\"sub-header\"\n                  heading=\"Payees with Active eBills\"\n                  i18n-heading=\"\n                    Payees with eBills title|Title for the list of payees with eBills\n                    enabled@@billpay-payments-journey.multiple-bills.title.payees-with-ebills\"\n                >\n                </bb-header-ui>\n              </div>\n              <bb-billpay-payment-multiple-bills-list\n                [paymentsFormGroup]=\"paymentsFormGroup\"\n                [payeeSummaries]=\"ebillGroupedData.ebillsEnabled\"\n                [accounts]=\"accounts$ | async\"\n                [isForEbills]=\"true\"\n              ></bb-billpay-payment-multiple-bills-list>\n            </div>\n          </div>\n        </div>\n\n        <div\n          class=\"bb-billpay-multiple-bills-other-payees-card card card-lg\"\n          data-role=\"all-other-payees-list\"\n          *ngIf=\"ebillGroupedData.ebillsNotEnabled.length\"\n        >\n          <div class=\"card-body\">\n            <div class=\"bb-block bb-block--lg\">\n              <bb-header-ui\n                headingType=\"h2\"\n                *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                data-role=\"sub-header\"\n                heading=\"All Other Payees\"\n                i18n-heading=\"\n                  Payees without eBills title|Title for the list of payees that do not have eBills\n                  enabled@@billpay-payments-journey.multiple-bills.title.other-payees\"\n              >\n              </bb-header-ui>\n            </div>\n            <bb-billpay-payment-multiple-bills-list\n              [paymentsFormGroup]=\"paymentsFormGroup\"\n              [payeeSummaries]=\"ebillGroupedData.ebillsNotEnabled\"\n              [accounts]=\"accounts$ | async\"\n            ></bb-billpay-payment-multiple-bills-list>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payment-multiple-bills-sum-board\n  [totalAmount]=\"totalAmount$ | async\"\n  [actionButtons]=\"actionButtons\"\n  [inheritedId]=\"id\"\n></bb-billpay-payment-multiple-bills-sum-board>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"assignment-ind\"\n        subtitle=\"Add a payee to make a bill payment\"\n        i18n-subtitle=\"\n          Add a payee to make a bill payment|Payee List no payees\n          subtitle@@bb-billpay-manage-widget-ang.bb-empty-state-ui.subtitle\"\n        title=\"No Payees\"\n        i18n-title=\"\n          No payees state text|Payee List no payees\n          title@@billpay-payments-journey.multiple-bills.bb-empty-state-ui.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error-outline\"\n        subtitle=\"Try to reload the page or contact support\"\n        i18n-subtitle=\"\n          Try to reload the page or contact the support.|Payee List loading\n          subtitle@@bb-billpay-payee-list-widget-ang.loading.subtitle\"\n        title=\"Payee list is not loading\"\n        i18n-title=\"Payee list is not loading|Payee List loading title@@bb-billpay-payee-list-widget-ang.loading.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #actionButtons>\n  <div>\n    <div class=\"bb-stack\">\n      <button\n        bbButton\n        color=\"link\"\n        class=\"bb-stack__item bb-stack__item--spacing-md\"\n        (click)=\"handleClearForm()\"\n        data-role=\"multiple-bills-clear-button\"\n        i18n=\"@@billpay-payments-journey.multiple-bills.board.clear-button\"\n      >\n        Clear All\n      </button>\n      <button\n        bbButton\n        color=\"primary\"\n        class=\"bb-button-bar__button bb-stack__item bb-stack__item--spacing-none\"\n        data-role=\"multiple-bills-confirm-button\"\n        i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button\"\n        attr.aria-describedby=\"total-amount-label-{{ id }}  total-amount-{{ id }}\"\n        (click)=\"handleSubmit()\"\n      >\n        Confirm Payment\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<bb-billpay-payee-delete-modal\n  *ngIf=\"isDeleteModalOpened\"\n  (resolve)=\"onDeletePayee($event)\"\n></bb-billpay-payee-delete-modal>\n\n<bb-billpay-ebills-delete-modal\n  *ngIf=\"isDeleteEbillsModalOpen\"\n  (resolve)=\"onDeleteEbills($event)\"\n></bb-billpay-ebills-delete-modal>\n\n<bb-billpay-payee-navigate-modal\n  *ngIf=\"isNavigateModalOpened\"\n  (resolve)=\"onNavigateToPayments($event)\"\n></bb-billpay-payee-navigate-modal>\n\n<ng-template #notificationMessage>\n  <div [ngSwitch]=\"notificationType\">\n    <div *ngSwitchCase=\"'ebills'\">\n      <span\n        *ngIf=\"selectedDeleteEbills$ | async as payee\"\n        i18n=\"\n          stop ebill notification message|Payee stop ebill confirmation success notification\n          message@@billpay-payee-list.stop-ebill-confirm.notification.message\"\n        >eBills for {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been stopped\n        successfully</span\n      >\n    </div>\n    <div *ngSwitchCase=\"'delete'\">\n      <span\n        *ngIf=\"selectedDeletePayee$ | async as payee\"\n        i18n=\"\n          delete payee notification message|Payee delete confirmation success notification\n          message@@billpay-payee-list.delete-payee-confirm.notification.message\"\n        >The payee {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been deleted\n        successfully</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <div [ngSwitch]=\"notificationType\">\n    <span\n      *ngSwitchCase=\"'ebills'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        eBills stopped notification header|eBills stopped confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >eBills stopped</span\n    >\n    <span\n      *ngSwitchCase=\"'delete'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        delete payee notification header|Payee delete confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >Payee deleted</span\n    >\n  </div>\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel Bill Payments?\"\n  i18n-title=\"Discard changes modal header@@billpay.multiple-bills.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel bill payments? Entered data will be lost.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.multiple-bills.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.multiple-bills.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.multiple-bills.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i8.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i9.BillpayPaymentMultipleBillsListComponent, selector: "bb-billpay-payment-multiple-bills-list", inputs: ["payeeSummaries", "paymentsFormGroup", "accounts", "isForEbills"] }, { type: i10.BillpayPaymentMultipleBillsSumBoardComponent, selector: "bb-billpay-payment-multiple-bills-sum-board", inputs: ["totalAmount", "actionButtons", "inheritedId"] }, { type: i11.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i12.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i1.ӨBillpayPayeeDeleteModalComponent, selector: "bb-billpay-payee-delete-modal", outputs: ["resolve"] }, { type: i1.ӨBillpayEbillsDeleteModalComponent, selector: "bb-billpay-ebills-delete-modal", outputs: ["resolve"] }, { type: i1.ӨBillpayPayeeNavigateModalComponent, selector: "bb-billpay-payee-navigate-modal", outputs: ["resolve"] }, { type: i13.BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i15.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i14.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i14.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills',
                    templateUrl: './billpay-payment-multiple-bills.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.BillpayPayeeDataService }, { type: i2.FormBuilder }, { type: i1.BillpayPaymentScheduleService }, { type: i3.PayBillsStateService }, { type: i4.PayBillsNavigationService }, { type: i5.ActivatedRoute }, { type: i1.BillpayPaymentDataService }, { type: i6.PayBillsJourneyConfigService }, { type: i7.NotificationService }, { type: i1.BillpayDiscardChangesModalService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,