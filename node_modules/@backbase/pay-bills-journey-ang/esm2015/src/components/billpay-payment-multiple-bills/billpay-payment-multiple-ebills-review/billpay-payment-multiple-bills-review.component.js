import { __awaiter } from "tslib";
import { Component, ChangeDetectionStrategy, ViewChild, HostListener, } from '@angular/core';
import { BillpayDiscardChangesModalService, BillpayUtilityService as Utility, } from '@backbase/billpay-journeys-common';
import { forkJoin, of, Subject } from 'rxjs';
import { catchError, map, mapTo, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/pay-bills-state.service";
import * as i2 from "@backbase/billpay-journeys-common";
import * as i3 from "../../../services/pay-bills-navigation.service";
import * as i4 from "@angular/router";
import * as i5 from "@backbase/ui-ang/alert";
import * as i6 from "../billpay-payment-multiple-ebills-review-table/billpay-payment-multiple-bills-review-table.component";
import * as i7 from "../billpay-payment-multiple-bills-sum-board/billpay-payment-multiple-bills-sum-board.component";
import * as i8 from "@backbase/ui-ang/icon";
import * as i9 from "@backbase/ui-ang/load-button";
import * as i10 from "../billpay-payment-multiple-ebills-success/billpay-payment-multiple-bills-success.component";
import * as i11 from "../../billpay-payment-single-bill/billpay-payment-discard-changes-modal/billpay-payment-discard-changes-modal.component";
import * as i12 from "@angular/common";
import * as i13 from "@backbase/ui-ang/button";
export class BillpayPaymentMultipleBillsReviewComponent {
    constructor(paymentStateService, dataService, navigationService, route, discardModalService, cdRef) {
        this.paymentStateService = paymentStateService;
        this.dataService = dataService;
        this.navigationService = navigationService;
        this.route = route;
        this.discardModalService = discardModalService;
        this.cdRef = cdRef;
        this.destroy$ = new Subject();
        this.editMode = false;
        /**
         * Flag for payment error
         */
        this.paymentError = false;
        /**
         * Flag for submitting payment
         */
        this.submittingPayment = false;
        this.id = Utility.generateId();
        /**
         * List of payments
         */
        this.payments$ = this.paymentStateService.paymentState.pipe(tap(paymentForms => {
            if (!(paymentForms === null || paymentForms === void 0 ? void 0 : paymentForms.length)) {
                this.navigationService.navigateToForm({ relativeTo: this.route.parent });
            }
        }));
        /**
         * Carry the amount for total amount to be paid
         */
        this.totalAmount$ = this.payments$.pipe(map(payments => payments === null || payments === void 0 ? void 0 : payments.reduce((acc, payment) => acc + +payment.amount.amount, 0)));
        /**
         * List of responses results
         */
        this.results = [];
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    /**
     * Methos to send payment to server
     */
    onPaymentConfirm(payments) {
        this.paymentError = false;
        this.results = [];
        this.submittingPayment = true;
        forkJoin(payments.map(payment => this.dataService.createPayment(payment).pipe(mapTo(Object.assign(Object.assign({}, payment), { succeeded: true })), catchError(() => of(Object.assign({ succeeded: false }, payment))))))
            .pipe(takeUntil(this.destroy$))
            .subscribe((responseList) => __awaiter(this, void 0, void 0, function* () {
            this.submittingPayment = false;
            this.paymentStateService.isFormProcessing = false;
            const errors = responseList.filter(response => !(response === null || response === void 0 ? void 0 : response.succeeded));
            errors.length === payments.length ? this.allFailed() : (this.results = responseList);
            this.cdRef.markForCheck();
        }));
    }
    navigateToForm(resetFormValue = false) {
        if (resetFormValue) {
            this.paymentStateService.reset();
        }
        this.navigationService.navigateToForm({ relativeTo: this.route.parent });
    }
    allFailed() {
        var _a;
        this.paymentStateService.isFormProcessing = true;
        this.submittingPayment = false;
        this.paymentError = true;
        this.cdRef.markForCheck();
        (_a = this.failAlert) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollIntoView(false);
    }
    openModal() {
        if (this.paymentStateService.isFormProcessing && !this.editMode && !this.paymentError) {
            return this.discardModalService.openModal();
        }
        return of(true);
    }
    onCancel() {
        this.navigateToForm(!!this.paymentError);
    }
    onModalResolve(isConfirmed) {
        this.discardModalService.onModalResolve(isConfirmed);
        if (isConfirmed) {
            this.paymentStateService.reset();
        }
    }
    onEdit() {
        this.editMode = true;
        this.navigateToForm();
    }
}
BillpayPaymentMultipleBillsReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewComponent, deps: [{ token: i1.PayBillsStateService }, { token: i2.BillpayPaymentDataService }, { token: i3.PayBillsNavigationService }, { token: i4.ActivatedRoute }, { token: i2.BillpayDiscardChangesModalService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewComponent, selector: "bb-billpay-payment-multiple-bills-review", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"payments$ | async as payments\">\n  <ng-container *ngTemplateOutlet=\"results?.length ? successScreen : reviewTemplate\"> </ng-container>\n  <ng-template #reviewTemplate>\n    <div class=\"card card-lg bb-billpay-multiple-bills-other-payees-card\">\n      <div class=\"card-body\">\n        <div #failAlert>\n          <bb-alert-ui\n            title=\"Something went wrong. Please try again\"\n            i18n-title=\"@@billpay-payments-journey.multiple-bills.fail-message\"\n            (close)=\"(false)\"\n            modifier=\"error\"\n            data-role=\"failure-message\"\n            *ngIf=\"paymentError\"\n          >\n          </bb-alert-ui>\n        </div>\n        <bb-billpay-payment-multiple-bills-review-table\n          [payments]=\"payments\"\n        ></bb-billpay-payment-multiple-bills-review-table>\n      </div>\n    </div>\n\n    <bb-billpay-payment-multiple-bills-sum-board\n      [totalAmount]=\"totalAmount$ | async\"\n      [actionButtons]=\"actionButtons\"\n      [inheritedId]=\"id\"\n    ></bb-billpay-payment-multiple-bills-sum-board>\n  </ng-template>\n  <ng-template #actionButtons>\n    <div>\n      <div class=\"bb-stack\">\n        <button\n          bbButton\n          color=\"link\"\n          class=\"btn-link bb-stack__item bb-stack__item--spacing-md bb-d-none bb-d-md-block\"\n          data-role=\"multiple-bills-cancel-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.cancel-button\"\n          (click)=\"onCancel()\"\n        >\n          Cancel\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-d-none bb-d-md-block bb-stack__item bb-stack__item--spacing-md\"\n          data-role=\"multiple-bills-edit-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.edit-button\"\n          (click)=\"onEdit()\"\n        >\n          Edit Payment\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          [circle]=\"true\"\n          class=\"bb-d-md-none bb-stack__item bb-stack__item--spacing-md\"\n          data-role=\"multiple-bills-edit-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.edit-button\"\n          (click)=\"onEdit()\"\n        >\n          <bb-icon-ui name=\"edit\"></bb-icon-ui>\n        </button>\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-stack__item bb-stack__item--spacing-none\"\n          data-role=\"multiple-bills-confirm-button\"\n          [isLoading]=\"submittingPayment\"\n          (click)=\"onPaymentConfirm(payments)\"\n          attr.aria-describedby=\"total-amount-label-{{ id }}  total-amount-{{ id }}\"\n        >\n          <span i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button\" class=\"bb-d-none bb-d-md-block\"\n            >Confirm Payment</span\n          >\n          <span i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button.mobile\" class=\"bb-d-md-none\"\n            >Pay</span\n          >\n        </bb-load-button-ui>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template #successScreen>\n    <bb-billpay-payment-multiple-bills-success [results]=\"results\"></bb-billpay-payment-multiple-bills-success>\n  </ng-template>\n</ng-container>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel Bill Payments?\"\n  i18n-title=\"Discard changes modal header@@billpay.multiple-bills.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel bill payments? Entered data will be lost.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.multiple-bills.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel Payments\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.multiple-bills.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Not Now\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.multiple-bills.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i5.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i6.BillpayPaymentMultipleBillsReviewTableComponent, selector: "bb-billpay-payment-multiple-bills-review-table", inputs: ["payments"] }, { type: i7.BillpayPaymentMultipleBillsSumBoardComponent, selector: "bb-billpay-payment-multiple-bills-sum-board", inputs: ["totalAmount", "actionButtons", "inheritedId"] }, { type: i8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i9.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i10.BillpayPaymentMultipleBillsSuccessComponent, selector: "bb-billpay-payment-multiple-bills-success", inputs: ["results"] }, { type: i11.BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i13.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i12.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills-review',
                    templateUrl: 'billpay-payment-multiple-bills-review.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1.PayBillsStateService }, { type: i2.BillpayPaymentDataService }, { type: i3.PayBillsNavigationService }, { type: i4.ActivatedRoute }, { type: i2.BillpayDiscardChangesModalService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { failAlert: [{
                type: ViewChild,
                args: ['failAlert']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,