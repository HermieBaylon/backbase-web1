import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { BillpayUtilityService as Utility } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "../../../services/pay-bills-navigation.service";
import * as i3 from "@angular/router";
import * as i4 from "@backbase/ui-ang/header";
import * as i5 from "../billpay-payment-multiple-ebills-review-table/billpay-payment-multiple-bills-review-table.component";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
export class BillpayPaymentMultipleBillsSuccessComponent {
    constructor(assetsService, navigationService, route) {
        this.assetsService = assetsService;
        this.navigationService = navigationService;
        this.route = route;
        this.id = Utility.generateId();
        this.allSucceeded = true;
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-pay-bills-journey',
            getURIFromAssetID: (assetId) => `${assetId}`,
        });
        this.successImg = this.resolveAsset('succeed.svg');
        this.successImgNoMotion = this.resolveAsset('no-motion.svg');
    }
    set results(value) {
        const succeded = value.filter(payment => payment.succeeded);
        this.allSucceeded = succeded.length === value.length;
        if (this.allSucceeded) {
            const getPayee = (payment) => payment.payeeTo.nickName || payment.payeeTo.name;
            const payees = value
                .map((payment, i) => {
                if (i === 0)
                    return getPayee(payment);
                return i === value.length - 1 ? ' and ' + getPayee(payment) : ', ' + getPayee(payment);
            })
                .join('');
            this.successMsg = $localize `You’ve just scheduled ${value.length} payment${value.length > 1 ? 's' : ''} to ${payees}.`;
        }
        else {
            this.payments = value;
            this.mixedMsg = $localize `You scheduled sucessfully ${succeded.length} out of ${value.length} bills.`;
        }
    }
    payMore() {
        this.navigationService.navigateToForm({ relativeTo: this.route.parent });
    }
    goToMyAccounts() {
        var _a;
        (_a = this.navigationService) === null || _a === void 0 ? void 0 : _a.navigateToMainAppPage();
    }
}
BillpayPaymentMultipleBillsSuccessComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsSuccessComponent, deps: [{ token: i1.AssetsService }, { token: i2.PayBillsNavigationService }, { token: i3.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
BillpayPaymentMultipleBillsSuccessComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsSuccessComponent, selector: "bb-billpay-payment-multiple-bills-success", inputs: { results: "results" }, ngImport: i0, template: "<div class=\"card card-lg bb-billpay-multiple-bills-other-payees-card\">\n  <div class=\"card-body\">\n    <ng-container *ngIf=\"allSucceeded; else mixedStatus\">\n      <div class=\"bb-text-align-center bb-block--xl\" role=\"alert\">\n        <picture>\n          <source srcset=\"{{ successImgNoMotion | async }}\" media=\"(prefers-reduced-motion: reduce)\" />\n          <img\n            srcset=\"{{ (successImg | async) + '?' + id }}\"\n            alt=\"Success!\"\n            i18n-alt=\"Success!|Text for transfer succeeded@@bb-billpay-multiple-bills-review.transfer-succeeded\"\n            data-role=\"transfer-success-anim\"\n            class=\"img-fluid\"\n          />\n        </picture>\n        <bb-header-ui\n          headingClasses=\"bb-text-semi-bold\"\n          headingType=\"h2\"\n          data-role=\"success-title\"\n          heading=\"Your Bills Were Successfully Scheduled!\"\n          i18n-heading=\"@@billpay-payments-journey.multiple-bills.success.title\"\n        ></bb-header-ui>\n        <span class=\"bb-text-support\">{{ successMsg }}</span>\n      </div>\n    </ng-container>\n    <div class=\"bb-stack bb-stack--center\">\n      <button\n        bbButton\n        color=\"primary\"\n        class=\"bb-stack__item\"\n        data-role=\"multiple-bills-success-pay-more\"\n        i18n=\"@@bb-billpay-multiple-bills-review.transfer-done\"\n        (click)=\"payMore()\"\n      >\n        Pay Another Bill\n      </button>\n      <button bbButton color=\"secondary\" class=\"bb-stack__item\" i18n=\"@@bb-billpay-multiple-bills-review.my-accounts\" (click)=\"goToMyAccounts()\">\n        Go to My Accounts\n      </button>\n    </div>\n  </div>\n</div>\n\n<ng-template #mixedStatus>\n  <div class=\"bb-text-align-center bb-block--xl\">\n    <bb-header-ui\n      headingClasses=\"bb-text-semi-bold\"\n      headingType=\"h2\"\n      data-role=\"success-title\"\n      [heading]=\"mixedMsg\"\n    ></bb-header-ui>\n    <span class=\"bb-text-support\" i18n=\"@@billpay-payments-journey.multiple-bills.mixed-status.message\"\n      >Review the payments that have been processed and the other that failed below</span\n    >\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <bb-billpay-payment-multiple-bills-review-table\n      [payments]=\"payments\"\n    ></bb-billpay-payment-multiple-bills-review-table>\n  </div>\n</ng-template>\n", components: [{ type: i4.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i5.BillpayPaymentMultipleBillsReviewTableComponent, selector: "bb-billpay-payment-multiple-bills-review-table", inputs: ["payments"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPaymentMultipleBillsSuccessComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-multiple-bills-success',
                    templateUrl: 'billpay-payment-multiple-bills-success.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.AssetsService }, { type: i2.PayBillsNavigationService }, { type: i3.ActivatedRoute }]; }, propDecorators: { results: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,