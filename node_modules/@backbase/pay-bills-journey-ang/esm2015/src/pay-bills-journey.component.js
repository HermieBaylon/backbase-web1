import { Component } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { PayBillsNavigationService } from './services/pay-bills-navigation.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/pay-bills-navigation.service";
import * as i2 from "@angular/router";
import * as i3 from "@backbase/billpay-journeys-common";
export class PayBillsJourneyComponent {
    constructor(navigationService, route, billpayNotificationRoutingService) {
        this.navigationService = navigationService;
        this.route = route;
        this.billpayNotificationRoutingService = billpayNotificationRoutingService;
        this.destroy$ = new Subject();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnInit() {
        this.setupNavigationSubscriptions();
    }
    setupNavigationSubscriptions() {
        this.billpayNotificationRoutingService.upcommingPaymentsSubject$
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.navigationService.navigateToPayments());
        this.route.paramMap.pipe(takeUntil(this.destroy$)).subscribe((param) => {
            if (param.has('editRecurringPayment')) {
                this.navigationService.navigateToEditRecurringForm(param.get('editRecurringPayment'));
            }
            else if (param.has('editOneOffPayment')) {
                this.navigationService.navigateToEditOneOffForm(param.get('editOneOffPayment'));
            }
        });
        this.billpayNotificationRoutingService.managePayeesSubject$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.navigationService.navigateToAddPayee();
        });
    }
}
PayBillsJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyComponent, deps: [{ token: i1.PayBillsNavigationService }, { token: i2.ActivatedRoute }, { token: i3.BillpayNotificationRoutingService }], target: i0.ɵɵFactoryTarget.Component });
PayBillsJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PayBillsJourneyComponent, selector: "bb-pay-bills-journey", providers: [PayBillsNavigationService], ngImport: i0, template: "<router-outlet></router-outlet>\n", directives: [{ type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pay-bills-journey',
                    templateUrl: './pay-bills-journey.component.html',
                    providers: [PayBillsNavigationService],
                }]
        }], ctorParameters: function () { return [{ type: i1.PayBillsNavigationService }, { type: i2.ActivatedRoute }, { type: i3.BillpayNotificationRoutingService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5LWJpbGxzLWpvdXJuZXkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9wYXktYmlsbHMtam91cm5leS9zcmMvcGF5LWJpbGxzLWpvdXJuZXkuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy9wYXktYmlsbHMtam91cm5leS9zcmMvcGF5LWJpbGxzLWpvdXJuZXkuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFJN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0seUNBQXlDLENBQUM7Ozs7O0FBT3BGLE1BQU0sT0FBTyx3QkFBd0I7SUFHbkMsWUFDbUIsaUJBQTRDLEVBQzVDLEtBQXFCLEVBQ3JCLGlDQUFvRTtRQUZwRSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQTJCO1FBQzVDLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLHNDQUFpQyxHQUFqQyxpQ0FBaUMsQ0FBbUM7UUFMdEUsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFNN0MsQ0FBQztJQUVKLFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRU8sNEJBQTRCO1FBQ2xDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyx5QkFBeUI7YUFDN0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDOUIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFlLEVBQUUsRUFBRTtZQUMvRSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsRUFBRTtnQkFDckMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQVcsQ0FBQyxDQUFDO2FBQ2pHO2lCQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO2dCQUN6QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBVyxDQUFDLENBQUM7YUFDM0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDeEcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztzSEFsQ1Usd0JBQXdCOzBHQUF4Qix3QkFBd0IsK0NBRnhCLENBQUMseUJBQXlCLENBQUMsMEJDWHhDLG1DQUNBOzRGRFlhLHdCQUF3QjtrQkFMcEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxXQUFXLEVBQUUsb0NBQW9DO29CQUNqRCxTQUFTLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztpQkFDdkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUGFyYW1NYXAgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQmlsbHBheU5vdGlmaWNhdGlvblJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2JpbGxwYXktam91cm5leXMtY29tbW9uJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGF5QmlsbHNOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcGF5LWJpbGxzLW5hdmlnYXRpb24uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXBheS1iaWxscy1qb3VybmV5JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BheS1iaWxscy1qb3VybmV5LmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbUGF5QmlsbHNOYXZpZ2F0aW9uU2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFBheUJpbGxzSm91cm5leUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBuYXZpZ2F0aW9uU2VydmljZTogUGF5QmlsbHNOYXZpZ2F0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJpbGxwYXlOb3RpZmljYXRpb25Sb3V0aW5nU2VydmljZTogQmlsbHBheU5vdGlmaWNhdGlvblJvdXRpbmdTZXJ2aWNlLFxuICApIHt9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXR1cE5hdmlnYXRpb25TdWJzY3JpcHRpb25zKCk7XG4gIH1cblxuICBwcml2YXRlIHNldHVwTmF2aWdhdGlvblN1YnNjcmlwdGlvbnMoKSB7XG4gICAgdGhpcy5iaWxscGF5Tm90aWZpY2F0aW9uUm91dGluZ1NlcnZpY2UudXBjb21taW5nUGF5bWVudHNTdWJqZWN0JFxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLm5hdmlnYXRlVG9QYXltZW50cygpKTtcblxuICAgIHRoaXMucm91dGUucGFyYW1NYXAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgocGFyYW06IFBhcmFtTWFwKSA9PiB7XG4gICAgICBpZiAocGFyYW0uaGFzKCdlZGl0UmVjdXJyaW5nUGF5bWVudCcpKSB7XG4gICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UubmF2aWdhdGVUb0VkaXRSZWN1cnJpbmdGb3JtKHBhcmFtLmdldCgnZWRpdFJlY3VycmluZ1BheW1lbnQnKSBhcyBzdHJpbmcpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbS5oYXMoJ2VkaXRPbmVPZmZQYXltZW50JykpIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5uYXZpZ2F0ZVRvRWRpdE9uZU9mZkZvcm0ocGFyYW0uZ2V0KCdlZGl0T25lT2ZmUGF5bWVudCcpIGFzIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmJpbGxwYXlOb3RpZmljYXRpb25Sb3V0aW5nU2VydmljZS5tYW5hZ2VQYXllZXNTdWJqZWN0JC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UubmF2aWdhdGVUb0FkZFBheWVlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIjxyb3V0ZXItb3V0bGV0Pjwvcm91dGVyLW91dGxldD5cbiJdfQ==