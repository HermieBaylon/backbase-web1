import { Injectable, Optional } from '@angular/core';
import { ONE_OFF_PAYMENT, RECURRING_PAYMENT } from '@backbase/billpay-journeys-common';
import { combineLatest } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../communication.service";
export class PayBillsNavigationService {
    constructor(router, route, communicationService) {
        this.router = router;
        this.route = route;
        this.communicationService = communicationService;
        this.routeParams = combineLatest([
            this.getRouteParam(this.route, 'payee'),
            this.getRouteParam(this.route, 'id'),
        ]).pipe(map(([payee, id]) => {
            const pageType = !!id ? 'edit' : 'new';
            const paymentType = this.extractPaymentTypeFromId(id, payee);
            const paymentId = (id && id.substring(2)) || '';
            const payeeId = (payee && payee.substring(2)) || '';
            return Object.assign(Object.assign({ pageType,
                paymentType }, (!!paymentId && { paymentId })), (!!payeeId && { payeeId }));
        }));
        this.defaultRelative = { relativeTo: this.route };
    }
    navigateToEditRecurringForm(id, extras) {
        this.router.navigate(['recurring', 'edit', id], extras || this.defaultRelative);
    }
    navigateToEditRecurringReview(id, extras) {
        this.router.navigate(['recurring', 'edit', id, 'review'], extras || this.defaultRelative);
    }
    navigateToEditOneOffForm(id, extras) {
        this.router.navigate(['one-off', 'edit', id], extras || this.defaultRelative);
    }
    navigateToEditOneOffReview(id, extras) {
        this.router.navigate(['one-off', 'edit', id, 'review'], extras || this.defaultRelative);
    }
    navigateToForm(extras) {
        this.router.navigate(['form'], extras || this.defaultRelative);
    }
    navigateToReview(extras) {
        this.router.navigate(['review'], extras || this.defaultRelative);
    }
    navigateToPayeeList() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayeesList();
    }
    navigateToPayments() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPaymentsList();
    }
    navigateToAddPayee() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToAddPayee();
    }
    navigateToMainAppPage() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToMainAppPage();
    }
    navigateToEditManualPayee(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToEditManualPayee(id);
    }
    navigateToEditElectronicPayee(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToEditElectronicPayee(id);
    }
    navigateToPayeeSummary(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayeeSummary(id);
    }
    navigateToPayverisEbillEnrol(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayverisEbillEnrol(id);
    }
    extractPaymentTypeFromId(paymentId, payeeId) {
        if (!paymentId && !payeeId) {
            return ONE_OFF_PAYMENT;
        }
        const idToUse = (paymentId ? paymentId : payeeId);
        return idToUse.substring(0, 1) === 'r' ? RECURRING_PAYMENT : ONE_OFF_PAYMENT;
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // Ensure that level that has actual value keeps it from being cleared.
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
PayBillsNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: i2.CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PayBillsNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,