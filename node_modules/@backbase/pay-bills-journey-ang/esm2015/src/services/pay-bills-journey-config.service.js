import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
import { accountNumberFullFormat } from '@backbase/billpay-journeys-common';
import '@angular/localize/init';
import { FrequencyKeys } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
export const PayBillsJourneyConfigurationToken = new InjectionToken('PayBillsJourneyConfigurationToken injection token');
const configDefaults = {
    notificationDismissTime: 5000,
    accountNumberMasked: false,
    paymentDetailsTitle: $localize `:@@pay-bills-journey-form-payment-details-title:Payment details`,
    paymentDefaultCurrency: 'USD',
    multipleBillsMode: false,
    productNumberFormat: accountNumberFullFormat,
    frequencies: [
        { name: $localize `:@@billpay-common.frequency-label.once:Once`, value: FrequencyKeys.Once },
        { name: $localize `:@@billpay-common.frequency-label.weekly:Weekly`, value: FrequencyKeys.Weekly },
        {
            name: $localize `:@@billpay-common.frequency-label.every-two-week:Every two weeks`,
            value: FrequencyKeys.Biweekly,
        },
        { name: $localize `:@@billpay-common.frequency-label.monthly:Monthly`, value: FrequencyKeys.Monthly },
    ],
};
export class PayBillsJourneyConfigService {
    constructor(config) {
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
    }
    get defaults() {
        return configDefaults;
    }
    get notificationDismissTime() {
        return this._config.notificationDismissTime;
    }
    get accountNumberMasked() {
        return this._config.accountNumberMasked;
    }
    get paymentDetailsTitle() {
        return this._config.paymentDetailsTitle;
    }
    get paymentDefaultCurrency() {
        return this._config.paymentDefaultCurrency;
    }
    get multipleBillsMode() {
        return this._config.multipleBillsMode;
    }
    get productNumberFormat() {
        return this._config.productNumberFormat;
    }
    get frequencies() {
        return this._config.frequencies;
    }
}
PayBillsJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyConfigService, deps: [{ token: PayBillsJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PayBillsJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayBillsJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PayBillsJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5LWJpbGxzLWpvdXJuZXktY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3BheS1iaWxscy1qb3VybmV5L3NyYy9zZXJ2aWNlcy9wYXktYmlsbHMtam91cm5leS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBdUIsdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNqRyxPQUFPLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBYSxhQUFhLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7QUFFN0UsTUFBTSxDQUFDLE1BQU0saUNBQWlDLEdBQUcsSUFBSSxjQUFjLENBQ2pFLG1EQUFtRCxDQUNwRCxDQUFDO0FBWUYsTUFBTSxjQUFjLEdBQWlDO0lBQ25ELHVCQUF1QixFQUFFLElBQUk7SUFDN0IsbUJBQW1CLEVBQUUsS0FBSztJQUMxQixtQkFBbUIsRUFBRSxTQUFTLENBQUEsaUVBQWlFO0lBQy9GLHNCQUFzQixFQUFFLEtBQUs7SUFDN0IsaUJBQWlCLEVBQUUsS0FBSztJQUN4QixtQkFBbUIsRUFBRSx1QkFBdUI7SUFDNUMsV0FBVyxFQUFFO1FBQ1gsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFBLDZDQUE2QyxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFO1FBQzNGLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQSxpREFBaUQsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLE1BQU0sRUFBRTtRQUNqRztZQUNFLElBQUksRUFBRSxTQUFTLENBQUEsa0VBQWtFO1lBQ2pGLEtBQUssRUFBRSxhQUFhLENBQUMsUUFBUTtTQUM5QjtRQUNELEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQSxtREFBbUQsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLE9BQU8sRUFBRTtLQUNyRztDQUNGLENBQUM7QUFHRixNQUFNLE9BQU8sNEJBQTRCO0lBR3ZDLFlBQW1FLE1BQW9DO1FBQ3JHLE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLG1DQUFRLGNBQWMsR0FBSyxNQUFNLENBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUNELElBQUksdUJBQXVCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztJQUM5QyxDQUFDO0lBQ0QsSUFBSSxtQkFBbUI7UUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0lBQzFDLENBQUM7SUFDRCxJQUFJLG1CQUFtQjtRQUNyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUM7SUFDMUMsQ0FBQztJQUNELElBQUksc0JBQXNCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztJQUM3QyxDQUFDO0lBQ0QsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0lBQ3hDLENBQUM7SUFDRCxJQUFJLG1CQUFtQjtRQUNyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUM7SUFDMUMsQ0FBQztJQUNELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFDbEMsQ0FBQzs7MEhBL0JVLDRCQUE0QixrQkFHUCxpQ0FBaUM7OEhBSHRELDRCQUE0Qjs0RkFBNUIsNEJBQTRCO2tCQUR4QyxVQUFVOzswQkFJSSxRQUFROzswQkFBSSxNQUFNOzJCQUFDLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY2NvdW50TnVtYmVyRm9ybWF0LCBhY2NvdW50TnVtYmVyRnVsbEZvcm1hdCB9IGZyb20gJ0BiYWNrYmFzZS9iaWxscGF5LWpvdXJuZXlzLWNvbW1vbic7XG5pbXBvcnQgJ0Bhbmd1bGFyL2xvY2FsaXplL2luaXQnO1xuaW1wb3J0IHsgRnJlcXVlbmN5LCBGcmVxdWVuY3lLZXlzIH0gZnJvbSAnQGJhY2tiYXNlL2JpbGxwYXktam91cm5leXMtY29tbW9uJztcblxuZXhwb3J0IGNvbnN0IFBheUJpbGxzSm91cm5leUNvbmZpZ3VyYXRpb25Ub2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQYXlCaWxsc0pvdXJuZXlDb25maWd1cmF0aW9uPihcbiAgJ1BheUJpbGxzSm91cm5leUNvbmZpZ3VyYXRpb25Ub2tlbiBpbmplY3Rpb24gdG9rZW4nLFxuKTtcblxuZXhwb3J0IGludGVyZmFjZSBQYXlCaWxsc0pvdXJuZXlDb25maWd1cmF0aW9uIHtcbiAgbm90aWZpY2F0aW9uRGlzbWlzc1RpbWU6IG51bWJlcjtcbiAgYWNjb3VudE51bWJlck1hc2tlZDogYm9vbGVhbjtcbiAgcGF5bWVudERldGFpbHNUaXRsZTogc3RyaW5nO1xuICBwYXltZW50RGVmYXVsdEN1cnJlbmN5OiBzdHJpbmc7XG4gIG11bHRpcGxlQmlsbHNNb2RlOiBib29sZWFuO1xuICBwcm9kdWN0TnVtYmVyRm9ybWF0PzogQWNjb3VudE51bWJlckZvcm1hdDtcbiAgZnJlcXVlbmNpZXM6IEZyZXF1ZW5jeVtdO1xufVxuXG5jb25zdCBjb25maWdEZWZhdWx0czogUGF5QmlsbHNKb3VybmV5Q29uZmlndXJhdGlvbiA9IHtcbiAgbm90aWZpY2F0aW9uRGlzbWlzc1RpbWU6IDUwMDAsXG4gIGFjY291bnROdW1iZXJNYXNrZWQ6IGZhbHNlLFxuICBwYXltZW50RGV0YWlsc1RpdGxlOiAkbG9jYWxpemVgOkBAcGF5LWJpbGxzLWpvdXJuZXktZm9ybS1wYXltZW50LWRldGFpbHMtdGl0bGU6UGF5bWVudCBkZXRhaWxzYCxcbiAgcGF5bWVudERlZmF1bHRDdXJyZW5jeTogJ1VTRCcsXG4gIG11bHRpcGxlQmlsbHNNb2RlOiBmYWxzZSxcbiAgcHJvZHVjdE51bWJlckZvcm1hdDogYWNjb3VudE51bWJlckZ1bGxGb3JtYXQsXG4gIGZyZXF1ZW5jaWVzOiBbXG4gICAgeyBuYW1lOiAkbG9jYWxpemVgOkBAYmlsbHBheS1jb21tb24uZnJlcXVlbmN5LWxhYmVsLm9uY2U6T25jZWAsIHZhbHVlOiBGcmVxdWVuY3lLZXlzLk9uY2UgfSxcbiAgICB7IG5hbWU6ICRsb2NhbGl6ZWA6QEBiaWxscGF5LWNvbW1vbi5mcmVxdWVuY3ktbGFiZWwud2Vla2x5OldlZWtseWAsIHZhbHVlOiBGcmVxdWVuY3lLZXlzLldlZWtseSB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICRsb2NhbGl6ZWA6QEBiaWxscGF5LWNvbW1vbi5mcmVxdWVuY3ktbGFiZWwuZXZlcnktdHdvLXdlZWs6RXZlcnkgdHdvIHdlZWtzYCxcbiAgICAgIHZhbHVlOiBGcmVxdWVuY3lLZXlzLkJpd2Vla2x5LFxuICAgIH0sXG4gICAgeyBuYW1lOiAkbG9jYWxpemVgOkBAYmlsbHBheS1jb21tb24uZnJlcXVlbmN5LWxhYmVsLm1vbnRobHk6TW9udGhseWAsIHZhbHVlOiBGcmVxdWVuY3lLZXlzLk1vbnRobHkgfSxcbiAgXSxcbn07XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQYXlCaWxsc0pvdXJuZXlDb25maWdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfY29uZmlnOiBQYXlCaWxsc0pvdXJuZXlDb25maWd1cmF0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoUGF5QmlsbHNKb3VybmV5Q29uZmlndXJhdGlvblRva2VuKSBjb25maWc6IFBheUJpbGxzSm91cm5leUNvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5fY29uZmlnID0geyAuLi5jb25maWdEZWZhdWx0cywgLi4uY29uZmlnIH07XG4gIH1cblxuICBnZXQgZGVmYXVsdHMoKTogUGF5QmlsbHNKb3VybmV5Q29uZmlndXJhdGlvbiB7XG4gICAgcmV0dXJuIGNvbmZpZ0RlZmF1bHRzO1xuICB9XG4gIGdldCBub3RpZmljYXRpb25EaXNtaXNzVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcubm90aWZpY2F0aW9uRGlzbWlzc1RpbWU7XG4gIH1cbiAgZ2V0IGFjY291bnROdW1iZXJNYXNrZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5hY2NvdW50TnVtYmVyTWFza2VkO1xuICB9XG4gIGdldCBwYXltZW50RGV0YWlsc1RpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wYXltZW50RGV0YWlsc1RpdGxlO1xuICB9XG4gIGdldCBwYXltZW50RGVmYXVsdEN1cnJlbmN5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wYXltZW50RGVmYXVsdEN1cnJlbmN5O1xuICB9XG4gIGdldCBtdWx0aXBsZUJpbGxzTW9kZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLm11bHRpcGxlQmlsbHNNb2RlO1xuICB9XG4gIGdldCBwcm9kdWN0TnVtYmVyRm9ybWF0KCk6IEFjY291bnROdW1iZXJGb3JtYXQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcucHJvZHVjdE51bWJlckZvcm1hdDtcbiAgfVxuICBnZXQgZnJlcXVlbmNpZXMoKTogRnJlcXVlbmN5W10ge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuZnJlcXVlbmNpZXM7XG4gIH1cbn1cbiJdfQ==