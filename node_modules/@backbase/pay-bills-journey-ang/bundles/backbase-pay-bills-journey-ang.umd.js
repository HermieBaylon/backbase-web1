(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('@backbase/foundation-ang/core'), require('@angular/forms'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/billpay-journeys-common'), require('rxjs'), require('rxjs/operators'), require('@angular/localize/init'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/fieldset'), require('@backbase/ui-ang/product-selector'), require('@backbase/ui-ang/product-item-basic-account'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/product-item-current-account'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/input-radio-group'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/amount-input'), require('@backbase/ui-ang/date-pipe'), require('@backbase/ui-ang/textarea'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/input-number'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/media-query-lib'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/ellipsis'), require('@backbase/ui-ang/payment-card-number-pipe'), require('@backbase/ui-ang/keyboard-click-directive'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/char-counter'), require('@backbase/ui-ang/currency-input')) :
    typeof define === 'function' && define.amd ? define('@backbase/pay-bills-journey-ang', ['exports', '@angular/core', '@angular/common', '@angular/router', '@backbase/foundation-ang/core', '@angular/forms', '@ng-bootstrap/ng-bootstrap', '@backbase/billpay-journeys-common', 'rxjs', 'rxjs/operators', '@angular/localize/init', '@backbase/ui-ang/header', '@backbase/ui-ang/fieldset', '@backbase/ui-ang/product-selector', '@backbase/ui-ang/product-item-basic-account', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/product-item-current-account', '@backbase/ui-ang/alert', '@backbase/ui-ang/input-radio-group', '@backbase/ui-ang/amount', '@backbase/ui-ang/amount-input', '@backbase/ui-ang/date-pipe', '@backbase/ui-ang/textarea', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/icon', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/input-number', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/button', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/modal', '@backbase/ui-ang/notification', '@backbase/ui-ang/media-query-lib', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/ellipsis', '@backbase/ui-ang/payment-card-number-pipe', '@backbase/ui-ang/keyboard-click-directive', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/load-button', '@backbase/ui-ang/char-counter', '@backbase/ui-ang/currency-input'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["pay-bills-journey-ang"] = {}), global.ng.core, global.ng.common, global.ng.router, global.i1$4, global.ng.forms, global.i2$3, global.i1, global.rxjs, global.rxjs.operators, global.ng.localize.init, global.i3, global.i4$2, global.i5$1, global.i6$1, global.i5, global.i8$2, global.i7, global.i2, global.i3$1, global.i10, global.i8, global.i11, global.i12, global.i3$2, global.i2$1, global.i4$1, global.i6, global.i8$1, global.i4$3, global.i6$2, global.i7$1, global.i1$3, global.i5$2, global.i3$3, global.i7$2, global.i2$2, global.i6$3, global.i17, global.i6$4, global.i9, global.charCounter, global.currencyInput));
})(this, (function (exports, i0, i4, i1$1, i1$4, i1$2, i2$3, i1, rxjs, operators, init, i3, i4$2, i5$1, i6$1, i5, i8$2, i7, i2, i3$1, i10, i8, i11, i12, i3$2, i2$1, i4$1, i6, i8$1, i4$3, i6$2, i7$1, i1$3, i5$2, i3$3, i7$2, i2$2, i6$3, i17, i6$4, i9, charCounter, currencyInput) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i8__namespace$2 = /*#__PURE__*/_interopNamespace(i8$2);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
    var i4__namespace$3 = /*#__PURE__*/_interopNamespace(i4$3);
    var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);
    var i3__namespace$3 = /*#__PURE__*/_interopNamespace(i3$3);
    var i7__namespace$2 = /*#__PURE__*/_interopNamespace(i7$2);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i6__namespace$3 = /*#__PURE__*/_interopNamespace(i6$3);
    var i17__namespace = /*#__PURE__*/_interopNamespace(i17);
    var i6__namespace$4 = /*#__PURE__*/_interopNamespace(i6$4);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var CommunicationService = /** @class */ (function () {
        function CommunicationService() {
        }
        return CommunicationService;
    }());

    var PayBillsNavigationService = /** @class */ (function () {
        function PayBillsNavigationService(router, route, communicationService) {
            var _this = this;
            this.router = router;
            this.route = route;
            this.communicationService = communicationService;
            this.routeParams = rxjs.combineLatest([
                this.getRouteParam(this.route, 'payee'),
                this.getRouteParam(this.route, 'id'),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), payee = _c[0], id = _c[1];
                var pageType = !!id ? 'edit' : 'new';
                var paymentType = _this.extractPaymentTypeFromId(id, payee);
                var paymentId = (id && id.substring(2)) || '';
                var payeeId = (payee && payee.substring(2)) || '';
                return Object.assign(Object.assign({ pageType: pageType, paymentType: paymentType }, (!!paymentId && { paymentId: paymentId })), (!!payeeId && { payeeId: payeeId }));
            }));
            this.defaultRelative = { relativeTo: this.route };
        }
        PayBillsNavigationService.prototype.navigateToEditRecurringForm = function (id, extras) {
            this.router.navigate(['recurring', 'edit', id], extras || this.defaultRelative);
        };
        PayBillsNavigationService.prototype.navigateToEditRecurringReview = function (id, extras) {
            this.router.navigate(['recurring', 'edit', id, 'review'], extras || this.defaultRelative);
        };
        PayBillsNavigationService.prototype.navigateToEditOneOffForm = function (id, extras) {
            this.router.navigate(['one-off', 'edit', id], extras || this.defaultRelative);
        };
        PayBillsNavigationService.prototype.navigateToEditOneOffReview = function (id, extras) {
            this.router.navigate(['one-off', 'edit', id, 'review'], extras || this.defaultRelative);
        };
        PayBillsNavigationService.prototype.navigateToForm = function (extras) {
            this.router.navigate(['form'], extras || this.defaultRelative);
        };
        PayBillsNavigationService.prototype.navigateToReview = function (extras) {
            this.router.navigate(['review'], extras || this.defaultRelative);
        };
        PayBillsNavigationService.prototype.navigateToPayeeList = function () {
            var _a;
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayeesList();
        };
        PayBillsNavigationService.prototype.navigateToPayments = function () {
            var _a;
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPaymentsList();
        };
        PayBillsNavigationService.prototype.navigateToAddPayee = function () {
            var _a;
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToAddPayee();
        };
        PayBillsNavigationService.prototype.navigateToMainAppPage = function () {
            var _a;
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToMainAppPage();
        };
        PayBillsNavigationService.prototype.navigateToEditManualPayee = function (id) {
            var _a;
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToEditManualPayee(id);
        };
        PayBillsNavigationService.prototype.navigateToEditElectronicPayee = function (id) {
            var _a;
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToEditElectronicPayee(id);
        };
        PayBillsNavigationService.prototype.navigateToPayeeSummary = function (id) {
            var _a;
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayeeSummary(id);
        };
        PayBillsNavigationService.prototype.navigateToPayverisEbillEnrol = function (id) {
            var _a;
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPayverisEbillEnrol(id);
        };
        PayBillsNavigationService.prototype.extractPaymentTypeFromId = function (paymentId, payeeId) {
            if (!paymentId && !payeeId) {
                return i1.ONE_OFF_PAYMENT;
            }
            var idToUse = (paymentId ? paymentId : payeeId);
            return idToUse.substring(0, 1) === 'r' ? i1.RECURRING_PAYMENT : i1.ONE_OFF_PAYMENT;
        };
        PayBillsNavigationService.prototype.getRouteParam = function (route, param) {
            var paramValue = route.paramMap.pipe(operators.pluck('params', param));
            if (!route.parent) {
                return paramValue;
            }
            // Ensure that level that has actual value keeps it from being cleared.
            return rxjs.combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(operators.map(function (params) { return params[0] || params[1]; }));
        };
        return PayBillsNavigationService;
    }());
    PayBillsNavigationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsNavigationService, deps: [{ token: i1__namespace.Router }, { token: i1__namespace.ActivatedRoute }, { token: CommunicationService, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PayBillsNavigationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsNavigationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsNavigationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.Router }, { type: i1__namespace.ActivatedRoute }, { type: CommunicationService, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PayBillsJourneyComponent = /** @class */ (function () {
        function PayBillsJourneyComponent(navigationService, route, billpayNotificationRoutingService) {
            this.navigationService = navigationService;
            this.route = route;
            this.billpayNotificationRoutingService = billpayNotificationRoutingService;
            this.destroy$ = new rxjs.Subject();
        }
        PayBillsJourneyComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        PayBillsJourneyComponent.prototype.ngOnInit = function () {
            this.setupNavigationSubscriptions();
        };
        PayBillsJourneyComponent.prototype.setupNavigationSubscriptions = function () {
            var _this = this;
            this.billpayNotificationRoutingService.upcommingPaymentsSubject$
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () { return _this.navigationService.navigateToPayments(); });
            this.route.paramMap.pipe(operators.takeUntil(this.destroy$)).subscribe(function (param) {
                if (param.has('editRecurringPayment')) {
                    _this.navigationService.navigateToEditRecurringForm(param.get('editRecurringPayment'));
                }
                else if (param.has('editOneOffPayment')) {
                    _this.navigationService.navigateToEditOneOffForm(param.get('editOneOffPayment'));
                }
            });
            this.billpayNotificationRoutingService.managePayeesSubject$.pipe(operators.takeUntil(this.destroy$)).subscribe(function () {
                _this.navigationService.navigateToAddPayee();
            });
        };
        return PayBillsJourneyComponent;
    }());
    PayBillsJourneyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyComponent, deps: [{ token: PayBillsNavigationService }, { token: i1__namespace.ActivatedRoute }, { token: i1__namespace$1.BillpayNotificationRoutingService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PayBillsJourneyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PayBillsJourneyComponent, selector: "bb-pay-bills-journey", providers: [PayBillsNavigationService], ngImport: i0__namespace, template: "<router-outlet></router-outlet>\n", directives: [{ type: i1__namespace.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-pay-bills-journey',
                        templateUrl: './pay-bills-journey.component.html',
                        providers: [PayBillsNavigationService],
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsNavigationService }, { type: i1__namespace.ActivatedRoute }, { type: i1__namespace$1.BillpayNotificationRoutingService }]; } });

    var PayBillsJourneyConfigurationToken = new i0.InjectionToken('PayBillsJourneyConfigurationToken injection token');
    var configDefaults = {
        notificationDismissTime: 5000,
        accountNumberMasked: false,
        paymentDetailsTitle: $localize(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([":@@pay-bills-journey-form-payment-details-title:Payment details"], [":@@pay-bills-journey-form-payment-details-title:Payment details"]))),
        paymentDefaultCurrency: 'USD',
        multipleBillsMode: false,
        productNumberFormat: i1.accountNumberFullFormat,
        frequencies: [
            { name: $localize(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([":@@billpay-common.frequency-label.once:Once"], [":@@billpay-common.frequency-label.once:Once"]))), value: i1.FrequencyKeys.Once },
            { name: $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@billpay-common.frequency-label.weekly:Weekly"], [":@@billpay-common.frequency-label.weekly:Weekly"]))), value: i1.FrequencyKeys.Weekly },
            {
                name: $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@billpay-common.frequency-label.every-two-week:Every two weeks"], [":@@billpay-common.frequency-label.every-two-week:Every two weeks"]))),
                value: i1.FrequencyKeys.Biweekly,
            },
            { name: $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":@@billpay-common.frequency-label.monthly:Monthly"], [":@@billpay-common.frequency-label.monthly:Monthly"]))), value: i1.FrequencyKeys.Monthly },
        ],
    };
    var PayBillsJourneyConfigService = /** @class */ (function () {
        function PayBillsJourneyConfigService(config) {
            config = config || {};
            this._config = Object.assign(Object.assign({}, configDefaults), config);
        }
        Object.defineProperty(PayBillsJourneyConfigService.prototype, "defaults", {
            get: function () {
                return configDefaults;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayBillsJourneyConfigService.prototype, "notificationDismissTime", {
            get: function () {
                return this._config.notificationDismissTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayBillsJourneyConfigService.prototype, "accountNumberMasked", {
            get: function () {
                return this._config.accountNumberMasked;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayBillsJourneyConfigService.prototype, "paymentDetailsTitle", {
            get: function () {
                return this._config.paymentDetailsTitle;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayBillsJourneyConfigService.prototype, "paymentDefaultCurrency", {
            get: function () {
                return this._config.paymentDefaultCurrency;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayBillsJourneyConfigService.prototype, "multipleBillsMode", {
            get: function () {
                return this._config.multipleBillsMode;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayBillsJourneyConfigService.prototype, "productNumberFormat", {
            get: function () {
                return this._config.productNumberFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayBillsJourneyConfigService.prototype, "frequencies", {
            get: function () {
                return this._config.frequencies;
            },
            enumerable: false,
            configurable: true
        });
        return PayBillsJourneyConfigService;
    }());
    PayBillsJourneyConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyConfigService, deps: [{ token: PayBillsJourneyConfigurationToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PayBillsJourneyConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PayBillsJourneyConfigurationToken]
                        }] }];
        } });
    var templateObject_1$3, templateObject_2$1, templateObject_3, templateObject_4, templateObject_5;

    var BillPayEnrolmentViewComponent = /** @class */ (function () {
        function BillPayEnrolmentViewComponent(config) {
            this.config = config;
        }
        return BillPayEnrolmentViewComponent;
    }());
    BillPayEnrolmentViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillPayEnrolmentViewComponent, deps: [{ token: PayBillsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillPayEnrolmentViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillPayEnrolmentViewComponent, selector: "bb-billpay-enrolment-view", ngImport: i0__namespace, template: "\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h1\"\n        heading=\"Enrol in bill pay\"\n        i18n-heading=\"@@billpay-manage-payee-journey.enrolment-heading\"\n      ></bb-header-ui>\n    </div>\n    <bb-billpay-enrolment [notificationDismissTime]=\"config?.notificationDismissTime\"></bb-billpay-enrolment>\n  ", isInline: true, components: [{ type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1__namespace$1.BillpayEnrolmentComponent, selector: "bb-billpay-enrolment", inputs: ["notificationDismissTime"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillPayEnrolmentViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-enrolment-view',
                        template: "\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h1\"\n        heading=\"Enrol in bill pay\"\n        i18n-heading=\"@@billpay-manage-payee-journey.enrolment-heading\"\n      ></bb-header-ui>\n    </div>\n    <bb-billpay-enrolment [notificationDismissTime]=\"config?.notificationDismissTime\"></bb-billpay-enrolment>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }]; } });

    var PayBillsStateService = /** @class */ (function () {
        function PayBillsStateService() {
            this.paymentStateSource = new rxjs.BehaviorSubject(undefined);
            this.paymentState = this.paymentStateSource.asObservable();
            this.isFormProcessingValue = false;
        }
        Object.defineProperty(PayBillsStateService.prototype, "isFormProcessing", {
            get: function () {
                return this.isFormProcessingValue;
            },
            set: function (value) {
                this.isFormProcessingValue = value;
            },
            enumerable: false,
            configurable: true
        });
        PayBillsStateService.prototype.updatePaymentState = function (state) {
            this.paymentStateSource.next(state);
        };
        PayBillsStateService.prototype.reset = function () {
            this.isFormProcessing = false;
            this.updatePaymentState();
        };
        return PayBillsStateService;
    }());
    PayBillsStateService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsStateService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PayBillsStateService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsStateService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsStateService, decorators: [{
                type: i0.Injectable
            }] });

    var BillpayEbillPaymentUIComponent = /** @class */ (function () {
        function BillpayEbillPaymentUIComponent() {
            /**
             * Mark the form as submitted, controls validation elements. Defaults to false.
             */
            this.isSubmitted = false;
            /**
             * get the payment default currency preference. default to 'USD'.
             */
            this.eBillDefaultCurrency = 'USD';
            /**
             * unique key used for ids
             */
            this.id = i1.BillpayUtilityService.generateId();
        }
        BillpayEbillPaymentUIComponent.prototype.ngOnInit = function () {
            this.customValue = {
                amount: '',
                currency: this.eBillDefaultCurrency,
                type: undefined,
            };
        };
        BillpayEbillPaymentUIComponent.prototype.setAmount = function (type) {
            this.customValue.type = type;
            if (type === 'Custom') {
                this.setCustomAmount(this.customValue.amount);
            }
            else {
                var currency = this.getAmount(type);
                if (currency) {
                    this.setValue({
                        amount: currency.amount,
                        currency: currency.currencyCode,
                        type: type,
                    });
                }
            }
        };
        BillpayEbillPaymentUIComponent.prototype.setCustomAmount = function (ev) {
            this.customValue.amount = ev;
            this.setValue(Object.assign(Object.assign({}, this.customValue), { type: 'Custom' }));
        };
        Object.defineProperty(BillpayEbillPaymentUIComponent.prototype, "showBalance", {
            get: function () {
                return !!(this.latestBill && this.isDifferentAndNonZero(this.latestBill.outstandingBalance, this.latestBill.amount));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayEbillPaymentUIComponent.prototype, "showMinumum", {
            get: function () {
                return !!(this.latestBill && this.isDifferentAndNonZero(this.latestBill.minAmountDue, this.latestBill.amount));
            },
            enumerable: false,
            configurable: true
        });
        BillpayEbillPaymentUIComponent.prototype.isDifferentAndNonZero = function (otherEbillAmount, ebillAmount) {
            return !!(otherEbillAmount &&
                ebillAmount &&
                otherEbillAmount.amount !== ebillAmount.amount &&
                0 !== +otherEbillAmount.amount);
        };
        BillpayEbillPaymentUIComponent.prototype.setValue = function (newValue) {
            if (this.control) {
                this.control.setValue(newValue);
            }
        };
        BillpayEbillPaymentUIComponent.prototype.getAmount = function (value) {
            switch (value) {
                case 'Minimum':
                    return this.latestBill && this.latestBill.minAmountDue;
                case 'Balance':
                    return this.latestBill && this.latestBill.outstandingBalance;
                case 'Due':
                default:
                    return this.latestBill && this.latestBill.amount;
            }
        };
        return BillpayEbillPaymentUIComponent;
    }());
    BillpayEbillPaymentUIComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayEbillPaymentUIComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayEbillPaymentUIComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayEbillPaymentUIComponent, selector: "bb-billpay-ebill-payment", inputs: { latestBill: "latestBill", control: "control", isSubmitted: "isSubmitted", eBillDefaultCurrency: "eBillDefaultCurrency" }, ngImport: i0__namespace, template: "<bb-alert-ui modifier=\"info\" title=\"\">\n  <span\n    data-role=\"ebill-info-alert\"\n    class=\"bb-text-bold\"\n    i18n=\"eBill payment alert|Alert for eBill information@@billpay.bb-payment-ebill.alert\"\n  >\n    eBill due on {{ latestBill?.paymentDate | bbDate: 'fullDate' }}.\n  </span>\n</bb-alert-ui>\n\n<bb-input-radio-group-ui\n  data-role=\"ebill-payment-group\"\n  [required]=\"true\"\n  [ngModel]=\"control?.value?.type\"\n  (ngModelChange)=\"setAmount($event)\"\n  [preselect]=\"false\"\n>\n  <bb-input-radio-ui value=\"Due\" [labelTemplate]=\"ebillPaymentDueLabelTemplate\">\n    <ng-template #ebillPaymentDueLabelTemplate>\n      <div class=\"pl-2 bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-stack__item--fill\" data-role=\"ebill-due-message\">\n          <div\n            i18n=\"\n              eBill due amount radio label|Label for the radio button for selecting the eBill due\n              amount@@bb-billpay-payment-ebill.radio.due-amount\"\n          >\n            eBill amount due\n          </div>\n          <span\n            class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n            i18n=\"\n              eBill due amount radio description|Description for the radio button for selecting the eBill due\n              amount@@bb-billpay-payment-ebill.radio.due-amount.description\"\n          >\n            Amount due on the latest billing cycle\n          </span>\n        </div>\n        <div class=\"bb-stack__item bb-stack__break--sm-down\">\n          <bb-amount-ui\n            data-role=\"ebill-due-message-amount\"\n            [amount]=\"latestBill?.amount?.amount\"\n            [currency]=\"latestBill?.amount?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </bb-input-radio-ui>\n\n  <bb-input-radio-ui value=\"Balance\" *ngIf=\"showBalance\" [labelTemplate]=\"ebillPaymentBalanceLabelTemplate\">\n    <ng-template #ebillPaymentBalanceLabelTemplate>\n      <div class=\"pl-2 bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-stack__item--fill\" data-role=\"ebill-balance-message\">\n          <div\n            i18n=\"\n              eBill outstanding balance amount radio label|Label for the radio button for selecting the eBill\n              outstanding balance amount@@bb-billpay-payment-ebill.radio.outstanding-balance-amount\"\n          >\n            Total payee balance\n          </div>\n          <span\n            class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n            i18n=\"\n              eBill total amount radio description|Description for the radio button for selecting the eBill total\n              amount@@bb-billpay-payment-ebill.radio.total-amount.description\"\n          >\n            Total amount owed\n          </span>\n        </div>\n        <div class=\"bb-stack__item bb-stack__break--sm-down\">\n          <bb-amount-ui\n            data-role=\"ebill-balance-message-amount\"\n            [amount]=\"latestBill?.outstandingBalance?.amount\"\n            [currency]=\"latestBill?.outstandingBalance?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </bb-input-radio-ui>\n\n  <bb-input-radio-ui value=\"Minimum\" *ngIf=\"showMinumum\" [labelTemplate]=\"ebillPaymentMinimumLabelTemplate\">\n    <ng-template #ebillPaymentMinimumLabelTemplate>\n      <div class=\"pl-2 bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-stack__item--fill\" data-role=\"ebill-minimum-message\">\n          <div\n            i18n=\"\n              eBill minimum amount radio label|Label for the radio button for selecting the eBill minimum\n              amount@@bb-billpay-payment-ebill.radio.minimum-amount\"\n          >\n            eBill minimum payment\n          </div>\n          <span\n            class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n            i18n=\"\n              eBill minimum amount radio description|Description for the radio button for selecting the eBill minimum\n              amount@@bb-billpay-payment-ebill.radio.minimum-amount.description\"\n          >\n            5% of the total balance\n          </span>\n        </div>\n        <div class=\"bb-stack__item bb-stack__break--sm-down\">\n          <bb-amount-ui\n            data-role=\"ebill-minimum-message-amount\"\n            [amount]=\"latestBill?.minAmountDue?.amount\"\n            [currency]=\"latestBill?.minAmountDue?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </bb-input-radio-ui>\n\n  <bb-input-radio-ui value=\"Custom\" [labelTemplate]=\"ebillPaymentOtherLabelTemplate\">\n    <ng-template #ebillPaymentOtherLabelTemplate>\n      <div class=\"pl-2 bb-form-field bb-form-field--md\">\n        <div\n          data-role=\"ebill-custom-message\"\n          i18n=\"\n            eBill other amount radio label|Label for the radio button for selecting an eBill other\n            amount@@bb-billpay-payment-ebill.radio.other-amount\"\n        >\n          Other amount\n        </div>\n        <span\n          class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n          i18n=\"\n            eBill other amount radio description|Description for the radio button for selecting the eBill other\n            amount@@bb-billpay-payment-ebill.radio.other-amount.description\"\n        >\n          Enter amount manually\n        </span>\n        <ng-container *ngIf=\"control?.value?.type === 'Custom'\">\n          <div class=\"position-relative\" [class.was-validated]=\"touched && !customValue?.amount\">\n            <bb-amount-input-ui\n              data-role=\"ebill-amount-input\"\n              [ngModel]=\"control?.value?.amount\"\n              (ngModelChange)=\"setCustomAmount($event)\"\n              (focusout)=\"touched = true\"\n              [autoDecimal]=\"true\"\n              wrapperClasses=\"bb-amount-input__field--large\"\n              [currency]=\"latestBill?.amount?.currencyCode\"\n              [required]=\"true\"\n              [aria-describedby]=\"'compact-amount-error-message' + id\"\n              [placeholder]=\"'0.00'\"\n            ></bb-amount-input-ui>\n          </div>\n          <bb-input-validation-message-ui\n            id=\"{{ 'compact-amount-error-message' + id }}\"\n            [showErrors]=\"touched && !customValue?.amount\"\n          >\n            <span> Field is required. </span>\n          </bb-input-validation-message-ui>\n        </ng-container>\n      </div>\n    </ng-template>\n  </bb-input-radio-ui>\n</bb-input-radio-group-ui>\n\n<bb-input-validation-message-ui role=\"alert\" [showErrors]=\"isSubmitted && control?.invalid\">\n  <p\n    *ngIf=\"!control?.errors?.amountInvalid\"\n    i18n=\"Payment amount cannot be zero|Error zero amount@@bb-billpay-payment-form.error.amount\"\n    data-role=\"invalid-amount\"\n  >\n    Payment amount cannot be zero.\n  </p>\n</bb-input-validation-message-ui>\n", components: [{ type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2__namespace.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2__namespace.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3__namespace$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i10__namespace.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i5__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1__namespace$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "bbDate": i8__namespace.BbDatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayEbillPaymentUIComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-ebill-payment',
                        templateUrl: './billpay-ebill-payment-ui.component.html',
                    }]
            }], propDecorators: { latestBill: [{
                    type: i0.Input
                }], control: [{
                    type: i0.Input
                }], isSubmitted: [{
                    type: i0.Input
                }], eBillDefaultCurrency: [{
                    type: i0.Input
                }] } });

    var ScheduleLabelComponent = /** @class */ (function () {
        function ScheduleLabelComponent() {
            /**
             * Selects elements appropriate to a one-off payment. Defaults to true.
             */
            this.isSingleTransfer = true;
            /**
             * Minimum number of occurrences for recurring payments.
             */
            this.minOccurrences = 1;
        }
        Object.defineProperty(ScheduleLabelComponent.prototype, "frequencyLabel", {
            get: function () {
                var _this = this;
                var _a;
                var frequency = (_a = this.frequencies) === null || _a === void 0 ? void 0 : _a.find(function (freq) { var _a; return ((_a = _this.item) === null || _a === void 0 ? void 0 : _a.frequency) === freq.value; });
                return $localize(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([":@@billpay-payment.form.schedule-frequency-label:", ""], [":@@billpay-payment.form.schedule-frequency-label:", ""])), (frequency === null || frequency === void 0 ? void 0 : frequency.name) || '');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleLabelComponent.prototype, "startDate", {
            get: function () {
                var _a, _b, _c;
                var date = String((((_a = this.item) === null || _a === void 0 ? void 0 : _a.frequency) === i1.FrequencyKeys.Once &&
                    ((_b = this.item.paymentService) === null || _b === void 0 ? void 0 : _b.index) !== i1.PaymentServicesTypes.Other &&
                    this.item.paymentServiceDate) ||
                    ((_c = this.item) === null || _c === void 0 ? void 0 : _c.startDate));
                return (this.item && date) || undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleLabelComponent.prototype, "endDate", {
            get: function () {
                return this.item && this.item.endDate && Date.parse(this.item.endDate) ? new Date(this.item.endDate) : undefined;
            },
            enumerable: false,
            configurable: true
        });
        ScheduleLabelComponent.prototype.isToday = function () {
            if (this.item === undefined) {
                throw new Error('`item` input is required in `bb-schedule-label-ui` component');
            }
            var today = new Date().setHours(0, 0, 0, 0);
            var startDate = new Date(this.item.startDate);
            return startDate.setHours(0, 0, 0, 0) === today;
        };
        ScheduleLabelComponent.prototype.hasEnd = function () {
            return !!this.item && (this.item.endDate !== undefined || this.item.repeat !== undefined);
        };
        ScheduleLabelComponent.prototype.hasLimit = function () {
            return this.hasEnd() && !this.isSingleTransfer;
        };
        return ScheduleLabelComponent;
    }());
    ScheduleLabelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ScheduleLabelComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleLabelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: { item: "item", isSingleTransfer: "isSingleTransfer", minOccurrences: "minOccurrences", frequencies: "frequencies" }, ngImport: i0__namespace, template: "<span>\n  <ng-container *ngIf=\"frequencyLabel; else defaultLabels\">{{ frequencyLabel }},</ng-container>\n  <!-- Remove default labels after journey migration phase 2 -->\n  <ng-template #defaultLabels>\n    <span\n      i18n=\"\n        Schedule frequency title list|List of titles for available schedule\n        frequencies@@billpay.bb-schedule-label-ui.frequency.list\"\n    >\n      {item?.frequency, select, ONCE {Once} WEEKLY {Weekly} EVERY_2_WEEKS {Every two weeks} MONTHLY {Monthly}\n      EVERY_4_WEEKS {Every for weeks} TWICE_A_MONTH {Semi monthly} EVERY_2_MONTHS {Every two months} EVERY_3_MONTHS {\n      Every three months} EVERY_6_MONTHS {Every six months} ANNUALLY {Annually}},\n    </span>\n  </ng-template>\n</span>\n<ng-container *ngIf=\"isSingleTransfer\">\n  <span\n    i18n=\"\n      On|Word to be used before a date to indicate that the payment will be executed on that\n      date@@billpay.bb-schedule-label-ui.label.on\"\n    >&nbsp;on</span\n  >\n</ng-container>\n\n<ng-container *ngIf=\"!isSingleTransfer\">\n  <span\n    i18n=\"\n      Schedule start|Word to be used before a date to indicate that this date is a starting date of the\n      schedule@@billpay.bb-schedule-label-ui.label.start\"\n    >&nbsp;starting</span\n  >\n</ng-container>\n\n<span>&nbsp;{{ startDate | date: 'mediumDate' }}</span>\n\n<ng-container *ngIf=\"hasLimit() && item?.endDate\"\n  >&sbquo;\n  <span\n    i18n=\"\n      Schedule end|Word to be used before a date to indicate that this date is an end date of the\n      schedule@@billpay.bb-schedule-label-ui.label.end\"\n    >Until&nbsp;{{ endDate | date: 'mediumDate' }}</span\n  >\n</ng-container>\n\n<ng-container *ngIf=\"hasLimit() && (item?.repeat || 0) >= minOccurrences\"\n  >&sbquo;\n  <span>{ item?.repeat, plural, =1 { {{ item?.repeat }} time} other { {{ item?.repeat }} times}}</span>\n</ng-container>\n", directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i4__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ScheduleLabelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-schedule-label-ui',
                        templateUrl: './schedule-label.component.html',
                    }]
            }], propDecorators: { item: [{
                    type: i0.Input
                }], isSingleTransfer: [{
                    type: i0.Input
                }], minOccurrences: [{
                    type: i0.Input
                }], frequencies: [{
                    type: i0.Input
                }] } });
    var templateObject_1$2;

    var ScheduleComponent = /** @class */ (function () {
        /** @internal */
        function ScheduleComponent(scheduleService) {
            this.scheduleService = scheduleService;
            this.startDateLabelId = i1.BillpayUtilityService.generateId();
            this.endingLabelId = i1.BillpayUtilityService.generateId();
            this.id = i1.BillpayUtilityService.generateId();
            /**
             * Set initial payment service for the initial component state.
             */
            this.defaultPaymentServiceType = i1.PaymentServicesTypes.Regular;
            /**
             * Mark the form as submitted, controls validation elements. Defaults to false.
             */
            this.formSubmitted = false;
            this.destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(ScheduleComponent.prototype, "paymentServiceRadios", {
            get: function () {
                return this._paymentServiceRadios;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleComponent.prototype, "frequencyValues", {
            get: function () {
                return i1.FrequencyKeys;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleComponent.prototype, "endTypes", {
            get: function () {
                return i1.EndTypes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleComponent.prototype, "item", {
            get: function () {
                return this.scheduleForm && this.scheduleForm.getRawValue();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleComponent.prototype, "paymentServicesTypes", {
            get: function () {
                return i1.PaymentServicesTypes;
            },
            enumerable: false,
            configurable: true
        });
        ScheduleComponent.prototype.setDefaultPaymentServiceValue = function (index, options) {
            // set default value from initial state form for mapped `paymentServiceRadios`
            var paymentServiceControl = this.scheduleForm && this.scheduleForm.controls['paymentService'];
            if (paymentServiceControl) {
                paymentServiceControl.setValue(this.paymentServiceRadios &&
                    this.paymentServiceRadios.find(function (item) { return !!(item.service && item.index === (index || paymentServiceControl.value.index)); }), options);
            }
        };
        ScheduleComponent.prototype.ngOnInit = function () {
            if (this.scheduleForm === undefined) {
                throw new Error('`scheduleForm` input is required in `bb-schedule-ui` component');
            }
            if (this.frequencies === undefined) {
                throw new Error('`frequencies` input is required in `bb-schedule-ui` component');
            }
            this.processEndTypeValueChanges();
            this.processPaymentServiceValueChanges();
            this.processFrequencyValueChanges();
        };
        ScheduleComponent.prototype.ngOnChanges = function (changes) {
            if (changes.paymentServices) {
                var isFirstChange = !this.paymentServiceRadios;
                var service = changes.paymentServices.currentValue;
                this._paymentServiceRadios =
                    service &&
                        service.map(function (item) { return ({
                            index: item.paymentServiceType || '',
                            service: item,
                        }); });
                if (this._paymentServiceRadios) {
                    this._paymentServiceRadios.push({
                        index: i1.PaymentServicesTypes.Other,
                        service: service && service.find(function (item) { return item.paymentServiceType === i1.PaymentServicesTypes.Regular; }),
                    });
                }
                this.setDefaultPaymentServiceValue(this.defaultPaymentServiceType, { emitEvent: !isFirstChange });
            }
        };
        ScheduleComponent.prototype.processEndTypeValueChanges = function () {
            if (!this.scheduleForm)
                return;
            var endTypeControl = this.scheduleForm.controls['endType'];
            var endDateControl = this.scheduleForm.controls['endDate'];
            var repeatControl = this.scheduleForm.controls['repeat'];
            if (endTypeControl && endDateControl && repeatControl) {
                endTypeControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (value) {
                    switch (value) {
                        case i1.EndTypes.After: {
                            repeatControl.enable(i1.formControlOptions);
                            endDateControl.disable(i1.formControlOptions);
                            break;
                        }
                        case i1.EndTypes.On: {
                            endDateControl.enable(i1.formControlOptions);
                            repeatControl.disable(i1.formControlOptions);
                            break;
                        }
                        case i1.EndTypes.Never:
                        default: {
                            endDateControl.disable(i1.formControlOptions);
                            repeatControl.disable(i1.formControlOptions);
                            break;
                        }
                    }
                });
            }
        };
        ScheduleComponent.prototype.processPaymentServiceValueChanges = function () {
            var _this = this;
            if (!this.scheduleForm)
                return;
            var startDateControl = this.scheduleForm.controls['startDate'];
            var paymentServiceControl = this.scheduleForm.controls['paymentService'];
            var paymentServiceDateControl = this.scheduleForm.controls['paymentServiceDate'];
            var frequencyControl = this.scheduleForm.controls['frequency'];
            var disableStartDate = function () { return frequencyControl.value === i1.FrequencyKeys.Once && startDateControl.disable(i1.formControlOptions); };
            if (startDateControl && paymentServiceControl && paymentServiceDateControl && frequencyControl) {
                paymentServiceControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (value) {
                    if (value.index === i1.PaymentServicesTypes.Other) {
                        startDateControl.enable(i1.formControlOptions);
                        paymentServiceDateControl.disable(i1.formControlOptions);
                    }
                    else {
                        paymentServiceDateControl.enable(i1.formControlOptions);
                        disableStartDate();
                        paymentServiceDateControl.setValue(_this.getEstimatedStartDate(value.service.paymentServiceType));
                    }
                });
            }
        };
        ScheduleComponent.prototype.processFrequencyValueChanges = function () {
            if (!this.scheduleForm)
                return;
            var endTypeControl = this.scheduleForm.controls['endType'];
            var endDateControl = this.scheduleForm.controls['endDate'];
            var repeatControl = this.scheduleForm.controls['repeat'];
            var startDateControl = this.scheduleForm.controls['startDate'];
            var paymentServiceControl = this.scheduleForm.controls['paymentService'];
            var frequencyControl = this.scheduleForm.controls['frequency'];
            var paymentServiceDateControl = this.scheduleForm.controls['paymentServiceDate'];
            if (startDateControl && frequencyControl && paymentServiceControl && endTypeControl && endDateControl) {
                frequencyControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (value) {
                    if (value === i1.FrequencyKeys.Once) {
                        paymentServiceControl.enable(i1.formControlOptions);
                        paymentServiceControl.updateValueAndValidity();
                        paymentServiceDateControl.enable(i1.formControlOptions);
                        endDateControl.disable(i1.formControlOptions);
                        endTypeControl.disable(i1.formControlOptions);
                        repeatControl.disable(i1.formControlOptions);
                    }
                    else {
                        paymentServiceControl.disable(i1.formControlOptions);
                        paymentServiceDateControl.disable(i1.formControlOptions);
                        startDateControl.enable(i1.formControlOptions);
                        endDateControl.enable(i1.formControlOptions);
                        repeatControl.enable(i1.formControlOptions);
                        endTypeControl.enable();
                    }
                });
            }
        };
        ScheduleComponent.prototype.getEstimatedStartDate = function (serviceType) {
            var services = this.paymentServiceRadios && this.paymentServiceRadios.map(function (item) { return item.service; });
            return this.scheduleService.estimatedPaymentServiceDate(services, serviceType);
        };
        ScheduleComponent.prototype.getEstimatedEndDate = function () {
            var startDate = this.scheduleForm && this.scheduleForm.controls['startDate'].value;
            var occurrences = this.scheduleForm && this.scheduleForm.controls['repeat'].value;
            var freq = this.scheduleForm && this.scheduleForm.controls['frequency'].value;
            return startDate && this.scheduleService.estimatedEndDate(startDate, freq, occurrences);
        };
        ScheduleComponent.prototype.getEstimatedOccurs = function () {
            var startDate = this.scheduleForm && this.scheduleForm.controls['startDate'].value;
            var endDate = this.scheduleForm && this.scheduleForm.controls['endDate'].value;
            var freq = this.scheduleForm && this.scheduleForm.controls['frequency'].value;
            return (startDate && this.scheduleService.estimatedOccurences(startDate, endDate, freq)) || 0;
        };
        ScheduleComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        return ScheduleComponent;
    }());
    ScheduleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ScheduleComponent, deps: [{ token: i1__namespace$1.BillpayPaymentScheduleService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ScheduleComponent, selector: "bb-schedule-ui", inputs: { frequencies: "frequencies", minOccurs: "minOccurs", maxOccurs: "maxOccurs", scheduleForm: "scheduleForm", minDate: "minDate", defaultPaymentServiceType: "defaultPaymentServiceType", formSubmitted: "formSubmitted", paymentServices: "paymentServices" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div [formGroup]=\"scheduleForm\" class=\"bb-block bb-block--md\">\n  <div class=\"bb-form-field bb-form-field--md bb-block bb-block--md\" *ngIf=\"frequencies?.length\">\n    <label\n      data-role=\"frequency-label\"\n      class=\"form-label\"\n      i18n=\"\n        Schedule frequency label|Label for a frequency dropdown in the component@@billpay.bb-schedule-ui.label.frequency\"\n    >\n      Frequency\n    </label>\n    <bb-dropdown-single-select-ui data-role=\"frequency-dropdown\" aria-label=\"frequency\" formControlName=\"frequency\">\n      <bb-dropdown-single-select-option-ui\n        *ngFor=\"let frequency of frequencies\"\n        [value]=\"frequency.value\"\n        [label]=\"frequency.name\"\n      ></bb-dropdown-single-select-option-ui>\n    </bb-dropdown-single-select-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency !== frequencyValues.Once\">\n    <label\n      data-role=\"payment-date-label\"\n      class=\"bb-label\"\n      i18n=\"\n        Schedule once payment section name|Label for the section containing inputs that determine way of once payment\n        the scheduled payments@@billpay.bb-schedule-ui.label.once-date\"\n    >\n      Execution date\n    </label>\n    <bb-input-radio-group-ui\n      data-role=\"once-payment-group\"\n      formControlName=\"paymentService\"\n      [required]=\"true\"\n      aria-label=\"once-date-type\"\n    >\n      <bb-input-radio-ui\n        *ngFor=\"let radio of paymentServiceRadios\"\n        [value]=\"radio\"\n        aria-invalid=\"false\"\n        [labelTemplate]=\"radio.index !== 'OTHER' ? paymentServiceLabelTemplate : paymentServiceOtherLabelTemplate\"\n      >\n        <ng-template #paymentServiceLabelTemplate>\n          <div class=\"bb-text-align-left\">\n            <div>\n              <span\n                data-role=\"payment-option\"\n                i18n=\"Service label list|Radio Label@@billpay.bb-input-radio-ui.radio.label.once-date.service\"\n              >\n                { radio.service.paymentServiceType, select, REGULAR_PAYMENT {Earliest free delivery} EXPEDITED_PAYMENT\n                {Rush payment} OVERNIGHT_CHECK {Overnight check} }\n              </span>\n              <span\n                *ngIf=\"\n                  radio.service.paymentServiceType === paymentServicesTypes.Expedited ||\n                  radio.service.paymentServiceType === paymentServicesTypes.Overnight\n                \"\n                i18n=\"\n                  Service label fee text|Radio Label fee@@billpay.bb-input-radio-ui.radio.label.once-date.service.fee\"\n                >&nbsp;-&nbsp;{{\n                  radio.service.fee.amount | currency: radio.service.fee.currencyCode:'symbol-narrow'\n                }}&nbsp;fee</span\n              >\n            </div>\n            <div\n              data-role=\"delivery-by\"\n              class=\"bb-text-support bb-subtitle\"\n              i18n=\"\n                Service label subtext|Radio Label\n                subtext@@billpay.bb-input-radio-ui.radio.label.once-date.service.subtext\"\n            >\n              Delivery by {{ getEstimatedStartDate(radio.service.paymentServiceType) | date: 'longDate' }}\n            </div>\n          </div>\n        </ng-template>\n        <ng-template #paymentServiceOtherLabelTemplate>\n          <div class=\"bb-stack\">\n            <span\n              class=\"bb-stack__item bb-text-bold\"\n              id=\"billpay-schedule-other-date-{{ id }}\"\n              i18n=\"Other date|Radio Label@@billpay.bb-input-radio-ui.radio.label.once-date.other\"\n              data-role=\"other-date-label\"\n              >Other date</span\n            >\n            <span class=\"bb-stack__item\">\n              <bb-input-datepicker-ui\n                (click)=\"$event.preventDefault()\"\n                formControlName=\"startDate\"\n                [minDate]=\"minDate\"\n                data-role=\"once-start-date-calendar\"\n                aria-label=\"start-date\"\n                placement=\"top-right\"\n                aria-labelledby=\"billpay-schedule-other-date-{{ id }}\"\n                [datepickerDescribedby]=\"'billpay-schedule-other-date-describe-{{ id }}'\"\n              ></bb-input-datepicker-ui>\n              <bb-input-validation-message-ui\n                role=\"alert\"\n                id=\"'billpay-schedule-other-date-describe-{{ id }}'\"\n                [showErrors]=\"scheduleForm?.get('startDate')?.invalid && formSubmitted\"\n              >\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n                  i18n=\"\n                    Execution date required error text|Error required message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.required.startDate\"\n                  data-role=\"missing-schedule-execution-date\"\n                >\n                  Execution date is required.\n                </span>\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.pastDate\"\n                  i18n=\"\n                    Execution date past date error text |Error past date message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.pastDate.startDate\"\n                  data-role=\"past-date-schedule-execution-date\"\n                >\n                  Execution date cannot be before delivery date.\n                </span>\n                <span\n                  *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n                  i18n=\"\n                    Execution date invalid date error text |Error invalid date format message for Execution date input\n                    field@@billpay.bb-schedule-ui.error.invalidDateFormat\"\n                  data-role=\"invalid-date-schedule-execution-date\"\n                >\n                  Invalid date format.\n                </span>\n              </bb-input-validation-message-ui>\n            </span>\n          </div>\n        </ng-template>\n      </bb-input-radio-ui>\n    </bb-input-radio-group-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" *ngIf=\"item?.frequency !== frequencyValues.Once\">\n    <label id=\"{{ startDateLabelId }}\" class=\"bb-text-bold\">\n      <span\n        *ngIf=\"true\"\n        id=\"billpay-schedule-start-date-{{ id }}\"\n        i18n-label=\"\n          Schedule start label|Label for an start date in scheduling component@@billpay.bb-schedule-ui.label.start\"\n        data-role=\"start-date-label\"\n      >\n        Start on\n      </span>\n    </label>\n    <div class=\"bb-form-field bb-form-field--sm\">\n      <bb-input-datepicker-ui\n        [aria-labelledby]=\"startDateLabelId\"\n        formControlName=\"startDate\"\n        [minDate]=\"minDate\"\n        data-role=\"start-date-calendar\"\n        aria-labelledby=\"billpay-schedule-start-date-{{ id }}\"\n        [datepickerDescribedby]=\"'billpay-schedule-start-date-error-{{ id }}'\"\n      ></bb-input-datepicker-ui>\n    </div>\n\n    <bb-input-validation-message-ui\n      id=\"'billpay-schedule-start-date-error-{{ id }}'\"\n      role=\"alert\"\n      [showErrors]=\"scheduleForm?.get('startDate')?.invalid && formSubmitted\"\n    >\n      <span\n        *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n        i18n=\"\n          Execution date required error text|Error required message for Execution date input\n          field@@billpay.bb-schedule-ui.error.required.startDate\"\n        data-role=\"missing-schedule-execution-date\"\n      >\n        Execution date is required.\n      </span>\n      <span\n        *ngIf=\"\n          scheduleForm?.get('startDate')?.errors?.pastDate ||\n          scheduleForm?.get('startDate')?.errors?.dateLessThanMinDate\n        \"\n        i18n=\"\n          Execution date past date error text |Error past date message for Execution date input\n          field@@billpay.bb-schedule-ui.error.pastDate.startDate\"\n        data-role=\"past-date-schedule-execution-date\"\n      >\n        Execution date cannot be before delivery date.\n      </span>\n      <span\n        *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n        i18n=\"\n          Execution date invalid date error text |Error invalid date format message for Execution date input\n          field@@billpay.bb-schedule-ui.error.invalidDateFormat\"\n        data-role=\"invalid-date-schedule-execution-date\"\n      >\n        Invalid date format.\n      </span>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency == frequencyValues.Once\">\n    <label\n      id=\"{{ endingLabelId }}\"\n      data-role=\"ending-label\"\n      class=\"bb-label\"\n      i18n=\"\n        Schedule ending section name|Label for the section containing inputs that determine way of ending of the\n        scheduled payments@@billpay.bb-schedule-ui.label.ending\"\n    >\n      End\n    </label>\n    <div class=\"bb-stack bb-stack--align-bottom\">\n      <div class=\"bb-stack__item\">\n        <bb-input-radio-group-ui [required]=\"true\" formControlName=\"endType\">\n          <bb-input-radio-ui\n            [value]=\"endTypes.Never\"\n            label=\"Never\"\n            aria-invalid=\"false\"\n            i18n-label=\"\n              Schedule never ends|Label for an option to never end the payment\n              schedule@@billpay.bb-schedule-ui.label.ending.never\"\n          >\n          </bb-input-radio-ui>\n          <bb-input-radio-ui [value]=\"endTypes.On\" aria-invalid=\"false\" [labelTemplate]=\"endingTemplate\">\n          </bb-input-radio-ui>\n          <bb-input-radio-ui [value]=\"endTypes.After\" aria-invalid=\"false\" [labelTemplate]=\"afterTemplate\">\n          </bb-input-radio-ui>\n          <ng-template #endingTemplate>\n            <div class=\"bb-stack\">\n              <span\n                data-role=\"ending-date-on-label\"\n                class=\"bb-stack__item bb-stack__item--spacing-lg\"\n                id=\"billpay-schedule-end-date-on-{{ id }}\"\n                i18n=\"\n                  Schedule end date|Label for an option to end the payment schedule on a specific\n                  date@@billpay.bb-schedule-ui.label.ending.on\"\n                >On</span\n              >\n              <div class=\"bb-stack__item\">\n                <bb-input-datepicker-ui\n                  formControlName=\"endDate\"\n                  data-role=\"ending-end-date\"\n                  i18n-aria-label=\"\n                    Schedule end date datepicker label|Aria label for end date payment schedule\n                    control@@billpay.bb-schedule-ui.label.end-date\"\n                  aria-label=\"end-date\"\n                  [minDate]=\"scheduleForm?.get('startDate')?.value\"\n                  placement=\"top-right\"\n                  aria-labelledby=\"billpay-schedule-end-date-on-{{ id }}\"\n                ></bb-input-datepicker-ui>\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  *ngIf=\"scheduleForm?.get('endDate') as control\"\n                  [showErrors]=\"control?.invalid && formSubmitted\"\n                >\n                  <span\n                    *ngIf=\"control?.errors?.pastDate || control?.errors?.dateLessThanMinDate\"\n                    i18n=\"\n                      End date past date error text |Error past date message for End date input\n                      field@@billpay.bb-schedule-ui.end-date.past-date-error\"\n                    data-role=\"past-date-ending-end-date\"\n                  >\n                    End date could not be lower than start date.\n                  </span>\n                  <span\n                    *ngIf=\"control?.errors?.invalidDateFormat\"\n                    i18n=\"\n                      End date invalid date error text |Error invalid date format message for End date input\n                      field@@billpay.bb-schedule-ui.end-date.invalid-date-format-error\"\n                    data-role=\"invalid-date-schedule-end-date\"\n                  >\n                    Invalid date format.\n                  </span>\n                  <span\n                    *ngIf=\"control?.errors?.required\"\n                    i18n=\"\n                      End date invalid date error text |Date is required for End date input\n                      field@@billpay.bb-schedule-ui.end-date.date-required-error\"\n                    data-role=\"required-date-schedule-end-date\"\n                  >\n                    End date is required.\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </ng-template>\n          <ng-template #afterTemplate>\n            <div class=\"bb-stack\">\n              <span\n                class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                i18n=\"\n                  Schedule number of occurrences|Label for an option to end the payment schedule after some number of\n                  occurrences@@billpay.bb-schedule-ui.label.ending.after\"\n              >\n                After\n              </span>\n              <div class=\"bb-stack__item\">\n                <div class=\"bb-stack\">\n                  <div class=\"bb-stack__item bb-form-field bb-form-field--xs\">\n                    <bb-input-number-ui\n                      formControlName=\"repeat\"\n                      [min]=\"minOccurs\"\n                      [max]=\"maxOccurs\"\n                      data-role=\"ending-occurrences\"\n                      aria-label=\"occurrences\"\n                    ></bb-input-number-ui>\n                  </div>\n                  <span\n                    class=\"bb-stack__item\"\n                    i18n-label=\"\n                      Schedule occurrences text|Text to be appended after schedule end after some number of occurrences\n                      input@@billpay.bb-schedule-ui.label.ending.occurrences\"\n                  >\n                    Occurrences\n                  </span>\n                </div>\n              </div>\n            </div>\n          </ng-template>\n        </bb-input-radio-group-ui>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"item?.frequency !== frequencyValues.Once && item?.endType !== endTypes.Never && item?.startDate\">\n    <bb-alert-ui modifier=\"info\" title=\"\">\n      <span class=\"bb-text-bold\" *ngIf=\"item?.endType === endTypes.After\" data-role=\"estimated-end-date-label\">\n        <span\n          i18n=\"Estimated end date|Label for estimated end date section@@billpay.bb-schedule-ui.label.estimated.date\"\n        >\n          Estimated end date {{ getEstimatedEndDate() | date: 'longDate' }}\n        </span>\n      </span>\n      <span class=\"bb-text-bold\" *ngIf=\"item?.endType === endTypes.On\">\n        <ng-container\n          i18n=\"\n            Estimated payment in total|Label for estimated payment in total\n            section@@billpay.bb-schedule-ui.label.estimated.occurs\"\n        >\n          { getEstimatedOccurs(), plural, =1 { {{ getEstimatedOccurs() }} payment in total } other {\n          {{ getEstimatedOccurs() }} payments in total }}\n        </ng-container>\n      </span>\n    </bb-alert-ui>\n  </div>\n  <div class=\"bb-block bb-block--md\" [hidden]=\"item?.frequency == frequencyValues.Once\">\n    <label\n      data-role=\"notify-me-label\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        Notify me section name|Label for the section notify containing checkboxes @@billpay.bb-schedule-ui.label.notify\"\n    >\n      Notify me\n    </label>\n    <div>\n      <div class=\"bb-block bb-block--xs\">\n        <bb-input-checkbox-ui\n          [id]=\"'alertPendingCheckbox'\"\n          label=\"When a payment is pending\"\n          i18n-label=\"When a payment is pending|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.pending\"\n          formControlName=\"alertPendingCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n      <div class=\"bb-block bb-block--xs\">\n        <bb-input-checkbox-ui\n          [id]=\"'alertSentCheckbox'\"\n          label=\"When a payment has been sent\"\n          i18n-label=\"When a payment has been sent|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.sent\"\n          formControlName=\"alertSentCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n      <div>\n        <bb-input-checkbox-ui\n          [id]=\"'alertLastPendingCheckbox'\"\n          label=\"When the last payment is pending\"\n          i18n-label=\"When the last payment is pending|Checkbox Label@@bb-input-checkbox-ui.checkbox.label.last-pending\"\n          formControlName=\"alertLastPendingCheckbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2__namespace$1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2__namespace$1.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i2__namespace.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2__namespace.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i4__namespace$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i5__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6__namespace.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i8__namespace$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i1__namespace$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4__namespace$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }], pipes: { "currency": i4__namespace.CurrencyPipe, "date": i4__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ScheduleComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-schedule-ui',
                        templateUrl: './schedule.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.BillpayPaymentScheduleService }]; }, propDecorators: { frequencies: [{
                    type: i0.Input
                }], minOccurs: [{
                    type: i0.Input
                }], maxOccurs: [{
                    type: i0.Input
                }], scheduleForm: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], defaultPaymentServiceType: [{
                    type: i0.Input
                }], formSubmitted: [{
                    type: i0.Input
                }], paymentServices: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentFormComponent = /** @class */ (function () {
        /** @internal */
        function BillpayPaymentFormComponent(fb, scheduleService) {
            this.fb = fb;
            this.scheduleService = scheduleService;
            /**
             * Identifier for the payee that is currently selected to be paid from.
             */
            this.selectedPayeeId = '';
            /**
             * Identifier for the payment when the form is an edit payment.
             */
            this.paymentId = '';
            /**
             * Whether the account number should be masked. Defaults to true.
             */
            this.accountNumberMask = true;
            /**
             * Activates edit payment elements. Defaults to false.
             */
            this.isEditPayment = false;
            /**
             * get the payment details title preference. default to 'Payment details'.
             */
            this.paymentDetailsTitle = 'Payment details';
            /**
             * get the payment default currency preference. default to 'USD'.
             */
            this.paymentDefaultCurrency = 'USD';
            this.submitPayment = new i0.EventEmitter();
            this.cancelPayment = new i0.EventEmitter();
            this.valueChanged = new i0.EventEmitter();
            /**
             * Payment form group
             */
            this.paymentForm = this.fb.group({});
            /**
             * Flag to display if payment is submitted
             */
            this.formSubmitted = false;
            this.minDate$ = new rxjs.BehaviorSubject(this.scheduleService.today);
            this.selectedAccount$ = new rxjs.BehaviorSubject(undefined);
            this.selectedPayee$ = new rxjs.BehaviorSubject(undefined);
            this.destroy$ = new rxjs.Subject();
            /**
             * Maximum occurrences for the number of occurrences input box.
             */
            this.maxOccurs = 999;
            /**
             * Minimum occurrences for the number of occurrences input box.
             */
            this.minOccurs = 1;
            /**
             * unique key used for ids
             */
            this.id = i1.BillpayUtilityService.generateId();
        }
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "frequencies", {
            get: function () {
                var isEditRecurring = this.isEditPayment && this.paymentType === i1.RECURRING_PAYMENT;
                var usableFrequencies = this._frequencies ? this._frequencies : i1.frequencies;
                return isEditRecurring ? usableFrequencies.filter(function (freq) { return freq.value !== i1.FrequencyKeys.Once; }) : usableFrequencies;
            },
            set: function (value) {
                this._frequencies = value;
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.defaultAmount = {
                amount: '',
                currency: this.paymentDefaultCurrency,
                type: undefined,
            };
            this.selectedAccount$.next(this.defaultAccountFrom);
            this.selectedPayee$.next(this.defaultPayeeTo);
            if (this.defaultPayeeTo) {
                this.ebillSummary = this.defaultPayeeTo.ebill;
            }
            this.minDate$.next(this.scheduleService.estimatedPaymentServiceDate(this.defaultPayeeTo && this.defaultPayeeTo.paymentServices, i1.PaymentServicesTypes.Regular));
            this.createForm();
            this.proccessPaymentServiceValueChanges();
            this.proccessFrequencyValueChanges();
            this.paymentForm.valueChanges.pipe(operators.takeUntil(this.destroy$), operators.take(1)).subscribe(function () {
                _this.valueChanged.emit();
            });
        };
        BillpayPaymentFormComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                if (_this.fromAccount) {
                    _this.fromAccount.dropdownToggle.nativeElement.focus();
                }
            });
        };
        BillpayPaymentFormComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        BillpayPaymentFormComponent.prototype.cancel = function () {
            this.cancelPayment.emit();
        };
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "defaultPaymentServiceType", {
            get: function () {
                var payee = this.selectedPayee$.getValue();
                return ((this.paymentState &&
                    payee &&
                    this.paymentState.payeeTo.id === payee.id &&
                    this.paymentState.schedule &&
                    this.paymentState.schedule.paymentService &&
                    this.paymentState.schedule.paymentService.index) || i1.PaymentServicesTypes.Regular);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "accountNumberFormatConfig", {
            get: function () {
                return this.accountNumberMask ? i1.accountNumberMaskedFormat : i1.accountNumberFullFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "ebillPayment", {
            get: function () {
                return !!(!this.isEditPayment &&
                    this.ebillSummary &&
                    this.ebillSummary.latestBill &&
                    this.ebillSummary.latestBill.status === 'UNPAID' &&
                    (!this.ebillSummary.status || this.ebillSummary.status === 'ACTIVE'));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "frequencyKeys", {
            get: function () {
                return i1.FrequencyKeys;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "schedule", {
            get: function () {
                var _a;
                return (_a = this.paymentForm) === null || _a === void 0 ? void 0 : _a.controls['schedule'].value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "amountGroup", {
            get: function () {
                var _a;
                return (_a = this.paymentForm) === null || _a === void 0 ? void 0 : _a.get('amount');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "startDateControl", {
            get: function () {
                return this.paymentForm.get('schedule.startDate');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "endDateControl", {
            get: function () {
                return this.paymentForm.get('schedule.endDate');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "scheduleLabelData", {
            get: function () {
                var schedule = this.schedule;
                return Object.assign(Object.assign({}, schedule), { endDate: schedule.endType === i1.EndTypes.On ? schedule.endDate : undefined, repeat: schedule.endType === i1.EndTypes.After ? schedule.repeat : undefined });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "defaultAccountFrom", {
            get: function () {
                var _a;
                return this.paymentState && this.paymentState.accountFrom ? this.paymentState.accountFrom : (_a = this.accounts) === null || _a === void 0 ? void 0 : _a[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "defaultPayeeTo", {
            get: function () {
                var _this = this;
                var _a;
                return ((_a = this.paymentState) === null || _a === void 0 ? void 0 : _a.payeeTo)
                    ? this.paymentState.payeeTo
                    : this.payeeSummaries && this.payeeSummaries.find(function (acc) { return acc.id === _this.selectedPayeeId; });
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentFormComponent.prototype.getOvernightAddress = function (payee) {
            return (this.hasOvernightCheck(payee.paymentServices) && payee.overnightDeliveryAddress) || undefined;
        };
        BillpayPaymentFormComponent.prototype.hasOvernightCheck = function (services) {
            return !!(services === null || services === void 0 ? void 0 : services.find(function (item) { return item.paymentServiceType === i1.PaymentServicesTypes.Overnight; }));
        };
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "defaultOvernightAddressState", {
            get: function () {
                var payee = this.selectedPayee$.getValue() || {};
                var address = this.getOvernightAddress(payee) || {};
                return {
                    address1: address.address1 || '',
                    address2: address.address2 || '',
                    city: address.city || '',
                    state: address.state,
                    postalCode: address.postalCode || '',
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormComponent.prototype, "defaultFormState", {
            get: function () {
                var _this = this;
                var payee = this.selectedPayee$.getValue() || {};
                var paymentPayeeService = payee.paymentServices &&
                    payee.paymentServices.find(function (item) { return item.paymentServiceType === _this.defaultPaymentServiceType; });
                var paymentPayeeServiceDate = !this.paymentState || this.paymentState.schedule.frequency === this.frequencyKeys.Once
                    ? payee.paymentServices &&
                        this.scheduleService.estimatedPaymentServiceDate(payee.paymentServices, this.defaultPaymentServiceType)
                    : undefined;
                var _d = this.paymentState || {}, paymentId = _d.paymentId, _e = _d.accountFrom, accountFrom = _e === void 0 ? this.selectedAccount$.getValue() || {} : _e, _f = _d.payeeTo, payeeTo = _f === void 0 ? payee : _f, _g = _d.amount, amount = _g === void 0 ? this.defaultAmount : _g, _h = _d.memo, memo = _h === void 0 ? '' : _h, _j = _d.overnightDeliveryAddress, overnightDeliveryAddress = _j === void 0 ? this.defaultOvernightAddressState : _j, _k = _d.schedule, _l = _k === void 0 ? {} : _k, _m = _l.frequency, frequency = _m === void 0 ? this.findDefaultFrequency() : _m, _o = _l.startDate, startDate = _o === void 0 ? this.minDate$.getValue() : _o, _p = _l.endDate, endDate = _p === void 0 ? this.minDate$.getValue() : _p, _q = _l.repeat, repeat = _q === void 0 ? 1 : _q, _r = _l.endType, endType = _r === void 0 ? i1.EndTypes.Never : _r, _s = _l.paymentService, paymentService = _s === void 0 ? this.getDefaultPaymentService(paymentPayeeService) : _s, _t = _l.paymentServiceDate, paymentServiceDate = _t === void 0 ? paymentPayeeServiceDate : _t, _u = _l.alertPendingCheckbox, alertPendingCheckbox = _u === void 0 ? false : _u, _v = _l.alertSentCheckbox, alertSentCheckbox = _v === void 0 ? false : _v, _w = _l.alertLastPendingCheckbox, alertLastPendingCheckbox = _w === void 0 ? false : _w;
                return {
                    paymentId: paymentId,
                    accountFrom: accountFrom,
                    payeeTo: payeeTo,
                    amount: amount,
                    memo: memo,
                    overnightDeliveryAddress: overnightDeliveryAddress,
                    schedule: {
                        frequency: frequency,
                        startDate: startDate,
                        endDate: endDate,
                        repeat: repeat,
                        endType: endType,
                        paymentService: paymentService,
                        paymentServiceDate: paymentServiceDate,
                        alertPendingCheckbox: alertPendingCheckbox,
                        alertSentCheckbox: alertSentCheckbox,
                        alertLastPendingCheckbox: alertLastPendingCheckbox,
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentFormComponent.prototype.proccessPaymentServiceValueChanges = function () {
            var paymentServiceControl = this.paymentForm.get('schedule.paymentService');
            var overnightAddressControl = this.paymentForm.controls['overnightDeliveryAddress'];
            if (paymentServiceControl && overnightAddressControl) {
                paymentServiceControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (val) {
                    if (val.service.paymentServiceType === i1.PaymentServicesTypes.Overnight) {
                        overnightAddressControl.enable(i1.formControlOptions);
                    }
                    else {
                        overnightAddressControl.disable(i1.formControlOptions);
                    }
                });
            }
        };
        BillpayPaymentFormComponent.prototype.proccessFrequencyValueChanges = function () {
            var frequencyControl = this.paymentForm.get('schedule.frequency');
            var overnightAddressControl = this.paymentForm.controls['overnightDeliveryAddress'];
            if (frequencyControl && overnightAddressControl) {
                frequencyControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (val) {
                    if (val.value !== i1.FrequencyKeys.Once) {
                        overnightAddressControl.disable(i1.formControlOptions);
                    }
                });
            }
        };
        BillpayPaymentFormComponent.prototype.createOvernightAddressFormGroup = function () {
            var overnightAddress = this.defaultFormState.overnightDeliveryAddress || {};
            var paymentService = this.defaultFormState.schedule.paymentService;
            var isOvernightAddressDisabled = !paymentService ||
                !paymentService.service ||
                !paymentService.service.paymentServiceType ||
                paymentService.service.paymentServiceType !== i1.PaymentServicesTypes.Overnight;
            return this.fb.group({
                address1: [
                    {
                        value: overnightAddress.address1,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
                address2: [
                    {
                        value: overnightAddress.address2,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
                city: [
                    {
                        value: overnightAddress.city,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
                state: [
                    {
                        value: overnightAddress.state,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
                postalCode: [
                    {
                        value: overnightAddress.postalCode,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
            });
        };
        BillpayPaymentFormComponent.prototype.createScheduleFormGroup = function () {
            var initState = this.defaultFormState;
            var paymentService = initState.schedule.paymentService;
            var isEndDateDisabled = initState.schedule.endType !== i1.EndTypes.On;
            var isRepeatDisabled = initState.schedule.endType !== i1.EndTypes.After;
            var isStartDateDisabled = !!(paymentService &&
                paymentService.index !== i1.PaymentServicesTypes.Other &&
                initState.schedule.frequency === this.frequencyKeys.Once);
            //@TODO Replace startDate, endDate validators after fix angular issues
            //https://github.com/angular/angular/issues/13461#issuecomment-502674629
            //https://github.com/angular/angular/issues/10567
            return this.fb.group({
                frequency: [initState.schedule.frequency],
                startDate: [
                    {
                        value: this.scheduleService.getLocalISODate(initState.schedule.startDate),
                        disabled: isStartDateDisabled,
                    },
                    [i1$2.Validators.required, this.minDateValidator(this.minDate$.getValue())],
                ],
                endDate: [
                    {
                        value: this.scheduleService.getLocalISODate(initState.schedule.endDate),
                        disabled: isEndDateDisabled,
                    },
                    [i1$2.Validators.required, this.minDateValidator(this.minDate$.getValue())],
                ],
                repeat: [{ value: initState.schedule.repeat, disabled: isRepeatDisabled }],
                endType: [initState.schedule.endType],
                paymentService: [initState.schedule.paymentService],
                paymentServiceDate: [
                    {
                        value: initState.schedule.paymentServiceDate,
                        disabled: !isStartDateDisabled,
                    },
                ],
                alertPendingCheckbox: [initState.schedule.alertPendingCheckbox],
                alertSentCheckbox: [initState.schedule.alertSentCheckbox],
                alertLastPendingCheckbox: [initState.schedule.alertLastPendingCheckbox],
            });
        };
        BillpayPaymentFormComponent.prototype.createForm = function () {
            var _a;
            var initState = this.defaultFormState;
            var amount = ((_a = initState.amount.amount) === null || _a === void 0 ? void 0 : _a.toString()) || undefined;
            this.paymentForm = this.fb.group({
                paymentId: [this.paymentId],
                accountFrom: [initState.accountFrom],
                payeeTo: [initState.payeeTo],
                amount: this.fb.group({
                    amount: [amount],
                    currency: [initState.amount.currency],
                    type: [initState.amount.type],
                }),
                memo: [initState.memo],
                overnightDeliveryAddress: this.createOvernightAddressFormGroup(),
                schedule: this.createScheduleFormGroup(),
            });
            this.setValidators();
        };
        BillpayPaymentFormComponent.prototype.amountValidator = function (control) {
            if (!control.value.amount || +control.value.amount <= 0) {
                return {
                    amountInvalid: false,
                };
            }
            else {
                // eslint-disable-next-line no-null/no-null
                return null;
            }
        };
        BillpayPaymentFormComponent.prototype.isInvalidControl = function (control) {
            return this.formSubmitted && control.invalid && control.touched;
        };
        BillpayPaymentFormComponent.prototype.minDateValidator = function (minDate) {
            return function (fg) {
                if (!fg.value) {
                    // eslint-disable-next-line no-null/no-null
                    return null;
                }
                if (new Date(fg.value).setHours(0, 0, 0, 0) < new Date(minDate).setHours(0, 0, 0, 0)) {
                    return {
                        pastDate: true,
                    };
                }
                else {
                    // eslint-disable-next-line no-null/no-null
                    return null;
                }
            };
        };
        BillpayPaymentFormComponent.prototype.notEmptyObjectValidator = function (control) {
            // eslint-disable-next-line no-null/no-null
            return Object.keys(control.value).length ? null : { notEmptyObject: false };
        };
        BillpayPaymentFormComponent.prototype.processFormData = function (data) {
            switch (data.schedule.endType) {
                case i1.EndTypes.After:
                    return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { endDate: new Date(this.scheduleService.estimatedEndDate(data.schedule.startDate, data.schedule.frequency, data.schedule.repeat)).toISOString() }) });
                case i1.EndTypes.On:
                    return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { repeat: this.scheduleService.estimatedOccurences(data.schedule.startDate, data.schedule.endDate || data.schedule.startDate, data.schedule.frequency) }) });
                default:
                    return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), (!data.schedule.startDate &&
                            this.defaultFormState.schedule.startDate && { startDate: this.defaultFormState.schedule.startDate })) });
            }
        };
        BillpayPaymentFormComponent.prototype.setValidators = function () {
            var _this = this;
            [
                ['accountFrom', [this.notEmptyObjectValidator]],
                ['payeeTo', [this.notEmptyObjectValidator]],
                ['amount', [i1$2.Validators.required, this.amountValidator]],
                ['schedule.repeat', [i1$2.Validators.required, i1$2.Validators.min(this.minOccurs), i1$2.Validators.max(this.maxOccurs)]],
                ['overnightDeliveryAddress.address1', [i1$2.Validators.required, i1$2.Validators.maxLength(40)]],
                ['overnightDeliveryAddress.address2', [i1$2.Validators.maxLength(40)]],
                ['overnightDeliveryAddress.city', [i1$2.Validators.required, i1$2.Validators.maxLength(32)]],
                ['overnightDeliveryAddress.state', [i1$2.Validators.required]],
                ['overnightDeliveryAddress.postalCode', [i1$2.Validators.required, i1$2.Validators.pattern(/^\d{5}(\d{4})?$/)]],
            ].forEach(function (_d) {
                var _e = __read(_d, 2), controlName = _e[0], validators = _e[1];
                var control = _this.paymentForm.get(controlName);
                if (control) {
                    control.setValidators(validators);
                    control.updateValueAndValidity();
                }
            });
        };
        BillpayPaymentFormComponent.prototype.handleSubmit = function () {
            if (!this.formSubmitted) {
                this.formSubmitted = true;
            }
            if (this.paymentForm.valid) {
                this.submitPayment.emit(this.processFormData(this.paymentForm.value));
            }
            this.paymentForm.markAllAsTouched();
        };
        BillpayPaymentFormComponent.prototype.selectAccount = function (account) {
            this.selectedAccount$.next(account);
            this.paymentForm.controls['accountFrom'].setValue(account);
        };
        BillpayPaymentFormComponent.prototype.setOvernightAddress = function (payee) {
            var control = this.paymentForm.controls['overnightDeliveryAddress'];
            if ((payee === null || payee === void 0 ? void 0 : payee.overnightDeliveryAddress) && this.hasOvernightCheck(payee.paymentServices)) {
                control.setValue({
                    address1: payee.overnightDeliveryAddress.address1,
                    address2: payee.overnightDeliveryAddress.address2 || '',
                    city: payee.overnightDeliveryAddress.city,
                    state: payee.overnightDeliveryAddress.state,
                    postalCode: payee.overnightDeliveryAddress.postalCode,
                });
            }
            else {
                control.reset();
            }
        };
        BillpayPaymentFormComponent.prototype.selectPayee = function (payee) {
            this.selectedPayee$.next(payee);
            this.paymentForm.controls['payeeTo'].setValue(payee);
            this.minDate$.next(this.scheduleService.estimatedPaymentServiceDate(payee && payee.paymentServices, i1.PaymentServicesTypes.Regular));
            if (this.startDateControl && this.endDateControl) {
                this.startDateControl.setValue(this.minDate$.getValue());
                this.endDateControl.setValue(this.minDate$.getValue());
            }
            this.setOvernightAddress(payee);
            if (payee) {
                this.ebillSummary = payee.ebill;
            }
            if (this.amountGroup) {
                this.amountGroup.patchValue({ amount: ' ', type: undefined });
            }
        };
        BillpayPaymentFormComponent.prototype.getDefaultPaymentService = function (paymentService) {
            return {
                index: this.isEditPayment && this.paymentType === i1.ONE_OFF_PAYMENT
                    ? i1.PaymentServicesTypes.Other
                    : (paymentService === null || paymentService === void 0 ? void 0 : paymentService.paymentServiceType) || '',
                service: paymentService,
            };
        };
        BillpayPaymentFormComponent.prototype.findDefaultFrequency = function () {
            var _a, _b, _c;
            var defaultFrequency;
            switch (this.paymentType) {
                case i1.ONE_OFF_PAYMENT: {
                    defaultFrequency = (_a = this.frequencies) === null || _a === void 0 ? void 0 : _a.find(function (item) { return item.value === i1.FrequencyKeys.Once; });
                    break;
                }
                case i1.RECURRING_PAYMENT: {
                    defaultFrequency = (_b = this.frequencies) === null || _b === void 0 ? void 0 : _b.find(function (item) { return item.value === i1.FrequencyKeys.Monthly; });
                    break;
                }
            }
            if (defaultFrequency === undefined) {
                defaultFrequency = ((_c = this.frequencies) === null || _c === void 0 ? void 0 : _c[0]) || { value: i1.FrequencyKeys.Once, name: '' };
            }
            return defaultFrequency.value;
        };
        return BillpayPaymentFormComponent;
    }());
    BillpayPaymentFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentFormComponent, deps: [{ token: i1__namespace$2.FormBuilder }, { token: i1__namespace$1.BillpayPaymentScheduleService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: { payeeSummaries: "payeeSummaries", accounts: "accounts", selectedPayeeId: "selectedPayeeId", paymentState: "paymentState", paymentId: "paymentId", accountNumberMask: "accountNumberMask", paymentType: "paymentType", isEditPayment: "isEditPayment", paymentDetailsTitle: "paymentDetailsTitle", paymentDefaultCurrency: "paymentDefaultCurrency", frequencies: "frequencies" }, outputs: { submitPayment: "submitPayment", cancelPayment: "cancelPayment", valueChanged: "valueChanged" }, viewQueries: [{ propertyName: "fromAccount", first: true, predicate: ["fromAccount"], descendants: true }], ngImport: i0__namespace, template: "<form data-role=\"payment-form\" [formGroup]=\"paymentForm\" (ngSubmit)=\"handleSubmit()\">\n  <!-- Payee To edit Label -->\n  <ng-container *ngIf=\"isEditPayment\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        *ngIf=\"selectedPayee$ | async as payee\"\n        data-role=\"payee-to-edit-header\"\n        headingType=\"h1\"\n        heading=\"Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }}\"\n        i18n-heading=\"Payment to|Payee to edit label@@billpay-manage-payment.payee-to.edit.header\"\n      ></bb-header-ui>\n    </div>\n  </ng-container>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <!-- Account From -->\n      <ng-container *ngTemplateOutlet=\"paymentFormAccountFrom\"> </ng-container>\n\n      <!-- Payee To -->\n      <ng-container *ngTemplateOutlet=\"paymentFormPayeeTo\"> </ng-container>\n\n      <!-- Payment details -->\n      <ng-container *ngTemplateOutlet=\"formDetails\"> </ng-container>\n\n      <!-- Payment overnight delivery address -->\n      <ng-container *ngTemplateOutlet=\"formOvernightAddress\"> </ng-container>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          i18n=\"Make payment button|Button text to make a payment@@bb-billpay-payment-form.button.submit\"\n          data-role=\"button-submit\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Continue\n        </button>\n        <button\n          bbButton\n          i18n=\"Make payment cancel button|Button text to make cancel a payment@@bb-billpay-payment-form.button.cancel\"\n          data-role=\"cancel-payment-button\"\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          (click)=\"cancel()\"\n          color=\"link\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n</form>\n\n<ng-template #paymentFormAccountFrom>\n  <bb-fieldset-ui class=\"bb-block bb-block--lg\" data-role=\"account-from-selected\">\n    <label\n      data-role=\"select-account-label\"\n      aria-live=\"polite\"\n      class=\"bb-label\"\n      i18n=\"From|From section title@@billpay-manage-payment.section.from\"\n    >\n      From\n    </label>\n    <bb-product-selector-ui #fromAccount>\n      <ng-container bbDropdownToggle *ngIf=\"selectedAccount$ | async as selectedAccount\">\n        <bb-product-item-basic-account-ui\n          *ngIf=\"selectedAccount\"\n          [title]=\"selectedAccount.accountNickName\"\n          [productNumber]=\"selectedAccount.accountNumber\"\n          [productNumberFormat]=\"accountNumberFormatConfig\"\n          [amount]=\"selectedAccount.accountBalance?.amount\"\n          [currency]=\"selectedAccount.accountBalance?.currencyCode\"\n          [highlight]=\"false\"\n          [active]=\"false\"\n          data-role=\"account-from-selected-toggle\"\n          class=\"bb-text-align-left\"\n        >\n        </bb-product-item-basic-account-ui>\n\n        <div\n          *ngIf=\"!selectedAccount\"\n          data-role=\"select-account-option\"\n          i18n-aria-label=\"\n            Account selector aria label|Aria label to show when no account is being\n            selected@@bb-billpay-manage-payment.account.placeholder.label\"\n          aria-label=\"Select a debit account\"\n          i18n=\"\n            Account selector placeholder|Text to show when no account is being\n            selected@@bb-billpay-manage-payment.payee.placeholder\"\n          class=\"bb-text-align-left\"\n        >\n          Select an account\n        </div>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          #listItem\n          bbButton\n          class=\"bb-product-selector__dropdown-item\"\n          color=\"unstyled\"\n          [block]=\"true\"\n          *ngFor=\"let account of accounts\"\n          (click)=\"selectAccount(account)\"\n          data-role=\"account-item\"\n        >\n          <bb-product-item-basic-account-ui\n            [title]=\"account.accountNickName\"\n            [productNumber]=\"account.accountNumber\"\n            [productNumberFormat]=\"accountNumberFormatConfig\"\n            [amount]=\"account.accountBalance?.amount\"\n            [currency]=\"account.accountBalance?.currencyCode\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n            class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\"\n            role=\"menuitem\"\n          >\n          </bb-product-item-basic-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n    <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"isInvalidControl(paymentForm?.get('accountFrom'))\">\n      <span\n        *ngIf=\"!paymentForm?.get('accountFrom')?.errors?.notEmptyObject\"\n        i18n=\"Account from required error message@@bb-billpay-payment-form.error.account-from\"\n        data-role=\"invalid-account-from\"\n        >Please select an account</span\n      >\n    </bb-input-validation-message-ui>\n  </bb-fieldset-ui>\n</ng-template>\n\n<ng-template #paymentFormPayeeTo>\n  <bb-fieldset-ui *ngIf=\"!isEditPayment\" data-role=\"payee-to-product-selector\" class=\"bb-block bb-block--lg\">\n    <label\n      data-role=\"select-payee-label\"\n      aria-live=\"polite\"\n      class=\"bb-label\"\n      i18n=\"To|To section title@@billpay-manage-payment.section.to\"\n    >\n      To\n    </label>\n    <bb-product-selector-ui>\n      <ng-container bbDropdownToggle>\n        <ng-container *ngIf=\"selectedPayee$ | async as selectedPayee; else selectPauee\">\n          <bb-product-item-current-account-ui\n            *ngIf=\"selectedPayee\"\n            [title]=\"selectedPayee.nickName || selectedPayee.name\"\n            [mainSectionTitle]=\"(selectedPayee.nickName && selectedPayee.name) || ''\"\n            [highlight]=\"false\"\n            data-role=\"payee-to-selected-toggle\"\n            [active]=\"false\"\n            class=\"bb-text-align-left\"\n          >\n            <ng-template bbCustomProductItemCurrentAccountMainSection let-mainSectionTitle=\"mainSectionTitle\">\n              <div>\n                <span class=\"bb-text-support bb-subtitle\">{{ mainSectionTitle }}</span>\n              </div>\n            </ng-template>\n          </bb-product-item-current-account-ui>\n        </ng-container>\n        <ng-template #selectPauee>\n          <div\n            data-role=\"select-payee-label\"\n            class=\"bb-text-align-left\"\n            i18n=\"\n              Payee selector placeholder|Text to show when no payee is being\n              selected@@bb-billpay-manage-payment.payee.placeholder\"\n          >\n            Select a payee\n          </div>\n        </ng-template>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          #listItem\n          bbButton\n          class=\"bb-product-selector__dropdown-item\"\n          color=\"unstyled\"\n          [block]=\"true\"\n          *ngFor=\"let payee of payeeSummaries\"\n          (click)=\"selectPayee(payee)\"\n          data-role=\"payee-item\"\n        >\n          <bb-product-item-current-account-ui\n            [title]=\"payee.nickName || payee.name\"\n            [mainSectionTitle]=\"(payee.nickName && payee.name) || ''\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n            class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\"\n            role=\"menuitem\"\n          >\n            <ng-template bbCustomProductItemCurrentAccountMainSection let-mainSectionTitle=\"mainSectionTitle\">\n              <div>\n                <span class=\"bb-text-support bb-subtitle\">\n                  {{ mainSectionTitle }}\n                </span>\n              </div>\n            </ng-template>\n          </bb-product-item-current-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n    <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"isInvalidControl(paymentForm?.get('payeeTo'))\">\n      <span\n        *ngIf=\"!paymentForm?.get('payeeTo')?.errors?.notEmptyObject\"\n        i18n=\"Payee to required error message@@bb-billpay-payment-form.error.payee-to\"\n        data-role=\"invalid-payee-to\"\n      >\n        Please select a payee\n      </span>\n    </bb-input-validation-message-ui>\n  </bb-fieldset-ui>\n</ng-template>\n\n<ng-template #formDetails>\n  <fieldset class=\"bb-fieldset\" data-role=\"payment-details-fieldset\" *ngIf=\"selectedPayee$ | async\">\n    <legend class=\"bb-fieldset__heading border-bottom\">\n      <div class=\"bb-block bb-block--sm\">\n        <span i18n=\"Payment details|text for the 'payment details' payment@@bb-billpay-payment-form.payment-details\">{{\n          paymentDetailsTitle\n        }}</span>\n        <span\n          *ngIf=\"ebillPayment\"\n          class=\"bb-text-support bb-text-default\"\n          i18n=\"\n            Payment description Due|text for the 'payment description'\n            payment@@bb-billpay-payment-form.payment-description\"\n        >\n          - { paymentForm?.get('amount')?.value?.type, select, Due { eBill due amount } Minimum { eBill minimum amount }\n          Balance { eBill total amount } other { eBill custom amount } }\n        </span>\n      </div>\n    </legend>\n    <div class=\"bb-block bb-block--md\" *ngIf=\"ebillPayment\">\n      <bb-billpay-ebill-payment\n        [control]=\"amountGroup\"\n        [eBillDefaultCurrency]=\"paymentDefaultCurrency\"\n        [latestBill]=\"ebillSummary?.latestBill\"\n        [isSubmitted]=\"formSubmitted\"\n      ></bb-billpay-ebill-payment>\n    </div>\n\n    <div class=\"bb-block bb-block--md\" [formGroup]=\"amountGroup\" *ngIf=\"!ebillPayment\">\n      <label\n        class=\"bb-label\"\n        data-role=\"payment-amount-label\"\n        for=\"{{ 'billpay-amount-input-' + id }}\"\n        i18n=\"Amount of payment|ext for the 'payment details' amount@@bb-billpay-payment-form.payment-details.amount\"\n        >Amount</label\n      >\n      <div class=\"bb-form-field bb-form-field--md\">\n        <bb-amount-input-ui\n          formControlName=\"amount\"\n          data-role=\"amount\"\n          [id]=\"'billpay-amount-input-' + id\"\n          [autoDecimal]=\"true\"\n          wrapperClasses=\"bb-amount-input__field--large\"\n          [currency]=\"(selectedAccount$ | async)?.accountBalance?.currencyCode || defaultAmount.currency\"\n          placeholder=\"0.00\"\n          aria-describedby=\"{{ 'billpay-amount-errors-' + id }}\"\n        >\n        </bb-amount-input-ui>\n      </div>\n      <bb-input-validation-message-ui\n        role=\"alert\"\n        id=\"{{ 'billpay-amount-errors-' + id }}\"\n        [showErrors]=\"isInvalidControl(paymentForm?.get('amount'))\"\n      >\n        <span\n          *ngIf=\"!paymentForm?.get('amount')?.errors?.amountInvalid\"\n          i18n=\"Please add amount of this payment|Error zero amount@@bb-billpay-payment-form.error.amount\"\n          data-role=\"invalid-amount\"\n        >\n          Please add amount of this payment.\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"bb-fieldset\" [formGroup]=\"paymentForm\">\n      <label class=\"bb-label\" data-role=\"add-memo-label\" for=\"bb-billpay-payment-form-memo\">\n        <span i18n=\"Memo label|Label for payment memo@@bb-billpay-payment-form.label.memo\">Payment description</span>\n        <span class=\"bb-text-support\" i18n=\"label helper|optional text@@bb-billpay-payment-form.label.memo-helper\">\n          (Optional)</span\n        >\n      </label>\n      <div class=\"bb-form-field bb-form-field--md\">\n        <bb-textarea-ui\n          [id]=\"'bb-billpay-payment-form-memo'\"\n          formControlName=\"memo\"\n          data-role=\"memo\"\n          placeholder=\"Enter payment description\"\n          i18n-placeholder=\"\n            Enter payment description|Placeholder for payment description@@bb-billpay-payment-form.payment.description\"\n          [showCharCounter]=\"true\"\n          [maxLength]=\"140\"\n          [rows]=\"2\"\n        >\n        </bb-textarea-ui>\n      </div>\n    </div>\n\n    <!-- Payment scheduler -->\n    <bb-collapsible-ui\n      *ngIf=\"(selectedPayee$ | async) && (!isEditPayment || paymentType !== 'oneOff'); else editOneOffPaymentSchedule\"\n      data-role=\"schedule-toggle\"\n      [isOpen]=\"true\"\n    >\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div class=\"border-bottom bb-block bb-block--md\">\n          <button\n            bbButton\n            class=\"bb-stack bb-product-selector__item-content\"\n            (click)=\"toggle()\"\n            type=\"button\"\n            color=\"unstyled\"\n          >\n            <div class=\"bb-stack__item bb-stack__item--fill bb-text-align-left\">\n              <div class=\"bb-block bb-block--sm\">\n                <span\n                  class=\"bb-heading-2\"\n                  data-role=\"schedule-section-title\"\n                  i18n=\"\n                    Schedule section title|Title of the form section with payment schedule\n                    fields@@bb-billpay-payment-form.section.schedule.title\"\n                >\n                  Schedule\n                </span>\n                <span class=\"bb-text-support bb-text-default\">\n                  <bb-schedule-label-ui\n                    [item]=\"scheduleLabelData\"\n                    [frequencies]=\"frequencies\"\n                    [minOccurrences]=\"minOccurs\"\n                    [isSingleTransfer]=\"schedule.frequency === frequencyKeys.Once\"\n                  >\n                  </bb-schedule-label-ui>\n                </span>\n              </div>\n            </div>\n            <bb-icon-ui\n              class=\"bb-stack__item\"\n              cropped\n              data-role=\"schedule-toggle-icon\"\n              aria-label=\"Schedule toggle\"\n              i18n-aria-label=\"\n                Schedule toggle label|Aria label for schedule\n                toggle@@bb-billpay-payment-form.bb-schedule-ui.label.toggle\"\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <bb-schedule-ui\n          [scheduleForm]=\"paymentForm.get('schedule')\"\n          [paymentServices]=\"(selectedPayee$ | async)?.paymentServices\"\n          [defaultPaymentServiceType]=\"defaultPaymentServiceType\"\n          [frequencies]=\"frequencies\"\n          [minOccurs]=\"minOccurs\"\n          [maxOccurs]=\"maxOccurs\"\n          [minDate]=\"minDate$ | async\"\n          [formSubmitted]=\"formSubmitted\"\n          data-role=\"payment-schedule\"\n        >\n        </bb-schedule-ui>\n      </ng-template>\n    </bb-collapsible-ui>\n\n    <ng-template #editOneOffPaymentSchedule>\n      <div *ngIf=\"selectedPayee$ | async\" class=\"bb-block bb-block--md\" [formGroup]=\"paymentForm.get('schedule')\">\n        <label class=\"bb-label\" data-role=\"deliver-payment-by-date\">\n          <span\n            id=\"billpay-schedule-end-date-on-{{ id }}\"\n            i18n=\"Deliver payment by label|Edit one off payment date@@bb-billpay-payment-form.label.deliver-payment-by\"\n            >Deliver payment by</span\n          >\n          <div>\n            <bb-input-datepicker-ui\n              formControlName=\"startDate\"\n              [minDate]=\"minDate$ | async\"\n              data-role=\"once-start-date-calendar\"\n              aria-label=\"start-date\"\n              aria-labelledby=\"billpay-schedule-end-date-on-{{ id }}\"\n              datepickerDescribedby=\"billpay-schedule-end-date-on-error-{{ id }}\"\n            ></bb-input-datepicker-ui>\n          </div>\n          <bb-input-validation-message-ui\n            id=\"billpay-schedule-end-date-on-error-{{ id }}\"\n            aria-live=\"polite\"\n            [showErrors]=\"paymentForm.get('schedule.startDate')?.invalid && formSubmitted\"\n          >\n            <span\n              *ngIf=\"paymentForm.get('schedule.startDate')?.hasError('required')\"\n              i18n=\"\n                Execution date required error text|Error required message for Execution date input\n                field@@bb-billpay-payment-form.error.required.startDate\"\n              data-role=\"missing-schedule-execution-date\"\n            >\n              Execution date is required.\n            </span>\n            <span\n              *ngIf=\"\n                paymentForm.get('schedule.startDate')?.hasError('pastDate') ||\n                paymentForm.get('schedule.startDate')?.hasError('dateLessThanMinDate')\n              \"\n              i18n=\"\n                Execution date past date error text |Error past date message for Execution date input\n                field@@bb-billpay-payment-form.error.pastDate.startDate\"\n              data-role=\"past-date-schedule-execution-date\"\n            >\n              Execution date cannot be before delivery date.\n            </span>\n            <span\n              *ngIf=\"paymentForm?.get('schedule.startDate')?.hasError('invalidDateFormat')\"\n              i18n=\"\n                Execution date invalid date error text |Error invalid date format message for Execution date input\n                field@@bb-billpay-payment-form.error.invalidDateFormat\"\n              data-role=\"invalid-date-schedule-execution-date\"\n            >\n              Invalid date format.\n            </span>\n          </bb-input-validation-message-ui>\n        </label>\n      </div>\n    </ng-template>\n  </fieldset>\n</ng-template>\n\n<ng-template #formOvernightAddress>\n  <ng-container\n    *ngIf=\"schedule.paymentService?.service?.paymentServiceType === 'OVERNIGHT_CHECK'\"\n    [formGroup]=\"paymentForm\"\n  >\n    <bb-fieldset-ui\n      i18n-heading=\"\n        Overnight check address|Text for the payment overnight\n        address@@bb-billpay-payment-form.payment-overnight-address\"\n      heading=\"Overnight check address\"\n      class=\"bb-block bb-block-xl\"\n    >\n      <bb-alert-ui\n        modifier=\"info\"\n        class=\"d-block\"\n        title=\"This address might be a dedicated PO box for overnight payments. Please check with your biller\"\n        i18n-title=\"alert title|Address alert@@bb-billpay-payment-form.payment-overnight-address.alert\"\n        data-role=\"overnight-alert-message\"\n      >\n      </bb-alert-ui>\n      <bb-billpay-address-form\n        [formGroup]=\"paymentForm.get('overnightDeliveryAddress')\"\n        formGroupName=\"overnightDeliveryAddress\"\n      ></bb-billpay-address-form>\n    </bb-fieldset-ui>\n  </ng-container>\n</ng-template>\n", components: [{ type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4__namespace$2.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i5__namespace$1.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i6__namespace$1.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i5__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i8__namespace$2.ProductItemCurrentAccountComponent, selector: "bb-product-item-current-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: BillpayEbillPaymentUIComponent, selector: "bb-billpay-ebill-payment", inputs: ["latestBill", "control", "isSubmitted", "eBillDefaultCurrency"] }, { type: i10__namespace.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i11__namespace.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i12__namespace.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: ["item", "isSingleTransfer", "minOccurrences", "frequencies"] }, { type: i3__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ScheduleComponent, selector: "bb-schedule-ui", inputs: ["frequencies", "minOccurs", "maxOccurs", "scheduleForm", "minDate", "defaultPaymentServiceType", "formSubmitted", "paymentServices"] }, { type: i4__namespace$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1__namespace$1.ӨBillpayAddressFormComponent, selector: "bb-billpay-address-form" }], directives: [{ type: i1__namespace$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace$2.CustomProductItemCurrentAccountMainSectionDirective, selector: "ng-template[bbCustomProductItemCurrentAccountMainSection]" }, { type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i12__namespace.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i12__namespace.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }, { type: i4__namespace$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1__namespace$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-form',
                        templateUrl: './billpay-payment-form.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.FormBuilder }, { type: i1__namespace$1.BillpayPaymentScheduleService }]; }, propDecorators: { payeeSummaries: [{
                    type: i0.Input
                }], accounts: [{
                    type: i0.Input
                }], selectedPayeeId: [{
                    type: i0.Input
                }], paymentState: [{
                    type: i0.Input
                }], paymentId: [{
                    type: i0.Input
                }], accountNumberMask: [{
                    type: i0.Input
                }], paymentType: [{
                    type: i0.Input
                }], isEditPayment: [{
                    type: i0.Input
                }], paymentDetailsTitle: [{
                    type: i0.Input
                }], paymentDefaultCurrency: [{
                    type: i0.Input
                }], frequencies: [{
                    type: i0.Input
                }], fromAccount: [{
                    type: i0.ViewChild,
                    args: ['fromAccount']
                }], submitPayment: [{
                    type: i0.Output
                }], cancelPayment: [{
                    type: i0.Output
                }], valueChanged: [{
                    type: i0.Output
                }] } });

    var BillpayPaymentDiscardChangesModalComponent = /** @class */ (function () {
        function BillpayPaymentDiscardChangesModalComponent() {
            this.resolve = new i0.EventEmitter();
        }
        BillpayPaymentDiscardChangesModalComponent.prototype.cancelModal = function () {
            this.resolve.emit(false);
        };
        BillpayPaymentDiscardChangesModalComponent.prototype.confirmModal = function () {
            this.resolve.emit(true);
        };
        return BillpayPaymentDiscardChangesModalComponent;
    }());
    BillpayPaymentDiscardChangesModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentDiscardChangesModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentDiscardChangesModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: { title: "title", subtitle: "subtitle", confirmButtonLabel: ["confirm-button-label", "confirmButtonLabel"], cancelButtonLabel: ["cancel-button-label", "cancelButtonLabel"] }, outputs: { resolve: "resolve" }, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"true\" (cancel)=\"cancelModal()\" data-role=\"discard-payment-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-header-ui\n        data-role=\"discard-payment-modal-header\"\n        headingType=\"h2\"\n        heading=\"{{ title }}\"\n        i18n-heading=\"Discard payment modal header@@billpay.payment-discard-changes.modal.header\"\n      >\n      </bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span\n        i18n=\"Discard payment modal body@@billpay.payment-discard-changes.modal.body\"\n        data-role=\"discard-payment-modal-body\"\n        >{{ subtitle }}</span\n      >\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"confirmModal()\"\n          data-role=\"discard-payment-modal-confirm-button\"\n          i18n=\"\n            Confirm button|Discard payment modal footer button@@billpay.payment-discard-changes.modal.footer.confirm\"\n        >\n          {{ confirmButtonLabel }}\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          (click)=\"cancelModal()\"\n          data-role=\"discard-payment-modal-cancel-button\"\n          i18n=\"Cancel button|Discard payment modal footer button@@billpay.payment-discard-changes.modal.footer.cancel\"\n        >\n          {{ cancelButtonLabel }}\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1__namespace$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1__namespace$3.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1__namespace$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1__namespace$3.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentDiscardChangesModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-discard-changes-modal',
                        templateUrl: './billpay-payment-discard-changes-modal.component.html',
                    }]
            }], propDecorators: { title: [{
                    type: i0.Input
                }], subtitle: [{
                    type: i0.Input
                }], confirmButtonLabel: [{
                    type: i0.Input,
                    args: ['confirm-button-label']
                }], cancelButtonLabel: [{
                    type: i0.Input,
                    args: ['cancel-button-label']
                }], resolve: [{
                    type: i0.Output
                }] } });

    var BillpayPaymentFormContainerComponent = /** @class */ (function () {
        /** @internal */
        function BillpayPaymentFormContainerComponent(routerService, paymentDataService, paymentStateService, discardModalService, route) {
            this.routerService = routerService;
            this.paymentDataService = paymentDataService;
            this.paymentStateService = paymentStateService;
            this.discardModalService = discardModalService;
            this.route = route;
            this.isFormTouched = false;
            this.paymentRouteObservable$ = this.routerService.routeParams;
        }
        Object.defineProperty(BillpayPaymentFormContainerComponent.prototype, "isDiscardModalOpen", {
            get: function () {
                return this.discardModalService.isDiscardModalOpen;
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentFormContainerComponent.prototype.ngOnInit = function () {
            this.paymentDataObservable$ = rxjs.combineLatest([
                this.paymentRouteObservable$,
                this.paymentDataService.getPayeesAndAccounts(),
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), routeParams = _b[0], payeeSummariesAndAccounts = _b[1];
                return (Object.assign(Object.assign({}, routeParams), payeeSummariesAndAccounts));
            }));
        };
        BillpayPaymentFormContainerComponent.prototype.onWindowUnload = function ($event) {
            if ((this.isFormTouched || this.paymentStateService.isFormProcessing) && !this.isDiscardModalOpen) {
                $event.returnValue = true;
            }
        };
        BillpayPaymentFormContainerComponent.prototype.hasNoErrorState = function (data) {
            return (this.payeesLoadingState !== i1.LoadingState.Error &&
                this.accountsLoadingState !== i1.LoadingState.Error &&
                !!data.accounts &&
                !!data.payeeSummaries);
        };
        BillpayPaymentFormContainerComponent.prototype.onSubmittedFormData = function (data) {
            this.paymentStateService.isFormProcessing = true;
            this.paymentStateService.updatePaymentState([data]);
            this.routerService.navigateToReview({ relativeTo: this.route.parent });
        };
        Object.defineProperty(BillpayPaymentFormContainerComponent.prototype, "paymentState", {
            get: function () {
                return this.paymentStateService.paymentState.pipe(operators.map(function (state) { return state === null || state === void 0 ? void 0 : state[0]; }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormContainerComponent.prototype, "payeesLoadingState", {
            get: function () {
                return this.paymentDataService.payeesLoadingState;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentFormContainerComponent.prototype, "accountsLoadingState", {
            get: function () {
                return this.paymentDataService.accountsLoadingState;
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentFormContainerComponent.prototype.openModal = function () {
            return this.isFormTouched || this.paymentStateService.isFormProcessing
                ? this.discardModalService.openModal()
                : rxjs.of(true);
        };
        BillpayPaymentFormContainerComponent.prototype.onModalResolve = function (isConfirmed) {
            this.discardModalService.onModalResolve(isConfirmed);
        };
        BillpayPaymentFormContainerComponent.prototype.onFormValueChanged = function () {
            this.isFormTouched = true;
        };
        BillpayPaymentFormContainerComponent.prototype.onCancelForm = function () {
            this.routerService.navigateToPayeeList();
        };
        return BillpayPaymentFormContainerComponent;
    }());
    BillpayPaymentFormContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentFormContainerComponent, deps: [{ token: PayBillsNavigationService }, { token: i1__namespace$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: i1__namespace.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentFormContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFormContainerComponent, selector: "bb-billpay-payment-form-container", inputs: { frequencies: "frequencies", accountNumberMasked: "accountNumberMasked", paymentDetailsTitle: "paymentDetailsTitle", paymentDefaultCurrency: "paymentDefaultCurrency" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [i1.BillpayDiscardChangesModalService], ngImport: i0__namespace, template: "<ng-container *ngIf=\"paymentDataObservable$ | async as paymentData; else loadingState\">\n  <ng-container *ngIf=\"hasNoErrorState(paymentData); else errorState\">\n    <section>\n      <bb-billpay-payment-form\n        *ngIf=\"paymentData.pageType === 'new'\"\n        [payeeSummaries]=\"paymentData?.payeeSummaries\"\n        [accounts]=\"paymentData?.accounts\"\n        [selectedPayeeId]=\"paymentData.payeeId\"\n        (submitPayment)=\"onSubmittedFormData($event)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        (cancelPayment)=\"onCancelForm()\"\n        [paymentState]=\"paymentState | async\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        [isEditPayment]=\"false\"\n        [paymentType]=\"paymentData.paymentType\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [paymentDefaultCurrency]=\"paymentDefaultCurrency\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </section>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n        subtitle=\"Try to reload the page or contact support\"\n        i18n-subtitle=\"\n          Try to reload the page or contact support|Payment loading error\n          subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n        title=\"Payment information is not loading\"\n        i18n-title=\"\n          Payment information is not loading|Payment loading error\n          title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-create-form-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel payment?\"\n  i18n-title=\"Discard changes modal header@@billpay.manage-payment.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel this payment? You will lose any details entered.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.manage-payment.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6__namespace$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7__namespace$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentFormContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-form-container',
                        templateUrl: './billpay-payment-form-container.component.html',
                        providers: [i1.BillpayDiscardChangesModalService],
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsNavigationService }, { type: i1__namespace$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: i1__namespace.ActivatedRoute }]; }, propDecorators: { frequencies: [{
                    type: i0.Input
                }], accountNumberMasked: [{
                    type: i0.Input
                }], paymentDetailsTitle: [{
                    type: i0.Input
                }], paymentDefaultCurrency: [{
                    type: i0.Input
                }], onWindowUnload: [{
                    type: i0.HostListener,
                    args: ['window:beforeunload', ['$event']]
                }] } });

    var BillpayPaymentFormViewComponent = /** @class */ (function () {
        function BillpayPaymentFormViewComponent(config, routerService) {
            this.config = config;
            this.routerService = routerService;
        }
        BillpayPaymentFormViewComponent.prototype.openModal = function () {
            return this.child.openModal();
        };
        BillpayPaymentFormViewComponent.prototype.goBack = function () {
            this.routerService.navigateToPayeeList();
        };
        return BillpayPaymentFormViewComponent;
    }());
    BillpayPaymentFormViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentFormViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentFormViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFormViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentFormContainer"], descendants: true }], ngImport: i0__namespace, template: "\n    <div class=\"bb-stack\">\n      <div class=\"bb-block bb-block--sm bb-stack__item bb-stack__item--fill\">\n        <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n          <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n          <span i18n=\"button label|Back button@@pay-bills-journey.payee-list.back\">Back to Payee List</span>\n        </button>\n        <bb-header-ui\n          headingType=\"h1\"\n          heading=\"Make a payment\"\n          i18n-heading=\"@@pay-bills-journey.title.make-a-payment\"\n          data-role=\"pay-a-bill-journey-title\"\n        >\n        </bb-header-ui>\n        <p i18n=\"@@pay-bills-journey.pay-payee.header-description\" data-role=\"multiple-bills-widget-title-info\">\n          Add payees if you would like to pay a single bill or multiple bills\n        </p>\n      </div>\n    </div>\n    <bb-billpay-payment-form-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [paymentDetailsTitle]=\"config.paymentDetailsTitle\"\n      [paymentDefaultCurrency]=\"config.paymentDefaultCurrency\"\n      [frequencies]=\"config.frequencies\"\n      #paymentFormContainer\n    ></bb-billpay-payment-form-container>\n  ", isInline: true, components: [{ type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentFormContainerComponent, selector: "bb-billpay-payment-form-container", inputs: ["frequencies", "accountNumberMasked", "paymentDetailsTitle", "paymentDefaultCurrency"] }], directives: [{ type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentFormViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: "\n    <div class=\"bb-stack\">\n      <div class=\"bb-block bb-block--sm bb-stack__item bb-stack__item--fill\">\n        <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n          <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n          <span i18n=\"button label|Back button@@pay-bills-journey.payee-list.back\">Back to Payee List</span>\n        </button>\n        <bb-header-ui\n          headingType=\"h1\"\n          heading=\"Make a payment\"\n          i18n-heading=\"@@pay-bills-journey.title.make-a-payment\"\n          data-role=\"pay-a-bill-journey-title\"\n        >\n        </bb-header-ui>\n        <p i18n=\"@@pay-bills-journey.pay-payee.header-description\" data-role=\"multiple-bills-widget-title-info\">\n          Add payees if you would like to pay a single bill or multiple bills\n        </p>\n      </div>\n    </div>\n    <bb-billpay-payment-form-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [paymentDetailsTitle]=\"config.paymentDetailsTitle\"\n      [paymentDefaultCurrency]=\"config.paymentDefaultCurrency\"\n      [frequencies]=\"config.frequencies\"\n      #paymentFormContainer\n    ></bb-billpay-payment-form-container>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                    type: i0.ViewChild,
                    args: ['paymentFormContainer']
                }] } });

    var BillpayPaymentReviewContainerComponent = /** @class */ (function () {
        /** @internal */
        function BillpayPaymentReviewContainerComponent(navigationService, dataService, stateService, notificationService, discardModalService, paymentParserService, route, cdRef) {
            this.navigationService = navigationService;
            this.dataService = dataService;
            this.stateService = stateService;
            this.notificationService = notificationService;
            this.discardModalService = discardModalService;
            this.paymentParserService = paymentParserService;
            this.route = route;
            this.cdRef = cdRef;
            this.paymentConfirm$ = new rxjs.BehaviorSubject(undefined);
            this.componentDestroyed$ = new rxjs.Subject();
            this.paymentError = false;
            this.hasDateError = false;
            this.editMode = false;
            this.notificationMessageTemplate = '';
            this.notificationHeaderTemplate = '';
        }
        Object.defineProperty(BillpayPaymentReviewContainerComponent.prototype, "isDiscardModalOpen", {
            get: function () {
                return this.discardModalService.isDiscardModalOpen;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentReviewContainerComponent.prototype, "dismissTimeout", {
            get: function () {
                if (this.dismissTimeoutValue === undefined) {
                    throw new Error('Dismiss timeout value not found');
                }
                return this.dismissTimeoutValue;
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentReviewContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.stateService.paymentState.pipe(operators.take(1)).subscribe(function (payment) {
                var _a;
                _this.payment = payment === null || payment === void 0 ? void 0 : payment[0];
                _this.paymentReview = _this.payment && _this.paymentParserService.paymentFormStateToReview(_this.payment);
                var frequency = (_a = _this.frequencies) === null || _a === void 0 ? void 0 : _a.find(function (freq) { var _a, _b; return ((_b = (_a = _this.payment) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.frequency) === freq.value; });
                _this.frequencyLabel = (frequency === null || frequency === void 0 ? void 0 : frequency.name) || '';
                if (!_this.payment) {
                    _this.navigationService.navigateToForm({ relativeTo: _this.route.parent });
                }
            });
            this.paymentConfirm$
                .pipe(operators.takeUntil(this.componentDestroyed$), operators.filter(Boolean))
                .subscribe(function (payment) { return _this.onPaymentConfirm(payment); });
        };
        BillpayPaymentReviewContainerComponent.prototype.ngOnDestroy = function () {
            this.componentDestroyed$.next();
            this.componentDestroyed$.complete();
        };
        BillpayPaymentReviewContainerComponent.prototype.onWindowUnload = function ($event) {
            if (!this.isDiscardModalOpen) {
                $event.returnValue = true;
            }
        };
        BillpayPaymentReviewContainerComponent.prototype.onEdit = function () {
            this.editMode = true;
            this.navigationService.navigateToForm({ relativeTo: this.route.parent });
        };
        BillpayPaymentReviewContainerComponent.prototype.navigateToPayments = function () {
            this.navigationService.navigateToPayments();
        };
        BillpayPaymentReviewContainerComponent.prototype.cancel = function () {
            this.navigationService.navigateToPayeeList();
        };
        BillpayPaymentReviewContainerComponent.prototype.confirmPayment = function (payment) {
            if (!payment)
                return;
            this.paymentConfirm$.next(payment);
        };
        BillpayPaymentReviewContainerComponent.prototype.openModal = function () {
            var _this = this;
            return this.paymentConfirm$.pipe(operators.switchMap(function (payment) { return (payment || _this.editMode ? rxjs.of(true) : _this.discardModalService.openModal()); }), operators.tap(function (isResolved) { return isResolved && !_this.editMode && _this.stateService.reset(); }));
        };
        BillpayPaymentReviewContainerComponent.prototype.onModalResolve = function (isConfirmed) {
            this.discardModalService.onModalResolve(isConfirmed);
        };
        BillpayPaymentReviewContainerComponent.prototype.onPaymentConfirm = function (payment) {
            var _this = this;
            this.paymentError = false;
            this.hasDateError = false;
            this.dataService
                .createPayment(payment)
                .pipe(operators.takeUntil(this.componentDestroyed$))
                .subscribe(function () {
                _this.navigationService.navigateToPayeeList();
                _this.notificationService.showNotification({
                    header: _this.notificationHeaderTemplate,
                    message: _this.notificationMessageTemplate,
                    modifier: 'success',
                    ttl: _this.dismissTimeout,
                });
            }, function (response) {
                var _a, _b;
                _this.paymentError = true;
                _this.hasDateError = (_b = (_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.some(function (a) { return a.key === 'billpay.api.invalidPaymentDate'; });
                _this.cdRef.markForCheck();
                _this.failAlert.nativeElement.scrollIntoView(false);
            });
        };
        return BillpayPaymentReviewContainerComponent;
    }());
    BillpayPaymentReviewContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentReviewContainerComponent, deps: [{ token: PayBillsNavigationService }, { token: i1__namespace$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i5__namespace$2.NotificationService }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: i1__namespace$1.BillpayPaymentParserService }, { token: i1__namespace.ActivatedRoute }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentReviewContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentReviewContainerComponent, selector: "bb-billpay-payment-review-container", inputs: { frequencies: "frequencies", dismissTimeoutValue: "dismissTimeoutValue", accountNumberMasked: "accountNumberMasked" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [i1.BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"payment\">\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-block bb-block--xl\">\n        <ng-container *ngTemplateOutlet=\"reviewContent\"></ng-container>\n      </div>\n      <ng-container *ngTemplateOutlet=\"reviewButtons\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #reviewContent>\n  <div #failAlert>\n    <bb-alert-ui\n      title=\"Failed to submit payment. Please try again later.\"\n      i18n-title=\"Failed to submit payment|Title for payment error@@billpay-payment-review-container.error-alert\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-message\"\n      *ngIf=\"paymentError && !hasDateError\"\n    >\n    </bb-alert-ui>\n    <bb-alert-ui\n      title=\"The date selected is invalid.\"\n      i18n-title=\"\n        Failed to submit payment date|Title for payment date error@@billpay-payment-review-container.error-date-alert\"\n      message=\"The payment cannot be scheduled on this date. Please select another date in the previous step.\"\n      i18n-message=\"Date payment error|Date error for payment@@billpay-payment-review.date-error-alert.message\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-date-message\"\n      *ngIf=\"paymentError && hasDateError\"\n    >\n    </bb-alert-ui>\n  </div>\n  <bb-billpay-payment-review-card\n    [accountNumberMask]=\"accountNumberMasked\"\n    [paymentReview]=\"paymentReview\"\n    [frequencyLabel]=\"frequencyLabel\"\n  >\n  </bb-billpay-payment-review-card>\n</ng-template>\n\n<ng-template #reviewButtons>\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      data-role=\"confirm-payment-button\"\n      i18n=\"Payment details confirm button|Label for confirm payment button@@billpay-payment-review.confirm\"\n      (click)=\"confirmPayment(payment)\"\n      class=\"bb-button-bar__button\"\n    >\n      Submit\n    </button>\n    <button\n      bbButton\n      data-role=\"edit-payment-button\"\n      i18n=\"Payment details edit button|Label for edit payment button@@billpay-payment-review.edit\"\n      (click)=\"onEdit()\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n    >\n      Edit\n    </button>\n    <button\n      bbButton\n      data-role=\"cancel-payment-button\"\n      i18n=\"Payment details cancel button|Label for cancel payment button@@billpay-payment-review.cancel\"\n      (click)=\"cancel()\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n    >\n      Discard\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <ng-container *ngIf=\"payment?.payeeTo as payee\">\n    <span\n      i18n=\"\n        payment notification message|Payment confirmation success notification\n        message@@billpay-payment-review.confirm.notification.message\"\n      >Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }} has been scheduled\n      successfully</span\n    >\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"notification-secondary-button\"\n        class=\"bb-button-bar__button\"\n        (click)=\"navigateToPayments()\"\n        i18n=\"\n          payment notification button|Navigate to scheduled payments@@billpay-payment-review.confirm.notification.button\"\n      >\n        View scheduled payments\n      </button>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <span\n    i18n=\"\n      payment notification header|Payment confirmation success notification\n      header@@billpay-payment-review.confirm.notification.header\"\n    >Payment scheduled</span\n  >\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel payment?\"\n  i18n-title=\"Discard changes modal header@@billpay.manage-payment.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel this payment? You will lose any details entered.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.manage-payment.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1__namespace$1.BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: ["paymentReview", "accountNumberMask", "frequencyLabel"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentReviewContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-review-container',
                        templateUrl: './billpay-payment-review-container.component.html',
                        providers: [i1.BillpayDiscardChangesModalService],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsNavigationService }, { type: i1__namespace$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i5__namespace$2.NotificationService }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: i1__namespace$1.BillpayPaymentParserService }, { type: i1__namespace.ActivatedRoute }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { frequencies: [{
                    type: i0.Input
                }], dismissTimeoutValue: [{
                    type: i0.Input
                }], accountNumberMasked: [{
                    type: i0.Input
                }], notificationMessageTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationMessage']
                }], notificationHeaderTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationHeader']
                }], failAlert: [{
                    type: i0.ViewChild,
                    args: ['failAlert']
                }], onWindowUnload: [{
                    type: i0.HostListener,
                    args: ['window:beforeunload', ['$event']]
                }] } });

    var BillpayPaymentReviewViewComponent = /** @class */ (function () {
        function BillpayPaymentReviewViewComponent(config, routerService) {
            this.config = config;
            this.routerService = routerService;
        }
        BillpayPaymentReviewViewComponent.prototype.openModal = function () {
            return this.child.openModal();
        };
        BillpayPaymentReviewViewComponent.prototype.goBack = function () {
            this.routerService.navigateToPayeeList();
        };
        return BillpayPaymentReviewViewComponent;
    }());
    BillpayPaymentReviewViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentReviewViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentReviewViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentReviewViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentReviewContainer"], descendants: true }], ngImport: i0__namespace, template: "\n    <div class=\"bb-stack\">\n      <div class=\"bb-block bb-block--sm bb-stack__item bb-stack__item--fill\">\n        <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n          <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n          <span i18n=\"button label|Back button@@pay-bills-journey.payee-list.back\">Back to Payee List</span>\n        </button>\n        <bb-header-ui\n          headingType=\"h1\"\n          heading=\"Review your payment\"\n          i18n-heading=\"@@pay-bills-journey.title.make-a-payment\"\n          data-role=\"pay-a-bill-journey-review-title\"\n        >\n        </bb-header-ui>\n      </div>\n    </div>\n    <bb-billpay-payment-review-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [dismissTimeoutValue]=\"config.notificationDismissTime\"\n      [frequencies]=\"config.frequencies\"\n      #paymentReviewContainer\n    ></bb-billpay-payment-review-container>\n  ", isInline: true, components: [{ type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentReviewContainerComponent, selector: "bb-billpay-payment-review-container", inputs: ["frequencies", "dismissTimeoutValue", "accountNumberMasked"] }], directives: [{ type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentReviewViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: "\n    <div class=\"bb-stack\">\n      <div class=\"bb-block bb-block--sm bb-stack__item bb-stack__item--fill\">\n        <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n          <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n          <span i18n=\"button label|Back button@@pay-bills-journey.payee-list.back\">Back to Payee List</span>\n        </button>\n        <bb-header-ui\n          headingType=\"h1\"\n          heading=\"Review your payment\"\n          i18n-heading=\"@@pay-bills-journey.title.make-a-payment\"\n          data-role=\"pay-a-bill-journey-review-title\"\n        >\n        </bb-header-ui>\n      </div>\n    </div>\n    <bb-billpay-payment-review-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [dismissTimeoutValue]=\"config.notificationDismissTime\"\n      [frequencies]=\"config.frequencies\"\n      #paymentReviewContainer\n    ></bb-billpay-payment-review-container>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                    type: i0.ViewChild,
                    args: ['paymentReviewContainer']
                }] } });

    var BasePaymentEditFormContainerDirective = /** @class */ (function () {
        /** @internal */
        function BasePaymentEditFormContainerDirective(dataService, stateService, route, discardModalService, routerService) {
            this.dataService = dataService;
            this.stateService = stateService;
            this.route = route;
            this.discardModalService = discardModalService;
            this.routerService = routerService;
            this.destroy$ = new rxjs.Subject();
            this.isFormTouched = false;
            this.id$ = this.route.paramMap.pipe(operators.take(1), operators.map(function (params) { return params.get('id') || ''; }));
            this.payeesAndAccounts$ = this.dataService.getPayeesAndAccounts().pipe(operators.shareReplay(1), operators.takeUntil(this.destroy$));
        }
        BasePaymentEditFormContainerDirective.prototype.onWindowUnload = function ($event) {
            if ((this.isFormTouched || this.stateService.isFormProcessing) && !this.isDiscardModalOpen) {
                $event.returnValue = true;
            }
        };
        BasePaymentEditFormContainerDirective.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        Object.defineProperty(BasePaymentEditFormContainerDirective.prototype, "isDiscardModalOpen", {
            get: function () {
                return this.discardModalService.isDiscardModalOpen;
            },
            enumerable: false,
            configurable: true
        });
        BasePaymentEditFormContainerDirective.prototype.openModal = function () {
            return this.isFormTouched || this.stateService.isFormProcessing ? this.discardModalService.openModal() : rxjs.of(true);
        };
        BasePaymentEditFormContainerDirective.prototype.onModalResolve = function (isConfirmed) {
            this.discardModalService.onModalResolve(isConfirmed);
        };
        BasePaymentEditFormContainerDirective.prototype.onFormValueChanged = function () {
            this.isFormTouched = true;
        };
        BasePaymentEditFormContainerDirective.prototype.onCancelForm = function () {
            this.routerService.navigateToPayeeList();
        };
        return BasePaymentEditFormContainerDirective;
    }());
    BasePaymentEditFormContainerDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BasePaymentEditFormContainerDirective, deps: [{ token: i1__namespace$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i1__namespace.ActivatedRoute }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    BasePaymentEditFormContainerDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BasePaymentEditFormContainerDirective, inputs: { accountNumberMasked: "accountNumberMasked", paymentDetailsTitle: "paymentDetailsTitle" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BasePaymentEditFormContainerDirective, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: i1__namespace$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i1__namespace.ActivatedRoute }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: PayBillsNavigationService }]; }, propDecorators: { accountNumberMasked: [{
                    type: i0.Input
                }], paymentDetailsTitle: [{
                    type: i0.Input
                }], onWindowUnload: [{
                    type: i0.HostListener,
                    args: ['window:beforeunload', ['$event']]
                }] } });

    var BillpayPaymentRecurringEditFormContainerComponent = /** @class */ (function (_super) {
        __extends(BillpayPaymentRecurringEditFormContainerComponent, _super);
        /** @internal */
        function BillpayPaymentRecurringEditFormContainerComponent(dataService, stateService, route, discardModalService, routerService, parserService) {
            var _this = _super.call(this, dataService, stateService, route, discardModalService, routerService) || this;
            _this.routerService = routerService;
            _this.parserService = parserService;
            _this.hasLoadingError = false;
            _this.activatedRoute = route;
            return _this;
        }
        BillpayPaymentRecurringEditFormContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.paymentRecurringState$ = rxjs.combineLatest([
                this.id$,
                this.stateService.paymentState.pipe(operators.map(function (state) { return state === null || state === void 0 ? void 0 : state[0]; })),
                this.payeesAndAccounts$,
            ]).pipe(operators.switchMap(function (_b) {
                var _c = __read(_b, 3), id = _c[0], state = _c[1], data = _c[2];
                return ((state && rxjs.of(state)) ||
                    _this.dataService.getRecurringPayment(id).pipe(operators.map(function (payment) { return payment &&
                        (data === null || data === void 0 ? void 0 : data.payeeSummaries) &&
                        _this.parserService.paymentRecurringToFormState(payment, data.payeeSummaries); }), operators.catchError(function () {
                        _this.hasLoadingError = true;
                        return rxjs.of({});
                    })));
            }));
        };
        BillpayPaymentRecurringEditFormContainerComponent.prototype.onPaymentSubmitted = function (data, id) {
            var _a;
            this.stateService.isFormProcessing = true;
            this.stateService.updatePaymentState([data]);
            this.routerService.navigateToEditRecurringReview(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
        };
        return BillpayPaymentRecurringEditFormContainerComponent;
    }(BasePaymentEditFormContainerDirective));
    BillpayPaymentRecurringEditFormContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentRecurringEditFormContainerComponent, deps: [{ token: i1__namespace$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i1__namespace.ActivatedRoute }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: PayBillsNavigationService }, { token: i1__namespace$1.BillpayPaymentParserService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentRecurringEditFormContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditFormContainerComponent, selector: "bb-billpay-payment-recurring-edit-form-container", inputs: { frequencies: "frequencies" }, providers: [i1.BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  *ngIf=\"{\n    state: paymentRecurringState$ | async,\n    payeeSummaries: (payeesAndAccounts$ | async)?.payeeSummaries,\n    accounts: (payeesAndAccounts$ | async)?.accounts,\n    paymentId: id$ | async\n  } as data\"\n>\n  <ng-container *ngIf=\"data.state; else loadingState\">\n    <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n      <bb-billpay-payment-form\n        [payeeSummaries]=\"data.payeeSummaries\"\n        [accounts]=\"data.accounts\"\n        [selectedPayeeId]=\"data.state?.payeeTo?.id\"\n        [paymentState]=\"data.state\"\n        [isEditPayment]=\"true\"\n        [paymentType]=\"'recurring'\"\n        (cancelPayment)=\"onCancelForm()\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        (submitPayment)=\"onPaymentSubmitted($event, data.paymentId)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"\n            Try to reload the page or contact support|Payee List loading\n            subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n          title=\"Payment information is not loading\"\n          i18n-title=\"\n            Payment information is not loading|Form List loading\n            title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <bb-billpay-payment-discard-changes-modal\n    *ngIf=\"isDiscardModalOpen\"\n    data-role=\"billpay-payment-edit-review-page-lose-changes-modal\"\n    (resolve)=\"onModalResolve($event)\"\n    title=\"Lose changes?\"\n    i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n    subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n    i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n    confirm-button-label=\"Lose changes\"\n    i18n-confirm-button-label=\"\n      confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n    cancel-button-label=\"Continue editing\"\n    i18n-cancel-button-label=\"\n      cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n  ></bb-billpay-payment-discard-changes-modal>\n</ng-container>\n", components: [{ type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6__namespace$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7__namespace$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentRecurringEditFormContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-recurring-edit-form-container',
                        templateUrl: './billpay-payment-recurring-edit-form-container.component.html',
                        providers: [i1.BillpayDiscardChangesModalService],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i1__namespace.ActivatedRoute }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: PayBillsNavigationService }, { type: i1__namespace$1.BillpayPaymentParserService }]; }, propDecorators: { frequencies: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentRecurringEditFormViewComponent = /** @class */ (function () {
        function BillpayPaymentRecurringEditFormViewComponent(config, routerService) {
            this.config = config;
            this.routerService = routerService;
        }
        BillpayPaymentRecurringEditFormViewComponent.prototype.openModal = function () {
            return this.child.openModal();
        };
        BillpayPaymentRecurringEditFormViewComponent.prototype.goBack = function () {
            this.routerService.navigateToPayments();
        };
        return BillpayPaymentRecurringEditFormViewComponent;
    }());
    BillpayPaymentRecurringEditFormViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentRecurringEditFormViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentRecurringEditFormViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditFormViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentRecurringEditForm"], descendants: true }], ngImport: i0__namespace, template: "\n    <div class=\"bb-block\">\n      <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n        <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n        <span i18n=\"button label|Back button@@pay-bills-journey.payments-list.back\">Back to payments list</span>\n      </button>\n    </div>\n    <bb-billpay-payment-recurring-edit-form-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [paymentDetailsTitle]=\"config.paymentDetailsTitle\"\n      [frequencies]=\"config.frequencies\"\n      #paymentRecurringEditForm\n    ></bb-billpay-payment-recurring-edit-form-container>\n  ", isInline: true, components: [{ type: BillpayPaymentRecurringEditFormContainerComponent, selector: "bb-billpay-payment-recurring-edit-form-container", inputs: ["frequencies"] }], directives: [{ type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentRecurringEditFormViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: "\n    <div class=\"bb-block\">\n      <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n        <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n        <span i18n=\"button label|Back button@@pay-bills-journey.payments-list.back\">Back to payments list</span>\n      </button>\n    </div>\n    <bb-billpay-payment-recurring-edit-form-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [paymentDetailsTitle]=\"config.paymentDetailsTitle\"\n      [frequencies]=\"config.frequencies\"\n      #paymentRecurringEditForm\n    ></bb-billpay-payment-recurring-edit-form-container>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                    type: i0.ViewChild,
                    args: ['paymentRecurringEditForm']
                }] } });

    var BasePaymentEditReviewContainerDirective = /** @class */ (function () {
        /** @internal */
        function BasePaymentEditReviewContainerDirective(route, stateService, discardModalService, paymentParserService, routerService) {
            this.route = route;
            this.stateService = stateService;
            this.discardModalService = discardModalService;
            this.paymentParserService = paymentParserService;
            this.routerService = routerService;
            this.paymentError = false;
            this.hasDateError = false;
            this.paymentConfirm$ = new rxjs.BehaviorSubject(undefined);
            this.destroy$ = new rxjs.Subject();
            this.notificationMessageTemplate = '';
            this.notificationHeaderTemplate = '';
            this.id$ = this.route.paramMap.pipe(operators.first(), operators.map(function (params) { return params.get('id') || ''; }));
        }
        BasePaymentEditReviewContainerDirective.prototype.onWindowUnload = function ($event) {
            if (!this.isDiscardModalOpen) {
                $event.returnValue = true;
            }
        };
        BasePaymentEditReviewContainerDirective.prototype.ngOnInit = function () {
            var _this = this;
            rxjs.combineLatest([this.stateService.paymentState, this.id$])
                .pipe(operators.take(1))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), payment = _b[0], id = _b[1];
                _this.payment = payment === null || payment === void 0 ? void 0 : payment[0];
                _this.paymentReview = _this.payment && _this.paymentParserService.paymentFormStateToReview(_this.payment);
                if (!_this.payment) {
                    _this.navigateToForm(id);
                }
            });
            rxjs.combineLatest([this.paymentConfirm$.pipe(operators.filter(Boolean)), this.id$])
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), payment = _b[0], id = _b[1];
                return _this.onPaymentConfirm(payment, id);
            });
        };
        BasePaymentEditReviewContainerDirective.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        Object.defineProperty(BasePaymentEditReviewContainerDirective.prototype, "isDiscardModalOpen", {
            get: function () {
                return this.discardModalService.isDiscardModalOpen;
            },
            enumerable: false,
            configurable: true
        });
        BasePaymentEditReviewContainerDirective.prototype.confirmPayment = function (payment) {
            if (!payment)
                return;
            this.paymentConfirm$.next(payment);
        };
        BasePaymentEditReviewContainerDirective.prototype.openModal = function () {
            var _this = this;
            return this.paymentConfirm$.pipe(operators.switchMap(function (payment) { return (payment ? rxjs.of(true) : _this.discardModalService.openModal()); }), operators.tap(function (isResolved) { return isResolved && _this.stateService.reset(); }));
        };
        BasePaymentEditReviewContainerDirective.prototype.onModalResolve = function (isConfirmed) {
            this.discardModalService.onModalResolve(isConfirmed);
        };
        BasePaymentEditReviewContainerDirective.prototype.cancel = function () {
            this.routerService.navigateToPayeeList();
        };
        Object.defineProperty(BasePaymentEditReviewContainerDirective.prototype, "dismissTimeout", {
            get: function () {
                if (this.dismissTimeoutValue === undefined) {
                    throw new Error('Dismiss timeout value not found');
                }
                return this.dismissTimeoutValue;
            },
            enumerable: false,
            configurable: true
        });
        return BasePaymentEditReviewContainerDirective;
    }());
    BasePaymentEditReviewContainerDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BasePaymentEditReviewContainerDirective, deps: [{ token: i1__namespace.ActivatedRoute }, { token: PayBillsStateService }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: i1__namespace$1.BillpayPaymentParserService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    BasePaymentEditReviewContainerDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BasePaymentEditReviewContainerDirective, inputs: { dismissTimeoutValue: "dismissTimeoutValue", accountNumberMasked: "accountNumberMasked" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BasePaymentEditReviewContainerDirective, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: i1__namespace.ActivatedRoute }, { type: PayBillsStateService }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: i1__namespace$1.BillpayPaymentParserService }, { type: PayBillsNavigationService }]; }, propDecorators: { dismissTimeoutValue: [{
                    type: i0.Input
                }], accountNumberMasked: [{
                    type: i0.Input
                }], notificationMessageTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationMessage']
                }], notificationHeaderTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationHeader']
                }], failAlert: [{
                    type: i0.ViewChild,
                    args: ['failAlert']
                }], onWindowUnload: [{
                    type: i0.HostListener,
                    args: ['window:beforeunload', ['$event']]
                }] } });

    var BillpayPaymentRecurringEditReviewContainerComponent = /** @class */ (function (_super) {
        __extends(BillpayPaymentRecurringEditReviewContainerComponent, _super);
        /** @internal */
        function BillpayPaymentRecurringEditReviewContainerComponent(route, stateService, discardModalService, paymentParserService, routerService, dataService, notificationService, cdRef) {
            var _this = _super.call(this, route, stateService, discardModalService, paymentParserService, routerService) || this;
            _this.dataService = dataService;
            _this.notificationService = notificationService;
            _this.cdRef = cdRef;
            _this.activatedRoute = route;
            return _this;
        }
        BillpayPaymentRecurringEditReviewContainerComponent.prototype.navigateToForm = function (id) {
            var _a;
            this.routerService.navigateToEditRecurringForm(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
        };
        BillpayPaymentRecurringEditReviewContainerComponent.prototype.onPaymentConfirm = function (payment, id) {
            var _this = this;
            this.paymentError = false;
            this.hasDateError = false;
            this.dataService
                .updatePaymentRecurring(payment, id)
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.routerService.navigateToPayments();
                _this.notificationService.showNotification({
                    header: _this.notificationHeaderTemplate,
                    message: _this.notificationMessageTemplate,
                    modifier: 'success',
                    ttl: _this.dismissTimeout,
                });
            }, function (response) {
                var _a, _b;
                _this.paymentError = true;
                _this.hasDateError = (_b = (_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.some(function (a) { return a.key === 'billpay.api.invalidPaymentDate'; });
                _this.cdRef.markForCheck();
                _this.failAlert.nativeElement.scrollIntoView(false);
            });
        };
        return BillpayPaymentRecurringEditReviewContainerComponent;
    }(BasePaymentEditReviewContainerDirective));
    BillpayPaymentRecurringEditReviewContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentRecurringEditReviewContainerComponent, deps: [{ token: i1__namespace.ActivatedRoute }, { token: PayBillsStateService }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: i1__namespace$1.BillpayPaymentParserService }, { token: PayBillsNavigationService }, { token: i1__namespace$1.BillpayPaymentDataService }, { token: i5__namespace$2.NotificationService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentRecurringEditReviewContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditReviewContainerComponent, selector: "bb-billpay-payment-recurring-edit-review-container", providers: [i1.BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"payment\">\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-block bb-block--xl\">\n        <ng-container *ngTemplateOutlet=\"recurringEditReviewContent\"></ng-container>\n      </div>\n\n      <ng-container *ngTemplateOutlet=\"recurringEditReviewButtons\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-edit-form-page-lose-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Lose changes?\"\n  i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n  i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n  confirm-button-label=\"Lose changes\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue editing\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n\n<ng-template #recurringEditReviewContent let-payment>\n  <div #failAlert>\n    <bb-alert-ui\n      title=\"Failed to submit payment. Please try again later.\"\n      i18n-title=\"Failed to submit payment|Title for payment error@@billpay-payment-review-container.error-alert\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-message\"\n      *ngIf=\"paymentError && !hasDateError\"\n    >\n    </bb-alert-ui>\n    <bb-alert-ui\n      title=\"The date selected is invalid.\"\n      i18n-title=\"\n        Failed to submit payment date|Title for payment date error@@billpay-payment-review-container.error-date-alert\"\n      message=\"The payment cannot be scheduled on this date. Please select another date in the previous step.\"\n      i18n-message=\"Date payment error|Date error for payment@@billpay-payment-review.date-error-alert.message\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-date-message\"\n      *ngIf=\"paymentError && hasDateError\"\n    >\n    </bb-alert-ui>\n  </div>\n  <bb-billpay-payment-review-card [accountNumberMask]=\"accountNumberMasked\" [paymentReview]=\"paymentReview\">\n  </bb-billpay-payment-review-card>\n</ng-template>\n\n<ng-template #recurringEditReviewButtons>\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      data-role=\"confirm-payment-button\"\n      i18n=\"\n        Payment details confirm button|Label for confirm payment recurring\n        button@@billpay-payment-recurring-review.confirm\"\n      (click)=\"confirmPayment(payment)\"\n      class=\"bb-button-bar__button\"\n    >\n      Confirm payment\n    </button>\n    <button\n      *ngIf=\"id$ | async as paymentId\"\n      bbButton\n      data-role=\"edit-payment-button\"\n      i18n=\"\n        Payment details edit button|Label for edit payment payment recurring\n        button@@billpay-payment-recurring-review.edit\"\n      (click)=\"navigateToForm(paymentId)\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n    >\n      Edit payment\n    </button>\n    <button\n      bbButton\n      data-role=\"cancel-payment-button\"\n      i18n=\"\n        Payment details cancel button|Label for cancel payment payment recurring\n        button@@billpay-payment-recurring-review.cancel\"\n      (click)=\"cancel()\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n    >\n      Cancel\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <ng-container *ngIf=\"payment?.payeeTo as payee\">\n    <span\n      i18n=\"\n        payment notification message|Payment confirmation success notification\n        message@@billpay-payment-recurring-review.confirm.notification.message\"\n      >Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }} has been edited\n      successfully</span\n    >\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <span\n    i18n=\"\n      payment notification header|Payment confirmation success notification\n      header@@billpay-payment-recurring-review.confirm.notification.header\"\n    >Payment edited</span\n  >\n</ng-template>\n", components: [{ type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }, { type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1__namespace$1.BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: ["paymentReview", "accountNumberMask", "frequencyLabel"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentRecurringEditReviewContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-recurring-edit-review-container',
                        templateUrl: './billpay-payment-recurring-edit-review-container.component.html',
                        providers: [i1.BillpayDiscardChangesModalService],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActivatedRoute }, { type: PayBillsStateService }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: i1__namespace$1.BillpayPaymentParserService }, { type: PayBillsNavigationService }, { type: i1__namespace$1.BillpayPaymentDataService }, { type: i5__namespace$2.NotificationService }, { type: i0__namespace.ChangeDetectorRef }]; } });

    var BillpayPaymentRecurringEditReviewViewComponent = /** @class */ (function () {
        function BillpayPaymentRecurringEditReviewViewComponent(config, routerService) {
            this.config = config;
            this.routerService = routerService;
        }
        BillpayPaymentRecurringEditReviewViewComponent.prototype.openModal = function () {
            return this.child.openModal();
        };
        BillpayPaymentRecurringEditReviewViewComponent.prototype.goBack = function () {
            this.routerService.navigateToPayments();
        };
        return BillpayPaymentRecurringEditReviewViewComponent;
    }());
    BillpayPaymentRecurringEditReviewViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentRecurringEditReviewViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentRecurringEditReviewViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentRecurringEditReviewViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentRecurringEditReviewContainer"], descendants: true }], ngImport: i0__namespace, template: "\n    <div class=\"bb-block\">\n      <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n        <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n        <span i18n=\"button label|Back button@@pay-bills-journey.payments-list.back\">Back to payments list</span>\n      </button>\n    </div>\n    <bb-billpay-payment-recurring-edit-review-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [dismissTimeoutValue]=\"config.notificationDismissTime\"\n      #paymentRecurringEditReviewContainer\n    ></bb-billpay-payment-recurring-edit-review-container>\n  ", isInline: true, components: [{ type: BillpayPaymentRecurringEditReviewContainerComponent, selector: "bb-billpay-payment-recurring-edit-review-container" }], directives: [{ type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentRecurringEditReviewViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: "\n    <div class=\"bb-block\">\n      <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n        <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n        <span i18n=\"button label|Back button@@pay-bills-journey.payments-list.back\">Back to payments list</span>\n      </button>\n    </div>\n    <bb-billpay-payment-recurring-edit-review-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [dismissTimeoutValue]=\"config.notificationDismissTime\"\n      #paymentRecurringEditReviewContainer\n    ></bb-billpay-payment-recurring-edit-review-container>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                    type: i0.ViewChild,
                    args: ['paymentRecurringEditReviewContainer']
                }] } });

    var BillpayPaymentOneOffEditFormContainerComponent = /** @class */ (function (_super) {
        __extends(BillpayPaymentOneOffEditFormContainerComponent, _super);
        /** @internal */
        function BillpayPaymentOneOffEditFormContainerComponent(dataService, stateService, route, discardModalService, routerService, parserService) {
            var _this = _super.call(this, dataService, stateService, route, discardModalService, routerService) || this;
            _this.routerService = routerService;
            _this.parserService = parserService;
            _this.hasLoadingError = false;
            _this.activatedRoute = route;
            return _this;
        }
        BillpayPaymentOneOffEditFormContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.paymentOneOffState$ = rxjs.combineLatest([
                this.id$,
                this.stateService.paymentState.pipe(operators.map(function (state) { return state === null || state === void 0 ? void 0 : state[0]; })),
                this.payeesAndAccounts$,
            ]).pipe(operators.switchMap(function (_b) {
                var _c = __read(_b, 3), id = _c[0], state = _c[1], payeesAndAccounts = _c[2];
                return state
                    ? rxjs.of(state)
                    : _this.dataService.getOneOffPayment(id).pipe(operators.map(function (payment) { return payment &&
                        payeesAndAccounts.payeeSummaries &&
                        _this.parserService.paymentOneOffToFormState(payment, payeesAndAccounts.payeeSummaries); }), operators.catchError(function () {
                        _this.hasLoadingError = true;
                        return rxjs.of({});
                    }));
            }));
        };
        BillpayPaymentOneOffEditFormContainerComponent.prototype.onPaymentSubmitted = function (payment, id) {
            var _a;
            this.stateService.isFormProcessing = true;
            this.stateService.updatePaymentState([payment]);
            this.routerService.navigateToEditOneOffReview(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
        };
        return BillpayPaymentOneOffEditFormContainerComponent;
    }(BasePaymentEditFormContainerDirective));
    BillpayPaymentOneOffEditFormContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentOneOffEditFormContainerComponent, deps: [{ token: i1__namespace$1.BillpayPaymentDataService }, { token: PayBillsStateService }, { token: i1__namespace.ActivatedRoute }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: PayBillsNavigationService }, { token: i1__namespace$1.BillpayPaymentParserService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentOneOffEditFormContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditFormContainerComponent, selector: "bb-billpay-payment-one-off-edit-form-container", inputs: { frequencies: "frequencies" }, providers: [i1.BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  *ngIf=\"{\n    state: paymentOneOffState$ | async,\n    paymentId: id$ | async,\n    accounts: (payeesAndAccounts$ | async)?.accounts,\n    payeeSummaries: (payeesAndAccounts$ | async)?.payeeSummaries\n  } as data\"\n>\n  <ng-container *ngIf=\"data.state; else loadingState\">\n    <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n      <bb-billpay-payment-form\n        [payeeSummaries]=\"data.payeeSummaries\"\n        [accounts]=\"data.accounts\"\n        [selectedPayeeId]=\"data.state?.payeeTo?.id\"\n        [paymentState]=\"data.state\"\n        [isEditPayment]=\"true\"\n        [paymentType]=\"'oneOff'\"\n        (cancelPayment)=\"onCancelForm()\"\n        [accountNumberMask]=\"accountNumberMasked\"\n        (submitPayment)=\"onPaymentSubmitted($event, data.paymentId)\"\n        (valueChanged)=\"onFormValueChanged()\"\n        [paymentDetailsTitle]=\"paymentDetailsTitle\"\n        [frequencies]=\"frequencies\"\n      >\n      </bb-billpay-payment-form>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-loading-indicator-ui loaderSize=\"lg\" data-role=\"loading-state\"> </bb-loading-indicator-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"\n            Try to reload the page or contact support|Payee List loading\n            subtitle@@bb-billpay-manage-payment-widget-ang.loading.subtitle\"\n          title=\"Payment information is not loading\"\n          i18n-title=\"\n            Payment information is not loading|Form List loading\n            title@@bb-billpay-manage-payment-widget-ang.loading.title\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <bb-billpay-payment-discard-changes-modal\n    *ngIf=\"isDiscardModalOpen\"\n    data-role=\"billpay-payment-edit-form-page-lose-changes-modal\"\n    (resolve)=\"onModalResolve($event)\"\n    title=\"Lose changes?\"\n    i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n    subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n    i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n    confirm-button-label=\"Lose changes\"\n    i18n-confirm-button-label=\"\n      confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n    cancel-button-label=\"Continue editing\"\n    i18n-cancel-button-label=\"\n      cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n  ></bb-billpay-payment-discard-changes-modal>\n</ng-container>\n", components: [{ type: BillpayPaymentFormComponent, selector: "bb-billpay-payment-form", inputs: ["payeeSummaries", "accounts", "selectedPayeeId", "paymentState", "paymentId", "accountNumberMask", "paymentType", "isEditPayment", "paymentDetailsTitle", "paymentDefaultCurrency", "frequencies"], outputs: ["submitPayment", "cancelPayment", "valueChanged"] }, { type: i6__namespace$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7__namespace$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentOneOffEditFormContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-one-off-edit-form-container',
                        templateUrl: './billpay-payment-one-off-edit-form-container.component.html',
                        providers: [i1.BillpayDiscardChangesModalService],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.BillpayPaymentDataService }, { type: PayBillsStateService }, { type: i1__namespace.ActivatedRoute }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: PayBillsNavigationService }, { type: i1__namespace$1.BillpayPaymentParserService }]; }, propDecorators: { frequencies: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentOneOffEditFormViewComponent = /** @class */ (function () {
        function BillpayPaymentOneOffEditFormViewComponent(config, routerService) {
            this.config = config;
            this.routerService = routerService;
        }
        BillpayPaymentOneOffEditFormViewComponent.prototype.openModal = function () {
            return this.child.openModal();
        };
        BillpayPaymentOneOffEditFormViewComponent.prototype.goBack = function () {
            this.routerService.navigateToPayments();
        };
        return BillpayPaymentOneOffEditFormViewComponent;
    }());
    BillpayPaymentOneOffEditFormViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentOneOffEditFormViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentOneOffEditFormViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditFormViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentOneOffEditForm"], descendants: true }], ngImport: i0__namespace, template: "\n    <div class=\"bb-block\">\n      <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n        <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n        <span i18n=\"button label|Back button@@pay-bills-journey.payments-list.back\">Back to payments list</span>\n      </button>\n    </div>\n    <bb-billpay-payment-one-off-edit-form-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [paymentDetailsTitle]=\"config.paymentDetailsTitle\"\n      [frequencies]=\"config.frequencies\"\n      #paymentOneOffEditForm\n    ></bb-billpay-payment-one-off-edit-form-container>\n  ", isInline: true, components: [{ type: BillpayPaymentOneOffEditFormContainerComponent, selector: "bb-billpay-payment-one-off-edit-form-container", inputs: ["frequencies"] }], directives: [{ type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentOneOffEditFormViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: "\n    <div class=\"bb-block\">\n      <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n        <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n        <span i18n=\"button label|Back button@@pay-bills-journey.payments-list.back\">Back to payments list</span>\n      </button>\n    </div>\n    <bb-billpay-payment-one-off-edit-form-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [paymentDetailsTitle]=\"config.paymentDetailsTitle\"\n      [frequencies]=\"config.frequencies\"\n      #paymentOneOffEditForm\n    ></bb-billpay-payment-one-off-edit-form-container>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                    type: i0.ViewChild,
                    args: ['paymentOneOffEditForm']
                }] } });

    var BillpayPaymentOneOffEditReviewContainerComponent = /** @class */ (function (_super) {
        __extends(BillpayPaymentOneOffEditReviewContainerComponent, _super);
        /** @internal */
        function BillpayPaymentOneOffEditReviewContainerComponent(route, stateService, discardModalService, paymentParserService, routerService, dataService, notificationService, cdRef) {
            var _this = _super.call(this, route, stateService, discardModalService, paymentParserService, routerService) || this;
            _this.routerService = routerService;
            _this.dataService = dataService;
            _this.notificationService = notificationService;
            _this.cdRef = cdRef;
            _this.activatedRoute = route;
            return _this;
        }
        BillpayPaymentOneOffEditReviewContainerComponent.prototype.navigateToForm = function (id) {
            var _a;
            this.routerService.navigateToEditOneOffForm(id, { relativeTo: (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.parent });
        };
        BillpayPaymentOneOffEditReviewContainerComponent.prototype.onPaymentConfirm = function (payment, id) {
            var _this = this;
            this.paymentError = false;
            this.hasDateError = false;
            this.dataService
                .updatePaymentOneOff(payment, id)
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.routerService.navigateToPayments();
                _this.notificationService.showNotification({
                    header: _this.notificationHeaderTemplate,
                    message: _this.notificationMessageTemplate,
                    modifier: 'success',
                    ttl: _this.dismissTimeout,
                });
            }, function (error) {
                var _a, _b;
                _this.paymentError = true;
                _this.hasDateError = (_b = (_a = error.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.some(function (a) { return a.key === 'billpay.api.invalidPaymentDate'; });
                _this.cdRef.detectChanges();
                _this.failAlert.nativeElement.scrollIntoView(false);
            });
        };
        return BillpayPaymentOneOffEditReviewContainerComponent;
    }(BasePaymentEditReviewContainerDirective));
    BillpayPaymentOneOffEditReviewContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentOneOffEditReviewContainerComponent, deps: [{ token: i1__namespace.ActivatedRoute }, { token: PayBillsStateService }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: i1__namespace$1.BillpayPaymentParserService }, { token: PayBillsNavigationService }, { token: i1__namespace$1.BillpayPaymentDataService }, { token: i5__namespace$2.NotificationService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentOneOffEditReviewContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditReviewContainerComponent, selector: "bb-billpay-payment-one-off-edit-review-container", providers: [i1.BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"payment\">\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-block bb-block--xl\">\n        <ng-container *ngTemplateOutlet=\"oneOffEditReviewContent\"></ng-container>\n      </div>\n\n      <ng-container *ngTemplateOutlet=\"oneOffEditReviewButtons\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-edit-review-page-lose-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Lose changes?\"\n  i18n-title=\"Lose changes modal header@@billpay.manage-payment.lose-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel editing this payment? You will lose any changes made.\"\n  i18n-subtitle=\"Lose changes modal body@@billpay.manage-payment.lose-changes-modal.body\"\n  confirm-button-label=\"Lose changes\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.manage-payment.lose-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue editing\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.manage-payment.lose-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n\n<ng-template #oneOffEditReviewContent>\n  <div #failAlert>\n    <bb-alert-ui\n      title=\"Failed to submit payment. Please try again later.\"\n      i18n-title=\"Failed to submit payment|Title for payment error@@billpay-payment-review-container.error-alert\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-message\"\n      *ngIf=\"paymentError && !hasDateError\"\n    >\n    </bb-alert-ui>\n    <bb-alert-ui\n      title=\"The date selected is invalid.\"\n      i18n-title=\"\n        Failed to submit payment date|Title for payment date error@@billpay-payment-review-container.error-date-alert\"\n      message=\"The payment cannot be scheduled on this date. Please select another date in the previous step.\"\n      i18n-message=\"Date payment error|Date error for payment@@billpay-payment-review.date-error-alert.message\"\n      (close)=\"(false)\"\n      modifier=\"error\"\n      data-role=\"failure-date-message\"\n      *ngIf=\"paymentError && hasDateError\"\n    >\n    </bb-alert-ui>\n  </div>\n  <bb-billpay-payment-review-card [accountNumberMask]=\"accountNumberMasked\" [paymentReview]=\"paymentReview\">\n  </bb-billpay-payment-review-card>\n</ng-template>\n\n<ng-template #oneOffEditReviewButtons>\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      data-role=\"confirm-payment-button\"\n      i18n=\"\n        Payment details confirm button|Label for confirm payment oneOff button@@billpay-payment-oneOff-review.confirm\"\n      (click)=\"confirmPayment(payment)\"\n      class=\"bb-button-bar__button\"\n    >\n      Confirm payment\n    </button>\n    <button\n      *ngIf=\"id$ | async as paymentId\"\n      bbButton\n      data-role=\"edit-payment-button\"\n      i18n=\"\n        Payment details edit button|Label for edit payment payment oneOff button@@billpay-payment-oneOff-review.edit\"\n      (click)=\"navigateToForm(paymentId)\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n    >\n      Edit payment\n    </button>\n    <button\n      bbButton\n      data-role=\"cancel-payment-button\"\n      i18n=\"\n        Payment details cancel button|Label for cancel payment payment oneOff\n        button@@billpay-payment-oneOff-review.cancel\"\n      (click)=\"cancel()\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n    >\n      Cancel\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <ng-container *ngIf=\"payment?.payeeTo as payee\">\n    <span\n      i18n=\"\n        payment notification message|Payment confirmation success notification\n        message@@billpay-payment-oneOff-review.confirm.notification.message\"\n      >Payment to {{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }} has been edited\n      successfully</span\n    >\n  </ng-container>\n</ng-template>\n\n<ng-template notificationHeader>\n  <span\n    i18n=\"\n      payment notification header|Payment confirmation success notification\n      header@@billpay-payment-oneOff-review.confirm.notification.header\"\n    >Payment edited</span\n  >\n</ng-template>\n", components: [{ type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }, { type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i1__namespace$1.BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: ["paymentReview", "accountNumberMask", "frequencyLabel"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentOneOffEditReviewContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-one-off-edit-review-container',
                        templateUrl: './billpay-payment-one-off-edit-review-container.component.html',
                        providers: [i1.BillpayDiscardChangesModalService],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActivatedRoute }, { type: PayBillsStateService }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: i1__namespace$1.BillpayPaymentParserService }, { type: PayBillsNavigationService }, { type: i1__namespace$1.BillpayPaymentDataService }, { type: i5__namespace$2.NotificationService }, { type: i0__namespace.ChangeDetectorRef }]; } });

    var BillpayPaymentOneOffEditReviewViewComponent = /** @class */ (function () {
        function BillpayPaymentOneOffEditReviewViewComponent(config, routerService) {
            this.config = config;
            this.routerService = routerService;
        }
        BillpayPaymentOneOffEditReviewViewComponent.prototype.openModal = function () {
            return this.child.openModal();
        };
        BillpayPaymentOneOffEditReviewViewComponent.prototype.goBack = function () {
            this.routerService.navigateToPayments();
        };
        return BillpayPaymentOneOffEditReviewViewComponent;
    }());
    BillpayPaymentOneOffEditReviewViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentOneOffEditReviewViewComponent, deps: [{ token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentOneOffEditReviewViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentOneOffEditReviewViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["paymentOneOffEditReviewContainer"], descendants: true }], ngImport: i0__namespace, template: "\n    <div class=\"bb-block\">\n      <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n        <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n        <span i18n=\"button label|Back button@@pay-bills-journey.payments-list.back\">Back to payments list</span>\n      </button>\n    </div>\n    <bb-billpay-payment-one-off-edit-review-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [dismissTimeoutValue]=\"config.notificationDismissTime\"\n      #paymentOneOffEditReviewContainer\n    ></bb-billpay-payment-one-off-edit-review-container>\n  ", isInline: true, components: [{ type: BillpayPaymentOneOffEditReviewContainerComponent, selector: "bb-billpay-payment-one-off-edit-review-container" }], directives: [{ type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentOneOffEditReviewViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: "\n    <div class=\"bb-block\">\n      <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"goBack()\">\n        <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n        <span i18n=\"button label|Back button@@pay-bills-journey.payments-list.back\">Back to payments list</span>\n      </button>\n    </div>\n    <bb-billpay-payment-one-off-edit-review-container\n      [accountNumberMasked]=\"config.accountNumberMasked\"\n      [dismissTimeoutValue]=\"config.notificationDismissTime\"\n      #paymentOneOffEditReviewContainer\n    ></bb-billpay-payment-one-off-edit-review-container>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                    type: i0.ViewChild,
                    args: ['paymentOneOffEditReviewContainer']
                }] } });

    var BillpayPaymentFrequencyComponent = /** @class */ (function () {
        function BillpayPaymentFrequencyComponent() {
            this.destroy$ = new rxjs.Subject();
            this.id = i1.BillpayUtilityService.generateId();
        }
        BillpayPaymentFrequencyComponent.prototype.ngOnInit = function () {
            this.processFrequencyValueChanges();
        };
        BillpayPaymentFrequencyComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        BillpayPaymentFrequencyComponent.prototype.processFrequencyValueChanges = function () {
            if (!this.scheduleForm)
                return;
            var endTypeControl = this.scheduleForm.controls['endType'];
            var endDateControl = this.scheduleForm.controls['endDate'];
            var repeatControl = this.scheduleForm.controls['repeat'];
            var startDateControl = this.scheduleForm.controls['startDate'];
            var paymentServiceControl = this.scheduleForm.controls['paymentService'];
            var frequencyControl = this.scheduleForm.controls['frequency'];
            var paymentServiceDateControl = this.scheduleForm.controls['paymentServiceDate'];
            var sendDateControl = this.scheduleForm.controls['sendDate'];
            if (startDateControl && frequencyControl && paymentServiceControl && endTypeControl && endDateControl) {
                frequencyControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (value) {
                    if (value === i1.FrequencyKeys.Once) {
                        paymentServiceControl.enable(i1.formControlOptions);
                        sendDateControl.enable(i1.formControlOptions);
                        paymentServiceControl.updateValueAndValidity();
                        paymentServiceDateControl.enable(i1.formControlOptions);
                        endDateControl.disable(i1.formControlOptions);
                        endTypeControl.disable(i1.formControlOptions);
                        repeatControl.disable(i1.formControlOptions);
                    }
                    else {
                        paymentServiceControl.disable(i1.formControlOptions);
                        paymentServiceDateControl.disable(i1.formControlOptions);
                        sendDateControl.disable(i1.formControlOptions);
                        startDateControl.enable(i1.formControlOptions);
                        endDateControl.enable(i1.formControlOptions);
                        repeatControl.enable(i1.formControlOptions);
                        endTypeControl.enable();
                    }
                });
            }
        };
        return BillpayPaymentFrequencyComponent;
    }());
    BillpayPaymentFrequencyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentFrequencyComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentFrequencyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentFrequencyComponent, selector: "bb-billpay-payment-frequency", inputs: { scheduleForm: "scheduleForm", frequencies: "frequencies" }, ngImport: i0__namespace, template: "<div class=\"bb-form-field bb-form-field--md bb-block bb-block--md\">\n  <label\n    data-role=\"billpay-payment-frequency-label\"\n    class=\"form-label\"\n    i18n=\"@@billpay.billpay-payment-schedule.label.frequency\"\n    [id]=\"'billpay-payment-frequency-label' + id\"\n  >\n    Frequency\n  </label>\n  <bb-dropdown-single-select-ui\n    [formControl]=\"scheduleForm?.get('frequency')\"\n    [aria-labelledby]=\"'billpay-payment-frequency-label' + id\"\n    data-role=\"billpay-payment-frequency\"\n  >\n    <bb-dropdown-single-select-option-ui\n      *ngFor=\"let frequency of frequencies\"\n      [value]=\"frequency.value\"\n      [label]=\"frequency.name\"\n    >\n    </bb-dropdown-single-select-option-ui>\n  </bb-dropdown-single-select-ui>\n</div>\n", components: [{ type: i2__namespace$1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2__namespace$1.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }], directives: [{ type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentFrequencyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-frequency',
                        templateUrl: './billpay-payment-frequency.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { scheduleForm: [{
                    type: i0.Input
                }], frequencies: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentStartDateComponent = /** @class */ (function () {
        function BillpayPaymentStartDateComponent() {
            this.frequencyValues = i1.FrequencyKeys;
            this.id = i1.BillpayUtilityService.generateId();
        }
        Object.defineProperty(BillpayPaymentStartDateComponent.prototype, "formValue", {
            get: function () {
                var _a;
                return (_a = this.scheduleForm) === null || _a === void 0 ? void 0 : _a.getRawValue();
            },
            enumerable: false,
            configurable: true
        });
        return BillpayPaymentStartDateComponent;
    }());
    BillpayPaymentStartDateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentStartDateComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentStartDateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentStartDateComponent, selector: "bb-billpay-payment-start-date", inputs: { scheduleForm: "scheduleForm", frequencies: "frequencies", minDate: "minDate" }, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--md\" *ngIf=\"formValue?.frequency !== frequencyValues.Once\">\n  <label id=\"billpay-start-date-{{ id }}\" class=\"bb-text-bold\">\n    <span\n      *ngIf=\"true\"\n      i18n-label=\"@@billpay.billpay-payment-start-date.label.start\"\n      data-role=\"billpay-start-date-label\"\n      id=\"'billpay-start-date-' + {{ id }}\"\n    >\n      Start On\n    </span>\n  </label>\n  <div class=\"bb-form-field bb-form-field--sm\">\n    <bb-input-datepicker-ui\n      [aria-labelledby]=\"'billpay-start-date-' + id\"\n      [formControl]=\"scheduleForm?.get('startDate')\"\n      [minDate]=\"minDate\"\n      data-role=\"billpay-start-date-calendar\"\n      [datepickerDescribedby]=\"'billpay-start-date-error-{{ id }}'\"\n    ></bb-input-datepicker-ui>\n  </div>\n\n  <bb-input-validation-message-ui\n    id=\"billpay-start-date-error-{{ id }}\"\n    role=\"alert\"\n    [showErrors]=\"scheduleForm?.get('startDate')?.invalid && scheduleForm?.get('startDate')?.touched\"\n  >\n    <span\n      *ngIf=\"scheduleForm?.get('startDate')?.errors?.required\"\n      i18n=\"@@billpay.billpay-payment-start-date.error.required.startDate\"\n      data-role=\"missing-schedule-execution-date\"\n    >\n      Execution date is required.\n    </span>\n    <span\n      *ngIf=\"\n        scheduleForm?.get('startDate')?.errors?.pastDate || scheduleForm?.get('startDate')?.errors?.dateLessThanMinDate\n      \"\n      i18n=\"@@billpay.billpay-payment-start-date.error.pastDate.startDate\"\n      data-role=\"past-date-schedule-execution-date\"\n    >\n      Execution date could not be in a past.\n    </span>\n    <span\n      *ngIf=\"scheduleForm?.get('startDate')?.errors?.invalidDateFormat\"\n      i18n=\"@@billpay.billpay-payment-start-date.error.invalidDateFormat\"\n      data-role=\"invalid-date-schedule-execution-date\"\n    >\n      Invalid date format.\n    </span>\n  </bb-input-validation-message-ui>\n</div>\n", components: [{ type: i4__namespace$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i5__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentStartDateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-start-date',
                        templateUrl: './billpay-payment-start-date.component.html',
                    }]
            }], propDecorators: { scheduleForm: [{
                    type: i0.Input
                }], frequencies: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentEndDateComponent = /** @class */ (function () {
        function BillpayPaymentEndDateComponent() {
            this.endTypes = i1.EndTypes;
            this.frequencyValues = i1.FrequencyKeys;
            this.id = i1.BillpayUtilityService.generateId();
            this.destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(BillpayPaymentEndDateComponent.prototype, "formValue", {
            get: function () {
                var _a;
                return (_a = this.scheduleForm) === null || _a === void 0 ? void 0 : _a.getRawValue();
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentEndDateComponent.prototype.ngOnInit = function () {
            this.processEndTypeValueChanges();
        };
        BillpayPaymentEndDateComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        BillpayPaymentEndDateComponent.prototype.processEndTypeValueChanges = function () {
            if (!this.scheduleForm)
                return;
            var endTypeControl = this.scheduleForm.controls['endType'];
            var endDateControl = this.scheduleForm.controls['endDate'];
            var repeatControl = this.scheduleForm.controls['repeat'];
            if (endTypeControl && endDateControl && repeatControl) {
                endTypeControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (value) {
                    switch (value) {
                        case i1.EndTypes.After: {
                            repeatControl.enable(i1.formControlOptions);
                            endDateControl.disable(i1.formControlOptions);
                            break;
                        }
                        case i1.EndTypes.On: {
                            endDateControl.enable(i1.formControlOptions);
                            repeatControl.disable(i1.formControlOptions);
                            break;
                        }
                        case i1.EndTypes.Never:
                        default: {
                            endDateControl.disable(i1.formControlOptions);
                            repeatControl.disable(i1.formControlOptions);
                            break;
                        }
                    }
                });
            }
        };
        return BillpayPaymentEndDateComponent;
    }());
    BillpayPaymentEndDateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentEndDateComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentEndDateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentEndDateComponent, selector: "bb-billpay-payment-end-date", inputs: { scheduleForm: "scheduleForm" }, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--md\" [hidden]=\"formValue?.frequency == frequencyValues.Once\">\n  <label\n    id=\"billpay-end-date-label-{{ id }}\"\n    data-role=\"billpay-form-end-date-label\"\n    class=\"bb-label\"\n    i18n=\"@@billpay.billpay-payment-end-date.label.ending\"\n  >\n    End\n  </label>\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div class=\"bb-stack__item\">\n      <bb-input-radio-group-ui\n        data-role=\"billpay-end-date-options\"\n        [required]=\"true\"\n        [aria-labelledby]=\"'billpay-end-date-label-' + id\"\n        [formControl]=\"scheduleForm?.get('endType')\"\n      >\n        <bb-input-radio-ui\n          [value]=\"endTypes.Never\"\n          label=\"Never\"\n          aria-invalid=\"false\"\n          data-role=\"ending-never-selector\"\n          i18n-label=\"\n            Schedule never ends|Label for an option to never end the payment\n            schedule@@billpay.billpay-payment-end-date.label.ending.never\"\n          role=\"radio\"\n        >\n        </bb-input-radio-ui>\n        <bb-input-radio-ui\n          [value]=\"endTypes.On\"\n          aria-invalid=\"false\"\n          [labelTemplate]=\"endingTemplate\"\n          data-role=\"ending-on-selector\"\n          role=\"radio\"\n        >\n        </bb-input-radio-ui>\n        <bb-input-radio-ui\n          [value]=\"endTypes.After\"\n          aria-invalid=\"false\"\n          data-role=\"ending-after-selector\"\n          [labelTemplate]=\"afterTemplate\"\n          role=\"radio\"\n        >\n        </bb-input-radio-ui>\n        <ng-template #endingTemplate>\n          <div class=\"bb-stack\">\n            <span\n              data-role=\"ending-date-on-label\"\n              class=\"bb-stack__item bb-stack__item--spacing-lg\"\n              i18n=\"@@billpay.billpay-payment-end-date.label.ending.on\"\n              id=\"billpay-end-date-on-{{ id }}\"\n              >On</span\n            >\n            <div class=\"bb-stack__item\">\n              <bb-input-datepicker-ui\n                [formControl]=\"scheduleForm?.get('endDate')\"\n                data-role=\"ending-end-date\"\n                i18n-aria-label=\"@@billpay.billpay-payment-end-date.label.end-date\"\n                aria-label=\"end-date\"\n                [minDate]=\"scheduleForm?.get('startDate')?.value\"\n                placement=\"top-right\"\n                datepickerDescribedby=\"billpay-end-date-on-{{ id }}\"\n                aria-labelledby=\"billpay-end-date-on-{{ id }}\"\n              ></bb-input-datepicker-ui>\n              <bb-input-validation-message-ui\n                role=\"alert\"\n                *ngIf=\"scheduleForm?.get('endDate') as control\"\n                [showErrors]=\"control?.invalid && control?.touched\"\n              >\n                <span\n                  *ngIf=\"control.errors?.pastDate || control.errors?.dateLessThanMinDate\"\n                  i18n=\"\n                    End date past date error text |Error past date message for End date input\n                    field@@billpay.billpay-payment-end-date.past-date-error\"\n                  data-role=\"past-date-ending-end-date\"\n                >\n                  End date could not be lower than start date.\n                </span>\n                <span\n                  *ngIf=\"control.errors?.invalidDateFormat\"\n                  i18n=\"@@billpay.billpay-payment-end-date.invalid-date-format-error\"\n                  data-role=\"invalid-date-schedule-end-date\"\n                >\n                  Invalid date format.\n                </span>\n                <span\n                  *ngIf=\"control.errors?.required\"\n                  i18n=\"@@billpay.billpay-payment-end-date.date-required-error\"\n                  data-role=\"required-date-schedule-end-date\"\n                >\n                  End date is required.\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </ng-template>\n        <ng-template #afterTemplate>\n          <div class=\"bb-stack\">\n            <span\n              class=\"bb-stack__item bb-stack__item--spacing-sm\"\n              i18n=\"@@billpay.billpay-payment-end-date.label.ending.after\"\n            >\n              After\n            </span>\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item bb-form-field bb-form-field--xs\">\n                  <bb-input-number-ui\n                    [formControl]=\"scheduleForm?.get('repeat')\"\n                    data-role=\"ending-occurrences\"\n                    aria-label=\"occurrences\"\n                  ></bb-input-number-ui>\n                </div>\n                <span class=\"bb-stack__item\" i18n-label=\"@@billpay.billpay-payment-end-date.label.ending.occurrences\">\n                  Occurrences\n                </span>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n      </bb-input-radio-group-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2__namespace.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2__namespace.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i4__namespace$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i5__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6__namespace.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }], directives: [{ type: i1__namespace$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4__namespace$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentEndDateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-end-date',
                        templateUrl: './billpay-payment-end-date.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { scheduleForm: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentCompactProductSelectorComponent = /** @class */ (function () {
        function BillpayPaymentCompactProductSelectorComponent() {
            this.selectItem = new i0.EventEmitter();
        }
        BillpayPaymentCompactProductSelectorComponent.prototype.onSelectItem = function (account) {
            this.selectItem.emit(account);
        };
        return BillpayPaymentCompactProductSelectorComponent;
    }());
    BillpayPaymentCompactProductSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentCompactProductSelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentCompactProductSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentCompactProductSelectorComponent, selector: "bb-billpay-payment-compact-product-selector", inputs: { paymentForm: "paymentForm", accounts: "accounts", productNumberFormat: "productNumberFormat" }, outputs: { selectItem: "selectItem" }, ngImport: i0__namespace, template: "<div class=\"bb-form-field bb-form-field--md\">\n  <label\n    i18n=\"@@bb-billpay-multiple-bills-list-item.product-selector.label\"\n    data-role=\"multiple-bills-form-from-account-label\"\n    >Pay From</label\n  >\n  <bb-product-selector-ui [autoClose]=\"true\" *ngIf=\"paymentForm?.get('accountFrom')?.value as selectedAccount\">\n    <ng-container bbDropdownToggle>\n      <ng-container *ngTemplateOutlet=\"productItemContent; context: { $implicit: selectedAccount }\"></ng-container>\n    </ng-container>\n    <ng-container bbDropdownMenu>\n      <ng-container *ngIf=\"accounts?.length\">\n        <button\n          *ngFor=\"let account of accounts\"\n          (click)=\"onSelectItem(account)\"\n          bbButton\n          color=\"unstyled\"\n          class=\"bb-product-selector__dropdown-item bb-billpay-multiple-bills-selector\"\n          data-role=\"product-selector-dropdown-item\"\n          [ngClass]=\"{\n            'bb-billpay-multiple-bills-selector--selected-bg': account.accountNumber === selectedAccount?.accountNumber\n          }\"\n        >\n          <ng-container *ngTemplateOutlet=\"productItemContent; context: { $implicit: account }\"></ng-container>\n        </button>\n      </ng-container>\n    </ng-container>\n  </bb-product-selector-ui>\n</div>\n\n<ng-template #productItemContent let-account>\n  <bb-ellipsis-ui [text]=\"account?.accountNickName\" data-role=\"compact-product-selector-account-name\"></bb-ellipsis-ui>\n  <div class=\"bb-account-info bb-text-default\">\n    <bb-ellipsis-ui\n      [text]=\"account?.accountNumber | paymentCardNumber: productNumberFormat\"\n      class=\"bb-account-info__product-number\"\n      data-role=\"compact-product-selector-account-number\"\n    ></bb-ellipsis-ui>\n  </div>\n  <bb-amount-ui\n    class=\"bb-subtitle bb-text-bold\"\n    [currency]=\"account?.accountBalance?.currencyCode\"\n    [amount]=\"account?.accountBalance?.amount\"\n    [mapCurrency]=\"true\"\n    data-role=\"compact-product-selector-amount\"\n  >\n  </bb-amount-ui>\n</ng-template>\n", components: [{ type: i5__namespace$1.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i2__namespace$2.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i3__namespace$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "paymentCardNumber": i6__namespace$3.PaymentCardNumberPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentCompactProductSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-compact-product-selector',
                        templateUrl: './billpay-payment-compact-product-selector.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { paymentForm: [{
                    type: i0.Input
                }], accounts: [{
                    type: i0.Input
                }], productNumberFormat: [{
                    type: i0.Input
                }], selectItem: [{
                    type: i0.Output
                }] } });

    var BillpayPaymentMultipleBillsListItemComponent = /** @class */ (function (_super) {
        __extends(BillpayPaymentMultipleBillsListItemComponent, _super);
        function BillpayPaymentMultipleBillsListItemComponent(payeeDataService, dropdownButtonConfig, mediaQueryService, scheduleService, configService, navigationService) {
            var _this = _super.call(this, payeeDataService, dropdownButtonConfig) || this;
            _this.mediaQueryService = mediaQueryService;
            _this.scheduleService = scheduleService;
            _this.configService = configService;
            _this.navigationService = navigationService;
            _this.isCollapsed = true;
            _this.id = i1.BillpayUtilityService.generateId();
            _this.productNumberFormat = _this.configService.productNumberFormat;
            _this.frequencies = _this.configService.frequencies;
            return _this;
        }
        Object.defineProperty(BillpayPaymentMultipleBillsListItemComponent.prototype, "latestBill", {
            get: function () {
                var _a, _b;
                return (_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.latestBill;
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentMultipleBillsListItemComponent.prototype.ngOnInit = function () {
            var _a, _b;
            this.minDate = this.scheduleService.estimatedPaymentServiceDate((_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.paymentServices, i1.PaymentServicesTypes.Regular);
            this.syncPeerFields((_b = this.paymentForm) === null || _b === void 0 ? void 0 : _b.get('schedule.sendDate'));
        };
        // Sync peer datepicker fields that are duplicated for the sake of responsive designs
        BillpayPaymentMultipleBillsListItemComponent.prototype.syncPeerFields = function (formControl) {
            this.mediaQueryService
                .isMediaBreakpointMatches('max-width', 'lg')
                .pipe(operators.takeUntil(this.destroy$), operators.distinctUntilChanged())
                .subscribe(function () {
                formControl === null || formControl === void 0 ? void 0 : formControl.patchValue(formControl.value, { emitEvent: false, onlySelf: true });
            });
        };
        BillpayPaymentMultipleBillsListItemComponent.prototype.selectItem = function (account) {
            var _a;
            (_a = this.paymentForm) === null || _a === void 0 ? void 0 : _a.patchValue({ accountFrom: account });
        };
        BillpayPaymentMultipleBillsListItemComponent.prototype.handleEditPayee = function () {
            var _a;
            if (this.payeeSummary && !this.payeeSummary.electronic) {
                this.navigationService.navigateToEditManualPayee(this.payeeSummary.id);
            }
            else if ((_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.electronic) {
                this.navigationService.navigateToEditElectronicPayee(this.payeeSummary.id);
            }
        };
        BillpayPaymentMultipleBillsListItemComponent.prototype.handleViewSummary = function () {
            if (this.payeeSummary) {
                this.navigationService.navigateToPayeeSummary(this.payeeSummary.id);
            }
        };
        BillpayPaymentMultipleBillsListItemComponent.prototype.handleGetEbills = function () {
            if (this.payeeSummary) {
                this.navigationService.navigateToPayverisEbillEnrol(this.payeeSummary.id);
            }
        };
        return BillpayPaymentMultipleBillsListItemComponent;
    }(i1.BillpayPayeeSummaryItemBaseComponent));
    BillpayPaymentMultipleBillsListItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsListItemComponent, deps: [{ token: i1__namespace$1.BillpayPayeeDataService }, { token: i2__namespace$3.NgbDropdownConfig }, { token: i3__namespace$3.MediaQueryService }, { token: i1__namespace$1.BillpayPaymentScheduleService }, { token: PayBillsJourneyConfigService }, { token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsListItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsListItemComponent, selector: "bb-billpay-multiple-bills-list-item", inputs: { payeeSummary: "payeeSummary", paymentForm: "paymentForm", accounts: "accounts", inheritedId: "inheritedId" }, usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-billpay-multiple-bills-list-item__content\">\n  <div class=\"bb-billpay-multiple-bills__grid-container\">\n    <div class=\"bb-billpay-multiple-bills__grid-item bb-stack__item bb-stack__item--spacing-sm\">\n      <ng-container *ngTemplateOutlet=\"payeeDescTemp\"></ng-container>\n    </div>\n    <div\n      class=\"bb-billpay-multiple-bills__grid-item bb-billpay-multiple-bills__grid-item--higher bb-text-align-center bb-d-none bb-d-lg-block\"\n      data-role=\"multiple-bills-list-titles-due-date\"\n    >\n      <span>{{ latestBill?.paymentDate | bbDate: 'MM/dd/y' }}</span>\n    </div>\n    <div\n      class=\"bb-text-align-left bb-text-align-right--lg-up bb-billpay-multiple-bills__grid-item bb-stack__item bb-stack__item--spacing-sm bb-billpay-multiple-bills__grid-item--second-row bb-billpay-multiple-bills__grid-item--higher\"\n      data-role=\"multiple-bills-minimum-amount-due\"\n    >\n      <bb-amount-ui\n        *ngIf=\"latestBill?.minAmountDue as minAmountDue\"\n        class=\"bb-text-bold\"\n        [currency]=\"minAmountDue.currencyCode || 'USD'\"\n        [amount]=\"minAmountDue.amount || 0\"\n      ></bb-amount-ui>\n    </div>\n    <div class=\"bb-billpay-multiple-bills__grid-item bb-d-none bb-d-lg-block bb-stack__item bb-stack__item--spacing-xs\">\n      <ng-container *ngTemplateOutlet=\"deliveryDateTemp\"></ng-container>\n    </div>\n    <div\n      class=\"bb-billpay-multiple-bills__grid-item bb-stack__item bb-stack__item--spacing-none bb-billpay-multiple-bills__grid-item--second-row\"\n    >\n      <ng-container *ngTemplateOutlet=\"amountInputTemp\"></ng-container>\n    </div>\n    <div\n      class=\"bb-billpay-multiple-bills__grid-item bb-billpay-multiple-bills__grid-item--higher bb-text-align-right bb-stack bb-stack--align-top\"\n    >\n      <div\n        class=\"bb-stack__item bb-stack__item--spacing-md bb-stack__item--push-right\"\n        data-role=\"multiple-bills-actions-list\"\n      >\n        <bb-dropdown-menu-ui\n          btnColor=\"text-link\"\n          container=\"body\"\n          icon=\"ellipsis-h\"\n          buttonSize=\"sm\"\n          iconSize=\"sm\"\n          [btnCircle]=\"true\"\n          [attr.aria-label]=\"'More options for ' + payeeName\"\n          i18n-attr.aria-label=\"\n            More options for payee aria label|Aria label for more payee\n            options@@bb-billpay-payee-list-item.aria-label.more-payee-options\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <ng-container *ngIf=\"payeeSummary?.ebill?.capable\">\n              <a\n              role=\"menuitem\"\n              target=\"_blank\"\n              data-role=\"stop-ebills-menu-item\"\n              class=\"dropdown-item bb-dropdown-single-select\"\n              *ngIf=\"showStopEbills\"\n              (bbKeyboardClick)=\"handleStopEbills($event)\"\n              >\n                <span\n                  i18n=\"\n                    Stop eBills dropdown list button|Button in the dropdown list for getting\n                    eBills@@bb-billpay-payee-summary-item.button.dropdown.stop-eBills\"\n                  >Stop eBills</span\n                >\n              </a>\n            </ng-container>\n\n            <a\n              role=\"menuitem\"\n              data-role=\"view-payee-menu-item\"\n              class=\"dropdown-item bb-dropdown-single-select\"\n              (bbKeyboardClick)=\"handleViewSummary($event)\"\n            >\n              <span\n                i18n=\"\n                  View payee dropdown list button|Button in the dropdown list for viewing the\n                  payee@@bb-billpay-payee-summary-item.button.dropdown.view-payee\"\n                >View payee</span\n              >\n            </a>\n            <a\n              role=\"menuitem\"\n              data-role=\"edit-payee-menu-item\"\n              class=\"dropdown-item bb-dropdown-single-select\"\n              (bbKeyboardClick)=\"handleEditPayee()\"\n            >\n              <span\n                i18n=\"\n                  Edit payee dropdown list button|Button in the dropdown list for editing the\n                  payee@@bb-billpay-payee-summary-item.button.dropdown.edit-payee\"\n                >Edit payee</span\n              >\n            </a>\n            <a\n              role=\"menuitem\"\n              data-role=\"delete-payee-menu-item\"\n              class=\"dropdown-item bb-dropdown-single-select\"\n              (bbKeyboardClick)=\"handleDeletePayee($event)\"\n            >\n              <span\n                i18n=\"\n                  Delete payee dropdown list button|Button in the dropdown list for deleting the\n                  payee@@bb-billpay-payee-summary-item.button.dropdown.delete-payee\"\n                >Delete payee</span\n              >\n            </a>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n      </div>\n      <div class=\"bb-stack__item\">\n        <button\n          bbButton\n          color=\"text-link\"\n          [circle]=\"true\"\n          aria-label=\"dropdown-button\"\n          buttonSize=\"sm\"\n          (click)=\"isCollapsed = !isCollapsed\"\n          [attr.aria-expanded]=\"!isCollapsed\"\n          [attr.aria-controls]=\"'collapse' + id\"\n          data-role=\"multiple-bills-item-dropdown-button\"\n        >\n          <bb-icon-ui\n            name=\"{{ isCollapsed ? 'toggle-down' : 'toggle-up' }}\"\n            data-role=\"schedule-toggle-icon\"\n          ></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div\n    [ngbCollapse]=\"isCollapsed\"\n    [attr.id]=\"'collapse' + id\"\n    class=\"bb-billpay-multiple-bills-list-item__collapsible-area\"\n  >\n    <div class=\"bb-stack bb-d-block bb-d-lg-flex\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-xl\">\n        <div class=\"bb-block bb-block--md\" *ngIf=\"accounts\">\n          <ng-container *ngTemplateOutlet=\"productSelectorTemp\"></ng-container>\n        </div>\n        <div class=\"bb-form-field bb-form-field--md bb-d-lg-none bb-block bb-block--md\">\n          <label\n            id=\"billpay-delivery-date-label-{{ id }}\"\n            i18n=\"@@bb-billpay-multiple-bills-list-item.sen-date.label\"\n            data-role=\"multiple-bills-form-delivery-date-label\"\n            >Est. Delivery</label\n          >\n          <ng-container *ngTemplateOutlet=\"deliveryDateTemp\"></ng-container>\n        </div>\n        <div>\n          <ng-container *ngTemplateOutlet=\"scheduleTemp\"></ng-container>\n        </div>\n        <div class=\"bb-block bb-block--sm\">\n          <ng-container *ngTemplateOutlet=\"memoTemp\"></ng-container>\n        </div>\n      </div>\n      <div class=\"bb-stack__item--align-top\" data-role=\"multiple-bills-outstanding-amount\">\n        <div class=\"bb-stack__item--align-top\">\n          <ng-container *ngIf=\"latestBill?.outstandingBalance as outstandingBalance\">\n            <label for=\"outstanding-amount-{{ id }}\" class=\"bb-text-semi-bold bb-block bb-block--sm\"\n              >Outstanding Amount</label\n            >\n            <br />\n            <bb-amount-ui\n              id=\"outstanding-amount-{{ id }}\"\n              class=\"bb-text-default\"\n              [currency]=\"outstandingBalance.currencyCode || 'USD'\"\n              [amount]=\"outstandingBalance.amount || 0\"\n            ></bb-amount-ui>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Delivery date  -->\n  <ng-template #deliveryDateTemp>\n    <bb-input-datepicker-ui\n      [formControl]=\"paymentForm?.get('schedule.sendDate')\"\n      [minDate]=\"minDate\"\n      data-role=\"once-delivery-date-calendar\"\n      aria-label=\"delivery-date\"\n      datepickerDescribedby=\"multiple-payments-start-date-tooltip-{{ inheritedId }}\"\n      aria-labelledby=\"billpay-delivery-date-label-{{ id }}\"\n    ></bb-input-datepicker-ui>\n  </ng-template>\n\n  <!-- Amount Input -->\n  <ng-template #amountInputTemp>\n    <bb-amount-input-ui\n      [formControl]=\"paymentForm?.get('amount.amount')\"\n      data-role=\"multiple-bills-amount-input\"\n      [autoDecimal]=\"true\"\n      wrapperClasses=\"bb-text-bold\"\n      [currency]=\"paymentForm?.get('amount.currency')?.value\"\n      placeholder=\"0.00\"\n      aria-labelledby=\"multiple-payments-amount-label-{{ inheritedId }}\"\n    ></bb-amount-input-ui>\n  </ng-template>\n\n  <!-- Memo -->\n  <ng-template #memoTemp>\n    <label class=\"bb-label\" data-role=\"multiple-bills-form-memo-label\" for=\"bb-billpay-payment-form-memo-{{ id }}\">\n      <span i18n=\"bb-billpay-multiple-bills-list-item.memo.label\">Memo</span>\n      <span class=\"bb-text-default bb-text-support\" i18n=\"@@bb-billpay-multiple-bills-list-item.memo.title-suffix\">\n        (Optional)\n      </span>\n    </label>\n    <br />\n    <span\n      class=\"bb-subtitle text-muted\"\n      i18n=\"@@bb-billpay-multiple-bills-list-item.memo.helper-text\"\n      data-role=\"multiple-bills-form-memo-desc\"\n      id=\"'bb-billpay-payment-form-memo-desc-'{{ id }}\"\n      >This will be printed on the check sent to the payee</span\n    >\n    <div class=\"bb-form-field bb-form-field--md\">\n      <bb-textarea-ui\n        [id]=\"'bb-billpay-payment-form-memo-' + id\"\n        [aria-describedby]=\"'bb-billpay-payment-form-memo-desc-' + id\"\n        [formControl]=\"paymentForm?.get('memo')\"\n        data-role=\"memo\"\n        [maxLength]=\"140\"\n        [rows]=\"2\"\n        [showCharCounter]=\"true\"\n      >\n      </bb-textarea-ui>\n    </div>\n  </ng-template>\n\n  <!-- Schedule -->\n  <ng-template #scheduleTemp>\n    <bb-billpay-payment-frequency\n      *ngIf=\"frequencies?.length\"\n      [scheduleForm]=\"paymentForm?.get('schedule')\"\n      [frequencies]=\"frequencies\"\n    ></bb-billpay-payment-frequency>\n    <bb-billpay-payment-start-date\n      [scheduleForm]=\"paymentForm?.get('schedule')\"\n      [frequencies]=\"frequencies\"\n      [minDate]=\"minDate\"\n    ></bb-billpay-payment-start-date>\n    <bb-billpay-payment-end-date [scheduleForm]=\"paymentForm?.get('schedule')\"></bb-billpay-payment-end-date>\n  </ng-template>\n\n  <ng-template #productSelectorTemp>\n    <bb-billpay-payment-compact-product-selector\n      [accounts]=\"accounts\"\n      [paymentForm]=\"paymentForm\"\n      (selectItem)=\"selectItem($event)\"\n      [productNumberFormat]=\"productNumberFormat\"\n    ></bb-billpay-payment-compact-product-selector>\n  </ng-template>\n\n  <!-- Payee infos -->\n  <ng-template #payeeDescTemp>\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <a\n          attr.aria-describedby=\"{{\n            [\n              ebillRetrieveErrorId,\n              noEbillsDueId,\n              ebillsAvailableId,\n              recurringPaymentScheduledIdId,\n              ebillPaymentScheduledId,\n              ebillDueOnId,\n              ebillSupportErrorId,\n              ebillUserActionErrorId,\n              ebillUnknownErrorId\n            ].join(' ')\n          }}\"\n          (bbKeyboardClick)=\"handleViewSummary($event)\"\n          role=\"link\"\n          tabindex=\"0\"\n          class=\"bb-text-bold bb-text-default\"\n          [attr.aria-label]=\"'view payee summary for ' + payeeName\"\n          data-role=\"payee-name\"\n          >{{ payeeName }}</a\n        >\n\n        <div *ngIf=\"isLatestEbillPaid\" class=\"bb-stack bb-stack--align-top\">\n          <bb-icon-ui\n            class=\"bb-stack__item bb-stack__item--spacing-none\"\n            data-role=\"ebill-payment-icon\"\n            name=\"savings-accounts\"\n            color=\"secondary\"\n          ></bb-icon-ui>\n          <span\n            id=\"{{ ebillPaymentScheduledId }}\"\n            class=\"bb-stack__item bb-text-support\"\n            data-role=\"ebill-payment-label\"\n            i18n=\"\n              eBill payment scheduled note|Text for the information that an eBill payment is\n              scheduled@@bb-billpay-multiple-bills-list-item.note.eBill-payment-scheduled\"\n            >eBill payment scheduled</span\n          >\n        </div>\n\n        <div *ngIf=\"areEbillsDue\" class=\"bb-stack bb-d-lg-none\">\n          <bb-icon-ui\n            class=\"bb-stack__item bb-stack__item--spacing-sm\"\n            data-role=\"receipt-icon\"\n            size=\"sm\"\n            name=\"receipt\"\n            color=\"secondary\"\n          ></bb-icon-ui>\n          <span\n            id=\"{{ ebillDueOnId }}\"\n            class=\"bb-stack__item bb-subtitle bb-text-support\"\n            data-role=\"due-date-label\"\n            *ngIf=\"latestBill?.paymentDate as ebillPaymentDate\"\n            i18n=\"\n              Ebill due note|Text for the information about the due\n              eBill@@bb-billpay-multiple-bills-list-item.note.ebill-due\"\n            >eBill due on {{ ebillPaymentDate | bbDate: 'MMM d' }}</span\n          >\n        </div>\n\n        <div *ngIf=\"areEbillsInErrorState\" class=\"bb-stack bb-stack--wrap bb-stack--align-top\">\n          <ng-container *ngIf=\"isEbillsErrorUpdateCredentials\">\n            <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n              <div class=\"bb-stack\">\n                <bb-icon-ui\n                  class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                  data-role=\"ebills-error-icon\"\n                  size=\"sm\"\n                  name=\"error-outline\"\n                  color=\"danger\"\n                ></bb-icon-ui>\n                <div\n                  id=\"{{ ebillRetrieveErrorId }}\"\n                  class=\"bb-stack__item bb-subtitle bb-text-danger\"\n                  data-role=\"ebills-error-cannot-be-retrieved-message\"\n                  i18n=\"\n                    Ebills cannot be retrieved error|Error text to display when the eBills cannot be retrieved due to\n                    invalid login\n                    credentials@@bb-billpay-multiple-bills-list-item.ebill-error.ebills-cannot-be-retrieved\"\n                >\n                  eBills cannot be retrieved.\n                </div>\n              </div>\n            </div>\n            <a\n              class=\"bb-stack__item\"\n              (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n              tabindex=\"0\"\n              role=\"button\"\n              class=\"bb-stack__item bb-subtitle\"\n              i18n=\"\n                Ebills update login credentials link|Button text to display for updating login credentials for the\n                payee@@bb-billpay-multiple-bills-list-item.ebill-link.update-login-credentials\"\n              attr.aria-label=\"Update login credentials for {{ payeeName }}\"\n              i18n-attr.aria-label=\"\n                Ebills update login credentials link aria label|Aria label for updating login credentials for the\n                payee@@bb-billpay-multiple-bills-list-item.ebill-link.aria-label.update-login-credentials\"\n              data-role=\"ebills-update-login-credentials-button\"\n              >Update login credentials\n            </a>\n          </ng-container>\n\n          <ng-container *ngIf=\"isEbillsErrorNotSupported\">\n            <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n              <div class=\"bb-stack\">\n                <bb-icon-ui\n                  class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                  data-role=\"ebills-error-icon\"\n                  size=\"sm\"\n                  name=\"error-outline\"\n                  color=\"danger\"\n                ></bb-icon-ui>\n                <div\n                  id=\"{{ ebillSupportErrorId }}\"\n                  class=\"bb-stack__item bb-subtitle bb-text-danger\"\n                  data-role=\"ebills-error-no-longer-supported-message\"\n                  i18n=\"\n                    Biller no longer supports ebills error|Error text to display when the payee no longer supports\n                    eBills@@bb-billpay-multiple-bills-list-item.ebill-error.ebills-no-longer-available\"\n                >\n                  This biller no longer supports eBills.\n                </div>\n              </div>\n            </div>\n            <a\n              (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n              tabindex=\"0\"\n              role=\"button\"\n              class=\"bb-stack__item bb-subtitle\"\n              attr.aria-label=\"Disable eBills for {{ payeeName }}\"\n              i18n-attr.aria-label=\"\n                Disable eBills link aria label|Aria label for Disable\n                eBills@@bb-billpay-multiple-bills-list-item.ebill-link.ebills-no-longer-available\"\n              i18n=\"\n                Disable eBills for this payee link|Button text to display to disable eBills for the\n                payee@@bb-billpay-multiple-bills-list-item.ebill-link.aria-label.ebills-no-longer-available\"\n              data-role=\"ebills-disabled-button\"\n              >Disable eBills for this payee\n            </a>\n          </ng-container>\n\n          <ng-container *ngIf=\"isEbillsErrorUserAction\">\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-stack\">\n                <bb-icon-ui\n                  class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                  data-role=\"ebills-error-icon\"\n                  name=\"error-outline\"\n                  size=\"sm\"\n                  color=\"danger\"\n                ></bb-icon-ui>\n                <div\n                  id=\"{{ ebillUserActionErrorId }}\"\n                  class=\"bb-stack__item bb-subtitle bb-text-danger\"\n                  data-role=\"ebills-error-login-to-biller-message\"\n                  i18n=\"\n                    Please log in to biller to resolve error|Error text to display when the user must log into the\n                    biller's site to resolve an\n                    issue@@bb-billpay-multiple-bills-list-item.ebill-error.log-in-to-bille-site\"\n                >\n                  Please log in to the biller's site to resolve an issue and continue receiving eBills for this payee.\n                </div>\n              </div>\n            </div>\n            <a\n              (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n              tabindex=\"0\"\n              role=\"button\"\n              class=\"bb-stack__item bb-subtitle\"\n              i18n=\"\n                Refresh status for payee link|Button text to display for refreshing the status of eBills for the\n                payee@@bb-billpay-multiple-bills-list-item.ebill-link.refresh-status\"\n              attr.aria-label=\"Refresh status for {{ payeeName }}\"\n              i18n-attr.aria-label=\"\n                Refresh status for payee link aria label|Aria label for Refresh\n                status@@bb-billpay-multiple-bills-list-item.ebill-link.aria-label.refresh-status\"\n              data-role=\"ebills-refresh-status-button\"\n              >Refresh status\n            </a>\n          </ng-container>\n\n          <ng-container *ngIf=\"isEbillsErrorUnknown\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui\n                class=\"bb-stack__item bb-stack__item--spacing-sm\"\n                data-role=\"ebills-error-icon\"\n                name=\"error-outline\"\n                size=\"sm\"\n                color=\"danger\"\n              ></bb-icon-ui>\n              <div\n                attr.id=\"{{ ebillUnknownErrorId }}\"\n                class=\"bb-stack__item bb-subtitle bb-text-danger\"\n                data-role=\"ebills-error-try-again-later-message\"\n                i18n=\"\n                  Ebills cannot be retrieved error|Error text to display when eBills cannot currently be retreived for\n                  the payee@@bb-billpay-multiple-bills-list-item.ebill-error.ebills-cannot-be-retrieved\"\n              >\n                eBills cannot be retrieved, please try again later or contact support\n              </div>\n            </div>\n          </ng-container>\n        </div>\n\n        <div\n          *ngIf=\"areEbillsEnabledButNotDue\"\n          id=\"{{ noEbillsDueId }}\"\n          class=\"bb-text-support\"\n          data-role=\"no-due-date-label\"\n          i18n=\"\n            No eBill due note|Text for the information that no eBill is\n            due@@bb-billpay-multiple-bills-list-item.note.no-ebill-due\"\n        >\n          No eBills due\n        </div>\n\n        <div *ngIf=\"areEbillsAvailable\" class=\"bb-stack\">\n          <a data-role=\"get-ebills-menu-item\" (bbKeyboardClick)=\"handleGetEbills()\" tabindex=\"0\" role=\"button\" class=\"bb-stack__item bb-subtitle\">\n            <span\n              i18n=\"\n                Get eBills dropdown list button|Button in the dropdown list for getting\n                eBills@@bb-billpay-payee-summary-item.button.dropdown.get-eBills\"\n              >Get eBills</span\n            >\n          </a>\n        </div>\n\n        <div *ngIf=\"areRecurringPaymentsScheduled\" class=\"bb-stack bb-stack--align-top\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n            <bb-icon-ui data-role=\"recurring-payment-icon\" size=\"sm\" name=\"repeat\" color=\"secondary\"></bb-icon-ui>\n          </div>\n          <div\n            id=\"{{ recurringPaymentScheduledIdId }}\"\n            class=\"bb-stack__item bb-subtitle bb-text-support\"\n            data-role=\"recurring-payment-label\"\n            i18n=\"\n              Recurring payments scheduled note|Text for the information that recurring payments are\n              scheduled@@bb-billpay-multiple-bills-list-item.note.recurring-payments-scheduled\"\n          >\n            Recurring Payments Scheduled\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</div>\n", components: [{ type: i3__namespace$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i7__namespace$2.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4__namespace$1.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i10__namespace.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i11__namespace.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: BillpayPaymentFrequencyComponent, selector: "bb-billpay-payment-frequency", inputs: ["scheduleForm", "frequencies"] }, { type: BillpayPaymentStartDateComponent, selector: "bb-billpay-payment-start-date", inputs: ["scheduleForm", "frequencies", "minDate"] }, { type: BillpayPaymentEndDateComponent, selector: "bb-billpay-payment-end-date", inputs: ["scheduleForm"] }, { type: BillpayPaymentCompactProductSelectorComponent, selector: "bb-billpay-payment-compact-product-selector", inputs: ["paymentForm", "accounts", "productNumberFormat"], outputs: ["selectItem"] }], directives: [{ type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace$2.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i17__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace$3.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }, { type: i4__namespace$1.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "bbDate": i8__namespace.BbDatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsListItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-multiple-bills-list-item',
                        templateUrl: './billpay-payment-multiple-bills-list-item.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.BillpayPayeeDataService }, { type: i2__namespace$3.NgbDropdownConfig }, { type: i3__namespace$3.MediaQueryService }, { type: i1__namespace$1.BillpayPaymentScheduleService }, { type: PayBillsJourneyConfigService }, { type: PayBillsNavigationService }]; }, propDecorators: { payeeSummary: [{
                    type: i0.Input
                }], paymentForm: [{
                    type: i0.Input
                }], accounts: [{
                    type: i0.Input
                }], inheritedId: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentMultipleBillsListComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsListComponent() {
            this._payeeSummaries = [];
            this.isForEbills = false;
            this.id = i1.BillpayUtilityService.generateId();
            /**
             * Indicates the way payees are sorted in the list
             */
            this.ascendingList = true;
        }
        Object.defineProperty(BillpayPaymentMultipleBillsListComponent.prototype, "payeeSummaries", {
            get: function () {
                return this._payeeSummaries;
            },
            set: function (value) {
                this._payeeSummaries = this.sortByDueDate(value);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Sorting payee summaries by due date. Initial view display ascending list(earliest date first)
         */
        BillpayPaymentMultipleBillsListComponent.prototype.sortByDueDate = function (payeeSummaries) {
            var _this = this;
            if (payeeSummaries === void 0) { payeeSummaries = this.payeeSummaries; }
            var payeeWithoutDate = payeeSummaries.filter(function (payee) { var _a, _b; return !((_b = (_a = payee.ebill) === null || _a === void 0 ? void 0 : _a.latestBill) === null || _b === void 0 ? void 0 : _b.paymentDate); });
            var payeeWithDate = payeeSummaries
                .filter(function (payee) { var _a, _b; return !!((_b = (_a = payee.ebill) === null || _a === void 0 ? void 0 : _a.latestBill) === null || _b === void 0 ? void 0 : _b.paymentDate); })
                .sort(function (payee1, payee2) {
                var _a, _b, _c, _d;
                var date1 = new Date(((_b = (_a = payee1.ebill) === null || _a === void 0 ? void 0 : _a.latestBill) === null || _b === void 0 ? void 0 : _b.paymentDate) || '').getTime();
                var date2 = new Date(((_d = (_c = payee2.ebill) === null || _c === void 0 ? void 0 : _c.latestBill) === null || _d === void 0 ? void 0 : _d.paymentDate) || '').getTime();
                return _this.ascendingList ? date1 - date2 : date2 - date1;
            });
            return __spreadArray(__spreadArray([], __read(payeeWithDate)), __read(payeeWithoutDate));
        };
        /**
         * Set sorted payees
         */
        BillpayPaymentMultipleBillsListComponent.prototype.onSortClick = function () {
            this.ascendingList = !this.ascendingList;
            this.payeeSummaries = this.sortByDueDate();
        };
        /**
         * Set sorted payees
         */
        BillpayPaymentMultipleBillsListComponent.prototype.trackByFunction = function (_index, payee) {
            var _a, _b;
            return (_b = (_a = payee.ebill) === null || _a === void 0 ? void 0 : _a.latestBill) === null || _b === void 0 ? void 0 : _b.paymentDate;
        };
        return BillpayPaymentMultipleBillsListComponent;
    }());
    BillpayPaymentMultipleBillsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsListComponent, selector: "bb-billpay-payment-multiple-bills-list", inputs: { payeeSummaries: "payeeSummaries", paymentsFormGroup: "paymentsFormGroup", accounts: "accounts", isForEbills: "isForEbills" }, ngImport: i0__namespace, template: "<form [formGroup]=\"paymentsFormGroup\" class=\"bb-billpay-multiple-bills-form\">\n  <div class=\"bb-d-none bb-d-lg-block bb-billpay-multiple-bills-form__titles\">\n    <div class=\"bb-billpay-multiple-bills__grid-container bb-stack\">\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-stack__item\">\n        <span\n          class=\"bb-subtitle bb-text-semi-bold\"\n          i18n=\"@@bb-billpay-multiple-bills-list.titles.payee\"\n          data-role=\"multiple-bills-list-titles-payee\"\n          >Payee</span\n        >\n      </div>\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-text-align-center\">\n        <div class=\"bb-inline-stack\" *ngIf=\"isForEbills\" data-role=\"multiple-bills-list-titles-due-date-label\">\n          <span\n            class=\"bb-subtitle bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"@@bb-billpay-multiple-bills-list.titles.due-date\"\n            >Due Date</span\n          >\n          <button bbButton color=\"unstyled\" (click)=\"onSortClick()\" aria-label=\"Sort by due date ascending\">\n            <bb-icon-ui name=\"{{ ascendingList ? 'caret-down' : 'caret-up' }}\" size=\"xs\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-stack__item bb-stack__item--spacing-sm bb-text-align-right\">\n        <span\n          *ngIf=\"isForEbills\"\n          class=\"bb-subtitle bb-text-semi-bold\"\n          i18n=\"@@bb-billpay-multiple-bills-list.titles.amount-due\"\n          data-role=\"multiple-bills-list-titles-amount-due\"\n          >Amount Due</span\n        >\n      </div>\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-stack bb-stack__item\">\n        <span\n          class=\"bb-subtitle bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n          i18n=\"@@bb-billpay-multiple-bills-list.titles.delivery-date\"\n          data-role=\"multiple-bills-list-titles-delivery-date\"\n          >Est. Delivery\n        </span>\n        <span\n          bbTooltip=\"The date we expect your payment to reach the payee. That may vary from payee to payee.\"\n          placement=\"top\"\n          [triggers]=\"'hover'\"\n          i18n=\"@@bb-billpay-multiple-bills-list.delivery-date.label.tooltip\"\n          class=\"bb-stack__item bb-d-flex\"\n          id=\"multiple-payments-start-date-tooltip-{{ id }}\"\n        >\n          <bb-icon-ui name=\"info\" size=\"sm\" class=\"bb-billpay-multiple-bills__tooltip\"></bb-icon-ui>\n        </span>\n      </div>\n      <div class=\"bb-billpay-multiple-bills__grid-item bb-stack__item\">\n        <span\n          class=\"bb-subtitle bb-text-semi-bold\"\n          i18n=\"@@bb-billpay-multiple-bills-list.titles.amount\"\n          id=\"multiple-payments-amount-label-{{ id }}\"\n          data-role=\"multiple-bills-list-titles-amount\"\n          >Amount</span\n        >\n      </div>\n    </div>\n  </div>\n  <bb-billpay-multiple-bills-list-item\n    *ngFor=\"let payeeSummary of payeeSummaries; trackBy: trackByFunction\"\n    [payeeSummary]=\"payeeSummary\"\n    [paymentForm]=\"paymentsFormGroup?.controls[payeeSummary.id]\"\n    [accounts]=\"accounts\"\n    [inheritedId]=\"id\"\n    class=\"bb-billpay-multiple-bills-list-item\"\n  ></bb-billpay-multiple-bills-list-item>\n</form>\n", components: [{ type: i3__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: BillpayPaymentMultipleBillsListItemComponent, selector: "bb-billpay-multiple-bills-list-item", inputs: ["payeeSummary", "paymentForm", "accounts", "inheritedId"] }], directives: [{ type: i1__namespace$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace$4.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-multiple-bills-list',
                        templateUrl: './billpay-payment-multiple-bills-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { payeeSummaries: [{
                    type: i0.Input
                }], paymentsFormGroup: [{
                    type: i0.Input
                }], accounts: [{
                    type: i0.Input
                }], isForEbills: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentMultipleBillsSumBoardComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsSumBoardComponent(configService) {
            this.configService = configService;
            this.currency = this.configService.paymentDefaultCurrency;
        }
        return BillpayPaymentMultipleBillsSumBoardComponent;
    }());
    BillpayPaymentMultipleBillsSumBoardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsSumBoardComponent, deps: [{ token: PayBillsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsSumBoardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsSumBoardComponent, selector: "bb-billpay-payment-multiple-bills-sum-board", inputs: { totalAmount: "totalAmount", actionButtons: "actionButtons", inheritedId: "inheritedId" }, ngImport: i0__namespace, template: "<div data-role=\"multiple-bills-sum-board\" class=\"bb-billpay-multiple-bills-board bb-stack\">\n  <div class=\"bb-stack bb-stack--wrap container\">\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <label\n        id=\"total-amount-label-{{ inheritedId }}\"\n        class=\"bb-text-default bb-subtitle bb-block bb-block--xs\"\n        i18n=\"label|amount label@@billpay-payments-journey.multiple-bills.board.amount-label\"\n        data-role=\"multiple-bills-sum-board-amount-label\"\n        >Total Amount</label\n      >\n      <br />\n      <bb-amount-ui\n        id=\"total-amount-{{ inheritedId }}\"\n        class=\"bb-heading-1\"\n        [currency]=\"currency\"\n        [amount]=\"totalAmount || 0\"\n        data-role=\"multiple-bills-sum-board-amount\"\n      ></bb-amount-ui>\n    </div>\n    <div class=\"bb-stack__item bb-billpay-multiple-bills-board-desc\" *ngIf=\"!totalAmount; else buttonsTemp\">\n      <div class=\"card card-sm card--shadowless bb-inline-stack bb-billpay-multiple-bills-board-desc__body\">\n        <div class=\"card-body\">\n          <span\n            bbTooltip=\"You can start by filling the amounts on the bills you would like to pay\"\n            i18n-bbbTooltip=\"\n              description|description\n              tooltip[classList]@@billpay-payments-journey.multiple-bills.board.description-tooltip\"\n            triggers=\"hover\"\n            placement=\"top\"\n            class=\"bb-stack bb-d-md-none\"\n          >\n            <bb-icon-ui name=\"dns\" size=\"md\" color=\"primary\"></bb-icon-ui>\n          </span>\n          <div class=\"bb-inline-stack bb-d-none bb-d-md-flex\">\n            <bb-icon-ui name=\"dns\" size=\"md\" class=\"bb-stack__item bb-stack__item--spacing-sm\"></bb-icon-ui>\n            <div\n              class=\"bb-subtitle\"\n              i18n=\"description|description text@@billpay-payments-journey.multiple-bills.board.description\"\n              data-role=\"multiple-bills-sum-board-description\"\n            >\n              You can start by filling the amounts on the bills you would like to pay\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #buttonsTemp>\n  <ng-container [ngTemplateOutlet]=\"actionButtons\"></ng-container>\n</ng-template>\n", components: [{ type: i3__namespace$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i3__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace$4.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsSumBoardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-multiple-bills-sum-board',
                        templateUrl: './billpay-payment-multiple-bills-sum-board.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsJourneyConfigService }]; }, propDecorators: { totalAmount: [{
                    type: i0.Input
                }], actionButtons: [{
                    type: i0.Input
                }], inheritedId: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentMultipleBillsComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsComponent(payeeDataService, fb, scheduleService, paymentStateService, navigationService, route, paymentDataService, configService, notificationService, discardModalService, cdRef) {
            this.payeeDataService = payeeDataService;
            this.fb = fb;
            this.scheduleService = scheduleService;
            this.paymentStateService = paymentStateService;
            this.navigationService = navigationService;
            this.route = route;
            this.paymentDataService = paymentDataService;
            this.configService = configService;
            this.notificationService = notificationService;
            this.discardModalService = discardModalService;
            this.cdRef = cdRef;
            this.paymentsFormGroup = this.fb.group({});
            this.totalAmount$ = this.paymentsFormGroup.valueChanges.pipe(operators.map(function (forms) { return Object.values(forms).reduce(function (acc, form) { return acc + +form.amount.amount; }, 0); }));
            this.selectedDeleteEbills$ = this.payeeDataService.selectedDeleteEbills;
            this.selectedDeletePayee$ = this.payeeDataService.selectedDeletePayee;
            this.destroy$ = new rxjs.Subject();
            this.notificationMessageTemplate = '';
            this.notificationHeaderTemplate = '';
            this.isDeleteModalOpened = false;
            this.isDeleteEbillsModalOpen = false;
            this.isNavigateModalOpened = false;
            this.notificationType = '';
            this.id = i1.BillpayUtilityService.generateId();
            this.hasOvernightCheck = function (services) {
                return !!(services === null || services === void 0 ? void 0 : services.find(function (item) { return item.paymentServiceType === i1.PaymentServicesTypes.Overnight; }));
            };
        }
        Object.defineProperty(BillpayPaymentMultipleBillsComponent.prototype, "isErrorState", {
            get: function () {
                var payeeState = this.payeeDataService.payeesLoadingState;
                var accountState = this.paymentDataService.accountsLoadingState;
                return payeeState === 'error' || accountState === i1.LoadingState.Error;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentMultipleBillsComponent.prototype, "isDiscardModalOpen", {
            get: function () {
                return this.discardModalService.isDiscardModalOpen;
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentMultipleBillsComponent.prototype.onWindowUnload = function ($event) {
            if ((this.paymentsFormGroup.touched || this.paymentStateService.isFormProcessing) && !this.isDiscardModalOpen) {
                $event.returnValue = true;
            }
        };
        BillpayPaymentMultipleBillsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.payeeSummariesByEbillObservable$ = this.payeeDataService.getPayees().pipe(operators.tap(function (payeeSummariesByEbill) {
                var _b = payeeSummariesByEbill || {}, _c = _b.ebillsEnabled, ebillsEnabled = _c === void 0 ? [] : _c, _d = _b.ebillsNotEnabled, ebillsNotEnabled = _d === void 0 ? [] : _d;
                _this.payeeSummaries = __spreadArray(__spreadArray([], __read(ebillsEnabled)), __read(ebillsNotEnabled));
                _this.createForm(_this.payeeSummaries);
                if (_this.paymentStateService.isFormProcessing) {
                    _this.patchPaymentDataToForm();
                }
            }), operators.shareReplay());
            this.accounts$ = this.paymentDataService.getPayeesAndAccounts().pipe(operators.map(function (data) {
                var _a;
                _this.accounts = data.accounts;
                _this.patchFormValue({ accountFrom: (_a = data.accounts) === null || _a === void 0 ? void 0 : _a[0] });
                return data.accounts;
            }), operators.shareReplay());
            this.payeeDataService.selectedDeletePayee
                .pipe(operators.takeUntil(this.destroy$), operators.skip(1))
                .subscribe(function (payee) { return (payee ? (_this.isDeleteModalOpened = true) : _this.openNavigateModal()); });
            this.payeeDataService.selectedDeleteEbills
                .pipe(operators.takeUntil(this.destroy$), operators.skip(1))
                .subscribe(function (payee) { return (payee ? (_this.isDeleteEbillsModalOpen = true) : _this.openNavigateModal()); });
        };
        BillpayPaymentMultipleBillsComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        BillpayPaymentMultipleBillsComponent.prototype.handleClearForm = function () {
            this.patchFormValue();
            this.paymentsFormGroup.markAsUntouched();
            this.paymentStateService.isFormProcessing = false;
        };
        BillpayPaymentMultipleBillsComponent.prototype.defaultFormState = function (payeeSummary) {
            var _a;
            var address = this.hasOvernightCheck(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices)
                ? payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.overnightDeliveryAddress
                : {};
            var paymentServiceDate = this.scheduleService.estimatedPaymentServiceDate(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices, i1.PaymentServicesTypes.Regular);
            var minDate = this.scheduleService.estimatedPaymentServiceDate(payeeSummary === null || payeeSummary === void 0 ? void 0 : payeeSummary.paymentServices, i1.PaymentServicesTypes.Regular);
            return {
                accountFrom: (_a = this.accounts) === null || _a === void 0 ? void 0 : _a[0],
                payeeTo: payeeSummary,
                amount: {
                    amount: ' ',
                    currency: this.configService.paymentDefaultCurrency,
                },
                memo: '',
                overnightDeliveryAddress: {
                    address1: address === null || address === void 0 ? void 0 : address.address1,
                    address2: address === null || address === void 0 ? void 0 : address.address2,
                    city: address === null || address === void 0 ? void 0 : address.city,
                    state: address === null || address === void 0 ? void 0 : address.state,
                    postalCode: address === null || address === void 0 ? void 0 : address.postalCode,
                },
                schedule: {
                    frequency: i1.FrequencyKeys.Once,
                    startDate: minDate,
                    sendDate: minDate,
                    repeat: 1,
                    endDate: minDate,
                    endType: i1.EndTypes.Never,
                    paymentService: this.defaultPaymentService,
                    paymentServiceDate: paymentServiceDate,
                    alertPendingCheckbox: false,
                    alertSentCheckbox: false,
                    alertLastPendingCheckbox: false,
                },
            };
        };
        BillpayPaymentMultipleBillsComponent.prototype.areBothListsPresent = function (_b) {
            var ebillsEnabled = _b.ebillsEnabled, ebillsNotEnabled = _b.ebillsNotEnabled;
            return Boolean((ebillsEnabled === null || ebillsEnabled === void 0 ? void 0 : ebillsEnabled.length) && (ebillsNotEnabled === null || ebillsNotEnabled === void 0 ? void 0 : ebillsNotEnabled.length));
        };
        BillpayPaymentMultipleBillsComponent.prototype.createForm = function (payeeSummaries) {
            var _this = this;
            payeeSummaries.forEach(function (payee) {
                var _a;
                var defaults = _this.defaultFormState(payee);
                (_a = _this.paymentsFormGroup) === null || _a === void 0 ? void 0 : _a.registerControl(payee.id, _this.fb.group({
                    accountFrom: [defaults.accountFrom],
                    payeeTo: [defaults.payeeTo],
                    amount: _this.fb.group({
                        amount: [defaults.amount.amount],
                        currency: [defaults.amount.currency],
                    }),
                    memo: [defaults.memo],
                    overnightDeliveryAddress: _this.createOvernightAddressFormGroup(payee),
                    schedule: _this.fb.group({
                        frequency: defaults.schedule.frequency,
                        startDate: [defaults.schedule.startDate],
                        sendDate: [defaults.schedule.sendDate],
                        repeat: [defaults.schedule.repeat],
                        endDate: [defaults.schedule.endDate],
                        endType: [defaults.schedule.endType],
                        paymentService: [defaults.schedule.paymentService],
                        paymentServiceDate: [defaults.schedule.paymentServiceDate],
                        alertPendingCheckbox: [defaults.schedule.alertPendingCheckbox],
                        alertSentCheckbox: [defaults.schedule.alertSentCheckbox],
                        alertLastPendingCheckbox: [defaults.schedule.alertLastPendingCheckbox],
                    }),
                }));
            });
        };
        BillpayPaymentMultipleBillsComponent.prototype.onModalResolve = function (isConfirmed) {
            this.discardModalService.onModalResolve(isConfirmed);
        };
        BillpayPaymentMultipleBillsComponent.prototype.createOvernightAddressFormGroup = function (payeeSummary) {
            var address = this.hasOvernightCheck(payeeSummary.paymentServices)
                ? payeeSummary.overnightDeliveryAddress
                : {};
            var paymentService = this.defaultPaymentService(payeeSummary);
            var isOvernightAddressDisabled = !(paymentService === null || paymentService === void 0 ? void 0 : paymentService.paymentServiceType) || paymentService.paymentServiceType !== i1.PaymentServicesTypes.Overnight;
            return this.fb.group({
                address1: [
                    {
                        value: address === null || address === void 0 ? void 0 : address.address1,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
                address2: [
                    {
                        value: address === null || address === void 0 ? void 0 : address.address2,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
                city: [
                    {
                        value: address === null || address === void 0 ? void 0 : address.city,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
                state: [
                    {
                        value: address === null || address === void 0 ? void 0 : address.state,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
                postalCode: [
                    {
                        value: address === null || address === void 0 ? void 0 : address.postalCode,
                        disabled: isOvernightAddressDisabled,
                    },
                ],
            });
        };
        BillpayPaymentMultipleBillsComponent.prototype.defaultPaymentService = function (payee) {
            var _a;
            return (_a = payee === null || payee === void 0 ? void 0 : payee.paymentServices) === null || _a === void 0 ? void 0 : _a.find(function (item) { return item.paymentServiceType === i1.PaymentServicesTypes.Regular; });
        };
        BillpayPaymentMultipleBillsComponent.prototype.handleSubmit = function () {
            var _this = this;
            var paymentForms = Object.entries(this.paymentsFormGroup.value)
                .filter(function (_b) {
                var _c = __read(_b, 2), _id = _c[0], form = _c[1];
                return !!+form.amount.amount;
            })
                .map(function (_b) {
                var _c = __read(_b, 2), _id = _c[0], form = _c[1];
                return _this.processFormData(form);
            });
            this.paymentStateService.isFormProcessing = true;
            this.paymentStateService.updatePaymentState(paymentForms);
            this.navigationService.navigateToReview({ relativeTo: this.route.parent });
        };
        BillpayPaymentMultipleBillsComponent.prototype.processFormData = function (data) {
            var startDate = data.schedule.frequency === i1.FrequencyKeys.Once ? data.schedule.sendDate : data.schedule.startDate;
            switch (data.schedule.endType) {
                case i1.EndTypes.After:
                    return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '', endDate: new Date(this.scheduleService.estimatedEndDate(data.schedule.startDate, data.schedule.frequency, data.schedule.repeat)).toISOString() }) });
                case i1.EndTypes.On:
                    return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '', repeat: this.scheduleService.estimatedOccurences(data.schedule.startDate, data.schedule.endDate || data.schedule.startDate, data.schedule.frequency) }) });
                default:
                    return Object.assign(Object.assign({}, data), { schedule: Object.assign(Object.assign({}, data.schedule), { startDate: startDate || '' }) });
            }
        };
        BillpayPaymentMultipleBillsComponent.prototype.patchFormValue = function (value) {
            var _this = this;
            var _a;
            (_a = this.payeeSummaries) === null || _a === void 0 ? void 0 : _a.forEach(function (payee) {
                var formValue = value || _this.defaultFormState(payee);
                _this.paymentsFormGroup.controls[payee.id].patchValue(formValue);
            });
        };
        BillpayPaymentMultipleBillsComponent.prototype.onDeleteEbills = function (resolve) {
            var _this = this;
            this.isDeleteEbillsModalOpen = false;
            if (resolve) {
                this.deleteEbills()
                    .pipe(operators.take(1))
                    .subscribe(function () {
                    _this.deletionNotify('ebills');
                });
            }
        };
        BillpayPaymentMultipleBillsComponent.prototype.onDeletePayee = function (resolve) {
            var _this = this;
            this.isDeleteModalOpened = false;
            if (resolve) {
                this.deletePayee()
                    .pipe(operators.take(1))
                    .subscribe(function () {
                    _this.deletionNotify('delete');
                });
            }
        };
        BillpayPaymentMultipleBillsComponent.prototype.onNavigateToPayments = function (hasNavigated) {
            if (hasNavigated) {
                this.navigationService.navigateToPayments();
            }
            this.isNavigateModalOpened = false;
        };
        BillpayPaymentMultipleBillsComponent.prototype.deletionNotify = function (type) {
            this.payeeDataService.reloadPayees();
            this.notificationType = type;
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.configService.notificationDismissTime,
            });
        };
        BillpayPaymentMultipleBillsComponent.prototype.openNavigateModal = function () {
            this.isNavigateModalOpened = true;
        };
        BillpayPaymentMultipleBillsComponent.prototype.openModal = function () {
            this.cdRef.markForCheck();
            return this.paymentsFormGroup.touched || this.paymentStateService.isFormProcessing
                ? this.discardModalService.openModal()
                : rxjs.of(true);
        };
        BillpayPaymentMultipleBillsComponent.prototype.patchPaymentDataToForm = function () {
            var _this = this;
            this.paymentStateService.paymentState.pipe(operators.take(1)).subscribe(function (paymentsState) {
                if (paymentsState) {
                    paymentsState.forEach(function (payment) {
                        var _a;
                        (_a = _this.paymentsFormGroup.get(payment.payeeTo.id)) === null || _a === void 0 ? void 0 : _a.patchValue(payment);
                    });
                }
            });
        };
        BillpayPaymentMultipleBillsComponent.prototype.deletePayee = function () {
            var _this = this;
            return this.payeeDataService.selectedDeletePayee.pipe(operators.switchMap(function (payee) { return payee ? _this.payeeDataService.deletePayee(payee.id, payee.electronic) : rxjs.of(); }));
        };
        BillpayPaymentMultipleBillsComponent.prototype.deleteEbills = function () {
            var _this = this;
            return this.payeeDataService.selectedDeleteEbills.pipe(operators.switchMap(function (payee) { return (payee ? _this.payeeDataService.deleteEbills(payee.id) : rxjs.of()); }));
        };
        return BillpayPaymentMultipleBillsComponent;
    }());
    BillpayPaymentMultipleBillsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsComponent, deps: [{ token: i1__namespace$1.BillpayPayeeDataService }, { token: i1__namespace$2.FormBuilder }, { token: i1__namespace$1.BillpayPaymentScheduleService }, { token: PayBillsStateService }, { token: PayBillsNavigationService }, { token: i1__namespace.ActivatedRoute }, { token: i1__namespace$1.BillpayPaymentDataService }, { token: PayBillsJourneyConfigService }, { token: i5__namespace$2.NotificationService }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsComponent, selector: "bb-billpay-payment-multiple-bills", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isErrorState; else errorState\">\n  <ng-container\n    *ngIf=\"(accounts$ | async) && payeeSummariesByEbillObservable$ | async as ebillGroupedData; else loadingState\"\n  >\n    <ng-container\n      *ngIf=\"\n        (ebillGroupedData.ebillsEnabled.length || ebillGroupedData.ebillsNotEnabled.length) &&\n          (accounts$ | async)?.length;\n        else emptyState\n      \"\n    >\n      <div class=\"bb-billpay-multiple-bills\">\n        <div\n          class=\"bb-block bb-block--lg\"\n          *ngIf=\"ebillGroupedData.ebillsEnabled.length\"\n          data-role=\"payees-with-active-e-bills-list\"\n        >\n          <div class=\"card card-lg\">\n            <div class=\"card-body\">\n              <div class=\"bb-block bb-block--lg\">\n                <bb-header-ui\n                  headingType=\"h2\"\n                  *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                  data-role=\"sub-header\"\n                  heading=\"Payees with Active eBills\"\n                  i18n-heading=\"\n                    Payees with eBills title|Title for the list of payees with eBills\n                    enabled@@billpay-payments-journey.multiple-bills.title.payees-with-ebills\"\n                >\n                </bb-header-ui>\n              </div>\n              <bb-billpay-payment-multiple-bills-list\n                [paymentsFormGroup]=\"paymentsFormGroup\"\n                [payeeSummaries]=\"ebillGroupedData.ebillsEnabled\"\n                [accounts]=\"accounts$ | async\"\n                [isForEbills]=\"true\"\n              ></bb-billpay-payment-multiple-bills-list>\n            </div>\n          </div>\n        </div>\n\n        <div\n          class=\"bb-billpay-multiple-bills-other-payees-card card card-lg\"\n          data-role=\"all-other-payees-list\"\n          *ngIf=\"ebillGroupedData.ebillsNotEnabled.length\"\n        >\n          <div class=\"card-body\">\n            <div class=\"bb-block bb-block--lg\">\n              <bb-header-ui\n                headingType=\"h2\"\n                *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                data-role=\"sub-header\"\n                heading=\"All Other Payees\"\n                i18n-heading=\"\n                  Payees without eBills title|Title for the list of payees that do not have eBills\n                  enabled@@billpay-payments-journey.multiple-bills.title.other-payees\"\n              >\n              </bb-header-ui>\n            </div>\n            <bb-billpay-payment-multiple-bills-list\n              [paymentsFormGroup]=\"paymentsFormGroup\"\n              [payeeSummaries]=\"ebillGroupedData.ebillsNotEnabled\"\n              [accounts]=\"accounts$ | async\"\n            ></bb-billpay-payment-multiple-bills-list>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payment-multiple-bills-sum-board\n  [totalAmount]=\"totalAmount$ | async\"\n  [actionButtons]=\"actionButtons\"\n  [inheritedId]=\"id\"\n></bb-billpay-payment-multiple-bills-sum-board>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"assignment-ind\"\n        subtitle=\"Add a payee to make a bill payment\"\n        i18n-subtitle=\"\n          Add a payee to make a bill payment|Payee List no payees\n          subtitle@@bb-billpay-manage-widget-ang.bb-empty-state-ui.subtitle\"\n        title=\"No Payees\"\n        i18n-title=\"\n          No payees state text|Payee List no payees\n          title@@billpay-payments-journey.multiple-bills.bb-empty-state-ui.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error-outline\"\n        subtitle=\"Try to reload the page or contact support\"\n        i18n-subtitle=\"\n          Try to reload the page or contact the support.|Payee List loading\n          subtitle@@bb-billpay-payee-list-widget-ang.loading.subtitle\"\n        title=\"Payee list is not loading\"\n        i18n-title=\"Payee list is not loading|Payee List loading title@@bb-billpay-payee-list-widget-ang.loading.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #actionButtons>\n  <div>\n    <div class=\"bb-stack\">\n      <button\n        bbButton\n        color=\"link\"\n        class=\"bb-stack__item bb-stack__item--spacing-md\"\n        (click)=\"handleClearForm()\"\n        data-role=\"multiple-bills-clear-button\"\n        i18n=\"@@billpay-payments-journey.multiple-bills.board.clear-button\"\n      >\n        Clear All\n      </button>\n      <button\n        bbButton\n        color=\"primary\"\n        class=\"bb-button-bar__button bb-stack__item bb-stack__item--spacing-none\"\n        data-role=\"multiple-bills-confirm-button\"\n        i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button\"\n        attr.aria-describedby=\"total-amount-label-{{ id }}  total-amount-{{ id }}\"\n        (click)=\"handleSubmit()\"\n      >\n        Confirm Payment\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<bb-billpay-payee-delete-modal\n  *ngIf=\"isDeleteModalOpened\"\n  (resolve)=\"onDeletePayee($event)\"\n></bb-billpay-payee-delete-modal>\n\n<bb-billpay-ebills-delete-modal\n  *ngIf=\"isDeleteEbillsModalOpen\"\n  (resolve)=\"onDeleteEbills($event)\"\n></bb-billpay-ebills-delete-modal>\n\n<bb-billpay-payee-navigate-modal\n  *ngIf=\"isNavigateModalOpened\"\n  (resolve)=\"onNavigateToPayments($event)\"\n></bb-billpay-payee-navigate-modal>\n\n<ng-template #notificationMessage>\n  <div [ngSwitch]=\"notificationType\">\n    <div *ngSwitchCase=\"'ebills'\">\n      <span\n        *ngIf=\"selectedDeleteEbills$ | async as payee\"\n        i18n=\"\n          stop ebill notification message|Payee stop ebill confirmation success notification\n          message@@billpay-payee-list.stop-ebill-confirm.notification.message\"\n        >eBills for {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been stopped\n        successfully</span\n      >\n    </div>\n    <div *ngSwitchCase=\"'delete'\">\n      <span\n        *ngIf=\"selectedDeletePayee$ | async as payee\"\n        i18n=\"\n          delete payee notification message|Payee delete confirmation success notification\n          message@@billpay-payee-list.delete-payee-confirm.notification.message\"\n        >The payee {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been deleted\n        successfully</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <div [ngSwitch]=\"notificationType\">\n    <span\n      *ngSwitchCase=\"'ebills'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        eBills stopped notification header|eBills stopped confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >eBills stopped</span\n    >\n    <span\n      *ngSwitchCase=\"'delete'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        delete payee notification header|Payee delete confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >Payee deleted</span\n    >\n  </div>\n</ng-template>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel Bill Payments?\"\n  i18n-title=\"Discard changes modal header@@billpay.multiple-bills.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel bill payments? Entered data will be lost.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.multiple-bills.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel payment\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.multiple-bills.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Continue with payment\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.multiple-bills.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentMultipleBillsListComponent, selector: "bb-billpay-payment-multiple-bills-list", inputs: ["payeeSummaries", "paymentsFormGroup", "accounts", "isForEbills"] }, { type: BillpayPaymentMultipleBillsSumBoardComponent, selector: "bb-billpay-payment-multiple-bills-sum-board", inputs: ["totalAmount", "actionButtons", "inheritedId"] }, { type: i6__namespace$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7__namespace$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i1__namespace$1.ӨBillpayPayeeDeleteModalComponent, selector: "bb-billpay-payee-delete-modal", outputs: ["resolve"] }, { type: i1__namespace$1.ӨBillpayEbillsDeleteModalComponent, selector: "bb-billpay-ebills-delete-modal", outputs: ["resolve"] }, { type: i1__namespace$1.ӨBillpayPayeeNavigateModalComponent, selector: "bb-billpay-payee-navigate-modal", outputs: ["resolve"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-multiple-bills',
                        templateUrl: './billpay-payment-multiple-bills.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.BillpayPayeeDataService }, { type: i1__namespace$2.FormBuilder }, { type: i1__namespace$1.BillpayPaymentScheduleService }, { type: PayBillsStateService }, { type: PayBillsNavigationService }, { type: i1__namespace.ActivatedRoute }, { type: i1__namespace$1.BillpayPaymentDataService }, { type: PayBillsJourneyConfigService }, { type: i5__namespace$2.NotificationService }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { notificationMessageTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationMessage']
                }], notificationHeaderTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationHeader']
                }], onWindowUnload: [{
                    type: i0.HostListener,
                    args: ['window:beforeunload', ['$event']]
                }] } });

    var BillpayPaymentMultipleBillsViewComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsViewComponent(navigationService) {
            this.navigationService = navigationService;
        }
        BillpayPaymentMultipleBillsViewComponent.prototype.openModal = function () {
            return this.child.openModal();
        };
        BillpayPaymentMultipleBillsViewComponent.prototype.addPayee = function () {
            var _a;
            (_a = this.navigationService) === null || _a === void 0 ? void 0 : _a.navigateToAddPayee();
        };
        return BillpayPaymentMultipleBillsViewComponent;
    }());
    BillpayPaymentMultipleBillsViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsViewComponent, deps: [{ token: PayBillsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsViewComponent, selector: "ng-component", providers: [i1.BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "child", first: true, predicate: ["multipleBillsReview"], descendants: true }], ngImport: i0__namespace, template: "\n    <div class=\"bb-stack bb-block bb-block--lg\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <bb-header-ui\n          headingType=\"h1\"\n          heading=\"Pay Bills\"\n          i18n-heading=\"@@pay-bills-journey.title.pay-bills\"\n          data-role=\"multiple-bills-widget-title\"\n        >\n        </bb-header-ui>\n        <p i18n=\"@@pay-bills-journey.pay-payee.header-description\" data-role=\"multiple-bills-widget-title-info\">\n          Add payees if you would like to pay a single bill or multiple bills\n        </p>\n      </div>\n      <div class=\"bb-stack__item\">\n        <button bbButton color=\"secondary\" data-role=\"pay-a-bill-add-payee\" (click)=\"addPayee()\">\n          <i class=\"bb-icon bb-icon-add\"></i>\n          <span class=\"bb-accounts-overview-table__header-row\" i18n=\"@@pay-bills-journey.pay-bills.add-payee-button\"\n            >Add Payee</span\n          >\n        </button>\n      </div>\n    </div>\n    <bb-billpay-payment-multiple-bills #multipleBillsReview></bb-billpay-payment-multiple-bills>\n  ", isInline: true, components: [{ type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentMultipleBillsComponent, selector: "bb-billpay-payment-multiple-bills" }], directives: [{ type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: "\n    <div class=\"bb-stack bb-block bb-block--lg\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <bb-header-ui\n          headingType=\"h1\"\n          heading=\"Pay Bills\"\n          i18n-heading=\"@@pay-bills-journey.title.pay-bills\"\n          data-role=\"multiple-bills-widget-title\"\n        >\n        </bb-header-ui>\n        <p i18n=\"@@pay-bills-journey.pay-payee.header-description\" data-role=\"multiple-bills-widget-title-info\">\n          Add payees if you would like to pay a single bill or multiple bills\n        </p>\n      </div>\n      <div class=\"bb-stack__item\">\n        <button bbButton color=\"secondary\" data-role=\"pay-a-bill-add-payee\" (click)=\"addPayee()\">\n          <i class=\"bb-icon bb-icon-add\"></i>\n          <span class=\"bb-accounts-overview-table__header-row\" i18n=\"@@pay-bills-journey.pay-bills.add-payee-button\"\n            >Add Payee</span\n          >\n        </button>\n      </div>\n    </div>\n    <bb-billpay-payment-multiple-bills #multipleBillsReview></bb-billpay-payment-multiple-bills>\n  ",
                        providers: [i1.BillpayDiscardChangesModalService],
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsNavigationService }]; }, propDecorators: { child: [{
                    type: i0.ViewChild,
                    args: ['multipleBillsReview']
                }] } });

    var BillpayPaymentMultipleBillsReviewItemComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsReviewItemComponent(scheduleService, configservice) {
            this.scheduleService = scheduleService;
            this.configservice = configservice;
            this.isCollapsed = true;
            this.id = i1.BillpayUtilityService.generateId();
        }
        Object.defineProperty(BillpayPaymentMultipleBillsReviewItemComponent.prototype, "endDate", {
            get: function () {
                var _a;
                var _b = ((_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule) || {}, startDate = _b.startDate, repeat = _b.repeat, frequency = _b.frequency;
                var date = startDate || new Date().toISOString();
                return this.scheduleService.estimatedEndDate(date, frequency, repeat);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BillpayPaymentMultipleBillsReviewItemComponent.prototype, "frequencyLabel", {
            get: function () {
                var _this = this;
                var frequency = this.configservice.frequencies.find(function (frequency) { var _a; return ((_a = _this.payment) === null || _a === void 0 ? void 0 : _a.schedule.frequency) === frequency.value; });
                return $localize(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([":@@pay-bill-journey.review-item.frequency-label:", ""], [":@@pay-bill-journey.review-item.frequency-label:", ""])), (frequency === null || frequency === void 0 ? void 0 : frequency.name) || '');
            },
            enumerable: false,
            configurable: true
        });
        return BillpayPaymentMultipleBillsReviewItemComponent;
    }());
    BillpayPaymentMultipleBillsReviewItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsReviewItemComponent, deps: [{ token: i1__namespace$1.BillpayPaymentScheduleService }, { token: PayBillsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsReviewItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewItemComponent, selector: "[bb-billpay-payment-multiple-bills-review-item]", inputs: { payment: "payment", last: "last" }, ngImport: i0__namespace, template: "<tr class=\"billpay-multipl-ebills-review__tr\" [class.billpay-multipl-ebills-review__item--expanded]=\"!isCollapsed\">\n  <td class=\"billpay-multipl-ebills-review__cell bb-d-block bb-d-md-table-cell\">\n    <ng-container *ngIf=\"payment?.hasOwnProperty('succeeded'); else payeeTmp\">\n      <div class=\"bb-stack\">\n        <bb-icon-ui\n          class=\"bb-stack__item bb-stack__item--spacing-md\"\n          [name]=\"payment?.succeeded ? 'success' : 'error-outline'\"\n          size=\"md\"\n          [color]=\"payment?.succeeded ? 'success' : 'danger'\"\n        ></bb-icon-ui>\n        <div class=\"bb-stack__item\">\n          <ng-container *ngTemplateOutlet=\"payeeNameTmp\"></ng-container>\n        </div>\n      </div>\n    </ng-container>\n  </td>\n  <td class=\"billpay-multipl-ebills-review__cell bb-d-none bb-d-md-table-cell\">\n    {{ payment?.accountFrom.accountNickName }} (*{{ payment?.accountFrom.accountNumber | slice: -4 }})\n  </td>\n  <td class=\"billpay-multipl-ebills-review__cell bb-d-none bb-d-md-table-cell\">\n    {{ payment?.schedule?.startDate | bbDate: 'MM/dd/yyyy' }}\n  </td>\n  <td class=\"billpay-multipl-ebills-review__cell bb-d-none bb-d-md-table-cell\">\n    <ng-container *ngTemplateOutlet=\"amountTmp; context: payment\"></ng-container>\n  </td>\n  <td class=\"billpay-multipl-ebills-review__cell bb-text-align-right\">\n    <button\n      bbButton\n      class=\"billpay-multipl-ebills-review__toggler\"\n      buttonSize=\"sm\"\n      color=\"text-link\"\n      [circle]=\"true\"\n      aria-label=\"dropdown-button\"\n      data-role=\"multipl-ebills-review-toggler\"\n      (click)=\"isCollapsed = !isCollapsed\"\n      [attr.aria-expanded]=\"!isCollapsed\"\n      [attr.aria-controls]=\"'collapse' + id\"\n    >\n      <bb-icon-ui\n        class=\"bb-stack__item\"\n        [name]=\"isCollapsed ? 'toggle-down' : 'toggle-up'\"\n        size=\"md\"\n        data-role=\"toggle-icon\"\n      ></bb-icon-ui>\n    </button>\n  </td>\n</tr>\n<tr *ngIf=\"payment?.hasOwnProperty('succeeded')\" class=\"billpay-multipl-ebills-review__tr\">\n  <td *ngIf=\"!payment?.succeeded\" colspan=\"5\" class=\"billpay-multipl-ebills-review__cell\">\n    <span class=\"bb-text-danger\" i18n=\"@@bb-billpay-multiple-bills-review.mixed-results.fail-message\"\n      >The payment of this bill could not be scheduled.</span\n    >\n  </td>\n</tr>\n<!-- Mobile screen view -->\n<tr class=\"bb-d-md-none billpay-multipl-ebills-review__tr\">\n  <td colspan=\"2\" class=\"billpay-multipl-ebills-review__cell\">\n    <ng-container *ngTemplateOutlet=\"amountTmp; context: payment\"></ng-container>\n  </td>\n</tr>\n<!-- Extra fields -->\n<tr data-role=\"multipl-ebills-extended-fields\" class=\"billpay-multipl-ebills-review__tr\">\n  <td colspan=\"5\">\n    <div [id]=\"'collapse' + id\" [ngbCollapse]=\"isCollapsed\">\n      <div class=\"billpay-multipl-ebills-review__cell\">\n        <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\" *ngIf=\"payment?.memo\">\n          <bb-icon-ui\n            name=\"subject\"\n            size=\"sm\"\n            color=\"secondary\"\n            class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n          ></bb-icon-ui>\n          <div class=\"bb-stack__item\">\n            <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n              <span i18n=\"@@bb-billpay-multiple-bills-review.memo\">Memo</span>\n            </div>\n            <div class=\"break-word bb-subtitle bb-text-support\" data-role=\"payment-description\">\n              {{ payment?.memo }}\n            </div>\n          </div>\n        </div>\n        <ng-container *ngIf=\"payment?.schedule as schedule\">\n          <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\">\n            <bb-icon-ui\n              name=\"cached\"\n              size=\"sm\"\n              color=\"secondary\"\n              class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n            ></bb-icon-ui>\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-text-bold\" data-role=\"payment-description-label\">\n                <span\n                  i18n=\"\n                    Payment details frequency|Label for frequency in details\n                    group@@billpay-multiple-bills-review.details.frequency-label\"\n                  >Frequency</span\n                >\n              </div>\n              <div data-role=\"payment-frequency\">\n                {{ frequencyLabel }}\n              </div>\n            </div>\n          </div>\n          <ng-container *ngIf=\"schedule.frequency === 'ONCE'\">\n            <ng-container *ngIf=\"payment?.overnightDeliveryAddress as address\">\n              <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\">\n                <bb-icon-ui\n                  name=\"subject\"\n                  size=\"sm\"\n                  color=\"secondary\"\n                  class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n                ></bb-icon-ui>\n                <div class=\"bb-stack__item\">\n                  <div\n                    data-role=\"overnight-address-label\"\n                    i18n=\"\n                      Payment overnight address|Label for overnight\n                      address@@billpay-payment-review-card.details.overnight-address.label\"\n                    class=\"bb-text-bold\"\n                  >\n                    Overnight check address\n                  </div>\n                  <div data-role=\"overnight-address\" class=\"bb-block bb-block--md\">\n                    <div>{{ address.address1 }}</div>\n                    <div *ngIf=\"address.address2\">{{ address.address2 }}</div>\n                    <div>{{ address.city }}&nbsp;{{ address.state }}&nbsp;{{ address.postalCode }}</div>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n          </ng-container>\n\n          <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\">\n            <bb-icon-ui\n              name=\"today\"\n              size=\"sm\"\n              color=\"secondary\"\n              class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n            ></bb-icon-ui>\n            <div class=\"bb-stack__item\">\n              <div\n                i18n=\"\n                  Payment details deliver by|Label for deliver by in details\n                  group@@billpay-payment-review-card.details.amount.other\"\n                class=\"bb-text-bold\"\n                data-role=\"deliver-by\"\n              >\n                { schedule.frequency, select, ONCE {Deliver payment by } other {Deliver first payment by } }\n              </div>\n              <div data-role=\"deliver-date\">\n                {{ schedule.startDate | date: 'mediumDate' }}\n              </div>\n            </div>\n          </div>\n\n          <ng-container *ngIf=\"schedule.frequency !== 'ONCE'\">\n            <!-- EndDate -->\n            <div class=\"bb-block bb-block--md bb-stack bb-stack--align-top\">\n              <bb-icon-ui\n                name=\"today\"\n                size=\"sm\"\n                color=\"secondary\"\n                class=\"bb-stack__item bb-stack__item--spacing-sm bicon\"\n              ></bb-icon-ui>\n              <div class=\"bb-stack__item\">\n                <div\n                  i18n=\"\n                    Payment details ending|Label for ending in details\n                    group@@billpay-payment-review-card.details.ending-label\"\n                  class=\"bb-text-bold\"\n                  data-role=\"ending-label\"\n                >\n                  Ending\n                </div>\n                <div data-role=\"ending\">\n                  <span\n                    *ngIf=\"schedule?.repeat; else neverEndingTmp\"\n                    i18n=\"\n                      Payment details ending|Label for ending in details\n                      group@@billpay-payment-review-card.details.ending\"\n                    >After { schedule.repeat, plural, =1 {{{schedule.repeat}} payment } other\n                    {{{schedule.repeat}} payments } } (estimated {{ endDate | date: 'mediumDate' }})\n                  </span>\n                  <ng-template #neverEndingTmp>\n                    <span\n                      i18n=\"\n                        Payment details ending|Label for never ending\n                        payment@@billpay-payment-review-card.details.ending.never\"\n                      >Never\n                    </span>\n                  </ng-template>\n                </div>\n              </div>\n            </div>\n\n            <!-- Notify section -->\n            <ng-container\n              *ngIf=\"\n                schedule?.alertPendingCheckbox || schedule?.alertSentCheckbox || schedule?.alertLastPendingCheckbox\n              \"\n            >\n              <div\n                i18n=\"\n                  Payment details notify me|Label for notify me in details\n                  group@@billpay-payment-review-card.details.notify\"\n                class=\"bb-text-bold\"\n                data-role=\"notify-label\"\n              >\n                Notify me\n              </div>\n              <div>\n                <ul>\n                  <li\n                    *ngIf=\"schedule?.alertPendingCheckbox\"\n                    i18n=\"\n                      Payment details when a payment is pending|Label for when a payment is pending in details\n                      group@@billpay-payment-review-card.details.notify.pending\"\n                    data-role=\"alertPendingCheckbox\"\n                  >\n                    When a payment is pending\n                  </li>\n                  <li\n                    *ngIf=\"schedule?.alertSentCheckbox\"\n                    i18n=\"\n                      Payment details when a payment has been sent|Label for when a payment has been sent in details\n                      group@@billpay-payment-review-card.details.notify.sent\"\n                    data-role=\"alertSentCheckbox\"\n                  >\n                    When a payment has been sent\n                  </li>\n                  <li\n                    *ngIf=\"schedule?.alertLastPendingCheckbox\"\n                    i18n=\"\n                      Payment details when the last payment is pending|Label for when the last payment is pending in\n                      details group@@billpay-payment-review-card.details.notify.pending.last\"\n                    data-role=\"alertLastPendingCheckbox\"\n                  >\n                    When the last payment is pending\n                  </li>\n                </ul>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </td>\n</tr>\n<tr class=\"billpay-multipl-ebills-review__tr billpay-multipl-ebills-review__tr--last\" aria-hidden=\"true\">\n  <td colspan=\"5\"></td>\n</tr>\n<tr class=\"billpay-multipl-ebills-review__seperator\" aria-hidden=\"true\" *ngIf=\"!last\"></tr>\n<!-- Payee -->\n<ng-template #payeeTmp>\n  <ng-container\n    *ngIf=\"\n      payment?.payeeTo?.ebill?.enabled &&\n        payment?.payeeTo?.ebill?.latestBill?.status !== 'PAID' &&\n        payment?.payeeTo?.ebill?.latestBill?.paymentDate;\n      else payeeNameTmp\n    \"\n  >\n    <label class=\"bb-block bb-block--no-margin\">{{ payment?.payeeTo?.nickName || payment?.payeeTo?.name }}</label>\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        class=\"bb-stack__item bb-stack__item--spacing-sm\"\n        data-role=\"receipt-icon\"\n        size=\"sm\"\n        name=\"receipt\"\n        color=\"secondary\"\n      ></bb-icon-ui>\n      <span\n        class=\"bb-stack__item bb-subtitle bb-text-support\"\n        data-role=\"due-date-label\"\n        *ngIf=\"payment?.payeeTo?.ebill?.latestBill?.paymentDate as ebillPaymentDate\"\n      >\n        <bb-amount-ui\n          *ngIf=\"payment?.payeeTo?.ebill?.latestBill?.minAmountDue as minAmountDue\"\n          [currency]=\"minAmountDue?.currency\"\n          [amount]=\"minAmountDue?.amount\"\n        ></bb-amount-ui>\n        <span\n          i18n=\"\n            Ebill due note|Text for the information about the due eBill@@bb-billpay-multiple-bills-review.note.ebill-due\"\n        >\n          due on</span\n        >\n        {{ ebillPaymentDate | bbDate: 'MMM d' }}\n      </span>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #payeeNameTmp>\n  <label class=\"bb-label\">{{ payment?.payeeTo?.nickName || payment?.payeeTo?.name }}</label>\n</ng-template>\n<!-- Amount -->\n<ng-template #amountTmp let-amount=\"amount\">\n  <bb-amount-ui class=\"bb-text-semi-bold\" [currency]=\"amount.currency\" [amount]=\"amount.amount\"> </bb-amount-ui>\n</ng-template>\n", components: [{ type: i3__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3__namespace$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace$3.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }], pipes: { "slice": i4__namespace.SlicePipe, "bbDate": i8__namespace.BbDatePipe, "date": i4__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsReviewItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        // eslint-disable-next-line @angular-eslint/component-selector
                        selector: '[bb-billpay-payment-multiple-bills-review-item]',
                        templateUrl: 'billpay-payment-multiple-bills-review-item.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.BillpayPaymentScheduleService }, { type: PayBillsJourneyConfigService }]; }, propDecorators: { payment: [{
                    type: i0.Input
                }], last: [{
                    type: i0.Input
                }] } });
    var templateObject_1$1;

    var BillpayPaymentMultipleBillsReviewTableComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsReviewTableComponent() {
        }
        return BillpayPaymentMultipleBillsReviewTableComponent;
    }());
    BillpayPaymentMultipleBillsReviewTableComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsReviewTableComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsReviewTableComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewTableComponent, selector: "bb-billpay-payment-multiple-bills-review-table", inputs: { payments: "payments" }, ngImport: i0__namespace, template: "<table\n  class=\"billpay-multipl-ebills-review\"\n  aria-label=\"Review Your Payment\"\n  i18n-aria-label=\"@@billpay-payments-journey.multiple-bills.table-description\"\n>\n  <thead>\n    <tr class=\"bb-d-none bb-d-md-table-row\">\n      <th scope=\"col\" class=\"billpay-multipl-ebills-review__cell\">\n        <span\n          i18n=\"@@bb-billpay-multiple-bills-review.titles.payee\"\n          class=\"bb-subtitle bb-text-semi-bold\"\n          data-role=\"multiple-ebills-review-payee\"\n          >Payee</span\n        >\n      </th>\n      <th scope=\"col\" class=\"billpay-multipl-ebills-review__cell\">\n        <span\n          i18n=\"@@bb-billpay-multiple-bills-review.titles.from-account\"\n          class=\"bb-subtitle bb-text-semi-bold\"\n          data-role=\"multiple-ebills-review-from-account\"\n          >From Account</span\n        >\n      </th>\n      <th scope=\"col\" class=\"billpay-multipl-ebills-review__cell\">\n        <div class=\"bb-stack\">\n          <span\n            class=\"bb-subtitle bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"@@bb-billpay-multiple-bills-review.titles.delivery-date\"\n            data-role=\"multiple-bills-review-delivery-date\"\n            >Est. Delivery\n          </span>\n          <span\n            bbTooltip=\"The date we expect your payment to reach the payee. That may vary from payee to payee.\"\n            placement=\"top\"\n            [triggers]=\"'hover'\"\n            i18n=\"@@bb-billpay-multiple-bills-review.delivery-date.tooltip\"\n            class=\"bb-d-flex\"\n          >\n            <bb-icon-ui name=\"info\" size=\"sm\" class=\"bb-billpay-multiple-bills__tooltip\"></bb-icon-ui>\n          </span>\n        </div>\n      </th>\n      <th scope=\"col\" class=\"billpay-multipl-ebills-review__cell\">\n        <span\n          i18n=\"@@bb-billpay-multiple-bills-review.titles.amount\"\n          class=\"bb-subtitle bb-text-semi-bold\"\n          data-role=\"multiple-ebills-review-amount\"\n          >Amount</span\n        >\n      </th>\n      <th scope=\"col\" aria-hidden=\"true\"></th>\n    </tr>\n  </thead>\n  <tbody\n    bb-billpay-payment-multiple-bills-review-item\n    *ngFor=\"let payment of payments; let last = last\"\n    [last]=\"last\"\n    [payment]=\"payment\"\n  ></tbody>\n</table>\n", components: [{ type: i3__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: BillpayPaymentMultipleBillsReviewItemComponent, selector: "[bb-billpay-payment-multiple-bills-review-item]", inputs: ["payment", "last"] }], directives: [{ type: i6__namespace$4.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsReviewTableComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-multiple-bills-review-table',
                        templateUrl: 'billpay-payment-multiple-bills-review-table.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { payments: [{
                    type: i0.Input
                }] } });

    var BillpayPaymentMultipleBillsSuccessComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsSuccessComponent(assetsService, navigationService, route) {
            this.assetsService = assetsService;
            this.navigationService = navigationService;
            this.route = route;
            this.id = i1.BillpayUtilityService.generateId();
            this.allSucceeded = true;
            this.resolveAsset = this.assetsService.createAssetsResolver({
                widgetName: 'bb-pay-bills-journey',
                getURIFromAssetID: function (assetId) { return "" + assetId; },
            });
            this.successImg = this.resolveAsset('succeed.svg');
            this.successImgNoMotion = this.resolveAsset('no-motion.svg');
        }
        Object.defineProperty(BillpayPaymentMultipleBillsSuccessComponent.prototype, "results", {
            set: function (value) {
                var succeded = value.filter(function (payment) { return payment.succeeded; });
                this.allSucceeded = succeded.length === value.length;
                if (this.allSucceeded) {
                    var getPayee_1 = function (payment) { return payment.payeeTo.nickName || payment.payeeTo.name; };
                    var payees = value
                        .map(function (payment, i) {
                        if (i === 0)
                            return getPayee_1(payment);
                        return i === value.length - 1 ? ' and ' + getPayee_1(payment) : ', ' + getPayee_1(payment);
                    })
                        .join('');
                    this.successMsg = $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject(["You\u2019ve just scheduled ", " payment", " to ", "."], ["You\u2019ve just scheduled ", " payment", " to ", "."])), value.length, value.length > 1 ? 's' : '', payees);
                }
                else {
                    this.payments = value;
                    this.mixedMsg = $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject(["You scheduled sucessfully ", " out of ", " bills."], ["You scheduled sucessfully ", " out of ", " bills."])), succeded.length, value.length);
                }
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentMultipleBillsSuccessComponent.prototype.payMore = function () {
            this.navigationService.navigateToForm({ relativeTo: this.route.parent });
        };
        BillpayPaymentMultipleBillsSuccessComponent.prototype.goToMyAccounts = function () {
            var _a;
            (_a = this.navigationService) === null || _a === void 0 ? void 0 : _a.navigateToMainAppPage();
        };
        return BillpayPaymentMultipleBillsSuccessComponent;
    }());
    BillpayPaymentMultipleBillsSuccessComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsSuccessComponent, deps: [{ token: i1__namespace$4.AssetsService }, { token: PayBillsNavigationService }, { token: i1__namespace.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsSuccessComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsSuccessComponent, selector: "bb-billpay-payment-multiple-bills-success", inputs: { results: "results" }, ngImport: i0__namespace, template: "<div class=\"card card-lg bb-billpay-multiple-bills-other-payees-card\">\n  <div class=\"card-body\">\n    <ng-container *ngIf=\"allSucceeded; else mixedStatus\">\n      <div class=\"bb-text-align-center bb-block--xl\" role=\"alert\">\n        <picture>\n          <source srcset=\"{{ successImgNoMotion | async }}\" media=\"(prefers-reduced-motion: reduce)\" />\n          <img\n            srcset=\"{{ (successImg | async) + '?' + id }}\"\n            alt=\"Success!\"\n            i18n-alt=\"Success!|Text for transfer succeeded@@bb-billpay-multiple-bills-review.transfer-succeeded\"\n            data-role=\"transfer-success-anim\"\n            class=\"img-fluid\"\n          />\n        </picture>\n        <bb-header-ui\n          headingClasses=\"bb-text-semi-bold\"\n          headingType=\"h2\"\n          data-role=\"success-title\"\n          heading=\"Your Bills Were Successfully Scheduled!\"\n          i18n-heading=\"@@billpay-payments-journey.multiple-bills.success.title\"\n        ></bb-header-ui>\n        <span class=\"bb-text-support\">{{ successMsg }}</span>\n      </div>\n    </ng-container>\n    <div class=\"bb-stack bb-stack--center\">\n      <button\n        bbButton\n        color=\"primary\"\n        class=\"bb-stack__item\"\n        data-role=\"multiple-bills-success-pay-more\"\n        i18n=\"@@bb-billpay-multiple-bills-review.transfer-done\"\n        (click)=\"payMore()\"\n      >\n        Pay Another Bill\n      </button>\n      <button bbButton color=\"secondary\" class=\"bb-stack__item\" i18n=\"@@bb-billpay-multiple-bills-review.my-accounts\" (click)=\"goToMyAccounts()\">\n        Go to My Accounts\n      </button>\n    </div>\n  </div>\n</div>\n\n<ng-template #mixedStatus>\n  <div class=\"bb-text-align-center bb-block--xl\">\n    <bb-header-ui\n      headingClasses=\"bb-text-semi-bold\"\n      headingType=\"h2\"\n      data-role=\"success-title\"\n      [heading]=\"mixedMsg\"\n    ></bb-header-ui>\n    <span class=\"bb-text-support\" i18n=\"@@billpay-payments-journey.multiple-bills.mixed-status.message\"\n      >Review the payments that have been processed and the other that failed below</span\n    >\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <bb-billpay-payment-multiple-bills-review-table\n      [payments]=\"payments\"\n    ></bb-billpay-payment-multiple-bills-review-table>\n  </div>\n</ng-template>\n", components: [{ type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentMultipleBillsReviewTableComponent, selector: "bb-billpay-payment-multiple-bills-review-table", inputs: ["payments"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsSuccessComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-multiple-bills-success',
                        templateUrl: 'billpay-payment-multiple-bills-success.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.AssetsService }, { type: PayBillsNavigationService }, { type: i1__namespace.ActivatedRoute }]; }, propDecorators: { results: [{
                    type: i0.Input
                }] } });
    var templateObject_1, templateObject_2;

    var BillpayPaymentMultipleBillsReviewComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsReviewComponent(paymentStateService, dataService, navigationService, route, discardModalService, cdRef) {
            var _this = this;
            this.paymentStateService = paymentStateService;
            this.dataService = dataService;
            this.navigationService = navigationService;
            this.route = route;
            this.discardModalService = discardModalService;
            this.cdRef = cdRef;
            this.destroy$ = new rxjs.Subject();
            this.editMode = false;
            /**
             * Flag for payment error
             */
            this.paymentError = false;
            /**
             * Flag for submitting payment
             */
            this.submittingPayment = false;
            this.id = i1.BillpayUtilityService.generateId();
            /**
             * List of payments
             */
            this.payments$ = this.paymentStateService.paymentState.pipe(operators.tap(function (paymentForms) {
                if (!(paymentForms === null || paymentForms === void 0 ? void 0 : paymentForms.length)) {
                    _this.navigationService.navigateToForm({ relativeTo: _this.route.parent });
                }
            }));
            /**
             * Carry the amount for total amount to be paid
             */
            this.totalAmount$ = this.payments$.pipe(operators.map(function (payments) { return payments === null || payments === void 0 ? void 0 : payments.reduce(function (acc, payment) { return acc + +payment.amount.amount; }, 0); }));
            /**
             * List of responses results
             */
            this.results = [];
        }
        Object.defineProperty(BillpayPaymentMultipleBillsReviewComponent.prototype, "isDiscardModalOpen", {
            get: function () {
                return this.discardModalService.isDiscardModalOpen;
            },
            enumerable: false,
            configurable: true
        });
        BillpayPaymentMultipleBillsReviewComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        BillpayPaymentMultipleBillsReviewComponent.prototype.onWindowUnload = function ($event) {
            if (!this.isDiscardModalOpen) {
                $event.returnValue = true;
            }
        };
        /**
         * Methos to send payment to server
         */
        BillpayPaymentMultipleBillsReviewComponent.prototype.onPaymentConfirm = function (payments) {
            var _this = this;
            this.paymentError = false;
            this.results = [];
            this.submittingPayment = true;
            rxjs.forkJoin(payments.map(function (payment) { return _this.dataService.createPayment(payment).pipe(operators.mapTo(Object.assign(Object.assign({}, payment), { succeeded: true })), operators.catchError(function () { return rxjs.of(Object.assign({ succeeded: false }, payment)); })); }))
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (responseList) { return __awaiter(_this, void 0, void 0, function () {
                var errors;
                return __generator(this, function (_b) {
                    this.submittingPayment = false;
                    this.paymentStateService.isFormProcessing = false;
                    errors = responseList.filter(function (response) { return !(response === null || response === void 0 ? void 0 : response.succeeded); });
                    errors.length === payments.length ? this.allFailed() : (this.results = responseList);
                    this.cdRef.markForCheck();
                    return [2 /*return*/];
                });
            }); });
        };
        BillpayPaymentMultipleBillsReviewComponent.prototype.navigateToForm = function (resetFormValue) {
            if (resetFormValue === void 0) { resetFormValue = false; }
            if (resetFormValue) {
                this.paymentStateService.reset();
            }
            this.navigationService.navigateToForm({ relativeTo: this.route.parent });
        };
        BillpayPaymentMultipleBillsReviewComponent.prototype.allFailed = function () {
            var _a;
            this.paymentStateService.isFormProcessing = true;
            this.submittingPayment = false;
            this.paymentError = true;
            this.cdRef.markForCheck();
            (_a = this.failAlert) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollIntoView(false);
        };
        BillpayPaymentMultipleBillsReviewComponent.prototype.openModal = function () {
            if (this.paymentStateService.isFormProcessing && !this.editMode && !this.paymentError) {
                return this.discardModalService.openModal();
            }
            return rxjs.of(true);
        };
        BillpayPaymentMultipleBillsReviewComponent.prototype.onCancel = function () {
            this.navigateToForm(!!this.paymentError);
        };
        BillpayPaymentMultipleBillsReviewComponent.prototype.onModalResolve = function (isConfirmed) {
            this.discardModalService.onModalResolve(isConfirmed);
            if (isConfirmed) {
                this.paymentStateService.reset();
            }
        };
        BillpayPaymentMultipleBillsReviewComponent.prototype.onEdit = function () {
            this.editMode = true;
            this.navigateToForm();
        };
        return BillpayPaymentMultipleBillsReviewComponent;
    }());
    BillpayPaymentMultipleBillsReviewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsReviewComponent, deps: [{ token: PayBillsStateService }, { token: i1__namespace$1.BillpayPaymentDataService }, { token: PayBillsNavigationService }, { token: i1__namespace.ActivatedRoute }, { token: i1__namespace$1.BillpayDiscardChangesModalService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsReviewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewComponent, selector: "bb-billpay-payment-multiple-bills-review", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [i1.BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "failAlert", first: true, predicate: ["failAlert"], descendants: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"payments$ | async as payments\">\n  <ng-container *ngTemplateOutlet=\"results?.length ? successScreen : reviewTemplate\"> </ng-container>\n  <ng-template #reviewTemplate>\n    <div class=\"card card-lg bb-billpay-multiple-bills-other-payees-card\">\n      <div class=\"card-body\">\n        <div #failAlert>\n          <bb-alert-ui\n            title=\"Something went wrong. Please try again\"\n            i18n-title=\"@@billpay-payments-journey.multiple-bills.fail-message\"\n            (close)=\"(false)\"\n            modifier=\"error\"\n            data-role=\"failure-message\"\n            *ngIf=\"paymentError\"\n          >\n          </bb-alert-ui>\n        </div>\n        <bb-billpay-payment-multiple-bills-review-table\n          [payments]=\"payments\"\n        ></bb-billpay-payment-multiple-bills-review-table>\n      </div>\n    </div>\n\n    <bb-billpay-payment-multiple-bills-sum-board\n      [totalAmount]=\"totalAmount$ | async\"\n      [actionButtons]=\"actionButtons\"\n      [inheritedId]=\"id\"\n    ></bb-billpay-payment-multiple-bills-sum-board>\n  </ng-template>\n  <ng-template #actionButtons>\n    <div>\n      <div class=\"bb-stack\">\n        <button\n          bbButton\n          color=\"link\"\n          class=\"btn-link bb-stack__item bb-stack__item--spacing-md bb-d-none bb-d-md-block\"\n          data-role=\"multiple-bills-cancel-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.cancel-button\"\n          (click)=\"onCancel()\"\n        >\n          Cancel\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-d-none bb-d-md-block bb-stack__item bb-stack__item--spacing-md\"\n          data-role=\"multiple-bills-edit-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.edit-button\"\n          (click)=\"onEdit()\"\n        >\n          Edit Payment\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          [circle]=\"true\"\n          class=\"bb-d-md-none bb-stack__item bb-stack__item--spacing-md\"\n          data-role=\"multiple-bills-edit-button\"\n          i18n=\"@@billpay-payments-journey.multiple-bills.board.edit-button\"\n          (click)=\"onEdit()\"\n        >\n          <bb-icon-ui name=\"edit\"></bb-icon-ui>\n        </button>\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-stack__item bb-stack__item--spacing-none\"\n          data-role=\"multiple-bills-confirm-button\"\n          [isLoading]=\"submittingPayment\"\n          (click)=\"onPaymentConfirm(payments)\"\n          attr.aria-describedby=\"total-amount-label-{{ id }}  total-amount-{{ id }}\"\n        >\n          <span i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button\" class=\"bb-d-none bb-d-md-block\"\n            >Confirm Payment</span\n          >\n          <span i18n=\"@@billpay-payments-journey.multiple-bills.board.confirm-button.mobile\" class=\"bb-d-md-none\"\n            >Pay</span\n          >\n        </bb-load-button-ui>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template #successScreen>\n    <bb-billpay-payment-multiple-bills-success [results]=\"results\"></bb-billpay-payment-multiple-bills-success>\n  </ng-template>\n</ng-container>\n\n<bb-billpay-payment-discard-changes-modal\n  *ngIf=\"isDiscardModalOpen\"\n  data-role=\"billpay-payment-review-page-discard-changes-modal\"\n  (resolve)=\"onModalResolve($event)\"\n  title=\"Cancel Bill Payments?\"\n  i18n-title=\"Discard changes modal header@@billpay.multiple-bills.discard-changes-modal.header\"\n  subtitle=\"Are you sure you want to cancel bill payments? Entered data will be lost.\"\n  i18n-subtitle=\"Discard changes modal body@@billpay.multiple-bills.discard-changes-modal.body\"\n  confirm-button-label=\"Cancel Payments\"\n  i18n-confirm-button-label=\"\n    confirm modal button|Cancel payment confirmation button@@billpay.multiple-bills.discard-changes-modal.confirm-button\"\n  cancel-button-label=\"Not Now\"\n  i18n-cancel-button-label=\"\n    cancel modal button|Continue with current payment button@@billpay.multiple-bills.discard-changes-modal.cancel-button\"\n></bb-billpay-payment-discard-changes-modal>\n", components: [{ type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: BillpayPaymentMultipleBillsReviewTableComponent, selector: "bb-billpay-payment-multiple-bills-review-table", inputs: ["payments"] }, { type: BillpayPaymentMultipleBillsSumBoardComponent, selector: "bb-billpay-payment-multiple-bills-sum-board", inputs: ["totalAmount", "actionButtons", "inheritedId"] }, { type: i3__namespace$2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i9__namespace.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: BillpayPaymentMultipleBillsSuccessComponent, selector: "bb-billpay-payment-multiple-bills-success", inputs: ["results"] }, { type: BillpayPaymentDiscardChangesModalComponent, selector: "bb-billpay-payment-discard-changes-modal", inputs: ["title", "subtitle", "confirm-button-label", "cancel-button-label"], outputs: ["resolve"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsReviewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-billpay-payment-multiple-bills-review',
                        templateUrl: 'billpay-payment-multiple-bills-review.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [i1.BillpayDiscardChangesModalService],
                    }]
            }], ctorParameters: function () { return [{ type: PayBillsStateService }, { type: i1__namespace$1.BillpayPaymentDataService }, { type: PayBillsNavigationService }, { type: i1__namespace.ActivatedRoute }, { type: i1__namespace$1.BillpayDiscardChangesModalService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { failAlert: [{
                    type: i0.ViewChild,
                    args: ['failAlert']
                }], onWindowUnload: [{
                    type: i0.HostListener,
                    args: ['window:beforeunload', ['$event']]
                }] } });

    var BillpayPaymentMultipleBillsReviewViewComponent = /** @class */ (function () {
        function BillpayPaymentMultipleBillsReviewViewComponent() {
        }
        BillpayPaymentMultipleBillsReviewViewComponent.prototype.openModal = function () {
            return this.child.openModal();
        };
        BillpayPaymentMultipleBillsReviewViewComponent.prototype.navigateToForm = function () {
            this.child.onCancel();
        };
        return BillpayPaymentMultipleBillsReviewViewComponent;
    }());
    BillpayPaymentMultipleBillsReviewViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsReviewViewComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BillpayPaymentMultipleBillsReviewViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPaymentMultipleBillsReviewViewComponent, selector: "ng-component", viewQueries: [{ propertyName: "child", first: true, predicate: ["multipleBillsReview"], descendants: true }], ngImport: i0__namespace, template: "\n    <div class=\"bb-block bb-block--lg bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-block bb-block--md pl-0\"\n          data-role=\"pay-a-bill-journey-back\"\n          (click)=\"navigateToForm()\"\n        >\n          <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n          <span i18n=\"button label|Back button@@pay-bills-journey.back-to-multiple-bills\">Back To Pay Bills</span>\n        </button>\n        <bb-header-ui\n          headingType=\"h1\"\n          heading=\"Review Your Payments\"\n          i18n-heading=\"@@pay-bills-journey.title.review-bills\"\n          data-role=\"pay-a-bill-journey-title\"\n        >\n        </bb-header-ui>\n      </div>\n    </div>\n    <bb-billpay-payment-multiple-bills-review #multipleBillsReview></bb-billpay-payment-multiple-bills-review>\n  ", isInline: true, components: [{ type: i3__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPaymentMultipleBillsReviewComponent, selector: "bb-billpay-payment-multiple-bills-review" }], directives: [{ type: i4__namespace$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayPaymentMultipleBillsReviewViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: "\n    <div class=\"bb-block bb-block--lg bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-block bb-block--md pl-0\"\n          data-role=\"pay-a-bill-journey-back\"\n          (click)=\"navigateToForm()\"\n        >\n          <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back\"></i>\n          <span i18n=\"button label|Back button@@pay-bills-journey.back-to-multiple-bills\">Back To Pay Bills</span>\n        </button>\n        <bb-header-ui\n          headingType=\"h1\"\n          heading=\"Review Your Payments\"\n          i18n-heading=\"@@pay-bills-journey.title.review-bills\"\n          data-role=\"pay-a-bill-journey-title\"\n        >\n        </bb-header-ui>\n      </div>\n    </div>\n    <bb-billpay-payment-multiple-bills-review #multipleBillsReview></bb-billpay-payment-multiple-bills-review>\n  ",
                    }]
            }], propDecorators: { child: [{
                    type: i0.ViewChild,
                    args: ['multipleBillsReview']
                }] } });

    var BillpayManagePaymentDeactivateGuardService = /** @class */ (function (_super) {
        __extends(BillpayManagePaymentDeactivateGuardService, _super);
        /** @internal */
        function BillpayManagePaymentDeactivateGuardService(router, location) {
            var _this = _super.call(this, router, location) || this;
            _this.allowedNextRoutes = [
                /^.*;payee=.+$/,
                /^.*\/review$/,
                /^.*\/recurring\/edit\/.+(\/review.+)?$/,
                /^.*\/one-off\/edit\/.+(\/review.+)?$/,
            ];
            _this.allowedPreviousRoutes = [
                /^.*;payee=.+$/,
                /^.*(\/review)$/,
                /^.*(\/form){1}$/,
                /^.*\/recurring\/edit\/.+(\/review.+)?$/,
                /^.*\/one-off\/edit\/.+(\/review.+)?$/,
            ];
            return _this;
        }
        return BillpayManagePaymentDeactivateGuardService;
    }(i1.BillpayBaseDeactivateGuardService));
    BillpayManagePaymentDeactivateGuardService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayManagePaymentDeactivateGuardService, deps: [{ token: i1__namespace.Router }, { token: i4__namespace.Location }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BillpayManagePaymentDeactivateGuardService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayManagePaymentDeactivateGuardService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BillpayManagePaymentDeactivateGuardService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.Router }, { type: i4__namespace.Location }]; } });

    var uiAngModules = [
        i6$2.LoadingIndicatorModule,
        i8.BbDatePipeModule,
        i7$1.EmptyStateModule,
        i1$3.ModalModule,
        i2$1.DropdownSingleSelectModule,
        i2.InputRadioGroupModule,
        i6.InputNumberModule,
        i4$3.ButtonModule,
        i8$1.InputCheckboxModule,
        i8$2.ProductItemCurrentAccountModule,
        i6$1.ProductItemBasicAccountModule,
        i5$1.ProductSelectorModule,
        currencyInput.CurrencyInputModule,
        charCounter.CharCounterModule,
        i3$2.IconModule,
        i4$2.FieldsetModule,
        i7.AlertModule,
        i5.InputValidationMessageModule,
        i4$1.InputDatepickerModule,
        i12.CollapsibleModule,
        i11.TextareaModule,
        i10.AmountInputModule,
        i7.AlertModule,
        i3$1.AmountModule,
        i7$2.DropdownMenuModule,
        i2$2.EllipsisModule,
        i3.HeaderModule,
        i9.LoadButtonModule,
        i6$4.TooltipModule,
    ];
    var components$1 = [
        BillpayPaymentMultipleBillsComponent,
        BillpayPaymentMultipleBillsSumBoardComponent,
        BillpayPaymentMultipleBillsListItemComponent,
        BillpayPaymentMultipleBillsListComponent,
        BillpayPaymentMultipleBillsReviewComponent,
        BillpayPaymentMultipleBillsReviewItemComponent,
        BillpayPaymentMultipleBillsReviewTableComponent,
        BillpayPaymentMultipleBillsSuccessComponent,
        BillpayPaymentFrequencyComponent,
        BillpayPaymentStartDateComponent,
        BillpayPaymentEndDateComponent,
        BillpayPaymentCompactProductSelectorComponent,
        BillpayPaymentFormContainerComponent,
        BillpayEbillPaymentUIComponent,
        ScheduleComponent,
        ScheduleLabelComponent,
        BillpayPaymentDiscardChangesModalComponent,
        BillpayPaymentFormComponent,
        BillpayPaymentRecurringEditReviewContainerComponent,
        BillpayPaymentReviewContainerComponent,
        BillpayPaymentRecurringEditFormContainerComponent,
        BillpayPaymentOneOffEditReviewContainerComponent,
        BillpayPaymentOneOffEditFormContainerComponent,
    ];
    var PayBillsJourneyUiModule = /** @class */ (function () {
        function PayBillsJourneyUiModule() {
        }
        return PayBillsJourneyUiModule;
    }());
    PayBillsJourneyUiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyUiModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PayBillsJourneyUiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyUiModule, declarations: [BillpayPaymentMultipleBillsComponent,
            BillpayPaymentMultipleBillsSumBoardComponent,
            BillpayPaymentMultipleBillsListItemComponent,
            BillpayPaymentMultipleBillsListComponent,
            BillpayPaymentMultipleBillsReviewComponent,
            BillpayPaymentMultipleBillsReviewItemComponent,
            BillpayPaymentMultipleBillsReviewTableComponent,
            BillpayPaymentMultipleBillsSuccessComponent,
            BillpayPaymentFrequencyComponent,
            BillpayPaymentStartDateComponent,
            BillpayPaymentEndDateComponent,
            BillpayPaymentCompactProductSelectorComponent,
            BillpayPaymentFormContainerComponent,
            BillpayEbillPaymentUIComponent,
            ScheduleComponent,
            ScheduleLabelComponent,
            BillpayPaymentDiscardChangesModalComponent,
            BillpayPaymentFormComponent,
            BillpayPaymentRecurringEditReviewContainerComponent,
            BillpayPaymentReviewContainerComponent,
            BillpayPaymentRecurringEditFormContainerComponent,
            BillpayPaymentOneOffEditReviewContainerComponent,
            BillpayPaymentOneOffEditFormContainerComponent], imports: [i4.CommonModule, i1$2.ReactiveFormsModule, i2$3.NgbModule, i1.BillpayJourneysCommonModule, i6$2.LoadingIndicatorModule,
            i8.BbDatePipeModule,
            i7$1.EmptyStateModule,
            i1$3.ModalModule,
            i2$1.DropdownSingleSelectModule,
            i2.InputRadioGroupModule,
            i6.InputNumberModule,
            i4$3.ButtonModule,
            i8$1.InputCheckboxModule,
            i8$2.ProductItemCurrentAccountModule,
            i6$1.ProductItemBasicAccountModule,
            i5$1.ProductSelectorModule,
            currencyInput.CurrencyInputModule,
            charCounter.CharCounterModule,
            i3$2.IconModule,
            i4$2.FieldsetModule,
            i7.AlertModule,
            i5.InputValidationMessageModule,
            i4$1.InputDatepickerModule,
            i12.CollapsibleModule,
            i11.TextareaModule,
            i10.AmountInputModule,
            i7.AlertModule,
            i3$1.AmountModule,
            i7$2.DropdownMenuModule,
            i2$2.EllipsisModule,
            i3.HeaderModule,
            i9.LoadButtonModule,
            i6$4.TooltipModule], exports: [BillpayPaymentMultipleBillsComponent,
            BillpayPaymentMultipleBillsSumBoardComponent,
            BillpayPaymentMultipleBillsListItemComponent,
            BillpayPaymentMultipleBillsListComponent,
            BillpayPaymentMultipleBillsReviewComponent,
            BillpayPaymentMultipleBillsReviewItemComponent,
            BillpayPaymentMultipleBillsReviewTableComponent,
            BillpayPaymentMultipleBillsSuccessComponent,
            BillpayPaymentFrequencyComponent,
            BillpayPaymentStartDateComponent,
            BillpayPaymentEndDateComponent,
            BillpayPaymentCompactProductSelectorComponent,
            BillpayPaymentFormContainerComponent,
            BillpayEbillPaymentUIComponent,
            ScheduleComponent,
            ScheduleLabelComponent,
            BillpayPaymentDiscardChangesModalComponent,
            BillpayPaymentFormComponent,
            BillpayPaymentRecurringEditReviewContainerComponent,
            BillpayPaymentReviewContainerComponent,
            BillpayPaymentRecurringEditFormContainerComponent,
            BillpayPaymentOneOffEditReviewContainerComponent,
            BillpayPaymentOneOffEditFormContainerComponent, i6$2.LoadingIndicatorModule,
            i8.BbDatePipeModule,
            i7$1.EmptyStateModule,
            i1$3.ModalModule,
            i2$1.DropdownSingleSelectModule,
            i2.InputRadioGroupModule,
            i6.InputNumberModule,
            i4$3.ButtonModule,
            i8$1.InputCheckboxModule,
            i8$2.ProductItemCurrentAccountModule,
            i6$1.ProductItemBasicAccountModule,
            i5$1.ProductSelectorModule,
            currencyInput.CurrencyInputModule,
            charCounter.CharCounterModule,
            i3$2.IconModule,
            i4$2.FieldsetModule,
            i7.AlertModule,
            i5.InputValidationMessageModule,
            i4$1.InputDatepickerModule,
            i12.CollapsibleModule,
            i11.TextareaModule,
            i10.AmountInputModule,
            i7.AlertModule,
            i3$1.AmountModule,
            i7$2.DropdownMenuModule,
            i2$2.EllipsisModule,
            i3.HeaderModule,
            i9.LoadButtonModule,
            i6$4.TooltipModule] });
    PayBillsJourneyUiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyUiModule, imports: [__spreadArray([i4.CommonModule, i1$2.ReactiveFormsModule, i2$3.NgbModule, i1.BillpayJourneysCommonModule], __read(uiAngModules)), i6$2.LoadingIndicatorModule,
            i8.BbDatePipeModule,
            i7$1.EmptyStateModule,
            i1$3.ModalModule,
            i2$1.DropdownSingleSelectModule,
            i2.InputRadioGroupModule,
            i6.InputNumberModule,
            i4$3.ButtonModule,
            i8$1.InputCheckboxModule,
            i8$2.ProductItemCurrentAccountModule,
            i6$1.ProductItemBasicAccountModule,
            i5$1.ProductSelectorModule,
            currencyInput.CurrencyInputModule,
            charCounter.CharCounterModule,
            i3$2.IconModule,
            i4$2.FieldsetModule,
            i7.AlertModule,
            i5.InputValidationMessageModule,
            i4$1.InputDatepickerModule,
            i12.CollapsibleModule,
            i11.TextareaModule,
            i10.AmountInputModule,
            i7.AlertModule,
            i3$1.AmountModule,
            i7$2.DropdownMenuModule,
            i2$2.EllipsisModule,
            i3.HeaderModule,
            i9.LoadButtonModule,
            i6$4.TooltipModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyUiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components$1)),
                        imports: __spreadArray([i4.CommonModule, i1$2.ReactiveFormsModule, i2$3.NgbModule, i1.BillpayJourneysCommonModule], __read(uiAngModules)),
                        exports: __spreadArray(__spreadArray([], __read(components$1)), __read(uiAngModules)),
                    }]
            }] });

    var defaultRoute = {
        path: '',
        component: PayBillsJourneyComponent,
        children: [
            { path: 'enrolment', component: BillPayEnrolmentViewComponent },
            {
                path: '',
                canActivate: [i1.BillpayEnrolmentGuard],
                children: [
                    { path: '', redirectTo: 'form', pathMatch: 'full' },
                    {
                        path: 'form',
                        component: BillpayPaymentMultipleBillsViewComponent,
                        canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                    },
                    {
                        path: 'review',
                        component: BillpayPaymentMultipleBillsReviewViewComponent,
                        canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                    },
                    {
                        path: 'recurring/edit/:id',
                        component: BillpayPaymentRecurringEditFormViewComponent,
                        canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                    },
                    {
                        path: 'recurring/edit/:id/review',
                        component: BillpayPaymentRecurringEditReviewViewComponent,
                        canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                    },
                    {
                        path: 'one-off/edit/:id',
                        component: BillpayPaymentOneOffEditFormViewComponent,
                        canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                    },
                    {
                        path: 'one-off/edit/:id/review',
                        component: BillpayPaymentOneOffEditReviewViewComponent,
                        canDeactivate: [BillpayManagePaymentDeactivateGuardService],
                    },
                ],
            },
        ],
    };
    var components = [
        BillPayEnrolmentViewComponent,
        BillpayPaymentFormViewComponent,
        BillpayPaymentReviewViewComponent,
        BillpayPaymentRecurringEditFormViewComponent,
        BillpayPaymentRecurringEditReviewViewComponent,
        BillpayPaymentOneOffEditFormViewComponent,
        BillpayPaymentOneOffEditReviewViewComponent,
        BillpayPaymentMultipleBillsViewComponent,
        BillpayPaymentMultipleBillsReviewViewComponent,
    ];
    var PayBillsJourneyModule = /** @class */ (function () {
        function PayBillsJourneyModule() {
        }
        PayBillsJourneyModule.forRoot = function (data) {
            if (data === void 0) { data = { route: defaultRoute }; }
            return {
                ngModule: PayBillsJourneyModule,
                providers: [i1$1.provideRoutes([data.route])],
            };
        };
        return PayBillsJourneyModule;
    }());
    PayBillsJourneyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PayBillsJourneyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyModule, declarations: [PayBillsJourneyComponent, BillPayEnrolmentViewComponent,
            BillpayPaymentFormViewComponent,
            BillpayPaymentReviewViewComponent,
            BillpayPaymentRecurringEditFormViewComponent,
            BillpayPaymentRecurringEditReviewViewComponent,
            BillpayPaymentOneOffEditFormViewComponent,
            BillpayPaymentOneOffEditReviewViewComponent,
            BillpayPaymentMultipleBillsViewComponent,
            BillpayPaymentMultipleBillsReviewViewComponent], imports: [i4.CommonModule,
            i1$1.RouterModule,
            i1.BillpayJourneysCommonModule,
            i1$2.ReactiveFormsModule,
            PayBillsJourneyUiModule,
            i1$2.FormsModule,
            i2$3.NgbModule, i1__namespace$4.BackbaseCoreModule] });
    PayBillsJourneyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyModule, providers: [
            BillpayManagePaymentDeactivateGuardService,
            PayBillsStateService,
            i1.BillpayPaymentDataService,
            PayBillsJourneyConfigService,
            i1.BillpayPayeeDataService,
        ], imports: [[
                i4.CommonModule,
                i1$1.RouterModule,
                i1.BillpayJourneysCommonModule,
                i1$2.ReactiveFormsModule,
                PayBillsJourneyUiModule,
                i1$2.FormsModule,
                i2$3.NgbModule,
                i1$4.BackbaseCoreModule.withConfig({
                    classMap: { PayBillsJourneyComponent: PayBillsJourneyComponent },
                }),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PayBillsJourneyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([PayBillsJourneyComponent], __read(components)),
                        imports: [
                            i4.CommonModule,
                            i1$1.RouterModule,
                            i1.BillpayJourneysCommonModule,
                            i1$2.ReactiveFormsModule,
                            PayBillsJourneyUiModule,
                            i1$2.FormsModule,
                            i2$3.NgbModule,
                            i1$4.BackbaseCoreModule.withConfig({
                                classMap: { PayBillsJourneyComponent: PayBillsJourneyComponent },
                            }),
                        ],
                        providers: [
                            BillpayManagePaymentDeactivateGuardService,
                            PayBillsStateService,
                            i1.BillpayPaymentDataService,
                            PayBillsJourneyConfigService,
                            i1.BillpayPayeeDataService,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BasePaymentEditFormContainerDirective = BasePaymentEditFormContainerDirective;
    exports.BasePaymentEditReviewContainerDirective = BasePaymentEditReviewContainerDirective;
    exports.BillPayEnrolmentViewComponent = BillPayEnrolmentViewComponent;
    exports.BillpayManagePaymentDeactivateGuardService = BillpayManagePaymentDeactivateGuardService;
    exports.BillpayPaymentFormViewComponent = BillpayPaymentFormViewComponent;
    exports.BillpayPaymentMultipleBillsReviewViewComponent = BillpayPaymentMultipleBillsReviewViewComponent;
    exports.BillpayPaymentMultipleBillsViewComponent = BillpayPaymentMultipleBillsViewComponent;
    exports.BillpayPaymentOneOffEditFormViewComponent = BillpayPaymentOneOffEditFormViewComponent;
    exports.BillpayPaymentOneOffEditReviewViewComponent = BillpayPaymentOneOffEditReviewViewComponent;
    exports.BillpayPaymentRecurringEditFormViewComponent = BillpayPaymentRecurringEditFormViewComponent;
    exports.BillpayPaymentRecurringEditReviewViewComponent = BillpayPaymentRecurringEditReviewViewComponent;
    exports.BillpayPaymentReviewViewComponent = BillpayPaymentReviewViewComponent;
    exports.PayBillsCommunicationService = CommunicationService;
    exports.PayBillsJourneyComponent = PayBillsJourneyComponent;
    exports.PayBillsJourneyConfigService = PayBillsJourneyConfigService;
    exports.PayBillsJourneyConfigurationToken = PayBillsJourneyConfigurationToken;
    exports.PayBillsJourneyModule = PayBillsJourneyModule;
    exports.PayBillsNavigationService = PayBillsNavigationService;
    exports.PayBillsStateService = PayBillsStateService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-pay-bills-journey-ang.umd.js.map
