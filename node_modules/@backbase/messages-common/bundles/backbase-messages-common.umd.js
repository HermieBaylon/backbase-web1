(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/foundation-ang/core'), require('rxjs'), require('rxjs/operators'), require('@backbase/foundation-ang/web-sdk'), require('@backbase/messages-v5-http-ang'), require('@angular/forms'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/rich-text-editor'), require('@backbase/ui-ang/search-box'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-file'), require('@backbase/ui-ang/file-attachment'), require('@angular/localize/init'), require('@backbase/data-ang/user'), require('@backbase/ui-ang/keyboard-click-directive'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/empty-state'), require('@angular/router'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/loading-indicator')) :
    typeof define === 'function' && define.amd ? define('@backbase/messages-common', ['exports', '@angular/core', '@angular/common', '@backbase/foundation-ang/core', 'rxjs', 'rxjs/operators', '@backbase/foundation-ang/web-sdk', '@backbase/messages-v5-http-ang', '@angular/forms', '@backbase/ui-ang/notification', '@backbase/ui-ang/button', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/load-button', '@backbase/ui-ang/rich-text-editor', '@backbase/ui-ang/search-box', '@backbase/ui-ang/header', '@backbase/ui-ang/modal', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-file', '@backbase/ui-ang/file-attachment', '@angular/localize/init', '@backbase/data-ang/user', '@backbase/ui-ang/keyboard-click-directive', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/empty-state', '@angular/router', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/badge', '@backbase/ui-ang/alert', '@backbase/ui-ang/loading-indicator'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["messages-common"] = {}), global.ng.core, global.ng.common, global.i1$1, global.rxjs, global.rxjs.operators, global.webSdk, global.i1, global.ng.forms, global.i1$2, global.i18, global.i8, global.i12, global.i11, global.i9, global.i15, global.i13, global.i10, global.i2$1, global.i1$3, global.i1$4, global.i4$1, global.i5, global.ng.localize.init, global.i1$5, global.i4$2, global.i6, global.i1$6, global.ng.router, global.i7, global.i1$7, global.i8$1, global.i9$1));
})(this, (function (exports, i0, i2, i1$1, rxjs, operators, webSdk, i1, i4, i1$2, i18, i8, i12, i11, i9, i15, i13, i10, i2$1, i1$3, i1$4, i4$1, i5, init, i1$5, i4$2, i6, i1$6, i2$2, i7, i1$7, i8$1, i9$1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i18__namespace = /*#__PURE__*/_interopNamespace(i18);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i15__namespace = /*#__PURE__*/_interopNamespace(i15);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2$1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$4);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$5);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$6);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i1__namespace$7 = /*#__PURE__*/_interopNamespace(i1$7);
    var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
    var i9__namespace$1 = /*#__PURE__*/_interopNamespace(i9$1);

    var MessagesEncodingService = /** @class */ (function () {
        function MessagesEncodingService() {
        }
        /**
         * Message base64 decode
         *
         * @param str Encoded string
         */
        MessagesEncodingService.prototype.b64Decode = function (str) {
            return decodeURIComponent(atob(str)
                .split('')
                .map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            })
                .join(''));
        };
        /**
         * Message base64 encode
         *
         * @param str Decoded string
         */
        MessagesEncodingService.prototype.b64Encode = function (str) {
            return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (_match, p1) {
                return String.fromCharCode(parseInt(p1, 16));
            }));
        };
        return MessagesEncodingService;
    }());
    MessagesEncodingService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEncodingService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesEncodingService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEncodingService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEncodingService, decorators: [{
                type: i0.Injectable
            }] });

    var PreventBubbleDownDirective = /** @class */ (function () {
        function PreventBubbleDownDirective() {
        }
        PreventBubbleDownDirective.prototype.onMouseDown = function ($event) {
            $event.preventDefault();
        };
        return PreventBubbleDownDirective;
    }());
    PreventBubbleDownDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: PreventBubbleDownDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    PreventBubbleDownDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: PreventBubbleDownDirective, selector: "[bbPreventBubbleDown]", host: { listeners: { "mousedown": "onMouseDown($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: PreventBubbleDownDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPreventBubbleDown]',
                    }]
            }], propDecorators: { onMouseDown: [{
                    type: i0.HostListener,
                    args: ['mousedown', ['$event']]
                }] } });

    var PreventBubbleDownModule = /** @class */ (function () {
        function PreventBubbleDownModule() {
        }
        return PreventBubbleDownModule;
    }());
    PreventBubbleDownModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: PreventBubbleDownModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PreventBubbleDownModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: PreventBubbleDownModule, declarations: [PreventBubbleDownDirective], imports: [i2.CommonModule], exports: [PreventBubbleDownDirective] });
    PreventBubbleDownModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: PreventBubbleDownModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: PreventBubbleDownModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [PreventBubbleDownDirective],
                        imports: [i2.CommonModule],
                        exports: [PreventBubbleDownDirective],
                    }]
            }] });

    var MessagesToken = 'messages';
    var MessagesPollPeriod$1 = 5000;
    var bbEventUnreadConversationCountUpdate$1 = 'bb.event.unread-conversation-count.update';
    var MessagesUnreadConversationCountService = /** @class */ (function () {
        function MessagesUnreadConversationCountService(messagecenterService, pubSub) {
            this.messagecenterService = messagecenterService;
            this.pubSub = pubSub;
            this.resetSubject = new rxjs.Subject();
            this.subscriptionHandler = this.reset.bind(this);
            this.pubSub.subscribe(bbEventUnreadConversationCountUpdate$1, this.subscriptionHandler);
        }
        /**
         * Conversations count poll source
         */
        MessagesUnreadConversationCountService.prototype.source = function () {
            var _this = this;
            return function () { return rxjs.merge(_this.resetSubject, rxjs.of(undefined)).pipe(operators.switchMap(function () { return rxjs.timer(0, MessagesPollPeriod$1).pipe(operators.concatMap(function () { return _this.getUnreadConversationCount(); }), operators.map(function (body) { return ({ token: MessagesToken, count: body ? body.unreadCount : 0 }); })); })); };
        };
        /**
         * Get conversations count
         *
         * @returns Get conversations count stream
         */
        MessagesUnreadConversationCountService.prototype.getUnreadConversationCount = function () {
            return this.messagecenterService.getUnreadConversationsCount();
        };
        MessagesUnreadConversationCountService.prototype.reset = function () {
            this.resetSubject.next();
        };
        return MessagesUnreadConversationCountService;
    }());
    MessagesUnreadConversationCountService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUnreadConversationCountService, deps: [{ token: i1__namespace.MessagecenterHttpService }, { token: webSdk.PUBSUB }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesUnreadConversationCountService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUnreadConversationCountService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUnreadConversationCountService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.MessagecenterHttpService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }];
        } });

    var MessagesUnreadConversationCountModule = /** @class */ (function () {
        function MessagesUnreadConversationCountModule() {
        }
        return MessagesUnreadConversationCountModule;
    }());
    MessagesUnreadConversationCountModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUnreadConversationCountModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesUnreadConversationCountModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUnreadConversationCountModule, imports: [i2.CommonModule, i1__namespace$1.BackbaseCoreModule] });
    MessagesUnreadConversationCountModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUnreadConversationCountModule, providers: [MessagesUnreadConversationCountService], imports: [[
                i2.CommonModule,
                i1$1.BackbaseCoreModule.withConfig({
                    pipelineProcessors: [
                        {
                            name: 'counters-badge',
                            provider: {
                                provide: MessagesUnreadConversationCountService,
                                useClass: MessagesUnreadConversationCountService,
                                deps: [i1.MessagecenterHttpService, webSdk.PUBSUB],
                            },
                        },
                    ],
                }),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUnreadConversationCountModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i2.CommonModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                pipelineProcessors: [
                                    {
                                        name: 'counters-badge',
                                        provider: {
                                            provide: MessagesUnreadConversationCountService,
                                            useClass: MessagesUnreadConversationCountService,
                                            deps: [i1.MessagecenterHttpService, webSdk.PUBSUB],
                                        },
                                    },
                                ],
                            }),
                        ],
                        providers: [MessagesUnreadConversationCountService],
                    }]
            }] });

    var MessagesPollPeriod = 5000;
    var bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
    var MessagesEmployeeConversationCountersService = /** @class */ (function () {
        function MessagesEmployeeConversationCountersService(service, pubSub) {
            this.service = service;
            this.pubSub = pubSub;
            this.resetSubject = new rxjs.Subject();
            this.subscriptionHandler = this.reset.bind(this);
            this.pubSub.subscribe(bbEventUnreadConversationCountUpdate, this.subscriptionHandler);
        }
        /**
         * Conversations count poll source
         */
        MessagesEmployeeConversationCountersService.prototype.source = function () {
            var _this = this;
            return function () { return rxjs.merge(_this.resetSubject, rxjs.of(undefined)).pipe(operators.switchMap(function () { return rxjs.timer(0, MessagesPollPeriod).pipe(operators.concatMap(function () { return _this.getConversationCounters(); })); })); };
        };
        /**
         * Get conversations count
         *
         * @returns Get conversation counters stream
         */
        MessagesEmployeeConversationCountersService.prototype.getConversationCounters = function () {
            return this.service.getConversationsCounter();
        };
        MessagesEmployeeConversationCountersService.prototype.reset = function () {
            this.resetSubject.next();
        };
        return MessagesEmployeeConversationCountersService;
    }());
    MessagesEmployeeConversationCountersService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeConversationCountersService, deps: [{ token: i1__namespace.EmployeeHttpService }, { token: webSdk.PUBSUB }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesEmployeeConversationCountersService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeConversationCountersService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeConversationCountersService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.EmployeeHttpService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }];
        } });

    var MessagesEmployeeConversationCountersModule = /** @class */ (function () {
        function MessagesEmployeeConversationCountersModule() {
        }
        return MessagesEmployeeConversationCountersModule;
    }());
    MessagesEmployeeConversationCountersModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeConversationCountersModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesEmployeeConversationCountersModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeConversationCountersModule, imports: [i2.CommonModule, i1__namespace$1.BackbaseCoreModule] });
    MessagesEmployeeConversationCountersModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeConversationCountersModule, providers: [MessagesEmployeeConversationCountersService], imports: [[
                i2.CommonModule,
                i1$1.BackbaseCoreModule.withConfig({
                    pipelineProcessors: [
                        {
                            name: 'tab-counters-badge',
                            provider: {
                                provide: MessagesEmployeeConversationCountersService,
                                useClass: MessagesEmployeeConversationCountersService,
                                deps: [i1.EmployeeHttpService, webSdk.PUBSUB],
                            },
                        },
                    ],
                }),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeConversationCountersModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i2.CommonModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                pipelineProcessors: [
                                    {
                                        name: 'tab-counters-badge',
                                        provider: {
                                            provide: MessagesEmployeeConversationCountersService,
                                            useClass: MessagesEmployeeConversationCountersService,
                                            deps: [i1.EmployeeHttpService, webSdk.PUBSUB],
                                        },
                                    },
                                ],
                            }),
                        ],
                        providers: [MessagesEmployeeConversationCountersService],
                    }]
            }] });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.ManipulationType = void 0;
    (function (ManipulationType) {
        ManipulationType["resolve"] = "resolve";
        ManipulationType["unresolve"] = "unresolve";
        ManipulationType["assign"] = "assign";
        ManipulationType["unassign"] = "unassign";
        ManipulationType["discard"] = "discard";
        ManipulationType["discardDraft"] = "discardDraft";
        ManipulationType["discardPreview"] = "discardPreview";
        ManipulationType["deleteTopic"] = "deleteTopic";
        ManipulationType["deleteMailout"] = "deleteMailout";
    })(exports.ManipulationType || (exports.ManipulationType = {}));

    var SharedMethodsService = /** @class */ (function () {
        function SharedMethodsService(notificationService, pubSub) {
            this.notificationService = notificationService;
            this.pubSub = pubSub;
        }
        /**
         * Check is form valid
         *
         * @param form Form object
         * @param prevValue Previous value
         * @returns Is form valid flag
         */
        SharedMethodsService.prototype.isFormInvalid = function (form, prevValue) {
            var e_1, _a;
            if (form && form.dirty) {
                var formVal = form.value || {};
                var keys = Object.keys(formVal);
                try {
                    for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                        var field = keys_1_1.value;
                        if (prevValue) {
                            if (prevValue[field] !== formVal[field]) {
                                return true;
                            }
                        }
                        else if (formVal[field]) {
                            return Array.isArray(formVal[field]) ? formVal[field].length > 0 : true;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return false;
        };
        /**
         * Check if form has value
         *
         * @param form Form object
         * @returns Has form value flag
         */
        SharedMethodsService.prototype.hasFormValue = function (form) {
            var e_2, _a;
            var formVal = (form && form.value) || {};
            var keys = Object.keys(formVal);
            try {
                for (var keys_2 = __values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                    var field = keys_2_1.value;
                    if (formVal[field]) {
                        return Array.isArray(formVal[field]) ? formVal[field].length > 0 : true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (keys_2_1 && !keys_2_1.done && (_a = keys_2.return)) _a.call(keys_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return false;
        };
        /**
         * Handles a given event
         *
         * @param eventName Event name
         */
        SharedMethodsService.prototype.eventBusFactory = function (eventName) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                var handler = function (data) { return observer.next(data); };
                _this.pubSub.subscribe(eventName, handler);
                return function () {
                    _this.pubSub.unsubscribe(eventName, handler);
                };
            });
        };
        /**
         * Publish a given event
         *
         * @template T
         * @param eventName Event name
         * @param body Event data
         */
        SharedMethodsService.prototype.eventBusPublish = function (eventName, body) {
            this.pubSub.publish(eventName, body);
        };
        /**
         * Get error message from error body
         *
         * @param error Error value
         * @returns Error message
         */
        SharedMethodsService.prototype.getErrorMessage = function (error) {
            return typeof error !== 'string' ? (error.error && error.error.message) || error.message : error;
        };
        /**
         * Open notification
         *
         * @param header Notification header
         * @param modifier Notification type
         * @param message Notification message
         */
        SharedMethodsService.prototype.openNotification = function (header, modifier, message) {
            if (modifier === void 0) { modifier = 'success'; }
            if (message === void 0) { message = ''; }
            if (!header)
                return;
            this.notificationService.showNotification({
                header: header,
                message: message,
                modifier: modifier,
                dismissible: false,
            });
        };
        /**
         * Map response to take body and total count
         *
         * @template T
         * @param rawData Response data
         * @returns Response body and total count
         */
        SharedMethodsService.prototype.processData = function (rawData) {
            var totalCount = (rawData && parseInt(String(rawData.headers.get('x-total-count')), 10)) || 0;
            return {
                data: (rawData && rawData.body) || [],
                totalCount: totalCount,
            };
        };
        return SharedMethodsService;
    }());
    SharedMethodsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SharedMethodsService, deps: [{ token: i1__namespace$2.NotificationService }, { token: webSdk.PUBSUB }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SharedMethodsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SharedMethodsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SharedMethodsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$2.NotificationService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }];
        } });

    var MessagesManipulationConfirmModalService = /** @class */ (function () {
        function MessagesManipulationConfirmModalService(shared) {
            this.shared = shared;
            this.initialModalVal = {
                opened: false,
                type: undefined,
            };
            this.emitToggleModal = new rxjs.BehaviorSubject(this.initialModalVal);
            /**
             * Toggle modal event emitter
             */
            this.emitToggleModal$ = this.emitToggleModal.asObservable();
        }
        /**
         * Toggle confirm modal
         *
         * @param shouldOpen Should open modal flag
         * @param type Manipulation type
         * @param form Form data
         * @param prevValue Previous value
         */
        MessagesManipulationConfirmModalService.prototype.toggleModal = function (shouldOpen, type, form, prevValue) {
            var opened = shouldOpen;
            if (type === exports.ManipulationType.discard) {
                opened = this.shared.isFormInvalid(form, prevValue);
            }
            this.emitToggleModal.next({ opened: opened, type: type });
        };
        return MessagesManipulationConfirmModalService;
    }());
    MessagesManipulationConfirmModalService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalService, deps: [{ token: SharedMethodsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesManipulationConfirmModalService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: SharedMethodsService }]; } });

    var MessagesUploadAttachmentsService = /** @class */ (function () {
        function MessagesUploadAttachmentsService() {
            this.reset$ = new rxjs.Subject();
        }
        MessagesUploadAttachmentsService.prototype.reset = function (discard) {
            if (discard === void 0) { discard = false; }
            this.reset$.next(discard);
        };
        return MessagesUploadAttachmentsService;
    }());
    MessagesUploadAttachmentsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesUploadAttachmentsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsService, decorators: [{
                type: i0.Injectable
            }] });

    var BaseCreateMessageFormService = /** @class */ (function () {
        function BaseCreateMessageFormService() {
        }
        return BaseCreateMessageFormService;
    }());

    var BaseCreateMessageFormComponent = /** @class */ (function () {
        function BaseCreateMessageFormComponent(sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService) {
            this.sharedService = sharedService;
            this.confirmModalService = confirmModalService;
            this.cd = cd;
            this.createMessageFormService = createMessageFormService;
            this.fb = fb;
            this.encodingService = encodingService;
            this.uploadService = uploadService;
            /**
             * The event that's fired after confirm button is pressed.
             */
            this.confirm = new i0.EventEmitter();
            /**
             * The event that's fired after cancel button is pressed.
             */
            this.cancel = new i0.EventEmitter();
            this.hostRef = this;
            /**
             * Confirmation modal parameters.
             */
            this.confirmationModal = {
                opened: false,
                type: undefined,
            };
            /**
             * The flag indicating if the form is loading.
             */
            this.formLoading = false;
            this.topics$ = new rxjs.BehaviorSubject(undefined);
            /**
             * The stream with topics.
             */
            this.topics = this.topics$.asObservable();
            /**
             * The manipulationType enum ( `resolve`, `unresolve`, `assign`, `unassign`, `discard`,
             * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`)
             */
            this.manipulationTypes = exports.ManipulationType;
            this.unsubscribe$ = new rxjs.Subject();
            this.draftId$ = new rxjs.BehaviorSubject(undefined);
            this.newMessageFormGroup = this.fb.group({
                topic: ['', i4.Validators.required],
                subject: ['', i4.Validators.required],
                body: ['', i4.Validators.required],
                attachments: [],
            });
        }
        Object.defineProperty(BaseCreateMessageFormComponent.prototype, "draftId", {
            /**
             * The draft ID getter.
             */
            get: function () {
                return this.draftId$.getValue();
            },
            /**
             * Input draft id to get draft and prefill compose form with it
             */
            set: function (value) {
                this.draftId$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        BaseCreateMessageFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.reset) {
                this.reset.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () {
                    _this.confirmModalService.toggleModal(true, _this.manipulationTypes.discard, _this.newMessageFormGroup, _this.draftFormValue);
                });
            }
            this.createMessageFormService.getTopics().subscribe(function (res) {
                _this.restoreTopicSelection(res);
                _this.topics$.next(res);
            });
            this.draftId$
                .pipe(operators.filter(function (id) { return !!(id && id.length); }), operators.switchMap(function (id) { return _this.getDrafts(id); }))
                .subscribe();
            this.confirmModalService.emitToggleModal$.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (_c) {
                var opened = _c.opened, type = _c.type;
                _this.confirmationModal = { opened: opened, type: type };
                if (!opened && type === exports.ManipulationType.discard) {
                    _this.onCancel();
                }
                _this.cd.detectChanges();
            });
        };
        /**
         * The method to get a simple value from the form.
         *
         * @param simpleFormModel Message data
         */
        BaseCreateMessageFormComponent.prototype.getSimpleFormVal = function (_c) {
            var body = _c.body, subject = _c.subject, topic = _c.topic, attachments = _c.attachments;
            return Object.assign(Object.assign(Object.assign(Object.assign({}, (body && body.length && { body: this.encodingService.b64Encode(body) })), (subject && subject.length && { subject: subject })), (topic && topic.id && { topic: topic.id })), (attachments && attachments.length && { attachments: attachments.map(function (item) { return item.id; }) }));
        };
        BaseCreateMessageFormComponent.prototype.resetFormOnElementBlur = function () {
            var _this = this;
            if (!this.isModalOpen) {
                setTimeout(function () {
                    _this.newMessageFormGroup.reset();
                }, 0);
            }
        };
        /**
         * The method to create a message.
         *
         * @param value Message data
         */
        BaseCreateMessageFormComponent.prototype.createMessage = function (value) {
            var _this = this;
            this.formLoading = true;
            this.newMessageFormGroup.disable();
            this.createMessageFormService
                .createMessage(value)
                .pipe(operators.first(), operators.switchMap(function () {
                if (_this.createMessageFormService.deleteDraft && _this.draftId) {
                    return _this.createMessageFormService.deleteDraft(_this.draftId);
                }
                return rxjs.of(undefined);
            }), operators.finalize(function () {
                _this.formLoading = false;
            }))
                .subscribe(this.responseHandler(this.messageComposeSuccessTpl, this.messageComposeErrorTpl));
        };
        /**
         * The method to save a message as a draft.
         *
         * @param value Draft data
         */
        BaseCreateMessageFormComponent.prototype.onSave = function (value) {
            this.newMessageFormGroup.disable();
            if (this.sharedService.hasFormValue(this.newMessageFormGroup) &&
                this.sharedService.isFormInvalid(this.newMessageFormGroup, this.draftFormValue)) {
                if (this.draftId) {
                    this.updateDraft(this.draftId, value);
                }
                else {
                    this.saveDraft(value);
                }
            }
            else {
                this.onCancel();
            }
        };
        /**
         * The method to get the draft and prefill the compose form with it.
         *
         * @param id Draft id
         */
        BaseCreateMessageFormComponent.prototype.getDrafts = function (id) {
            var _this = this;
            if (this.createMessageFormService.getDraft && id) {
                return this.createMessageFormService.getDraft(id).pipe(operators.map(function (res) {
                    var e_1, _c;
                    var drafts = res || {};
                    var formValue = {};
                    var topics = _this.topics$.getValue();
                    try {
                        for (var _d = __values(Object.entries(drafts)), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var _f = __read(_e.value, 2), key = _f[0], value = _f[1];
                            formValue[key] = value;
                            if (_this.newMessageFormGroup.controls.hasOwnProperty(key)) {
                                formValue[key] = _this.handleFormValues(key, value, topics);
                                if (formValue[key]) {
                                    _this.newMessageFormGroup.controls[key].setValue(formValue[key]);
                                }
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    _this.draftFormValue = formValue;
                    _this.newMessageFormGroup.markAsPristine();
                    return res;
                }));
            }
            return rxjs.EMPTY;
        };
        BaseCreateMessageFormComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        /**
         * The method to resolve the confirmation modal.
         */
        BaseCreateMessageFormComponent.prototype.confirmConfirmationModal = function () {
            if (this.confirmationModal && this.confirmationModal.type === exports.ManipulationType.discard) {
                this.onCancel();
            }
            this.confirmModalService.toggleModal(false);
        };
        /**
         * The method to cancel the confirmation modal.
         */
        BaseCreateMessageFormComponent.prototype.onCancel = function () {
            this.resetToInit(true);
            this.cancel.emit();
        };
        /**
         * The method to get any errors generated by failing validation, or null if there are no errors.
         *
         * @param field Field name
         * @param type Error type
         */
        BaseCreateMessageFormComponent.prototype.hasError = function (field, type) {
            var _a;
            var control = this.getControl(field);
            return (_a = control === null || control === void 0 ? void 0 : control.errors) === null || _a === void 0 ? void 0 : _a[type];
        };
        /**
         * The method that defines whether the control is valid or not.
         *
         * @param field Field name
         * @returns Is form field valid flag
         */
        BaseCreateMessageFormComponent.prototype.isInvalidControl = function (field) {
            var control = this.getControl(field);
            return !!control && control.touched && control.invalid;
        };
        BaseCreateMessageFormComponent.prototype.saveDraft = function (value) {
            if (this.createMessageFormService.saveDraft) {
                this.createMessageFormService
                    .saveDraft(value)
                    .pipe(operators.first())
                    .subscribe(this.responseHandler(this.messageSaveDraftSuccessTpl, this.messageSaveDraftErrorTpl));
            }
        };
        BaseCreateMessageFormComponent.prototype.updateDraft = function (draftId, value) {
            if (this.createMessageFormService.updateDraft) {
                this.createMessageFormService
                    .updateDraft(draftId, value)
                    .pipe(operators.first())
                    .subscribe(this.responseHandler(this.messageUpdateDraftSuccessTpl, this.messageUpdateDraftErrorTpl));
            }
        };
        BaseCreateMessageFormComponent.prototype.handleFormValues = function (key, value, topics) {
            if (key === 'body') {
                return this.encodingService.b64Decode(value);
            }
            if (key === 'topic' && topics) {
                var existingTopic = topics.find(function (topic) { return topic.id === value.id; });
                return existingTopic ? existingTopic : '';
            }
            if (key === 'attachments') {
                this.attachments = __spreadArray([], __read(value));
            }
            return value;
        };
        BaseCreateMessageFormComponent.prototype.responseHandler = function (successTpl, errorTpl) {
            var _this = this;
            return {
                next: function (res) {
                    _this.sharedService.openNotification(successTpl ? successTpl : '');
                    _this.confirm.emit(res && res.id);
                },
                error: function (error) {
                    var errorMessage = _this.sharedService.getErrorMessage(error) || errorTpl;
                    _this.sharedService.openNotification(errorMessage, 'error');
                    _this.newMessageFormGroup.enable();
                },
                complete: function () { return _this.resetToInit(); },
            };
        };
        BaseCreateMessageFormComponent.prototype.resetToInit = function (isFormDiscard) {
            if (isFormDiscard === void 0) { isFormDiscard = false; }
            this.newMessageFormGroup.enable();
            this.newMessageFormGroup.reset();
            this.draftFormValue = undefined;
            this.uploadService.reset(isFormDiscard);
        };
        BaseCreateMessageFormComponent.prototype.getControl = function (field) {
            return this.newMessageFormGroup && this.newMessageFormGroup.controls[field];
        };
        BaseCreateMessageFormComponent.prototype.restoreTopicSelection = function (topics) {
            var _this = this;
            topics === null || topics === void 0 ? void 0 : topics.map(function (topic) {
                var _a, _b;
                if (topic.id === ((_b = (_a = _this.newMessageFormGroup.controls['topic']) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.id)) {
                    _this.newMessageFormGroup.controls['topic'].setValue(topic);
                }
            });
        };
        return BaseCreateMessageFormComponent;
    }());
    BaseCreateMessageFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageFormComponent, deps: [{ token: SharedMethodsService }, { token: MessagesManipulationConfirmModalService }, { token: i0__namespace.ChangeDetectorRef }, { token: BaseCreateMessageFormService }, { token: i4__namespace.FormBuilder }, { token: MessagesEncodingService }, { token: MessagesUploadAttachmentsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BaseCreateMessageFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseCreateMessageFormComponent, selector: "ng-component", inputs: { reset: "reset", maxAttachmentSize: "maxAttachmentSize", maxMailoutNameLength: "maxMailoutNameLength", maxSubjectLength: "maxSubjectLength", maxMessageLength: "maxMessageLength", isModalOpen: "isModalOpen", draftId: "draftId" }, outputs: { confirm: "confirm", cancel: "cancel" }, providers: [MessagesManipulationConfirmModalService, MessagesUploadAttachmentsService], viewQueries: [{ propertyName: "messageComposeSuccessTpl", first: true, predicate: ["messageComposeSuccess"], descendants: true }, { propertyName: "messageSaveDraftSuccessTpl", first: true, predicate: ["messageSaveDraftSuccess"], descendants: true }, { propertyName: "messageUpdateDraftSuccessTpl", first: true, predicate: ["messageUpdateDraftSuccess"], descendants: true }, { propertyName: "messageComposeErrorTpl", first: true, predicate: ["messageComposeError"], descendants: true }, { propertyName: "messageSaveDraftErrorTpl", first: true, predicate: ["messageSaveDraftError"], descendants: true }, { propertyName: "messageUpdateDraftErrorTpl", first: true, predicate: ["messageUpdateDraftError"], descendants: true }], ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                        providers: [MessagesManipulationConfirmModalService, MessagesUploadAttachmentsService],
                    }]
            }], ctorParameters: function () { return [{ type: SharedMethodsService }, { type: MessagesManipulationConfirmModalService }, { type: i0__namespace.ChangeDetectorRef }, { type: BaseCreateMessageFormService }, { type: i4__namespace.FormBuilder }, { type: MessagesEncodingService }, { type: MessagesUploadAttachmentsService }]; }, propDecorators: { reset: [{
                    type: i0.Input
                }], maxAttachmentSize: [{
                    type: i0.Input
                }], maxMailoutNameLength: [{
                    type: i0.Input
                }], maxSubjectLength: [{
                    type: i0.Input
                }], maxMessageLength: [{
                    type: i0.Input
                }], isModalOpen: [{
                    type: i0.Input
                }], draftId: [{
                    type: i0.Input
                }], confirm: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }], messageComposeSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['messageComposeSuccess']
                }], messageSaveDraftSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['messageSaveDraftSuccess']
                }], messageUpdateDraftSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['messageUpdateDraftSuccess']
                }], messageComposeErrorTpl: [{
                    type: i0.ViewChild,
                    args: ['messageComposeError']
                }], messageSaveDraftErrorTpl: [{
                    type: i0.ViewChild,
                    args: ['messageSaveDraftError']
                }], messageUpdateDraftErrorTpl: [{
                    type: i0.ViewChild,
                    args: ['messageUpdateDraftError']
                }] } });

    var BaseCreateMessageFormModule = /** @class */ (function () {
        function BaseCreateMessageFormModule() {
        }
        return BaseCreateMessageFormModule;
    }());
    BaseCreateMessageFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BaseCreateMessageFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageFormModule, declarations: [BaseCreateMessageFormComponent], imports: [i2.CommonModule] });
    BaseCreateMessageFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageFormModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [BaseCreateMessageFormComponent],
                        imports: [i2.CommonModule],
                    }]
            }] });

    function snapshot(source) {
        var result;
        var subscr = source.subscribe(function (res) {
            result = res;
        });
        subscr.unsubscribe();
        return result;
    }

    var getPropertyValue = function (input, prop) { return rxjs.combineLatest([input, prop]).pipe(operators.map(function (_a) {
        var _b = __read(_a, 2), inputVal = _b[0], propVal = _b[1];
        return (inputVal !== undefined ? inputVal : propVal);
    })); };
    var defaultModelObservable = function (value) { return rxjs.defer(function () { return rxjs.of(value); }).pipe(operators.publishReplay(1), operators.refCount()); };

    var modelItemToBoolean = function (value) {
        if (typeof value === 'boolean') {
            return value;
        }
        return value.trim() === 'true';
    };

    var DefaultWidgetProperties$1 = {
        debounceTime: 500,
        maxAttachmentSize: '10',
        maxMailoutNameLength: 255,
        maxSubjectLength: 100,
        maxMessageLength: 300,
        minSearchLength: 1,
        modalHeader: 'New message',
        hideComposeButton: false,
        createMessageOpenEventName: 'bb.event.messages.create.message.open',
        createMessageClosedEventName: 'bb.event.messages.create.message.close',
        senderDisplayName: 'Backbase',
        shouldPreDefineUser: false,
        isPreDefinedUserReadonly: false,
    };
    var BaseCreateMessageModalPropertiesService = /** @class */ (function () {
        function BaseCreateMessageModalPropertiesService(itemModel) {
            this.itemModel = itemModel;
        }
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "maxAttachmentSize", {
            /**
             * Max attachment size
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.maxAttachmentSize);
                }
                return this.itemModel.property('maxAttachmentSize', DefaultWidgetProperties$1.maxAttachmentSize);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "maxMessageLength", {
            /**
             * Max message length
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.maxMessageLength);
                }
                return this.itemModel.property('maxMessageLength', DefaultWidgetProperties$1.maxMessageLength);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "maxMailoutNameLength", {
            /**
             * Max mailout name length
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.maxMailoutNameLength);
                }
                return this.itemModel.property('maxMailoutNameLength', DefaultWidgetProperties$1.maxMailoutNameLength);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "maxSubjectLength", {
            /**
             * Max subject length
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.maxSubjectLength);
                }
                return this.itemModel.property('maxSubjectLength', DefaultWidgetProperties$1.maxSubjectLength);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "modalHeader", {
            /**
             * Modal header
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.modalHeader);
                }
                return this.itemModel.property('modalHeader', DefaultWidgetProperties$1.modalHeader);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "debounceTime", {
            /**
             * Debounce time
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.debounceTime);
                }
                return this.itemModel.property('debounceTime', DefaultWidgetProperties$1.debounceTime);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "minSearchLength", {
            /**
             * Min search length
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.minSearchLength);
                }
                return this.itemModel.property('minSearchLength', DefaultWidgetProperties$1.minSearchLength);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "hideComposeButton", {
            /**
             * Flag to hide or show compose button
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.hideComposeButton);
                }
                return this.itemModel.property('hideComposeButton', DefaultWidgetProperties$1.hideComposeButton);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "createMessageOpenEventName", {
            /**
             * Open event for create message modal
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.createMessageOpenEventName);
                }
                return this.itemModel.property('createMessageOpenEventName', DefaultWidgetProperties$1.createMessageOpenEventName);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "createMessageClosedEventName", {
            /**
             * Close event for create message modal
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.createMessageClosedEventName);
                }
                return this.itemModel.property('createMessageClosedEventName', DefaultWidgetProperties$1.createMessageClosedEventName);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "senderDisplayName", {
            /**
             * Flag to show or hide sender name
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.senderDisplayName);
                }
                return this.itemModel.property('senderDisplayName', DefaultWidgetProperties$1.senderDisplayName);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "shouldPreDefineUser", {
            /**
             * Flag to predefine or not user input
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.shouldPreDefineUser);
                }
                return this.itemModel.property('shouldPreDefineUser', DefaultWidgetProperties$1.shouldPreDefineUser);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalPropertiesService.prototype, "isPreDefinedUserReadonly", {
            /**
             * Flag to disable predefined user input
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties$1.isPreDefinedUserReadonly);
                }
                return this.itemModel.property('isPreDefinedUserReadonly', DefaultWidgetProperties$1.isPreDefinedUserReadonly);
            },
            enumerable: false,
            configurable: true
        });
        return BaseCreateMessageModalPropertiesService;
    }());
    BaseCreateMessageModalPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalPropertiesService, deps: [{ token: i1__namespace$1.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BaseCreateMessageModalPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var BaseCreateMessageModalComponent = /** @class */ (function () {
        function BaseCreateMessageModalComponent(properties, shared) {
            var _this = this;
            this.properties = properties;
            this.shared = shared;
            /**
             * The unique ID HTML property for each component instance.
             */
            this.id = "base-create-message-modal-" + BaseCreateMessageModalComponent.counter++;
            this.resetSubject = new rxjs.Subject();
            /**
             * The stream with the form reset triggers.
             */
            this.resetStream = this.resetSubject.asObservable();
            this.hostRef = this;
            /**
             * The flag indicating if the modal is opened or closed.
             */
            this.modalOpened = false;
            /**
             * The modal options.
             */
            this.modalOptions = {
                size: 'md',
                beforeDismiss: function () {
                    _this.resetSubject.next();
                    return false;
                },
            };
            this.maxAttachmentSize$$ = new rxjs.BehaviorSubject(undefined);
            this.maxMailoutNameLength$$ = new rxjs.BehaviorSubject(undefined);
            this.maxSubjectLength$$ = new rxjs.BehaviorSubject(undefined);
            this.maxMessageLength$$ = new rxjs.BehaviorSubject(undefined);
            this.modalHeader$$ = new rxjs.BehaviorSubject(undefined);
            this.hideComposeButton$$ = new rxjs.BehaviorSubject(undefined);
            this.createMessageOpenEventName$$ = new rxjs.BehaviorSubject(undefined);
            this.createMessageClosedEventName$$ = new rxjs.BehaviorSubject(undefined);
            this.destroy$ = new rxjs.Subject();
            /**
             * The stream with the maximum name size.
             */
            this.maxMailoutNameLength = getPropertyValue(this.maxMailoutNameLength$$, this.properties.maxMailoutNameLength);
            /**
             * The stream with the maximum subject size.
             */
            this.maxSubjectLength = getPropertyValue(this.maxSubjectLength$$, this.properties.maxSubjectLength);
            /**
             * The stream with the maximum attachment size.
             */
            this.maxAttachmentSize = getPropertyValue(this.maxAttachmentSize$$, this.properties.maxAttachmentSize);
            /**
             * The stream with the maximum message length.
             */
            this.maxMessageLength = getPropertyValue(this.maxMessageLength$$, this.properties.maxMessageLength);
            /**
             * The stream with the modal header text.
             */
            this.modalHeader = getPropertyValue(this.modalHeader$$, this.properties.modalHeader);
            /**
             * The stream with a flag indicating if the Compose button is hidden.
             */
            this.hideComposeButton = getPropertyValue(this.hideComposeButton$$, this.properties.hideComposeButton);
            /**
             * Event published to open Create message modal
             */
            this.createMessageOpenEventName = getPropertyValue(this.createMessageOpenEventName$$, this.properties.createMessageOpenEventName);
            /**
             * Event published when Create message modal widget was closed
             */
            this.createMessageClosedEventName = getPropertyValue(this.createMessageClosedEventName$$, this.properties.createMessageClosedEventName);
            this.createMessageOpenEventName
                .pipe(operators.switchMap(function (eventName) { return _this.shared.eventBusFactory(eventName); }), operators.takeUntil(this.destroy$))
                .subscribe(function (obj) { return _this.openModal(obj && obj.draftId); });
        }
        Object.defineProperty(BaseCreateMessageModalComponent.prototype, "maxAttachmentSizeValue", {
            /**
             * The stream with the maximum attachment size.
             */
            set: function (value) {
                this.maxAttachmentSize$$.next(String(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalComponent.prototype, "maxMailoutNameLengthValue", {
            /**
             * The stream with the maximum name length.
             */
            set: function (value) {
                this.maxMailoutNameLength$$.next(Number(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalComponent.prototype, "maxSubjectLengthValue", {
            /**
             * The stream with the maximum subject length.
             */
            set: function (value) {
                this.maxSubjectLength$$.next(Number(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalComponent.prototype, "maxMessageLengthValue", {
            /**
             * The stream with the maximum message length.
             */
            set: function (value) {
                this.maxMessageLength$$.next(Number(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalComponent.prototype, "modalHeaderValue", {
            /**
             * The stream with the modal header.
             */
            set: function (value) {
                this.modalHeader$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalComponent.prototype, "hideComposeButtonValue", {
            /**
             * The stream with a flag indicating if the Compose button is hidden.
             */
            set: function (value) {
                this.hideComposeButton$$.next(modelItemToBoolean(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalComponent.prototype, "createMessageOpenEventNameValue", {
            /**
             * Event published to open Create message modal
             */
            set: function (value) {
                this.createMessageOpenEventName$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCreateMessageModalComponent.prototype, "createMessageClosedEventNameValue", {
            /**
             * Event published when Create message modal widget was closed
             */
            set: function (value) {
                this.createMessageClosedEventName$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The method to open the modal.
         *
         * @param id
         */
        BaseCreateMessageModalComponent.prototype.openModal = function (id) {
            this.modalOpened = true;
            this.draftId = id;
        };
        /**
         * The method to close the modal.
         */
        BaseCreateMessageModalComponent.prototype.closeModal = function () {
            this.modalOpened = false;
            var eventName = snapshot(this.createMessageClosedEventName);
            this.shared.eventBusPublish(eventName, {});
            this.draftId = undefined;
        };
        BaseCreateMessageModalComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        return BaseCreateMessageModalComponent;
    }());
    BaseCreateMessageModalComponent.counter = 0;
    BaseCreateMessageModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalComponent, deps: [{ token: BaseCreateMessageModalPropertiesService }, { token: SharedMethodsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BaseCreateMessageModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseCreateMessageModalComponent, selector: "ng-component", inputs: { maxAttachmentSizeValue: ["maxAttachmentSize", "maxAttachmentSizeValue"], maxMailoutNameLengthValue: ["maxMailoutNameLength", "maxMailoutNameLengthValue"], maxSubjectLengthValue: ["maxSubjectLength", "maxSubjectLengthValue"], maxMessageLengthValue: ["maxMessageLength", "maxMessageLengthValue"], modalHeaderValue: ["modalHeader", "modalHeaderValue"], hideComposeButtonValue: ["hideComposeButton", "hideComposeButtonValue"], createMessageOpenEventNameValue: ["createMessageOpenEventName", "createMessageOpenEventNameValue"], createMessageClosedEventNameValue: ["createMessageClosedEventName", "createMessageClosedEventNameValue"] }, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                    }]
            }], ctorParameters: function () { return [{ type: BaseCreateMessageModalPropertiesService }, { type: SharedMethodsService }]; }, propDecorators: { maxAttachmentSizeValue: [{
                    type: i0.Input,
                    args: ['maxAttachmentSize']
                }], maxMailoutNameLengthValue: [{
                    type: i0.Input,
                    args: ['maxMailoutNameLength']
                }], maxSubjectLengthValue: [{
                    type: i0.Input,
                    args: ['maxSubjectLength']
                }], maxMessageLengthValue: [{
                    type: i0.Input,
                    args: ['maxMessageLength']
                }], modalHeaderValue: [{
                    type: i0.Input,
                    args: ['modalHeader']
                }], hideComposeButtonValue: [{
                    type: i0.Input,
                    args: ['hideComposeButton']
                }], createMessageOpenEventNameValue: [{
                    type: i0.Input,
                    args: ['createMessageOpenEventName']
                }], createMessageClosedEventNameValue: [{
                    type: i0.Input,
                    args: ['createMessageClosedEventName']
                }] } });

    var BaseCreateMessageModalModule = /** @class */ (function () {
        function BaseCreateMessageModalModule() {
        }
        return BaseCreateMessageModalModule;
    }());
    BaseCreateMessageModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BaseCreateMessageModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalModule, declarations: [BaseCreateMessageModalComponent], imports: [i2.CommonModule] });
    BaseCreateMessageModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseCreateMessageModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule],
                        declarations: [BaseCreateMessageModalComponent],
                    }]
            }] });

    var BaseModalComponent = /** @class */ (function () {
        function BaseModalComponent() {
            /**
             * Input that toggles opening/closing the modal
             */
            this.isOpen = false;
            /**
             * Event emitted when modal was resolved
             */
            this.confirm = new i0.EventEmitter();
            /**
             * Event emitted when modal was dismissed
             */
            this.cancel = new i0.EventEmitter();
            /**
             * The unique ID HTML property for each component instance.
             */
            this.id = "base-modal-component-" + BaseModalComponent.counter++;
            this.hostRef = this;
        }
        /**
         * The method to reset the form and the cancellation modal.
         */
        BaseModalComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        /**
         * The method to confirm the value change.
         *
         * @param value Changed value
         */
        BaseModalComponent.prototype.onConfirm = function (value) {
            this.confirm.emit(value);
        };
        return BaseModalComponent;
    }());
    BaseModalComponent.counter = 0;
    BaseModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BaseModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseModalComponent, selector: "ng-component", inputs: { isOpen: "isOpen" }, outputs: { confirm: "confirm", cancel: "cancel" }, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                    }]
            }], propDecorators: { isOpen: [{
                    type: i0.Input
                }], confirm: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }] } });

    var MessagesManipulationConfirmModalComponent = /** @class */ (function (_super) {
        __extends(MessagesManipulationConfirmModalComponent, _super);
        function MessagesManipulationConfirmModalComponent() {
            var _this = _super.call(this) || this;
            /**
             * The `resolve` manipulation type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.resolveType = exports.ManipulationType.resolve;
            /**
             * The unresolve `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.unresolveType = exports.ManipulationType.unresolve;
            /**
             * The assign `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.assignType = exports.ManipulationType.assign;
            /**
             * The unassign `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.unassignType = exports.ManipulationType.unassign;
            /**
             * The discard `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.discardType = exports.ManipulationType.discard;
            /**
             * The discardDraft `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.discardDraftType = exports.ManipulationType.discardDraft;
            /**
             * The discardPreview `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.discardPreviewType = exports.ManipulationType.discardPreview;
            /**
             * The deleteTopicType `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.deleteTopicType = exports.ManipulationType.deleteTopic;
            /**
             * The deleteMailoutType `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
             * to be used in the template for localization purposes.
             */
            _this.deleteMailoutType = exports.ManipulationType.deleteMailout;
            return _this;
        }
        return MessagesManipulationConfirmModalComponent;
    }(BaseModalComponent));
    MessagesManipulationConfirmModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesManipulationConfirmModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesManipulationConfirmModalComponent, selector: "bb-messages-manipulation-confirm-modal", inputs: { type: "type" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-container bbMessagesManipulationConfirmModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbMessagesManipulationConfirmModalCustomizable let-host>\n  <bb-modal-ui [isOpen]=\"host.isOpen\" (cancel)=\"host.onCancel()\" aria-describedby=\"manipulation-modal-content\">\n    <div id=\"manipulation-modal-content\">\n      <ng-container [ngSwitch]=\"host.type\">\n        <ng-container *ngSwitchCase=\"host.resolveType\">\n          <ng-container *ngTemplateOutlet=\"resolveConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.unresolveType\">\n          <ng-container *ngTemplateOutlet=\"unresolveConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.assignType\">\n          <ng-container *ngTemplateOutlet=\"assignConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.unassignType\">\n          <ng-container *ngTemplateOutlet=\"unassignConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.discardType\">\n          <ng-container *ngTemplateOutlet=\"discardConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.discardPreviewType\">\n          <ng-container *ngTemplateOutlet=\"discardConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.discardDraftType\">\n          <ng-container *ngTemplateOutlet=\"discardDraftConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.deleteTopicType\">\n          <ng-container *ngTemplateOutlet=\"deleteTopicConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.deleteMailoutType\">\n          <ng-container *ngTemplateOutlet=\"deleteMailoutConfirmTemplate\"></ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <ng-container [ngSwitch]=\"host.type\">\n            <button\n              *ngSwitchCase=\"host.discardType\"\n              bbButton\n              class=\"bb-button-bar__button\"\n              color=\"danger\"\n              data-role=\"discard-manipulation\"\n              (click)=\"host.onConfirm()\"\n            >\n              <span i18n=\"Discard button text@@messages.manipulationConfirmModalComponent.discardButton\">Discard</span>\n            </button>\n            <button\n              *ngSwitchCase=\"host.discardPreviewType\"\n              bbButton\n              class=\"bb-button-bar__button\"\n              color=\"danger\"\n              data-role=\"discard-manipulation\"\n              (click)=\"host.onConfirm()\"\n            >\n              <span i18n=\"Discard button text@@messages.manipulationConfirmModalComponent.discardButton\">Discard</span>\n            </button>\n\n            <button\n              *ngSwitchCase=\"host.discardDraftType\"\n              bbButton\n              class=\"bb-button-bar__button\"\n              color=\"danger\"\n              data-role=\"discard-draft-manipulation\"\n              (click)=\"host.onConfirm()\"\n            >\n              <span i18n=\"Discard draft button text@@messages.manipulationConfirmModalComponent.discardDraftButton\"\n                >Delete</span\n              >\n            </button>\n\n            <ng-container *ngSwitchCase=\"host.deleteTopicType\">\n              <ng-container *ngTemplateOutlet=\"deleteButton\"></ng-container>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"host.deleteMailoutType\">\n              <ng-container *ngTemplateOutlet=\"deleteButton\"></ng-container>\n            </ng-container>\n\n            <button\n              *ngSwitchDefault\n              bbButton\n              class=\"bb-button-bar__button\"\n              data-role=\"confirm-manipulation\"\n              (click)=\"host.onConfirm()\"\n            >\n              <span i18n=\"Submit button text@@messages.manipulationConfirmModalComponent.submitButton\">Submit</span>\n            </button>\n\n            <ng-template #deleteButton>\n              <button\n                bbButton\n                class=\"bb-button-bar__button\"\n                color=\"danger\"\n                data-role=\"delete-manipulation\"\n                (click)=\"host.onConfirm()\"\n              >\n                <span i18n=\"Delete button text@@messages.manipulationConfirmModalComponent.deleteButton\">Delete</span>\n              </button>\n            </ng-template>\n          </ng-container>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"secondary\"\n            data-role=\"cancel-manipulation\"\n            (click)=\"host.onCancel()\"\n          >\n            <span i18n=\"Cancel button text@@messages.manipulationConfirmModalComponent.cancelButton\">Cancel</span>\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <ng-template #resolveConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Mark this conversation as resolved?\"\n          i18n-heading=\"\n            Mark this conversation as\n            resolved?@@messages.manipulationConfirmModalComponent.resolveConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to mark this conversation as\n            resolved?@@messages.manipulationConfirmModalComponent.resolveConfirmTemplate.modalBody\"\n          >Are you sure you want to mark this conversation as resolved?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #unresolveConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Renew this conversation from resolved?\"\n          i18n-heading=\"\n            Renew this conversation from\n            resolved?@@messages.manipulationConfirmModalComponent.unresolveConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to renew this conversation from resolved? This conversation will be automaticaly\n            assigned to you.@@messages.manipulationConfirmModalComponent.unresolveConfirmTemplate.modalBody\"\n          >Are you sure you want to renew this conversation from resolved? This conversation will be automaticaly\n          assigned to you.</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #assignConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Assign conversation?\"\n          i18n-heading=\"\n            Assign conversation?@@messages.manipulationConfirmModalComponent.assignConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to assign this\n            conversation?@@messages.manipulationConfirmModalComponent.assignConfirmTemplate.modalBody\"\n          >Are you sure you want to assign this conversation?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #unassignConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Unassign conversation?\"\n          i18n-heading=\"\n            Unassign conversation?@@messages.manipulationConfirmModalComponent.unassignConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to unassign this\n            conversation?@@messages.manipulationConfirmModalComponent.unassignConfirmTemplate.modalBody\"\n          >Are you sure you want to unassign this conversation?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #discardConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Discard message?\"\n          data-role=\"discard-message-header\"\n          i18n-heading=\"Discard message?@@messages.manipulationConfirmModalComponent.discardConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          data-role=\"discard-message-body\"\n          i18n=\"\n            Are you sure you want to discard this message? All filled data will be\n            lost@@messages.manipulationConfirmModalComponent.discardConfirmTemplate.modalBody\"\n          >Are you sure you want to discard this message? All filled data will be lost</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #discardDraftConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Discard message and delete draft?\"\n          i18n-heading=\"\n            Discard message and delete\n            draft?@@messages.manipulationConfirmModalComponent.discardDraftConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to discard this message and delete draft? All filled data will be\n            lost@@messages.manipulationConfirmModalComponent.discardDraftConfirmTemplate.modalBody\"\n          >Are you sure you want to discard this message and delete draft? All filled data will be lost</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #deleteTopicConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Delete topic?\"\n          i18n-heading=\"\n            Delete topic?@@messages.manipulationConfirmModalComponent.deleteTopicConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            This action will unsubscribe all users from this topic. Are you sure you want to delete\n            it?@@messages.manipulationConfirmModalComponent.deleteTopicConfirmTemplate.modalBody\"\n          >This action will unsubscribe all users from this topic. Are you sure you want to delete it?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #deleteMailoutConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Delete mailout?\"\n          i18n-heading=\"\n            Delete mailout modal\n            header@@messages.manipulationConfirmModalComponent.deleteMailoutConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Delete mailout modal body@@messages.manipulationConfirmModalComponent.deleteMailoutConfirmTemplate.modalBody\"\n          >Are you sure to delete a mailout? This action can not be undone.</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$3.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.ModalBodyComponent; }), selector: "bb-modal-body-ui" }], directives: [{ type: i0__namespace.forwardRef(function () { return MessagesManipulationConfirmModalCustomizableDirective; }), selector: "[bbMessagesManipulationConfirmModalCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0__namespace.forwardRef(function () { return i18__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-manipulation-confirm-modal',
                        templateUrl: './messages-manipulation-confirm-modal.component.html',
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { type: [{
                    type: i0.Input
                }] } });
    var MessagesManipulationConfirmModalCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesManipulationConfirmModalCustomizableDirective, _super);
        function MessagesManipulationConfirmModalCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesManipulationConfirmModalCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesManipulationConfirmModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesManipulationConfirmModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesManipulationConfirmModalCustomizableDirective, selector: "[bbMessagesManipulationConfirmModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesManipulationConfirmModalCustomizable]',
                    }]
            }] });

    var components$6 = [MessagesManipulationConfirmModalComponent];
    var directives$6 = [MessagesManipulationConfirmModalCustomizableDirective];
    var uiModule = [i1$3.ModalModule, i2$1.HeaderModule, i18.ButtonModule];
    var MessagesManipulationConfirmModalModule = /** @class */ (function () {
        function MessagesManipulationConfirmModalModule() {
        }
        return MessagesManipulationConfirmModalModule;
    }());
    MessagesManipulationConfirmModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesManipulationConfirmModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalModule, declarations: [BaseModalComponent, MessagesManipulationConfirmModalComponent, MessagesManipulationConfirmModalCustomizableDirective], imports: [i2.CommonModule, i1$3.ModalModule, i2$1.HeaderModule, i18.ButtonModule], exports: [MessagesManipulationConfirmModalComponent, MessagesManipulationConfirmModalCustomizableDirective] });
    MessagesManipulationConfirmModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalModule, providers: __spreadArray([MessagesManipulationConfirmModalService], __read(uiModule)), imports: [__spreadArray([i2.CommonModule], __read(uiModule))] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesManipulationConfirmModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray(__spreadArray([BaseModalComponent], __read(components$6)), __read(directives$6)),
                        exports: __spreadArray(__spreadArray([], __read(components$6)), __read(directives$6)),
                        imports: __spreadArray([i2.CommonModule], __read(uiModule)),
                        providers: __spreadArray([MessagesManipulationConfirmModalService], __read(uiModule)),
                    }]
            }] });

    var BaseUploadAttachmentsService = /** @class */ (function () {
        function BaseUploadAttachmentsService() {
        }
        return BaseUploadAttachmentsService;
    }());
    var FileAttachment = /** @class */ (function () {
        function FileAttachment(file, service) {
            this.service = service;
            /**
             * The loading flag.
             */
            this.loading = false;
            /**
             * Delete attachment subject that holds index
             */
            this.onDelete = new rxjs.Subject();
            this.cancelSubject = new rxjs.Subject();
            this.file = file;
            this.size = file.size;
            if (file.id) {
                this.id = file.id;
                this.name = file.filename;
            }
            else {
                this.name = file.name;
            }
        }
        /**
         * Delete attachment
         *
         * @param id Attachment id
         * @param index Attachment index
         */
        FileAttachment.prototype.deleteAttachment = function (id, index) {
            if (this.id && this.id === id) {
                this.service.deleteAttachments([id]).subscribe();
            }
            else {
                this.cancelSubject.next();
            }
            this.onDelete.next(index);
        };
        /**
         * Upload attachments
         */
        FileAttachment.prototype.uploadAttachment = function () {
            var _this = this;
            this.setLoading(true);
            return this.service.uploadAttachment(this.file).pipe(operators.takeUntil(this.cancelSubject), operators.tap(function (value) {
                _this.id = value ? value.id : undefined;
                _this.setLoading(false);
            }));
        };
        /**
         * Set loading flag
         *
         * @param flag Loaging status flag
         */
        FileAttachment.prototype.setLoading = function (flag) {
            this.loading = flag;
        };
        return FileAttachment;
    }());

    var MessagesUploadAttachmentsComponent = /** @class */ (function () {
        function MessagesUploadAttachmentsComponent(cd, service, sharedService, uploadService) {
            this.cd = cd;
            this.service = service;
            this.sharedService = sharedService;
            this.uploadService = uploadService;
            /**
             * Disabled state flag
             */
            this.disabled = false;
            /**
             * Input to define adding file multiple times
             * True by defaults
             */
            this.multiple = true;
            /**
             * The accepted file formats.
             */
            this.accept = '*';
            this.initAttachments$ = new rxjs.BehaviorSubject(undefined);
            /**
             * The file attachments array.
             */
            this.attachments = [];
            this.hostRef = this;
            this.maxSizeBytesValue = 0;
            this.value = [];
            this.newlyAddedAttachments = [];
            this.loading = 0;
            this.unsubscribe = new rxjs.Subject();
            /**
             * The method from the ControlValueAccessor interface for responding to the value change.
             * Implemented through the registerOnChange method.
             */
            this.onChange = function () { };
            /**
             * The method from the ControlValueAccessor interface for responding to the change of the untouched state.
             * Implemented through the registerOnTouched method.
             */
            this.onTouched = function () { };
            /**
             * The method for responding to the validation change. Implemented through the registerOnValidatorChange method.
             */
            this.onValidationChange = function () { };
        }
        Object.defineProperty(MessagesUploadAttachmentsComponent.prototype, "maxSize", {
            /**
             * Maximum size for file upload in megabytes
             */
            set: function (value) {
                if (value) {
                    var number = Number(value);
                    this.maxSizeMegabytesValue = number;
                    this.maxSizeBytesValue = number * 1024 * 1024;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MessagesUploadAttachmentsComponent.prototype, "initAttachments", {
            /**
             * Array of attachments objects
             */
            set: function (value) {
                this.initAttachments$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The method to upload a file attachment.
         *
         * @param input
         */
        MessagesUploadAttachmentsComponent.prototype.onFileAdded = function (input) {
            var _this = this;
            var file = input && input.files && input.files[0];
            this.onTouched();
            if (file) {
                input.value = '';
                if (this.maxSizeBytesValue && file.size > this.maxSizeBytesValue) {
                    this.sharedService.openNotification(this.maxAttachmentSizeErrorTpl, 'error');
                    return;
                }
                var attachment = new FileAttachment(file, this.service);
                var index_1 = this.attachments.push(attachment);
                this.loading++;
                this.onValidationChange();
                attachment
                    .uploadAttachment()
                    .pipe(operators.take(1), operators.tap(function (value) { return _this.onValueChanged(value || undefined); }), operators.catchError(function (error) {
                    _this.removeRedundantAttachment(index_1 - 1);
                    return _this.showErrorNotification(error);
                }), operators.finalize(function () {
                    _this.loading--;
                    _this.onValidationChange();
                    _this.cd.markForCheck();
                }), operators.takeUntil(this.uploadService.reset$))
                    .subscribe();
                attachment.onDelete.pipe(operators.takeUntil(this.unsubscribe)).subscribe(function (i) { return _this.removeRedundantAttachment(i); });
            }
        };
        MessagesUploadAttachmentsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.uploadService.reset$
                .pipe(operators.map(function (type) {
                var value = type ? __spreadArray([], __read(_this.newlyAddedAttachments)).map(function (_a) {
                    var id = _a.id;
                    return id;
                }) : [];
                _this.attachments = [];
                _this.value = [];
                _this.newlyAddedAttachments = [];
                _this.cd.markForCheck();
                return { value: value, type: type };
            }), operators.filter(function (_a) {
                var value = _a.value, type = _a.type;
                return !!(value.length && type);
            }), operators.switchMap(function (_a) {
                var value = _a.value;
                return _this.deleteAttachments(value);
            }), operators.takeUntil(this.unsubscribe))
                .subscribe();
        };
        MessagesUploadAttachmentsComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe.next(true);
            this.unsubscribe.complete();
        };
        /**
         * The method from the ControlValueAccessor interface for setting the initial value (previously uploaded attachments)
         * for file attachments input.
         *
         * @param value Previously uploaded attachments
         */
        MessagesUploadAttachmentsComponent.prototype.writeValue = function (value) {
            var _this = this;
            if (value && value.length) {
                this.value = __spreadArray([], __read(value));
                this.initAttachments$.pipe(operators.takeUntil(this.uploadService.reset$)).subscribe(function (attachments) {
                    if (attachments) {
                        _this.attachments = attachments.reduce(function (acc, item) {
                            var attachment = new FileAttachment(item, _this.service);
                            // @ts-ignore
                            acc.push(attachment);
                            attachment.onDelete.pipe(operators.takeUntil(_this.unsubscribe)).subscribe(function (i) { return _this.removeRedundantAttachment(i); });
                            return acc;
                        }, []);
                    }
                });
            }
            this.cd.markForCheck();
        };
        /**
         * The method from the ControlValueAccessor interface for setting the onChange function implementation.
         */
        MessagesUploadAttachmentsComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * The method from the ControlValueAccessor interface for setting the onTouched function implementation.
         */
        MessagesUploadAttachmentsComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * The method from the Validator interface. Registers a callback function to call when the validator inputs change.
         */
        MessagesUploadAttachmentsComponent.prototype.registerOnValidatorChange = function (fn) {
            this.onValidationChange = fn;
        };
        /**
         * The method from the ControlValueAccessor interface for setting the disabled state.
         *
         * @param isDisabled Is disabled flag
         */
        MessagesUploadAttachmentsComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this.cd.markForCheck();
        };
        /**
         * The method from the Validator interface. This method performs synchronous validation against the provided control.
         *
         * @returns Validation errors
         */
        MessagesUploadAttachmentsComponent.prototype.validate = function () {
            return this.loading ? { loading: true } : null;
        };
        MessagesUploadAttachmentsComponent.prototype.deleteAttachments = function (ids) {
            var _this = this;
            return this.service.deleteAttachments(ids).pipe(operators.catchError(function (error) { return _this.showErrorNotification(error); }));
        };
        MessagesUploadAttachmentsComponent.prototype.removeRedundantAttachment = function (index) {
            this.value.splice(index, 1);
            this.attachments.splice(index, 1);
            this.onChange(this.value);
        };
        MessagesUploadAttachmentsComponent.prototype.onValueChanged = function (value) {
            if (value) {
                this.value.push(value);
                this.newlyAddedAttachments.push(value);
                this.onChange(this.value);
            }
        };
        MessagesUploadAttachmentsComponent.prototype.showErrorNotification = function (error) {
            this.sharedService.openNotification(this.sharedService.getErrorMessage(error), 'error');
            return rxjs.EMPTY;
        };
        return MessagesUploadAttachmentsComponent;
    }());
    MessagesUploadAttachmentsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: BaseUploadAttachmentsService }, { token: SharedMethodsService }, { token: MessagesUploadAttachmentsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesUploadAttachmentsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesUploadAttachmentsComponent, selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: { maxSize: "maxSize", initAttachments: "initAttachments", disabled: "disabled", multiple: "multiple", attachmentButtonText: "attachmentButtonText", accept: "accept" }, providers: [
            {
                provide: i4.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return MessagesUploadAttachmentsComponent; }),
                multi: true,
            },
            {
                provide: i4.NG_VALIDATORS,
                useExisting: i0.forwardRef(function () { return MessagesUploadAttachmentsComponent; }),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "maxAttachmentSizeErrorTpl", first: true, predicate: ["maxAttachmentSizeError"], descendants: true }], ngImport: i0__namespace, template: "<ng-container bbMessagesUploadAttachmentsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbMessagesUploadAttachmentsCustomizable let-host>\n  <bb-input-file-ui\n    [buttonText]=\"host.attachmentButtonText ? host.attachmentButtonText : attachFile.elementRef.nativeElement.innerText\"\n    [disabled]=\"host.disabled\"\n    [accept]=\"host.accept\"\n    *ngIf=\"!(!host.multiple && host.attachments.length)\"\n    (change)=\"host.onFileAdded($event.target)\"\n  ></bb-input-file-ui>\n\n  <div class=\"row\">\n    <div class=\"col-auto\" *ngFor=\"let attachment of host.attachments; let i = index\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-file-attachment-ui\n          [name]=\"attachment.name\"\n          [size]=\"attachment.size\"\n          [loading]=\"attachment.loading\"\n          [deletable]=\"true\"\n          [disabled]=\"true\"\n          (delete)=\"attachment.deleteAttachment(attachment.id, i)\"\n        ></bb-file-attachment-ui>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #attachFile i18n=\"Attach file@@messages.messagesEmployeeUploadAttachments.attachFile\"\n    >Attach file</ng-template\n  >\n</ng-template>\n\n<ng-template #maxAttachmentSizeError>\n  <span\n    i18n=\"\n      Uploaded file exceeds the maximum allowed size@@messages.messagesEmployeeUploadAttachments.maxAttachmentSizeError\"\n    >The file you are trying to upload exceeds the maximum attachment size of\n  </span>\n  <span>{{ maxSizeMegabytesValue }}</span>\n  <span i18n=\"Mb|Megabytes@@messages.messagesEmployeeUploadAttachments.maxAttachmentSizeError.megabytes\">Mb</span>.\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i4__namespace$1.InputFileComponent; }), selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }], directives: [{ type: i0__namespace.forwardRef(function () { return MessagesUploadAttachmentsCustomizableDirective; }), selector: "[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-upload-attachments-ui, bb-messages-upload-attachments',
                        templateUrl: './messages-upload-attachments.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: i4.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return MessagesUploadAttachmentsComponent; }),
                                multi: true,
                            },
                            {
                                provide: i4.NG_VALIDATORS,
                                useExisting: i0.forwardRef(function () { return MessagesUploadAttachmentsComponent; }),
                                multi: true,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: BaseUploadAttachmentsService }, { type: SharedMethodsService }, { type: MessagesUploadAttachmentsService }]; }, propDecorators: { maxSize: [{
                    type: i0.Input
                }], initAttachments: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], multiple: [{
                    type: i0.Input
                }], attachmentButtonText: [{
                    type: i0.Input
                }], accept: [{
                    type: i0.Input
                }], maxAttachmentSizeErrorTpl: [{
                    type: i0.ViewChild,
                    args: ['maxAttachmentSizeError']
                }] } });
    var MessagesUploadAttachmentsCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesUploadAttachmentsCustomizableDirective, _super);
        function MessagesUploadAttachmentsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesUploadAttachmentsCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesUploadAttachmentsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesUploadAttachmentsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesUploadAttachmentsCustomizableDirective, selector: "[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]',
                    }]
            }] });

    var SharedMethodsModule = /** @class */ (function () {
        function SharedMethodsModule() {
        }
        return SharedMethodsModule;
    }());
    SharedMethodsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SharedMethodsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SharedMethodsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SharedMethodsModule, imports: [i2.CommonModule] });
    SharedMethodsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SharedMethodsModule, providers: [SharedMethodsService], imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SharedMethodsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule],
                        providers: [SharedMethodsService],
                    }]
            }] });

    var components$5 = [MessagesUploadAttachmentsComponent];
    var directives$5 = [MessagesUploadAttachmentsCustomizableDirective];
    var uiModules$7 = [i18.ButtonModule, i5.FileAttachmentModule, i1$4.IconModule, i4$1.InputFileModule];
    var innerModules$4 = [SharedMethodsModule];
    var MessagesUploadAttachmentsModule = /** @class */ (function () {
        function MessagesUploadAttachmentsModule() {
        }
        return MessagesUploadAttachmentsModule;
    }());
    MessagesUploadAttachmentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesUploadAttachmentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsModule, declarations: [MessagesUploadAttachmentsComponent, MessagesUploadAttachmentsCustomizableDirective], imports: [i2.CommonModule, i18.ButtonModule, i5.FileAttachmentModule, i1$4.IconModule, i4$1.InputFileModule, SharedMethodsModule], exports: [MessagesUploadAttachmentsComponent, MessagesUploadAttachmentsCustomizableDirective, i18.ButtonModule, i5.FileAttachmentModule, i1$4.IconModule, i4$1.InputFileModule, SharedMethodsModule] });
    MessagesUploadAttachmentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsModule, providers: [MessagesUploadAttachmentsService], imports: [__spreadArray(__spreadArray([i2.CommonModule], __read(uiModules$7)), __read(innerModules$4)), i18.ButtonModule, i5.FileAttachmentModule, i1$4.IconModule, i4$1.InputFileModule, SharedMethodsModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesUploadAttachmentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i2.CommonModule], __read(uiModules$7)), __read(innerModules$4)),
                        declarations: __spreadArray(__spreadArray([], __read(components$5)), __read(directives$5)),
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(components$5)), __read(directives$5)), __read(uiModules$7)), __read(innerModules$4)),
                        providers: [MessagesUploadAttachmentsService],
                    }]
            }] });

    var CreateMessageFormImplementationService = /** @class */ (function () {
        function CreateMessageFormImplementationService(employeeService) {
            this.employeeService = employeeService;
            this.maxPaginationItemsNum = 65535;
        }
        /**
         * Get topics
         *
         * @returns Employee topics stream
         */
        CreateMessageFormImplementationService.prototype.getTopics = function () {
            return this.employeeService
                .getTopicsEmployee({ size: this.maxPaginationItemsNum, subscribed: true })
                .pipe(operators.catchError(function () { return rxjs.of([]); }));
        };
        /**
         * Create message
         *
         * @param params Create message request params
         * @returns Create message stream
         */
        CreateMessageFormImplementationService.prototype.createMessage = function (params) {
            return this.employeeService.postMessagesEmployee({ presentationMessageEmployeePostRequestBody: params });
        };
        return CreateMessageFormImplementationService;
    }());
    CreateMessageFormImplementationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: CreateMessageFormImplementationService, deps: [{ token: i1__namespace.EmployeeHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CreateMessageFormImplementationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: CreateMessageFormImplementationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: CreateMessageFormImplementationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.EmployeeHttpService }]; } });

    var MessagesEmployeeUploadAttachmentsService = /** @class */ (function () {
        function MessagesEmployeeUploadAttachmentsService(service) {
            this.service = service;
        }
        /**
         * Delete attachments by ids
         *
         * @param ids attachments ids
         * @returns Delete attachments stream
         */
        MessagesEmployeeUploadAttachmentsService.prototype.deleteAttachments = function (ids) {
            return this.service.deleteMessageAttachmentsEmployee({ ids: ids });
        };
        /**
         * Upload attachment
         *
         * @param attachment Attachment data
         * @returns Upload attachment stream
         */
        MessagesEmployeeUploadAttachmentsService.prototype.uploadAttachment = function (attachment) {
            return this.service.postMessageAttachmentsEmployee({ attachment: attachment });
        };
        return MessagesEmployeeUploadAttachmentsService;
    }());
    MessagesEmployeeUploadAttachmentsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeUploadAttachmentsService, deps: [{ token: i1__namespace.EmployeeHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesEmployeeUploadAttachmentsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeUploadAttachmentsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeUploadAttachmentsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.EmployeeHttpService }]; } });

    var topicPlaceholderConfig = {
        selectTopicPlaceholder: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":Select topic placeholder@@messages.selectTopicPlaceholder:Select topic"], [":Select topic placeholder@@messages.selectTopicPlaceholder:Select topic"]))),
        // eslint-disable-next-line max-len
        noTopicsPlaceholder: $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":There are no topics available@@messages.noTopicsPlaceholder:There are no topics available"], [":There are no topics available@@messages.noTopicsPlaceholder:There are no topics available"]))),
    };
    var templateObject_1, templateObject_2;

    var EmployeeCreateMessageFormService = /** @class */ (function () {
        function EmployeeCreateMessageFormService(userService) {
            this.userService = userService;
        }
        EmployeeCreateMessageFormService.prototype.getUsers = function (externalId) {
            return this.userService.getIdentities({ externalId: externalId }).pipe(operators.map(function (usersData) { return usersData.identities; }), operators.catchError(function () { return rxjs.of({}); }));
        };
        EmployeeCreateMessageFormService.prototype.getUserById = function (internalId) {
            return this.userService.getIdentity({ internalId: internalId });
        };
        return EmployeeCreateMessageFormService;
    }());
    EmployeeCreateMessageFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormService, deps: [{ token: i1__namespace$4.IdentityManagementService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EmployeeCreateMessageFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.IdentityManagementService }]; } });

    var EmployeeCreateMessageFormComponent = /** @class */ (function (_super) {
        __extends(EmployeeCreateMessageFormComponent, _super);
        function EmployeeCreateMessageFormComponent(employeeService, encodingService, sharedService, fb, cd, createMessageFormService, confirmModalService, uploadService) {
            var _this = _super.call(this, sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService) || this;
            _this.employeeService = employeeService;
            _this.encodingService = encodingService;
            _this.sharedService = sharedService;
            _this.fb = fb;
            _this.cd = cd;
            _this.createMessageFormService = createMessageFormService;
            _this.confirmModalService = confirmModalService;
            _this.uploadService = uploadService;
            /**
             * Debounce time for input search requests
             */
            _this.debounceTime = 500;
            /**
             * Minimum length value for input search request
             */
            _this.minSearchLength = 1;
            /**
             * Make predefined user field readonly
             */
            _this.isPreDefinedUserReadonly = false;
            /**
             * Configs for topic selector placeholder
             */
            _this.topicPlaceholderConfig = topicPlaceholderConfig;
            /**
             * Typeahead options.
             */
            _this.typeaheadOptions = {
                ngbTypeahead: _this.search.bind(_this),
                resultFormatter: function (item) { return item.fullName; },
                inputFormatter: function (item) { return item.fullName; },
            };
            /**
             * Additional form fields.
             */
            _this.additionalFormFields = {
                recipient: '',
                important: false,
                notDeletable: false,
                'read-only': false,
            };
            Object.keys(_this.additionalFormFields).forEach(function (key) {
                var validator = key === 'recipient' ? _this.customRequiredValidator : undefined;
                _this.newMessageFormGroup.addControl(key, new i4.FormControl(_this.additionalFormFields[key], validator));
            });
            _this.newMessageFormGroup.updateValueAndValidity();
            return _this;
        }
        Object.defineProperty(EmployeeCreateMessageFormComponent.prototype, "preDefineForm", {
            /**
             * Predefine form
             */
            set: function (val) {
                if (val.recipient) {
                    this.getUserName(val.recipient);
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The method upon creation of the message form submission.
         */
        EmployeeCreateMessageFormComponent.prototype.onConfirm = function () {
            this.newMessageFormGroup.markAsDirty();
            this.newMessageFormGroup.markAllAsTouched();
            var valid = this.newMessageFormGroup.valid;
            var value = this.newMessageFormGroup.getRawValue();
            if (valid) {
                var finalValue = Object.assign({ subject: '', body: '', topic: '', recipient: value.recipient.id, important: value.important, deletable: !value.notDeletable, 'read-only': value['read-only'] }, this.getSimpleFormVal(value));
                this.createMessage(finalValue);
            }
        };
        /**
         * The method to search for typeahead options.
         *
         * @param text Search query
         * @returns Search stream
         */
        EmployeeCreateMessageFormComponent.prototype.search = function (text) {
            var _this = this;
            return text.pipe(operators.debounceTime(this.debounceTime), operators.distinctUntilChanged(), operators.filter(function (value) { return value.length > _this.minSearchLength; }), operators.switchMap(function (value) { return _this.employeeService.getUsers(value); }));
        };
        EmployeeCreateMessageFormComponent.prototype.resetToInit = function () {
            _super.prototype.resetToInit.call(this);
            this.resetAdditionalFields();
        };
        EmployeeCreateMessageFormComponent.prototype.customRequiredValidator = function (control) {
            var value = control.value;
            var isSelected = value && typeof value !== 'string';
            return !isSelected ? { required: true } : null;
        };
        EmployeeCreateMessageFormComponent.prototype.getUserName = function (userId) {
            var _this = this;
            this.employeeService
                .getUserById(userId)
                .pipe(operators.tap(function (user) { return _this.setUserName(user, userId); }), operators.catchError(function (err) {
                _this.sharedService.openNotification(_this.sharedService.getErrorMessage(err), 'error');
                return rxjs.EMPTY;
            }))
                .subscribe();
        };
        EmployeeCreateMessageFormComponent.prototype.setUserName = function (user, userId) {
            this.newMessageFormGroup.controls['recipient'].setValue(Object.assign(Object.assign({}, user), { id: userId }));
            if (this.isPreDefinedUserReadonly) {
                this.newMessageFormGroup.controls['recipient'].disable();
            }
        };
        EmployeeCreateMessageFormComponent.prototype.resetAdditionalFields = function () {
            var _this = this;
            Object.keys(this.additionalFormFields).forEach(function (key) {
                _this.newMessageFormGroup.controls[key].setValue(_this.additionalFormFields[key]);
            });
        };
        return EmployeeCreateMessageFormComponent;
    }(BaseCreateMessageFormComponent));
    EmployeeCreateMessageFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormComponent, deps: [{ token: EmployeeCreateMessageFormService }, { token: MessagesEncodingService }, { token: SharedMethodsService }, { token: i4__namespace.FormBuilder }, { token: i0__namespace.ChangeDetectorRef }, { token: BaseCreateMessageFormService }, { token: MessagesManipulationConfirmModalService }, { token: MessagesUploadAttachmentsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    EmployeeCreateMessageFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMessageFormComponent, selector: "bb-messages-employee-create-message-form", inputs: { debounceTime: "debounceTime", minSearchLength: "minSearchLength", preDefineForm: "preDefineForm", isPreDefinedUserReadonly: "isPreDefinedUserReadonly" }, providers: [
            {
                provide: BaseCreateMessageFormService,
                useClass: CreateMessageFormImplementationService,
            },
            {
                provide: BaseUploadAttachmentsService,
                useClass: MessagesEmployeeUploadAttachmentsService,
            },
        ], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  bbEmployeeCreateMessageFormCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    topics: topics | async,\n    maxAttachmentSize: maxAttachmentSize\n  }\"\n></ng-container>\n\n<ng-template\n  bbEmployeeCreateMessageFormCustomizable\n  let-host\n  let-topics=\"context.topics\"\n  let-maxAttachmentSize=\"context.maxAttachmentSize\"\n>\n  <form [formGroup]=\"host.newMessageFormGroup\" data-role=\"form\" (submit)=\"host.onConfirm()\">\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        *ngIf=\"\n          topics?.length\n            ? topicPlaceholderConfig.selectTopicPlaceholder\n            : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n        \"\n        [options]=\"topics\"\n        displayAttributePath=\"name\"\n        formControlName=\"topic\"\n        label=\"Topic\"\n        i18n-label=\"Topic label text@@messages.employeeCreateMessage.composeMessageForm.topicLabel\"\n        aria-label=\"Topic\"\n        [aria-invalid]=\"host.isInvalidControl('topic')\"\n        data-role=\"topics\"\n        aria-describedby=\"compose-message-topic-error-message\"\n        i18n-aria-label=\"Topic aria-label text@@messages.employeeCreateMessage.composeMessageForm.topicAriaLabel\"\n        labelClasses=\"form-label\"\n        [attr.placeholder]=\"topicPlaceholder\"\n        [placeholder]=\"topicPlaceholder\"\n        (blur)=\"host.resetFormOnElementBlur()\"\n      ></bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-topic-error-message\"\n        [showErrors]=\"host.isInvalidControl('topic')\"\n      >\n        <span\n          *ngIf=\"host.hasError('topic', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            required@@messages.employeeCreateMessage.composeMessageForm.errors.subjectRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <label i18n=\"User label text@@messages.employeeCreateMessage.composeMessageForm.recipientLabel\">User</label>\n      <bb-search-box-ui\n        formControlName=\"recipient\"\n        aria-label=\"Select user\"\n        i18n-aria-label=\"\n          Select user aria-label text@@messages.employeeCreateMessage.composeMessageForm.subjectAriaLabel\"\n        [attr.aria-invalid]=\"host.isInvalidControl('recipient')\"\n        aria-describedby=\"compose-message-recipient-error-message\"\n        placeholder=\"Select user\"\n        i18n-placeholder=\"Select user@@messages.employeeCreateMessage.composeMessageForm.selectRecipientPlaceholder\"\n        [typeaheadOptions]=\"host.typeaheadOptions\"\n        [required]=\"true\"\n      ></bb-search-box-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-recipient-error-message\"\n        [showErrors]=\"host.isInvalidControl('recipient')\"\n      >\n        <span\n          *ngIf=\"host.hasError('recipient', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMessage.composeMessageForm.errors.recipientRequired\"\n          >Field is required</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"subject\"\n        label=\"Subject\"\n        i18n-label=\"Subject label text@@messages.employeeCreateMessage.composeMessageForm.subjectLabel\"\n        aria-label=\"Subject\"\n        i18n-aria-label=\"Subject aria-label text@@messages.employeeCreateMessage.composeMessageForm.subjectAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('subject')\"\n        aria-describedby=\"compose-message-subject-error-message\"\n        placeholder=\"Write subject\"\n        i18n-placeholder=\"\n          Subject placeholder text@@messages.employeeCreateMessage.composeMessageForm.subjectPlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"subject\"\n        [maxlength]=\"host.maxSubjectLength\"\n        [required]=\"true\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-subject-error-message\"\n        [showErrors]=\"host.isInvalidControl('subject')\"\n      >\n        <span\n          *ngIf=\"host.hasError('subject', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMessage.composeMessageForm.errors.subjectRequired\"\n          >Field is required</span\n        >\n        <span\n          *ngIf=\"host.hasError('subject', 'maxlength')\"\n          i18n=\"\n            Error message if subject value is more then maxlength\n            value@@messages.employeeCreateMessage.composeMessageForm.errors.subjectMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('subject')?.value?.length }} characters exceeds the limit of\n          {{ host.maxSubjectLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"read-only\"\n          aria-label=\"Read only\"\n          data-role=\"readonly\"\n          i18n-aria-label=\"\n            checkbox read-only aria-label@@messages.employeeCreateMessage.composeMessageForm.readonlyCheckboxAriaLabel\"\n          label=\"Read only\"\n          i18n-label=\"\n            read only checkbox label text@@messages.employeeCreateMessage.composeMessageForm.readonlyCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"notDeletable\"\n          aria-label=\"Can't be deleted\"\n          data-role=\"deletable\"\n          i18n-aria-label=\"\n            checkbox deletable aria-label@@messages.employeeCreateMessage.composeMessageForm.deletableCheckboxAriaLabel\"\n          label=\"Can't be deleted\"\n          i18n-label=\"\n            deletable checkbox label text@@messages.employeeCreateMessage.composeMessageForm.deletableCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"important\"\n          aria-label=\"important\"\n          data-role=\"important\"\n          i18n-aria-label=\"\n            checkbox important aria-label@@messages.employeeCreateMessage.composeMessageForm.importantCheckboxAriaLabel\"\n          label=\"Important\"\n          i18n-label=\"\n            important checkbox label text@@messages.employeeCreateMessage.composeMessageForm.importantCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-rich-text-editor-ui\n        label=\"Message\"\n        i18n-label=\"Message label text@@messages.employeeCreateMessage.composeMessageForm.messageLabel\"\n        aria-label=\"Message\"\n        i18n-aria-label=\"Message aria-label text@@messages.employeeCreateMessage.composeMessageForm.messageAriaLabel\"\n        placeholder=\"Write some text\"\n        i18n-placeholder=\"\n          Message placeholder text@@messages.employeeCreateMessage.composeMessageForm.messagePlaceholder\"\n        [attr.aria-invalid]=\"host.isInvalidControl('body')\"\n        [attr.aria-describedby]=\"'compose-message-body-error-message'\"\n        formControlName=\"body\"\n        [counter]=\"true\"\n        [maxLength]=\"host.maxMessageLength\"\n        [required]=\"true\"\n      >\n        <ng-template #actions bbRichTextEditorActions>\n          <bb-rich-text-editor-bold-action></bb-rich-text-editor-bold-action>\n          <bb-rich-text-editor-italic-action></bb-rich-text-editor-italic-action>\n          <bb-rich-text-editor-underline-action></bb-rich-text-editor-underline-action>\n          <bb-rich-text-editor-strikethrough-action> </bb-rich-text-editor-strikethrough-action>\n          <bb-rich-text-editor-olist-action></bb-rich-text-editor-olist-action>\n          <bb-rich-text-editor-ulist-action> </bb-rich-text-editor-ulist-action>\n          <bb-rich-text-editor-link-action></bb-rich-text-editor-link-action>\n        </ng-template>\n      </bb-rich-text-editor-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-body-error-message\"\n        [showErrors]=\"host.isInvalidControl('body')\"\n      >\n        <span\n          *ngIf=\"host.hasError('body', 'required')\"\n          i18n=\"Error message if field is required@@messages.createMessage.composeMessageForm.errors.messageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-messages-upload-attachments\n        [maxSize]=\"maxAttachmentSize\"\n        formControlName=\"attachments\"\n      ></bb-messages-upload-attachments>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        data-role=\"submit\"\n        aria-label=\"Send\"\n        i18n-aria-label=\"\n          Submit button aria-label text@@messages.employeeCreateMessage.composeMessageForm.submitButtonAriaLabel\"\n        i18n=\"Submit button text@@messages.employeeCreateMessage.composeMessageForm.submitButton\"\n        [isLoading]=\"host.formLoading\"\n      >\n        Send\n      </bb-load-button-ui>\n      <button\n        bbButton\n        bbPreventBubbleDown\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        data-role=\"discard\"\n        aria-label=\"Discard\"\n        i18n-aria-label=\"\n          Discard button aria-label text@@messages.employeeCreateMessage.composeMessageForm.discardButtonAriaLabel\"\n        i18n=\"Discard button text@@messages.employeeCreateMessage.composeMessageForm.discardButton\"\n        (click)=\"host.confirmModalService.toggleModal(true, host.manipulationTypes.discard, host.newMessageFormGroup)\"\n      >\n        Discard\n      </button>\n    </div>\n  </form>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"host.confirmationModal.opened\"\n    [type]=\"host.confirmationModal.type\"\n    (cancel)=\"host.confirmModalService.toggleModal(false)\"\n    (confirm)=\"host.confirmConfirmationModal()\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #messageComposeSuccess>\n  <span\n    i18n=\"\n      Your message has been successfully sent.|Text of successful conversation\n      compose@@messages.employeeCreateMessage.composeMessageForm.messageSuccessCompose\"\n    >Your message has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #messageComposeError>\n  <span\n    i18n=\"\n      There is an error sending message.|Text of failed conversation\n      compose@@messages.employeeCreateMessage.composeMessageForm.messageErrorCompose\"\n    >There is an error sending message.</span\n  >\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i8__namespace.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0__namespace.forwardRef(function () { return i12__namespace.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorComponent; }), selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorBoldActionComponent; }), selector: "bb-rich-text-editor-bold-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorItalicActionComponent; }), selector: "bb-rich-text-editor-italic-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorUnderlineActionComponent; }), selector: "bb-rich-text-editor-underline-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorStrikethroughActionComponent; }), selector: "bb-rich-text-editor-strikethrough-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorOlistActionComponent; }), selector: "bb-rich-text-editor-olist-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorUlistActionComponent; }), selector: "bb-rich-text-editor-ulist-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorLinkActionComponent; }), selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }, { type: i0__namespace.forwardRef(function () { return MessagesUploadAttachmentsComponent; }), selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: ["maxSize", "initAttachments", "disabled", "multiple", "attachmentButtonText", "accept"] }, { type: i0__namespace.forwardRef(function () { return i15__namespace.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0__namespace.forwardRef(function () { return EmployeeCreateMessageFormCustomizableDirective; }), selector: "[bbEmployeeCreateMessageFormCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorActionsDirective; }), selector: "ng-template[bbRichTextEditorActions]" }, { type: i0__namespace.forwardRef(function () { return i18__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return PreventBubbleDownDirective; }), selector: "[bbPreventBubbleDown]" }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace$1.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-employee-create-message-form',
                        templateUrl: './employee-create-message-form.component.html',
                        providers: [
                            {
                                provide: BaseCreateMessageFormService,
                                useClass: CreateMessageFormImplementationService,
                            },
                            {
                                provide: BaseUploadAttachmentsService,
                                useClass: MessagesEmployeeUploadAttachmentsService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: EmployeeCreateMessageFormService }, { type: MessagesEncodingService }, { type: SharedMethodsService }, { type: i4__namespace.FormBuilder }, { type: i0__namespace.ChangeDetectorRef }, { type: BaseCreateMessageFormService }, { type: MessagesManipulationConfirmModalService }, { type: MessagesUploadAttachmentsService }]; }, propDecorators: { debounceTime: [{
                    type: i0.Input
                }], minSearchLength: [{
                    type: i0.Input
                }], preDefineForm: [{
                    type: i0.Input
                }], isPreDefinedUserReadonly: [{
                    type: i0.Input
                }] } });
    var EmployeeCreateMessageFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(EmployeeCreateMessageFormCustomizableDirective, _super);
        function EmployeeCreateMessageFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return EmployeeCreateMessageFormCustomizableDirective;
    }(i1$1.BbTemplate));
    EmployeeCreateMessageFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    EmployeeCreateMessageFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMessageFormCustomizableDirective, selector: "[bbEmployeeCreateMessageFormCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbEmployeeCreateMessageFormCustomizable]',
                    }]
            }] });

    var components$4 = [EmployeeCreateMessageFormComponent];
    var directives$4 = [EmployeeCreateMessageFormCustomizableDirective];
    var uiModules$6 = [
        i8.DropdownSingleSelectModule,
        i9.InputValidationMessageModule,
        i10.SearchBoxModule,
        i11.InputTextModule,
        i13.RichTextEditorModule,
        i18.ButtonModule,
        i12.InputCheckboxModule,
        i15.LoadButtonModule,
    ];
    var innerModules$3 = [
        MessagesManipulationConfirmModalModule,
        MessagesUploadAttachmentsModule,
        BaseCreateMessageFormModule,
    ];
    var EmployeeCreateMessageFormModule = /** @class */ (function () {
        function EmployeeCreateMessageFormModule() {
        }
        return EmployeeCreateMessageFormModule;
    }());
    EmployeeCreateMessageFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EmployeeCreateMessageFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormModule, declarations: [EmployeeCreateMessageFormComponent, EmployeeCreateMessageFormCustomizableDirective], imports: [i2.CommonModule, i4.ReactiveFormsModule, PreventBubbleDownModule, i8.DropdownSingleSelectModule,
            i9.InputValidationMessageModule,
            i10.SearchBoxModule,
            i11.InputTextModule,
            i13.RichTextEditorModule,
            i18.ButtonModule,
            i12.InputCheckboxModule,
            i15.LoadButtonModule, MessagesManipulationConfirmModalModule,
            MessagesUploadAttachmentsModule,
            BaseCreateMessageFormModule], exports: [i4.ReactiveFormsModule, EmployeeCreateMessageFormComponent, EmployeeCreateMessageFormCustomizableDirective, i8.DropdownSingleSelectModule,
            i9.InputValidationMessageModule,
            i10.SearchBoxModule,
            i11.InputTextModule,
            i13.RichTextEditorModule,
            i18.ButtonModule,
            i12.InputCheckboxModule,
            i15.LoadButtonModule, MessagesManipulationConfirmModalModule,
            MessagesUploadAttachmentsModule,
            BaseCreateMessageFormModule] });
    EmployeeCreateMessageFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormModule, providers: [EmployeeCreateMessageFormService, MessagesEncodingService], imports: [__spreadArray(__spreadArray([i2.CommonModule, i4.ReactiveFormsModule, PreventBubbleDownModule], __read(uiModules$6)), __read(innerModules$3)), i4.ReactiveFormsModule, i8.DropdownSingleSelectModule,
            i9.InputValidationMessageModule,
            i10.SearchBoxModule,
            i11.InputTextModule,
            i13.RichTextEditorModule,
            i18.ButtonModule,
            i12.InputCheckboxModule,
            i15.LoadButtonModule, MessagesManipulationConfirmModalModule,
            MessagesUploadAttachmentsModule,
            BaseCreateMessageFormModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMessageFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i2.CommonModule, i4.ReactiveFormsModule, PreventBubbleDownModule], __read(uiModules$6)), __read(innerModules$3)),
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray([i4.ReactiveFormsModule], __read(components$4)), __read(directives$4)), __read(uiModules$6)), __read(innerModules$3)),
                        declarations: __spreadArray(__spreadArray([], __read(components$4)), __read(directives$4)),
                        providers: [EmployeeCreateMessageFormService, MessagesEncodingService],
                    }]
            }] });

    var EmployeeCreateMailoutFormService = /** @class */ (function () {
        function EmployeeCreateMailoutFormService(messagesService, employeeService) {
            this.messagesService = messagesService;
            this.employeeService = employeeService;
            this.maxPaginationItemsNum = 65535;
        }
        /**
         * Get topics
         *
         * @returns Get topics stream
         */
        EmployeeCreateMailoutFormService.prototype.getTopics = function () {
            return this.employeeService
                .getTopicsEmployee({ size: this.maxPaginationItemsNum, subscribed: true })
                .pipe(operators.catchError(function () { return rxjs.of([]); }));
        };
        /**
         * Create message
         *
         * @param body Create message request body
         * @returns Create message stream
         */
        EmployeeCreateMailoutFormService.prototype.createMessage = function (body) {
            return this.messagesService.postMailout({ mailoutPostRequestBody: body });
        };
        return EmployeeCreateMailoutFormService;
    }());
    EmployeeCreateMailoutFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormService, deps: [{ token: i1__namespace.MailoutHttpService }, { token: i1__namespace.EmployeeHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EmployeeCreateMailoutFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.MailoutHttpService }, { type: i1__namespace.EmployeeHttpService }]; } });

    var EmployeeCreateMailoutFormComponent = /** @class */ (function (_super) {
        __extends(EmployeeCreateMailoutFormComponent, _super);
        function EmployeeCreateMailoutFormComponent(encodingService, sharedService, fb, cd, createMessageFormService, confirmModalService, uploadService) {
            var _this = _super.call(this, sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService) || this;
            _this.encodingService = encodingService;
            _this.sharedService = sharedService;
            _this.fb = fb;
            _this.cd = cd;
            _this.createMessageFormService = createMessageFormService;
            _this.confirmModalService = confirmModalService;
            _this.uploadService = uploadService;
            _this.hostRef = _this;
            /**
             * Configs for topic selector placeholder
             */
            _this.topicPlaceholderConfig = topicPlaceholderConfig;
            /**
             * The output with the mailout preview data.
             */
            _this.review = new i0.EventEmitter();
            _this.defaultSenderName = '';
            _this.newMessageFormGroup.addControl('important', _this.fb.control(false));
            _this.newMessageFormGroup.addControl('notDeletable', _this.fb.control(false));
            _this.newMessageFormGroup.addControl('mailoutName', _this.fb.control(''));
            _this.newMessageFormGroup.addControl('recipientsDataId', _this.fb.control('', i4.Validators.required));
            _this.newMessageFormGroup.addControl('senderDisplayName', _this.fb.control('', i4.Validators.required));
            _this.newMessageFormGroup.addControl('isBodyHtml', _this.fb.control(false));
            _this.newMessageFormGroup.addControl('template', _this.fb.control(''));
            _this.newMessageFormGroup.updateValueAndValidity();
            return _this;
        }
        Object.defineProperty(EmployeeCreateMailoutFormComponent.prototype, "senderDisplayName", {
            /**
             * The input with the sender display name.
             */
            set: function (value) {
                if (value) {
                    var senderNameControl = this.newMessageFormGroup.controls['senderDisplayName'];
                    senderNameControl.setValue(value);
                    this.newMessageFormGroup.markAsPristine();
                    this.defaultSenderName = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        EmployeeCreateMailoutFormComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.setDefaultMailoutFormValue();
        };
        EmployeeCreateMailoutFormComponent.prototype.setDefaultMailoutFormValue = function () {
            if (this.defaultMailout) {
                this.newMessageFormGroup.patchValue(Object.assign({}, this.defaultMailout));
                var bodyControl = this.newMessageFormGroup.controls['body'];
                if (this.defaultMailout.isBodyHtml) {
                    bodyControl.setValue('');
                    bodyControl.disable();
                }
                this.newMessageFormGroup.updateValueAndValidity();
                this.newMessageFormGroup.markAsDirty();
            }
        };
        /**
         * The method to load and parse the mailout template file.
         */
        EmployeeCreateMailoutFormComponent.prototype.onAddTemplateFile = function (input) {
            var _this = this;
            if (input.files && input.files[0]) {
                var file_1 = input.files[0];
                var bodyInput_1 = this.newMessageFormGroup.controls['body'];
                var templateInput_1 = this.newMessageFormGroup.controls['template'];
                var fileReader_1 = new FileReader();
                fileReader_1.onload = function () {
                    templateInput_1.setValue({
                        body: fileReader_1.result,
                        name: file_1.name,
                        size: file_1.size,
                    });
                    _this.newMessageFormGroup.controls['isBodyHtml'].setValue(true);
                    templateInput_1.markAsTouched();
                    bodyInput_1.clearValidators();
                    bodyInput_1.disable();
                };
                fileReader_1.readAsText(file_1);
            }
        };
        /**
         * The method to clear the template file.
         */
        EmployeeCreateMailoutFormComponent.prototype.onClearTemplateFile = function () {
            var body = this.newMessageFormGroup.controls['body'];
            this.newMessageFormGroup.controls['template'].setValue(undefined);
            this.newMessageFormGroup.controls['isBodyHtml'].setValue(false);
            body.setValidators([i4.Validators.required]);
            body.enable();
        };
        /**
         * The method to save the mailout.
         */
        EmployeeCreateMailoutFormComponent.prototype.onConfirm = function () {
            this.newMessageFormGroup.markAllAsTouched();
            this.newMessageFormGroup.markAsDirty();
            var _a = this.newMessageFormGroup, value = _a.value, valid = _a.valid;
            if (valid) {
                if (value.template && value.template.body) {
                    value.body = value.template.body;
                }
                var finalValue = Object.assign({ subject: '', topic: '', body: '', mailoutName: value.mailoutName, recipientsData: {
                        id: value.recipientsDataId[0].id,
                    }, senderDisplayName: this.defaultSenderName, isBodyHtml: value.isBodyHtml, important: !!value.important, deletable: !value.notDeletable }, this.getSimpleFormVal(value));
                if (value.isBodyHtml) {
                    this.review.emit(Object.assign(Object.assign({}, value), { senderDisplayName: this.defaultSenderName }));
                }
                else {
                    this.createMessage(finalValue);
                }
            }
        };
        /**
         * The method to discard the mailout.
         *
         * @param discardParam Should open modal flag
         */
        EmployeeCreateMailoutFormComponent.prototype.onDiscard = function (discardParam) {
            if (discardParam) {
                this.confirmModalService.toggleModal(discardParam, this.manipulationTypes.discard, this.newMessageFormGroup);
            }
            else {
                this.confirmModalService.toggleModal(discardParam);
            }
        };
        EmployeeCreateMailoutFormComponent.prototype.resetToInit = function (isFormDiscard) {
            if (isFormDiscard === void 0) { isFormDiscard = false; }
            _super.prototype.resetToInit.call(this, isFormDiscard);
            this.onClearTemplateFile();
        };
        return EmployeeCreateMailoutFormComponent;
    }(BaseCreateMessageFormComponent));
    EmployeeCreateMailoutFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormComponent, deps: [{ token: MessagesEncodingService }, { token: SharedMethodsService }, { token: i4__namespace.FormBuilder }, { token: i0__namespace.ChangeDetectorRef }, { token: BaseCreateMessageFormService }, { token: MessagesManipulationConfirmModalService }, { token: MessagesUploadAttachmentsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    EmployeeCreateMailoutFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormComponent, selector: "bb-messages-employee-create-mailout-form", inputs: { defaultMailout: "defaultMailout", senderDisplayName: "senderDisplayName" }, outputs: { review: "review" }, providers: [
            {
                provide: BaseCreateMessageFormService,
                useClass: EmployeeCreateMailoutFormService,
            },
            {
                provide: BaseUploadAttachmentsService,
                useClass: MessagesEmployeeUploadAttachmentsService,
            },
        ], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  bbEmployeeCreateMailoutFormCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    topics: topics | async,\n    maxAttachmentSize: maxAttachmentSize,\n    maxSubjectLength: maxSubjectLength\n  }\"\n></ng-container>\n\n<ng-template\n  bbEmployeeCreateMailoutFormCustomizable\n  let-host\n  let-topics=\"context.topics\"\n  let-maxAttachmentSize=\"context.maxAttachmentSize\"\n>\n  <form [formGroup]=\"host.newMessageFormGroup\" data-role=\"form\" (submit)=\"host.onConfirm()\">\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--fill bb-stack__item--align-top\">\n          <label\n            data-role=\"recipients-label\"\n            for=\"recipientsDataId\"\n            i18n=\"\n              Recipients|Recipients label text@@messages.employeeCreateMailout.composeMailoutForm.recipientsLabelText\"\n            >Recipients</label\n          >\n          <bb-messages-upload-attachments\n            data-role=\"import-recipients\"\n            accept=\"text/csv\"\n            id=\"recipientsDataId\"\n            [maxSize]=\"maxAttachmentSize\"\n            [multiple]=\"false\"\n            [initAttachments]=\"host.defaultMailout?.recipientsDataId\"\n            formControlName=\"recipientsDataId\"\n            i18n-attachmentButtonText=\"\n              Import recipients|Upload recipients attachment button\n              text@@messages.employeeCreateMailout.composeMailoutForm.uploadRecipientsAttachmentButtonText\"\n            attachmentButtonText=\"Import recipients\"\n          ></bb-messages-upload-attachments>\n          <bb-input-validation-message-ui\n            id=\"compose-mailout-sender-name-error\"\n            [showErrors]=\"host.isInvalidControl('recipientsDataId')\"\n          >\n            <span\n              *ngIf=\"host.hasError('recipientsDataId', 'required')\"\n              i18n=\"\n                Error message if recipient field is\n                required@@messages.employeeCreateMailout.composeMailoutForm.errors.recipientsDataIdRequired\"\n            >\n              Recipient is required\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-stack__item bb-stack__item--fill bb-stack__item--align-top\">\n          <label\n            data-role=\"html-template\"\n            for=\"templateFile\"\n            i18n=\"Recipients|Recipients label text@@messages.employeeCreateMailout.composeMailoutForm.htmpTemplateLabel\"\n            >HTML Template</label\n          >\n          <div>\n            <bb-input-file-ui\n              *ngIf=\"!host.newMessageFormGroup.controls['template']?.value\"\n              accept=\".html\"\n              data-role=\"import-template\"\n              buttonText=\"Import template\"\n              i18n-buttonText=\"Import template@@messages.employeeCreateMailout.composeMailoutForm.attachFile\"\n              id=\"templateFile\"\n              (change)=\"host.onAddTemplateFile($event.target)\"\n            ></bb-input-file-ui>\n            <div class=\"row\">\n              <div class=\"col-auto\" *ngIf=\"host.newMessageFormGroup.controls['template']?.value as templateValue\">\n                <bb-file-attachment-ui\n                  [name]=\"templateValue.name\"\n                  [size]=\"templateValue.size\"\n                  [deletable]=\"true\"\n                  [disabled]=\"true\"\n                  (delete)=\"host.onClearTemplateFile()\"\n                ></bb-file-attachment-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"mailout-name-label\"\n        label=\"Mailout name\"\n        i18n-label=\"Mailout name text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNameLabel\"\n        aria-label=\"Mailout name\"\n        i18n-aria-label=\"\n          Subject aria-label text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNametAriaLabel\"\n        placeholder=\"Write mailout name\"\n        i18n-placeholder=\"\n          Mailout name placeholder text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNamePlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"mailoutName\"\n        [maxlength]=\"host.maxMailoutNameLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui [showErrors]=\"host.isInvalidControl('mailoutName')\">\n        <span\n          *ngIf=\"host.hasError('mailoutName', 'maxlength')\"\n          i18n=\"\n            Error message if mailout name value is more then maxlength\n            value@@messages.employeeCreateMailout.composeMailoutForm.errors.mailoutNameMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('name')?.value?.length }} characters exceeds the limit of\n          {{ host.maxMailoutNameLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n      <p\n        class=\"bb-text-support bb-subtitle\"\n        data-role=\"mailout-name-subtitle\"\n        i18n=\"\n          Name exist for internal purposes only. It will not be displayed to\n          users@@messages.employeeCreateMailout.composeMailoutForm.mailoutNameSubtitleText\"\n      >\n        Name exist for internal purposes only. It will not be displayed to users\n      </p>\n    </div>\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        label=\"Sender name\"\n        data-role=\"sender-name\"\n        i18n-label=\"Sender name text@@messages.employeeCreateMailout.composeMailoutForm.senderNameLabel\"\n        aria-label=\"Sender name\"\n        i18n-aria-label=\"\n          Sender name aria-label text@@messages.employeeCreateMailout.composeMailoutForm.senderNameAriaLabel\"\n        aria-invalid=\"host.isInvalidControl('senderDisplayName')\"\n        [readonly]=\"host.defaultSenderName\"\n        aria-describedby=\"compose-mailout-sender-name-error\"\n        placeholder=\"Write sender name\"\n        i18n-placeholder=\"\n          Sender name placeholder text@@messages.employeeCreateMailout.composeMailoutForm.senderNamePlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"senderDisplayName\"\n      >\n      </bb-input-text-ui>\n      <p\n        class=\"bb-text-support bb-subtitle\"\n        data-role=\"sender-name-subtitle\"\n        i18n=\"\n          Employee name will be replaced for the\n          recipient@@messages.employeeCreateMailout.composeMailoutForm.senderDisplayNameSubtitleText\"\n      >\n        Employee name will be replaced for the recipient\n      </p>\n      <bb-input-validation-message-ui\n        id=\"compose-mailout-sender-name-error\"\n        [showErrors]=\"host.isInvalidControl('senderDisplayName')\"\n      >\n        <span\n          *ngIf=\"host.hasError('senderDisplayName', 'required')\"\n          i18n=\"\n            Error message if field is\n            required@@messages.createMessage.composeMessageForm.errors.senderDisplayNameMessageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        *ngIf=\"\n          topics?.length\n            ? topicPlaceholderConfig.selectTopicPlaceholder\n            : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n        \"\n        data-role=\"topics\"\n        [options]=\"topics\"\n        displayAttributePath=\"name\"\n        formControlName=\"topic\"\n        label=\"Topic\"\n        i18n-label=\"Topic label text@@messages.employeeCreateMailout.composeMailoutForm.topicLabel\"\n        aria-label=\"Topic\"\n        i18n-aria-label=\"Topic aria-label text@@messages.employeeCreateMailout.composeMailoutForm.topicAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('topic')\"\n        aria-describedby=\"compose-mailout-topic-error\"\n        labelClasses=\"form-label\"\n        [attr.placeholder]=\"topicPlaceholder\"\n        [placeholder]=\"topicPlaceholder\"\n        (blur)=\"host.resetFormOnElementBlur()\"\n      ></bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui id=\"compose-mailout-topic-error\" [showErrors]=\"host.isInvalidControl('topic')\">\n        <span\n          *ngIf=\"host.hasError('topic', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            required@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"subject\"\n        label=\"Subject\"\n        i18n-label=\"Subject label text@@messages.employeeCreateMailout.composeMailoutForm.subjectLabel\"\n        aria-label=\"Subject\"\n        i18n-aria-label=\"Subject aria-label text@@messages.employeeCreateMailout.composeMailoutForm.subjectAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('subject')\"\n        aria-describedby=\"compose-mailout-subject-error\"\n        placeholder=\"Write subject\"\n        i18n-placeholder=\"\n          Subject placeholder text@@messages.employeeCreateMailout.composeMailoutForm.subjectPlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"subject\"\n        [maxlength]=\"host.maxSubjectLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-mailout-subject-error\"\n        [showErrors]=\"host.isInvalidControl('subject')\"\n      >\n        <span\n          *ngIf=\"host.hasError('subject', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectRequired\"\n          >Field is required</span\n        >\n        <span\n          *ngIf=\"host.hasError('subject', 'maxlength')\"\n          i18n=\"\n            Error message if subject value is more then maxlength\n            value@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('subject')?.value?.length }} characters exceeds the limit of\n          {{ host.maxSubjectLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"notDeletable\"\n          aria-label=\"Can't be deleted\"\n          data-role=\"deletable\"\n          i18n-aria-label=\"\n            checkbox deletable aria-label@@messages.employeeCreateMailout.composeMailoutForm.deletableCheckboxAriaLabel\"\n          label=\"Can't be deleted\"\n          i18n-label=\"\n            deletable checkbox label text@@messages.employeeCreateMailout.composeMailoutForm.deletableCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"important\"\n          aria-label=\"important\"\n          data-role=\"important\"\n          i18n-aria-label=\"\n            checkbox important aria-label@@messages.employeeCreateMailout.composeMailoutForm.importantCheckboxAriaLabel\"\n          label=\"Important\"\n          i18n-label=\"\n            important checkbox label text@@messages.employeeCreateMailout.composeMailoutForm.importantCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-rich-text-editor-ui\n        label=\"Message\"\n        data-role=\"message-body\"\n        i18n-label=\"Message label text@@messages.employeeCreateMailout.composeMailoutForm.messageLabel\"\n        aria-label=\"Message\"\n        i18n-aria-label=\"Message aria-label text@@messages.employeeCreateMailout.composeMailoutForm.messageAriaLabel\"\n        [attr.aria-invalid]=\"host.isInvalidControl('body')\"\n        [attr.aria-describedby]=\"'compose-mailout-body-error'\"\n        placeholder=\"Write some text\"\n        i18n-placeholder=\"\n          Message placeholder text@@messages.employeeCreateMailout.composeMailoutForm.messagePlaceholder\"\n        formControlName=\"body\"\n        [counter]=\"true\"\n        [maxLength]=\"host.maxMessageLength\"\n        [required]=\"!host.templateFile\"\n      >\n        <ng-template #actions bbRichTextEditorActions>\n          <bb-rich-text-editor-bold-action></bb-rich-text-editor-bold-action>\n          <bb-rich-text-editor-italic-action></bb-rich-text-editor-italic-action>\n          <bb-rich-text-editor-underline-action></bb-rich-text-editor-underline-action>\n          <bb-rich-text-editor-strikethrough-action> </bb-rich-text-editor-strikethrough-action>\n          <bb-rich-text-editor-olist-action></bb-rich-text-editor-olist-action>\n          <bb-rich-text-editor-ulist-action> </bb-rich-text-editor-ulist-action>\n          <bb-rich-text-editor-link-action></bb-rich-text-editor-link-action>\n        </ng-template>\n      </bb-rich-text-editor-ui>\n      <bb-input-validation-message-ui id=\"compose-mailout-body-error\" [showErrors]=\"host.isInvalidControl('body')\">\n        <span\n          *ngIf=\"host.hasError('body', 'required')\"\n          i18n=\"\n            Error message if field is required@@messages.employeeCreateMailout.composeMailoutForm.errors.messageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-messages-upload-attachments\n        [initAttachments]=\"host.defaultMailout?.attachments\"\n        [maxSize]=\"maxAttachmentSize\"\n        formControlName=\"attachments\"\n      ></bb-messages-upload-attachments>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        data-role=\"submit\"\n        aria-label=\"Continue\"\n        i18n-aria-label=\"\n          Submit button aria-label text@@messages.employeeCreateMailout.composeMailoutForm.submitButtonAriaLabel\"\n        i18n=\"Submit button text@@messages.employeeCreateMailout.composeMailoutForm.submitButton\"\n        [isLoading]=\"host.formLoading\"\n      >\n        Continue\n      </bb-load-button-ui>\n      <button\n        bbButton\n        bbPreventBubbleDown\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        data-role=\"discard\"\n        aria-label=\"Discard\"\n        i18n-aria-label=\"\n          Discard button aria-label text@@messages.employeeCreateMailout.composeMailoutForm.discardButtonAriaLabel\"\n        i18n=\"Discard button text@@messages.employeeCreateMailout.composeMailoutForm.discardButton\"\n        (click)=\"host.onDiscard(true)\"\n      >\n        Discard\n      </button>\n    </div>\n  </form>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"host.confirmationModal.opened\"\n    [type]=\"host.confirmationModal.type\"\n    (cancel)=\"host.onDiscard(false)\"\n    (confirm)=\"host.confirmConfirmationModal()\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #messageComposeSuccess>\n  <ng-container bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      Your mailout has been successfully sent.|Text of successful conversation\n      compose@@messages.employeeCreateMailout.composeMailoutForm.messageSuccessCompose\"\n    >Your mailout has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #messageComposeError>\n  <ng-container bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      There is an error sending mailout.|Text of failed conversation\n      compose@@messages.employeeCreateMailout.composeMailoutForm.messageErrorCompose\"\n    >There is an error sending mailout.</span\n  >\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return MessagesUploadAttachmentsComponent; }), selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: ["maxSize", "initAttachments", "disabled", "multiple", "attachmentButtonText", "accept"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.InputFileComponent; }), selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i12__namespace.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorComponent; }), selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorBoldActionComponent; }), selector: "bb-rich-text-editor-bold-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorItalicActionComponent; }), selector: "bb-rich-text-editor-italic-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorUnderlineActionComponent; }), selector: "bb-rich-text-editor-underline-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorStrikethroughActionComponent; }), selector: "bb-rich-text-editor-strikethrough-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorOlistActionComponent; }), selector: "bb-rich-text-editor-olist-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorUlistActionComponent; }), selector: "bb-rich-text-editor-ulist-action" }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorLinkActionComponent; }), selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }, { type: i0__namespace.forwardRef(function () { return i15__namespace.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0__namespace.forwardRef(function () { return EmployeeCreateMailoutFormCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.RichTextEditorActionsDirective; }), selector: "ng-template[bbRichTextEditorActions]" }, { type: i0__namespace.forwardRef(function () { return i18__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return PreventBubbleDownDirective; }), selector: "[bbPreventBubbleDown]" }, { type: i0__namespace.forwardRef(function () { return EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]" }, { type: i0__namespace.forwardRef(function () { return EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]" }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace$1.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-employee-create-mailout-form',
                        templateUrl: './employee-create-mailout-form.component.html',
                        providers: [
                            {
                                provide: BaseCreateMessageFormService,
                                useClass: EmployeeCreateMailoutFormService,
                            },
                            {
                                provide: BaseUploadAttachmentsService,
                                useClass: MessagesEmployeeUploadAttachmentsService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: MessagesEncodingService }, { type: SharedMethodsService }, { type: i4__namespace.FormBuilder }, { type: i0__namespace.ChangeDetectorRef }, { type: BaseCreateMessageFormService }, { type: MessagesManipulationConfirmModalService }, { type: MessagesUploadAttachmentsService }]; }, propDecorators: { review: [{
                    type: i0.Output
                }], defaultMailout: [{
                    type: i0.Input
                }], senderDisplayName: [{
                    type: i0.Input
                }] } });
    var EmployeeCreateMailoutFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(EmployeeCreateMailoutFormCustomizableDirective, _super);
        function EmployeeCreateMailoutFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return EmployeeCreateMailoutFormCustomizableDirective;
    }(i1$1.BbTemplate));
    EmployeeCreateMailoutFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    EmployeeCreateMailoutFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbEmployeeCreateMailoutFormCustomizable]',
                    }]
            }] });
    var EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective = /** @class */ (function (_super) {
        __extends(EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, _super);
        function EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective;
    }(i1$1.BbTemplate));
    EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]',
                    }]
            }] });
    var EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective = /** @class */ (function (_super) {
        __extends(EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, _super);
        function EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective;
    }(i1$1.BbTemplate));
    EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]',
                    }]
            }] });

    var components$3 = [EmployeeCreateMailoutFormComponent];
    var directives$3 = [
        EmployeeCreateMailoutFormCustomizableDirective,
        EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective,
        EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective,
    ];
    var uiModules$5 = [
        i8.DropdownSingleSelectModule,
        i5.FileAttachmentModule,
        i4$1.InputFileModule,
        i9.InputValidationMessageModule,
        i11.InputTextModule,
        i13.RichTextEditorModule,
        i18.ButtonModule,
        i12.InputCheckboxModule,
        i15.LoadButtonModule,
    ];
    var innerModules$2 = [i4.ReactiveFormsModule, MessagesManipulationConfirmModalModule, MessagesUploadAttachmentsModule];
    var EmployeeCreateMailoutFormModule = /** @class */ (function () {
        function EmployeeCreateMailoutFormModule() {
        }
        return EmployeeCreateMailoutFormModule;
    }());
    EmployeeCreateMailoutFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EmployeeCreateMailoutFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormModule, declarations: [EmployeeCreateMailoutFormComponent, EmployeeCreateMailoutFormCustomizableDirective,
            EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective,
            EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective], imports: [i2.CommonModule, PreventBubbleDownModule, i8.DropdownSingleSelectModule,
            i5.FileAttachmentModule,
            i4$1.InputFileModule,
            i9.InputValidationMessageModule,
            i11.InputTextModule,
            i13.RichTextEditorModule,
            i18.ButtonModule,
            i12.InputCheckboxModule,
            i15.LoadButtonModule, i4.ReactiveFormsModule, MessagesManipulationConfirmModalModule, MessagesUploadAttachmentsModule], exports: [EmployeeCreateMailoutFormComponent, EmployeeCreateMailoutFormCustomizableDirective,
            EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective,
            EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, i8.DropdownSingleSelectModule,
            i5.FileAttachmentModule,
            i4$1.InputFileModule,
            i9.InputValidationMessageModule,
            i11.InputTextModule,
            i13.RichTextEditorModule,
            i18.ButtonModule,
            i12.InputCheckboxModule,
            i15.LoadButtonModule, i4.ReactiveFormsModule, MessagesManipulationConfirmModalModule, MessagesUploadAttachmentsModule] });
    EmployeeCreateMailoutFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormModule, providers: [EmployeeCreateMailoutFormService], imports: [__spreadArray(__spreadArray([i2.CommonModule, PreventBubbleDownModule], __read(uiModules$5)), __read(innerModules$2)), i8.DropdownSingleSelectModule,
            i5.FileAttachmentModule,
            i4$1.InputFileModule,
            i9.InputValidationMessageModule,
            i11.InputTextModule,
            i13.RichTextEditorModule,
            i18.ButtonModule,
            i12.InputCheckboxModule,
            i15.LoadButtonModule, i4.ReactiveFormsModule, MessagesManipulationConfirmModalModule, MessagesUploadAttachmentsModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: EmployeeCreateMailoutFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i2.CommonModule, PreventBubbleDownModule], __read(uiModules$5)), __read(innerModules$2)),
                        declarations: __spreadArray(__spreadArray([], __read(components$3)), __read(directives$3)),
                        providers: [EmployeeCreateMailoutFormService],
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(components$3)), __read(directives$3)), __read(uiModules$5)), __read(innerModules$2)),
                    }]
            }] });

    var MessagesBodyPreviewComponent = /** @class */ (function () {
        function MessagesBodyPreviewComponent(renderer, cd) {
            this.renderer = renderer;
            this.cd = cd;
            /**
             * Flag to control visibility
             */
            this.isVisible = false;
            this.iframeContext = new rxjs.BehaviorSubject(undefined);
            this.destroy = new rxjs.Subject();
        }
        Object.defineProperty(MessagesBodyPreviewComponent.prototype, "body", {
            /**
             * Body from body message
             */
            set: function (val) {
                this.iframeContext.next(val);
            },
            enumerable: false,
            configurable: true
        });
        MessagesBodyPreviewComponent.prototype.ngOnDestroy = function () {
            this.destroy.next();
        };
        /**
         * Load preview iframe
         */
        MessagesBodyPreviewComponent.prototype.iframeLoad = function () {
            var _this = this;
            var iframeElement = this.iframeRef.nativeElement;
            var iframeBody = iframeElement.contentDocument.body;
            this.renderer.setStyle(iframeElement, 'width', '100%');
            this.renderer.setStyle(iframeElement, 'border', '0');
            this.renderer.setStyle(iframeBody, 'margin', '0');
            this.iframeContext
                .pipe(operators.filter(Boolean), operators.tap(function (content) { return _this.renderer.setProperty(iframeBody, 'innerHTML', content); }), operators.delay(300), operators.takeUntil(this.destroy))
                .subscribe(function () {
                var currentHeight = iframeBody.scrollHeight;
                var previousHeight = 0;
                var counter = 0;
                /* Several iterations are needed to set iframe height after recalculating template body height
                that contains elements with height or size set in relative units. */
                do {
                    _this.renderer.setStyle(iframeElement, 'height', currentHeight + "px");
                    previousHeight = currentHeight;
                    currentHeight = iframeBody.scrollHeight;
                    counter++;
                } while (previousHeight !== currentHeight && counter < 5);
                _this.isVisible = true;
                _this.cd.detectChanges();
            });
        };
        return MessagesBodyPreviewComponent;
    }());
    MessagesBodyPreviewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesBodyPreviewComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesBodyPreviewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesBodyPreviewComponent, selector: "bb-messages-body-preview, bb-message-preview", inputs: { body: "body" }, viewQueries: [{ propertyName: "iframeRef", first: true, predicate: ["iframeRef"], descendants: true, static: true }], ngImport: i0__namespace, template: "<iframe\n  #iframeRef\n  title=\"Message preview\"\n  i18n-title=\"Message preview title@@messages.message-preview-title\"\n  [style.visibility]=\"isVisible ? 'visible' : 'hidden'\"\n  (load)=\"iframeLoad()\"\n></iframe>\n" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesBodyPreviewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-body-preview, bb-message-preview',
                        templateUrl: './messages-preview.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { body: [{
                    type: i0.Input
                }], iframeRef: [{
                    type: i0.ViewChild,
                    args: ['iframeRef', { static: true }]
                }] } });

    /**
     * @name MessagesConversationMessageComponent
     *
     * @description
     * Component displays conversation message.
     */
    var MessagesConversationMessageComponent = /** @class */ (function () {
        function MessagesConversationMessageComponent() {
            /**
             * Toggles message collapse (text-truncate and replacement HTML-tags)
             */
            this.opened = false;
            /**
             * Is message body contains html
             */
            this.isBodyHtml = false;
            /**
             * The unique ID HTML property for each widget component instance.
             */
            this.messageId = "messages-conversation-message-" + MessagesConversationMessageComponent.counter++;
            this.replaceTags = function (content) { return (content ? content.replace(/<[^>]+>/gi, '') : ''); };
        }
        Object.defineProperty(MessagesConversationMessageComponent.prototype, "message", {
            /**
             * Text of the message, could have HTML-tags
             */
            set: function (value) {
                this.messageText = value;
                this.messageTextWithoutTags = value ? this.replaceTags(value) : undefined;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Toggle message on click
         *
         * @param event Click event
         */
        MessagesConversationMessageComponent.prototype.onClick = function (event) {
            var selection = document.getSelection();
            if ((selection && selection.toString().length) ||
                (event.target.tagName.toLowerCase() === 'a' && event.target.href)) {
                return;
            }
            this.opened = !this.opened;
        };
        /**
         * Get sender template
         *
         * @returns Sender template
         */
        MessagesConversationMessageComponent.prototype.getSenderTemplate = function () {
            if (this.sender instanceof i0.TemplateRef) {
                return this.sender;
            }
            return this.defaultSenderTemplate;
        };
        MessagesConversationMessageComponent.prototype.ngOnInit = function () {
            if (typeof this.messageText === 'undefined') {
                throw new Error("\"message\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        return MessagesConversationMessageComponent;
    }());
    MessagesConversationMessageComponent.counter = 0;
    MessagesConversationMessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationMessageComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesConversationMessageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationMessageComponent, selector: "bb-messages-conversation-message, bb-message-ui", inputs: { created: "created", message: "message", sender: "sender", opened: "opened", attachments: "attachments", isBodyHtml: "isBodyHtml" }, viewQueries: [{ propertyName: "defaultSenderTemplate", first: true, predicate: ["defaultSenderTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<ng-container bbMessagesConversationMessageCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbMessagesConversationMessageCustomizable let-host>\n  <div\n    class=\"bb-message-ui card-body\"\n    [attr.role]=\"host.isBodyHtml ? null : 'button'\"\n    (bbKeyboardClick)=\"!host.isBodyHtml && host.onClick($event)\"\n    tabindex=\"0\"\n    data-role=\"conversation-message\"\n    [attr.aria-controls]=\"host.messageId\"\n    [attr.aria-expanded]=\"host.opened\"\n  >\n    <div class=\"bb-stack bb-block--md\">\n      <span class=\"sr-only\" i18n=\"Message from|Before sender name@@messages.messagesCommon.messageFrom\"\n        >Message from</span\n      >\n      <span class=\"bb-text-semi-bold\" data-role=\"sender-name\">\n        <ng-container *ngTemplateOutlet=\"host.getSenderTemplate()\"></ng-container>\n      </span>\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <div class=\"bb-stack\">\n          <bb-icon-ui\n            class=\"bb-stack__item bb-text-support\"\n            *ngIf=\"host.attachments && host.attachments.length\"\n            name=\"attachment\"\n            data-role=\"messages-attachment\"\n            aria-label=\"Contains attachments\"\n            i18n-aria-label=\"\n              Contains attachments|Message contains attachments@@messages.messagesCommon.containsAttachments\"\n            bbTooltip=\"Contains attachments\"\n            i18n-bbTooltip=\"@@messages.messagesCommon.containsAttachments\"\n            triggers=\"hover\"\n            placement=\"top\"\n            container=\"body\"\n          ></bb-icon-ui>\n          <div *ngIf=\"host.created\" data-role=\"messages-creation-date\">\n            <span\n              class=\"sr-only\"\n              i18n=\"Date|'Date:' word that precedes message creation date@@messages.messagesCommon.labelForDate\"\n              >Date:</span\n            >\n            <span>{{ host.created | date: 'fullDate' }} </span>\n            <span\n              i18n=\"At|To bridge date and time (Monday March 28th, 2018 at 9:15 AM)@@messages.messagesCommon.createdAt\"\n              >at</span\n            >\n            <span> {{ host.created | date: 'shortTime' }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\" [ngClass]=\"{ 'col-md-8': !host.opened }\" [attr.id]=\"host.messageId\">\n        <div\n          data-role=\"message-content\"\n          *ngIf=\"!host.isBodyHtml; else htmlViewTmpl\"\n          [innerHtml]=\"host.opened ? host.messageText : host.messageTextWithoutTags\"\n          [ngClass]=\"{\n            'text-truncate': !host.opened,\n            'bb-block--md': host.opened && host.attachments\n          }\"\n        ></div>\n        <div data-role=\"attachments-wrapper\" class=\"row\" *ngIf=\"host.opened && host.attachments?.length\">\n          <div class=\"col-4\" *ngFor=\"let attachment of host.attachments\">\n            <bb-file-attachment-ui\n              [name]=\"attachment.filename\"\n              [size]=\"attachment.size\"\n              [fileContent]=\"attachment.linkStream\"\n            ></bb-file-attachment-ui>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #htmlViewTmpl>\n    <bb-messages-body-preview [body]=\"host.messageText\"></bb-messages-body-preview>\n  </ng-template>\n</ng-template>\n\n<ng-template #defaultSenderTemplate>\n  {{ sender }}\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0__namespace.forwardRef(function () { return MessagesBodyPreviewComponent; }), selector: "bb-messages-body-preview, bb-message-preview", inputs: ["body"] }], directives: [{ type: i0__namespace.forwardRef(function () { return MessagesConversationMessageCustomizableDirective; }), selector: "[bbMessagesConversationMessageCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace$2.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i0__namespace.forwardRef(function () { return i2__namespace$1.DatePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationMessageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-conversation-message, bb-message-ui',
                        templateUrl: './messages-conversation-message.component.html',
                    }]
            }], propDecorators: { created: [{
                    type: i0.Input
                }], message: [{
                    type: i0.Input,
                    args: ['message']
                }], sender: [{
                    type: i0.Input
                }], opened: [{
                    type: i0.Input
                }], attachments: [{
                    type: i0.Input
                }], isBodyHtml: [{
                    type: i0.Input
                }], defaultSenderTemplate: [{
                    type: i0.ViewChild,
                    args: ['defaultSenderTemplate', { static: true }]
                }] } });
    var MessagesConversationMessageCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesConversationMessageCustomizableDirective, _super);
        function MessagesConversationMessageCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesConversationMessageCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesConversationMessageCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationMessageCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesConversationMessageCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationMessageCustomizableDirective, selector: "[bbMessagesConversationMessageCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationMessageCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesConversationMessageCustomizable]',
                    }]
            }] });

    var MessagesBodyPreviewModule = /** @class */ (function () {
        function MessagesBodyPreviewModule() {
        }
        return MessagesBodyPreviewModule;
    }());
    MessagesBodyPreviewModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesBodyPreviewModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesBodyPreviewModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesBodyPreviewModule, declarations: [MessagesBodyPreviewComponent], imports: [i2.CommonModule], exports: [MessagesBodyPreviewComponent] });
    MessagesBodyPreviewModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesBodyPreviewModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesBodyPreviewModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [MessagesBodyPreviewComponent],
                        exports: [MessagesBodyPreviewComponent],
                        imports: [i2.CommonModule],
                    }]
            }] });

    var uiModules$4 = [i5.FileAttachmentModule, i1$4.IconModule, i4$2.KeyboardClickModule, i6.TooltipModule];
    var innerModules$1 = [MessagesBodyPreviewModule];
    var MessagesConversationMessageModule = /** @class */ (function () {
        function MessagesConversationMessageModule() {
        }
        return MessagesConversationMessageModule;
    }());
    MessagesConversationMessageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationMessageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesConversationMessageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationMessageModule, declarations: [MessagesConversationMessageComponent, MessagesConversationMessageCustomizableDirective], imports: [i2.CommonModule, i5.FileAttachmentModule, i1$4.IconModule, i4$2.KeyboardClickModule, i6.TooltipModule, MessagesBodyPreviewModule], exports: [MessagesConversationMessageComponent,
            MessagesConversationMessageCustomizableDirective, i5.FileAttachmentModule, i1$4.IconModule, i4$2.KeyboardClickModule, i6.TooltipModule, MessagesBodyPreviewModule] });
    MessagesConversationMessageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationMessageModule, imports: [__spreadArray(__spreadArray([i2.CommonModule], __read(uiModules$4)), __read(innerModules$1)), i5.FileAttachmentModule, i1$4.IconModule, i4$2.KeyboardClickModule, i6.TooltipModule, MessagesBodyPreviewModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationMessageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [MessagesConversationMessageComponent, MessagesConversationMessageCustomizableDirective],
                        exports: __spreadArray(__spreadArray([
                            MessagesConversationMessageComponent,
                            MessagesConversationMessageCustomizableDirective
                        ], __read(uiModules$4)), __read(innerModules$1)),
                        imports: __spreadArray(__spreadArray([i2.CommonModule], __read(uiModules$4)), __read(innerModules$1)),
                    }]
            }] });

    var shareReplayOnce = function () { return function (source) {
        // use refCount: true to prevent memory leaks issue with shareReplay
        return source.pipe(operators.shareReplay({ refCount: true, bufferSize: 1 }));
    }; };

    var UnknownIdError = /** @class */ (function (_super) {
        __extends(UnknownIdError, _super);
        function UnknownIdError() {
            var _newTarget = this.constructor;
            var _this = _super.call(this) || this;
            _this.name = 'UnknownIdError';
            Object.setPrototypeOf(_this, _newTarget.prototype);
            return _this;
        }
        return UnknownIdError;
    }(Error));

    var MessagesRequestErrorComponent = /** @class */ (function () {
        function MessagesRequestErrorComponent() {
        }
        Object.defineProperty(MessagesRequestErrorComponent.prototype, "error", {
            /**
             * The input that set errorKind from `MessagesErrorKind`
             */
            set: function (error) {
                if (error instanceof UnknownIdError) {
                    this.errorKind = 'MessagesRequestUnknownIdError';
                }
                else if (error.error instanceof ErrorEvent) {
                    this.errorKind = 'MessagesRequestUnknownError';
                }
                else {
                    switch (error.status) {
                        case 0:
                            this.errorKind = 'MessagesRequestConnectivityError';
                            break;
                        case 400:
                            this.errorKind = 'MessagesRequestBadRequest';
                            break;
                        case 401:
                            this.errorKind = 'MessagesRequestAccessDenied';
                            break;
                        case 403:
                            this.errorKind = 'MessagesRequestAccessDenied';
                            break;
                        case 404:
                            this.errorKind = 'MessagesRequestNotFound';
                            break;
                        default:
                            this.errorKind = 'MessagesRequestUnknownError';
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        return MessagesRequestErrorComponent;
    }());
    MessagesRequestErrorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesRequestErrorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesRequestErrorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesRequestErrorComponent, selector: "bb-messages-request-error, bb-messages-request-error-ui", inputs: { error: "error" }, ngImport: i0__namespace, template: "<ng-container [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'MessagesRequestAccessDenied'\"\n    class=\"bb-state-container\"\n    title=\"No Permissions\"\n    i18n-title=\"\n      No Permissions|Error state label when user does not have permissions to view messages\n      request@@messages-request.error.accessDenied.title\"\n    subtitle=\"You can't access this widget. Contact system administrator for details.\"\n    i18n-subtitle=\"\n      No permissions subtitle|Error state subtitle label when user does not have permissions to view messages\n      requests@@messages-request.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"\n    iconSize=\"xxl\"\n  ></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'MessagesRequestConnectivityError'\"\n    class=\"bb-state-container\"\n    title=\"Page couldn\u2019t load\"\n    i18n-title=\"\n      Page couldn\u2019t load|Empty state label when there is connectivity error@@messages-request.error.connectivity.title\"\n    subtitle=\"Try to reload the page or contact the system administrator.\"\n    i18n-subtitle=\"\n      Not found error subtitle|Empty state subtitle label when there is connectivity\n      error@@messages-request.error.connectivity.subtitle\"\n    iconModifier=\"error-outline\"\n    iconSize=\"xxl\"\n  ></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'MessagesRequestUnknownIdError'\"\n    class=\"bb-state-container\"\n    title=\"Unknown ID\"\n    i18n-title=\"Unknown ID|Empty state label when there is unknown ID error@@messages-request.error.unknown-id.title\"\n    subtitle=\"There is no ID passed with URL. For more information contact your system administrator.\"\n    i18n-subtitle=\"\n      Unknown ID Error subtitle|Empty state subtitle label when there is unknown id\n      error@@messages-request.error.unknown-id.subtitle\"\n    iconModifier=\"error\"\n  ></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'MessagesRequestNotFound'\"\n    class=\"bb-state-container\"\n    title=\"This item cannot be found\"\n    i18n-title=\"\n      This item cannot be found|Empty state label when there is not found error@@messages-request.error.not-found.title\"\n    subtitle=\"It may have been deleted. For more info please contact your bank.\"\n    i18n-subtitle=\"\n      Not found error subtitle|Empty state subtitle label when there is not found\n      error@@messages-request.error.not-found.subtitle\"\n    iconModifier=\"error-outline\"\n    iconSize=\"xxl\"\n  ></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    class=\"bb-state-container\"\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected\n      error@@messages-request.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected error subtitle|Empty state subtitle label when there is an unexpected\n      error@@messages-request.error.unexpected.subtitle\"\n    iconModifier=\"error-outline\"\n    iconSize=\"xxl\"\n  ></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1__namespace$6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2__namespace$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesRequestErrorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-request-error, bb-messages-request-error-ui',
                        templateUrl: './messages-request-error.component.html',
                    }]
            }], propDecorators: { error: [{
                    type: i0.Input
                }] } });

    var uiModules$3 = [i1$6.EmptyStateModule];
    var MessagesRequestErrorModule = /** @class */ (function () {
        function MessagesRequestErrorModule() {
        }
        return MessagesRequestErrorModule;
    }());
    MessagesRequestErrorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesRequestErrorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesRequestErrorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesRequestErrorModule, declarations: [MessagesRequestErrorComponent], imports: [i2.CommonModule, i1$6.EmptyStateModule], exports: [MessagesRequestErrorComponent, i1$6.EmptyStateModule] });
    MessagesRequestErrorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesRequestErrorModule, imports: [__spreadArray([i2.CommonModule], __read(uiModules$3)), i1$6.EmptyStateModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesRequestErrorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [MessagesRequestErrorComponent],
                        exports: __spreadArray([MessagesRequestErrorComponent], __read(uiModules$3)),
                        imports: __spreadArray([i2.CommonModule], __read(uiModules$3)),
                    }]
            }] });

    var MessagesClientUploadAttachmentsService = /** @class */ (function () {
        function MessagesClientUploadAttachmentsService(service) {
            this.service = service;
        }
        /**
         * Delete attachments by ids
         *
         * @param ids Attachments list
         * @returns Delete attachments stream
         */
        MessagesClientUploadAttachmentsService.prototype.deleteAttachments = function (ids) {
            return this.service.deleteMessageAttachments({ ids: ids });
        };
        /**
         * Upload attachments
         *
         * @param attachment Attachment
         * @returns Post message attachments stream
         */
        MessagesClientUploadAttachmentsService.prototype.uploadAttachment = function (attachment) {
            return this.service.postMessageAttachments({ attachment: attachment });
        };
        return MessagesClientUploadAttachmentsService;
    }());
    MessagesClientUploadAttachmentsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesClientUploadAttachmentsService, deps: [{ token: i1__namespace.MessagecenterHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesClientUploadAttachmentsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesClientUploadAttachmentsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesClientUploadAttachmentsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.MessagecenterHttpService }]; } });

    var DefaultWidgetProperties = {
        createMessageOpenEventName: 'bb.event.messages.create.message.open',
        createMessageClosedEventName: 'bb.event.messages.create.message.close',
        itemsPerPage: 10,
        mailboxType: '',
        customerServiceTitle: 'Customer Service',
        viewType: 'all',
        hideAssignedToColumn: false,
        showMailboxTypes: true,
    };
    var BaseConversationsListPropertiesService = /** @class */ (function () {
        function BaseConversationsListPropertiesService(itemModel) {
            this.itemModel = itemModel;
        }
        Object.defineProperty(BaseConversationsListPropertiesService.prototype, "itemsPerPage", {
            /**
             * Quantity of items to show per page/to add per request, used for Client and Employee widget
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties.itemsPerPage);
                }
                return this.itemModel.property('itemsPerPage', DefaultWidgetProperties.itemsPerPage);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseConversationsListPropertiesService.prototype, "createMessageOpenEventName", {
            /**
             * Event published to open Create message modal widget, used for Client and Employee widget
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties.createMessageOpenEventName);
                }
                return this.itemModel.property('createMessageOpenEventName', DefaultWidgetProperties.createMessageOpenEventName);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseConversationsListPropertiesService.prototype, "createMessageClosedEventName", {
            /**
             * Event published when Create message modal widget was closed,
             * used for Client and Employee widget to update list of conversations
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties.createMessageClosedEventName);
                }
                return this.itemModel.property('createMessageClosedEventName', DefaultWidgetProperties.createMessageClosedEventName);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseConversationsListPropertiesService.prototype, "mailboxType", {
            /**
             * Mailbox type property, used for Client widget
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties.mailboxType);
                }
                return this.itemModel.property('mailboxType', DefaultWidgetProperties.mailboxType);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseConversationsListPropertiesService.prototype, "customerServiceTitle", {
            /**
             * Customer service title, localizable, used for Client widget
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties.customerServiceTitle);
                }
                return this.itemModel.property('customerServiceTitle', DefaultWidgetProperties.customerServiceTitle);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseConversationsListPropertiesService.prototype, "viewType", {
            /**
             * View type for conversations list (all, assigned, unassigned, resolved, my-resolved, drafts),
             * used for Employee widget
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties.viewType);
                }
                return this.itemModel.property('viewType', DefaultWidgetProperties.viewType);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseConversationsListPropertiesService.prototype, "hideAssignedToColumn", {
            /**
             * Property to hide `Assigned to` column, used for Employee widget
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties.hideAssignedToColumn);
                }
                return this.itemModel.property('hideAssignedToColumn', DefaultWidgetProperties.hideAssignedToColumn);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseConversationsListPropertiesService.prototype, "showMailboxTypes", {
            /**
             * Property to show mailbox types (inbox and sent), used for Employee widget
             */
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(DefaultWidgetProperties.showMailboxTypes);
                }
                return this.itemModel.property('showMailboxTypes', DefaultWidgetProperties.showMailboxTypes);
            },
            enumerable: false,
            configurable: true
        });
        return BaseConversationsListPropertiesService;
    }());
    BaseConversationsListPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListPropertiesService, deps: [{ token: i1__namespace$1.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BaseConversationsListPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var BaseConversationsListWidgetComponent = /** @class */ (function () {
        function BaseConversationsListWidgetComponent(shared, activatedRoute, properties) {
            this.shared = shared;
            this.activatedRoute = activatedRoute;
            this.properties = properties;
            /**
             * Emits id of the selected conversation
             */
            this.conversationId = new i0.EventEmitter();
            /**
             * Emits filter object to keep widget filter params
             */
            this.filter = new i0.EventEmitter();
            /**
             * The `Unsubscribe` subject.
             */
            this.unsubscribe$ = new rxjs.Subject();
            /**
             * The loading parameter indicating the starting page for the data to be loaded from.
             */
            this.from$ = new rxjs.BehaviorSubject(0);
            /**
             * The parameters object with the starting page number.
             */
            this.filterParams = {
                from: 0,
            };
            /**
             * The parameters subject with applied filters.
             */
            this.filterParams$ = this.getRouteParam(this.activatedRoute, 'filter').pipe(operators.takeUntil(this.unsubscribe$), operators.map(function (params) {
                if (params) {
                    try {
                        return JSON.parse(params);
                    }
                    catch (err) { }
                }
                return {};
            }));
        }
        /**
         * The method to change the page and load conversations corresponding to that page.
         *
         * @param page Page number
         */
        BaseConversationsListWidgetComponent.prototype.onPageChange = function (page) {
            if (page || page === 0) {
                this.from$.next(page);
                this.filterParams.from = page;
                this.emitFilterParams(this.filterParams);
            }
        };
        /**
         * The method to switch to another mailbox type and load corresponding data.
         *
         * @param mailbox Mailbox type
         */
        BaseConversationsListWidgetComponent.prototype.onMailboxApply = function (mailbox) {
            this.from$.next(0);
            this.filterParams = this.setMailboxTypedParams(mailbox);
            this.emitFilterParams(this.filterParams);
        };
        /**
         * The method to fetch conversation list according to the applied filter parameters.
         *
         * @param obj Filter params
         */
        BaseConversationsListWidgetComponent.prototype.onFilterFormApply = function (obj) {
            this.from$.next(0);
            this.filterParams = this.setFilterFormParams(obj);
            this.emitFilterParams(this.filterParams);
        };
        /**
         * The method to open the draft thread.
         *
         * @param draft Draft data
         */
        BaseConversationsListWidgetComponent.prototype.openDraft = function (draft) {
            var _this = this;
            if ('conversationId' in draft) {
                this.conversationId.emit(draft.conversationId);
            }
            else {
                this.properties.createMessageOpenEventName
                    .pipe(operators.takeUntil(this.unsubscribe$))
                    .subscribe(function (eventName) { return _this.shared.eventBusPublish(eventName, { draftId: draft.id }); });
            }
        };
        /**
         * The method to open the conversation thread.
         *
         * @param conversation Conversation data
         */
        BaseConversationsListWidgetComponent.prototype.openConversation = function (conversation) {
            this.conversationId.emit(typeof conversation === 'string' ? conversation : conversation.id);
        };
        /**
         * The method to open the error notification.
         *
         * @param error Http error response
         */
        BaseConversationsListWidgetComponent.prototype.showErrorNotification = function (error) {
            this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
            return rxjs.EMPTY;
        };
        BaseConversationsListWidgetComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        /**
         * The method to emit the filtering parameters.
         *
         * @param filterParams Filter params data
         */
        BaseConversationsListWidgetComponent.prototype.emitFilterParams = function (filterParams) {
            var params = JSON.stringify(filterParams);
            this.filter.emit(params);
        };
        BaseConversationsListWidgetComponent.prototype.setMailboxTypedParams = function (mailboxType) {
            return {
                from: 0,
                mailboxType: mailboxType,
            };
        };
        BaseConversationsListWidgetComponent.prototype.setFilterFormParams = function (filterParams) {
            return Object.assign({ from: 0 }, filterParams);
        };
        BaseConversationsListWidgetComponent.prototype.getRouteParam = function (route, param) {
            var paramValue = route.paramMap.pipe(operators.pluck('params', param));
            if (!route.parent) {
                return paramValue;
            }
            return rxjs.combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(operators.map(function (params) { return params[0] || params[1]; }));
        };
        return BaseConversationsListWidgetComponent;
    }());
    BaseConversationsListWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListWidgetComponent, deps: [{ token: SharedMethodsService }, { token: i2__namespace$2.ActivatedRoute }, { token: BaseConversationsListPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BaseConversationsListWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationsListWidgetComponent, selector: "ng-component", outputs: { conversationId: "conversationId", filter: "filter" }, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                    }]
            }], ctorParameters: function () { return [{ type: SharedMethodsService }, { type: i2__namespace$2.ActivatedRoute }, { type: BaseConversationsListPropertiesService }]; }, propDecorators: { conversationId: [{
                    type: i0.Output
                }], filter: [{
                    type: i0.Output
                }] } });

    var FilterService = /** @class */ (function () {
        function FilterService() {
        }
        return FilterService;
    }());

    var FilterConversationsListComponent = /** @class */ (function () {
        function FilterConversationsListComponent(service, fb, shared) {
            this.service = service;
            this.fb = fb;
            this.shared = shared;
            /**
             * Configs for topic selector placeholder
             */
            this.topicPlaceholderConfig = topicPlaceholderConfig;
            /**
             * Event emitter for apply action
             */
            this.apply = new i0.EventEmitter();
            /**
             * Event emitter for clear action
             */
            this.clear = new i0.EventEmitter();
            /**
             * The filters form reference.
             */
            this.filterForm = this.fb.group({
                date: [''],
                topic: [''],
                user: [''],
            });
            /**
             * The applied flag.
             */
            this.applied = false;
            /**
             * The opened flag.
             */
            this.opened = false;
            /**
             * The stream with the topic list.
             */
            this.topics$ = new rxjs.Subject();
            /**
             * The method to get the typeahead options.
             */
            this.typeaheadOptions = {
                ngbTypeahead: this.searchUsers.bind(this),
                resultFormatter: function (item) { return item.fullName; },
                inputFormatter: function (item) { return item.fullName; },
            };
            this.filterParams$ = new rxjs.BehaviorSubject({});
            this.unsubscribe$ = new rxjs.Subject();
        }
        Object.defineProperty(FilterConversationsListComponent.prototype, "filterParams", {
            /**
             * Observable filter params to init component with
             */
            set: function (value) {
                if (value && this.checkFilterParams(this.filterParams$.getValue(), value)) {
                    this.applied = true;
                    this.filterParams$.next(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        FilterConversationsListComponent.prototype.ngOnInit = function () {
            var _this = this;
            rxjs.combineLatest([this.filterParams$, this.topics$])
                .pipe(operators.switchMap(function (_a) {
                var _b = __read(_a, 2), params = _b[0], topics = _b[1];
                var topicId = params.topicId, endDate = params.endDate, startDate = params.startDate, userId = params.userId;
                if (topics && topicId) {
                    _this.filterForm.controls['topic'].setValue(topics.find(function (topic) { return topic.id === topicId; }));
                }
                if (startDate && endDate) {
                    _this.filterForm.controls['date'].setValue({
                        from: new Date(startDate).toISOString(),
                        to: new Date(endDate).toISOString(),
                    });
                }
                if (userId && _this.service.getUserById) {
                    return _this.service
                        .getUserById(userId)
                        .pipe(operators.tap(function (user) { return user && _this.filterForm.controls['user'].setValue(Object.assign(Object.assign({}, user), { id: params.userId })); }));
                }
                return rxjs.EMPTY;
            }), operators.takeUntil(this.unsubscribe$))
                .subscribe();
            this.service
                .getTopics()
                .pipe(operators.take(1))
                .subscribe(function (topics) {
                _this.topics$.next(topics);
                _this.topics$.complete();
            });
        };
        /**
         * The method to submit the form.
         */
        FilterConversationsListComponent.prototype.submit = function () {
            var applyObject = this.convertToFilterParams(this.filterForm);
            this.applied = !!Object.keys(applyObject).length;
            this.opened = false;
            this.apply.emit(applyObject);
        };
        /**
         * The method to reset the form.
         *
         * @param apply Flag to submit or not the form
         */
        FilterConversationsListComponent.prototype.reset = function (apply) {
            var _this = this;
            if (apply === void 0) { apply = false; }
            if (apply) {
                this.filterForm.valueChanges.pipe(operators.take(1)).subscribe(function () {
                    _this.submit();
                });
            }
            this.filterForm.reset();
        };
        /**
         * The method to open or close the filter form.
         */
        FilterConversationsListComponent.prototype.triggerOpened = function () {
            this.opened = !this.opened;
        };
        FilterConversationsListComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        FilterConversationsListComponent.prototype.convertToFilterParams = function (form) {
            return Object.assign(Object.assign(Object.assign({}, (form.value.topic && { topicId: form.value.topic.id })), (form.value.user && { userId: form.value.user.id })), (form.value.date && {
                startDate: this.formatDate(form.value.date.from),
                endDate: this.formatDate(form.value.date.to),
            }));
        };
        FilterConversationsListComponent.prototype.formatDate = function (date) {
            var d = new Date(date);
            var year = d.getFullYear();
            var month = d.getMonth() + 1;
            var dt = d.getDate();
            var finalDt = dt < 10 ? "0" + dt : dt.toString();
            var finalMonth = month < 10 ? "0" + month : month.toString();
            return year + "-" + finalMonth + "-" + finalDt;
        };
        FilterConversationsListComponent.prototype.checkFilterParams = function (curr, next) {
            if (!Object.keys(next).length || !(next && (next.userId || next.topicId || (next.startDate && next.endDate)))) {
                return false;
            }
            for (var key in next) {
                if (curr[key] && curr[key] === next[key]) {
                    return false;
                }
            }
            return true;
        };
        FilterConversationsListComponent.prototype.searchUsers = function (text) {
            var _this = this;
            return text.pipe(operators.debounceTime(500), operators.distinctUntilChanged(), operators.switchMap(function (value) {
                if (!_this.service.getUsers || !value.length) {
                    return rxjs.EMPTY;
                }
                else {
                    return _this.service.getUsers(value).pipe(operators.map(function (response) { return response && response.identities; }), operators.catchError(function (err) {
                        _this.shared.openNotification(_this.shared.getErrorMessage(err), 'error');
                        return rxjs.EMPTY;
                    }));
                }
            }));
        };
        return FilterConversationsListComponent;
    }());
    FilterConversationsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: FilterConversationsListComponent, deps: [{ token: FilterService }, { token: i4__namespace.FormBuilder }, { token: SharedMethodsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FilterConversationsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: FilterConversationsListComponent, selector: "bb-messages-filter-conversation-list", inputs: { headerClass: "headerClass", bodyClass: "bodyClass", filterParams: "filterParams" }, outputs: { apply: "apply", clear: "clear" }, ngImport: i0__namespace, template: "<ng-container\n  bbFilterConversationsListCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    topics: topics$ | async\n  }\"\n></ng-container>\n\n<ng-template bbFilterConversationsListCustomizable let-host let-topics=\"context.topics\">\n  <div [ngClass]=\"host.headerClass\" data-role=\"filters-header\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item\">\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            class=\"bb-button-bar__button\"\n            bbButton\n            [color]=\"host.applied ? 'primary' : 'secondary'\"\n            [ngClass]=\"{ active: host.opened }\"\n            (click)=\"host.triggerOpened()\"\n            data-role=\"filter-button\"\n          >\n            <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n            <span\n              *ngIf=\"host.applied; else filtersTextDefault\"\n              i18n=\"\n                Filters applied|Text for filter button if filter was\n                applied@@messages.messagesCommon.conversationsListFilterConversation.filtersAppliedText\"\n              >Filters applied</span\n            >\n          </button>\n          <button\n            class=\"bb-button-bar__button\"\n            bbButton\n            color=\"link\"\n            *ngIf=\"host.applied\"\n            i18n=\"Clear filters@@messages.messagesCommon.conversationsListFilterConversation.clearFilterssButtonText\"\n            (click)=\"host.reset(true)\"\n            data-role=\"clear-header-button\"\n          >\n            Clear filters\n          </button>\n        </div>\n      </div>\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"host.opened\" [ngClass]=\"host.bodyClass\" data-role=\"filters-form-container\">\n    <form [formGroup]=\"host.filterForm\" (submit)=\"host.submit()\">\n      <div class=\"form-row form-group\">\n        <div class=\"col-4\">\n          <bb-dropdown-single-select-ui\n            *ngIf=\"\n              topics?.length\n                ? topicPlaceholderConfig.selectTopicPlaceholder\n                : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n            \"\n            label=\"Topic\"\n            data-role=\"topics\"\n            i18n-label=\"Topic label@@messages.messagesCommon.conversationsListFilterConversation.topicLabel\"\n            [options]=\"topics\"\n            displayAttributePath=\"name\"\n            [attr.placeholder]=\"topicPlaceholder\"\n            [placeholder]=\"topicPlaceholder\"\n            formControlName=\"topic\"\n          ></bb-dropdown-single-select-ui>\n        </div>\n        <div class=\"col-4\">\n          <bb-search-box-ui\n            label=\"Customer\"\n            i18n-label=\"\n              Customer label text@@messages.messagesCommon.conversationsListFilterConversation.customerLabelText\"\n            formControlName=\"user\"\n            placeholder=\"Search by name\"\n            i18n-placeholder=\"\n              Search by name\n              placeholder@@messages.messagesCommon.conversationsListFilterConversation.searchByNamePlaceholderText\"\n            [typeaheadOptions]=\"host.typeaheadOptions\"\n          ></bb-search-box-ui>\n        </div>\n        <div class=\"col-4\">\n          <bb-input-datepicker-ui\n            label=\"Date\"\n            i18n-label=\"Date label text@@messages.messagesCommon.conversationsListFilterConversation.dateLabelText\"\n            formControlName=\"date\"\n            [rangeSelection]=\"true\"\n          ></bb-input-datepicker-ui>\n        </div>\n      </div>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n          i18n=\"Close@@messages.messagesCommon.conversationsListFilterConversation.closeButtonText\"\n          (click)=\"host.triggerOpened()\"\n          data-role=\"close-filter\"\n        >\n          Close\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          i18n=\"Apply@@messages.messagesCommon.conversationsListFilterConversation.applyButtonText\"\n          data-role=\"apply-filter\"\n        >\n          Apply\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          i18n=\"Clear All@@messages.messagesCommon.conversationsListFilterConversation.clearAllButtonText\"\n          (click)=\"host.reset()\"\n          data-role=\"clear-filter\"\n        >\n          Clear All\n        </button>\n      </div>\n    </form>\n  </div>\n\n  <ng-template #filtersTextDefault>\n    <span\n      i18n=\"\n        Filters|Text for filter button if filter was\n        applied@@messages.messagesCommon.conversationsListFilterConversation.filtersText\"\n      >Filters</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i0__namespace.forwardRef(function () { return FilterConversationsListCustomizableDirective; }), selector: "[bbFilterConversationsListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i18__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace$1.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: FilterConversationsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-filter-conversation-list',
                        templateUrl: './filter-conversations-list.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: FilterService }, { type: i4__namespace.FormBuilder }, { type: SharedMethodsService }]; }, propDecorators: { headerClass: [{
                    type: i0.Input
                }], bodyClass: [{
                    type: i0.Input
                }], filterParams: [{
                    type: i0.Input
                }], apply: [{
                    type: i0.Output
                }], clear: [{
                    type: i0.Output
                }] } });
    var FilterConversationsListCustomizableDirective = /** @class */ (function (_super) {
        __extends(FilterConversationsListCustomizableDirective, _super);
        function FilterConversationsListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FilterConversationsListCustomizableDirective;
    }(i1$1.BbTemplate));
    FilterConversationsListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: FilterConversationsListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FilterConversationsListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: FilterConversationsListCustomizableDirective, selector: "[bbFilterConversationsListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: FilterConversationsListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbFilterConversationsListCustomizable]',
                    }]
            }] });

    var components$2 = [BaseConversationsListWidgetComponent, FilterConversationsListComponent];
    var directives$2 = [FilterConversationsListCustomizableDirective];
    var uiModules$2 = [i18.ButtonModule, i1$4.IconModule, i8.DropdownSingleSelectModule, i10.SearchBoxModule, i7.InputDatepickerModule];
    var BaseConversationsListWidgetModule = /** @class */ (function () {
        function BaseConversationsListWidgetModule() {
        }
        return BaseConversationsListWidgetModule;
    }());
    BaseConversationsListWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BaseConversationsListWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListWidgetModule, declarations: [BaseConversationsListWidgetComponent, FilterConversationsListComponent, FilterConversationsListCustomizableDirective], imports: [i2.CommonModule, i4.ReactiveFormsModule, i18.ButtonModule, i1$4.IconModule, i8.DropdownSingleSelectModule, i10.SearchBoxModule, i7.InputDatepickerModule], exports: [i18.ButtonModule, i1$4.IconModule, i8.DropdownSingleSelectModule, i10.SearchBoxModule, i7.InputDatepickerModule, BaseConversationsListWidgetComponent, FilterConversationsListComponent, FilterConversationsListCustomizableDirective] });
    BaseConversationsListWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListWidgetModule, imports: [__spreadArray([i2.CommonModule, i4.ReactiveFormsModule], __read(uiModules$2)), i18.ButtonModule, i1$4.IconModule, i8.DropdownSingleSelectModule, i10.SearchBoxModule, i7.InputDatepickerModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationsListWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([i2.CommonModule, i4.ReactiveFormsModule], __read(uiModules$2)),
                        declarations: __spreadArray(__spreadArray([], __read(components$2)), __read(directives$2)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(uiModules$2)), __read(components$2)), __read(directives$2)),
                    }]
            }] });

    exports.MailboxType = void 0;
    (function (MailboxType) {
        MailboxType["inbox"] = "inbox";
        MailboxType["outbox"] = "outbox";
        MailboxType["all"] = "all";
    })(exports.MailboxType || (exports.MailboxType = {}));

    exports.ReadUnreadStatusType = void 0;
    (function (ReadUnreadStatusType) {
        ReadUnreadStatusType["READ"] = "READ";
        ReadUnreadStatusType["UNREAD"] = "UNREAD";
    })(exports.ReadUnreadStatusType || (exports.ReadUnreadStatusType = {}));

    var AbstractBaseMessagesConversationThreadService = /** @class */ (function () {
        function AbstractBaseMessagesConversationThreadService() {
        }
        /**
         * Map attachments
         *
         * @param attachments Attachments list
         * @returns Mapped attachments list with linkStream update
         */
        AbstractBaseMessagesConversationThreadService.prototype.attachmentsMapper = function (attachments) {
            var _this = this;
            return attachments.map(function (attachment) { return (Object.assign(Object.assign({}, attachment), { linkStream: _this.downloadFile(attachment.id) })); });
        };
        return AbstractBaseMessagesConversationThreadService;
    }());

    var BaseConversationThreadDraftsComponent = /** @class */ (function () {
        function BaseConversationThreadDraftsComponent(apiThreadService, shared) {
            this.apiThreadService = apiThreadService;
            this.shared = shared;
        }
        BaseConversationThreadDraftsComponent.prototype.saveDraft = function (conversationId, body) {
            var _this = this;
            return rxjs.of(this.draftResponse).pipe(operators.switchMap(function (draft) { return (draft ? _this.updateDraft(conversationId, body) : _this.createDraft(conversationId, body)); }), operators.tap(function () { return _this.shared.openNotification(_this.draftSaveSuccessTpl, 'success'); }), operators.catchError(function (error) {
                _this.shared.openNotification(_this.shared.getErrorMessage(error), 'error');
                return rxjs.EMPTY;
            }));
        };
        BaseConversationThreadDraftsComponent.prototype.deleteDraft = function () {
            var _this = this;
            if (this.apiThreadService.deleteDraft && this.draftResponse) {
                return this.apiThreadService.deleteDraft(this.draftResponse.id).pipe(operators.tap(function () {
                    _this.draftResponse = undefined;
                    _this.shared.openNotification(_this.draftDeleteSuccessTpl, 'success');
                }), operators.catchError(function (error) {
                    _this.shared.openNotification(_this.shared.getErrorMessage(error), 'error');
                    return rxjs.EMPTY;
                }));
            }
            return rxjs.of(undefined);
        };
        BaseConversationThreadDraftsComponent.prototype.createDraft = function (conversationId, body) {
            var _this = this;
            if (this.apiThreadService.createDraft) {
                return this.apiThreadService.createDraft(conversationId, body).pipe(operators.tap(function (res) { return (_this.draftResponse = {
                    id: res ? res.id : '',
                    createdAt: new Date().toString(),
                }); }));
            }
            return rxjs.of(undefined);
        };
        BaseConversationThreadDraftsComponent.prototype.updateDraft = function (conversationId, body) {
            if (this.apiThreadService.updateDraft) {
                return this.apiThreadService.updateDraft(conversationId, body);
            }
            return rxjs.of(undefined);
        };
        return BaseConversationThreadDraftsComponent;
    }());
    BaseConversationThreadDraftsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationThreadDraftsComponent, deps: [{ token: AbstractBaseMessagesConversationThreadService }, { token: SharedMethodsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BaseConversationThreadDraftsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationThreadDraftsComponent, selector: "ng-component", viewQueries: [{ propertyName: "draftSaveSuccessTpl", first: true, predicate: ["draftSaveSuccess"], descendants: true }, { propertyName: "draftDeleteSuccessTpl", first: true, predicate: ["draftDeleteSuccess"], descendants: true }], ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationThreadDraftsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                    }]
            }], ctorParameters: function () { return [{ type: AbstractBaseMessagesConversationThreadService }, { type: SharedMethodsService }]; }, propDecorators: { draftSaveSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['draftSaveSuccess']
                }], draftDeleteSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['draftDeleteSuccess']
                }] } });

    var BaseConversationThreadComponent = /** @class */ (function (_super) {
        __extends(BaseConversationThreadComponent, _super);
        function BaseConversationThreadComponent(apiThreadService, activatedRoute, shared, confirmModalService, uploadService, encodingService) {
            var _this = _super.call(this, apiThreadService, shared) || this;
            _this.apiThreadService = apiThreadService;
            _this.activatedRoute = activatedRoute;
            _this.shared = shared;
            _this.confirmModalService = confirmModalService;
            _this.uploadService = uploadService;
            _this.encodingService = encodingService;
            /**
             * Event emitted when this thread should be closed or navigation should be changed to previous or another widget
             */
            _this.back = new i0.EventEmitter();
            /**
             * The conversation thread ID.
             */
            _this.id = "base-conversation-thread-component-" + BaseConversationThreadComponent.counter++;
            /**
             * The manipulation types enum (`resolve`, `unresolve`, `assign`, `unassign`, `discard`,
             * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`).
             */
            _this.manipulationTypes = exports.ManipulationType;
            _this.unsubscribe = new rxjs.Subject();
            _this.replyPressed = new rxjs.Subject();
            _this.conversationId$ = new rxjs.BehaviorSubject(undefined);
            /**
             * The loading flag for the data fetched through the HTTP request.
             */
            _this.loading = true;
            /**
             * The flag defining if the reply is opened or not.
             */
            _this.replyOpened = false;
            /**
             * The flag defining if the topic alert is closed or not.
             */
            _this.topicAlertClosed = false;
            /**
             * The modal for action confirmation.
             */
            _this.confirmationModal = {
                opened: false,
                type: undefined,
            };
            /**
             * The reply form.
             */
            _this.replyFormGroup = new i4.FormGroup({
                body: new i4.FormControl(),
                attachments: new i4.FormControl(),
            });
            /**
             * The form loading flag.
             */
            _this.formLoading = false;
            _this.conversationId = _this.getConversationId();
            _this.markAsReadUnreadSubject = new rxjs.BehaviorSubject(exports.ReadUnreadStatusType.READ);
            _this.markAsReadUnreadStream = _this.getMarkAsReadUnreadStream();
            return _this;
        }
        Object.defineProperty(BaseConversationThreadComponent.prototype, "selectedConversationId", {
            /**
             * Selected conversation id setter
             */
            set: function (value) {
                this.conversationId$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseConversationThreadComponent.prototype, "conversationIdValue", {
            /**
             * Conversation id getter
             */
            get: function () {
                return this.conversationId$.getValue();
            },
            enumerable: false,
            configurable: true
        });
        BaseConversationThreadComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe.next();
            this.unsubscribe.complete();
        };
        /**
         * The method to save the draft.
         */
        BaseConversationThreadComponent.prototype.onSaveDraft = function () {
            if (this.replyFormGroup.valid) {
                this.saveDraft(this.conversationIdValue ? this.conversationIdValue : '', this.convertFormValue())
                    .pipe(operators.takeUntil(this.unsubscribe))
                    .subscribe();
            }
        };
        /**
         * The method that is used for component initialization to subscribe for the read-unread status and
         * to toggle the reply form updates.
         */
        BaseConversationThreadComponent.prototype.initSubscriptions = function () {
            var _this = this;
            this.markAsReadUnreadStream.pipe(operators.takeUntil(this.unsubscribe)).subscribe();
            this.confirmModalService.emitToggleModal$.pipe(operators.takeUntil(this.unsubscribe)).subscribe(function (_b) {
                var opened = _b.opened, type = _b.type;
                _this.confirmationModal = { opened: opened, type: type };
                if (!opened && (type === exports.ManipulationType.discard || type === exports.ManipulationType.discardDraft)) {
                    _this.toggleReplyForm(false);
                }
            });
        };
        /**
         * The method to navigate back.
         */
        BaseConversationThreadComponent.prototype.navigateBack = function () {
            this.back.emit();
        };
        /**
         * The method to toggle the reply form.
         *
         * @param flag Toggle status
         */
        BaseConversationThreadComponent.prototype.toggleReplyForm = function (flag) {
            var _this = this;
            this.replyOpened = flag;
            if (!flag) {
                this.uploadService.reset(true);
                this.replyFormGroup.reset();
            }
            else {
                setTimeout(function () { return _this.richTextEditor && _this.richTextEditor.labelClick(); });
            }
        };
        /**
         * The method to submit the reply.
         */
        BaseConversationThreadComponent.prototype.reply = function () {
            this.replyFormGroup.markAsDirty();
            this.replyFormGroup.markAllAsTouched();
            if (this.replyFormGroup.valid) {
                this.replyPressed.next(this.convertFormValue());
            }
        };
        /**
         * The method that defines whether the control is valid or not.
         *
         * @param field Field name
         * @returns Is form field valid flag
         */
        BaseConversationThreadComponent.prototype.isInvalidControl = function (field) {
            var control = this.getControl(field);
            return !!control && control.touched && control.invalid;
        };
        /**
         * The method to get any errors generated by failing validation, or null if there are no errors.
         *
         * @param field Field name
         * @param type Error type
         */
        BaseConversationThreadComponent.prototype.hasError = function (field, type) {
            var control = this.getControl(field);
            return control && control.errors && control.errors[type];
        };
        BaseConversationThreadComponent.prototype.getConversationId = function () {
            var _this = this;
            return this.conversationId$.pipe(operators.switchMap(function (id) {
                if (!id) {
                    _this.errorResponse = new UnknownIdError();
                    return rxjs.EMPTY;
                }
                return rxjs.of(id);
            }), shareReplayOnce());
        };
        BaseConversationThreadComponent.prototype.getMarkAsReadUnreadStream = function () {
            var _this = this;
            return rxjs.combineLatest([this.markAsReadUnreadSubject, this.conversationId]).pipe(operators.switchMap(function (_b) {
                var _c = __read(_b, 2), status = _c[0], conversationId = _c[1];
                return _this.apiThreadService.markConversationsAsReadUnread({ status: status, ids: [conversationId] }).pipe(operators.tap(function () { return status === exports.ReadUnreadStatusType.UNREAD && _this.navigateBack(); }), operators.catchError(function (error) {
                    _this.shared.openNotification(_this.shared.getErrorMessage(error), 'error');
                    return rxjs.EMPTY;
                }));
            }));
        };
        BaseConversationThreadComponent.prototype.convertFormValue = function () {
            var _b = this.replyFormGroup.value, body = _b.body, attachments = _b.attachments;
            return Object.assign({ body: this.encodingService.b64Encode(body) }, ((attachments === null || attachments === void 0 ? void 0 : attachments.length) && { attachments: attachments.map(function (item) { return item.id; }) }));
        };
        BaseConversationThreadComponent.prototype.getControl = function (field) {
            var _a;
            return (_a = this.replyFormGroup) === null || _a === void 0 ? void 0 : _a.controls[field];
        };
        return BaseConversationThreadComponent;
    }(BaseConversationThreadDraftsComponent));
    BaseConversationThreadComponent.counter = 0;
    BaseConversationThreadComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationThreadComponent, deps: [{ token: AbstractBaseMessagesConversationThreadService }, { token: i2__namespace$2.ActivatedRoute }, { token: SharedMethodsService }, { token: MessagesManipulationConfirmModalService }, { token: MessagesUploadAttachmentsService }, { token: MessagesEncodingService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BaseConversationThreadComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationThreadComponent, selector: "ng-component", inputs: { selectedConversationId: "selectedConversationId" }, outputs: { back: "back" }, viewQueries: [{ propertyName: "replySuccessTpl", first: true, predicate: ["conversationReplySuccess,messageReplySuccess"], descendants: true }, { propertyName: "deleteSuccessTpl", first: true, predicate: ["conversationDeleteSuccess,messageDeleteSuccess"], descendants: true }, { propertyName: "richTextEditor", first: true, predicate: ["richTextEditor"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseConversationThreadComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                    }]
            }], ctorParameters: function () { return [{ type: AbstractBaseMessagesConversationThreadService }, { type: i2__namespace$2.ActivatedRoute }, { type: SharedMethodsService }, { type: MessagesManipulationConfirmModalService }, { type: MessagesUploadAttachmentsService }, { type: MessagesEncodingService }]; }, propDecorators: { back: [{
                    type: i0.Output
                }], selectedConversationId: [{
                    type: i0.Input
                }], replySuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['conversationReplySuccess,messageReplySuccess']
                }], deleteSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['conversationDeleteSuccess,messageDeleteSuccess']
                }], richTextEditor: [{
                    type: i0.ViewChild,
                    args: ['richTextEditor']
                }] } });

    var BaseMessagesConversationThreadModule = /** @class */ (function () {
        function BaseMessagesConversationThreadModule() {
        }
        return BaseMessagesConversationThreadModule;
    }());
    BaseMessagesConversationThreadModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseMessagesConversationThreadModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BaseMessagesConversationThreadModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseMessagesConversationThreadModule, declarations: [BaseConversationThreadComponent, BaseConversationThreadDraftsComponent], imports: [i2.CommonModule], exports: [BaseConversationThreadComponent, BaseConversationThreadDraftsComponent] });
    BaseMessagesConversationThreadModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseMessagesConversationThreadModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: BaseMessagesConversationThreadModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [BaseConversationThreadComponent, BaseConversationThreadDraftsComponent],
                        imports: [i2.CommonModule],
                        exports: [BaseConversationThreadComponent, BaseConversationThreadDraftsComponent],
                    }]
            }] });

    exports.EmployeeMailoutStatus = void 0;
    (function (EmployeeMailoutStatus) {
        EmployeeMailoutStatus["Created"] = "CREATED";
        EmployeeMailoutStatus["Preparing"] = "PREPARING";
        EmployeeMailoutStatus["Ready"] = "READY";
        EmployeeMailoutStatus["Processing"] = "PROCESSING";
        EmployeeMailoutStatus["Done"] = "DONE";
        EmployeeMailoutStatus["Error"] = "ERROR";
        EmployeeMailoutStatus["Cancelled"] = "CANCELLED";
        EmployeeMailoutStatus["WIP"] = "CANCELLATION_IN_PROCESS";
    })(exports.EmployeeMailoutStatus || (exports.EmployeeMailoutStatus = {}));

    var MessagesMailoutStatusComponent = /** @class */ (function () {
        function MessagesMailoutStatusComponent() {
            /**
             * Input that toggles between shortened and full status title text
             */
            this.shortTitle = false;
            /**
             * Mailout statuses enum: Created = `CREATED`, Preparing = `PREPARING`, Ready = `READY`,
             * Processing = `PROCESSING`, Done = `DONE`, Error = `ERROR`, Cancelled = `CANCELLED`, WIP = `CANCELLATION_IN_PROCESS`
             */
            this.employeeMailoutStatus = exports.EmployeeMailoutStatus;
        }
        return MessagesMailoutStatusComponent;
    }());
    MessagesMailoutStatusComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesMailoutStatusComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesMailoutStatusComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesMailoutStatusComponent, selector: "bb-messages-mailout-status", inputs: { mailoutStatus: "mailoutStatus", shortTitle: "shortTitle" }, ngImport: i0__namespace, template: "<ng-container bbMessagesMailoutStatusCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbMessagesMailoutStatusCustomizable let-hostRef>\n  <ng-container [ngSwitch]=\"hostRef.mailoutStatus\">\n    <ng-container *ngSwitchCase=\"hostRef.employeeMailoutStatus.Done\">\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"Com\"\n        i18n-text=\"\n          Com|Badge text if mailout status is 'Completed' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.completed.short\"\n        color=\"success\"\n        bbTooltip=\"Completed\"\n        i18n-bbTooltip=\"\n          Completed|Tooltip text if mailout status is 'Completed'@@messages.mailoutStatus.statusTooltip.completed\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n      </bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Completed\"\n          i18n-text=\"\n            Completed|Badge text if mailout status is 'Completed'@@messages.mailoutStatus.statusBadge.completed\"\n          color=\"success\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"hostRef.employeeMailoutStatus.Error\">\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"Err\"\n        i18n-text=\"\n          Err|Badge text if mailout status is 'Error' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.error.short\"\n        color=\"warning\"\n        bbTooltip=\"Error\"\n        i18n-bbTooltip=\"Error|Tooltip text if mailout status is 'Error'@@messages.mailoutStatus.statusTooltip.error\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n      </bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Error\"\n          i18n-text=\"Error|Badge text if mailout status is 'Error'@@messages.mailoutStatus.statusBadge.error\"\n          color=\"warning\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"hostRef.employeeMailoutStatus.Cancelled\">\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"Del\"\n        i18n-text=\"\n          Del|Badge text if mailout status is 'Deleted' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.deleted.short\"\n        color=\"danger\"\n        bbTooltip=\"Deleted\"\n        i18n-bbTooltip=\"\n          Deleted|Tooltip text if mailout status is 'Deleted'@@messages.mailoutStatus.statusTooltip.deleted\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n      </bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Deleted\"\n          i18n-text=\"Deleted|Badge text if mailout status is 'Deleted'@@messages.mailoutStatus.statusBadge.deleted\"\n          color=\"danger\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"hostRef.employeeMailoutStatus.WIP\">\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"WIP\"\n        i18n-text=\"\n          WIP|Badge text if mailout status is 'Deletion in progress' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.wip.short\"\n        color=\"danger\"\n        bbTooltip=\"Deletion in progress\"\n        i18n-bbTooltip=\"\n          Deletion in progress|Tooltip text if mailout status is 'Deletion in\n          progress'@@messages.mailoutStatus.statusTooltip.wip\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n      </bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Deletion in progress\"\n          i18n-text=\"\n            Deletion in progress|Badge text if mailout status is 'Deletion in\n            progress'@@messages.mailoutStatus.statusBadge.wip\"\n          color=\"danger\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchDefault>\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"Pro\"\n        i18n-text=\"\n          Pro|Badge text if mailout status is 'Processing' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.processing.short\"\n        color=\"primary\"\n        bbTooltip=\"Processing\"\n        i18n-bbTooltip=\"\n          Processing|Tooltip text if mailout status is 'Processing'@@messages.mailoutStatus.statusTooltip.processing\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      ></bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Processing\"\n          i18n-text=\"\n            Processing|Badge text if mailout status is 'Processing'@@messages.mailoutStatus.statusBadge.processing\"\n          color=\"primary\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$7.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i0__namespace.forwardRef(function () { return MessagesMailoutStatusCustomizableDirective; }), selector: "[bbMessagesMailoutStatusCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesMailoutStatusComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-mailout-status',
                        templateUrl: './messages-mailout-status.component.html',
                    }]
            }], propDecorators: { mailoutStatus: [{
                    type: i0.Input
                }], shortTitle: [{
                    type: i0.Input
                }] } });
    var MessagesMailoutStatusCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesMailoutStatusCustomizableDirective, _super);
        function MessagesMailoutStatusCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesMailoutStatusCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesMailoutStatusCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesMailoutStatusCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesMailoutStatusCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesMailoutStatusCustomizableDirective, selector: "[bbMessagesMailoutStatusCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesMailoutStatusCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesMailoutStatusCustomizable]',
                    }]
            }] });

    var components$1 = [MessagesMailoutStatusComponent];
    var directives$1 = [MessagesMailoutStatusCustomizableDirective];
    var uiModules$1 = [i1$7.BadgeModule, i6.TooltipModule];
    var MessagesMailoutStatusModule = /** @class */ (function () {
        function MessagesMailoutStatusModule() {
        }
        return MessagesMailoutStatusModule;
    }());
    MessagesMailoutStatusModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesMailoutStatusModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesMailoutStatusModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesMailoutStatusModule, declarations: [MessagesMailoutStatusComponent, MessagesMailoutStatusCustomizableDirective], imports: [i2.CommonModule, i1$7.BadgeModule, i6.TooltipModule], exports: [MessagesMailoutStatusComponent, MessagesMailoutStatusCustomizableDirective, i1$7.BadgeModule, i6.TooltipModule] });
    MessagesMailoutStatusModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesMailoutStatusModule, imports: [__spreadArray([i2.CommonModule], __read(uiModules$1)), i1$7.BadgeModule, i6.TooltipModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesMailoutStatusModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray(__spreadArray([], __read(components$1)), __read(directives$1)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components$1)), __read(directives$1)), __read(uiModules$1)),
                        imports: __spreadArray([i2.CommonModule], __read(uiModules$1)),
                    }]
            }] });

    exports.EmployeeMailoutStatusLabels = void 0;
    (function (EmployeeMailoutStatusLabels) {
        EmployeeMailoutStatusLabels["CREATED"] = "Processing";
        EmployeeMailoutStatusLabels["PREPARING"] = "Processing";
        EmployeeMailoutStatusLabels["READY"] = "Processing";
        EmployeeMailoutStatusLabels["PROCESSING"] = "Processing";
        EmployeeMailoutStatusLabels["DONE"] = "Completed";
        EmployeeMailoutStatusLabels["ERROR"] = "Error";
        EmployeeMailoutStatusLabels["CANCELLED"] = "Deleted";
        EmployeeMailoutStatusLabels["CANCELLATION_IN_PROCESS"] = "Deletion in progress";
    })(exports.EmployeeMailoutStatusLabels || (exports.EmployeeMailoutStatusLabels = {}));

    var MessagesEmployeeMailoutReviewService = /** @class */ (function () {
        function MessagesEmployeeMailoutReviewService(mailoutService) {
            this.mailoutService = mailoutService;
        }
        /**
         * Create mailout
         *
         * @param bodyRequest Create mailout request body
         * @returns Create mailout stream
         */
        MessagesEmployeeMailoutReviewService.prototype.createMailout = function (bodyRequest) {
            return this.mailoutService.postMailout({ mailoutPostRequestBody: bodyRequest });
        };
        /**
         * Sanitize message body
         *
         * @param message Message body
         * @returns Mailout preview response stream
         */
        MessagesEmployeeMailoutReviewService.prototype.sanitizeMessageBody = function (message) {
            return this.mailoutService.postMailoutPreview({ mailoutPreviewRequestBody: { body: message } });
        };
        return MessagesEmployeeMailoutReviewService;
    }());
    MessagesEmployeeMailoutReviewService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewService, deps: [{ token: i1__namespace.MailoutHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesEmployeeMailoutReviewService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.MailoutHttpService }]; } });

    var MessagesEmployeeMailoutReviewComponent = /** @class */ (function () {
        function MessagesEmployeeMailoutReviewComponent(encodingService, dataService, confirmModalService, sharedService) {
            this.encodingService = encodingService;
            this.dataService = dataService;
            this.confirmModalService = confirmModalService;
            this.sharedService = sharedService;
            /**
             * The cancel mailout output.
             */
            this.cancel = new i0.EventEmitter();
            /**
             * The confirm operation output.
             */
            this.confirm = new i0.EventEmitter();
            /**
             * The edit mailout output.
             */
            this.edit = new i0.EventEmitter();
            /**
             * The sanitize error flag.
             */
            this.sanitizeError = false;
            /**
             * The sanitize loading flag.
             */
            this.sanitizeLoading = false;
            /**
             * The manipulation types enum: `resolve`, `unresolve`, `assign`, `unassign`, `discard`,
             * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`.
             */
            this.manipulationTypes = exports.ManipulationType;
            /**
             * The confirmation modal model.
             */
            this.confirmationModal$ = this.confirmModalService.emitToggleModal$;
        }
        MessagesEmployeeMailoutReviewComponent.prototype.ngOnInit = function () {
            if (this.mailout) {
                this.sanitizedBody$ = this.sanitizeBody(this.encodingService.b64Encode(this.mailout.body || ''));
            }
        };
        MessagesEmployeeMailoutReviewComponent.prototype.sanitizeBody = function (body) {
            var _this = this;
            this.sanitizeLoading = true;
            return this.dataService.sanitizeMessageBody(body).pipe(operators.map(function (data) { return data && _this.encodingService.b64Decode(data.body); }), operators.catchError(function () {
                _this.sanitizeError = true;
                return rxjs.EMPTY;
            }), operators.finalize(function () { return (_this.sanitizeLoading = false); }));
        };
        /**
         * The method to switch from the preview to the editing state.
         */
        MessagesEmployeeMailoutReviewComponent.prototype.onEdit = function () {
            this.edit.emit();
        };
        /**
         * The method to discard the modal.
         *
         * @param discardParam Should open modal flag
         */
        MessagesEmployeeMailoutReviewComponent.prototype.onDiscardModal = function (discardParam) {
            this.confirmModalService.toggleModal(discardParam, (discardParam && this.manipulationTypes.discardPreview) || undefined);
        };
        /**
         * The method to confirm the discard action.
         */
        MessagesEmployeeMailoutReviewComponent.prototype.onConfirmModal = function () {
            this.confirmModalService.toggleModal(false);
            this.cancel.emit();
        };
        /**
         * The method to save the mailout.
         *
         * @param employeeCreateMailoutFormModel Create mailout form model data
         */
        MessagesEmployeeMailoutReviewComponent.prototype.createMailout = function (_a) {
            var _this = this;
            var body = _a.body, subject = _a.subject, topic = _a.topic, attachments = _a.attachments, notDeletable = _a.notDeletable, recipientsDataId = _a.recipientsDataId, template = _a.template, important = _a.important, rest = __rest(_a, ["body", "subject", "topic", "attachments", "notDeletable", "recipientsDataId", "template", "important"]);
            var finalValue = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, rest), { subject: '', topic: '', body: '', deletable: !notDeletable, important: !!important, recipientsData: {
                    id: recipientsDataId[0].id,
                } }), (body && body.length && { body: this.encodingService.b64Encode(body) })), (subject && subject.length && { subject: subject })), (topic && topic.id && { topic: topic.id })), (attachments && attachments.length && { attachments: attachments.map(function (_b) {
                    var id = _b.id;
                    return id;
                }) }));
            this.dataService.createMailout(finalValue).subscribe(function () { return _this.sharedService.openNotification(_this.mailoutCreateSuccessTpl); }, function () { return _this.sharedService.openNotification(_this.mailoutCreateErrorTpl, 'error'); }, function () { return _this.confirm.emit(); });
        };
        return MessagesEmployeeMailoutReviewComponent;
    }());
    MessagesEmployeeMailoutReviewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewComponent, deps: [{ token: MessagesEncodingService }, { token: MessagesEmployeeMailoutReviewService }, { token: MessagesManipulationConfirmModalService }, { token: SharedMethodsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesEmployeeMailoutReviewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewComponent, selector: "bb-messages-employee-mailout-review", inputs: { mailout: "mailout" }, outputs: { cancel: "cancel", confirm: "confirm", edit: "edit" }, viewQueries: [{ propertyName: "mailoutCreateSuccessTpl", first: true, predicate: ["mailoutCreateSuccess"], descendants: true }, { propertyName: "mailoutCreateErrorTpl", first: true, predicate: ["mailoutCreateError"], descendants: true }], ngImport: i0__namespace, template: "<ng-container\n  bbMessagesEmployeeMailoutReviewCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    sanitizedBody: sanitizedBody$ | async,\n    confirmationModal: confirmationModal$ | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbMessagesEmployeeMailoutReviewCustomizable\n  let-host\n  let-sanitizedBody=\"context.sanitizedBody\"\n  let-confirmationModal=\"context.confirmationModal\"\n>\n  <div class=\"row bb-block bb-block--md\">\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review name label text@@messages.employeeCreateMailout.mailoutReview.name\"\n        data-role=\"mailout-name\"\n      >\n        Name\n      </div>\n      <p data-role=\"mailout-name-content\">{{ host.mailout?.mailoutName }}</p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review topic label text@@messages.employeeCreateMailout.mailoutReview.topic\"\n        data-role=\"mailout-topic\"\n      >\n        Topic\n      </div>\n      <p data-role=\"mailout-topic-content\">{{ host.mailout.topic?.name }}</p>\n    </div>\n    <div class=\"col-12\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review subject label text@@messages.employeeCreateMailout.mailoutReview.subject\"\n        data-role=\"mailout-subject\"\n      >\n        Subject\n      </div>\n      <p data-role=\"mailout-subject-content\">{{ host.mailout.subject }}</p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review read-only label text@@messages.employeeCreateMailout.mailoutReview.readOnly\"\n        data-role=\"mailout-readonly\"\n      >\n        Read only\n      </div>\n      <p\n        i18n=\"Review read-only label text@@messages.employeeCreateMailout.mailoutReview.readOnly.value\"\n        data-role=\"mailout-readonly-content\"\n      >\n        { host.mailout['read-only'] + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review delete label text@@messages.employeeCreateMailout.mailoutReview.delete\"\n        data-role=\"mailout-deletable\"\n      >\n        Users able to delete\n      </div>\n      <p\n        i18n=\"Review delete label text@@messages.employeeCreateMailout.mailoutReview.delete.value\"\n        data-role=\"mailout-deletable-content\"\n      >\n        { !!host.mailout?.notDeletable + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review important label text@@messages.employeeCreateMailout.mailoutReview.important\"\n        data-role=\"mailout-important\"\n      >\n        Important\n      </div>\n      <p\n        i18n=\"Review important label text@@messages.employeeCreateMailout.mailoutReview.important.value\"\n        data-role=\"mailout-important-content\"\n      >\n        { !!host.mailout?.important + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n  </div>\n\n  <div class=\"row bb-block bb-block--md\">\n    <div\n      class=\"col-12 bb-text-semi-bold bb-block bb-block--md\"\n      i18n=\"Review body label text@@messages.employeeCreateMailout.mailoutReview.body\"\n    >\n      Custom HTML body preview\n    </div>\n    <div class=\"col-12\">\n      <ng-container *ngIf=\"!host.sanitizeLoading; else sanitizeLoader\">\n        <ng-container *ngIf=\"!host.sanitizeError; else sanitizeError\">\n          <bb-messages-body-preview [body]=\"sanitizedBody\" data-role=\"mailout-body-preview\"></bb-messages-body-preview>\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n\n  <div class=\"row bb-block bb-block--md\">\n    <div\n      class=\"col-12 bb-text-semi-bold bb-block bb-block--md\"\n      i18n=\"Review attachments label text@@messages.employeeCreateMailout.mailoutReview.attachments\"\n      data-role=\"mailout-attachments\"\n    >\n      Attachments\n    </div>\n    <div class=\"col-auto\" *ngFor=\"let attachment of host.mailout.attachments; index as i\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-file-attachment-ui\n          [name]=\"attachment.filename\"\n          [size]=\"attachment.size\"\n          [loading]=\"attachment.loading\"\n          [disabled]=\"true\"\n          data-role=\"mailout-attachments-content\"\n        ></bb-file-attachment-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <bb-load-button-ui\n      class=\"bb-button-bar__button\"\n      data-role=\"send\"\n      aria-label=\"Send\"\n      i18n-aria-label=\"Send button aria-label text@@messages.employeeCreateMailout.mailoutReview.submitButtonAriaLabel\"\n      i18n=\"Send button text@@messages.employeeCreateMailout.mailoutReview.submitButton\"\n      (click)=\"host.createMailout(host.mailout)\"\n    >\n      Send\n    </bb-load-button-ui>\n    <button\n      bbButton\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n      data-role=\"discard\"\n      aria-label=\"Discard\"\n      i18n-aria-label=\"\n        Discard button aria-label text@@messages.employeeCreateMailout.mailoutReview.discardButtonAriaLabel\"\n      i18n=\"Discard button text@@messages.employeeCreateMailout.mailoutReview.discardButton\"\n      (click)=\"host.onDiscardModal(true)\"\n    >\n      Discard\n    </button>\n    <button\n      bbButton\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n      data-role=\"back\"\n      aria-label=\"Back to edit\"\n      i18n-aria-label=\"\n        Back to edit button aria-label text@@messages.employeeCreateMailout.mailoutReview.editButtonAriaLabel\"\n      i18n=\"Back to edit button text@@messages.employeeCreateMailout.mailoutReview.editButton\"\n      (click)=\"host.onEdit(host.mailout)\"\n    >\n      Back to edit\n    </button>\n  </div>\n\n  <ng-template #sanitizeError>\n    <bb-alert-ui\n      data-role=\"sanitize-error\"\n      title=\"We couldn't generate preview. Please contact support for more information\"\n      modifier=\"warning\"\n      [dismissible]=\"false\"\n    ></bb-alert-ui>\n  </ng-template>\n\n  <ng-template #sanitizeLoader>\n    <bb-loading-indicator-ui data-role=\"sanitize-loading\" loaderSize=\"md\" text=\"Loading...\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"confirmationModal.opened\"\n    [type]=\"confirmationModal.type\"\n    (cancel)=\"host.onDiscardModal(false)\"\n    (confirm)=\"host.onConfirmModal()\"\n    data-role=\"discard-modal\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #mailoutCreateSuccess>\n  <ng-container bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable [bbHostRef]=\"this\"></ng-container>\n</ng-template>\n\n<ng-template bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      Your mailout has been successfully sent.|Text of successful mailout\n      create@@messages.employeeCreateMailout.mailoutReview.messageSuccessCompose\"\n    >Your mailout has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #mailoutCreateError>\n  <ng-container bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable [bbHostRef]=\"this\"></ng-container>\n</ng-template>\n\n<ng-template bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      There is an error sending mailout.|Text of failed mailout\n      create@@messages.employeeCreateMailout.mailoutReview.messageErrorCompose\"\n    >There is an error sending mailout.</span\n  >\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return MessagesBodyPreviewComponent; }), selector: "bb-messages-body-preview, bb-message-preview", inputs: ["body"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0__namespace.forwardRef(function () { return i15__namespace.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0__namespace.forwardRef(function () { return MessagesEmployeeMailoutReviewCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i18__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]" }, { type: i0__namespace.forwardRef(function () { return MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]" }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace$1.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-employee-mailout-review',
                        templateUrl: './employee-mailout-review.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: MessagesEncodingService }, { type: MessagesEmployeeMailoutReviewService }, { type: MessagesManipulationConfirmModalService }, { type: SharedMethodsService }]; }, propDecorators: { mailout: [{
                    type: i0.Input
                }], cancel: [{
                    type: i0.Output
                }], confirm: [{
                    type: i0.Output
                }], edit: [{
                    type: i0.Output
                }], mailoutCreateSuccessTpl: [{
                    type: i0.ViewChild,
                    args: ['mailoutCreateSuccess']
                }], mailoutCreateErrorTpl: [{
                    type: i0.ViewChild,
                    args: ['mailoutCreateError']
                }] } });
    var MessagesEmployeeMailoutReviewCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesEmployeeMailoutReviewCustomizableDirective, _super);
        function MessagesEmployeeMailoutReviewCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesEmployeeMailoutReviewCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesEmployeeMailoutReviewCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesEmployeeMailoutReviewCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesEmployeeMailoutReviewCustomizable]',
                    }]
            }] });
    var MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, _super);
        function MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]',
                    }]
            }] });
    var MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, _super);
        function MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]',
                    }]
            }] });

    var components = [MessagesEmployeeMailoutReviewComponent];
    var directives = [
        MessagesEmployeeMailoutReviewCustomizableDirective,
        MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective,
        MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective,
    ];
    var uiModules = [i18.ButtonModule, i5.FileAttachmentModule, i15.LoadButtonModule, i8$1.AlertModule, i9$1.LoadingIndicatorModule];
    var innerModules = [MessagesBodyPreviewModule, MessagesManipulationConfirmModalModule];
    var MessagesEmployeeMailoutReviewModule = /** @class */ (function () {
        function MessagesEmployeeMailoutReviewModule() {
        }
        return MessagesEmployeeMailoutReviewModule;
    }());
    MessagesEmployeeMailoutReviewModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesEmployeeMailoutReviewModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewModule, declarations: [MessagesEmployeeMailoutReviewComponent, MessagesEmployeeMailoutReviewCustomizableDirective,
            MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective,
            MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective], imports: [i2.CommonModule, i18.ButtonModule, i5.FileAttachmentModule, i15.LoadButtonModule, i8$1.AlertModule, i9$1.LoadingIndicatorModule, MessagesBodyPreviewModule, MessagesManipulationConfirmModalModule], exports: [MessagesEmployeeMailoutReviewComponent, MessagesEmployeeMailoutReviewCustomizableDirective,
            MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective,
            MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, i18.ButtonModule, i5.FileAttachmentModule, i15.LoadButtonModule, i8$1.AlertModule, i9$1.LoadingIndicatorModule, MessagesBodyPreviewModule, MessagesManipulationConfirmModalModule] });
    MessagesEmployeeMailoutReviewModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewModule, providers: [
            MessagesEncodingService,
            MessagesEmployeeMailoutReviewService,
            MessagesManipulationConfirmModalService,
            SharedMethodsService,
        ], imports: [__spreadArray(__spreadArray([i2.CommonModule], __read(uiModules)), __read(innerModules)), i18.ButtonModule, i5.FileAttachmentModule, i15.LoadButtonModule, i8$1.AlertModule, i9$1.LoadingIndicatorModule, MessagesBodyPreviewModule, MessagesManipulationConfirmModalModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesEmployeeMailoutReviewModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i2.CommonModule], __read(uiModules)), __read(innerModules)),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        providers: [
                            MessagesEncodingService,
                            MessagesEmployeeMailoutReviewService,
                            MessagesManipulationConfirmModalService,
                            SharedMethodsService,
                        ],
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(uiModules)), __read(innerModules)),
                    }]
            }] });

    // General

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AbstractBaseMessagesConversationThreadService = AbstractBaseMessagesConversationThreadService;
    exports.BaseConversationThreadComponent = BaseConversationThreadComponent;
    exports.BaseConversationsListPropertiesService = BaseConversationsListPropertiesService;
    exports.BaseConversationsListWidgetComponent = BaseConversationsListWidgetComponent;
    exports.BaseConversationsListWidgetModule = BaseConversationsListWidgetModule;
    exports.BaseCreateMessageFormComponent = BaseCreateMessageFormComponent;
    exports.BaseCreateMessageFormModule = BaseCreateMessageFormModule;
    exports.BaseCreateMessageFormService = BaseCreateMessageFormService;
    exports.BaseCreateMessageModalComponent = BaseCreateMessageModalComponent;
    exports.BaseCreateMessageModalModule = BaseCreateMessageModalModule;
    exports.BaseCreateMessageModalPropertiesService = BaseCreateMessageModalPropertiesService;
    exports.BaseMessagesConversationThreadModule = BaseMessagesConversationThreadModule;
    exports.BaseModalComponent = BaseModalComponent;
    exports.BaseUploadAttachmentsService = BaseUploadAttachmentsService;
    exports.DefaultWidgetProperties = DefaultWidgetProperties;
    exports.EmployeeCreateMailoutFormModule = EmployeeCreateMailoutFormModule;
    exports.EmployeeCreateMessageFormModule = EmployeeCreateMessageFormModule;
    exports.FilterService = FilterService;
    exports.MessagesClientUploadAttachmentsService = MessagesClientUploadAttachmentsService;
    exports.MessagesConversationMessageComponent = MessagesConversationMessageComponent;
    exports.MessagesConversationMessageModule = MessagesConversationMessageModule;
    exports.MessagesEmployeeConversationCountersModule = MessagesEmployeeConversationCountersModule;
    exports.MessagesEmployeeConversationCountersService = MessagesEmployeeConversationCountersService;
    exports.MessagesEmployeeMailoutReviewComponent = MessagesEmployeeMailoutReviewComponent;
    exports.MessagesEmployeeMailoutReviewModule = MessagesEmployeeMailoutReviewModule;
    exports.MessagesEmployeeUploadAttachmentsService = MessagesEmployeeUploadAttachmentsService;
    exports.MessagesEncodingService = MessagesEncodingService;
    exports.MessagesMailoutStatusComponent = MessagesMailoutStatusComponent;
    exports.MessagesMailoutStatusModule = MessagesMailoutStatusModule;
    exports.MessagesManipulationConfirmModalModule = MessagesManipulationConfirmModalModule;
    exports.MessagesManipulationConfirmModalService = MessagesManipulationConfirmModalService;
    exports.MessagesRequestErrorComponent = MessagesRequestErrorComponent;
    exports.MessagesRequestErrorModule = MessagesRequestErrorModule;
    exports.MessagesUnreadConversationCountModule = MessagesUnreadConversationCountModule;
    exports.MessagesUnreadConversationCountService = MessagesUnreadConversationCountService;
    exports.MessagesUploadAttachmentsComponent = MessagesUploadAttachmentsComponent;
    exports.MessagesUploadAttachmentsCustomizableDirective = MessagesUploadAttachmentsCustomizableDirective;
    exports.MessagesUploadAttachmentsModule = MessagesUploadAttachmentsModule;
    exports.MessagesUploadAttachmentsService = MessagesUploadAttachmentsService;
    exports.PreventBubbleDownDirective = PreventBubbleDownDirective;
    exports.PreventBubbleDownModule = PreventBubbleDownModule;
    exports.SharedMethodsModule = SharedMethodsModule;
    exports.SharedMethodsService = SharedMethodsService;
    exports.UnknownIdError = UnknownIdError;
    exports.defaultModelObservable = defaultModelObservable;
    exports.getPropertyValue = getPropertyValue;
    exports.modelItemToBoolean = modelItemToBoolean;
    exports.shareReplayOnce = shareReplayOnce;
    exports.snapshot = snapshot;
    exports.topicPlaceholderConfig = topicPlaceholderConfig;
    exports["ӨBaseConversationThreadDraftsComponent"] = BaseConversationThreadDraftsComponent;
    exports["ӨEmployeeCreateMailoutFormComponent"] = EmployeeCreateMailoutFormComponent;
    exports["ӨEmployeeCreateMailoutFormCustomizableDirective"] = EmployeeCreateMailoutFormCustomizableDirective;
    exports["ӨEmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective"] = EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective;
    exports["ӨEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective"] = EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective;
    exports["ӨEmployeeCreateMessageFormComponent"] = EmployeeCreateMessageFormComponent;
    exports["ӨEmployeeCreateMessageFormCustomizableDirective"] = EmployeeCreateMessageFormCustomizableDirective;
    exports["ӨFilterConversationsListComponent"] = FilterConversationsListComponent;
    exports["ӨFilterConversationsListCustomizableDirective"] = FilterConversationsListCustomizableDirective;
    exports["ӨMessagesBodyPreviewComponent"] = MessagesBodyPreviewComponent;
    exports["ӨMessagesBodyPreviewModule"] = MessagesBodyPreviewModule;
    exports["ӨMessagesConversationMessageCustomizableDirective"] = MessagesConversationMessageCustomizableDirective;
    exports["ӨMessagesEmployeeMailoutReviewCustomizableDirective"] = MessagesEmployeeMailoutReviewCustomizableDirective;
    exports["ӨMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective"] = MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective;
    exports["ӨMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective"] = MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective;
    exports["ӨMessagesMailoutStatusCustomizableDirective"] = MessagesMailoutStatusCustomizableDirective;
    exports["ӨMessagesManipulationConfirmModalComponent"] = MessagesManipulationConfirmModalComponent;
    exports["ӨMessagesManipulationConfirmModalCustomizableDirective"] = MessagesManipulationConfirmModalCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-messages-common.umd.js.map
