import * as i0 from '@angular/core';
import { Injectable, Directive, HostListener, NgModule, Inject, EventEmitter, Component, Input, Output, ViewChild, Optional, forwardRef, ChangeDetectionStrategy, TemplateRef } from '@angular/core';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$1 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule, BbTemplate } from '@backbase/foundation-ang/core';
import { Subject, merge, of, timer, Observable, BehaviorSubject, EMPTY, combineLatest, defer } from 'rxjs';
import { switchMap, concatMap, map, takeUntil, filter, first, finalize, publishReplay, refCount, tap, take, catchError, debounceTime, distinctUntilChanged, delay, shareReplay, pluck } from 'rxjs/operators';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i1 from '@backbase/messages-v5-http-ang';
import { MessagecenterHttpService, EmployeeHttpService } from '@backbase/messages-v5-http-ang';
import * as i4 from '@angular/forms';
import { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormControl, ReactiveFormsModule, FormGroup } from '@angular/forms';
import * as i1$2 from '@backbase/ui-ang/notification';
import * as i18 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i8 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i12 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i11 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i9 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i15 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i13 from '@backbase/ui-ang/rich-text-editor';
import { RichTextEditorModule } from '@backbase/ui-ang/rich-text-editor';
import * as i10 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i2 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i1$3 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i1$5 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i4$1 from '@backbase/ui-ang/input-file';
import { InputFileModule } from '@backbase/ui-ang/input-file';
import * as i5 from '@backbase/ui-ang/file-attachment';
import { FileAttachmentModule } from '@backbase/ui-ang/file-attachment';
import '@angular/localize/init';
import * as i1$4 from '@backbase/data-ang/user';
import * as i4$2 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import * as i6 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i1$6 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i2$2 from '@angular/router';
import * as i7 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i1$7 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i8$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i9$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import { __rest } from 'tslib';

class MessagesEncodingService {
    /**
     * Message base64 decode
     *
     * @param str Encoded string
     */
    b64Decode(str) {
        return decodeURIComponent(atob(str)
            .split('')
            .map(function (c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        })
            .join(''));
    }
    /**
     * Message base64 encode
     *
     * @param str Decoded string
     */
    b64Encode(str) {
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (_match, p1) {
            return String.fromCharCode(parseInt(p1, 16));
        }));
    }
}
MessagesEncodingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEncodingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MessagesEncodingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEncodingService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEncodingService, decorators: [{
            type: Injectable
        }] });

class PreventBubbleDownDirective {
    onMouseDown($event) {
        $event.preventDefault();
    }
}
PreventBubbleDownDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: PreventBubbleDownDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
PreventBubbleDownDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: PreventBubbleDownDirective, selector: "[bbPreventBubbleDown]", host: { listeners: { "mousedown": "onMouseDown($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: PreventBubbleDownDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPreventBubbleDown]',
                }]
        }], propDecorators: { onMouseDown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }] } });

class PreventBubbleDownModule {
}
PreventBubbleDownModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: PreventBubbleDownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PreventBubbleDownModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: PreventBubbleDownModule, declarations: [PreventBubbleDownDirective], imports: [CommonModule], exports: [PreventBubbleDownDirective] });
PreventBubbleDownModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: PreventBubbleDownModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: PreventBubbleDownModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PreventBubbleDownDirective],
                    imports: [CommonModule],
                    exports: [PreventBubbleDownDirective],
                }]
        }] });

const MessagesToken = 'messages';
const MessagesPollPeriod$1 = 5000;
const bbEventUnreadConversationCountUpdate$1 = 'bb.event.unread-conversation-count.update';
class MessagesUnreadConversationCountService {
    constructor(messagecenterService, pubSub) {
        this.messagecenterService = messagecenterService;
        this.pubSub = pubSub;
        this.resetSubject = new Subject();
        this.subscriptionHandler = this.reset.bind(this);
        this.pubSub.subscribe(bbEventUnreadConversationCountUpdate$1, this.subscriptionHandler);
    }
    /**
     * Conversations count poll source
     */
    source() {
        return () => merge(this.resetSubject, of(undefined)).pipe(switchMap(() => timer(0, MessagesPollPeriod$1).pipe(concatMap(() => this.getUnreadConversationCount()), map(body => ({ token: MessagesToken, count: body ? body.unreadCount : 0 })))));
    }
    /**
     * Get conversations count
     *
     * @returns Get conversations count stream
     */
    getUnreadConversationCount() {
        return this.messagecenterService.getUnreadConversationsCount();
    }
    reset() {
        this.resetSubject.next();
    }
}
MessagesUnreadConversationCountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountService, deps: [{ token: i1.MessagecenterHttpService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesUnreadConversationCountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagecenterHttpService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });

class MessagesUnreadConversationCountModule {
}
MessagesUnreadConversationCountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesUnreadConversationCountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountModule, imports: [CommonModule, i1$1.BackbaseCoreModule] });
MessagesUnreadConversationCountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountModule, providers: [MessagesUnreadConversationCountService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                pipelineProcessors: [
                    {
                        name: 'counters-badge',
                        provider: {
                            provide: MessagesUnreadConversationCountService,
                            useClass: MessagesUnreadConversationCountService,
                            deps: [MessagecenterHttpService, PUBSUB],
                        },
                    },
                ],
            }),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            pipelineProcessors: [
                                {
                                    name: 'counters-badge',
                                    provider: {
                                        provide: MessagesUnreadConversationCountService,
                                        useClass: MessagesUnreadConversationCountService,
                                        deps: [MessagecenterHttpService, PUBSUB],
                                    },
                                },
                            ],
                        }),
                    ],
                    providers: [MessagesUnreadConversationCountService],
                }]
        }] });

const MessagesPollPeriod = 5000;
const bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
class MessagesEmployeeConversationCountersService {
    constructor(service, pubSub) {
        this.service = service;
        this.pubSub = pubSub;
        this.resetSubject = new Subject();
        this.subscriptionHandler = this.reset.bind(this);
        this.pubSub.subscribe(bbEventUnreadConversationCountUpdate, this.subscriptionHandler);
    }
    /**
     * Conversations count poll source
     */
    source() {
        return () => merge(this.resetSubject, of(undefined)).pipe(switchMap(() => timer(0, MessagesPollPeriod).pipe(concatMap(() => this.getConversationCounters()))));
    }
    /**
     * Get conversations count
     *
     * @returns Get conversation counters stream
     */
    getConversationCounters() {
        return this.service.getConversationsCounter();
    }
    reset() {
        this.resetSubject.next();
    }
}
MessagesEmployeeConversationCountersService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersService, deps: [{ token: i1.EmployeeHttpService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesEmployeeConversationCountersService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.EmployeeHttpService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });

class MessagesEmployeeConversationCountersModule {
}
MessagesEmployeeConversationCountersModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesEmployeeConversationCountersModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersModule, imports: [CommonModule, i1$1.BackbaseCoreModule] });
MessagesEmployeeConversationCountersModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersModule, providers: [MessagesEmployeeConversationCountersService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                pipelineProcessors: [
                    {
                        name: 'tab-counters-badge',
                        provider: {
                            provide: MessagesEmployeeConversationCountersService,
                            useClass: MessagesEmployeeConversationCountersService,
                            deps: [EmployeeHttpService, PUBSUB],
                        },
                    },
                ],
            }),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            pipelineProcessors: [
                                {
                                    name: 'tab-counters-badge',
                                    provider: {
                                        provide: MessagesEmployeeConversationCountersService,
                                        useClass: MessagesEmployeeConversationCountersService,
                                        deps: [EmployeeHttpService, PUBSUB],
                                    },
                                },
                            ],
                        }),
                    ],
                    providers: [MessagesEmployeeConversationCountersService],
                }]
        }] });

var ManipulationType;
(function (ManipulationType) {
    ManipulationType["resolve"] = "resolve";
    ManipulationType["unresolve"] = "unresolve";
    ManipulationType["assign"] = "assign";
    ManipulationType["unassign"] = "unassign";
    ManipulationType["discard"] = "discard";
    ManipulationType["discardDraft"] = "discardDraft";
    ManipulationType["discardPreview"] = "discardPreview";
    ManipulationType["deleteTopic"] = "deleteTopic";
    ManipulationType["deleteMailout"] = "deleteMailout";
})(ManipulationType || (ManipulationType = {}));

class SharedMethodsService {
    constructor(notificationService, pubSub) {
        this.notificationService = notificationService;
        this.pubSub = pubSub;
    }
    /**
     * Check is form valid
     *
     * @param form Form object
     * @param prevValue Previous value
     * @returns Is form valid flag
     */
    isFormInvalid(form, prevValue) {
        if (form && form.dirty) {
            const formVal = form.value || {};
            const keys = Object.keys(formVal);
            for (const field of keys) {
                if (prevValue) {
                    if (prevValue[field] !== formVal[field]) {
                        return true;
                    }
                }
                else if (formVal[field]) {
                    return Array.isArray(formVal[field]) ? formVal[field].length > 0 : true;
                }
            }
        }
        return false;
    }
    /**
     * Check if form has value
     *
     * @param form Form object
     * @returns Has form value flag
     */
    hasFormValue(form) {
        const formVal = (form && form.value) || {};
        const keys = Object.keys(formVal);
        for (const field of keys) {
            if (formVal[field]) {
                return Array.isArray(formVal[field]) ? formVal[field].length > 0 : true;
            }
        }
        return false;
    }
    /**
     * Handles a given event
     *
     * @param eventName Event name
     */
    eventBusFactory(eventName) {
        return new Observable(observer => {
            const handler = (data) => observer.next(data);
            this.pubSub.subscribe(eventName, handler);
            return () => {
                this.pubSub.unsubscribe(eventName, handler);
            };
        });
    }
    /**
     * Publish a given event
     *
     * @template T
     * @param eventName Event name
     * @param body Event data
     */
    eventBusPublish(eventName, body) {
        this.pubSub.publish(eventName, body);
    }
    /**
     * Get error message from error body
     *
     * @param error Error value
     * @returns Error message
     */
    getErrorMessage(error) {
        return typeof error !== 'string' ? (error.error && error.error.message) || error.message : error;
    }
    /**
     * Open notification
     *
     * @param header Notification header
     * @param modifier Notification type
     * @param message Notification message
     */
    openNotification(header, modifier = 'success', message = '') {
        if (!header)
            return;
        this.notificationService.showNotification({
            header,
            message,
            modifier,
            dismissible: false,
        });
    }
    /**
     * Map response to take body and total count
     *
     * @template T
     * @param rawData Response data
     * @returns Response body and total count
     */
    processData(rawData) {
        const totalCount = (rawData && parseInt(String(rawData.headers.get('x-total-count')), 10)) || 0;
        return {
            data: (rawData && rawData.body) || [],
            totalCount,
        };
    }
}
SharedMethodsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsService, deps: [{ token: i1$2.NotificationService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
SharedMethodsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.NotificationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });

class MessagesManipulationConfirmModalService {
    constructor(shared) {
        this.shared = shared;
        this.initialModalVal = {
            opened: false,
            type: undefined,
        };
        this.emitToggleModal = new BehaviorSubject(this.initialModalVal);
        /**
         * Toggle modal event emitter
         */
        this.emitToggleModal$ = this.emitToggleModal.asObservable();
    }
    /**
     * Toggle confirm modal
     *
     * @param shouldOpen Should open modal flag
     * @param type Manipulation type
     * @param form Form data
     * @param prevValue Previous value
     */
    toggleModal(shouldOpen, type, form, prevValue) {
        let opened = shouldOpen;
        if (type === ManipulationType.discard) {
            opened = this.shared.isFormInvalid(form, prevValue);
        }
        this.emitToggleModal.next({ opened, type });
    }
}
MessagesManipulationConfirmModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalService, deps: [{ token: SharedMethodsService }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesManipulationConfirmModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: SharedMethodsService }]; } });

class MessagesUploadAttachmentsService {
    constructor() {
        this.reset$ = new Subject();
    }
    reset(discard = false) {
        this.reset$.next(discard);
    }
}
MessagesUploadAttachmentsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MessagesUploadAttachmentsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsService, decorators: [{
            type: Injectable
        }] });

class BaseCreateMessageFormService {
}

class BaseCreateMessageFormComponent {
    constructor(sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService) {
        this.sharedService = sharedService;
        this.confirmModalService = confirmModalService;
        this.cd = cd;
        this.createMessageFormService = createMessageFormService;
        this.fb = fb;
        this.encodingService = encodingService;
        this.uploadService = uploadService;
        /**
         * The event that's fired after confirm button is pressed.
         */
        this.confirm = new EventEmitter();
        /**
         * The event that's fired after cancel button is pressed.
         */
        this.cancel = new EventEmitter();
        this.hostRef = this;
        /**
         * Confirmation modal parameters.
         */
        this.confirmationModal = {
            opened: false,
            type: undefined,
        };
        /**
         * The flag indicating if the form is loading.
         */
        this.formLoading = false;
        this.topics$ = new BehaviorSubject(undefined);
        /**
         * The stream with topics.
         */
        this.topics = this.topics$.asObservable();
        /**
         * The manipulationType enum ( `resolve`, `unresolve`, `assign`, `unassign`, `discard`,
         * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`)
         */
        this.manipulationTypes = ManipulationType;
        this.unsubscribe$ = new Subject();
        this.draftId$ = new BehaviorSubject(undefined);
        this.newMessageFormGroup = this.fb.group({
            topic: ['', Validators.required],
            subject: ['', Validators.required],
            body: ['', Validators.required],
            attachments: [],
        });
    }
    /**
     * Input draft id to get draft and prefill compose form with it
     */
    set draftId(value) {
        this.draftId$.next(value);
    }
    /**
     * The draft ID getter.
     */
    get draftId() {
        return this.draftId$.getValue();
    }
    ngOnInit() {
        if (this.reset) {
            this.reset.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
                this.confirmModalService.toggleModal(true, this.manipulationTypes.discard, this.newMessageFormGroup, this.draftFormValue);
            });
        }
        this.createMessageFormService.getTopics().subscribe(res => {
            this.restoreTopicSelection(res);
            this.topics$.next(res);
        });
        this.draftId$
            .pipe(filter(id => !!(id && id.length)), switchMap(id => this.getDrafts(id)))
            .subscribe();
        this.confirmModalService.emitToggleModal$.pipe(takeUntil(this.unsubscribe$)).subscribe(({ opened, type }) => {
            this.confirmationModal = { opened, type };
            if (!opened && type === ManipulationType.discard) {
                this.onCancel();
            }
            this.cd.detectChanges();
        });
    }
    /**
     * The method to get a simple value from the form.
     *
     * @param simpleFormModel Message data
     */
    getSimpleFormVal({ body, subject, topic, attachments }) {
        return Object.assign(Object.assign(Object.assign(Object.assign({}, (body && body.length && { body: this.encodingService.b64Encode(body) })), (subject && subject.length && { subject })), (topic && topic.id && { topic: topic.id })), (attachments && attachments.length && { attachments: attachments.map(item => item.id) }));
    }
    resetFormOnElementBlur() {
        if (!this.isModalOpen) {
            setTimeout(() => {
                this.newMessageFormGroup.reset();
            }, 0);
        }
    }
    /**
     * The method to create a message.
     *
     * @param value Message data
     */
    createMessage(value) {
        this.formLoading = true;
        this.newMessageFormGroup.disable();
        this.createMessageFormService
            .createMessage(value)
            .pipe(first(), switchMap(() => {
            if (this.createMessageFormService.deleteDraft && this.draftId) {
                return this.createMessageFormService.deleteDraft(this.draftId);
            }
            return of(undefined);
        }), finalize(() => {
            this.formLoading = false;
        }))
            .subscribe(this.responseHandler(this.messageComposeSuccessTpl, this.messageComposeErrorTpl));
    }
    /**
     * The method to save a message as a draft.
     *
     * @param value Draft data
     */
    onSave(value) {
        this.newMessageFormGroup.disable();
        if (this.sharedService.hasFormValue(this.newMessageFormGroup) &&
            this.sharedService.isFormInvalid(this.newMessageFormGroup, this.draftFormValue)) {
            if (this.draftId) {
                this.updateDraft(this.draftId, value);
            }
            else {
                this.saveDraft(value);
            }
        }
        else {
            this.onCancel();
        }
    }
    /**
     * The method to get the draft and prefill the compose form with it.
     *
     * @param id Draft id
     */
    getDrafts(id) {
        if (this.createMessageFormService.getDraft && id) {
            return this.createMessageFormService.getDraft(id).pipe(map(res => {
                const drafts = res || {};
                const formValue = {};
                const topics = this.topics$.getValue();
                for (const [key, value] of Object.entries(drafts)) {
                    formValue[key] = value;
                    if (this.newMessageFormGroup.controls.hasOwnProperty(key)) {
                        formValue[key] = this.handleFormValues(key, value, topics);
                        if (formValue[key]) {
                            this.newMessageFormGroup.controls[key].setValue(formValue[key]);
                        }
                    }
                }
                this.draftFormValue = formValue;
                this.newMessageFormGroup.markAsPristine();
                return res;
            }));
        }
        return EMPTY;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    /**
     * The method to resolve the confirmation modal.
     */
    confirmConfirmationModal() {
        if (this.confirmationModal && this.confirmationModal.type === ManipulationType.discard) {
            this.onCancel();
        }
        this.confirmModalService.toggleModal(false);
    }
    /**
     * The method to cancel the confirmation modal.
     */
    onCancel() {
        this.resetToInit(true);
        this.cancel.emit();
    }
    /**
     * The method to get any errors generated by failing validation, or null if there are no errors.
     *
     * @param field Field name
     * @param type Error type
     */
    hasError(field, type) {
        var _a;
        const control = this.getControl(field);
        return (_a = control === null || control === void 0 ? void 0 : control.errors) === null || _a === void 0 ? void 0 : _a[type];
    }
    /**
     * The method that defines whether the control is valid or not.
     *
     * @param field Field name
     * @returns Is form field valid flag
     */
    isInvalidControl(field) {
        const control = this.getControl(field);
        return !!control && control.touched && control.invalid;
    }
    saveDraft(value) {
        if (this.createMessageFormService.saveDraft) {
            this.createMessageFormService
                .saveDraft(value)
                .pipe(first())
                .subscribe(this.responseHandler(this.messageSaveDraftSuccessTpl, this.messageSaveDraftErrorTpl));
        }
    }
    updateDraft(draftId, value) {
        if (this.createMessageFormService.updateDraft) {
            this.createMessageFormService
                .updateDraft(draftId, value)
                .pipe(first())
                .subscribe(this.responseHandler(this.messageUpdateDraftSuccessTpl, this.messageUpdateDraftErrorTpl));
        }
    }
    handleFormValues(key, value, topics) {
        if (key === 'body') {
            return this.encodingService.b64Decode(value);
        }
        if (key === 'topic' && topics) {
            const existingTopic = topics.find(topic => topic.id === value.id);
            return existingTopic ? existingTopic : '';
        }
        if (key === 'attachments') {
            this.attachments = [...value];
        }
        return value;
    }
    responseHandler(successTpl, errorTpl) {
        return {
            next: res => {
                this.sharedService.openNotification(successTpl ? successTpl : '');
                this.confirm.emit(res && res.id);
            },
            error: error => {
                const errorMessage = this.sharedService.getErrorMessage(error) || errorTpl;
                this.sharedService.openNotification(errorMessage, 'error');
                this.newMessageFormGroup.enable();
            },
            complete: () => this.resetToInit(),
        };
    }
    resetToInit(isFormDiscard = false) {
        this.newMessageFormGroup.enable();
        this.newMessageFormGroup.reset();
        this.draftFormValue = undefined;
        this.uploadService.reset(isFormDiscard);
    }
    getControl(field) {
        return this.newMessageFormGroup && this.newMessageFormGroup.controls[field];
    }
    restoreTopicSelection(topics) {
        topics === null || topics === void 0 ? void 0 : topics.map(topic => {
            var _a, _b;
            if (topic.id === ((_b = (_a = this.newMessageFormGroup.controls['topic']) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.id)) {
                this.newMessageFormGroup.controls['topic'].setValue(topic);
            }
        });
    }
}
BaseCreateMessageFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageFormComponent, deps: [{ token: SharedMethodsService }, { token: MessagesManipulationConfirmModalService }, { token: i0.ChangeDetectorRef }, { token: BaseCreateMessageFormService }, { token: i4.FormBuilder }, { token: MessagesEncodingService }, { token: MessagesUploadAttachmentsService }], target: i0.ɵɵFactoryTarget.Component });
BaseCreateMessageFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseCreateMessageFormComponent, selector: "ng-component", inputs: { reset: "reset", maxAttachmentSize: "maxAttachmentSize", maxMailoutNameLength: "maxMailoutNameLength", maxSubjectLength: "maxSubjectLength", maxMessageLength: "maxMessageLength", isModalOpen: "isModalOpen", draftId: "draftId" }, outputs: { confirm: "confirm", cancel: "cancel" }, providers: [MessagesManipulationConfirmModalService, MessagesUploadAttachmentsService], viewQueries: [{ propertyName: "messageComposeSuccessTpl", first: true, predicate: ["messageComposeSuccess"], descendants: true }, { propertyName: "messageSaveDraftSuccessTpl", first: true, predicate: ["messageSaveDraftSuccess"], descendants: true }, { propertyName: "messageUpdateDraftSuccessTpl", first: true, predicate: ["messageUpdateDraftSuccess"], descendants: true }, { propertyName: "messageComposeErrorTpl", first: true, predicate: ["messageComposeError"], descendants: true }, { propertyName: "messageSaveDraftErrorTpl", first: true, predicate: ["messageSaveDraftError"], descendants: true }, { propertyName: "messageUpdateDraftErrorTpl", first: true, predicate: ["messageUpdateDraftError"], descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageFormComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                    providers: [MessagesManipulationConfirmModalService, MessagesUploadAttachmentsService],
                }]
        }], ctorParameters: function () { return [{ type: SharedMethodsService }, { type: MessagesManipulationConfirmModalService }, { type: i0.ChangeDetectorRef }, { type: BaseCreateMessageFormService }, { type: i4.FormBuilder }, { type: MessagesEncodingService }, { type: MessagesUploadAttachmentsService }]; }, propDecorators: { reset: [{
                type: Input
            }], maxAttachmentSize: [{
                type: Input
            }], maxMailoutNameLength: [{
                type: Input
            }], maxSubjectLength: [{
                type: Input
            }], maxMessageLength: [{
                type: Input
            }], isModalOpen: [{
                type: Input
            }], draftId: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }], messageComposeSuccessTpl: [{
                type: ViewChild,
                args: ['messageComposeSuccess']
            }], messageSaveDraftSuccessTpl: [{
                type: ViewChild,
                args: ['messageSaveDraftSuccess']
            }], messageUpdateDraftSuccessTpl: [{
                type: ViewChild,
                args: ['messageUpdateDraftSuccess']
            }], messageComposeErrorTpl: [{
                type: ViewChild,
                args: ['messageComposeError']
            }], messageSaveDraftErrorTpl: [{
                type: ViewChild,
                args: ['messageSaveDraftError']
            }], messageUpdateDraftErrorTpl: [{
                type: ViewChild,
                args: ['messageUpdateDraftError']
            }] } });

class BaseCreateMessageFormModule {
}
BaseCreateMessageFormModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageFormModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BaseCreateMessageFormModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageFormModule, declarations: [BaseCreateMessageFormComponent], imports: [CommonModule] });
BaseCreateMessageFormModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageFormModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageFormModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [BaseCreateMessageFormComponent],
                    imports: [CommonModule],
                }]
        }] });

function snapshot(source) {
    let result;
    const subscr = source.subscribe((res) => {
        result = res;
    });
    subscr.unsubscribe();
    return result;
}

const getPropertyValue = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));
const defaultModelObservable = (value) => defer(() => of(value)).pipe(publishReplay(1), refCount());

const modelItemToBoolean = (value) => {
    if (typeof value === 'boolean') {
        return value;
    }
    return value.trim() === 'true';
};

const DefaultWidgetProperties$1 = {
    debounceTime: 500,
    maxAttachmentSize: '10',
    maxMailoutNameLength: 255,
    maxSubjectLength: 100,
    maxMessageLength: 300,
    minSearchLength: 1,
    modalHeader: 'New message',
    hideComposeButton: false,
    createMessageOpenEventName: 'bb.event.messages.create.message.open',
    createMessageClosedEventName: 'bb.event.messages.create.message.close',
    senderDisplayName: 'Backbase',
    shouldPreDefineUser: false,
    isPreDefinedUserReadonly: false,
};
class BaseCreateMessageModalPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
    }
    /**
     * Max attachment size
     */
    get maxAttachmentSize() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.maxAttachmentSize);
        }
        return this.itemModel.property('maxAttachmentSize', DefaultWidgetProperties$1.maxAttachmentSize);
    }
    /**
     * Max message length
     */
    get maxMessageLength() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.maxMessageLength);
        }
        return this.itemModel.property('maxMessageLength', DefaultWidgetProperties$1.maxMessageLength);
    }
    /**
     * Max mailout name length
     */
    get maxMailoutNameLength() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.maxMailoutNameLength);
        }
        return this.itemModel.property('maxMailoutNameLength', DefaultWidgetProperties$1.maxMailoutNameLength);
    }
    /**
     * Max subject length
     */
    get maxSubjectLength() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.maxSubjectLength);
        }
        return this.itemModel.property('maxSubjectLength', DefaultWidgetProperties$1.maxSubjectLength);
    }
    /**
     * Modal header
     */
    get modalHeader() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.modalHeader);
        }
        return this.itemModel.property('modalHeader', DefaultWidgetProperties$1.modalHeader);
    }
    /**
     * Debounce time
     */
    get debounceTime() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.debounceTime);
        }
        return this.itemModel.property('debounceTime', DefaultWidgetProperties$1.debounceTime);
    }
    /**
     * Min search length
     */
    get minSearchLength() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.minSearchLength);
        }
        return this.itemModel.property('minSearchLength', DefaultWidgetProperties$1.minSearchLength);
    }
    /**
     * Flag to hide or show compose button
     */
    get hideComposeButton() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.hideComposeButton);
        }
        return this.itemModel.property('hideComposeButton', DefaultWidgetProperties$1.hideComposeButton);
    }
    /**
     * Open event for create message modal
     */
    get createMessageOpenEventName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.createMessageOpenEventName);
        }
        return this.itemModel.property('createMessageOpenEventName', DefaultWidgetProperties$1.createMessageOpenEventName);
    }
    /**
     * Close event for create message modal
     */
    get createMessageClosedEventName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.createMessageClosedEventName);
        }
        return this.itemModel.property('createMessageClosedEventName', DefaultWidgetProperties$1.createMessageClosedEventName);
    }
    /**
     * Flag to show or hide sender name
     */
    get senderDisplayName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.senderDisplayName);
        }
        return this.itemModel.property('senderDisplayName', DefaultWidgetProperties$1.senderDisplayName);
    }
    /**
     * Flag to predefine or not user input
     */
    get shouldPreDefineUser() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.shouldPreDefineUser);
        }
        return this.itemModel.property('shouldPreDefineUser', DefaultWidgetProperties$1.shouldPreDefineUser);
    }
    /**
     * Flag to disable predefined user input
     */
    get isPreDefinedUserReadonly() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties$1.isPreDefinedUserReadonly);
        }
        return this.itemModel.property('isPreDefinedUserReadonly', DefaultWidgetProperties$1.isPreDefinedUserReadonly);
    }
}
BaseCreateMessageModalPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalPropertiesService, deps: [{ token: i1$1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BaseCreateMessageModalPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class BaseCreateMessageModalComponent {
    constructor(properties, shared) {
        this.properties = properties;
        this.shared = shared;
        /**
         * The unique ID HTML property for each component instance.
         */
        this.id = `base-create-message-modal-${BaseCreateMessageModalComponent.counter++}`;
        this.resetSubject = new Subject();
        /**
         * The stream with the form reset triggers.
         */
        this.resetStream = this.resetSubject.asObservable();
        this.hostRef = this;
        /**
         * The flag indicating if the modal is opened or closed.
         */
        this.modalOpened = false;
        /**
         * The modal options.
         */
        this.modalOptions = {
            size: 'md',
            beforeDismiss: () => {
                this.resetSubject.next();
                return false;
            },
        };
        this.maxAttachmentSize$$ = new BehaviorSubject(undefined);
        this.maxMailoutNameLength$$ = new BehaviorSubject(undefined);
        this.maxSubjectLength$$ = new BehaviorSubject(undefined);
        this.maxMessageLength$$ = new BehaviorSubject(undefined);
        this.modalHeader$$ = new BehaviorSubject(undefined);
        this.hideComposeButton$$ = new BehaviorSubject(undefined);
        this.createMessageOpenEventName$$ = new BehaviorSubject(undefined);
        this.createMessageClosedEventName$$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        /**
         * The stream with the maximum name size.
         */
        this.maxMailoutNameLength = getPropertyValue(this.maxMailoutNameLength$$, this.properties.maxMailoutNameLength);
        /**
         * The stream with the maximum subject size.
         */
        this.maxSubjectLength = getPropertyValue(this.maxSubjectLength$$, this.properties.maxSubjectLength);
        /**
         * The stream with the maximum attachment size.
         */
        this.maxAttachmentSize = getPropertyValue(this.maxAttachmentSize$$, this.properties.maxAttachmentSize);
        /**
         * The stream with the maximum message length.
         */
        this.maxMessageLength = getPropertyValue(this.maxMessageLength$$, this.properties.maxMessageLength);
        /**
         * The stream with the modal header text.
         */
        this.modalHeader = getPropertyValue(this.modalHeader$$, this.properties.modalHeader);
        /**
         * The stream with a flag indicating if the Compose button is hidden.
         */
        this.hideComposeButton = getPropertyValue(this.hideComposeButton$$, this.properties.hideComposeButton);
        /**
         * Event published to open Create message modal
         */
        this.createMessageOpenEventName = getPropertyValue(this.createMessageOpenEventName$$, this.properties.createMessageOpenEventName);
        /**
         * Event published when Create message modal widget was closed
         */
        this.createMessageClosedEventName = getPropertyValue(this.createMessageClosedEventName$$, this.properties.createMessageClosedEventName);
        this.createMessageOpenEventName
            .pipe(switchMap(eventName => this.shared.eventBusFactory(eventName)), takeUntil(this.destroy$))
            .subscribe(obj => this.openModal(obj && obj.draftId));
    }
    /**
     * The stream with the maximum attachment size.
     */
    set maxAttachmentSizeValue(value) {
        this.maxAttachmentSize$$.next(String(value));
    }
    /**
     * The stream with the maximum name length.
     */
    set maxMailoutNameLengthValue(value) {
        this.maxMailoutNameLength$$.next(Number(value));
    }
    /**
     * The stream with the maximum subject length.
     */
    set maxSubjectLengthValue(value) {
        this.maxSubjectLength$$.next(Number(value));
    }
    /**
     * The stream with the maximum message length.
     */
    set maxMessageLengthValue(value) {
        this.maxMessageLength$$.next(Number(value));
    }
    /**
     * The stream with the modal header.
     */
    set modalHeaderValue(value) {
        this.modalHeader$$.next(value);
    }
    /**
     * The stream with a flag indicating if the Compose button is hidden.
     */
    set hideComposeButtonValue(value) {
        this.hideComposeButton$$.next(modelItemToBoolean(value));
    }
    /**
     * Event published to open Create message modal
     */
    set createMessageOpenEventNameValue(value) {
        this.createMessageOpenEventName$$.next(value);
    }
    /**
     * Event published when Create message modal widget was closed
     */
    set createMessageClosedEventNameValue(value) {
        this.createMessageClosedEventName$$.next(value);
    }
    /**
     * The method to open the modal.
     *
     * @param id
     */
    openModal(id) {
        this.modalOpened = true;
        this.draftId = id;
    }
    /**
     * The method to close the modal.
     */
    closeModal() {
        this.modalOpened = false;
        const eventName = snapshot(this.createMessageClosedEventName);
        this.shared.eventBusPublish(eventName, {});
        this.draftId = undefined;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
BaseCreateMessageModalComponent.counter = 0;
BaseCreateMessageModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalComponent, deps: [{ token: BaseCreateMessageModalPropertiesService }, { token: SharedMethodsService }], target: i0.ɵɵFactoryTarget.Component });
BaseCreateMessageModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseCreateMessageModalComponent, selector: "ng-component", inputs: { maxAttachmentSizeValue: ["maxAttachmentSize", "maxAttachmentSizeValue"], maxMailoutNameLengthValue: ["maxMailoutNameLength", "maxMailoutNameLengthValue"], maxSubjectLengthValue: ["maxSubjectLength", "maxSubjectLengthValue"], maxMessageLengthValue: ["maxMessageLength", "maxMessageLengthValue"], modalHeaderValue: ["modalHeader", "modalHeaderValue"], hideComposeButtonValue: ["hideComposeButton", "hideComposeButtonValue"], createMessageOpenEventNameValue: ["createMessageOpenEventName", "createMessageOpenEventNameValue"], createMessageClosedEventNameValue: ["createMessageClosedEventName", "createMessageClosedEventNameValue"] }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: BaseCreateMessageModalPropertiesService }, { type: SharedMethodsService }]; }, propDecorators: { maxAttachmentSizeValue: [{
                type: Input,
                args: ['maxAttachmentSize']
            }], maxMailoutNameLengthValue: [{
                type: Input,
                args: ['maxMailoutNameLength']
            }], maxSubjectLengthValue: [{
                type: Input,
                args: ['maxSubjectLength']
            }], maxMessageLengthValue: [{
                type: Input,
                args: ['maxMessageLength']
            }], modalHeaderValue: [{
                type: Input,
                args: ['modalHeader']
            }], hideComposeButtonValue: [{
                type: Input,
                args: ['hideComposeButton']
            }], createMessageOpenEventNameValue: [{
                type: Input,
                args: ['createMessageOpenEventName']
            }], createMessageClosedEventNameValue: [{
                type: Input,
                args: ['createMessageClosedEventName']
            }] } });

class BaseCreateMessageModalModule {
}
BaseCreateMessageModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BaseCreateMessageModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalModule, declarations: [BaseCreateMessageModalComponent], imports: [CommonModule] });
BaseCreateMessageModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [BaseCreateMessageModalComponent],
                }]
        }] });

class BaseModalComponent {
    constructor() {
        /**
         * Input that toggles opening/closing the modal
         */
        this.isOpen = false;
        /**
         * Event emitted when modal was resolved
         */
        this.confirm = new EventEmitter();
        /**
         * Event emitted when modal was dismissed
         */
        this.cancel = new EventEmitter();
        /**
         * The unique ID HTML property for each component instance.
         */
        this.id = `base-modal-component-${BaseModalComponent.counter++}`;
        this.hostRef = this;
    }
    /**
     * The method to reset the form and the cancellation modal.
     */
    onCancel() {
        this.cancel.emit();
    }
    /**
     * The method to confirm the value change.
     *
     * @param value Changed value
     */
    onConfirm(value) {
        this.confirm.emit(value);
    }
}
BaseModalComponent.counter = 0;
BaseModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BaseModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseModalComponent, selector: "ng-component", inputs: { isOpen: "isOpen" }, outputs: { confirm: "confirm", cancel: "cancel" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseModalComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }] } });

class MessagesManipulationConfirmModalComponent extends BaseModalComponent {
    constructor() {
        super();
        /**
         * The `resolve` manipulation type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.resolveType = ManipulationType.resolve;
        /**
         * The unresolve `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.unresolveType = ManipulationType.unresolve;
        /**
         * The assign `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.assignType = ManipulationType.assign;
        /**
         * The unassign `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.unassignType = ManipulationType.unassign;
        /**
         * The discard `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.discardType = ManipulationType.discard;
        /**
         * The discardDraft `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.discardDraftType = ManipulationType.discardDraft;
        /**
         * The discardPreview `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.discardPreviewType = ManipulationType.discardPreview;
        /**
         * The deleteTopicType `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.deleteTopicType = ManipulationType.deleteTopic;
        /**
         * The deleteMailoutType `manipulation` type. Extracted from the `ManipulationType` enum into a separate property
         * to be used in the template for localization purposes.
         */
        this.deleteMailoutType = ManipulationType.deleteMailout;
    }
}
MessagesManipulationConfirmModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MessagesManipulationConfirmModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesManipulationConfirmModalComponent, selector: "bb-messages-manipulation-confirm-modal", inputs: { type: "type" }, usesInheritance: true, ngImport: i0, template: "<ng-container bbMessagesManipulationConfirmModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbMessagesManipulationConfirmModalCustomizable let-host>\n  <bb-modal-ui [isOpen]=\"host.isOpen\" (cancel)=\"host.onCancel()\" aria-describedby=\"manipulation-modal-content\">\n    <div id=\"manipulation-modal-content\">\n      <ng-container [ngSwitch]=\"host.type\">\n        <ng-container *ngSwitchCase=\"host.resolveType\">\n          <ng-container *ngTemplateOutlet=\"resolveConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.unresolveType\">\n          <ng-container *ngTemplateOutlet=\"unresolveConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.assignType\">\n          <ng-container *ngTemplateOutlet=\"assignConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.unassignType\">\n          <ng-container *ngTemplateOutlet=\"unassignConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.discardType\">\n          <ng-container *ngTemplateOutlet=\"discardConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.discardPreviewType\">\n          <ng-container *ngTemplateOutlet=\"discardConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.discardDraftType\">\n          <ng-container *ngTemplateOutlet=\"discardDraftConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.deleteTopicType\">\n          <ng-container *ngTemplateOutlet=\"deleteTopicConfirmTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"host.deleteMailoutType\">\n          <ng-container *ngTemplateOutlet=\"deleteMailoutConfirmTemplate\"></ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <ng-container [ngSwitch]=\"host.type\">\n            <button\n              *ngSwitchCase=\"host.discardType\"\n              bbButton\n              class=\"bb-button-bar__button\"\n              color=\"danger\"\n              data-role=\"discard-manipulation\"\n              (click)=\"host.onConfirm()\"\n            >\n              <span i18n=\"Discard button text@@messages.manipulationConfirmModalComponent.discardButton\">Discard</span>\n            </button>\n            <button\n              *ngSwitchCase=\"host.discardPreviewType\"\n              bbButton\n              class=\"bb-button-bar__button\"\n              color=\"danger\"\n              data-role=\"discard-manipulation\"\n              (click)=\"host.onConfirm()\"\n            >\n              <span i18n=\"Discard button text@@messages.manipulationConfirmModalComponent.discardButton\">Discard</span>\n            </button>\n\n            <button\n              *ngSwitchCase=\"host.discardDraftType\"\n              bbButton\n              class=\"bb-button-bar__button\"\n              color=\"danger\"\n              data-role=\"discard-draft-manipulation\"\n              (click)=\"host.onConfirm()\"\n            >\n              <span i18n=\"Discard draft button text@@messages.manipulationConfirmModalComponent.discardDraftButton\"\n                >Delete</span\n              >\n            </button>\n\n            <ng-container *ngSwitchCase=\"host.deleteTopicType\">\n              <ng-container *ngTemplateOutlet=\"deleteButton\"></ng-container>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"host.deleteMailoutType\">\n              <ng-container *ngTemplateOutlet=\"deleteButton\"></ng-container>\n            </ng-container>\n\n            <button\n              *ngSwitchDefault\n              bbButton\n              class=\"bb-button-bar__button\"\n              data-role=\"confirm-manipulation\"\n              (click)=\"host.onConfirm()\"\n            >\n              <span i18n=\"Submit button text@@messages.manipulationConfirmModalComponent.submitButton\">Submit</span>\n            </button>\n\n            <ng-template #deleteButton>\n              <button\n                bbButton\n                class=\"bb-button-bar__button\"\n                color=\"danger\"\n                data-role=\"delete-manipulation\"\n                (click)=\"host.onConfirm()\"\n              >\n                <span i18n=\"Delete button text@@messages.manipulationConfirmModalComponent.deleteButton\">Delete</span>\n              </button>\n            </ng-template>\n          </ng-container>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"secondary\"\n            data-role=\"cancel-manipulation\"\n            (click)=\"host.onCancel()\"\n          >\n            <span i18n=\"Cancel button text@@messages.manipulationConfirmModalComponent.cancelButton\">Cancel</span>\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <ng-template #resolveConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Mark this conversation as resolved?\"\n          i18n-heading=\"\n            Mark this conversation as\n            resolved?@@messages.manipulationConfirmModalComponent.resolveConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to mark this conversation as\n            resolved?@@messages.manipulationConfirmModalComponent.resolveConfirmTemplate.modalBody\"\n          >Are you sure you want to mark this conversation as resolved?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #unresolveConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Renew this conversation from resolved?\"\n          i18n-heading=\"\n            Renew this conversation from\n            resolved?@@messages.manipulationConfirmModalComponent.unresolveConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to renew this conversation from resolved? This conversation will be automaticaly\n            assigned to you.@@messages.manipulationConfirmModalComponent.unresolveConfirmTemplate.modalBody\"\n          >Are you sure you want to renew this conversation from resolved? This conversation will be automaticaly\n          assigned to you.</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #assignConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Assign conversation?\"\n          i18n-heading=\"\n            Assign conversation?@@messages.manipulationConfirmModalComponent.assignConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to assign this\n            conversation?@@messages.manipulationConfirmModalComponent.assignConfirmTemplate.modalBody\"\n          >Are you sure you want to assign this conversation?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #unassignConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Unassign conversation?\"\n          i18n-heading=\"\n            Unassign conversation?@@messages.manipulationConfirmModalComponent.unassignConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to unassign this\n            conversation?@@messages.manipulationConfirmModalComponent.unassignConfirmTemplate.modalBody\"\n          >Are you sure you want to unassign this conversation?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #discardConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Discard message?\"\n          data-role=\"discard-message-header\"\n          i18n-heading=\"Discard message?@@messages.manipulationConfirmModalComponent.discardConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          data-role=\"discard-message-body\"\n          i18n=\"\n            Are you sure you want to discard this message? All filled data will be\n            lost@@messages.manipulationConfirmModalComponent.discardConfirmTemplate.modalBody\"\n          >Are you sure you want to discard this message? All filled data will be lost</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #discardDraftConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Discard message and delete draft?\"\n          i18n-heading=\"\n            Discard message and delete\n            draft?@@messages.manipulationConfirmModalComponent.discardDraftConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Are you sure you want to discard this message and delete draft? All filled data will be\n            lost@@messages.manipulationConfirmModalComponent.discardDraftConfirmTemplate.modalBody\"\n          >Are you sure you want to discard this message and delete draft? All filled data will be lost</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #deleteTopicConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Delete topic?\"\n          i18n-heading=\"\n            Delete topic?@@messages.manipulationConfirmModalComponent.deleteTopicConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            This action will unsubscribe all users from this topic. Are you sure you want to delete\n            it?@@messages.manipulationConfirmModalComponent.deleteTopicConfirmTemplate.modalBody\"\n          >This action will unsubscribe all users from this topic. Are you sure you want to delete it?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n\n  <ng-template #deleteMailoutConfirmTemplate>\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          heading=\"Delete mailout?\"\n          i18n-heading=\"\n            Delete mailout modal\n            header@@messages.manipulationConfirmModalComponent.deleteMailoutConfirmTemplate.modalHeader\"\n        ></bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          i18n=\"\n            Delete mailout modal body@@messages.manipulationConfirmModalComponent.deleteMailoutConfirmTemplate.modalBody\"\n          >Are you sure to delete a mailout? This action can not be undone.</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$3.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1$3.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i1$3.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i2.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1$3.ModalBodyComponent; }), selector: "bb-modal-body-ui" }], directives: [{ type: i0.forwardRef(function () { return MessagesManipulationConfirmModalCustomizableDirective; }), selector: "[bbMessagesManipulationConfirmModalCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i2$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i1$3.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i18.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i1$3.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i1$3.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-manipulation-confirm-modal',
                    templateUrl: './messages-manipulation-confirm-modal.component.html',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { type: [{
                type: Input
            }] } });
class MessagesManipulationConfirmModalCustomizableDirective extends BbTemplate {
}
MessagesManipulationConfirmModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesManipulationConfirmModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesManipulationConfirmModalCustomizableDirective, selector: "[bbMessagesManipulationConfirmModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesManipulationConfirmModalCustomizable]',
                }]
        }] });

const components$6 = [MessagesManipulationConfirmModalComponent];
const directives$6 = [MessagesManipulationConfirmModalCustomizableDirective];
const uiModule = [ModalModule, HeaderModule, ButtonModule];
class MessagesManipulationConfirmModalModule {
}
MessagesManipulationConfirmModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesManipulationConfirmModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalModule, declarations: [BaseModalComponent, MessagesManipulationConfirmModalComponent, MessagesManipulationConfirmModalCustomizableDirective], imports: [CommonModule, ModalModule, HeaderModule, ButtonModule], exports: [MessagesManipulationConfirmModalComponent, MessagesManipulationConfirmModalCustomizableDirective] });
MessagesManipulationConfirmModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalModule, providers: [MessagesManipulationConfirmModalService, ...uiModule], imports: [[CommonModule, ...uiModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManipulationConfirmModalModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [BaseModalComponent, ...components$6, ...directives$6],
                    exports: [...components$6, ...directives$6],
                    imports: [CommonModule, ...uiModule],
                    providers: [MessagesManipulationConfirmModalService, ...uiModule],
                }]
        }] });

class BaseUploadAttachmentsService {
}
class FileAttachment {
    constructor(file, service) {
        this.service = service;
        /**
         * The loading flag.
         */
        this.loading = false;
        /**
         * Delete attachment subject that holds index
         */
        this.onDelete = new Subject();
        this.cancelSubject = new Subject();
        this.file = file;
        this.size = file.size;
        if (file.id) {
            this.id = file.id;
            this.name = file.filename;
        }
        else {
            this.name = file.name;
        }
    }
    /**
     * Delete attachment
     *
     * @param id Attachment id
     * @param index Attachment index
     */
    deleteAttachment(id, index) {
        if (this.id && this.id === id) {
            this.service.deleteAttachments([id]).subscribe();
        }
        else {
            this.cancelSubject.next();
        }
        this.onDelete.next(index);
    }
    /**
     * Upload attachments
     */
    uploadAttachment() {
        this.setLoading(true);
        return this.service.uploadAttachment(this.file).pipe(takeUntil(this.cancelSubject), tap(value => {
            this.id = value ? value.id : undefined;
            this.setLoading(false);
        }));
    }
    /**
     * Set loading flag
     *
     * @param flag Loaging status flag
     */
    setLoading(flag) {
        this.loading = flag;
    }
}

class MessagesUploadAttachmentsComponent {
    constructor(cd, service, sharedService, uploadService) {
        this.cd = cd;
        this.service = service;
        this.sharedService = sharedService;
        this.uploadService = uploadService;
        /**
         * Disabled state flag
         */
        this.disabled = false;
        /**
         * Input to define adding file multiple times
         * True by defaults
         */
        this.multiple = true;
        /**
         * The accepted file formats.
         */
        this.accept = '*';
        this.initAttachments$ = new BehaviorSubject(undefined);
        /**
         * The file attachments array.
         */
        this.attachments = [];
        this.hostRef = this;
        this.maxSizeBytesValue = 0;
        this.value = [];
        this.newlyAddedAttachments = [];
        this.loading = 0;
        this.unsubscribe = new Subject();
        /**
         * The method from the ControlValueAccessor interface for responding to the value change.
         * Implemented through the registerOnChange method.
         */
        this.onChange = () => { };
        /**
         * The method from the ControlValueAccessor interface for responding to the change of the untouched state.
         * Implemented through the registerOnTouched method.
         */
        this.onTouched = () => { };
        /**
         * The method for responding to the validation change. Implemented through the registerOnValidatorChange method.
         */
        this.onValidationChange = () => { };
    }
    /**
     * Maximum size for file upload in megabytes
     */
    set maxSize(value) {
        if (value) {
            const number = Number(value);
            this.maxSizeMegabytesValue = number;
            this.maxSizeBytesValue = number * 1024 * 1024;
        }
    }
    /**
     * Array of attachments objects
     */
    set initAttachments(value) {
        this.initAttachments$.next(value);
    }
    /**
     * The method to upload a file attachment.
     *
     * @param input
     */
    onFileAdded(input) {
        const file = input && input.files && input.files[0];
        this.onTouched();
        if (file) {
            input.value = '';
            if (this.maxSizeBytesValue && file.size > this.maxSizeBytesValue) {
                this.sharedService.openNotification(this.maxAttachmentSizeErrorTpl, 'error');
                return;
            }
            const attachment = new FileAttachment(file, this.service);
            const index = this.attachments.push(attachment);
            this.loading++;
            this.onValidationChange();
            attachment
                .uploadAttachment()
                .pipe(take(1), tap(value => this.onValueChanged(value || undefined)), catchError(error => {
                this.removeRedundantAttachment(index - 1);
                return this.showErrorNotification(error);
            }), finalize(() => {
                this.loading--;
                this.onValidationChange();
                this.cd.markForCheck();
            }), takeUntil(this.uploadService.reset$))
                .subscribe();
            attachment.onDelete.pipe(takeUntil(this.unsubscribe)).subscribe(i => this.removeRedundantAttachment(i));
        }
    }
    ngOnInit() {
        this.uploadService.reset$
            .pipe(map(type => {
            const value = type ? [...this.newlyAddedAttachments].map(({ id }) => id) : [];
            this.attachments = [];
            this.value = [];
            this.newlyAddedAttachments = [];
            this.cd.markForCheck();
            return { value, type };
        }), filter(({ value, type }) => !!(value.length && type)), switchMap(({ value }) => this.deleteAttachments(value)), takeUntil(this.unsubscribe))
            .subscribe();
    }
    ngOnDestroy() {
        this.unsubscribe.next(true);
        this.unsubscribe.complete();
    }
    /**
     * The method from the ControlValueAccessor interface for setting the initial value (previously uploaded attachments)
     * for file attachments input.
     *
     * @param value Previously uploaded attachments
     */
    writeValue(value) {
        if (value && value.length) {
            this.value = [...value];
            this.initAttachments$.pipe(takeUntil(this.uploadService.reset$)).subscribe(attachments => {
                if (attachments) {
                    this.attachments = attachments.reduce((acc, item) => {
                        const attachment = new FileAttachment(item, this.service);
                        // @ts-ignore
                        acc.push(attachment);
                        attachment.onDelete.pipe(takeUntil(this.unsubscribe)).subscribe(i => this.removeRedundantAttachment(i));
                        return acc;
                    }, []);
                }
            });
        }
        this.cd.markForCheck();
    }
    /**
     * The method from the ControlValueAccessor interface for setting the onChange function implementation.
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * The method from the ControlValueAccessor interface for setting the onTouched function implementation.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * The method from the Validator interface. Registers a callback function to call when the validator inputs change.
     */
    registerOnValidatorChange(fn) {
        this.onValidationChange = fn;
    }
    /**
     * The method from the ControlValueAccessor interface for setting the disabled state.
     *
     * @param isDisabled Is disabled flag
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    }
    /**
     * The method from the Validator interface. This method performs synchronous validation against the provided control.
     *
     * @returns Validation errors
     */
    validate() {
        return this.loading ? { loading: true } : null;
    }
    deleteAttachments(ids) {
        return this.service.deleteAttachments(ids).pipe(catchError(error => this.showErrorNotification(error)));
    }
    removeRedundantAttachment(index) {
        this.value.splice(index, 1);
        this.attachments.splice(index, 1);
        this.onChange(this.value);
    }
    onValueChanged(value) {
        if (value) {
            this.value.push(value);
            this.newlyAddedAttachments.push(value);
            this.onChange(this.value);
        }
    }
    showErrorNotification(error) {
        this.sharedService.openNotification(this.sharedService.getErrorMessage(error), 'error');
        return EMPTY;
    }
}
MessagesUploadAttachmentsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: BaseUploadAttachmentsService }, { token: SharedMethodsService }, { token: MessagesUploadAttachmentsService }], target: i0.ɵɵFactoryTarget.Component });
MessagesUploadAttachmentsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesUploadAttachmentsComponent, selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: { maxSize: "maxSize", initAttachments: "initAttachments", disabled: "disabled", multiple: "multiple", attachmentButtonText: "attachmentButtonText", accept: "accept" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MessagesUploadAttachmentsComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => MessagesUploadAttachmentsComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "maxAttachmentSizeErrorTpl", first: true, predicate: ["maxAttachmentSizeError"], descendants: true }], ngImport: i0, template: "<ng-container bbMessagesUploadAttachmentsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbMessagesUploadAttachmentsCustomizable let-host>\n  <bb-input-file-ui\n    [buttonText]=\"host.attachmentButtonText ? host.attachmentButtonText : attachFile.elementRef.nativeElement.innerText\"\n    [disabled]=\"host.disabled\"\n    [accept]=\"host.accept\"\n    *ngIf=\"!(!host.multiple && host.attachments.length)\"\n    (change)=\"host.onFileAdded($event.target)\"\n  ></bb-input-file-ui>\n\n  <div class=\"row\">\n    <div class=\"col-auto\" *ngFor=\"let attachment of host.attachments; let i = index\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-file-attachment-ui\n          [name]=\"attachment.name\"\n          [size]=\"attachment.size\"\n          [loading]=\"attachment.loading\"\n          [deletable]=\"true\"\n          [disabled]=\"true\"\n          (delete)=\"attachment.deleteAttachment(attachment.id, i)\"\n        ></bb-file-attachment-ui>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #attachFile i18n=\"Attach file@@messages.messagesEmployeeUploadAttachments.attachFile\"\n    >Attach file</ng-template\n  >\n</ng-template>\n\n<ng-template #maxAttachmentSizeError>\n  <span\n    i18n=\"\n      Uploaded file exceeds the maximum allowed size@@messages.messagesEmployeeUploadAttachments.maxAttachmentSizeError\"\n    >The file you are trying to upload exceeds the maximum attachment size of\n  </span>\n  <span>{{ maxSizeMegabytesValue }}</span>\n  <span i18n=\"Mb|Megabytes@@messages.messagesEmployeeUploadAttachments.maxAttachmentSizeError.megabytes\">Mb</span>.\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4$1.InputFileComponent; }), selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }, { type: i0.forwardRef(function () { return i5.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }], directives: [{ type: i0.forwardRef(function () { return MessagesUploadAttachmentsCustomizableDirective; }), selector: "[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-upload-attachments-ui, bb-messages-upload-attachments',
                    templateUrl: './messages-upload-attachments.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MessagesUploadAttachmentsComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => MessagesUploadAttachmentsComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: BaseUploadAttachmentsService }, { type: SharedMethodsService }, { type: MessagesUploadAttachmentsService }]; }, propDecorators: { maxSize: [{
                type: Input
            }], initAttachments: [{
                type: Input
            }], disabled: [{
                type: Input
            }], multiple: [{
                type: Input
            }], attachmentButtonText: [{
                type: Input
            }], accept: [{
                type: Input
            }], maxAttachmentSizeErrorTpl: [{
                type: ViewChild,
                args: ['maxAttachmentSizeError']
            }] } });
class MessagesUploadAttachmentsCustomizableDirective extends BbTemplate {
}
MessagesUploadAttachmentsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesUploadAttachmentsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesUploadAttachmentsCustomizableDirective, selector: "[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]',
                }]
        }] });

class SharedMethodsModule {
}
SharedMethodsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SharedMethodsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsModule, imports: [CommonModule] });
SharedMethodsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsModule, providers: [SharedMethodsService], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    providers: [SharedMethodsService],
                }]
        }] });

const components$5 = [MessagesUploadAttachmentsComponent];
const directives$5 = [MessagesUploadAttachmentsCustomizableDirective];
const uiModules$7 = [ButtonModule, FileAttachmentModule, IconModule, InputFileModule];
const innerModules$4 = [SharedMethodsModule];
class MessagesUploadAttachmentsModule {
}
MessagesUploadAttachmentsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesUploadAttachmentsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsModule, declarations: [MessagesUploadAttachmentsComponent, MessagesUploadAttachmentsCustomizableDirective], imports: [CommonModule, ButtonModule, FileAttachmentModule, IconModule, InputFileModule, SharedMethodsModule], exports: [MessagesUploadAttachmentsComponent, MessagesUploadAttachmentsCustomizableDirective, ButtonModule, FileAttachmentModule, IconModule, InputFileModule, SharedMethodsModule] });
MessagesUploadAttachmentsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsModule, providers: [MessagesUploadAttachmentsService], imports: [[CommonModule, ...uiModules$7, ...innerModules$4], ButtonModule, FileAttachmentModule, IconModule, InputFileModule, SharedMethodsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$7, ...innerModules$4],
                    declarations: [...components$5, ...directives$5],
                    exports: [...components$5, ...directives$5, ...uiModules$7, ...innerModules$4],
                    providers: [MessagesUploadAttachmentsService],
                }]
        }] });

class CreateMessageFormImplementationService {
    constructor(employeeService) {
        this.employeeService = employeeService;
        this.maxPaginationItemsNum = 65535;
    }
    /**
     * Get topics
     *
     * @returns Employee topics stream
     */
    getTopics() {
        return this.employeeService
            .getTopicsEmployee({ size: this.maxPaginationItemsNum, subscribed: true })
            .pipe(catchError(() => of([])));
    }
    /**
     * Create message
     *
     * @param params Create message request params
     * @returns Create message stream
     */
    createMessage(params) {
        return this.employeeService.postMessagesEmployee({ presentationMessageEmployeePostRequestBody: params });
    }
}
CreateMessageFormImplementationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormImplementationService, deps: [{ token: i1.EmployeeHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
CreateMessageFormImplementationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormImplementationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormImplementationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.EmployeeHttpService }]; } });

class MessagesEmployeeUploadAttachmentsService {
    constructor(service) {
        this.service = service;
    }
    /**
     * Delete attachments by ids
     *
     * @param ids attachments ids
     * @returns Delete attachments stream
     */
    deleteAttachments(ids) {
        return this.service.deleteMessageAttachmentsEmployee({ ids });
    }
    /**
     * Upload attachment
     *
     * @param attachment Attachment data
     * @returns Upload attachment stream
     */
    uploadAttachment(attachment) {
        return this.service.postMessageAttachmentsEmployee({ attachment });
    }
}
MessagesEmployeeUploadAttachmentsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeUploadAttachmentsService, deps: [{ token: i1.EmployeeHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesEmployeeUploadAttachmentsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeUploadAttachmentsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeUploadAttachmentsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.EmployeeHttpService }]; } });

const topicPlaceholderConfig = {
    selectTopicPlaceholder: $localize `:Select topic placeholder@@messages.selectTopicPlaceholder:Select topic`,
    // eslint-disable-next-line max-len
    noTopicsPlaceholder: $localize `:There are no topics available@@messages.noTopicsPlaceholder:There are no topics available`,
};

class EmployeeCreateMessageFormService {
    constructor(userService) {
        this.userService = userService;
    }
    getUsers(externalId) {
        return this.userService.getIdentities({ externalId }).pipe(map((usersData) => usersData.identities), catchError(() => of({})));
    }
    getUserById(internalId) {
        return this.userService.getIdentity({ internalId });
    }
}
EmployeeCreateMessageFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormService, deps: [{ token: i1$4.IdentityManagementService }], target: i0.ɵɵFactoryTarget.Injectable });
EmployeeCreateMessageFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$4.IdentityManagementService }]; } });

class EmployeeCreateMessageFormComponent extends BaseCreateMessageFormComponent {
    constructor(employeeService, encodingService, sharedService, fb, cd, createMessageFormService, confirmModalService, uploadService) {
        super(sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService);
        this.employeeService = employeeService;
        this.encodingService = encodingService;
        this.sharedService = sharedService;
        this.fb = fb;
        this.cd = cd;
        this.createMessageFormService = createMessageFormService;
        this.confirmModalService = confirmModalService;
        this.uploadService = uploadService;
        /**
         * Debounce time for input search requests
         */
        this.debounceTime = 500;
        /**
         * Minimum length value for input search request
         */
        this.minSearchLength = 1;
        /**
         * Make predefined user field readonly
         */
        this.isPreDefinedUserReadonly = false;
        /**
         * Configs for topic selector placeholder
         */
        this.topicPlaceholderConfig = topicPlaceholderConfig;
        /**
         * Typeahead options.
         */
        this.typeaheadOptions = {
            ngbTypeahead: this.search.bind(this),
            resultFormatter: (item) => item.fullName,
            inputFormatter: (item) => item.fullName,
        };
        /**
         * Additional form fields.
         */
        this.additionalFormFields = {
            recipient: '',
            important: false,
            notDeletable: false,
            'read-only': false,
        };
        Object.keys(this.additionalFormFields).forEach(key => {
            const validator = key === 'recipient' ? this.customRequiredValidator : undefined;
            this.newMessageFormGroup.addControl(key, new FormControl(this.additionalFormFields[key], validator));
        });
        this.newMessageFormGroup.updateValueAndValidity();
    }
    /**
     * Predefine form
     */
    set preDefineForm(val) {
        if (val.recipient) {
            this.getUserName(val.recipient);
        }
    }
    /**
     * The method upon creation of the message form submission.
     */
    onConfirm() {
        this.newMessageFormGroup.markAsDirty();
        this.newMessageFormGroup.markAllAsTouched();
        const { valid } = this.newMessageFormGroup;
        const value = this.newMessageFormGroup.getRawValue();
        if (valid) {
            const finalValue = Object.assign({ subject: '', body: '', topic: '', recipient: value.recipient.id, important: value.important, deletable: !value.notDeletable, 'read-only': value['read-only'] }, this.getSimpleFormVal(value));
            this.createMessage(finalValue);
        }
    }
    /**
     * The method to search for typeahead options.
     *
     * @param text Search query
     * @returns Search stream
     */
    search(text) {
        return text.pipe(debounceTime(this.debounceTime), distinctUntilChanged(), filter(value => value.length > this.minSearchLength), switchMap(value => this.employeeService.getUsers(value)));
    }
    resetToInit() {
        super.resetToInit();
        this.resetAdditionalFields();
    }
    customRequiredValidator(control) {
        const value = control.value;
        const isSelected = value && typeof value !== 'string';
        return !isSelected ? { required: true } : null;
    }
    getUserName(userId) {
        this.employeeService
            .getUserById(userId)
            .pipe(tap(user => this.setUserName(user, userId)), catchError(err => {
            this.sharedService.openNotification(this.sharedService.getErrorMessage(err), 'error');
            return EMPTY;
        }))
            .subscribe();
    }
    setUserName(user, userId) {
        this.newMessageFormGroup.controls['recipient'].setValue(Object.assign(Object.assign({}, user), { id: userId }));
        if (this.isPreDefinedUserReadonly) {
            this.newMessageFormGroup.controls['recipient'].disable();
        }
    }
    resetAdditionalFields() {
        Object.keys(this.additionalFormFields).forEach(key => {
            this.newMessageFormGroup.controls[key].setValue(this.additionalFormFields[key]);
        });
    }
}
EmployeeCreateMessageFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormComponent, deps: [{ token: EmployeeCreateMessageFormService }, { token: MessagesEncodingService }, { token: SharedMethodsService }, { token: i4.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: BaseCreateMessageFormService }, { token: MessagesManipulationConfirmModalService }, { token: MessagesUploadAttachmentsService }], target: i0.ɵɵFactoryTarget.Component });
EmployeeCreateMessageFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMessageFormComponent, selector: "bb-messages-employee-create-message-form", inputs: { debounceTime: "debounceTime", minSearchLength: "minSearchLength", preDefineForm: "preDefineForm", isPreDefinedUserReadonly: "isPreDefinedUserReadonly" }, providers: [
        {
            provide: BaseCreateMessageFormService,
            useClass: CreateMessageFormImplementationService,
        },
        {
            provide: BaseUploadAttachmentsService,
            useClass: MessagesEmployeeUploadAttachmentsService,
        },
    ], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbEmployeeCreateMessageFormCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    topics: topics | async,\n    maxAttachmentSize: maxAttachmentSize\n  }\"\n></ng-container>\n\n<ng-template\n  bbEmployeeCreateMessageFormCustomizable\n  let-host\n  let-topics=\"context.topics\"\n  let-maxAttachmentSize=\"context.maxAttachmentSize\"\n>\n  <form [formGroup]=\"host.newMessageFormGroup\" data-role=\"form\" (submit)=\"host.onConfirm()\">\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        *ngIf=\"\n          topics?.length\n            ? topicPlaceholderConfig.selectTopicPlaceholder\n            : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n        \"\n        [options]=\"topics\"\n        displayAttributePath=\"name\"\n        formControlName=\"topic\"\n        label=\"Topic\"\n        i18n-label=\"Topic label text@@messages.employeeCreateMessage.composeMessageForm.topicLabel\"\n        aria-label=\"Topic\"\n        [aria-invalid]=\"host.isInvalidControl('topic')\"\n        data-role=\"topics\"\n        aria-describedby=\"compose-message-topic-error-message\"\n        i18n-aria-label=\"Topic aria-label text@@messages.employeeCreateMessage.composeMessageForm.topicAriaLabel\"\n        labelClasses=\"form-label\"\n        [attr.placeholder]=\"topicPlaceholder\"\n        [placeholder]=\"topicPlaceholder\"\n        (blur)=\"host.resetFormOnElementBlur()\"\n      ></bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-topic-error-message\"\n        [showErrors]=\"host.isInvalidControl('topic')\"\n      >\n        <span\n          *ngIf=\"host.hasError('topic', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            required@@messages.employeeCreateMessage.composeMessageForm.errors.subjectRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <label i18n=\"User label text@@messages.employeeCreateMessage.composeMessageForm.recipientLabel\">User</label>\n      <bb-search-box-ui\n        formControlName=\"recipient\"\n        aria-label=\"Select user\"\n        i18n-aria-label=\"\n          Select user aria-label text@@messages.employeeCreateMessage.composeMessageForm.subjectAriaLabel\"\n        [attr.aria-invalid]=\"host.isInvalidControl('recipient')\"\n        aria-describedby=\"compose-message-recipient-error-message\"\n        placeholder=\"Select user\"\n        i18n-placeholder=\"Select user@@messages.employeeCreateMessage.composeMessageForm.selectRecipientPlaceholder\"\n        [typeaheadOptions]=\"host.typeaheadOptions\"\n        [required]=\"true\"\n      ></bb-search-box-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-recipient-error-message\"\n        [showErrors]=\"host.isInvalidControl('recipient')\"\n      >\n        <span\n          *ngIf=\"host.hasError('recipient', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMessage.composeMessageForm.errors.recipientRequired\"\n          >Field is required</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"subject\"\n        label=\"Subject\"\n        i18n-label=\"Subject label text@@messages.employeeCreateMessage.composeMessageForm.subjectLabel\"\n        aria-label=\"Subject\"\n        i18n-aria-label=\"Subject aria-label text@@messages.employeeCreateMessage.composeMessageForm.subjectAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('subject')\"\n        aria-describedby=\"compose-message-subject-error-message\"\n        placeholder=\"Write subject\"\n        i18n-placeholder=\"\n          Subject placeholder text@@messages.employeeCreateMessage.composeMessageForm.subjectPlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"subject\"\n        [maxlength]=\"host.maxSubjectLength\"\n        [required]=\"true\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-subject-error-message\"\n        [showErrors]=\"host.isInvalidControl('subject')\"\n      >\n        <span\n          *ngIf=\"host.hasError('subject', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMessage.composeMessageForm.errors.subjectRequired\"\n          >Field is required</span\n        >\n        <span\n          *ngIf=\"host.hasError('subject', 'maxlength')\"\n          i18n=\"\n            Error message if subject value is more then maxlength\n            value@@messages.employeeCreateMessage.composeMessageForm.errors.subjectMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('subject')?.value?.length }} characters exceeds the limit of\n          {{ host.maxSubjectLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"read-only\"\n          aria-label=\"Read only\"\n          data-role=\"readonly\"\n          i18n-aria-label=\"\n            checkbox read-only aria-label@@messages.employeeCreateMessage.composeMessageForm.readonlyCheckboxAriaLabel\"\n          label=\"Read only\"\n          i18n-label=\"\n            read only checkbox label text@@messages.employeeCreateMessage.composeMessageForm.readonlyCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"notDeletable\"\n          aria-label=\"Can't be deleted\"\n          data-role=\"deletable\"\n          i18n-aria-label=\"\n            checkbox deletable aria-label@@messages.employeeCreateMessage.composeMessageForm.deletableCheckboxAriaLabel\"\n          label=\"Can't be deleted\"\n          i18n-label=\"\n            deletable checkbox label text@@messages.employeeCreateMessage.composeMessageForm.deletableCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"important\"\n          aria-label=\"important\"\n          data-role=\"important\"\n          i18n-aria-label=\"\n            checkbox important aria-label@@messages.employeeCreateMessage.composeMessageForm.importantCheckboxAriaLabel\"\n          label=\"Important\"\n          i18n-label=\"\n            important checkbox label text@@messages.employeeCreateMessage.composeMessageForm.importantCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-rich-text-editor-ui\n        label=\"Message\"\n        i18n-label=\"Message label text@@messages.employeeCreateMessage.composeMessageForm.messageLabel\"\n        aria-label=\"Message\"\n        i18n-aria-label=\"Message aria-label text@@messages.employeeCreateMessage.composeMessageForm.messageAriaLabel\"\n        placeholder=\"Write some text\"\n        i18n-placeholder=\"\n          Message placeholder text@@messages.employeeCreateMessage.composeMessageForm.messagePlaceholder\"\n        [attr.aria-invalid]=\"host.isInvalidControl('body')\"\n        [attr.aria-describedby]=\"'compose-message-body-error-message'\"\n        formControlName=\"body\"\n        [counter]=\"true\"\n        [maxLength]=\"host.maxMessageLength\"\n        [required]=\"true\"\n      >\n        <ng-template #actions bbRichTextEditorActions>\n          <bb-rich-text-editor-bold-action></bb-rich-text-editor-bold-action>\n          <bb-rich-text-editor-italic-action></bb-rich-text-editor-italic-action>\n          <bb-rich-text-editor-underline-action></bb-rich-text-editor-underline-action>\n          <bb-rich-text-editor-strikethrough-action> </bb-rich-text-editor-strikethrough-action>\n          <bb-rich-text-editor-olist-action></bb-rich-text-editor-olist-action>\n          <bb-rich-text-editor-ulist-action> </bb-rich-text-editor-ulist-action>\n          <bb-rich-text-editor-link-action></bb-rich-text-editor-link-action>\n        </ng-template>\n      </bb-rich-text-editor-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-body-error-message\"\n        [showErrors]=\"host.isInvalidControl('body')\"\n      >\n        <span\n          *ngIf=\"host.hasError('body', 'required')\"\n          i18n=\"Error message if field is required@@messages.createMessage.composeMessageForm.errors.messageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-messages-upload-attachments\n        [maxSize]=\"maxAttachmentSize\"\n        formControlName=\"attachments\"\n      ></bb-messages-upload-attachments>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        data-role=\"submit\"\n        aria-label=\"Send\"\n        i18n-aria-label=\"\n          Submit button aria-label text@@messages.employeeCreateMessage.composeMessageForm.submitButtonAriaLabel\"\n        i18n=\"Submit button text@@messages.employeeCreateMessage.composeMessageForm.submitButton\"\n        [isLoading]=\"host.formLoading\"\n      >\n        Send\n      </bb-load-button-ui>\n      <button\n        bbButton\n        bbPreventBubbleDown\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        data-role=\"discard\"\n        aria-label=\"Discard\"\n        i18n-aria-label=\"\n          Discard button aria-label text@@messages.employeeCreateMessage.composeMessageForm.discardButtonAriaLabel\"\n        i18n=\"Discard button text@@messages.employeeCreateMessage.composeMessageForm.discardButton\"\n        (click)=\"host.confirmModalService.toggleModal(true, host.manipulationTypes.discard, host.newMessageFormGroup)\"\n      >\n        Discard\n      </button>\n    </div>\n  </form>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"host.confirmationModal.opened\"\n    [type]=\"host.confirmationModal.type\"\n    (cancel)=\"host.confirmModalService.toggleModal(false)\"\n    (confirm)=\"host.confirmConfirmationModal()\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #messageComposeSuccess>\n  <span\n    i18n=\"\n      Your message has been successfully sent.|Text of successful conversation\n      compose@@messages.employeeCreateMessage.composeMessageForm.messageSuccessCompose\"\n    >Your message has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #messageComposeError>\n  <span\n    i18n=\"\n      There is an error sending message.|Text of failed conversation\n      compose@@messages.employeeCreateMessage.composeMessageForm.messageErrorCompose\"\n    >There is an error sending message.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i8.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i9.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i10.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i11.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i12.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorComponent; }), selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorBoldActionComponent; }), selector: "bb-rich-text-editor-bold-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorItalicActionComponent; }), selector: "bb-rich-text-editor-italic-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorUnderlineActionComponent; }), selector: "bb-rich-text-editor-underline-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorStrikethroughActionComponent; }), selector: "bb-rich-text-editor-strikethrough-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorOlistActionComponent; }), selector: "bb-rich-text-editor-olist-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorUlistActionComponent; }), selector: "bb-rich-text-editor-ulist-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorLinkActionComponent; }), selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }, { type: i0.forwardRef(function () { return MessagesUploadAttachmentsComponent; }), selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: ["maxSize", "initAttachments", "disabled", "multiple", "attachmentButtonText", "accept"] }, { type: i0.forwardRef(function () { return i15.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0.forwardRef(function () { return EmployeeCreateMessageFormCustomizableDirective; }), selector: "[bbEmployeeCreateMessageFormCustomizable]" }, { type: i0.forwardRef(function () { return i4.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i4.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i4.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i4.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i4.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i4.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorActionsDirective; }), selector: "ng-template[bbRichTextEditorActions]" }, { type: i0.forwardRef(function () { return i18.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return PreventBubbleDownDirective; }), selector: "[bbPreventBubbleDown]" }], pipes: { "async": i0.forwardRef(function () { return i2$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-employee-create-message-form',
                    templateUrl: './employee-create-message-form.component.html',
                    providers: [
                        {
                            provide: BaseCreateMessageFormService,
                            useClass: CreateMessageFormImplementationService,
                        },
                        {
                            provide: BaseUploadAttachmentsService,
                            useClass: MessagesEmployeeUploadAttachmentsService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: EmployeeCreateMessageFormService }, { type: MessagesEncodingService }, { type: SharedMethodsService }, { type: i4.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: BaseCreateMessageFormService }, { type: MessagesManipulationConfirmModalService }, { type: MessagesUploadAttachmentsService }]; }, propDecorators: { debounceTime: [{
                type: Input
            }], minSearchLength: [{
                type: Input
            }], preDefineForm: [{
                type: Input
            }], isPreDefinedUserReadonly: [{
                type: Input
            }] } });
class EmployeeCreateMessageFormCustomizableDirective extends BbTemplate {
}
EmployeeCreateMessageFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EmployeeCreateMessageFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMessageFormCustomizableDirective, selector: "[bbEmployeeCreateMessageFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmployeeCreateMessageFormCustomizable]',
                }]
        }] });

const components$4 = [EmployeeCreateMessageFormComponent];
const directives$4 = [EmployeeCreateMessageFormCustomizableDirective];
const uiModules$6 = [
    DropdownSingleSelectModule,
    InputValidationMessageModule,
    SearchBoxModule,
    InputTextModule,
    RichTextEditorModule,
    ButtonModule,
    InputCheckboxModule,
    LoadButtonModule,
];
const innerModules$3 = [
    MessagesManipulationConfirmModalModule,
    MessagesUploadAttachmentsModule,
    BaseCreateMessageFormModule,
];
class EmployeeCreateMessageFormModule {
}
EmployeeCreateMessageFormModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
EmployeeCreateMessageFormModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormModule, declarations: [EmployeeCreateMessageFormComponent, EmployeeCreateMessageFormCustomizableDirective], imports: [CommonModule, ReactiveFormsModule, PreventBubbleDownModule, DropdownSingleSelectModule,
        InputValidationMessageModule,
        SearchBoxModule,
        InputTextModule,
        RichTextEditorModule,
        ButtonModule,
        InputCheckboxModule,
        LoadButtonModule, MessagesManipulationConfirmModalModule,
        MessagesUploadAttachmentsModule,
        BaseCreateMessageFormModule], exports: [ReactiveFormsModule, EmployeeCreateMessageFormComponent, EmployeeCreateMessageFormCustomizableDirective, DropdownSingleSelectModule,
        InputValidationMessageModule,
        SearchBoxModule,
        InputTextModule,
        RichTextEditorModule,
        ButtonModule,
        InputCheckboxModule,
        LoadButtonModule, MessagesManipulationConfirmModalModule,
        MessagesUploadAttachmentsModule,
        BaseCreateMessageFormModule] });
EmployeeCreateMessageFormModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormModule, providers: [EmployeeCreateMessageFormService, MessagesEncodingService], imports: [[CommonModule, ReactiveFormsModule, PreventBubbleDownModule, ...uiModules$6, ...innerModules$3], ReactiveFormsModule, DropdownSingleSelectModule,
        InputValidationMessageModule,
        SearchBoxModule,
        InputTextModule,
        RichTextEditorModule,
        ButtonModule,
        InputCheckboxModule,
        LoadButtonModule, MessagesManipulationConfirmModalModule,
        MessagesUploadAttachmentsModule,
        BaseCreateMessageFormModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ReactiveFormsModule, PreventBubbleDownModule, ...uiModules$6, ...innerModules$3],
                    exports: [ReactiveFormsModule, ...components$4, ...directives$4, ...uiModules$6, ...innerModules$3],
                    declarations: [...components$4, ...directives$4],
                    providers: [EmployeeCreateMessageFormService, MessagesEncodingService],
                }]
        }] });

class EmployeeCreateMailoutFormService {
    constructor(messagesService, employeeService) {
        this.messagesService = messagesService;
        this.employeeService = employeeService;
        this.maxPaginationItemsNum = 65535;
    }
    /**
     * Get topics
     *
     * @returns Get topics stream
     */
    getTopics() {
        return this.employeeService
            .getTopicsEmployee({ size: this.maxPaginationItemsNum, subscribed: true })
            .pipe(catchError(() => of([])));
    }
    /**
     * Create message
     *
     * @param body Create message request body
     * @returns Create message stream
     */
    createMessage(body) {
        return this.messagesService.postMailout({ mailoutPostRequestBody: body });
    }
}
EmployeeCreateMailoutFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormService, deps: [{ token: i1.MailoutHttpService }, { token: i1.EmployeeHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
EmployeeCreateMailoutFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MailoutHttpService }, { type: i1.EmployeeHttpService }]; } });

class EmployeeCreateMailoutFormComponent extends BaseCreateMessageFormComponent {
    constructor(encodingService, sharedService, fb, cd, createMessageFormService, confirmModalService, uploadService) {
        super(sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService);
        this.encodingService = encodingService;
        this.sharedService = sharedService;
        this.fb = fb;
        this.cd = cd;
        this.createMessageFormService = createMessageFormService;
        this.confirmModalService = confirmModalService;
        this.uploadService = uploadService;
        this.hostRef = this;
        /**
         * Configs for topic selector placeholder
         */
        this.topicPlaceholderConfig = topicPlaceholderConfig;
        /**
         * The output with the mailout preview data.
         */
        this.review = new EventEmitter();
        this.defaultSenderName = '';
        this.newMessageFormGroup.addControl('important', this.fb.control(false));
        this.newMessageFormGroup.addControl('notDeletable', this.fb.control(false));
        this.newMessageFormGroup.addControl('mailoutName', this.fb.control(''));
        this.newMessageFormGroup.addControl('recipientsDataId', this.fb.control('', Validators.required));
        this.newMessageFormGroup.addControl('senderDisplayName', this.fb.control('', Validators.required));
        this.newMessageFormGroup.addControl('isBodyHtml', this.fb.control(false));
        this.newMessageFormGroup.addControl('template', this.fb.control(''));
        this.newMessageFormGroup.updateValueAndValidity();
    }
    /**
     * The input with the sender display name.
     */
    set senderDisplayName(value) {
        if (value) {
            const senderNameControl = this.newMessageFormGroup.controls['senderDisplayName'];
            senderNameControl.setValue(value);
            this.newMessageFormGroup.markAsPristine();
            this.defaultSenderName = value;
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.setDefaultMailoutFormValue();
    }
    setDefaultMailoutFormValue() {
        if (this.defaultMailout) {
            this.newMessageFormGroup.patchValue(Object.assign({}, this.defaultMailout));
            const bodyControl = this.newMessageFormGroup.controls['body'];
            if (this.defaultMailout.isBodyHtml) {
                bodyControl.setValue('');
                bodyControl.disable();
            }
            this.newMessageFormGroup.updateValueAndValidity();
            this.newMessageFormGroup.markAsDirty();
        }
    }
    /**
     * The method to load and parse the mailout template file.
     */
    onAddTemplateFile(input) {
        if (input.files && input.files[0]) {
            const file = input.files[0];
            const bodyInput = this.newMessageFormGroup.controls['body'];
            const templateInput = this.newMessageFormGroup.controls['template'];
            const fileReader = new FileReader();
            fileReader.onload = () => {
                templateInput.setValue({
                    body: fileReader.result,
                    name: file.name,
                    size: file.size,
                });
                this.newMessageFormGroup.controls['isBodyHtml'].setValue(true);
                templateInput.markAsTouched();
                bodyInput.clearValidators();
                bodyInput.disable();
            };
            fileReader.readAsText(file);
        }
    }
    /**
     * The method to clear the template file.
     */
    onClearTemplateFile() {
        const body = this.newMessageFormGroup.controls['body'];
        this.newMessageFormGroup.controls['template'].setValue(undefined);
        this.newMessageFormGroup.controls['isBodyHtml'].setValue(false);
        body.setValidators([Validators.required]);
        body.enable();
    }
    /**
     * The method to save the mailout.
     */
    onConfirm() {
        this.newMessageFormGroup.markAllAsTouched();
        this.newMessageFormGroup.markAsDirty();
        const { value, valid } = this.newMessageFormGroup;
        if (valid) {
            if (value.template && value.template.body) {
                value.body = value.template.body;
            }
            const finalValue = Object.assign({ subject: '', topic: '', body: '', mailoutName: value.mailoutName, recipientsData: {
                    id: value.recipientsDataId[0].id,
                }, senderDisplayName: this.defaultSenderName, isBodyHtml: value.isBodyHtml, important: !!value.important, deletable: !value.notDeletable }, this.getSimpleFormVal(value));
            if (value.isBodyHtml) {
                this.review.emit(Object.assign(Object.assign({}, value), { senderDisplayName: this.defaultSenderName }));
            }
            else {
                this.createMessage(finalValue);
            }
        }
    }
    /**
     * The method to discard the mailout.
     *
     * @param discardParam Should open modal flag
     */
    onDiscard(discardParam) {
        if (discardParam) {
            this.confirmModalService.toggleModal(discardParam, this.manipulationTypes.discard, this.newMessageFormGroup);
        }
        else {
            this.confirmModalService.toggleModal(discardParam);
        }
    }
    resetToInit(isFormDiscard = false) {
        super.resetToInit(isFormDiscard);
        this.onClearTemplateFile();
    }
}
EmployeeCreateMailoutFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormComponent, deps: [{ token: MessagesEncodingService }, { token: SharedMethodsService }, { token: i4.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: BaseCreateMessageFormService }, { token: MessagesManipulationConfirmModalService }, { token: MessagesUploadAttachmentsService }], target: i0.ɵɵFactoryTarget.Component });
EmployeeCreateMailoutFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormComponent, selector: "bb-messages-employee-create-mailout-form", inputs: { defaultMailout: "defaultMailout", senderDisplayName: "senderDisplayName" }, outputs: { review: "review" }, providers: [
        {
            provide: BaseCreateMessageFormService,
            useClass: EmployeeCreateMailoutFormService,
        },
        {
            provide: BaseUploadAttachmentsService,
            useClass: MessagesEmployeeUploadAttachmentsService,
        },
    ], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbEmployeeCreateMailoutFormCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    topics: topics | async,\n    maxAttachmentSize: maxAttachmentSize,\n    maxSubjectLength: maxSubjectLength\n  }\"\n></ng-container>\n\n<ng-template\n  bbEmployeeCreateMailoutFormCustomizable\n  let-host\n  let-topics=\"context.topics\"\n  let-maxAttachmentSize=\"context.maxAttachmentSize\"\n>\n  <form [formGroup]=\"host.newMessageFormGroup\" data-role=\"form\" (submit)=\"host.onConfirm()\">\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--fill bb-stack__item--align-top\">\n          <label\n            data-role=\"recipients-label\"\n            for=\"recipientsDataId\"\n            i18n=\"\n              Recipients|Recipients label text@@messages.employeeCreateMailout.composeMailoutForm.recipientsLabelText\"\n            >Recipients</label\n          >\n          <bb-messages-upload-attachments\n            data-role=\"import-recipients\"\n            accept=\"text/csv\"\n            id=\"recipientsDataId\"\n            [maxSize]=\"maxAttachmentSize\"\n            [multiple]=\"false\"\n            [initAttachments]=\"host.defaultMailout?.recipientsDataId\"\n            formControlName=\"recipientsDataId\"\n            i18n-attachmentButtonText=\"\n              Import recipients|Upload recipients attachment button\n              text@@messages.employeeCreateMailout.composeMailoutForm.uploadRecipientsAttachmentButtonText\"\n            attachmentButtonText=\"Import recipients\"\n          ></bb-messages-upload-attachments>\n          <bb-input-validation-message-ui\n            id=\"compose-mailout-sender-name-error\"\n            [showErrors]=\"host.isInvalidControl('recipientsDataId')\"\n          >\n            <span\n              *ngIf=\"host.hasError('recipientsDataId', 'required')\"\n              i18n=\"\n                Error message if recipient field is\n                required@@messages.employeeCreateMailout.composeMailoutForm.errors.recipientsDataIdRequired\"\n            >\n              Recipient is required\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-stack__item bb-stack__item--fill bb-stack__item--align-top\">\n          <label\n            data-role=\"html-template\"\n            for=\"templateFile\"\n            i18n=\"Recipients|Recipients label text@@messages.employeeCreateMailout.composeMailoutForm.htmpTemplateLabel\"\n            >HTML Template</label\n          >\n          <div>\n            <bb-input-file-ui\n              *ngIf=\"!host.newMessageFormGroup.controls['template']?.value\"\n              accept=\".html\"\n              data-role=\"import-template\"\n              buttonText=\"Import template\"\n              i18n-buttonText=\"Import template@@messages.employeeCreateMailout.composeMailoutForm.attachFile\"\n              id=\"templateFile\"\n              (change)=\"host.onAddTemplateFile($event.target)\"\n            ></bb-input-file-ui>\n            <div class=\"row\">\n              <div class=\"col-auto\" *ngIf=\"host.newMessageFormGroup.controls['template']?.value as templateValue\">\n                <bb-file-attachment-ui\n                  [name]=\"templateValue.name\"\n                  [size]=\"templateValue.size\"\n                  [deletable]=\"true\"\n                  [disabled]=\"true\"\n                  (delete)=\"host.onClearTemplateFile()\"\n                ></bb-file-attachment-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"mailout-name-label\"\n        label=\"Mailout name\"\n        i18n-label=\"Mailout name text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNameLabel\"\n        aria-label=\"Mailout name\"\n        i18n-aria-label=\"\n          Subject aria-label text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNametAriaLabel\"\n        placeholder=\"Write mailout name\"\n        i18n-placeholder=\"\n          Mailout name placeholder text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNamePlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"mailoutName\"\n        [maxlength]=\"host.maxMailoutNameLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui [showErrors]=\"host.isInvalidControl('mailoutName')\">\n        <span\n          *ngIf=\"host.hasError('mailoutName', 'maxlength')\"\n          i18n=\"\n            Error message if mailout name value is more then maxlength\n            value@@messages.employeeCreateMailout.composeMailoutForm.errors.mailoutNameMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('name')?.value?.length }} characters exceeds the limit of\n          {{ host.maxMailoutNameLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n      <p\n        class=\"bb-text-support bb-subtitle\"\n        data-role=\"mailout-name-subtitle\"\n        i18n=\"\n          Name exist for internal purposes only. It will not be displayed to\n          users@@messages.employeeCreateMailout.composeMailoutForm.mailoutNameSubtitleText\"\n      >\n        Name exist for internal purposes only. It will not be displayed to users\n      </p>\n    </div>\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        label=\"Sender name\"\n        data-role=\"sender-name\"\n        i18n-label=\"Sender name text@@messages.employeeCreateMailout.composeMailoutForm.senderNameLabel\"\n        aria-label=\"Sender name\"\n        i18n-aria-label=\"\n          Sender name aria-label text@@messages.employeeCreateMailout.composeMailoutForm.senderNameAriaLabel\"\n        aria-invalid=\"host.isInvalidControl('senderDisplayName')\"\n        [readonly]=\"host.defaultSenderName\"\n        aria-describedby=\"compose-mailout-sender-name-error\"\n        placeholder=\"Write sender name\"\n        i18n-placeholder=\"\n          Sender name placeholder text@@messages.employeeCreateMailout.composeMailoutForm.senderNamePlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"senderDisplayName\"\n      >\n      </bb-input-text-ui>\n      <p\n        class=\"bb-text-support bb-subtitle\"\n        data-role=\"sender-name-subtitle\"\n        i18n=\"\n          Employee name will be replaced for the\n          recipient@@messages.employeeCreateMailout.composeMailoutForm.senderDisplayNameSubtitleText\"\n      >\n        Employee name will be replaced for the recipient\n      </p>\n      <bb-input-validation-message-ui\n        id=\"compose-mailout-sender-name-error\"\n        [showErrors]=\"host.isInvalidControl('senderDisplayName')\"\n      >\n        <span\n          *ngIf=\"host.hasError('senderDisplayName', 'required')\"\n          i18n=\"\n            Error message if field is\n            required@@messages.createMessage.composeMessageForm.errors.senderDisplayNameMessageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        *ngIf=\"\n          topics?.length\n            ? topicPlaceholderConfig.selectTopicPlaceholder\n            : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n        \"\n        data-role=\"topics\"\n        [options]=\"topics\"\n        displayAttributePath=\"name\"\n        formControlName=\"topic\"\n        label=\"Topic\"\n        i18n-label=\"Topic label text@@messages.employeeCreateMailout.composeMailoutForm.topicLabel\"\n        aria-label=\"Topic\"\n        i18n-aria-label=\"Topic aria-label text@@messages.employeeCreateMailout.composeMailoutForm.topicAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('topic')\"\n        aria-describedby=\"compose-mailout-topic-error\"\n        labelClasses=\"form-label\"\n        [attr.placeholder]=\"topicPlaceholder\"\n        [placeholder]=\"topicPlaceholder\"\n        (blur)=\"host.resetFormOnElementBlur()\"\n      ></bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui id=\"compose-mailout-topic-error\" [showErrors]=\"host.isInvalidControl('topic')\">\n        <span\n          *ngIf=\"host.hasError('topic', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            required@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"subject\"\n        label=\"Subject\"\n        i18n-label=\"Subject label text@@messages.employeeCreateMailout.composeMailoutForm.subjectLabel\"\n        aria-label=\"Subject\"\n        i18n-aria-label=\"Subject aria-label text@@messages.employeeCreateMailout.composeMailoutForm.subjectAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('subject')\"\n        aria-describedby=\"compose-mailout-subject-error\"\n        placeholder=\"Write subject\"\n        i18n-placeholder=\"\n          Subject placeholder text@@messages.employeeCreateMailout.composeMailoutForm.subjectPlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"subject\"\n        [maxlength]=\"host.maxSubjectLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-mailout-subject-error\"\n        [showErrors]=\"host.isInvalidControl('subject')\"\n      >\n        <span\n          *ngIf=\"host.hasError('subject', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectRequired\"\n          >Field is required</span\n        >\n        <span\n          *ngIf=\"host.hasError('subject', 'maxlength')\"\n          i18n=\"\n            Error message if subject value is more then maxlength\n            value@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('subject')?.value?.length }} characters exceeds the limit of\n          {{ host.maxSubjectLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"notDeletable\"\n          aria-label=\"Can't be deleted\"\n          data-role=\"deletable\"\n          i18n-aria-label=\"\n            checkbox deletable aria-label@@messages.employeeCreateMailout.composeMailoutForm.deletableCheckboxAriaLabel\"\n          label=\"Can't be deleted\"\n          i18n-label=\"\n            deletable checkbox label text@@messages.employeeCreateMailout.composeMailoutForm.deletableCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"important\"\n          aria-label=\"important\"\n          data-role=\"important\"\n          i18n-aria-label=\"\n            checkbox important aria-label@@messages.employeeCreateMailout.composeMailoutForm.importantCheckboxAriaLabel\"\n          label=\"Important\"\n          i18n-label=\"\n            important checkbox label text@@messages.employeeCreateMailout.composeMailoutForm.importantCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-rich-text-editor-ui\n        label=\"Message\"\n        data-role=\"message-body\"\n        i18n-label=\"Message label text@@messages.employeeCreateMailout.composeMailoutForm.messageLabel\"\n        aria-label=\"Message\"\n        i18n-aria-label=\"Message aria-label text@@messages.employeeCreateMailout.composeMailoutForm.messageAriaLabel\"\n        [attr.aria-invalid]=\"host.isInvalidControl('body')\"\n        [attr.aria-describedby]=\"'compose-mailout-body-error'\"\n        placeholder=\"Write some text\"\n        i18n-placeholder=\"\n          Message placeholder text@@messages.employeeCreateMailout.composeMailoutForm.messagePlaceholder\"\n        formControlName=\"body\"\n        [counter]=\"true\"\n        [maxLength]=\"host.maxMessageLength\"\n        [required]=\"!host.templateFile\"\n      >\n        <ng-template #actions bbRichTextEditorActions>\n          <bb-rich-text-editor-bold-action></bb-rich-text-editor-bold-action>\n          <bb-rich-text-editor-italic-action></bb-rich-text-editor-italic-action>\n          <bb-rich-text-editor-underline-action></bb-rich-text-editor-underline-action>\n          <bb-rich-text-editor-strikethrough-action> </bb-rich-text-editor-strikethrough-action>\n          <bb-rich-text-editor-olist-action></bb-rich-text-editor-olist-action>\n          <bb-rich-text-editor-ulist-action> </bb-rich-text-editor-ulist-action>\n          <bb-rich-text-editor-link-action></bb-rich-text-editor-link-action>\n        </ng-template>\n      </bb-rich-text-editor-ui>\n      <bb-input-validation-message-ui id=\"compose-mailout-body-error\" [showErrors]=\"host.isInvalidControl('body')\">\n        <span\n          *ngIf=\"host.hasError('body', 'required')\"\n          i18n=\"\n            Error message if field is required@@messages.employeeCreateMailout.composeMailoutForm.errors.messageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-messages-upload-attachments\n        [initAttachments]=\"host.defaultMailout?.attachments\"\n        [maxSize]=\"maxAttachmentSize\"\n        formControlName=\"attachments\"\n      ></bb-messages-upload-attachments>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        data-role=\"submit\"\n        aria-label=\"Continue\"\n        i18n-aria-label=\"\n          Submit button aria-label text@@messages.employeeCreateMailout.composeMailoutForm.submitButtonAriaLabel\"\n        i18n=\"Submit button text@@messages.employeeCreateMailout.composeMailoutForm.submitButton\"\n        [isLoading]=\"host.formLoading\"\n      >\n        Continue\n      </bb-load-button-ui>\n      <button\n        bbButton\n        bbPreventBubbleDown\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        data-role=\"discard\"\n        aria-label=\"Discard\"\n        i18n-aria-label=\"\n          Discard button aria-label text@@messages.employeeCreateMailout.composeMailoutForm.discardButtonAriaLabel\"\n        i18n=\"Discard button text@@messages.employeeCreateMailout.composeMailoutForm.discardButton\"\n        (click)=\"host.onDiscard(true)\"\n      >\n        Discard\n      </button>\n    </div>\n  </form>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"host.confirmationModal.opened\"\n    [type]=\"host.confirmationModal.type\"\n    (cancel)=\"host.onDiscard(false)\"\n    (confirm)=\"host.confirmConfirmationModal()\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #messageComposeSuccess>\n  <ng-container bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      Your mailout has been successfully sent.|Text of successful conversation\n      compose@@messages.employeeCreateMailout.composeMailoutForm.messageSuccessCompose\"\n    >Your mailout has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #messageComposeError>\n  <ng-container bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      There is an error sending mailout.|Text of failed conversation\n      compose@@messages.employeeCreateMailout.composeMailoutForm.messageErrorCompose\"\n    >There is an error sending mailout.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return MessagesUploadAttachmentsComponent; }), selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: ["maxSize", "initAttachments", "disabled", "multiple", "attachmentButtonText", "accept"] }, { type: i0.forwardRef(function () { return i9.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i4$1.InputFileComponent; }), selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }, { type: i0.forwardRef(function () { return i5.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0.forwardRef(function () { return i11.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i8.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i12.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorComponent; }), selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorBoldActionComponent; }), selector: "bb-rich-text-editor-bold-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorItalicActionComponent; }), selector: "bb-rich-text-editor-italic-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorUnderlineActionComponent; }), selector: "bb-rich-text-editor-underline-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorStrikethroughActionComponent; }), selector: "bb-rich-text-editor-strikethrough-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorOlistActionComponent; }), selector: "bb-rich-text-editor-olist-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorUlistActionComponent; }), selector: "bb-rich-text-editor-ulist-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorLinkActionComponent; }), selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }, { type: i0.forwardRef(function () { return i15.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0.forwardRef(function () { return EmployeeCreateMailoutFormCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormCustomizable]" }, { type: i0.forwardRef(function () { return i4.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i4.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i4.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i4.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i4.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0.forwardRef(function () { return i4.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorActionsDirective; }), selector: "ng-template[bbRichTextEditorActions]" }, { type: i0.forwardRef(function () { return i18.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return PreventBubbleDownDirective; }), selector: "[bbPreventBubbleDown]" }, { type: i0.forwardRef(function () { return EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]" }, { type: i0.forwardRef(function () { return EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i2$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-employee-create-mailout-form',
                    templateUrl: './employee-create-mailout-form.component.html',
                    providers: [
                        {
                            provide: BaseCreateMessageFormService,
                            useClass: EmployeeCreateMailoutFormService,
                        },
                        {
                            provide: BaseUploadAttachmentsService,
                            useClass: MessagesEmployeeUploadAttachmentsService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: MessagesEncodingService }, { type: SharedMethodsService }, { type: i4.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: BaseCreateMessageFormService }, { type: MessagesManipulationConfirmModalService }, { type: MessagesUploadAttachmentsService }]; }, propDecorators: { review: [{
                type: Output
            }], defaultMailout: [{
                type: Input
            }], senderDisplayName: [{
                type: Input
            }] } });
class EmployeeCreateMailoutFormCustomizableDirective extends BbTemplate {
}
EmployeeCreateMailoutFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EmployeeCreateMailoutFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmployeeCreateMailoutFormCustomizable]',
                }]
        }] });
class EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective extends BbTemplate {
}
EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]',
                }]
        }] });
class EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective extends BbTemplate {
}
EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]',
                }]
        }] });

const components$3 = [EmployeeCreateMailoutFormComponent];
const directives$3 = [
    EmployeeCreateMailoutFormCustomizableDirective,
    EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective,
    EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective,
];
const uiModules$5 = [
    DropdownSingleSelectModule,
    FileAttachmentModule,
    InputFileModule,
    InputValidationMessageModule,
    InputTextModule,
    RichTextEditorModule,
    ButtonModule,
    InputCheckboxModule,
    LoadButtonModule,
];
const innerModules$2 = [ReactiveFormsModule, MessagesManipulationConfirmModalModule, MessagesUploadAttachmentsModule];
class EmployeeCreateMailoutFormModule {
}
EmployeeCreateMailoutFormModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
EmployeeCreateMailoutFormModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormModule, declarations: [EmployeeCreateMailoutFormComponent, EmployeeCreateMailoutFormCustomizableDirective,
        EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective,
        EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective], imports: [CommonModule, PreventBubbleDownModule, DropdownSingleSelectModule,
        FileAttachmentModule,
        InputFileModule,
        InputValidationMessageModule,
        InputTextModule,
        RichTextEditorModule,
        ButtonModule,
        InputCheckboxModule,
        LoadButtonModule, ReactiveFormsModule, MessagesManipulationConfirmModalModule, MessagesUploadAttachmentsModule], exports: [EmployeeCreateMailoutFormComponent, EmployeeCreateMailoutFormCustomizableDirective,
        EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective,
        EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, DropdownSingleSelectModule,
        FileAttachmentModule,
        InputFileModule,
        InputValidationMessageModule,
        InputTextModule,
        RichTextEditorModule,
        ButtonModule,
        InputCheckboxModule,
        LoadButtonModule, ReactiveFormsModule, MessagesManipulationConfirmModalModule, MessagesUploadAttachmentsModule] });
EmployeeCreateMailoutFormModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormModule, providers: [EmployeeCreateMailoutFormService], imports: [[CommonModule, PreventBubbleDownModule, ...uiModules$5, ...innerModules$2], DropdownSingleSelectModule,
        FileAttachmentModule,
        InputFileModule,
        InputValidationMessageModule,
        InputTextModule,
        RichTextEditorModule,
        ButtonModule,
        InputCheckboxModule,
        LoadButtonModule, ReactiveFormsModule, MessagesManipulationConfirmModalModule, MessagesUploadAttachmentsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PreventBubbleDownModule, ...uiModules$5, ...innerModules$2],
                    declarations: [...components$3, ...directives$3],
                    providers: [EmployeeCreateMailoutFormService],
                    exports: [...components$3, ...directives$3, ...uiModules$5, ...innerModules$2],
                }]
        }] });

class MessagesBodyPreviewComponent {
    constructor(renderer, cd) {
        this.renderer = renderer;
        this.cd = cd;
        /**
         * Flag to control visibility
         */
        this.isVisible = false;
        this.iframeContext = new BehaviorSubject(undefined);
        this.destroy = new Subject();
    }
    /**
     * Body from body message
     */
    set body(val) {
        this.iframeContext.next(val);
    }
    ngOnDestroy() {
        this.destroy.next();
    }
    /**
     * Load preview iframe
     */
    iframeLoad() {
        const iframeElement = this.iframeRef.nativeElement;
        const iframeBody = iframeElement.contentDocument.body;
        this.renderer.setStyle(iframeElement, 'width', '100%');
        this.renderer.setStyle(iframeElement, 'border', '0');
        this.renderer.setStyle(iframeBody, 'margin', '0');
        this.iframeContext
            .pipe(filter(Boolean), tap(content => this.renderer.setProperty(iframeBody, 'innerHTML', content)), delay(300), takeUntil(this.destroy))
            .subscribe(() => {
            let currentHeight = iframeBody.scrollHeight;
            let previousHeight = 0;
            let counter = 0;
            /* Several iterations are needed to set iframe height after recalculating template body height
            that contains elements with height or size set in relative units. */
            do {
                this.renderer.setStyle(iframeElement, 'height', `${currentHeight}px`);
                previousHeight = currentHeight;
                currentHeight = iframeBody.scrollHeight;
                counter++;
            } while (previousHeight !== currentHeight && counter < 5);
            this.isVisible = true;
            this.cd.detectChanges();
        });
    }
}
MessagesBodyPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesBodyPreviewComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MessagesBodyPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesBodyPreviewComponent, selector: "bb-messages-body-preview, bb-message-preview", inputs: { body: "body" }, viewQueries: [{ propertyName: "iframeRef", first: true, predicate: ["iframeRef"], descendants: true, static: true }], ngImport: i0, template: "<iframe\n  #iframeRef\n  title=\"Message preview\"\n  i18n-title=\"Message preview title@@messages.message-preview-title\"\n  [style.visibility]=\"isVisible ? 'visible' : 'hidden'\"\n  (load)=\"iframeLoad()\"\n></iframe>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesBodyPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-body-preview, bb-message-preview',
                    templateUrl: './messages-preview.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { body: [{
                type: Input
            }], iframeRef: [{
                type: ViewChild,
                args: ['iframeRef', { static: true }]
            }] } });

/**
 * @name MessagesConversationMessageComponent
 *
 * @description
 * Component displays conversation message.
 */
class MessagesConversationMessageComponent {
    constructor() {
        /**
         * Toggles message collapse (text-truncate and replacement HTML-tags)
         */
        this.opened = false;
        /**
         * Is message body contains html
         */
        this.isBodyHtml = false;
        /**
         * The unique ID HTML property for each widget component instance.
         */
        this.messageId = `messages-conversation-message-${MessagesConversationMessageComponent.counter++}`;
        this.replaceTags = (content) => (content ? content.replace(/<[^>]+>/gi, '') : '');
    }
    /**
     * Text of the message, could have HTML-tags
     */
    set message(value) {
        this.messageText = value;
        this.messageTextWithoutTags = value ? this.replaceTags(value) : undefined;
    }
    /**
     * Toggle message on click
     *
     * @param event Click event
     */
    onClick(event) {
        const selection = document.getSelection();
        if ((selection && selection.toString().length) ||
            (event.target.tagName.toLowerCase() === 'a' && event.target.href)) {
            return;
        }
        this.opened = !this.opened;
    }
    /**
     * Get sender template
     *
     * @returns Sender template
     */
    getSenderTemplate() {
        if (this.sender instanceof TemplateRef) {
            return this.sender;
        }
        return this.defaultSenderTemplate;
    }
    ngOnInit() {
        if (typeof this.messageText === 'undefined') {
            throw new Error(`"message" input is required in "${this.constructor.name}"`);
        }
    }
}
MessagesConversationMessageComponent.counter = 0;
MessagesConversationMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MessagesConversationMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationMessageComponent, selector: "bb-messages-conversation-message, bb-message-ui", inputs: { created: "created", message: "message", sender: "sender", opened: "opened", attachments: "attachments", isBodyHtml: "isBodyHtml" }, viewQueries: [{ propertyName: "defaultSenderTemplate", first: true, predicate: ["defaultSenderTemplate"], descendants: true, static: true }], ngImport: i0, template: "<ng-container bbMessagesConversationMessageCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbMessagesConversationMessageCustomizable let-host>\n  <div\n    class=\"bb-message-ui card-body\"\n    [attr.role]=\"host.isBodyHtml ? null : 'button'\"\n    (bbKeyboardClick)=\"!host.isBodyHtml && host.onClick($event)\"\n    tabindex=\"0\"\n    data-role=\"conversation-message\"\n    [attr.aria-controls]=\"host.messageId\"\n    [attr.aria-expanded]=\"host.opened\"\n  >\n    <div class=\"bb-stack bb-block--md\">\n      <span class=\"sr-only\" i18n=\"Message from|Before sender name@@messages.messagesCommon.messageFrom\"\n        >Message from</span\n      >\n      <span class=\"bb-text-semi-bold\" data-role=\"sender-name\">\n        <ng-container *ngTemplateOutlet=\"host.getSenderTemplate()\"></ng-container>\n      </span>\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <div class=\"bb-stack\">\n          <bb-icon-ui\n            class=\"bb-stack__item bb-text-support\"\n            *ngIf=\"host.attachments && host.attachments.length\"\n            name=\"attachment\"\n            data-role=\"messages-attachment\"\n            aria-label=\"Contains attachments\"\n            i18n-aria-label=\"\n              Contains attachments|Message contains attachments@@messages.messagesCommon.containsAttachments\"\n            bbTooltip=\"Contains attachments\"\n            i18n-bbTooltip=\"@@messages.messagesCommon.containsAttachments\"\n            triggers=\"hover\"\n            placement=\"top\"\n            container=\"body\"\n          ></bb-icon-ui>\n          <div *ngIf=\"host.created\" data-role=\"messages-creation-date\">\n            <span\n              class=\"sr-only\"\n              i18n=\"Date|'Date:' word that precedes message creation date@@messages.messagesCommon.labelForDate\"\n              >Date:</span\n            >\n            <span>{{ host.created | date: 'fullDate' }} </span>\n            <span\n              i18n=\"At|To bridge date and time (Monday March 28th, 2018 at 9:15 AM)@@messages.messagesCommon.createdAt\"\n              >at</span\n            >\n            <span> {{ host.created | date: 'shortTime' }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\" [ngClass]=\"{ 'col-md-8': !host.opened }\" [attr.id]=\"host.messageId\">\n        <div\n          data-role=\"message-content\"\n          *ngIf=\"!host.isBodyHtml; else htmlViewTmpl\"\n          [innerHtml]=\"host.opened ? host.messageText : host.messageTextWithoutTags\"\n          [ngClass]=\"{\n            'text-truncate': !host.opened,\n            'bb-block--md': host.opened && host.attachments\n          }\"\n        ></div>\n        <div data-role=\"attachments-wrapper\" class=\"row\" *ngIf=\"host.opened && host.attachments?.length\">\n          <div class=\"col-4\" *ngFor=\"let attachment of host.attachments\">\n            <bb-file-attachment-ui\n              [name]=\"attachment.filename\"\n              [size]=\"attachment.size\"\n              [fileContent]=\"attachment.linkStream\"\n            ></bb-file-attachment-ui>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #htmlViewTmpl>\n    <bb-messages-body-preview [body]=\"host.messageText\"></bb-messages-body-preview>\n  </ng-template>\n</ng-template>\n\n<ng-template #defaultSenderTemplate>\n  {{ sender }}\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i5.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0.forwardRef(function () { return MessagesBodyPreviewComponent; }), selector: "bb-messages-body-preview, bb-message-preview", inputs: ["body"] }], directives: [{ type: i0.forwardRef(function () { return MessagesConversationMessageCustomizableDirective; }), selector: "[bbMessagesConversationMessageCustomizable]" }, { type: i0.forwardRef(function () { return i4$2.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i2$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i2$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i2$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i0.forwardRef(function () { return i2$1.DatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-conversation-message, bb-message-ui',
                    templateUrl: './messages-conversation-message.component.html',
                }]
        }], propDecorators: { created: [{
                type: Input
            }], message: [{
                type: Input,
                args: ['message']
            }], sender: [{
                type: Input
            }], opened: [{
                type: Input
            }], attachments: [{
                type: Input
            }], isBodyHtml: [{
                type: Input
            }], defaultSenderTemplate: [{
                type: ViewChild,
                args: ['defaultSenderTemplate', { static: true }]
            }] } });
class MessagesConversationMessageCustomizableDirective extends BbTemplate {
}
MessagesConversationMessageCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesConversationMessageCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationMessageCustomizableDirective, selector: "[bbMessagesConversationMessageCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesConversationMessageCustomizable]',
                }]
        }] });

class MessagesBodyPreviewModule {
}
MessagesBodyPreviewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesBodyPreviewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesBodyPreviewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesBodyPreviewModule, declarations: [MessagesBodyPreviewComponent], imports: [CommonModule], exports: [MessagesBodyPreviewComponent] });
MessagesBodyPreviewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesBodyPreviewModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesBodyPreviewModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MessagesBodyPreviewComponent],
                    exports: [MessagesBodyPreviewComponent],
                    imports: [CommonModule],
                }]
        }] });

const uiModules$4 = [FileAttachmentModule, IconModule, KeyboardClickModule, TooltipModule];
const innerModules$1 = [MessagesBodyPreviewModule];
class MessagesConversationMessageModule {
}
MessagesConversationMessageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesConversationMessageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageModule, declarations: [MessagesConversationMessageComponent, MessagesConversationMessageCustomizableDirective], imports: [CommonModule, FileAttachmentModule, IconModule, KeyboardClickModule, TooltipModule, MessagesBodyPreviewModule], exports: [MessagesConversationMessageComponent,
        MessagesConversationMessageCustomizableDirective, FileAttachmentModule, IconModule, KeyboardClickModule, TooltipModule, MessagesBodyPreviewModule] });
MessagesConversationMessageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageModule, imports: [[CommonModule, ...uiModules$4, ...innerModules$1], FileAttachmentModule, IconModule, KeyboardClickModule, TooltipModule, MessagesBodyPreviewModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MessagesConversationMessageComponent, MessagesConversationMessageCustomizableDirective],
                    exports: [
                        MessagesConversationMessageComponent,
                        MessagesConversationMessageCustomizableDirective,
                        ...uiModules$4,
                        ...innerModules$1,
                    ],
                    imports: [CommonModule, ...uiModules$4, ...innerModules$1],
                }]
        }] });

const shareReplayOnce = () => function (source) {
    // use refCount: true to prevent memory leaks issue with shareReplay
    return source.pipe(shareReplay({ refCount: true, bufferSize: 1 }));
};

class UnknownIdError extends Error {
    constructor() {
        super();
        this.name = 'UnknownIdError';
        Object.setPrototypeOf(this, new.target.prototype);
    }
}

class MessagesRequestErrorComponent {
    /**
     * The input that set errorKind from `MessagesErrorKind`
     */
    set error(error) {
        if (error instanceof UnknownIdError) {
            this.errorKind = 'MessagesRequestUnknownIdError';
        }
        else if (error.error instanceof ErrorEvent) {
            this.errorKind = 'MessagesRequestUnknownError';
        }
        else {
            switch (error.status) {
                case 0:
                    this.errorKind = 'MessagesRequestConnectivityError';
                    break;
                case 400:
                    this.errorKind = 'MessagesRequestBadRequest';
                    break;
                case 401:
                    this.errorKind = 'MessagesRequestAccessDenied';
                    break;
                case 403:
                    this.errorKind = 'MessagesRequestAccessDenied';
                    break;
                case 404:
                    this.errorKind = 'MessagesRequestNotFound';
                    break;
                default:
                    this.errorKind = 'MessagesRequestUnknownError';
            }
        }
    }
}
MessagesRequestErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesRequestErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MessagesRequestErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesRequestErrorComponent, selector: "bb-messages-request-error, bb-messages-request-error-ui", inputs: { error: "error" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'MessagesRequestAccessDenied'\"\n    class=\"bb-state-container\"\n    title=\"No Permissions\"\n    i18n-title=\"\n      No Permissions|Error state label when user does not have permissions to view messages\n      request@@messages-request.error.accessDenied.title\"\n    subtitle=\"You can't access this widget. Contact system administrator for details.\"\n    i18n-subtitle=\"\n      No permissions subtitle|Error state subtitle label when user does not have permissions to view messages\n      requests@@messages-request.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"\n    iconSize=\"xxl\"\n  ></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'MessagesRequestConnectivityError'\"\n    class=\"bb-state-container\"\n    title=\"Page couldn\u2019t load\"\n    i18n-title=\"\n      Page couldn\u2019t load|Empty state label when there is connectivity error@@messages-request.error.connectivity.title\"\n    subtitle=\"Try to reload the page or contact the system administrator.\"\n    i18n-subtitle=\"\n      Not found error subtitle|Empty state subtitle label when there is connectivity\n      error@@messages-request.error.connectivity.subtitle\"\n    iconModifier=\"error-outline\"\n    iconSize=\"xxl\"\n  ></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'MessagesRequestUnknownIdError'\"\n    class=\"bb-state-container\"\n    title=\"Unknown ID\"\n    i18n-title=\"Unknown ID|Empty state label when there is unknown ID error@@messages-request.error.unknown-id.title\"\n    subtitle=\"There is no ID passed with URL. For more information contact your system administrator.\"\n    i18n-subtitle=\"\n      Unknown ID Error subtitle|Empty state subtitle label when there is unknown id\n      error@@messages-request.error.unknown-id.subtitle\"\n    iconModifier=\"error\"\n  ></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'MessagesRequestNotFound'\"\n    class=\"bb-state-container\"\n    title=\"This item cannot be found\"\n    i18n-title=\"\n      This item cannot be found|Empty state label when there is not found error@@messages-request.error.not-found.title\"\n    subtitle=\"It may have been deleted. For more info please contact your bank.\"\n    i18n-subtitle=\"\n      Not found error subtitle|Empty state subtitle label when there is not found\n      error@@messages-request.error.not-found.subtitle\"\n    iconModifier=\"error-outline\"\n    iconSize=\"xxl\"\n  ></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    class=\"bb-state-container\"\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected\n      error@@messages-request.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected error subtitle|Empty state subtitle label when there is an unexpected\n      error@@messages-request.error.unexpected.subtitle\"\n    iconModifier=\"error-outline\"\n    iconSize=\"xxl\"\n  ></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1$6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesRequestErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-request-error, bb-messages-request-error-ui',
                    templateUrl: './messages-request-error.component.html',
                }]
        }], propDecorators: { error: [{
                type: Input
            }] } });

const uiModules$3 = [EmptyStateModule];
class MessagesRequestErrorModule {
}
MessagesRequestErrorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesRequestErrorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesRequestErrorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesRequestErrorModule, declarations: [MessagesRequestErrorComponent], imports: [CommonModule, EmptyStateModule], exports: [MessagesRequestErrorComponent, EmptyStateModule] });
MessagesRequestErrorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesRequestErrorModule, imports: [[CommonModule, ...uiModules$3], EmptyStateModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesRequestErrorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MessagesRequestErrorComponent],
                    exports: [MessagesRequestErrorComponent, ...uiModules$3],
                    imports: [CommonModule, ...uiModules$3],
                }]
        }] });

class MessagesClientUploadAttachmentsService {
    constructor(service) {
        this.service = service;
    }
    /**
     * Delete attachments by ids
     *
     * @param ids Attachments list
     * @returns Delete attachments stream
     */
    deleteAttachments(ids) {
        return this.service.deleteMessageAttachments({ ids });
    }
    /**
     * Upload attachments
     *
     * @param attachment Attachment
     * @returns Post message attachments stream
     */
    uploadAttachment(attachment) {
        return this.service.postMessageAttachments({ attachment });
    }
}
MessagesClientUploadAttachmentsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientUploadAttachmentsService, deps: [{ token: i1.MessagecenterHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesClientUploadAttachmentsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientUploadAttachmentsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientUploadAttachmentsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagecenterHttpService }]; } });

const DefaultWidgetProperties = {
    createMessageOpenEventName: 'bb.event.messages.create.message.open',
    createMessageClosedEventName: 'bb.event.messages.create.message.close',
    itemsPerPage: 10,
    mailboxType: '',
    customerServiceTitle: 'Customer Service',
    viewType: 'all',
    hideAssignedToColumn: false,
    showMailboxTypes: true,
};
class BaseConversationsListPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
    }
    /**
     * Quantity of items to show per page/to add per request, used for Client and Employee widget
     */
    get itemsPerPage() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.itemsPerPage);
        }
        return this.itemModel.property('itemsPerPage', DefaultWidgetProperties.itemsPerPage);
    }
    /**
     * Event published to open Create message modal widget, used for Client and Employee widget
     */
    get createMessageOpenEventName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.createMessageOpenEventName);
        }
        return this.itemModel.property('createMessageOpenEventName', DefaultWidgetProperties.createMessageOpenEventName);
    }
    /**
     * Event published when Create message modal widget was closed,
     * used for Client and Employee widget to update list of conversations
     */
    get createMessageClosedEventName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.createMessageClosedEventName);
        }
        return this.itemModel.property('createMessageClosedEventName', DefaultWidgetProperties.createMessageClosedEventName);
    }
    /**
     * Mailbox type property, used for Client widget
     */
    get mailboxType() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.mailboxType);
        }
        return this.itemModel.property('mailboxType', DefaultWidgetProperties.mailboxType);
    }
    /**
     * Customer service title, localizable, used for Client widget
     */
    get customerServiceTitle() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.customerServiceTitle);
        }
        return this.itemModel.property('customerServiceTitle', DefaultWidgetProperties.customerServiceTitle);
    }
    /**
     * View type for conversations list (all, assigned, unassigned, resolved, my-resolved, drafts),
     * used for Employee widget
     */
    get viewType() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.viewType);
        }
        return this.itemModel.property('viewType', DefaultWidgetProperties.viewType);
    }
    /**
     * Property to hide `Assigned to` column, used for Employee widget
     */
    get hideAssignedToColumn() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.hideAssignedToColumn);
        }
        return this.itemModel.property('hideAssignedToColumn', DefaultWidgetProperties.hideAssignedToColumn);
    }
    /**
     * Property to show mailbox types (inbox and sent), used for Employee widget
     */
    get showMailboxTypes() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.showMailboxTypes);
        }
        return this.itemModel.property('showMailboxTypes', DefaultWidgetProperties.showMailboxTypes);
    }
}
BaseConversationsListPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListPropertiesService, deps: [{ token: i1$1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BaseConversationsListPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class BaseConversationsListWidgetComponent {
    constructor(shared, activatedRoute, properties) {
        this.shared = shared;
        this.activatedRoute = activatedRoute;
        this.properties = properties;
        /**
         * Emits id of the selected conversation
         */
        this.conversationId = new EventEmitter();
        /**
         * Emits filter object to keep widget filter params
         */
        this.filter = new EventEmitter();
        /**
         * The `Unsubscribe` subject.
         */
        this.unsubscribe$ = new Subject();
        /**
         * The loading parameter indicating the starting page for the data to be loaded from.
         */
        this.from$ = new BehaviorSubject(0);
        /**
         * The parameters object with the starting page number.
         */
        this.filterParams = {
            from: 0,
        };
        /**
         * The parameters subject with applied filters.
         */
        this.filterParams$ = this.getRouteParam(this.activatedRoute, 'filter').pipe(takeUntil(this.unsubscribe$), map(params => {
            if (params) {
                try {
                    return JSON.parse(params);
                }
                catch (err) { }
            }
            return {};
        }));
    }
    /**
     * The method to change the page and load conversations corresponding to that page.
     *
     * @param page Page number
     */
    onPageChange(page) {
        if (page || page === 0) {
            this.from$.next(page);
            this.filterParams.from = page;
            this.emitFilterParams(this.filterParams);
        }
    }
    /**
     * The method to switch to another mailbox type and load corresponding data.
     *
     * @param mailbox Mailbox type
     */
    onMailboxApply(mailbox) {
        this.from$.next(0);
        this.filterParams = this.setMailboxTypedParams(mailbox);
        this.emitFilterParams(this.filterParams);
    }
    /**
     * The method to fetch conversation list according to the applied filter parameters.
     *
     * @param obj Filter params
     */
    onFilterFormApply(obj) {
        this.from$.next(0);
        this.filterParams = this.setFilterFormParams(obj);
        this.emitFilterParams(this.filterParams);
    }
    /**
     * The method to open the draft thread.
     *
     * @param draft Draft data
     */
    openDraft(draft) {
        if ('conversationId' in draft) {
            this.conversationId.emit(draft.conversationId);
        }
        else {
            this.properties.createMessageOpenEventName
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(eventName => this.shared.eventBusPublish(eventName, { draftId: draft.id }));
        }
    }
    /**
     * The method to open the conversation thread.
     *
     * @param conversation Conversation data
     */
    openConversation(conversation) {
        this.conversationId.emit(typeof conversation === 'string' ? conversation : conversation.id);
    }
    /**
     * The method to open the error notification.
     *
     * @param error Http error response
     */
    showErrorNotification(error) {
        this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
        return EMPTY;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    /**
     * The method to emit the filtering parameters.
     *
     * @param filterParams Filter params data
     */
    emitFilterParams(filterParams) {
        const params = JSON.stringify(filterParams);
        this.filter.emit(params);
    }
    setMailboxTypedParams(mailboxType) {
        return {
            from: 0,
            mailboxType,
        };
    }
    setFilterFormParams(filterParams) {
        return Object.assign({ from: 0 }, filterParams);
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
BaseConversationsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListWidgetComponent, deps: [{ token: SharedMethodsService }, { token: i2$2.ActivatedRoute }, { token: BaseConversationsListPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
BaseConversationsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationsListWidgetComponent, selector: "ng-component", outputs: { conversationId: "conversationId", filter: "filter" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: SharedMethodsService }, { type: i2$2.ActivatedRoute }, { type: BaseConversationsListPropertiesService }]; }, propDecorators: { conversationId: [{
                type: Output
            }], filter: [{
                type: Output
            }] } });

class FilterService {
}

class FilterConversationsListComponent {
    constructor(service, fb, shared) {
        this.service = service;
        this.fb = fb;
        this.shared = shared;
        /**
         * Configs for topic selector placeholder
         */
        this.topicPlaceholderConfig = topicPlaceholderConfig;
        /**
         * Event emitter for apply action
         */
        this.apply = new EventEmitter();
        /**
         * Event emitter for clear action
         */
        this.clear = new EventEmitter();
        /**
         * The filters form reference.
         */
        this.filterForm = this.fb.group({
            date: [''],
            topic: [''],
            user: [''],
        });
        /**
         * The applied flag.
         */
        this.applied = false;
        /**
         * The opened flag.
         */
        this.opened = false;
        /**
         * The stream with the topic list.
         */
        this.topics$ = new Subject();
        /**
         * The method to get the typeahead options.
         */
        this.typeaheadOptions = {
            ngbTypeahead: this.searchUsers.bind(this),
            resultFormatter: (item) => item.fullName,
            inputFormatter: (item) => item.fullName,
        };
        this.filterParams$ = new BehaviorSubject({});
        this.unsubscribe$ = new Subject();
    }
    /**
     * Observable filter params to init component with
     */
    set filterParams(value) {
        if (value && this.checkFilterParams(this.filterParams$.getValue(), value)) {
            this.applied = true;
            this.filterParams$.next(value);
        }
    }
    ngOnInit() {
        combineLatest([this.filterParams$, this.topics$])
            .pipe(switchMap(([params, topics]) => {
            const { topicId, endDate, startDate, userId } = params;
            if (topics && topicId) {
                this.filterForm.controls['topic'].setValue(topics.find((topic) => topic.id === topicId));
            }
            if (startDate && endDate) {
                this.filterForm.controls['date'].setValue({
                    from: new Date(startDate).toISOString(),
                    to: new Date(endDate).toISOString(),
                });
            }
            if (userId && this.service.getUserById) {
                return this.service
                    .getUserById(userId)
                    .pipe(tap(user => user && this.filterForm.controls['user'].setValue(Object.assign(Object.assign({}, user), { id: params.userId }))));
            }
            return EMPTY;
        }), takeUntil(this.unsubscribe$))
            .subscribe();
        this.service
            .getTopics()
            .pipe(take(1))
            .subscribe(topics => {
            this.topics$.next(topics);
            this.topics$.complete();
        });
    }
    /**
     * The method to submit the form.
     */
    submit() {
        const applyObject = this.convertToFilterParams(this.filterForm);
        this.applied = !!Object.keys(applyObject).length;
        this.opened = false;
        this.apply.emit(applyObject);
    }
    /**
     * The method to reset the form.
     *
     * @param apply Flag to submit or not the form
     */
    reset(apply = false) {
        if (apply) {
            this.filterForm.valueChanges.pipe(take(1)).subscribe(() => {
                this.submit();
            });
        }
        this.filterForm.reset();
    }
    /**
     * The method to open or close the filter form.
     */
    triggerOpened() {
        this.opened = !this.opened;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    convertToFilterParams(form) {
        return Object.assign(Object.assign(Object.assign({}, (form.value.topic && { topicId: form.value.topic.id })), (form.value.user && { userId: form.value.user.id })), (form.value.date && {
            startDate: this.formatDate(form.value.date.from),
            endDate: this.formatDate(form.value.date.to),
        }));
    }
    formatDate(date) {
        const d = new Date(date);
        const year = d.getFullYear();
        const month = d.getMonth() + 1;
        const dt = d.getDate();
        const finalDt = dt < 10 ? `0${dt}` : dt.toString();
        const finalMonth = month < 10 ? `0${month}` : month.toString();
        return `${year}-${finalMonth}-${finalDt}`;
    }
    checkFilterParams(curr, next) {
        if (!Object.keys(next).length || !(next && (next.userId || next.topicId || (next.startDate && next.endDate)))) {
            return false;
        }
        for (const key in next) {
            if (curr[key] && curr[key] === next[key]) {
                return false;
            }
        }
        return true;
    }
    searchUsers(text) {
        return text.pipe(debounceTime(500), distinctUntilChanged(), switchMap(value => {
            if (!this.service.getUsers || !value.length) {
                return EMPTY;
            }
            else {
                return this.service.getUsers(value).pipe(map(response => response && response.identities), catchError(err => {
                    this.shared.openNotification(this.shared.getErrorMessage(err), 'error');
                    return EMPTY;
                }));
            }
        }));
    }
}
FilterConversationsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: FilterConversationsListComponent, deps: [{ token: FilterService }, { token: i4.FormBuilder }, { token: SharedMethodsService }], target: i0.ɵɵFactoryTarget.Component });
FilterConversationsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: FilterConversationsListComponent, selector: "bb-messages-filter-conversation-list", inputs: { headerClass: "headerClass", bodyClass: "bodyClass", filterParams: "filterParams" }, outputs: { apply: "apply", clear: "clear" }, ngImport: i0, template: "<ng-container\n  bbFilterConversationsListCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    topics: topics$ | async\n  }\"\n></ng-container>\n\n<ng-template bbFilterConversationsListCustomizable let-host let-topics=\"context.topics\">\n  <div [ngClass]=\"host.headerClass\" data-role=\"filters-header\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item\">\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            class=\"bb-button-bar__button\"\n            bbButton\n            [color]=\"host.applied ? 'primary' : 'secondary'\"\n            [ngClass]=\"{ active: host.opened }\"\n            (click)=\"host.triggerOpened()\"\n            data-role=\"filter-button\"\n          >\n            <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n            <span\n              *ngIf=\"host.applied; else filtersTextDefault\"\n              i18n=\"\n                Filters applied|Text for filter button if filter was\n                applied@@messages.messagesCommon.conversationsListFilterConversation.filtersAppliedText\"\n              >Filters applied</span\n            >\n          </button>\n          <button\n            class=\"bb-button-bar__button\"\n            bbButton\n            color=\"link\"\n            *ngIf=\"host.applied\"\n            i18n=\"Clear filters@@messages.messagesCommon.conversationsListFilterConversation.clearFilterssButtonText\"\n            (click)=\"host.reset(true)\"\n            data-role=\"clear-header-button\"\n          >\n            Clear filters\n          </button>\n        </div>\n      </div>\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"host.opened\" [ngClass]=\"host.bodyClass\" data-role=\"filters-form-container\">\n    <form [formGroup]=\"host.filterForm\" (submit)=\"host.submit()\">\n      <div class=\"form-row form-group\">\n        <div class=\"col-4\">\n          <bb-dropdown-single-select-ui\n            *ngIf=\"\n              topics?.length\n                ? topicPlaceholderConfig.selectTopicPlaceholder\n                : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n            \"\n            label=\"Topic\"\n            data-role=\"topics\"\n            i18n-label=\"Topic label@@messages.messagesCommon.conversationsListFilterConversation.topicLabel\"\n            [options]=\"topics\"\n            displayAttributePath=\"name\"\n            [attr.placeholder]=\"topicPlaceholder\"\n            [placeholder]=\"topicPlaceholder\"\n            formControlName=\"topic\"\n          ></bb-dropdown-single-select-ui>\n        </div>\n        <div class=\"col-4\">\n          <bb-search-box-ui\n            label=\"Customer\"\n            i18n-label=\"\n              Customer label text@@messages.messagesCommon.conversationsListFilterConversation.customerLabelText\"\n            formControlName=\"user\"\n            placeholder=\"Search by name\"\n            i18n-placeholder=\"\n              Search by name\n              placeholder@@messages.messagesCommon.conversationsListFilterConversation.searchByNamePlaceholderText\"\n            [typeaheadOptions]=\"host.typeaheadOptions\"\n          ></bb-search-box-ui>\n        </div>\n        <div class=\"col-4\">\n          <bb-input-datepicker-ui\n            label=\"Date\"\n            i18n-label=\"Date label text@@messages.messagesCommon.conversationsListFilterConversation.dateLabelText\"\n            formControlName=\"date\"\n            [rangeSelection]=\"true\"\n          ></bb-input-datepicker-ui>\n        </div>\n      </div>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n          i18n=\"Close@@messages.messagesCommon.conversationsListFilterConversation.closeButtonText\"\n          (click)=\"host.triggerOpened()\"\n          data-role=\"close-filter\"\n        >\n          Close\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          i18n=\"Apply@@messages.messagesCommon.conversationsListFilterConversation.applyButtonText\"\n          data-role=\"apply-filter\"\n        >\n          Apply\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          i18n=\"Clear All@@messages.messagesCommon.conversationsListFilterConversation.clearAllButtonText\"\n          (click)=\"host.reset()\"\n          data-role=\"clear-filter\"\n        >\n          Clear All\n        </button>\n      </div>\n    </form>\n  </div>\n\n  <ng-template #filtersTextDefault>\n    <span\n      i18n=\"\n        Filters|Text for filter button if filter was\n        applied@@messages.messagesCommon.conversationsListFilterConversation.filtersText\"\n      >Filters</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i8.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i10.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i7.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i0.forwardRef(function () { return FilterConversationsListCustomizableDirective; }), selector: "[bbFilterConversationsListCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i18.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i4.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i4.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i4.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i4.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i0.forwardRef(function () { return i2$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: FilterConversationsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-filter-conversation-list',
                    templateUrl: './filter-conversations-list.component.html',
                }]
        }], ctorParameters: function () { return [{ type: FilterService }, { type: i4.FormBuilder }, { type: SharedMethodsService }]; }, propDecorators: { headerClass: [{
                type: Input
            }], bodyClass: [{
                type: Input
            }], filterParams: [{
                type: Input
            }], apply: [{
                type: Output
            }], clear: [{
                type: Output
            }] } });
class FilterConversationsListCustomizableDirective extends BbTemplate {
}
FilterConversationsListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: FilterConversationsListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
FilterConversationsListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: FilterConversationsListCustomizableDirective, selector: "[bbFilterConversationsListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: FilterConversationsListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbFilterConversationsListCustomizable]',
                }]
        }] });

const components$2 = [BaseConversationsListWidgetComponent, FilterConversationsListComponent];
const directives$2 = [FilterConversationsListCustomizableDirective];
const uiModules$2 = [ButtonModule, IconModule, DropdownSingleSelectModule, SearchBoxModule, InputDatepickerModule];
class BaseConversationsListWidgetModule {
}
BaseConversationsListWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BaseConversationsListWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListWidgetModule, declarations: [BaseConversationsListWidgetComponent, FilterConversationsListComponent, FilterConversationsListCustomizableDirective], imports: [CommonModule, ReactiveFormsModule, ButtonModule, IconModule, DropdownSingleSelectModule, SearchBoxModule, InputDatepickerModule], exports: [ButtonModule, IconModule, DropdownSingleSelectModule, SearchBoxModule, InputDatepickerModule, BaseConversationsListWidgetComponent, FilterConversationsListComponent, FilterConversationsListCustomizableDirective] });
BaseConversationsListWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListWidgetModule, imports: [[CommonModule, ReactiveFormsModule, ...uiModules$2], ButtonModule, IconModule, DropdownSingleSelectModule, SearchBoxModule, InputDatepickerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ReactiveFormsModule, ...uiModules$2],
                    declarations: [...components$2, ...directives$2],
                    exports: [...uiModules$2, ...components$2, ...directives$2],
                }]
        }] });

var MailboxType;
(function (MailboxType) {
    MailboxType["inbox"] = "inbox";
    MailboxType["outbox"] = "outbox";
    MailboxType["all"] = "all";
})(MailboxType || (MailboxType = {}));

var ReadUnreadStatusType;
(function (ReadUnreadStatusType) {
    ReadUnreadStatusType["READ"] = "READ";
    ReadUnreadStatusType["UNREAD"] = "UNREAD";
})(ReadUnreadStatusType || (ReadUnreadStatusType = {}));

class AbstractBaseMessagesConversationThreadService {
    /**
     * Map attachments
     *
     * @param attachments Attachments list
     * @returns Mapped attachments list with linkStream update
     */
    attachmentsMapper(attachments) {
        return attachments.map(attachment => (Object.assign(Object.assign({}, attachment), { linkStream: this.downloadFile(attachment.id) })));
    }
}

class BaseConversationThreadDraftsComponent {
    constructor(apiThreadService, shared) {
        this.apiThreadService = apiThreadService;
        this.shared = shared;
    }
    saveDraft(conversationId, body) {
        return of(this.draftResponse).pipe(switchMap(draft => (draft ? this.updateDraft(conversationId, body) : this.createDraft(conversationId, body))), tap(() => this.shared.openNotification(this.draftSaveSuccessTpl, 'success')), catchError(error => {
            this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
            return EMPTY;
        }));
    }
    deleteDraft() {
        if (this.apiThreadService.deleteDraft && this.draftResponse) {
            return this.apiThreadService.deleteDraft(this.draftResponse.id).pipe(tap(() => {
                this.draftResponse = undefined;
                this.shared.openNotification(this.draftDeleteSuccessTpl, 'success');
            }), catchError(error => {
                this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
                return EMPTY;
            }));
        }
        return of(undefined);
    }
    createDraft(conversationId, body) {
        if (this.apiThreadService.createDraft) {
            return this.apiThreadService.createDraft(conversationId, body).pipe(tap(res => (this.draftResponse = {
                id: res ? res.id : '',
                createdAt: new Date().toString(),
            })));
        }
        return of(undefined);
    }
    updateDraft(conversationId, body) {
        if (this.apiThreadService.updateDraft) {
            return this.apiThreadService.updateDraft(conversationId, body);
        }
        return of(undefined);
    }
}
BaseConversationThreadDraftsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationThreadDraftsComponent, deps: [{ token: AbstractBaseMessagesConversationThreadService }, { token: SharedMethodsService }], target: i0.ɵɵFactoryTarget.Component });
BaseConversationThreadDraftsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationThreadDraftsComponent, selector: "ng-component", viewQueries: [{ propertyName: "draftSaveSuccessTpl", first: true, predicate: ["draftSaveSuccess"], descendants: true }, { propertyName: "draftDeleteSuccessTpl", first: true, predicate: ["draftDeleteSuccess"], descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationThreadDraftsComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: AbstractBaseMessagesConversationThreadService }, { type: SharedMethodsService }]; }, propDecorators: { draftSaveSuccessTpl: [{
                type: ViewChild,
                args: ['draftSaveSuccess']
            }], draftDeleteSuccessTpl: [{
                type: ViewChild,
                args: ['draftDeleteSuccess']
            }] } });

class BaseConversationThreadComponent extends BaseConversationThreadDraftsComponent {
    constructor(apiThreadService, activatedRoute, shared, confirmModalService, uploadService, encodingService) {
        super(apiThreadService, shared);
        this.apiThreadService = apiThreadService;
        this.activatedRoute = activatedRoute;
        this.shared = shared;
        this.confirmModalService = confirmModalService;
        this.uploadService = uploadService;
        this.encodingService = encodingService;
        /**
         * Event emitted when this thread should be closed or navigation should be changed to previous or another widget
         */
        this.back = new EventEmitter();
        /**
         * The conversation thread ID.
         */
        this.id = `base-conversation-thread-component-${BaseConversationThreadComponent.counter++}`;
        /**
         * The manipulation types enum (`resolve`, `unresolve`, `assign`, `unassign`, `discard`,
         * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`).
         */
        this.manipulationTypes = ManipulationType;
        this.unsubscribe = new Subject();
        this.replyPressed = new Subject();
        this.conversationId$ = new BehaviorSubject(undefined);
        /**
         * The loading flag for the data fetched through the HTTP request.
         */
        this.loading = true;
        /**
         * The flag defining if the reply is opened or not.
         */
        this.replyOpened = false;
        /**
         * The flag defining if the topic alert is closed or not.
         */
        this.topicAlertClosed = false;
        /**
         * The modal for action confirmation.
         */
        this.confirmationModal = {
            opened: false,
            type: undefined,
        };
        /**
         * The reply form.
         */
        this.replyFormGroup = new FormGroup({
            body: new FormControl(),
            attachments: new FormControl(),
        });
        /**
         * The form loading flag.
         */
        this.formLoading = false;
        this.conversationId = this.getConversationId();
        this.markAsReadUnreadSubject = new BehaviorSubject(ReadUnreadStatusType.READ);
        this.markAsReadUnreadStream = this.getMarkAsReadUnreadStream();
    }
    /**
     * Selected conversation id setter
     */
    set selectedConversationId(value) {
        this.conversationId$.next(value);
    }
    /**
     * Conversation id getter
     */
    get conversationIdValue() {
        return this.conversationId$.getValue();
    }
    ngOnDestroy() {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    /**
     * The method to save the draft.
     */
    onSaveDraft() {
        if (this.replyFormGroup.valid) {
            this.saveDraft(this.conversationIdValue ? this.conversationIdValue : '', this.convertFormValue())
                .pipe(takeUntil(this.unsubscribe))
                .subscribe();
        }
    }
    /**
     * The method that is used for component initialization to subscribe for the read-unread status and
     * to toggle the reply form updates.
     */
    initSubscriptions() {
        this.markAsReadUnreadStream.pipe(takeUntil(this.unsubscribe)).subscribe();
        this.confirmModalService.emitToggleModal$.pipe(takeUntil(this.unsubscribe)).subscribe(({ opened, type }) => {
            this.confirmationModal = { opened, type };
            if (!opened && (type === ManipulationType.discard || type === ManipulationType.discardDraft)) {
                this.toggleReplyForm(false);
            }
        });
    }
    /**
     * The method to navigate back.
     */
    navigateBack() {
        this.back.emit();
    }
    /**
     * The method to toggle the reply form.
     *
     * @param flag Toggle status
     */
    toggleReplyForm(flag) {
        this.replyOpened = flag;
        if (!flag) {
            this.uploadService.reset(true);
            this.replyFormGroup.reset();
        }
        else {
            setTimeout(() => this.richTextEditor && this.richTextEditor.labelClick());
        }
    }
    /**
     * The method to submit the reply.
     */
    reply() {
        this.replyFormGroup.markAsDirty();
        this.replyFormGroup.markAllAsTouched();
        if (this.replyFormGroup.valid) {
            this.replyPressed.next(this.convertFormValue());
        }
    }
    /**
     * The method that defines whether the control is valid or not.
     *
     * @param field Field name
     * @returns Is form field valid flag
     */
    isInvalidControl(field) {
        const control = this.getControl(field);
        return !!control && control.touched && control.invalid;
    }
    /**
     * The method to get any errors generated by failing validation, or null if there are no errors.
     *
     * @param field Field name
     * @param type Error type
     */
    hasError(field, type) {
        const control = this.getControl(field);
        return control && control.errors && control.errors[type];
    }
    getConversationId() {
        return this.conversationId$.pipe(switchMap(id => {
            if (!id) {
                this.errorResponse = new UnknownIdError();
                return EMPTY;
            }
            return of(id);
        }), shareReplayOnce());
    }
    getMarkAsReadUnreadStream() {
        return combineLatest([this.markAsReadUnreadSubject, this.conversationId]).pipe(switchMap(([status, conversationId]) => this.apiThreadService.markConversationsAsReadUnread({ status, ids: [conversationId] }).pipe(tap(() => status === ReadUnreadStatusType.UNREAD && this.navigateBack()), catchError(error => {
            this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
            return EMPTY;
        }))));
    }
    convertFormValue() {
        const { body, attachments } = this.replyFormGroup.value;
        return Object.assign({ body: this.encodingService.b64Encode(body) }, ((attachments === null || attachments === void 0 ? void 0 : attachments.length) && { attachments: attachments.map(item => item.id) }));
    }
    getControl(field) {
        var _a;
        return (_a = this.replyFormGroup) === null || _a === void 0 ? void 0 : _a.controls[field];
    }
}
BaseConversationThreadComponent.counter = 0;
BaseConversationThreadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationThreadComponent, deps: [{ token: AbstractBaseMessagesConversationThreadService }, { token: i2$2.ActivatedRoute }, { token: SharedMethodsService }, { token: MessagesManipulationConfirmModalService }, { token: MessagesUploadAttachmentsService }, { token: MessagesEncodingService }], target: i0.ɵɵFactoryTarget.Component });
BaseConversationThreadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationThreadComponent, selector: "ng-component", inputs: { selectedConversationId: "selectedConversationId" }, outputs: { back: "back" }, viewQueries: [{ propertyName: "replySuccessTpl", first: true, predicate: ["conversationReplySuccess,messageReplySuccess"], descendants: true }, { propertyName: "deleteSuccessTpl", first: true, predicate: ["conversationDeleteSuccess,messageDeleteSuccess"], descendants: true }, { propertyName: "richTextEditor", first: true, predicate: ["richTextEditor"], descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationThreadComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: AbstractBaseMessagesConversationThreadService }, { type: i2$2.ActivatedRoute }, { type: SharedMethodsService }, { type: MessagesManipulationConfirmModalService }, { type: MessagesUploadAttachmentsService }, { type: MessagesEncodingService }]; }, propDecorators: { back: [{
                type: Output
            }], selectedConversationId: [{
                type: Input
            }], replySuccessTpl: [{
                type: ViewChild,
                args: ['conversationReplySuccess,messageReplySuccess']
            }], deleteSuccessTpl: [{
                type: ViewChild,
                args: ['conversationDeleteSuccess,messageDeleteSuccess']
            }], richTextEditor: [{
                type: ViewChild,
                args: ['richTextEditor']
            }] } });

class BaseMessagesConversationThreadModule {
}
BaseMessagesConversationThreadModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseMessagesConversationThreadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BaseMessagesConversationThreadModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseMessagesConversationThreadModule, declarations: [BaseConversationThreadComponent, BaseConversationThreadDraftsComponent], imports: [CommonModule], exports: [BaseConversationThreadComponent, BaseConversationThreadDraftsComponent] });
BaseMessagesConversationThreadModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseMessagesConversationThreadModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseMessagesConversationThreadModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [BaseConversationThreadComponent, BaseConversationThreadDraftsComponent],
                    imports: [CommonModule],
                    exports: [BaseConversationThreadComponent, BaseConversationThreadDraftsComponent],
                }]
        }] });

var EmployeeMailoutStatus;
(function (EmployeeMailoutStatus) {
    EmployeeMailoutStatus["Created"] = "CREATED";
    EmployeeMailoutStatus["Preparing"] = "PREPARING";
    EmployeeMailoutStatus["Ready"] = "READY";
    EmployeeMailoutStatus["Processing"] = "PROCESSING";
    EmployeeMailoutStatus["Done"] = "DONE";
    EmployeeMailoutStatus["Error"] = "ERROR";
    EmployeeMailoutStatus["Cancelled"] = "CANCELLED";
    EmployeeMailoutStatus["WIP"] = "CANCELLATION_IN_PROCESS";
})(EmployeeMailoutStatus || (EmployeeMailoutStatus = {}));

class MessagesMailoutStatusComponent {
    constructor() {
        /**
         * Input that toggles between shortened and full status title text
         */
        this.shortTitle = false;
        /**
         * Mailout statuses enum: Created = `CREATED`, Preparing = `PREPARING`, Ready = `READY`,
         * Processing = `PROCESSING`, Done = `DONE`, Error = `ERROR`, Cancelled = `CANCELLED`, WIP = `CANCELLATION_IN_PROCESS`
         */
        this.employeeMailoutStatus = EmployeeMailoutStatus;
    }
}
MessagesMailoutStatusComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesMailoutStatusComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MessagesMailoutStatusComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesMailoutStatusComponent, selector: "bb-messages-mailout-status", inputs: { mailoutStatus: "mailoutStatus", shortTitle: "shortTitle" }, ngImport: i0, template: "<ng-container bbMessagesMailoutStatusCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbMessagesMailoutStatusCustomizable let-hostRef>\n  <ng-container [ngSwitch]=\"hostRef.mailoutStatus\">\n    <ng-container *ngSwitchCase=\"hostRef.employeeMailoutStatus.Done\">\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"Com\"\n        i18n-text=\"\n          Com|Badge text if mailout status is 'Completed' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.completed.short\"\n        color=\"success\"\n        bbTooltip=\"Completed\"\n        i18n-bbTooltip=\"\n          Completed|Tooltip text if mailout status is 'Completed'@@messages.mailoutStatus.statusTooltip.completed\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n      </bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Completed\"\n          i18n-text=\"\n            Completed|Badge text if mailout status is 'Completed'@@messages.mailoutStatus.statusBadge.completed\"\n          color=\"success\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"hostRef.employeeMailoutStatus.Error\">\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"Err\"\n        i18n-text=\"\n          Err|Badge text if mailout status is 'Error' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.error.short\"\n        color=\"warning\"\n        bbTooltip=\"Error\"\n        i18n-bbTooltip=\"Error|Tooltip text if mailout status is 'Error'@@messages.mailoutStatus.statusTooltip.error\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n      </bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Error\"\n          i18n-text=\"Error|Badge text if mailout status is 'Error'@@messages.mailoutStatus.statusBadge.error\"\n          color=\"warning\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"hostRef.employeeMailoutStatus.Cancelled\">\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"Del\"\n        i18n-text=\"\n          Del|Badge text if mailout status is 'Deleted' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.deleted.short\"\n        color=\"danger\"\n        bbTooltip=\"Deleted\"\n        i18n-bbTooltip=\"\n          Deleted|Tooltip text if mailout status is 'Deleted'@@messages.mailoutStatus.statusTooltip.deleted\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n      </bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Deleted\"\n          i18n-text=\"Deleted|Badge text if mailout status is 'Deleted'@@messages.mailoutStatus.statusBadge.deleted\"\n          color=\"danger\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"hostRef.employeeMailoutStatus.WIP\">\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"WIP\"\n        i18n-text=\"\n          WIP|Badge text if mailout status is 'Deletion in progress' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.wip.short\"\n        color=\"danger\"\n        bbTooltip=\"Deletion in progress\"\n        i18n-bbTooltip=\"\n          Deletion in progress|Tooltip text if mailout status is 'Deletion in\n          progress'@@messages.mailoutStatus.statusTooltip.wip\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n      </bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Deletion in progress\"\n          i18n-text=\"\n            Deletion in progress|Badge text if mailout status is 'Deletion in\n            progress'@@messages.mailoutStatus.statusBadge.wip\"\n          color=\"danger\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchDefault>\n      <bb-badge-ui\n        *ngIf=\"hostRef.shortTitle; else badgeWithoutTooltip\"\n        text=\"Pro\"\n        i18n-text=\"\n          Pro|Badge text if mailout status is 'Processing' shortened to 3 letters\n          @@messages.mailoutStatus.statusBadge.processing.short\"\n        color=\"primary\"\n        bbTooltip=\"Processing\"\n        i18n-bbTooltip=\"\n          Processing|Tooltip text if mailout status is 'Processing'@@messages.mailoutStatus.statusTooltip.processing\"\n        container=\"body\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      ></bb-badge-ui>\n\n      <ng-template #badgeWithoutTooltip>\n        <bb-badge-ui\n          text=\"Processing\"\n          i18n-text=\"\n            Processing|Badge text if mailout status is 'Processing'@@messages.mailoutStatus.statusBadge.processing\"\n          color=\"primary\"\n        >\n        </bb-badge-ui>\n      </ng-template>\n    </ng-container>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$7.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i0.forwardRef(function () { return MessagesMailoutStatusCustomizableDirective; }), selector: "[bbMessagesMailoutStatusCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesMailoutStatusComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-mailout-status',
                    templateUrl: './messages-mailout-status.component.html',
                }]
        }], propDecorators: { mailoutStatus: [{
                type: Input
            }], shortTitle: [{
                type: Input
            }] } });
class MessagesMailoutStatusCustomizableDirective extends BbTemplate {
}
MessagesMailoutStatusCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesMailoutStatusCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesMailoutStatusCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesMailoutStatusCustomizableDirective, selector: "[bbMessagesMailoutStatusCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesMailoutStatusCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesMailoutStatusCustomizable]',
                }]
        }] });

const components$1 = [MessagesMailoutStatusComponent];
const directives$1 = [MessagesMailoutStatusCustomizableDirective];
const uiModules$1 = [BadgeModule, TooltipModule];
class MessagesMailoutStatusModule {
}
MessagesMailoutStatusModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesMailoutStatusModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesMailoutStatusModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesMailoutStatusModule, declarations: [MessagesMailoutStatusComponent, MessagesMailoutStatusCustomizableDirective], imports: [CommonModule, BadgeModule, TooltipModule], exports: [MessagesMailoutStatusComponent, MessagesMailoutStatusCustomizableDirective, BadgeModule, TooltipModule] });
MessagesMailoutStatusModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesMailoutStatusModule, imports: [[CommonModule, ...uiModules$1], BadgeModule, TooltipModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesMailoutStatusModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components$1, ...directives$1],
                    exports: [...components$1, ...directives$1, ...uiModules$1],
                    imports: [CommonModule, ...uiModules$1],
                }]
        }] });

var EmployeeMailoutStatusLabels;
(function (EmployeeMailoutStatusLabels) {
    EmployeeMailoutStatusLabels["CREATED"] = "Processing";
    EmployeeMailoutStatusLabels["PREPARING"] = "Processing";
    EmployeeMailoutStatusLabels["READY"] = "Processing";
    EmployeeMailoutStatusLabels["PROCESSING"] = "Processing";
    EmployeeMailoutStatusLabels["DONE"] = "Completed";
    EmployeeMailoutStatusLabels["ERROR"] = "Error";
    EmployeeMailoutStatusLabels["CANCELLED"] = "Deleted";
    EmployeeMailoutStatusLabels["CANCELLATION_IN_PROCESS"] = "Deletion in progress";
})(EmployeeMailoutStatusLabels || (EmployeeMailoutStatusLabels = {}));

class MessagesEmployeeMailoutReviewService {
    constructor(mailoutService) {
        this.mailoutService = mailoutService;
    }
    /**
     * Create mailout
     *
     * @param bodyRequest Create mailout request body
     * @returns Create mailout stream
     */
    createMailout(bodyRequest) {
        return this.mailoutService.postMailout({ mailoutPostRequestBody: bodyRequest });
    }
    /**
     * Sanitize message body
     *
     * @param message Message body
     * @returns Mailout preview response stream
     */
    sanitizeMessageBody(message) {
        return this.mailoutService.postMailoutPreview({ mailoutPreviewRequestBody: { body: message } });
    }
}
MessagesEmployeeMailoutReviewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewService, deps: [{ token: i1.MailoutHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesEmployeeMailoutReviewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MailoutHttpService }]; } });

class MessagesEmployeeMailoutReviewComponent {
    constructor(encodingService, dataService, confirmModalService, sharedService) {
        this.encodingService = encodingService;
        this.dataService = dataService;
        this.confirmModalService = confirmModalService;
        this.sharedService = sharedService;
        /**
         * The cancel mailout output.
         */
        this.cancel = new EventEmitter();
        /**
         * The confirm operation output.
         */
        this.confirm = new EventEmitter();
        /**
         * The edit mailout output.
         */
        this.edit = new EventEmitter();
        /**
         * The sanitize error flag.
         */
        this.sanitizeError = false;
        /**
         * The sanitize loading flag.
         */
        this.sanitizeLoading = false;
        /**
         * The manipulation types enum: `resolve`, `unresolve`, `assign`, `unassign`, `discard`,
         * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`.
         */
        this.manipulationTypes = ManipulationType;
        /**
         * The confirmation modal model.
         */
        this.confirmationModal$ = this.confirmModalService.emitToggleModal$;
    }
    ngOnInit() {
        if (this.mailout) {
            this.sanitizedBody$ = this.sanitizeBody(this.encodingService.b64Encode(this.mailout.body || ''));
        }
    }
    sanitizeBody(body) {
        this.sanitizeLoading = true;
        return this.dataService.sanitizeMessageBody(body).pipe(map(data => data && this.encodingService.b64Decode(data.body)), catchError(() => {
            this.sanitizeError = true;
            return EMPTY;
        }), finalize(() => (this.sanitizeLoading = false)));
    }
    /**
     * The method to switch from the preview to the editing state.
     */
    onEdit() {
        this.edit.emit();
    }
    /**
     * The method to discard the modal.
     *
     * @param discardParam Should open modal flag
     */
    onDiscardModal(discardParam) {
        this.confirmModalService.toggleModal(discardParam, (discardParam && this.manipulationTypes.discardPreview) || undefined);
    }
    /**
     * The method to confirm the discard action.
     */
    onConfirmModal() {
        this.confirmModalService.toggleModal(false);
        this.cancel.emit();
    }
    /**
     * The method to save the mailout.
     *
     * @param employeeCreateMailoutFormModel Create mailout form model data
     */
    createMailout(_a) {
        var { body, subject, topic, attachments, notDeletable, recipientsDataId, template, important } = _a, rest = __rest(_a, ["body", "subject", "topic", "attachments", "notDeletable", "recipientsDataId", "template", "important"]);
        const finalValue = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, rest), { subject: '', topic: '', body: '', deletable: !notDeletable, important: !!important, recipientsData: {
                id: recipientsDataId[0].id,
            } }), (body && body.length && { body: this.encodingService.b64Encode(body) })), (subject && subject.length && { subject: subject })), (topic && topic.id && { topic: topic.id })), (attachments && attachments.length && { attachments: attachments.map(({ id }) => id) }));
        this.dataService.createMailout(finalValue).subscribe(() => this.sharedService.openNotification(this.mailoutCreateSuccessTpl), () => this.sharedService.openNotification(this.mailoutCreateErrorTpl, 'error'), () => this.confirm.emit());
    }
}
MessagesEmployeeMailoutReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewComponent, deps: [{ token: MessagesEncodingService }, { token: MessagesEmployeeMailoutReviewService }, { token: MessagesManipulationConfirmModalService }, { token: SharedMethodsService }], target: i0.ɵɵFactoryTarget.Component });
MessagesEmployeeMailoutReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewComponent, selector: "bb-messages-employee-mailout-review", inputs: { mailout: "mailout" }, outputs: { cancel: "cancel", confirm: "confirm", edit: "edit" }, viewQueries: [{ propertyName: "mailoutCreateSuccessTpl", first: true, predicate: ["mailoutCreateSuccess"], descendants: true }, { propertyName: "mailoutCreateErrorTpl", first: true, predicate: ["mailoutCreateError"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbMessagesEmployeeMailoutReviewCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    sanitizedBody: sanitizedBody$ | async,\n    confirmationModal: confirmationModal$ | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbMessagesEmployeeMailoutReviewCustomizable\n  let-host\n  let-sanitizedBody=\"context.sanitizedBody\"\n  let-confirmationModal=\"context.confirmationModal\"\n>\n  <div class=\"row bb-block bb-block--md\">\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review name label text@@messages.employeeCreateMailout.mailoutReview.name\"\n        data-role=\"mailout-name\"\n      >\n        Name\n      </div>\n      <p data-role=\"mailout-name-content\">{{ host.mailout?.mailoutName }}</p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review topic label text@@messages.employeeCreateMailout.mailoutReview.topic\"\n        data-role=\"mailout-topic\"\n      >\n        Topic\n      </div>\n      <p data-role=\"mailout-topic-content\">{{ host.mailout.topic?.name }}</p>\n    </div>\n    <div class=\"col-12\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review subject label text@@messages.employeeCreateMailout.mailoutReview.subject\"\n        data-role=\"mailout-subject\"\n      >\n        Subject\n      </div>\n      <p data-role=\"mailout-subject-content\">{{ host.mailout.subject }}</p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review read-only label text@@messages.employeeCreateMailout.mailoutReview.readOnly\"\n        data-role=\"mailout-readonly\"\n      >\n        Read only\n      </div>\n      <p\n        i18n=\"Review read-only label text@@messages.employeeCreateMailout.mailoutReview.readOnly.value\"\n        data-role=\"mailout-readonly-content\"\n      >\n        { host.mailout['read-only'] + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review delete label text@@messages.employeeCreateMailout.mailoutReview.delete\"\n        data-role=\"mailout-deletable\"\n      >\n        Users able to delete\n      </div>\n      <p\n        i18n=\"Review delete label text@@messages.employeeCreateMailout.mailoutReview.delete.value\"\n        data-role=\"mailout-deletable-content\"\n      >\n        { !!host.mailout?.notDeletable + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review important label text@@messages.employeeCreateMailout.mailoutReview.important\"\n        data-role=\"mailout-important\"\n      >\n        Important\n      </div>\n      <p\n        i18n=\"Review important label text@@messages.employeeCreateMailout.mailoutReview.important.value\"\n        data-role=\"mailout-important-content\"\n      >\n        { !!host.mailout?.important + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n  </div>\n\n  <div class=\"row bb-block bb-block--md\">\n    <div\n      class=\"col-12 bb-text-semi-bold bb-block bb-block--md\"\n      i18n=\"Review body label text@@messages.employeeCreateMailout.mailoutReview.body\"\n    >\n      Custom HTML body preview\n    </div>\n    <div class=\"col-12\">\n      <ng-container *ngIf=\"!host.sanitizeLoading; else sanitizeLoader\">\n        <ng-container *ngIf=\"!host.sanitizeError; else sanitizeError\">\n          <bb-messages-body-preview [body]=\"sanitizedBody\" data-role=\"mailout-body-preview\"></bb-messages-body-preview>\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n\n  <div class=\"row bb-block bb-block--md\">\n    <div\n      class=\"col-12 bb-text-semi-bold bb-block bb-block--md\"\n      i18n=\"Review attachments label text@@messages.employeeCreateMailout.mailoutReview.attachments\"\n      data-role=\"mailout-attachments\"\n    >\n      Attachments\n    </div>\n    <div class=\"col-auto\" *ngFor=\"let attachment of host.mailout.attachments; index as i\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-file-attachment-ui\n          [name]=\"attachment.filename\"\n          [size]=\"attachment.size\"\n          [loading]=\"attachment.loading\"\n          [disabled]=\"true\"\n          data-role=\"mailout-attachments-content\"\n        ></bb-file-attachment-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <bb-load-button-ui\n      class=\"bb-button-bar__button\"\n      data-role=\"send\"\n      aria-label=\"Send\"\n      i18n-aria-label=\"Send button aria-label text@@messages.employeeCreateMailout.mailoutReview.submitButtonAriaLabel\"\n      i18n=\"Send button text@@messages.employeeCreateMailout.mailoutReview.submitButton\"\n      (click)=\"host.createMailout(host.mailout)\"\n    >\n      Send\n    </bb-load-button-ui>\n    <button\n      bbButton\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n      data-role=\"discard\"\n      aria-label=\"Discard\"\n      i18n-aria-label=\"\n        Discard button aria-label text@@messages.employeeCreateMailout.mailoutReview.discardButtonAriaLabel\"\n      i18n=\"Discard button text@@messages.employeeCreateMailout.mailoutReview.discardButton\"\n      (click)=\"host.onDiscardModal(true)\"\n    >\n      Discard\n    </button>\n    <button\n      bbButton\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n      data-role=\"back\"\n      aria-label=\"Back to edit\"\n      i18n-aria-label=\"\n        Back to edit button aria-label text@@messages.employeeCreateMailout.mailoutReview.editButtonAriaLabel\"\n      i18n=\"Back to edit button text@@messages.employeeCreateMailout.mailoutReview.editButton\"\n      (click)=\"host.onEdit(host.mailout)\"\n    >\n      Back to edit\n    </button>\n  </div>\n\n  <ng-template #sanitizeError>\n    <bb-alert-ui\n      data-role=\"sanitize-error\"\n      title=\"We couldn't generate preview. Please contact support for more information\"\n      modifier=\"warning\"\n      [dismissible]=\"false\"\n    ></bb-alert-ui>\n  </ng-template>\n\n  <ng-template #sanitizeLoader>\n    <bb-loading-indicator-ui data-role=\"sanitize-loading\" loaderSize=\"md\" text=\"Loading...\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"confirmationModal.opened\"\n    [type]=\"confirmationModal.type\"\n    (cancel)=\"host.onDiscardModal(false)\"\n    (confirm)=\"host.onConfirmModal()\"\n    data-role=\"discard-modal\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #mailoutCreateSuccess>\n  <ng-container bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable [bbHostRef]=\"this\"></ng-container>\n</ng-template>\n\n<ng-template bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      Your mailout has been successfully sent.|Text of successful mailout\n      create@@messages.employeeCreateMailout.mailoutReview.messageSuccessCompose\"\n    >Your mailout has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #mailoutCreateError>\n  <ng-container bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable [bbHostRef]=\"this\"></ng-container>\n</ng-template>\n\n<ng-template bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      There is an error sending mailout.|Text of failed mailout\n      create@@messages.employeeCreateMailout.mailoutReview.messageErrorCompose\"\n    >There is an error sending mailout.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return MessagesBodyPreviewComponent; }), selector: "bb-messages-body-preview, bb-message-preview", inputs: ["body"] }, { type: i0.forwardRef(function () { return i5.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0.forwardRef(function () { return i15.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i8$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i9$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0.forwardRef(function () { return MessagesEmployeeMailoutReviewCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i18.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]" }, { type: i0.forwardRef(function () { return MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i2$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-employee-mailout-review',
                    templateUrl: './employee-mailout-review.component.html',
                }]
        }], ctorParameters: function () { return [{ type: MessagesEncodingService }, { type: MessagesEmployeeMailoutReviewService }, { type: MessagesManipulationConfirmModalService }, { type: SharedMethodsService }]; }, propDecorators: { mailout: [{
                type: Input
            }], cancel: [{
                type: Output
            }], confirm: [{
                type: Output
            }], edit: [{
                type: Output
            }], mailoutCreateSuccessTpl: [{
                type: ViewChild,
                args: ['mailoutCreateSuccess']
            }], mailoutCreateErrorTpl: [{
                type: ViewChild,
                args: ['mailoutCreateError']
            }] } });
class MessagesEmployeeMailoutReviewCustomizableDirective extends BbTemplate {
}
MessagesEmployeeMailoutReviewCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesEmployeeMailoutReviewCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesEmployeeMailoutReviewCustomizable]',
                }]
        }] });
class MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective extends BbTemplate {
}
MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]',
                }]
        }] });
class MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective extends BbTemplate {
}
MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]',
                }]
        }] });

const components = [MessagesEmployeeMailoutReviewComponent];
const directives = [
    MessagesEmployeeMailoutReviewCustomizableDirective,
    MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective,
    MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective,
];
const uiModules = [ButtonModule, FileAttachmentModule, LoadButtonModule, AlertModule, LoadingIndicatorModule];
const innerModules = [MessagesBodyPreviewModule, MessagesManipulationConfirmModalModule];
class MessagesEmployeeMailoutReviewModule {
}
MessagesEmployeeMailoutReviewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesEmployeeMailoutReviewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewModule, declarations: [MessagesEmployeeMailoutReviewComponent, MessagesEmployeeMailoutReviewCustomizableDirective,
        MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective,
        MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective], imports: [CommonModule, ButtonModule, FileAttachmentModule, LoadButtonModule, AlertModule, LoadingIndicatorModule, MessagesBodyPreviewModule, MessagesManipulationConfirmModalModule], exports: [MessagesEmployeeMailoutReviewComponent, MessagesEmployeeMailoutReviewCustomizableDirective,
        MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective,
        MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, ButtonModule, FileAttachmentModule, LoadButtonModule, AlertModule, LoadingIndicatorModule, MessagesBodyPreviewModule, MessagesManipulationConfirmModalModule] });
MessagesEmployeeMailoutReviewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewModule, providers: [
        MessagesEncodingService,
        MessagesEmployeeMailoutReviewService,
        MessagesManipulationConfirmModalService,
        SharedMethodsService,
    ], imports: [[CommonModule, ...uiModules, ...innerModules], ButtonModule, FileAttachmentModule, LoadButtonModule, AlertModule, LoadingIndicatorModule, MessagesBodyPreviewModule, MessagesManipulationConfirmModalModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules, ...innerModules],
                    declarations: [...components, ...directives],
                    providers: [
                        MessagesEncodingService,
                        MessagesEmployeeMailoutReviewService,
                        MessagesManipulationConfirmModalService,
                        SharedMethodsService,
                    ],
                    exports: [...components, ...directives, ...uiModules, ...innerModules],
                }]
        }] });

// General

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractBaseMessagesConversationThreadService, BaseConversationThreadComponent, BaseConversationsListPropertiesService, BaseConversationsListWidgetComponent, BaseConversationsListWidgetModule, BaseCreateMessageFormComponent, BaseCreateMessageFormModule, BaseCreateMessageFormService, BaseCreateMessageModalComponent, BaseCreateMessageModalModule, BaseCreateMessageModalPropertiesService, BaseMessagesConversationThreadModule, BaseModalComponent, BaseUploadAttachmentsService, DefaultWidgetProperties, EmployeeCreateMailoutFormModule, EmployeeCreateMessageFormModule, EmployeeMailoutStatus, EmployeeMailoutStatusLabels, FilterService, MailboxType, ManipulationType, MessagesClientUploadAttachmentsService, MessagesConversationMessageComponent, MessagesConversationMessageModule, MessagesEmployeeConversationCountersModule, MessagesEmployeeConversationCountersService, MessagesEmployeeMailoutReviewComponent, MessagesEmployeeMailoutReviewModule, MessagesEmployeeUploadAttachmentsService, MessagesEncodingService, MessagesMailoutStatusComponent, MessagesMailoutStatusModule, MessagesManipulationConfirmModalModule, MessagesManipulationConfirmModalService, MessagesRequestErrorComponent, MessagesRequestErrorModule, MessagesUnreadConversationCountModule, MessagesUnreadConversationCountService, MessagesUploadAttachmentsComponent, MessagesUploadAttachmentsCustomizableDirective, MessagesUploadAttachmentsModule, MessagesUploadAttachmentsService, PreventBubbleDownDirective, PreventBubbleDownModule, ReadUnreadStatusType, SharedMethodsModule, SharedMethodsService, UnknownIdError, defaultModelObservable, getPropertyValue, modelItemToBoolean, shareReplayOnce, snapshot, topicPlaceholderConfig, BaseConversationThreadDraftsComponent as ӨBaseConversationThreadDraftsComponent, EmployeeCreateMailoutFormComponent as ӨEmployeeCreateMailoutFormComponent, EmployeeCreateMailoutFormCustomizableDirective as ӨEmployeeCreateMailoutFormCustomizableDirective, EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective as ӨEmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective as ӨEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, EmployeeCreateMessageFormComponent as ӨEmployeeCreateMessageFormComponent, EmployeeCreateMessageFormCustomizableDirective as ӨEmployeeCreateMessageFormCustomizableDirective, FilterConversationsListComponent as ӨFilterConversationsListComponent, FilterConversationsListCustomizableDirective as ӨFilterConversationsListCustomizableDirective, MessagesBodyPreviewComponent as ӨMessagesBodyPreviewComponent, MessagesBodyPreviewModule as ӨMessagesBodyPreviewModule, MessagesConversationMessageCustomizableDirective as ӨMessagesConversationMessageCustomizableDirective, MessagesEmployeeMailoutReviewCustomizableDirective as ӨMessagesEmployeeMailoutReviewCustomizableDirective, MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective as ӨMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective as ӨMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, MessagesMailoutStatusCustomizableDirective as ӨMessagesMailoutStatusCustomizableDirective, MessagesManipulationConfirmModalComponent as ӨMessagesManipulationConfirmModalComponent, MessagesManipulationConfirmModalCustomizableDirective as ӨMessagesManipulationConfirmModalCustomizableDirective };
//# sourceMappingURL=backbase-messages-common.js.map
