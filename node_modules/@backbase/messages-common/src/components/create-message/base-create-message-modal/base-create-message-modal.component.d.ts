import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { BaseCreateMessageModalPropertiesService } from './base-create-message-modal-properties.service';
import { SharedMethodsService } from '../../../services/shared-methods/shared-methods.service';
import * as i0 from "@angular/core";
export declare class BaseCreateMessageModalComponent implements OnDestroy {
    protected properties: BaseCreateMessageModalPropertiesService;
    protected shared: SharedMethodsService;
    static counter: number;
    /**
     * The unique ID HTML property for each component instance.
     */
    readonly id: string;
    private readonly resetSubject;
    /**
     * The stream with the form reset triggers.
     */
    readonly resetStream: Observable<undefined>;
    readonly hostRef: this;
    /**
     * The stream with the maximum attachment size.
     */
    set maxAttachmentSizeValue(value: string | number);
    /**
     * The stream with the maximum name length.
     */
    set maxMailoutNameLengthValue(value: string | number);
    /**
     * The stream with the maximum subject length.
     */
    set maxSubjectLengthValue(value: string | number);
    /**
     * The stream with the maximum message length.
     */
    set maxMessageLengthValue(value: string | number);
    /**
     * The stream with the modal header.
     */
    set modalHeaderValue(value: string);
    /**
     * The stream with a flag indicating if the Compose button is hidden.
     */
    set hideComposeButtonValue(value: string | boolean);
    /**
     * Event published to open Create message modal
     */
    set createMessageOpenEventNameValue(value: string);
    /**
     * Event published when Create message modal widget was closed
     */
    set createMessageClosedEventNameValue(value: string);
    /**
     * The draft ID.
     */
    draftId: string | undefined;
    /**
     * The flag indicating if the modal is opened or closed.
     */
    modalOpened: boolean;
    /**
     * The modal options.
     */
    modalOptions: {
        size: string;
        beforeDismiss: () => boolean;
    };
    private readonly maxAttachmentSize$$;
    private readonly maxMailoutNameLength$$;
    private readonly maxSubjectLength$$;
    private readonly maxMessageLength$$;
    private readonly modalHeader$$;
    private readonly hideComposeButton$$;
    private readonly createMessageOpenEventName$$;
    private readonly createMessageClosedEventName$$;
    private readonly destroy$;
    /**
     * The stream with the maximum name size.
     */
    readonly maxMailoutNameLength: Observable<number>;
    /**
     * The stream with the maximum subject size.
     */
    readonly maxSubjectLength: Observable<number>;
    /**
     * The stream with the maximum attachment size.
     */
    readonly maxAttachmentSize: Observable<string>;
    /**
     * The stream with the maximum message length.
     */
    readonly maxMessageLength: Observable<number>;
    /**
     * The stream with the modal header text.
     */
    readonly modalHeader: Observable<string>;
    /**
     * The stream with a flag indicating if the Compose button is hidden.
     */
    readonly hideComposeButton: Observable<boolean>;
    /**
     * Event published to open Create message modal
     */
    readonly createMessageOpenEventName: Observable<string>;
    /**
     * Event published when Create message modal widget was closed
     */
    readonly createMessageClosedEventName: Observable<string>;
    constructor(properties: BaseCreateMessageModalPropertiesService, shared: SharedMethodsService);
    /**
     * The method to open the modal.
     *
     * @param id
     */
    openModal(id?: string): void;
    /**
     * The method to close the modal.
     */
    closeModal(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseCreateMessageModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BaseCreateMessageModalComponent, "ng-component", never, { "maxAttachmentSizeValue": "maxAttachmentSize"; "maxMailoutNameLengthValue": "maxMailoutNameLength"; "maxSubjectLengthValue": "maxSubjectLength"; "maxMessageLengthValue": "maxMessageLength"; "modalHeaderValue": "modalHeader"; "hideComposeButtonValue": "hideComposeButton"; "createMessageOpenEventNameValue": "createMessageOpenEventName"; "createMessageClosedEventNameValue": "createMessageClosedEventName"; }, {}, never, never>;
}
