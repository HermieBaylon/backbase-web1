import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { SharedMethodsService } from '../../../services/shared-methods/shared-methods.service';
import { ManipulationType, MessagesConfirmationModalModel } from '../../messages-manipulation-confirm-modal/manipulation-confirm-modal-types.model';
import { MessagesManipulationConfirmModalService } from '../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service';
import { BaseCreateMessageFormService } from './base-create-message-form.service';
import { MessageDraftGetResponseBody, TopicsGetResponseBody } from '@backbase/messages-v5-http-ang';
import { MessagesEncodingService } from '../../../services/messages-encoding/messages-encoding.service';
import { SimpleFormModel } from '../../../models/simple-form.model';
import { MessagesUploadAttachmentsService } from '../../upload-attachments/services/messages-upload-attachments.service';
import { FileObject } from '../../upload-attachments/model/messages-upload-attachments.model';
import * as i0 from "@angular/core";
export declare class BaseCreateMessageFormComponent<T> implements OnInit, OnDestroy {
    readonly sharedService: SharedMethodsService;
    readonly confirmModalService: MessagesManipulationConfirmModalService;
    readonly cd: ChangeDetectorRef;
    readonly createMessageFormService: BaseCreateMessageFormService<T>;
    readonly fb: FormBuilder;
    readonly encodingService: MessagesEncodingService;
    readonly uploadService: MessagesUploadAttachmentsService;
    /**
     * Input stream of reset signals that will trigger form reset.
     */
    reset: Observable<void> | undefined;
    /**
     * Input for maximum file attachment size in megabytes
     */
    maxAttachmentSize: string | undefined;
    /**
     * Input for maximum characters length for name field value
     */
    maxMailoutNameLength: number | undefined;
    /**
     * Input for maximum characters length for subject field value
     */
    maxSubjectLength: number | undefined;
    /**
     * Input for maximum characters length for message field value
     */
    maxMessageLength: number | undefined;
    /**
     * The parent modal open/closed state.
     */
    readonly isModalOpen: boolean | undefined;
    /**
     * Input draft id to get draft and prefill compose form with it
     */
    set draftId(value: string | undefined);
    /**
     * The draft ID getter.
     */
    get draftId(): string | undefined;
    /**
     * The event that's fired after confirm button is pressed.
     */
    confirm: EventEmitter<string | null>;
    /**
     * The event that's fired after cancel button is pressed.
     */
    cancel: EventEmitter<void>;
    /**
     * The notification for the successful compose message operation.
     */
    messageComposeSuccessTpl: TemplateRef<any> | undefined;
    /**
     * The notification for the successfully saved draft.
     */
    messageSaveDraftSuccessTpl: TemplateRef<any> | undefined;
    /**
     * The notification for the successfully saved draft.
     */
    messageUpdateDraftSuccessTpl: TemplateRef<any> | undefined;
    /**
     * The notification for the compose message error.
     */
    messageComposeErrorTpl: TemplateRef<any> | undefined;
    /**
     * The notification for the save draft error.
     */
    messageSaveDraftErrorTpl: TemplateRef<any> | undefined;
    /**
     * The notification for the update draft error.
     */
    messageUpdateDraftErrorTpl: TemplateRef<any> | undefined;
    readonly hostRef: this;
    /**
     * The file attachments array.
     */
    attachments: Array<FileObject> | undefined;
    /**
     * The blank new message form with the initial values.
     */
    newMessageFormGroup: FormGroup;
    /**
     * The draft form value.
     */
    draftFormValue: {
        [key: string]: any;
    } | undefined;
    /**
     * Confirmation modal parameters.
     */
    confirmationModal: MessagesConfirmationModalModel;
    /**
     * The flag indicating if the form is loading.
     */
    formLoading: boolean;
    private readonly topics$;
    /**
     * The stream with topics.
     */
    readonly topics: Observable<TopicsGetResponseBody[] | null | undefined>;
    /**
     * The manipulationType enum ( `resolve`, `unresolve`, `assign`, `unassign`, `discard`,
     * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`)
     */
    readonly manipulationTypes: typeof ManipulationType;
    private readonly unsubscribe$;
    private readonly draftId$;
    constructor(sharedService: SharedMethodsService, confirmModalService: MessagesManipulationConfirmModalService, cd: ChangeDetectorRef, createMessageFormService: BaseCreateMessageFormService<T>, fb: FormBuilder, encodingService: MessagesEncodingService, uploadService: MessagesUploadAttachmentsService);
    ngOnInit(): void;
    /**
     * The method to get a simple value from the form.
     *
     * @param simpleFormModel Message data
     */
    getSimpleFormVal({ body, subject, topic, attachments }: SimpleFormModel): {
        attachments?: string[] | undefined;
        topic?: string | undefined;
        subject?: string | undefined;
        body?: string | undefined;
    };
    resetFormOnElementBlur(): void;
    /**
     * The method to create a message.
     *
     * @param value Message data
     */
    createMessage(value: T): void;
    /**
     * The method to save a message as a draft.
     *
     * @param value Draft data
     */
    onSave(value: T): void;
    /**
     * The method to get the draft and prefill the compose form with it.
     *
     * @param id Draft id
     */
    getDrafts(id?: string): Observable<MessageDraftGetResponseBody | null>;
    ngOnDestroy(): void;
    /**
     * The method to resolve the confirmation modal.
     */
    confirmConfirmationModal(): void;
    /**
     * The method to cancel the confirmation modal.
     */
    onCancel(): void;
    /**
     * The method to get any errors generated by failing validation, or null if there are no errors.
     *
     * @param field Field name
     * @param type Error type
     */
    hasError(field: string, type: string): boolean;
    /**
     * The method that defines whether the control is valid or not.
     *
     * @param field Field name
     * @returns Is form field valid flag
     */
    isInvalidControl(field: string): boolean;
    private saveDraft;
    private updateDraft;
    private handleFormValues;
    private responseHandler;
    protected resetToInit(isFormDiscard?: boolean): void;
    private getControl;
    private restoreTopicSelection;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseCreateMessageFormComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BaseCreateMessageFormComponent<any>, "ng-component", never, { "reset": "reset"; "maxAttachmentSize": "maxAttachmentSize"; "maxMailoutNameLength": "maxMailoutNameLength"; "maxSubjectLength": "maxSubjectLength"; "maxMessageLength": "maxMessageLength"; "isModalOpen": "isModalOpen"; "draftId": "draftId"; }, { "confirm": "confirm"; "cancel": "cancel"; }, never, never>;
}
