import { ChangeDetectorRef } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { Observable } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { IdentityListedItem } from '@backbase/data-ang/user';
import { PresentationMessageEmployeePostRequestBody, TopicsGetEmployeeResponseBody } from '@backbase/messages-v5-http-ang';
import { BaseCreateMessageFormComponent } from '../base-form/base-create-message-form.component';
import { MessagesEncodingService } from '../../../services/messages-encoding/messages-encoding.service';
import { SharedMethodsService } from '../../../services/shared-methods/shared-methods.service';
import { MessagesManipulationConfirmModalService } from '../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service';
import { BaseCreateMessageFormService } from '../base-form/base-create-message-form.service';
import { EmployeeCreateMessageFormService } from './services/employee-create-message-form.service';
import { MessagesUploadAttachmentsService } from '../../upload-attachments/services/messages-upload-attachments.service';
import * as i0 from "@angular/core";
export declare class EmployeeCreateMessageFormComponent extends BaseCreateMessageFormComponent<PresentationMessageEmployeePostRequestBody> {
    private readonly employeeService;
    readonly encodingService: MessagesEncodingService;
    readonly sharedService: SharedMethodsService;
    readonly fb: FormBuilder;
    readonly cd: ChangeDetectorRef;
    readonly createMessageFormService: BaseCreateMessageFormService<PresentationMessageEmployeePostRequestBody>;
    readonly confirmModalService: MessagesManipulationConfirmModalService;
    readonly uploadService: MessagesUploadAttachmentsService;
    /**
     * Debounce time for input search requests
     */
    debounceTime: number;
    /**
     * Minimum length value for input search request
     */
    minSearchLength: number;
    /**
     * Predefine form
     */
    set preDefineForm(val: Partial<PresentationMessageEmployeePostRequestBody>);
    /**
     * Make predefined user field readonly
     */
    isPreDefinedUserReadonly: boolean;
    /**
     * Configs for topic selector placeholder
     */
    readonly topicPlaceholderConfig: {
        selectTopicPlaceholder: string;
        noTopicsPlaceholder: string;
    };
    /**
     * Typeahead options.
     */
    readonly typeaheadOptions: {
        ngbTypeahead: (text: Observable<string>) => Observable<IdentityListedItem[] | Record<string, never>>;
        resultFormatter: (item: IdentityListedItem) => string;
        inputFormatter: (item: IdentityListedItem) => string;
    };
    /**
     * Additional form fields.
     */
    readonly additionalFormFields: {
        [key: string]: boolean | string;
    };
    constructor(employeeService: EmployeeCreateMessageFormService, encodingService: MessagesEncodingService, sharedService: SharedMethodsService, fb: FormBuilder, cd: ChangeDetectorRef, createMessageFormService: BaseCreateMessageFormService<PresentationMessageEmployeePostRequestBody>, confirmModalService: MessagesManipulationConfirmModalService, uploadService: MessagesUploadAttachmentsService);
    /**
     * The method upon creation of the message form submission.
     */
    onConfirm(): void;
    /**
     * The method to search for typeahead options.
     *
     * @param text Search query
     * @returns Search stream
     */
    search(text: Observable<string>): Observable<IdentityListedItem[] | Record<string, never>>;
    protected resetToInit(): void;
    private customRequiredValidator;
    private getUserName;
    private setUserName;
    private resetAdditionalFields;
    static ɵfac: i0.ɵɵFactoryDeclaration<EmployeeCreateMessageFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EmployeeCreateMessageFormComponent, "bb-messages-employee-create-message-form", never, { "debounceTime": "debounceTime"; "minSearchLength": "minSearchLength"; "preDefineForm": "preDefineForm"; "isPreDefinedUserReadonly": "isPreDefinedUserReadonly"; }, {}, never, never>;
}
export declare class EmployeeCreateMessageFormCustomizableDirective extends BbTemplate<EmployeeCreateMessageFormComponent, {
    topics: TopicsGetEmployeeResponseBody[];
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<EmployeeCreateMessageFormCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<EmployeeCreateMessageFormCustomizableDirective, "[bbEmployeeCreateMessageFormCustomizable]", never, {}, {}, never>;
}
