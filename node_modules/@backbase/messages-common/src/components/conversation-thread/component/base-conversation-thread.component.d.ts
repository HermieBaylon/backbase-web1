import { EventEmitter, OnDestroy, TemplateRef } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { MessageReplyPostRequestBody, MarkAsReadUnreadPutResponseBody } from '@backbase/messages-v5-http-ang';
import { RichTextEditorComponent } from '@backbase/ui-ang/rich-text-editor';
import { ManipulationType, MessagesConfirmationModalModel } from '../../messages-manipulation-confirm-modal/manipulation-confirm-modal-types.model';
import { AbstractBaseMessagesConversationThreadService } from '../services/abstract-base-messages-conversation-thread.service';
import { SharedMethodsService } from '../../../services/shared-methods/shared-methods.service';
import { MessagesManipulationConfirmModalService } from '../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service';
import { MessagesUploadAttachmentsService } from '../../upload-attachments/services/messages-upload-attachments.service';
import { MessagesEncodingService } from '../../../services/messages-encoding/messages-encoding.service';
import { ReadUnreadStatusType } from '../models/conversations.model';
import { BaseConversationThreadDraftsComponent } from './base-conversation-thread-drafts.component';
import { UnknownIdError } from '../../../utils/unknown-id-error';
import * as i0 from "@angular/core";
export declare class BaseConversationThreadComponent extends BaseConversationThreadDraftsComponent implements OnDestroy {
    protected readonly apiThreadService: AbstractBaseMessagesConversationThreadService;
    protected readonly activatedRoute: ActivatedRoute;
    protected readonly shared: SharedMethodsService;
    readonly confirmModalService: MessagesManipulationConfirmModalService;
    protected readonly uploadService: MessagesUploadAttachmentsService;
    protected readonly encodingService: MessagesEncodingService;
    static counter: number;
    /**
     * Event emitted when this thread should be closed or navigation should be changed to previous or another widget
     */
    back: EventEmitter<any>;
    /**
     * Selected conversation id setter
     */
    set selectedConversationId(value: string | undefined);
    /**
     * The notification for the reply success.
     */
    replySuccessTpl: TemplateRef<any> | undefined;
    /**
     * The notification for the delete success.
     */
    deleteSuccessTpl: TemplateRef<any> | undefined;
    /**
     * The message text editor.
     */
    richTextEditor: RichTextEditorComponent | undefined;
    /**
     * The conversation thread ID.
     */
    readonly id: string;
    /**
     * The manipulation types enum (`resolve`, `unresolve`, `assign`, `unassign`, `discard`,
     * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`).
     */
    readonly manipulationTypes: typeof ManipulationType;
    protected readonly unsubscribe: Subject<unknown>;
    protected readonly replyPressed: Subject<MessageReplyPostRequestBody>;
    private readonly conversationId$;
    /**
     * The error information.
     */
    errorResponse: HttpErrorResponse | UnknownIdError | undefined;
    /**
     * The loading flag for the data fetched through the HTTP request.
     */
    loading: boolean;
    /**
     * The flag defining if the reply is opened or not.
     */
    replyOpened: boolean;
    /**
     * The flag defining if the topic alert is closed or not.
     */
    topicAlertClosed: boolean;
    /**
     * The modal for action confirmation.
     */
    confirmationModal: MessagesConfirmationModalModel;
    /**
     * The reply form.
     */
    replyFormGroup: FormGroup;
    /**
     * The form loading flag.
     */
    formLoading: boolean;
    protected readonly conversationId: Observable<string>;
    protected readonly markAsReadUnreadSubject: BehaviorSubject<ReadUnreadStatusType>;
    protected readonly markAsReadUnreadStream: Observable<MarkAsReadUnreadPutResponseBody | null>;
    constructor(apiThreadService: AbstractBaseMessagesConversationThreadService, activatedRoute: ActivatedRoute, shared: SharedMethodsService, confirmModalService: MessagesManipulationConfirmModalService, uploadService: MessagesUploadAttachmentsService, encodingService: MessagesEncodingService);
    /**
     * Conversation id getter
     */
    get conversationIdValue(): string | undefined;
    ngOnDestroy(): void;
    /**
     * The method to save the draft.
     */
    onSaveDraft(): void;
    /**
     * The method that is used for component initialization to subscribe for the read-unread status and
     * to toggle the reply form updates.
     */
    initSubscriptions(): void;
    /**
     * The method to navigate back.
     */
    navigateBack(): void;
    /**
     * The method to toggle the reply form.
     *
     * @param flag Toggle status
     */
    toggleReplyForm(flag: boolean): void;
    /**
     * The method to submit the reply.
     */
    reply(): void;
    /**
     * The method that defines whether the control is valid or not.
     *
     * @param field Field name
     * @returns Is form field valid flag
     */
    isInvalidControl(field: string): boolean;
    /**
     * The method to get any errors generated by failing validation, or null if there are no errors.
     *
     * @param field Field name
     * @param type Error type
     */
    hasError(field: string, type: string): boolean;
    private getConversationId;
    private getMarkAsReadUnreadStream;
    private convertFormValue;
    private getControl;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseConversationThreadComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BaseConversationThreadComponent, "ng-component", never, { "selectedConversationId": "selectedConversationId"; }, { "back": "back"; }, never, never>;
}
