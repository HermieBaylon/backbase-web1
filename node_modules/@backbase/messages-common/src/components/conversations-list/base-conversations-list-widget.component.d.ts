import { EventEmitter, OnDestroy } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ConversationThread, MessageDraftsGetResponseBody } from '@backbase/messages-v5-http-ang';
import { SharedMethodsService } from '../../services/shared-methods/shared-methods.service';
import { ApplyFilterParams, FilterParams, MailboxType } from './model/params.model';
import { BaseConversationsListPropertiesService } from './base-conversations-list-properties.service';
import * as i0 from "@angular/core";
export declare class BaseConversationsListWidgetComponent implements OnDestroy {
    readonly shared: SharedMethodsService;
    readonly activatedRoute: ActivatedRoute;
    readonly properties: BaseConversationsListPropertiesService;
    /**
     * Emits id of the selected conversation
     */
    conversationId: EventEmitter<any>;
    /**
     * Emits filter object to keep widget filter params
     */
    filter: EventEmitter<string>;
    /**
     * The error response information.
     */
    errorResponse: HttpErrorResponse | undefined;
    /**
     * The `Unsubscribe` subject.
     */
    readonly unsubscribe$: Subject<boolean>;
    /**
     * The loading parameter indicating the starting page for the data to be loaded from.
     */
    readonly from$: BehaviorSubject<number>;
    /**
     * The parameters object with the starting page number.
     */
    filterParams: FilterParams;
    /**
     * The parameters subject with applied filters.
     */
    readonly filterParams$: Observable<FilterParams>;
    constructor(shared: SharedMethodsService, activatedRoute: ActivatedRoute, properties: BaseConversationsListPropertiesService);
    /**
     * The method to change the page and load conversations corresponding to that page.
     *
     * @param page Page number
     */
    onPageChange(page?: number): void;
    /**
     * The method to switch to another mailbox type and load corresponding data.
     *
     * @param mailbox Mailbox type
     */
    onMailboxApply(mailbox: MailboxType): void;
    /**
     * The method to fetch conversation list according to the applied filter parameters.
     *
     * @param obj Filter params
     */
    onFilterFormApply(obj: ApplyFilterParams): void;
    /**
     * The method to open the draft thread.
     *
     * @param draft Draft data
     */
    openDraft(draft: ConversationThread | MessageDraftsGetResponseBody): void;
    /**
     * The method to open the conversation thread.
     *
     * @param conversation Conversation data
     */
    openConversation(conversation: ConversationThread | string): void;
    /**
     * The method to open the error notification.
     *
     * @param error Http error response
     */
    showErrorNotification(error: HttpErrorResponse): Observable<never>;
    ngOnDestroy(): void;
    /**
     * The method to emit the filtering parameters.
     *
     * @param filterParams Filter params data
     */
    emitFilterParams(filterParams: FilterParams): void;
    private setMailboxTypedParams;
    private setFilterFormParams;
    private getRouteParam;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseConversationsListWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BaseConversationsListWidgetComponent, "ng-component", never, {}, { "conversationId": "conversationId"; "filter": "filter"; }, never, never>;
}
