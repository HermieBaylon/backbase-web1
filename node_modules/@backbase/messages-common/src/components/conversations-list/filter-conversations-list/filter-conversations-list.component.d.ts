import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { IdentityListedItem } from '@backbase/data-ang/user';
import { TopicsGetResponseBody } from '@backbase/messages-v5-http-ang';
import { FilterService } from '../model/filter-service.model';
import { ApplyFilterParams } from '../model/params.model';
import { SharedMethodsService } from '../../../services/shared-methods/shared-methods.service';
import * as i0 from "@angular/core";
export declare class FilterConversationsListComponent implements OnDestroy, OnInit {
    private readonly service;
    private readonly fb;
    private readonly shared;
    /**
     * Css classes for header block
     */
    headerClass: string | undefined;
    /**
     * Css classes for body block
     */
    bodyClass: string | undefined;
    /**
     * Observable filter params to init component with
     */
    set filterParams(value: ApplyFilterParams | undefined);
    /**
     * Configs for topic selector placeholder
     */
    readonly topicPlaceholderConfig: {
        selectTopicPlaceholder: string;
        noTopicsPlaceholder: string;
    };
    /**
     * Event emitter for apply action
     */
    apply: EventEmitter<ApplyFilterParams>;
    /**
     * Event emitter for clear action
     */
    clear: EventEmitter<void>;
    /**
     * The filters form reference.
     */
    filterForm: FormGroup;
    /**
     * The applied flag.
     */
    applied: boolean;
    /**
     * The opened flag.
     */
    opened: boolean;
    /**
     * The stream with the topic list.
     */
    readonly topics$: Subject<TopicsGetResponseBody[] | null>;
    /**
     * The method to get the typeahead options.
     */
    readonly typeaheadOptions: {
        ngbTypeahead: (text: Observable<string>) => Observable<IdentityListedItem[] | null | undefined>;
        resultFormatter: (item: IdentityListedItem) => string;
        inputFormatter: (item: IdentityListedItem) => string;
    };
    private readonly filterParams$;
    private readonly unsubscribe$;
    constructor(service: FilterService, fb: FormBuilder, shared: SharedMethodsService);
    ngOnInit(): void;
    /**
     * The method to submit the form.
     */
    submit(): void;
    /**
     * The method to reset the form.
     *
     * @param apply Flag to submit or not the form
     */
    reset(apply?: boolean): void;
    /**
     * The method to open or close the filter form.
     */
    triggerOpened(): void;
    ngOnDestroy(): void;
    private convertToFilterParams;
    private formatDate;
    private checkFilterParams;
    private searchUsers;
    static ɵfac: i0.ɵɵFactoryDeclaration<FilterConversationsListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FilterConversationsListComponent, "bb-messages-filter-conversation-list", never, { "headerClass": "headerClass"; "bodyClass": "bodyClass"; "filterParams": "filterParams"; }, { "apply": "apply"; "clear": "clear"; }, never, ["*"]>;
}
export declare class FilterConversationsListCustomizableDirective extends BbTemplate<FilterConversationsListComponent, {
    topics: TopicsGetResponseBody[];
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<FilterConversationsListCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FilterConversationsListCustomizableDirective, "[bbFilterConversationsListCustomizable]", never, {}, {}, never>;
}
