import { ChangeDetectorRef, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { BaseUploadAttachmentsService, FileAttachmentInterface } from './services/base-attachments.service';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { SharedMethodsService } from '../../services/shared-methods/shared-methods.service';
import { MessagesUploadAttachmentsService } from './services/messages-upload-attachments.service';
import { Metadata } from '@backbase/messages-v5-http-ang';
import * as i0 from "@angular/core";
export declare class MessagesUploadAttachmentsComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {
    protected cd: ChangeDetectorRef;
    protected service: BaseUploadAttachmentsService;
    protected sharedService: SharedMethodsService;
    protected uploadService: MessagesUploadAttachmentsService;
    /**
     * Maximum size for file upload in megabytes
     */
    set maxSize(value: number | string | undefined);
    /**
     * Array of attachments objects
     */
    set initAttachments(value: Array<Metadata> | undefined);
    /**
     * Disabled state flag
     */
    disabled: boolean;
    /**
     * Input to define adding file multiple times
     * True by defaults
     */
    multiple: boolean;
    /**
     * The attachment button text.
     */
    attachmentButtonText: string | undefined;
    /**
     * The accepted file formats.
     */
    accept: string;
    /**
     * The notification for the maximum attachment size exceeded error.
     */
    maxAttachmentSizeErrorTpl: TemplateRef<any> | undefined;
    private readonly initAttachments$;
    /**
     * The file attachments array.
     */
    attachments: Array<FileAttachmentInterface>;
    /**
     * The file attachments array.
     */
    maxSizeMegabytesValue: number | undefined;
    readonly hostRef: this;
    private maxSizeBytesValue;
    private value;
    private newlyAddedAttachments;
    private loading;
    private readonly unsubscribe;
    constructor(cd: ChangeDetectorRef, service: BaseUploadAttachmentsService, sharedService: SharedMethodsService, uploadService: MessagesUploadAttachmentsService);
    /**
     * The method to upload a file attachment.
     *
     * @param input
     */
    onFileAdded(input: HTMLInputElement): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * The method from the ControlValueAccessor interface for setting the initial value (previously uploaded attachments)
     * for file attachments input.
     *
     * @param value Previously uploaded attachments
     */
    writeValue(value: Array<Metadata> | null | undefined): void;
    /**
     * The method from the ControlValueAccessor interface for responding to the value change.
     * Implemented through the registerOnChange method.
     */
    onChange: (newValue: Array<Metadata>) => void;
    /**
     * The method from the ControlValueAccessor interface for responding to the change of the untouched state.
     * Implemented through the registerOnTouched method.
     */
    onTouched: () => void;
    /**
     * The method for responding to the validation change. Implemented through the registerOnValidatorChange method.
     */
    onValidationChange: () => void;
    /**
     * The method from the ControlValueAccessor interface for setting the onChange function implementation.
     */
    registerOnChange(fn: () => void): void;
    /**
     * The method from the ControlValueAccessor interface for setting the onTouched function implementation.
     */
    registerOnTouched(fn: () => void): void;
    /**
     * The method from the Validator interface. Registers a callback function to call when the validator inputs change.
     */
    registerOnValidatorChange(fn: () => void): void;
    /**
     * The method from the ControlValueAccessor interface for setting the disabled state.
     *
     * @param isDisabled Is disabled flag
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * The method from the Validator interface. This method performs synchronous validation against the provided control.
     *
     * @returns Validation errors
     */
    validate(): ValidationErrors | null;
    private deleteAttachments;
    private removeRedundantAttachment;
    private onValueChanged;
    private showErrorNotification;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessagesUploadAttachmentsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessagesUploadAttachmentsComponent, "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", never, { "maxSize": "maxSize"; "initAttachments": "initAttachments"; "disabled": "disabled"; "multiple": "multiple"; "attachmentButtonText": "attachmentButtonText"; "accept": "accept"; }, {}, never, never>;
}
export declare class MessagesUploadAttachmentsCustomizableDirective extends BbTemplate<MessagesUploadAttachmentsComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<MessagesUploadAttachmentsCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MessagesUploadAttachmentsCustomizableDirective, "[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]", never, {}, {}, never>;
}
