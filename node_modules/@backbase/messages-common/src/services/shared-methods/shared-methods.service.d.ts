import { TemplateRef } from '@angular/core';
import { HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { NotificationService } from '@backbase/ui-ang/notification';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import * as i0 from "@angular/core";
export declare class SharedMethodsService {
    private readonly notificationService;
    private readonly pubSub;
    constructor(notificationService: NotificationService, pubSub: Pubsub);
    /**
     * Check is form valid
     *
     * @param form Form object
     * @param prevValue Previous value
     * @returns Is form valid flag
     */
    isFormInvalid(form: FormGroup | undefined, prevValue?: {
        [key: string]: any;
    }): boolean;
    /**
     * Check if form has value
     *
     * @param form Form object
     * @returns Has form value flag
     */
    hasFormValue(form: FormGroup | undefined): boolean;
    /**
     * Handles a given event
     *
     * @param eventName Event name
     */
    eventBusFactory(eventName: string): Observable<any>;
    /**
     * Publish a given event
     *
     * @template T
     * @param eventName Event name
     * @param body Event data
     */
    eventBusPublish<T>(eventName: string, body: T): void;
    /**
     * Get error message from error body
     *
     * @param error Error value
     * @returns Error message
     */
    getErrorMessage(error: HttpErrorResponse | string): string;
    /**
     * Open notification
     *
     * @param header Notification header
     * @param modifier Notification type
     * @param message Notification message
     */
    openNotification(header: TemplateRef<any> | string | undefined, modifier?: any, message?: string): void;
    /**
     * Map response to take body and total count
     *
     * @template T
     * @param rawData Response data
     * @returns Response body and total count
     */
    processData<T>(rawData: HttpResponse<T>): {
        data: T | [];
        totalCount: number;
    };
    static ɵfac: i0.ɵɵFactoryDeclaration<SharedMethodsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SharedMethodsService>;
}
