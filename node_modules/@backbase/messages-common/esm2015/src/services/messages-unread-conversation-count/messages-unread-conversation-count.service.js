import { Inject, Injectable } from '@angular/core';
import { merge, of, Subject, timer } from 'rxjs';
import { concatMap, map, switchMap } from 'rxjs/operators';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-v5-http-ang";
const MessagesToken = 'messages';
const MessagesPollPeriod = 5000;
const bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
export class MessagesUnreadConversationCountService {
    constructor(messagecenterService, pubSub) {
        this.messagecenterService = messagecenterService;
        this.pubSub = pubSub;
        this.resetSubject = new Subject();
        this.subscriptionHandler = this.reset.bind(this);
        this.pubSub.subscribe(bbEventUnreadConversationCountUpdate, this.subscriptionHandler);
    }
    /**
     * Conversations count poll source
     */
    source() {
        return () => merge(this.resetSubject, of(undefined)).pipe(switchMap(() => timer(0, MessagesPollPeriod).pipe(concatMap(() => this.getUnreadConversationCount()), map(body => ({ token: MessagesToken, count: body ? body.unreadCount : 0 })))));
    }
    /**
     * Get conversations count
     *
     * @returns Get conversations count stream
     */
    getUnreadConversationCount() {
        return this.messagecenterService.getUnreadConversationsCount();
    }
    reset() {
        this.resetSubject.next();
    }
}
MessagesUnreadConversationCountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountService, deps: [{ token: i1.MessagecenterHttpService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesUnreadConversationCountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagecenterHttpService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMtdW5yZWFkLWNvbnZlcnNhdGlvbi1jb3VudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tZXNzYWdlcy1jb21tb24vc3JjL3NlcnZpY2VzL21lc3NhZ2VzLXVucmVhZC1jb252ZXJzYXRpb24tY291bnQvbWVzc2FnZXMtdW5yZWFkLWNvbnZlcnNhdGlvbi1jb3VudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsT0FBTyxFQUFFLE1BQU0sRUFBVSxNQUFNLGtDQUFrQyxDQUFDOzs7QUFPbEUsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDO0FBQ2pDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0FBQ2hDLE1BQU0sb0NBQW9DLEdBQUcsMkNBQTJDLENBQUM7QUFHekYsTUFBTSxPQUFPLHNDQUFzQztJQUlqRCxZQUNtQixvQkFBOEMsRUFDOUIsTUFBYztRQUQ5Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQTBCO1FBQzlCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFMaEMsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQzdCLHdCQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBTTNELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLG9DQUFvQyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixPQUFPLEdBQXVCLEVBQUUsQ0FDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMxQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQ2IsS0FBSyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FDL0IsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDLEVBQ2xELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDNUUsQ0FDRixDQUNGLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDBCQUEwQjtRQUN4QixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO0lBQ2pFLENBQUM7SUFFTyxLQUFLO1FBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOztvSUFyQ1Usc0NBQXNDLDBEQU12QyxNQUFNO3dJQU5MLHNDQUFzQzs0RkFBdEMsc0NBQXNDO2tCQURsRCxVQUFVOzswQkFPTixNQUFNOzJCQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1lcmdlLCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNvbmNhdE1hcCwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNZXNzYWdlY2VudGVySHR0cFNlcnZpY2UsIFVucmVhZENvbnZlcnNhdGlvbnNHZXRSZXNwb25zZUJvZHkgfSBmcm9tICdAYmFja2Jhc2UvbWVzc2FnZXMtdjUtaHR0cC1hbmcnO1xuaW1wb3J0IHsgUFVCU1VCLCBQdWJzdWIgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvd2ViLXNkayc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFkZ2VzIHtcbiAgdG9rZW46IHN0cmluZztcbiAgY291bnQ6IG51bWJlcjtcbn1cblxuY29uc3QgTWVzc2FnZXNUb2tlbiA9ICdtZXNzYWdlcyc7XG5jb25zdCBNZXNzYWdlc1BvbGxQZXJpb2QgPSA1MDAwO1xuY29uc3QgYmJFdmVudFVucmVhZENvbnZlcnNhdGlvbkNvdW50VXBkYXRlID0gJ2JiLmV2ZW50LnVucmVhZC1jb252ZXJzYXRpb24tY291bnQudXBkYXRlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzVW5yZWFkQ29udmVyc2F0aW9uQ291bnRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSByZXNldFN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xuICBwcml2YXRlIHJlYWRvbmx5IHN1YnNjcmlwdGlvbkhhbmRsZXIgPSB0aGlzLnJlc2V0LmJpbmQodGhpcyk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZXNzYWdlY2VudGVyU2VydmljZTogTWVzc2FnZWNlbnRlckh0dHBTZXJ2aWNlLFxuICAgIEBJbmplY3QoUFVCU1VCKSBwcml2YXRlIHJlYWRvbmx5IHB1YlN1YjogUHVic3ViLFxuICApIHtcbiAgICB0aGlzLnB1YlN1Yi5zdWJzY3JpYmUoYmJFdmVudFVucmVhZENvbnZlcnNhdGlvbkNvdW50VXBkYXRlLCB0aGlzLnN1YnNjcmlwdGlvbkhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnNhdGlvbnMgY291bnQgcG9sbCBzb3VyY2VcbiAgICovXG4gIHNvdXJjZSgpIHtcbiAgICByZXR1cm4gKCk6IE9ic2VydmFibGU8QmFkZ2VzPiA9PlxuICAgICAgbWVyZ2UodGhpcy5yZXNldFN1YmplY3QsIG9mKHVuZGVmaW5lZCkpLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICAgIHRpbWVyKDAsIE1lc3NhZ2VzUG9sbFBlcmlvZCkucGlwZShcbiAgICAgICAgICAgIGNvbmNhdE1hcCgoKSA9PiB0aGlzLmdldFVucmVhZENvbnZlcnNhdGlvbkNvdW50KCkpLFxuICAgICAgICAgICAgbWFwKGJvZHkgPT4gKHsgdG9rZW46IE1lc3NhZ2VzVG9rZW4sIGNvdW50OiBib2R5ID8gYm9keS51bnJlYWRDb3VudCA6IDAgfSkpLFxuICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb252ZXJzYXRpb25zIGNvdW50XG4gICAqXG4gICAqIEByZXR1cm5zIEdldCBjb252ZXJzYXRpb25zIGNvdW50IHN0cmVhbVxuICAgKi9cbiAgZ2V0VW5yZWFkQ29udmVyc2F0aW9uQ291bnQoKTogT2JzZXJ2YWJsZTxVbnJlYWRDb252ZXJzYXRpb25zR2V0UmVzcG9uc2VCb2R5IHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VjZW50ZXJTZXJ2aWNlLmdldFVucmVhZENvbnZlcnNhdGlvbnNDb3VudCgpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldCgpIHtcbiAgICB0aGlzLnJlc2V0U3ViamVjdC5uZXh0KCk7XG4gIH1cbn1cbiJdfQ==