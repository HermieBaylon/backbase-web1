import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { MessagesUnreadConversationCountService } from './messages-unread-conversation-count.service';
import { MessagecenterHttpService } from '@backbase/messages-v5-http-ang';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export class MessagesUnreadConversationCountModule {
}
MessagesUnreadConversationCountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesUnreadConversationCountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountModule, imports: [CommonModule, i1.BackbaseCoreModule] });
MessagesUnreadConversationCountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountModule, providers: [MessagesUnreadConversationCountService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                pipelineProcessors: [
                    {
                        name: 'counters-badge',
                        provider: {
                            provide: MessagesUnreadConversationCountService,
                            useClass: MessagesUnreadConversationCountService,
                            deps: [MessagecenterHttpService, PUBSUB],
                        },
                    },
                ],
            }),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUnreadConversationCountModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            pipelineProcessors: [
                                {
                                    name: 'counters-badge',
                                    provider: {
                                        provide: MessagesUnreadConversationCountService,
                                        useClass: MessagesUnreadConversationCountService,
                                        deps: [MessagecenterHttpService, PUBSUB],
                                    },
                                },
                            ],
                        }),
                    ],
                    providers: [MessagesUnreadConversationCountService],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMtdW5yZWFkLWNvbnZlcnNhdGlvbi1jb3VudC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNvbW1vbi9zcmMvc2VydmljZXMvbWVzc2FnZXMtdW5yZWFkLWNvbnZlcnNhdGlvbi1jb3VudC9tZXNzYWdlcy11bnJlYWQtY29udmVyc2F0aW9uLWNvdW50Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsc0NBQXNDLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUN0RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7OztBQW9CMUQsTUFBTSxPQUFPLHFDQUFxQzs7bUlBQXJDLHFDQUFxQztvSUFBckMscUNBQXFDLFlBaEI5QyxZQUFZO29JQWdCSCxxQ0FBcUMsYUFGckMsQ0FBQyxzQ0FBc0MsQ0FBQyxZQWYxQztZQUNQLFlBQVk7WUFDWixrQkFBa0IsQ0FBQyxVQUFVLENBQUM7Z0JBQzVCLGtCQUFrQixFQUFFO29CQUNsQjt3QkFDRSxJQUFJLEVBQUUsZ0JBQWdCO3dCQUN0QixRQUFRLEVBQUU7NEJBQ1IsT0FBTyxFQUFFLHNDQUFzQzs0QkFDL0MsUUFBUSxFQUFFLHNDQUFzQzs0QkFDaEQsSUFBSSxFQUFFLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxDQUFDO3lCQUN6QztxQkFDRjtpQkFDRjthQUNGLENBQUM7U0FDSDs0RkFHVSxxQ0FBcUM7a0JBbEJqRCxRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLGtCQUFrQixDQUFDLFVBQVUsQ0FBQzs0QkFDNUIsa0JBQWtCLEVBQUU7Z0NBQ2xCO29DQUNFLElBQUksRUFBRSxnQkFBZ0I7b0NBQ3RCLFFBQVEsRUFBRTt3Q0FDUixPQUFPLEVBQUUsc0NBQXNDO3dDQUMvQyxRQUFRLEVBQUUsc0NBQXNDO3dDQUNoRCxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUM7cUNBQ3pDO2lDQUNGOzZCQUNGO3lCQUNGLENBQUM7cUJBQ0g7b0JBQ0QsU0FBUyxFQUFFLENBQUMsc0NBQXNDLENBQUM7aUJBQ3BEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBCYWNrYmFzZUNvcmVNb2R1bGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBNZXNzYWdlc1VucmVhZENvbnZlcnNhdGlvbkNvdW50U2VydmljZSB9IGZyb20gJy4vbWVzc2FnZXMtdW5yZWFkLWNvbnZlcnNhdGlvbi1jb3VudC5zZXJ2aWNlJztcbmltcG9ydCB7IE1lc3NhZ2VjZW50ZXJIdHRwU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9tZXNzYWdlcy12NS1odHRwLWFuZyc7XG5pbXBvcnQgeyBQVUJTVUIgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvd2ViLXNkayc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgQmFja2Jhc2VDb3JlTW9kdWxlLndpdGhDb25maWcoe1xuICAgICAgcGlwZWxpbmVQcm9jZXNzb3JzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnY291bnRlcnMtYmFkZ2UnLFxuICAgICAgICAgIHByb3ZpZGVyOiB7XG4gICAgICAgICAgICBwcm92aWRlOiBNZXNzYWdlc1VucmVhZENvbnZlcnNhdGlvbkNvdW50U2VydmljZSxcbiAgICAgICAgICAgIHVzZUNsYXNzOiBNZXNzYWdlc1VucmVhZENvbnZlcnNhdGlvbkNvdW50U2VydmljZSxcbiAgICAgICAgICAgIGRlcHM6IFtNZXNzYWdlY2VudGVySHR0cFNlcnZpY2UsIFBVQlNVQl0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSksXG4gIF0sXG4gIHByb3ZpZGVyczogW01lc3NhZ2VzVW5yZWFkQ29udmVyc2F0aW9uQ291bnRTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZXNVbnJlYWRDb252ZXJzYXRpb25Db3VudE1vZHVsZSB7fVxuIl19