import { Inject, Injectable } from '@angular/core';
import { merge, of, Subject, timer } from 'rxjs';
import { concatMap, switchMap } from 'rxjs/operators';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-v5-http-ang";
const MessagesPollPeriod = 5000;
const bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
export class MessagesEmployeeConversationCountersService {
    constructor(service, pubSub) {
        this.service = service;
        this.pubSub = pubSub;
        this.resetSubject = new Subject();
        this.subscriptionHandler = this.reset.bind(this);
        this.pubSub.subscribe(bbEventUnreadConversationCountUpdate, this.subscriptionHandler);
    }
    /**
     * Conversations count poll source
     */
    source() {
        return () => merge(this.resetSubject, of(undefined)).pipe(switchMap(() => timer(0, MessagesPollPeriod).pipe(concatMap(() => this.getConversationCounters()))));
    }
    /**
     * Get conversations count
     *
     * @returns Get conversation counters stream
     */
    getConversationCounters() {
        return this.service.getConversationsCounter();
    }
    reset() {
        this.resetSubject.next();
    }
}
MessagesEmployeeConversationCountersService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersService, deps: [{ token: i1.EmployeeHttpService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesEmployeeConversationCountersService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeConversationCountersService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.EmployeeHttpService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMtZW1wbG95ZWUtY29udmVyc2F0aW9uLWNvdW50ZXJzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNvbW1vbi9zcmMvc2VydmljZXMvbWVzc2FnZXMtZW1wbG95ZWUtY29udmVyc2F0aW9uLWNvdW50ZXJzL21lc3NhZ2VzLWVtcGxveWVlLWNvbnZlcnNhdGlvbi1jb3VudGVycy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RCxPQUFPLEVBQUUsTUFBTSxFQUFVLE1BQU0sa0NBQWtDLENBQUM7OztBQUVsRSxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQztBQUNoQyxNQUFNLG9DQUFvQyxHQUFHLDJDQUEyQyxDQUFDO0FBR3pGLE1BQU0sT0FBTywyQ0FBMkM7SUFJdEQsWUFBNkIsT0FBNEIsRUFBbUMsTUFBYztRQUE3RSxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUFtQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSHpGLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM3Qix3QkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUczRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQ0FBb0MsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0osT0FBTyxHQUF1RCxFQUFFLENBQzlELEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDMUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUNwRyxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7O09BSUc7SUFDSCx1QkFBdUI7UUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVPLEtBQUs7UUFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7O3lJQTdCVSwyQ0FBMkMscURBSWEsTUFBTTs2SUFKOUQsMkNBQTJDOzRGQUEzQywyQ0FBMkM7a0JBRHZELFVBQVU7OzBCQUttRCxNQUFNOzJCQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1lcmdlLCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNvbmNhdE1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29udmVyc2F0aW9uQ291bnRlclJlc3BvbnNlQm9keSwgRW1wbG95ZWVIdHRwU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9tZXNzYWdlcy12NS1odHRwLWFuZyc7XG5pbXBvcnQgeyBQVUJTVUIsIFB1YnN1YiB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy93ZWItc2RrJztcblxuY29uc3QgTWVzc2FnZXNQb2xsUGVyaW9kID0gNTAwMDtcbmNvbnN0IGJiRXZlbnRVbnJlYWRDb252ZXJzYXRpb25Db3VudFVwZGF0ZSA9ICdiYi5ldmVudC51bnJlYWQtY29udmVyc2F0aW9uLWNvdW50LnVwZGF0ZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNZXNzYWdlc0VtcGxveWVlQ29udmVyc2F0aW9uQ291bnRlcnNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSByZXNldFN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xuICBwcml2YXRlIHJlYWRvbmx5IHN1YnNjcmlwdGlvbkhhbmRsZXIgPSB0aGlzLnJlc2V0LmJpbmQodGhpcyk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzZXJ2aWNlOiBFbXBsb3llZUh0dHBTZXJ2aWNlLCBASW5qZWN0KFBVQlNVQikgcHJpdmF0ZSByZWFkb25seSBwdWJTdWI6IFB1YnN1Yikge1xuICAgIHRoaXMucHViU3ViLnN1YnNjcmliZShiYkV2ZW50VW5yZWFkQ29udmVyc2F0aW9uQ291bnRVcGRhdGUsIHRoaXMuc3Vic2NyaXB0aW9uSGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVyc2F0aW9ucyBjb3VudCBwb2xsIHNvdXJjZVxuICAgKi9cbiAgc291cmNlKCkge1xuICAgIHJldHVybiAoKTogT2JzZXJ2YWJsZTxDb252ZXJzYXRpb25Db3VudGVyUmVzcG9uc2VCb2R5IHwgbnVsbD4gPT5cbiAgICAgIG1lcmdlKHRoaXMucmVzZXRTdWJqZWN0LCBvZih1bmRlZmluZWQpKS5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGltZXIoMCwgTWVzc2FnZXNQb2xsUGVyaW9kKS5waXBlKGNvbmNhdE1hcCgoKSA9PiB0aGlzLmdldENvbnZlcnNhdGlvbkNvdW50ZXJzKCkpKSksXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb252ZXJzYXRpb25zIGNvdW50XG4gICAqXG4gICAqIEByZXR1cm5zIEdldCBjb252ZXJzYXRpb24gY291bnRlcnMgc3RyZWFtXG4gICAqL1xuICBnZXRDb252ZXJzYXRpb25Db3VudGVycygpOiBPYnNlcnZhYmxlPENvbnZlcnNhdGlvbkNvdW50ZXJSZXNwb25zZUJvZHkgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5nZXRDb252ZXJzYXRpb25zQ291bnRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldCgpIHtcbiAgICB0aGlzLnJlc2V0U3ViamVjdC5uZXh0KCk7XG4gIH1cbn1cbiJdfQ==