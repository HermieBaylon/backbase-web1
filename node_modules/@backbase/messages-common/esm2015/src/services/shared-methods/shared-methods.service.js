import { Inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/notification";
export class SharedMethodsService {
    constructor(notificationService, pubSub) {
        this.notificationService = notificationService;
        this.pubSub = pubSub;
    }
    /**
     * Check is form valid
     *
     * @param form Form object
     * @param prevValue Previous value
     * @returns Is form valid flag
     */
    isFormInvalid(form, prevValue) {
        if (form && form.dirty) {
            const formVal = form.value || {};
            const keys = Object.keys(formVal);
            for (const field of keys) {
                if (prevValue) {
                    if (prevValue[field] !== formVal[field]) {
                        return true;
                    }
                }
                else if (formVal[field]) {
                    return Array.isArray(formVal[field]) ? formVal[field].length > 0 : true;
                }
            }
        }
        return false;
    }
    /**
     * Check if form has value
     *
     * @param form Form object
     * @returns Has form value flag
     */
    hasFormValue(form) {
        const formVal = (form && form.value) || {};
        const keys = Object.keys(formVal);
        for (const field of keys) {
            if (formVal[field]) {
                return Array.isArray(formVal[field]) ? formVal[field].length > 0 : true;
            }
        }
        return false;
    }
    /**
     * Handles a given event
     *
     * @param eventName Event name
     */
    eventBusFactory(eventName) {
        return new Observable(observer => {
            const handler = (data) => observer.next(data);
            this.pubSub.subscribe(eventName, handler);
            return () => {
                this.pubSub.unsubscribe(eventName, handler);
            };
        });
    }
    /**
     * Publish a given event
     *
     * @template T
     * @param eventName Event name
     * @param body Event data
     */
    eventBusPublish(eventName, body) {
        this.pubSub.publish(eventName, body);
    }
    /**
     * Get error message from error body
     *
     * @param error Error value
     * @returns Error message
     */
    getErrorMessage(error) {
        return typeof error !== 'string' ? (error.error && error.error.message) || error.message : error;
    }
    /**
     * Open notification
     *
     * @param header Notification header
     * @param modifier Notification type
     * @param message Notification message
     */
    openNotification(header, modifier = 'success', message = '') {
        if (!header)
            return;
        this.notificationService.showNotification({
            header,
            message,
            modifier,
            dismissible: false,
        });
    }
    /**
     * Map response to take body and total count
     *
     * @template T
     * @param rawData Response data
     * @returns Response body and total count
     */
    processData(rawData) {
        const totalCount = (rawData && parseInt(String(rawData.headers.get('x-total-count')), 10)) || 0;
        return {
            data: (rawData && rawData.body) || [],
            totalCount,
        };
    }
}
SharedMethodsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsService, deps: [{ token: i1.NotificationService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
SharedMethodsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SharedMethodsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NotificationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,