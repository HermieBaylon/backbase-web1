import { Subject } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
export class BaseUploadAttachmentsService {
}
export class FileAttachment {
    constructor(file, service) {
        this.service = service;
        /**
         * The loading flag.
         */
        this.loading = false;
        /**
         * Delete attachment subject that holds index
         */
        this.onDelete = new Subject();
        this.cancelSubject = new Subject();
        this.file = file;
        this.size = file.size;
        if (file.id) {
            this.id = file.id;
            this.name = file.filename;
        }
        else {
            this.name = file.name;
        }
    }
    /**
     * Delete attachment
     *
     * @param id Attachment id
     * @param index Attachment index
     */
    deleteAttachment(id, index) {
        if (this.id && this.id === id) {
            this.service.deleteAttachments([id]).subscribe();
        }
        else {
            this.cancelSubject.next();
        }
        this.onDelete.next(index);
    }
    /**
     * Upload attachments
     */
    uploadAttachment() {
        this.setLoading(true);
        return this.service.uploadAttachment(this.file).pipe(takeUntil(this.cancelSubject), tap(value => {
            this.id = value ? value.id : undefined;
            this.setLoading(false);
        }));
    }
    /**
     * Set loading flag
     *
     * @param flag Loaging status flag
     */
    setLoading(flag) {
        this.loading = flag;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1hdHRhY2htZW50cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tZXNzYWdlcy1jb21tb24vc3JjL2NvbXBvbmVudHMvdXBsb2FkLWF0dGFjaG1lbnRzL3NlcnZpY2VzL2Jhc2UtYXR0YWNobWVudHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHaEQsTUFBTSxPQUFnQiw0QkFBNEI7Q0FHakQ7QUFZRCxNQUFNLE9BQU8sY0FBYztJQXlCekIsWUFBWSxJQUF1QixFQUFZLE9BQXFDO1FBQXJDLFlBQU8sR0FBUCxPQUFPLENBQThCO1FBeEJwRjs7V0FFRztRQUNILFlBQU8sR0FBRyxLQUFLLENBQUM7UUFZaEI7O1dBRUc7UUFDSCxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQUVoQixrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFLbkQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRXRCLElBQUssSUFBbUIsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLEVBQUUsR0FBSSxJQUFtQixDQUFDLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFJLElBQW1CLENBQUMsUUFBUSxDQUFDO1NBQzNDO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxHQUFJLElBQWEsQ0FBQyxJQUFJLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxnQkFBZ0IsQ0FBQyxFQUFVLEVBQUUsS0FBYTtRQUN4QyxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDbEQ7YUFBTTtZQUNMLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBWSxDQUFDLENBQUMsSUFBSSxDQUMxRCxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUM3QixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsVUFBVSxDQUFDLElBQWE7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGVsZXRlUmVzcG9uc2VCb2R5LCBNZXRhZGF0YSB9IGZyb20gJ0BiYWNrYmFzZS9tZXNzYWdlcy12NS1odHRwLWFuZyc7XG5pbXBvcnQgeyB0YWtlVW50aWwsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEZpbGVPYmplY3QgfSBmcm9tICcuLi9tb2RlbC9tZXNzYWdlcy11cGxvYWQtYXR0YWNobWVudHMubW9kZWwnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVVwbG9hZEF0dGFjaG1lbnRzU2VydmljZSB7XG4gIGFic3RyYWN0IGRlbGV0ZUF0dGFjaG1lbnRzKGlkczogQXJyYXk8c3RyaW5nPik6IE9ic2VydmFibGU8RGVsZXRlUmVzcG9uc2VCb2R5IHwgbnVsbD47XG4gIGFic3RyYWN0IHVwbG9hZEF0dGFjaG1lbnQoYXR0YWNobWVudDogQmxvYik6IE9ic2VydmFibGU8TWV0YWRhdGEgfCBudWxsPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlQXR0YWNobWVudEludGVyZmFjZSB7XG4gIGxvYWRpbmc6IGJvb2xlYW47XG4gIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgc2l6ZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBvbkRlbGV0ZTogU3ViamVjdDxudW1iZXI+O1xuICBkZWxldGVBdHRhY2htZW50KGlkOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICB1cGxvYWRBdHRhY2htZW50KCk6IE9ic2VydmFibGU8TWV0YWRhdGEgfCBudWxsPjtcbiAgc2V0TG9hZGluZyhmbGFnOiBib29sZWFuKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIEZpbGVBdHRhY2htZW50IGltcGxlbWVudHMgRmlsZUF0dGFjaG1lbnRJbnRlcmZhY2Uge1xuICAvKipcbiAgICogVGhlIGxvYWRpbmcgZmxhZy5cbiAgICovXG4gIGxvYWRpbmcgPSBmYWxzZTtcblxuICAvKipcbiAgICogQXR0YWNobWVudCBuYW1lXG4gICAqL1xuICBuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEF0dGFjaG1lbnQgc2l6ZVxuICAgKi9cbiAgc2l6ZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBEZWxldGUgYXR0YWNobWVudCBzdWJqZWN0IHRoYXQgaG9sZHMgaW5kZXhcbiAgICovXG4gIG9uRGVsZXRlID0gbmV3IFN1YmplY3Q8bnVtYmVyPigpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgY2FuY2VsU3ViamVjdCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgZmlsZTogRmlsZSB8IEZpbGVPYmplY3QgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgaWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihmaWxlOiBGaWxlIHwgRmlsZU9iamVjdCwgcHJvdGVjdGVkIHNlcnZpY2U6IEJhc2VVcGxvYWRBdHRhY2htZW50c1NlcnZpY2UpIHtcbiAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgIHRoaXMuc2l6ZSA9IGZpbGUuc2l6ZTtcblxuICAgIGlmICgoZmlsZSBhcyBGaWxlT2JqZWN0KS5pZCkge1xuICAgICAgdGhpcy5pZCA9IChmaWxlIGFzIEZpbGVPYmplY3QpLmlkO1xuICAgICAgdGhpcy5uYW1lID0gKGZpbGUgYXMgRmlsZU9iamVjdCkuZmlsZW5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9IChmaWxlIGFzIEZpbGUpLm5hbWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhdHRhY2htZW50XG4gICAqXG4gICAqIEBwYXJhbSBpZCBBdHRhY2htZW50IGlkXG4gICAqIEBwYXJhbSBpbmRleCBBdHRhY2htZW50IGluZGV4XG4gICAqL1xuICBkZWxldGVBdHRhY2htZW50KGlkOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5pZCAmJiB0aGlzLmlkID09PSBpZCkge1xuICAgICAgdGhpcy5zZXJ2aWNlLmRlbGV0ZUF0dGFjaG1lbnRzKFtpZF0pLnN1YnNjcmliZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbmNlbFN1YmplY3QubmV4dCgpO1xuICAgIH1cblxuICAgIHRoaXMub25EZWxldGUubmV4dChpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkIGF0dGFjaG1lbnRzXG4gICAqL1xuICB1cGxvYWRBdHRhY2htZW50KCkge1xuICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcblxuICAgIHJldHVybiB0aGlzLnNlcnZpY2UudXBsb2FkQXR0YWNobWVudCh0aGlzLmZpbGUgYXMgQmxvYikucGlwZShcbiAgICAgIHRha2VVbnRpbCh0aGlzLmNhbmNlbFN1YmplY3QpLFxuICAgICAgdGFwKHZhbHVlID0+IHtcbiAgICAgICAgdGhpcy5pZCA9IHZhbHVlID8gdmFsdWUuaWQgOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsb2FkaW5nIGZsYWdcbiAgICpcbiAgICogQHBhcmFtIGZsYWcgTG9hZ2luZyBzdGF0dXMgZmxhZ1xuICAgKi9cbiAgc2V0TG9hZGluZyhmbGFnOiBib29sZWFuKSB7XG4gICAgdGhpcy5sb2FkaW5nID0gZmxhZztcbiAgfVxufVxuIl19