import { ChangeDetectionStrategy, Component, Directive, forwardRef, Input, ViewChild, } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, EMPTY, Subject } from 'rxjs';
import { catchError, filter, finalize, map, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { FileAttachment, } from './services/base-attachments.service';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "./services/base-attachments.service";
import * as i2 from "../../services/shared-methods/shared-methods.service";
import * as i3 from "./services/messages-upload-attachments.service";
import * as i4 from "@backbase/ui-ang/input-file";
import * as i5 from "@backbase/ui-ang/file-attachment";
import * as i6 from "@angular/common";
export class MessagesUploadAttachmentsComponent {
    constructor(cd, service, sharedService, uploadService) {
        this.cd = cd;
        this.service = service;
        this.sharedService = sharedService;
        this.uploadService = uploadService;
        /**
         * Disabled state flag
         */
        this.disabled = false;
        /**
         * Input to define adding file multiple times
         * True by defaults
         */
        this.multiple = true;
        /**
         * The accepted file formats.
         */
        this.accept = '*';
        this.initAttachments$ = new BehaviorSubject(undefined);
        /**
         * The file attachments array.
         */
        this.attachments = [];
        this.hostRef = this;
        this.maxSizeBytesValue = 0;
        this.value = [];
        this.newlyAddedAttachments = [];
        this.loading = 0;
        this.unsubscribe = new Subject();
        /**
         * The method from the ControlValueAccessor interface for responding to the value change.
         * Implemented through the registerOnChange method.
         */
        this.onChange = () => { };
        /**
         * The method from the ControlValueAccessor interface for responding to the change of the untouched state.
         * Implemented through the registerOnTouched method.
         */
        this.onTouched = () => { };
        /**
         * The method for responding to the validation change. Implemented through the registerOnValidatorChange method.
         */
        this.onValidationChange = () => { };
    }
    /**
     * Maximum size for file upload in megabytes
     */
    set maxSize(value) {
        if (value) {
            const number = Number(value);
            this.maxSizeMegabytesValue = number;
            this.maxSizeBytesValue = number * 1024 * 1024;
        }
    }
    /**
     * Array of attachments objects
     */
    set initAttachments(value) {
        this.initAttachments$.next(value);
    }
    /**
     * The method to upload a file attachment.
     *
     * @param input
     */
    onFileAdded(input) {
        const file = input && input.files && input.files[0];
        this.onTouched();
        if (file) {
            input.value = '';
            if (this.maxSizeBytesValue && file.size > this.maxSizeBytesValue) {
                this.sharedService.openNotification(this.maxAttachmentSizeErrorTpl, 'error');
                return;
            }
            const attachment = new FileAttachment(file, this.service);
            const index = this.attachments.push(attachment);
            this.loading++;
            this.onValidationChange();
            attachment
                .uploadAttachment()
                .pipe(take(1), tap(value => this.onValueChanged(value || undefined)), catchError(error => {
                this.removeRedundantAttachment(index - 1);
                return this.showErrorNotification(error);
            }), finalize(() => {
                this.loading--;
                this.onValidationChange();
                this.cd.markForCheck();
            }), takeUntil(this.uploadService.reset$))
                .subscribe();
            attachment.onDelete.pipe(takeUntil(this.unsubscribe)).subscribe(i => this.removeRedundantAttachment(i));
        }
    }
    ngOnInit() {
        this.uploadService.reset$
            .pipe(map(type => {
            const value = type ? [...this.newlyAddedAttachments].map(({ id }) => id) : [];
            this.attachments = [];
            this.value = [];
            this.newlyAddedAttachments = [];
            this.cd.markForCheck();
            return { value, type };
        }), filter(({ value, type }) => !!(value.length && type)), switchMap(({ value }) => this.deleteAttachments(value)), takeUntil(this.unsubscribe))
            .subscribe();
    }
    ngOnDestroy() {
        this.unsubscribe.next(true);
        this.unsubscribe.complete();
    }
    /**
     * The method from the ControlValueAccessor interface for setting the initial value (previously uploaded attachments)
     * for file attachments input.
     *
     * @param value Previously uploaded attachments
     */
    writeValue(value) {
        if (value && value.length) {
            this.value = [...value];
            this.initAttachments$.pipe(takeUntil(this.uploadService.reset$)).subscribe(attachments => {
                if (attachments) {
                    this.attachments = attachments.reduce((acc, item) => {
                        const attachment = new FileAttachment(item, this.service);
                        // @ts-ignore
                        acc.push(attachment);
                        attachment.onDelete.pipe(takeUntil(this.unsubscribe)).subscribe(i => this.removeRedundantAttachment(i));
                        return acc;
                    }, []);
                }
            });
        }
        this.cd.markForCheck();
    }
    /**
     * The method from the ControlValueAccessor interface for setting the onChange function implementation.
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * The method from the ControlValueAccessor interface for setting the onTouched function implementation.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * The method from the Validator interface. Registers a callback function to call when the validator inputs change.
     */
    registerOnValidatorChange(fn) {
        this.onValidationChange = fn;
    }
    /**
     * The method from the ControlValueAccessor interface for setting the disabled state.
     *
     * @param isDisabled Is disabled flag
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    }
    /**
     * The method from the Validator interface. This method performs synchronous validation against the provided control.
     *
     * @returns Validation errors
     */
    validate() {
        return this.loading ? { loading: true } : null;
    }
    deleteAttachments(ids) {
        return this.service.deleteAttachments(ids).pipe(catchError(error => this.showErrorNotification(error)));
    }
    removeRedundantAttachment(index) {
        this.value.splice(index, 1);
        this.attachments.splice(index, 1);
        this.onChange(this.value);
    }
    onValueChanged(value) {
        if (value) {
            this.value.push(value);
            this.newlyAddedAttachments.push(value);
            this.onChange(this.value);
        }
    }
    showErrorNotification(error) {
        this.sharedService.openNotification(this.sharedService.getErrorMessage(error), 'error');
        return EMPTY;
    }
}
MessagesUploadAttachmentsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.BaseUploadAttachmentsService }, { token: i2.SharedMethodsService }, { token: i3.MessagesUploadAttachmentsService }], target: i0.ɵɵFactoryTarget.Component });
MessagesUploadAttachmentsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesUploadAttachmentsComponent, selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: { maxSize: "maxSize", initAttachments: "initAttachments", disabled: "disabled", multiple: "multiple", attachmentButtonText: "attachmentButtonText", accept: "accept" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MessagesUploadAttachmentsComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => MessagesUploadAttachmentsComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "maxAttachmentSizeErrorTpl", first: true, predicate: ["maxAttachmentSizeError"], descendants: true }], ngImport: i0, template: "<ng-container bbMessagesUploadAttachmentsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbMessagesUploadAttachmentsCustomizable let-host>\n  <bb-input-file-ui\n    [buttonText]=\"host.attachmentButtonText ? host.attachmentButtonText : attachFile.elementRef.nativeElement.innerText\"\n    [disabled]=\"host.disabled\"\n    [accept]=\"host.accept\"\n    *ngIf=\"!(!host.multiple && host.attachments.length)\"\n    (change)=\"host.onFileAdded($event.target)\"\n  ></bb-input-file-ui>\n\n  <div class=\"row\">\n    <div class=\"col-auto\" *ngFor=\"let attachment of host.attachments; let i = index\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-file-attachment-ui\n          [name]=\"attachment.name\"\n          [size]=\"attachment.size\"\n          [loading]=\"attachment.loading\"\n          [deletable]=\"true\"\n          [disabled]=\"true\"\n          (delete)=\"attachment.deleteAttachment(attachment.id, i)\"\n        ></bb-file-attachment-ui>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #attachFile i18n=\"Attach file@@messages.messagesEmployeeUploadAttachments.attachFile\"\n    >Attach file</ng-template\n  >\n</ng-template>\n\n<ng-template #maxAttachmentSizeError>\n  <span\n    i18n=\"\n      Uploaded file exceeds the maximum allowed size@@messages.messagesEmployeeUploadAttachments.maxAttachmentSizeError\"\n    >The file you are trying to upload exceeds the maximum attachment size of\n  </span>\n  <span>{{ maxSizeMegabytesValue }}</span>\n  <span i18n=\"Mb|Megabytes@@messages.messagesEmployeeUploadAttachments.maxAttachmentSizeError.megabytes\">Mb</span>.\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.InputFileComponent; }), selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }, { type: i0.forwardRef(function () { return i5.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }], directives: [{ type: i0.forwardRef(function () { return MessagesUploadAttachmentsCustomizableDirective; }), selector: "[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]" }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-upload-attachments-ui, bb-messages-upload-attachments',
                    templateUrl: './messages-upload-attachments.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MessagesUploadAttachmentsComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => MessagesUploadAttachmentsComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.BaseUploadAttachmentsService }, { type: i2.SharedMethodsService }, { type: i3.MessagesUploadAttachmentsService }]; }, propDecorators: { maxSize: [{
                type: Input
            }], initAttachments: [{
                type: Input
            }], disabled: [{
                type: Input
            }], multiple: [{
                type: Input
            }], attachmentButtonText: [{
                type: Input
            }], accept: [{
                type: Input
            }], maxAttachmentSizeErrorTpl: [{
                type: ViewChild,
                args: ['maxAttachmentSizeError']
            }] } });
export class MessagesUploadAttachmentsCustomizableDirective extends BbTemplate {
}
MessagesUploadAttachmentsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesUploadAttachmentsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesUploadAttachmentsCustomizableDirective, selector: "[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesUploadAttachmentsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesEmployeeUploadAttachmentsCustomizable],[bbMessagesUploadAttachmentsCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,