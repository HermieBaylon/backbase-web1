import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-v5-http-ang";
export class CreateMessageFormImplementationService {
    constructor(employeeService) {
        this.employeeService = employeeService;
        this.maxPaginationItemsNum = 65535;
    }
    /**
     * Get topics
     *
     * @returns Employee topics stream
     */
    getTopics() {
        return this.employeeService
            .getTopicsEmployee({ size: this.maxPaginationItemsNum, subscribed: true })
            .pipe(catchError(() => of([])));
    }
    /**
     * Create message
     *
     * @param params Create message request params
     * @returns Create message stream
     */
    createMessage(params) {
        return this.employeeService.postMessagesEmployee({ presentationMessageEmployeePostRequestBody: params });
    }
}
CreateMessageFormImplementationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormImplementationService, deps: [{ token: i1.EmployeeHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
CreateMessageFormImplementationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormImplementationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: CreateMessageFormImplementationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.EmployeeHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLW1lc3NhZ2UtZm9ybS1pbXBsZW1lbnRhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tZXNzYWdlcy1jb21tb24vc3JjL2NvbXBvbmVudHMvY3JlYXRlLW1lc3NhZ2UvZW1wbG95ZWUtZm9ybS9zZXJ2aWNlcy9jcmVhdGUtbWVzc2FnZS1mb3JtLWltcGxlbWVudGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBVTVDLE1BQU0sT0FBTyxzQ0FBc0M7SUFLakQsWUFBNkIsZUFBb0M7UUFBcEMsb0JBQWUsR0FBZixlQUFlLENBQXFCO1FBRmhELDBCQUFxQixHQUFHLEtBQUssQ0FBQztJQUVxQixDQUFDO0lBRXJFOzs7O09BSUc7SUFDSCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsZUFBZTthQUN4QixpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMscUJBQXFCLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO2FBQ3pFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxhQUFhLENBQ1gsTUFBa0Q7UUFFbEQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsMENBQTBDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMzRyxDQUFDOztvSUE1QlUsc0NBQXNDO3dJQUF0QyxzQ0FBc0M7NEZBQXRDLHNDQUFzQztrQkFEbEQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgRW1wbG95ZWVIdHRwU2VydmljZSxcbiAgVG9waWNzR2V0UmVzcG9uc2VCb2R5LFxuICBQcmVzZW50YXRpb25NZXNzYWdlRW1wbG95ZWVQb3N0UmVxdWVzdEJvZHksXG4gIFByZXNlbnRhdGlvbk1lc3NhZ2VQb3N0UmVzcG9uc2VCb2R5LFxufSBmcm9tICdAYmFja2Jhc2UvbWVzc2FnZXMtdjUtaHR0cC1hbmcnO1xuaW1wb3J0IHsgQmFzZUNyZWF0ZU1lc3NhZ2VGb3JtU2VydmljZSB9IGZyb20gJy4uLy4uL2Jhc2UtZm9ybS9iYXNlLWNyZWF0ZS1tZXNzYWdlLWZvcm0uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDcmVhdGVNZXNzYWdlRm9ybUltcGxlbWVudGF0aW9uU2VydmljZVxuICBpbXBsZW1lbnRzIEJhc2VDcmVhdGVNZXNzYWdlRm9ybVNlcnZpY2U8UHJlc2VudGF0aW9uTWVzc2FnZUVtcGxveWVlUG9zdFJlcXVlc3RCb2R5Plxue1xuICBwcml2YXRlIHJlYWRvbmx5IG1heFBhZ2luYXRpb25JdGVtc051bSA9IDY1NTM1O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZW1wbG95ZWVTZXJ2aWNlOiBFbXBsb3llZUh0dHBTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBHZXQgdG9waWNzXG4gICAqXG4gICAqIEByZXR1cm5zIEVtcGxveWVlIHRvcGljcyBzdHJlYW1cbiAgICovXG4gIGdldFRvcGljcygpOiBPYnNlcnZhYmxlPFRvcGljc0dldFJlc3BvbnNlQm9keVtdIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLmVtcGxveWVlU2VydmljZVxuICAgICAgLmdldFRvcGljc0VtcGxveWVlKHsgc2l6ZTogdGhpcy5tYXhQYWdpbmF0aW9uSXRlbXNOdW0sIHN1YnNjcmliZWQ6IHRydWUgfSlcbiAgICAgIC5waXBlKGNhdGNoRXJyb3IoKCkgPT4gb2YoW10pKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIG1lc3NhZ2VcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyBDcmVhdGUgbWVzc2FnZSByZXF1ZXN0IHBhcmFtc1xuICAgKiBAcmV0dXJucyBDcmVhdGUgbWVzc2FnZSBzdHJlYW1cbiAgICovXG4gIGNyZWF0ZU1lc3NhZ2UoXG4gICAgcGFyYW1zOiBQcmVzZW50YXRpb25NZXNzYWdlRW1wbG95ZWVQb3N0UmVxdWVzdEJvZHksXG4gICk6IE9ic2VydmFibGU8UHJlc2VudGF0aW9uTWVzc2FnZVBvc3RSZXNwb25zZUJvZHkgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuZW1wbG95ZWVTZXJ2aWNlLnBvc3RNZXNzYWdlc0VtcGxveWVlKHsgcHJlc2VudGF0aW9uTWVzc2FnZUVtcGxveWVlUG9zdFJlcXVlc3RCb2R5OiBwYXJhbXMgfSk7XG4gIH1cbn1cbiJdfQ==