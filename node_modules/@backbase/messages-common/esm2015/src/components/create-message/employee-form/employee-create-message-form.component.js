import { Component, Directive, Input } from '@angular/core';
import { FormControl } from '@angular/forms';
import { catchError, debounceTime, distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';
import { EMPTY } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BaseCreateMessageFormComponent } from '../base-form/base-create-message-form.component';
import { BaseCreateMessageFormService } from '../base-form/base-create-message-form.service';
import { CreateMessageFormImplementationService } from './services/create-message-form-implementation.service';
import { BaseUploadAttachmentsService } from '../../upload-attachments/services/base-attachments.service';
import { MessagesEmployeeUploadAttachmentsService } from '../../upload-attachments/services/employee-upload-attachments.service';
import { topicPlaceholderConfig } from '../../../utils/topic-placeholder-text-helper';
import * as i0 from "@angular/core";
import * as i1 from "./services/employee-create-message-form.service";
import * as i2 from "../../../services/messages-encoding/messages-encoding.service";
import * as i3 from "../../../services/shared-methods/shared-methods.service";
import * as i4 from "@angular/forms";
import * as i5 from "../base-form/base-create-message-form.service";
import * as i6 from "../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service";
import * as i7 from "../../upload-attachments/services/messages-upload-attachments.service";
import * as i8 from "@backbase/ui-ang/dropdown-single-select";
import * as i9 from "@backbase/ui-ang/input-validation-message";
import * as i10 from "@backbase/ui-ang/search-box";
import * as i11 from "@backbase/ui-ang/input-text";
import * as i12 from "@backbase/ui-ang/input-checkbox";
import * as i13 from "@backbase/ui-ang/rich-text-editor";
import * as i14 from "../../upload-attachments/messages-upload-attachments.component";
import * as i15 from "@backbase/ui-ang/load-button";
import * as i16 from "../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.component";
import * as i17 from "@angular/common";
import * as i18 from "@backbase/ui-ang/button";
import * as i19 from "../../../directives/prevent-bubble-down/prevent-bubble-down.directive";
export class EmployeeCreateMessageFormComponent extends BaseCreateMessageFormComponent {
    constructor(employeeService, encodingService, sharedService, fb, cd, createMessageFormService, confirmModalService, uploadService) {
        super(sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService);
        this.employeeService = employeeService;
        this.encodingService = encodingService;
        this.sharedService = sharedService;
        this.fb = fb;
        this.cd = cd;
        this.createMessageFormService = createMessageFormService;
        this.confirmModalService = confirmModalService;
        this.uploadService = uploadService;
        /**
         * Debounce time for input search requests
         */
        this.debounceTime = 500;
        /**
         * Minimum length value for input search request
         */
        this.minSearchLength = 1;
        /**
         * Make predefined user field readonly
         */
        this.isPreDefinedUserReadonly = false;
        /**
         * Configs for topic selector placeholder
         */
        this.topicPlaceholderConfig = topicPlaceholderConfig;
        /**
         * Typeahead options.
         */
        this.typeaheadOptions = {
            ngbTypeahead: this.search.bind(this),
            resultFormatter: (item) => item.fullName,
            inputFormatter: (item) => item.fullName,
        };
        /**
         * Additional form fields.
         */
        this.additionalFormFields = {
            recipient: '',
            important: false,
            notDeletable: false,
            'read-only': false,
        };
        Object.keys(this.additionalFormFields).forEach(key => {
            const validator = key === 'recipient' ? this.customRequiredValidator : undefined;
            this.newMessageFormGroup.addControl(key, new FormControl(this.additionalFormFields[key], validator));
        });
        this.newMessageFormGroup.updateValueAndValidity();
    }
    /**
     * Predefine form
     */
    set preDefineForm(val) {
        if (val.recipient) {
            this.getUserName(val.recipient);
        }
    }
    /**
     * The method upon creation of the message form submission.
     */
    onConfirm() {
        this.newMessageFormGroup.markAsDirty();
        this.newMessageFormGroup.markAllAsTouched();
        const { valid } = this.newMessageFormGroup;
        const value = this.newMessageFormGroup.getRawValue();
        if (valid) {
            const finalValue = Object.assign({ subject: '', body: '', topic: '', recipient: value.recipient.id, important: value.important, deletable: !value.notDeletable, 'read-only': value['read-only'] }, this.getSimpleFormVal(value));
            this.createMessage(finalValue);
        }
    }
    /**
     * The method to search for typeahead options.
     *
     * @param text Search query
     * @returns Search stream
     */
    search(text) {
        return text.pipe(debounceTime(this.debounceTime), distinctUntilChanged(), filter(value => value.length > this.minSearchLength), switchMap(value => this.employeeService.getUsers(value)));
    }
    resetToInit() {
        super.resetToInit();
        this.resetAdditionalFields();
    }
    customRequiredValidator(control) {
        const value = control.value;
        const isSelected = value && typeof value !== 'string';
        return !isSelected ? { required: true } : null;
    }
    getUserName(userId) {
        this.employeeService
            .getUserById(userId)
            .pipe(tap(user => this.setUserName(user, userId)), catchError(err => {
            this.sharedService.openNotification(this.sharedService.getErrorMessage(err), 'error');
            return EMPTY;
        }))
            .subscribe();
    }
    setUserName(user, userId) {
        this.newMessageFormGroup.controls['recipient'].setValue(Object.assign(Object.assign({}, user), { id: userId }));
        if (this.isPreDefinedUserReadonly) {
            this.newMessageFormGroup.controls['recipient'].disable();
        }
    }
    resetAdditionalFields() {
        Object.keys(this.additionalFormFields).forEach(key => {
            this.newMessageFormGroup.controls[key].setValue(this.additionalFormFields[key]);
        });
    }
}
EmployeeCreateMessageFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormComponent, deps: [{ token: i1.EmployeeCreateMessageFormService }, { token: i2.MessagesEncodingService }, { token: i3.SharedMethodsService }, { token: i4.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: i5.BaseCreateMessageFormService }, { token: i6.MessagesManipulationConfirmModalService }, { token: i7.MessagesUploadAttachmentsService }], target: i0.ɵɵFactoryTarget.Component });
EmployeeCreateMessageFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMessageFormComponent, selector: "bb-messages-employee-create-message-form", inputs: { debounceTime: "debounceTime", minSearchLength: "minSearchLength", preDefineForm: "preDefineForm", isPreDefinedUserReadonly: "isPreDefinedUserReadonly" }, providers: [
        {
            provide: BaseCreateMessageFormService,
            useClass: CreateMessageFormImplementationService,
        },
        {
            provide: BaseUploadAttachmentsService,
            useClass: MessagesEmployeeUploadAttachmentsService,
        },
    ], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbEmployeeCreateMessageFormCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    topics: topics | async,\n    maxAttachmentSize: maxAttachmentSize\n  }\"\n></ng-container>\n\n<ng-template\n  bbEmployeeCreateMessageFormCustomizable\n  let-host\n  let-topics=\"context.topics\"\n  let-maxAttachmentSize=\"context.maxAttachmentSize\"\n>\n  <form [formGroup]=\"host.newMessageFormGroup\" data-role=\"form\" (submit)=\"host.onConfirm()\">\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        *ngIf=\"\n          topics?.length\n            ? topicPlaceholderConfig.selectTopicPlaceholder\n            : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n        \"\n        [options]=\"topics\"\n        displayAttributePath=\"name\"\n        formControlName=\"topic\"\n        label=\"Topic\"\n        i18n-label=\"Topic label text@@messages.employeeCreateMessage.composeMessageForm.topicLabel\"\n        aria-label=\"Topic\"\n        [aria-invalid]=\"host.isInvalidControl('topic')\"\n        data-role=\"topics\"\n        aria-describedby=\"compose-message-topic-error-message\"\n        i18n-aria-label=\"Topic aria-label text@@messages.employeeCreateMessage.composeMessageForm.topicAriaLabel\"\n        labelClasses=\"form-label\"\n        [attr.placeholder]=\"topicPlaceholder\"\n        [placeholder]=\"topicPlaceholder\"\n        (blur)=\"host.resetFormOnElementBlur()\"\n      ></bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-topic-error-message\"\n        [showErrors]=\"host.isInvalidControl('topic')\"\n      >\n        <span\n          *ngIf=\"host.hasError('topic', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            required@@messages.employeeCreateMessage.composeMessageForm.errors.subjectRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <label i18n=\"User label text@@messages.employeeCreateMessage.composeMessageForm.recipientLabel\">User</label>\n      <bb-search-box-ui\n        formControlName=\"recipient\"\n        aria-label=\"Select user\"\n        i18n-aria-label=\"\n          Select user aria-label text@@messages.employeeCreateMessage.composeMessageForm.subjectAriaLabel\"\n        [attr.aria-invalid]=\"host.isInvalidControl('recipient')\"\n        aria-describedby=\"compose-message-recipient-error-message\"\n        placeholder=\"Select user\"\n        i18n-placeholder=\"Select user@@messages.employeeCreateMessage.composeMessageForm.selectRecipientPlaceholder\"\n        [typeaheadOptions]=\"host.typeaheadOptions\"\n        [required]=\"true\"\n      ></bb-search-box-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-recipient-error-message\"\n        [showErrors]=\"host.isInvalidControl('recipient')\"\n      >\n        <span\n          *ngIf=\"host.hasError('recipient', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMessage.composeMessageForm.errors.recipientRequired\"\n          >Field is required</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"subject\"\n        label=\"Subject\"\n        i18n-label=\"Subject label text@@messages.employeeCreateMessage.composeMessageForm.subjectLabel\"\n        aria-label=\"Subject\"\n        i18n-aria-label=\"Subject aria-label text@@messages.employeeCreateMessage.composeMessageForm.subjectAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('subject')\"\n        aria-describedby=\"compose-message-subject-error-message\"\n        placeholder=\"Write subject\"\n        i18n-placeholder=\"\n          Subject placeholder text@@messages.employeeCreateMessage.composeMessageForm.subjectPlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"subject\"\n        [maxlength]=\"host.maxSubjectLength\"\n        [required]=\"true\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-subject-error-message\"\n        [showErrors]=\"host.isInvalidControl('subject')\"\n      >\n        <span\n          *ngIf=\"host.hasError('subject', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMessage.composeMessageForm.errors.subjectRequired\"\n          >Field is required</span\n        >\n        <span\n          *ngIf=\"host.hasError('subject', 'maxlength')\"\n          i18n=\"\n            Error message if subject value is more then maxlength\n            value@@messages.employeeCreateMessage.composeMessageForm.errors.subjectMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('subject')?.value?.length }} characters exceeds the limit of\n          {{ host.maxSubjectLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"read-only\"\n          aria-label=\"Read only\"\n          data-role=\"readonly\"\n          i18n-aria-label=\"\n            checkbox read-only aria-label@@messages.employeeCreateMessage.composeMessageForm.readonlyCheckboxAriaLabel\"\n          label=\"Read only\"\n          i18n-label=\"\n            read only checkbox label text@@messages.employeeCreateMessage.composeMessageForm.readonlyCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"notDeletable\"\n          aria-label=\"Can't be deleted\"\n          data-role=\"deletable\"\n          i18n-aria-label=\"\n            checkbox deletable aria-label@@messages.employeeCreateMessage.composeMessageForm.deletableCheckboxAriaLabel\"\n          label=\"Can't be deleted\"\n          i18n-label=\"\n            deletable checkbox label text@@messages.employeeCreateMessage.composeMessageForm.deletableCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"important\"\n          aria-label=\"important\"\n          data-role=\"important\"\n          i18n-aria-label=\"\n            checkbox important aria-label@@messages.employeeCreateMessage.composeMessageForm.importantCheckboxAriaLabel\"\n          label=\"Important\"\n          i18n-label=\"\n            important checkbox label text@@messages.employeeCreateMessage.composeMessageForm.importantCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-rich-text-editor-ui\n        label=\"Message\"\n        i18n-label=\"Message label text@@messages.employeeCreateMessage.composeMessageForm.messageLabel\"\n        aria-label=\"Message\"\n        i18n-aria-label=\"Message aria-label text@@messages.employeeCreateMessage.composeMessageForm.messageAriaLabel\"\n        placeholder=\"Write some text\"\n        i18n-placeholder=\"\n          Message placeholder text@@messages.employeeCreateMessage.composeMessageForm.messagePlaceholder\"\n        [attr.aria-invalid]=\"host.isInvalidControl('body')\"\n        [attr.aria-describedby]=\"'compose-message-body-error-message'\"\n        formControlName=\"body\"\n        [counter]=\"true\"\n        [maxLength]=\"host.maxMessageLength\"\n        [required]=\"true\"\n      >\n        <ng-template #actions bbRichTextEditorActions>\n          <bb-rich-text-editor-bold-action></bb-rich-text-editor-bold-action>\n          <bb-rich-text-editor-italic-action></bb-rich-text-editor-italic-action>\n          <bb-rich-text-editor-underline-action></bb-rich-text-editor-underline-action>\n          <bb-rich-text-editor-strikethrough-action> </bb-rich-text-editor-strikethrough-action>\n          <bb-rich-text-editor-olist-action></bb-rich-text-editor-olist-action>\n          <bb-rich-text-editor-ulist-action> </bb-rich-text-editor-ulist-action>\n          <bb-rich-text-editor-link-action></bb-rich-text-editor-link-action>\n        </ng-template>\n      </bb-rich-text-editor-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-message-body-error-message\"\n        [showErrors]=\"host.isInvalidControl('body')\"\n      >\n        <span\n          *ngIf=\"host.hasError('body', 'required')\"\n          i18n=\"Error message if field is required@@messages.createMessage.composeMessageForm.errors.messageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-messages-upload-attachments\n        [maxSize]=\"maxAttachmentSize\"\n        formControlName=\"attachments\"\n      ></bb-messages-upload-attachments>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        data-role=\"submit\"\n        aria-label=\"Send\"\n        i18n-aria-label=\"\n          Submit button aria-label text@@messages.employeeCreateMessage.composeMessageForm.submitButtonAriaLabel\"\n        i18n=\"Submit button text@@messages.employeeCreateMessage.composeMessageForm.submitButton\"\n        [isLoading]=\"host.formLoading\"\n      >\n        Send\n      </bb-load-button-ui>\n      <button\n        bbButton\n        bbPreventBubbleDown\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        data-role=\"discard\"\n        aria-label=\"Discard\"\n        i18n-aria-label=\"\n          Discard button aria-label text@@messages.employeeCreateMessage.composeMessageForm.discardButtonAriaLabel\"\n        i18n=\"Discard button text@@messages.employeeCreateMessage.composeMessageForm.discardButton\"\n        (click)=\"host.confirmModalService.toggleModal(true, host.manipulationTypes.discard, host.newMessageFormGroup)\"\n      >\n        Discard\n      </button>\n    </div>\n  </form>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"host.confirmationModal.opened\"\n    [type]=\"host.confirmationModal.type\"\n    (cancel)=\"host.confirmModalService.toggleModal(false)\"\n    (confirm)=\"host.confirmConfirmationModal()\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #messageComposeSuccess>\n  <span\n    i18n=\"\n      Your message has been successfully sent.|Text of successful conversation\n      compose@@messages.employeeCreateMessage.composeMessageForm.messageSuccessCompose\"\n    >Your message has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #messageComposeError>\n  <span\n    i18n=\"\n      There is an error sending message.|Text of failed conversation\n      compose@@messages.employeeCreateMessage.composeMessageForm.messageErrorCompose\"\n    >There is an error sending message.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i8.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i9.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i10.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i11.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i12.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorComponent; }), selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorBoldActionComponent; }), selector: "bb-rich-text-editor-bold-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorItalicActionComponent; }), selector: "bb-rich-text-editor-italic-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorUnderlineActionComponent; }), selector: "bb-rich-text-editor-underline-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorStrikethroughActionComponent; }), selector: "bb-rich-text-editor-strikethrough-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorOlistActionComponent; }), selector: "bb-rich-text-editor-olist-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorUlistActionComponent; }), selector: "bb-rich-text-editor-ulist-action" }, { type: i0.forwardRef(function () { return i13.RichTextEditorLinkActionComponent; }), selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }, { type: i0.forwardRef(function () { return i14.MessagesUploadAttachmentsComponent; }), selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: ["maxSize", "initAttachments", "disabled", "multiple", "attachmentButtonText", "accept"] }, { type: i0.forwardRef(function () { return i15.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i16.MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0.forwardRef(function () { return EmployeeCreateMessageFormCustomizableDirective; }), selector: "[bbEmployeeCreateMessageFormCustomizable]" }, { type: i0.forwardRef(function () { return i4.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i4.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i4.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i17.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i4.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i4.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i4.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0.forwardRef(function () { return i13.RichTextEditorActionsDirective; }), selector: "ng-template[bbRichTextEditorActions]" }, { type: i0.forwardRef(function () { return i18.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i19.PreventBubbleDownDirective; }), selector: "[bbPreventBubbleDown]" }], pipes: { "async": i0.forwardRef(function () { return i17.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-employee-create-message-form',
                    templateUrl: './employee-create-message-form.component.html',
                    providers: [
                        {
                            provide: BaseCreateMessageFormService,
                            useClass: CreateMessageFormImplementationService,
                        },
                        {
                            provide: BaseUploadAttachmentsService,
                            useClass: MessagesEmployeeUploadAttachmentsService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.EmployeeCreateMessageFormService }, { type: i2.MessagesEncodingService }, { type: i3.SharedMethodsService }, { type: i4.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: i5.BaseCreateMessageFormService }, { type: i6.MessagesManipulationConfirmModalService }, { type: i7.MessagesUploadAttachmentsService }]; }, propDecorators: { debounceTime: [{
                type: Input
            }], minSearchLength: [{
                type: Input
            }], preDefineForm: [{
                type: Input
            }], isPreDefinedUserReadonly: [{
                type: Input
            }] } });
export class EmployeeCreateMessageFormCustomizableDirective extends BbTemplate {
}
EmployeeCreateMessageFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EmployeeCreateMessageFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMessageFormCustomizableDirective, selector: "[bbEmployeeCreateMessageFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMessageFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmployeeCreateMessageFormCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,