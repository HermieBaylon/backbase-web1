import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { Validators } from '@angular/forms';
import { BehaviorSubject, EMPTY, of, Subject } from 'rxjs';
import { filter, finalize, first, map, switchMap, takeUntil } from 'rxjs/operators';
import { ManipulationType, } from '../../messages-manipulation-confirm-modal/manipulation-confirm-modal-types.model';
import { MessagesManipulationConfirmModalService } from '../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service';
import { MessagesUploadAttachmentsService } from '../../upload-attachments/services/messages-upload-attachments.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/shared-methods/shared-methods.service";
import * as i2 from "../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service";
import * as i3 from "./base-create-message-form.service";
import * as i4 from "@angular/forms";
import * as i5 from "../../../services/messages-encoding/messages-encoding.service";
import * as i6 from "../../upload-attachments/services/messages-upload-attachments.service";
export class BaseCreateMessageFormComponent {
    constructor(sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService) {
        this.sharedService = sharedService;
        this.confirmModalService = confirmModalService;
        this.cd = cd;
        this.createMessageFormService = createMessageFormService;
        this.fb = fb;
        this.encodingService = encodingService;
        this.uploadService = uploadService;
        /**
         * The event that's fired after confirm button is pressed.
         */
        this.confirm = new EventEmitter();
        /**
         * The event that's fired after cancel button is pressed.
         */
        this.cancel = new EventEmitter();
        this.hostRef = this;
        /**
         * Confirmation modal parameters.
         */
        this.confirmationModal = {
            opened: false,
            type: undefined,
        };
        /**
         * The flag indicating if the form is loading.
         */
        this.formLoading = false;
        this.topics$ = new BehaviorSubject(undefined);
        /**
         * The stream with topics.
         */
        this.topics = this.topics$.asObservable();
        /**
         * The manipulationType enum ( `resolve`, `unresolve`, `assign`, `unassign`, `discard`,
         * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`)
         */
        this.manipulationTypes = ManipulationType;
        this.unsubscribe$ = new Subject();
        this.draftId$ = new BehaviorSubject(undefined);
        this.newMessageFormGroup = this.fb.group({
            topic: ['', Validators.required],
            subject: ['', Validators.required],
            body: ['', Validators.required],
            attachments: [],
        });
    }
    /**
     * Input draft id to get draft and prefill compose form with it
     */
    set draftId(value) {
        this.draftId$.next(value);
    }
    /**
     * The draft ID getter.
     */
    get draftId() {
        return this.draftId$.getValue();
    }
    ngOnInit() {
        if (this.reset) {
            this.reset.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
                this.confirmModalService.toggleModal(true, this.manipulationTypes.discard, this.newMessageFormGroup, this.draftFormValue);
            });
        }
        this.createMessageFormService.getTopics().subscribe(res => {
            this.restoreTopicSelection(res);
            this.topics$.next(res);
        });
        this.draftId$
            .pipe(filter(id => !!(id && id.length)), switchMap(id => this.getDrafts(id)))
            .subscribe();
        this.confirmModalService.emitToggleModal$.pipe(takeUntil(this.unsubscribe$)).subscribe(({ opened, type }) => {
            this.confirmationModal = { opened, type };
            if (!opened && type === ManipulationType.discard) {
                this.onCancel();
            }
            this.cd.detectChanges();
        });
    }
    /**
     * The method to get a simple value from the form.
     *
     * @param simpleFormModel Message data
     */
    getSimpleFormVal({ body, subject, topic, attachments }) {
        return Object.assign(Object.assign(Object.assign(Object.assign({}, (body && body.length && { body: this.encodingService.b64Encode(body) })), (subject && subject.length && { subject })), (topic && topic.id && { topic: topic.id })), (attachments && attachments.length && { attachments: attachments.map(item => item.id) }));
    }
    resetFormOnElementBlur() {
        if (!this.isModalOpen) {
            setTimeout(() => {
                this.newMessageFormGroup.reset();
            }, 0);
        }
    }
    /**
     * The method to create a message.
     *
     * @param value Message data
     */
    createMessage(value) {
        this.formLoading = true;
        this.newMessageFormGroup.disable();
        this.createMessageFormService
            .createMessage(value)
            .pipe(first(), switchMap(() => {
            if (this.createMessageFormService.deleteDraft && this.draftId) {
                return this.createMessageFormService.deleteDraft(this.draftId);
            }
            return of(undefined);
        }), finalize(() => {
            this.formLoading = false;
        }))
            .subscribe(this.responseHandler(this.messageComposeSuccessTpl, this.messageComposeErrorTpl));
    }
    /**
     * The method to save a message as a draft.
     *
     * @param value Draft data
     */
    onSave(value) {
        this.newMessageFormGroup.disable();
        if (this.sharedService.hasFormValue(this.newMessageFormGroup) &&
            this.sharedService.isFormInvalid(this.newMessageFormGroup, this.draftFormValue)) {
            if (this.draftId) {
                this.updateDraft(this.draftId, value);
            }
            else {
                this.saveDraft(value);
            }
        }
        else {
            this.onCancel();
        }
    }
    /**
     * The method to get the draft and prefill the compose form with it.
     *
     * @param id Draft id
     */
    getDrafts(id) {
        if (this.createMessageFormService.getDraft && id) {
            return this.createMessageFormService.getDraft(id).pipe(map(res => {
                const drafts = res || {};
                const formValue = {};
                const topics = this.topics$.getValue();
                for (const [key, value] of Object.entries(drafts)) {
                    formValue[key] = value;
                    if (this.newMessageFormGroup.controls.hasOwnProperty(key)) {
                        formValue[key] = this.handleFormValues(key, value, topics);
                        if (formValue[key]) {
                            this.newMessageFormGroup.controls[key].setValue(formValue[key]);
                        }
                    }
                }
                this.draftFormValue = formValue;
                this.newMessageFormGroup.markAsPristine();
                return res;
            }));
        }
        return EMPTY;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    /**
     * The method to resolve the confirmation modal.
     */
    confirmConfirmationModal() {
        if (this.confirmationModal && this.confirmationModal.type === ManipulationType.discard) {
            this.onCancel();
        }
        this.confirmModalService.toggleModal(false);
    }
    /**
     * The method to cancel the confirmation modal.
     */
    onCancel() {
        this.resetToInit(true);
        this.cancel.emit();
    }
    /**
     * The method to get any errors generated by failing validation, or null if there are no errors.
     *
     * @param field Field name
     * @param type Error type
     */
    hasError(field, type) {
        var _a;
        const control = this.getControl(field);
        return (_a = control === null || control === void 0 ? void 0 : control.errors) === null || _a === void 0 ? void 0 : _a[type];
    }
    /**
     * The method that defines whether the control is valid or not.
     *
     * @param field Field name
     * @returns Is form field valid flag
     */
    isInvalidControl(field) {
        const control = this.getControl(field);
        return !!control && control.touched && control.invalid;
    }
    saveDraft(value) {
        if (this.createMessageFormService.saveDraft) {
            this.createMessageFormService
                .saveDraft(value)
                .pipe(first())
                .subscribe(this.responseHandler(this.messageSaveDraftSuccessTpl, this.messageSaveDraftErrorTpl));
        }
    }
    updateDraft(draftId, value) {
        if (this.createMessageFormService.updateDraft) {
            this.createMessageFormService
                .updateDraft(draftId, value)
                .pipe(first())
                .subscribe(this.responseHandler(this.messageUpdateDraftSuccessTpl, this.messageUpdateDraftErrorTpl));
        }
    }
    handleFormValues(key, value, topics) {
        if (key === 'body') {
            return this.encodingService.b64Decode(value);
        }
        if (key === 'topic' && topics) {
            const existingTopic = topics.find(topic => topic.id === value.id);
            return existingTopic ? existingTopic : '';
        }
        if (key === 'attachments') {
            this.attachments = [...value];
        }
        return value;
    }
    responseHandler(successTpl, errorTpl) {
        return {
            next: res => {
                this.sharedService.openNotification(successTpl ? successTpl : '');
                this.confirm.emit(res && res.id);
            },
            error: error => {
                const errorMessage = this.sharedService.getErrorMessage(error) || errorTpl;
                this.sharedService.openNotification(errorMessage, 'error');
                this.newMessageFormGroup.enable();
            },
            complete: () => this.resetToInit(),
        };
    }
    resetToInit(isFormDiscard = false) {
        this.newMessageFormGroup.enable();
        this.newMessageFormGroup.reset();
        this.draftFormValue = undefined;
        this.uploadService.reset(isFormDiscard);
    }
    getControl(field) {
        return this.newMessageFormGroup && this.newMessageFormGroup.controls[field];
    }
    restoreTopicSelection(topics) {
        topics === null || topics === void 0 ? void 0 : topics.map(topic => {
            var _a, _b;
            if (topic.id === ((_b = (_a = this.newMessageFormGroup.controls['topic']) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.id)) {
                this.newMessageFormGroup.controls['topic'].setValue(topic);
            }
        });
    }
}
BaseCreateMessageFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageFormComponent, deps: [{ token: i1.SharedMethodsService }, { token: i2.MessagesManipulationConfirmModalService }, { token: i0.ChangeDetectorRef }, { token: i3.BaseCreateMessageFormService }, { token: i4.FormBuilder }, { token: i5.MessagesEncodingService }, { token: i6.MessagesUploadAttachmentsService }], target: i0.ɵɵFactoryTarget.Component });
BaseCreateMessageFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseCreateMessageFormComponent, selector: "ng-component", inputs: { reset: "reset", maxAttachmentSize: "maxAttachmentSize", maxMailoutNameLength: "maxMailoutNameLength", maxSubjectLength: "maxSubjectLength", maxMessageLength: "maxMessageLength", isModalOpen: "isModalOpen", draftId: "draftId" }, outputs: { confirm: "confirm", cancel: "cancel" }, providers: [MessagesManipulationConfirmModalService, MessagesUploadAttachmentsService], viewQueries: [{ propertyName: "messageComposeSuccessTpl", first: true, predicate: ["messageComposeSuccess"], descendants: true }, { propertyName: "messageSaveDraftSuccessTpl", first: true, predicate: ["messageSaveDraftSuccess"], descendants: true }, { propertyName: "messageUpdateDraftSuccessTpl", first: true, predicate: ["messageUpdateDraftSuccess"], descendants: true }, { propertyName: "messageComposeErrorTpl", first: true, predicate: ["messageComposeError"], descendants: true }, { propertyName: "messageSaveDraftErrorTpl", first: true, predicate: ["messageSaveDraftError"], descendants: true }, { propertyName: "messageUpdateDraftErrorTpl", first: true, predicate: ["messageUpdateDraftError"], descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageFormComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                    providers: [MessagesManipulationConfirmModalService, MessagesUploadAttachmentsService],
                }]
        }], ctorParameters: function () { return [{ type: i1.SharedMethodsService }, { type: i2.MessagesManipulationConfirmModalService }, { type: i0.ChangeDetectorRef }, { type: i3.BaseCreateMessageFormService }, { type: i4.FormBuilder }, { type: i5.MessagesEncodingService }, { type: i6.MessagesUploadAttachmentsService }]; }, propDecorators: { reset: [{
                type: Input
            }], maxAttachmentSize: [{
                type: Input
            }], maxMailoutNameLength: [{
                type: Input
            }], maxSubjectLength: [{
                type: Input
            }], maxMessageLength: [{
                type: Input
            }], isModalOpen: [{
                type: Input
            }], draftId: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }], messageComposeSuccessTpl: [{
                type: ViewChild,
                args: ['messageComposeSuccess']
            }], messageSaveDraftSuccessTpl: [{
                type: ViewChild,
                args: ['messageSaveDraftSuccess']
            }], messageUpdateDraftSuccessTpl: [{
                type: ViewChild,
                args: ['messageUpdateDraftSuccess']
            }], messageComposeErrorTpl: [{
                type: ViewChild,
                args: ['messageComposeError']
            }], messageSaveDraftErrorTpl: [{
                type: ViewChild,
                args: ['messageSaveDraftError']
            }], messageUpdateDraftErrorTpl: [{
                type: ViewChild,
                args: ['messageUpdateDraftError']
            }] } });
//# sourceMappingURL=data:application/json;base64,