import { Component, Input } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { switchMap, takeUntil } from 'rxjs/operators';
import { snapshot } from '../../../utils/snapshot';
import { getPropertyValue } from '../../../utils/item-model-property';
import { modelItemToBoolean } from '../../../utils/type-helpers';
import * as i0 from "@angular/core";
import * as i1 from "./base-create-message-modal-properties.service";
import * as i2 from "../../../services/shared-methods/shared-methods.service";
export class BaseCreateMessageModalComponent {
    constructor(properties, shared) {
        this.properties = properties;
        this.shared = shared;
        /**
         * The unique ID HTML property for each component instance.
         */
        this.id = `base-create-message-modal-${BaseCreateMessageModalComponent.counter++}`;
        this.resetSubject = new Subject();
        /**
         * The stream with the form reset triggers.
         */
        this.resetStream = this.resetSubject.asObservable();
        this.hostRef = this;
        /**
         * The flag indicating if the modal is opened or closed.
         */
        this.modalOpened = false;
        /**
         * The modal options.
         */
        this.modalOptions = {
            size: 'md',
            beforeDismiss: () => {
                this.resetSubject.next();
                return false;
            },
        };
        this.maxAttachmentSize$$ = new BehaviorSubject(undefined);
        this.maxMailoutNameLength$$ = new BehaviorSubject(undefined);
        this.maxSubjectLength$$ = new BehaviorSubject(undefined);
        this.maxMessageLength$$ = new BehaviorSubject(undefined);
        this.modalHeader$$ = new BehaviorSubject(undefined);
        this.hideComposeButton$$ = new BehaviorSubject(undefined);
        this.createMessageOpenEventName$$ = new BehaviorSubject(undefined);
        this.createMessageClosedEventName$$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        /**
         * The stream with the maximum name size.
         */
        this.maxMailoutNameLength = getPropertyValue(this.maxMailoutNameLength$$, this.properties.maxMailoutNameLength);
        /**
         * The stream with the maximum subject size.
         */
        this.maxSubjectLength = getPropertyValue(this.maxSubjectLength$$, this.properties.maxSubjectLength);
        /**
         * The stream with the maximum attachment size.
         */
        this.maxAttachmentSize = getPropertyValue(this.maxAttachmentSize$$, this.properties.maxAttachmentSize);
        /**
         * The stream with the maximum message length.
         */
        this.maxMessageLength = getPropertyValue(this.maxMessageLength$$, this.properties.maxMessageLength);
        /**
         * The stream with the modal header text.
         */
        this.modalHeader = getPropertyValue(this.modalHeader$$, this.properties.modalHeader);
        /**
         * The stream with a flag indicating if the Compose button is hidden.
         */
        this.hideComposeButton = getPropertyValue(this.hideComposeButton$$, this.properties.hideComposeButton);
        /**
         * Event published to open Create message modal
         */
        this.createMessageOpenEventName = getPropertyValue(this.createMessageOpenEventName$$, this.properties.createMessageOpenEventName);
        /**
         * Event published when Create message modal widget was closed
         */
        this.createMessageClosedEventName = getPropertyValue(this.createMessageClosedEventName$$, this.properties.createMessageClosedEventName);
        this.createMessageOpenEventName
            .pipe(switchMap(eventName => this.shared.eventBusFactory(eventName)), takeUntil(this.destroy$))
            .subscribe(obj => this.openModal(obj && obj.draftId));
    }
    /**
     * The stream with the maximum attachment size.
     */
    set maxAttachmentSizeValue(value) {
        this.maxAttachmentSize$$.next(String(value));
    }
    /**
     * The stream with the maximum name length.
     */
    set maxMailoutNameLengthValue(value) {
        this.maxMailoutNameLength$$.next(Number(value));
    }
    /**
     * The stream with the maximum subject length.
     */
    set maxSubjectLengthValue(value) {
        this.maxSubjectLength$$.next(Number(value));
    }
    /**
     * The stream with the maximum message length.
     */
    set maxMessageLengthValue(value) {
        this.maxMessageLength$$.next(Number(value));
    }
    /**
     * The stream with the modal header.
     */
    set modalHeaderValue(value) {
        this.modalHeader$$.next(value);
    }
    /**
     * The stream with a flag indicating if the Compose button is hidden.
     */
    set hideComposeButtonValue(value) {
        this.hideComposeButton$$.next(modelItemToBoolean(value));
    }
    /**
     * Event published to open Create message modal
     */
    set createMessageOpenEventNameValue(value) {
        this.createMessageOpenEventName$$.next(value);
    }
    /**
     * Event published when Create message modal widget was closed
     */
    set createMessageClosedEventNameValue(value) {
        this.createMessageClosedEventName$$.next(value);
    }
    /**
     * The method to open the modal.
     *
     * @param id
     */
    openModal(id) {
        this.modalOpened = true;
        this.draftId = id;
    }
    /**
     * The method to close the modal.
     */
    closeModal() {
        this.modalOpened = false;
        const eventName = snapshot(this.createMessageClosedEventName);
        this.shared.eventBusPublish(eventName, {});
        this.draftId = undefined;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
BaseCreateMessageModalComponent.counter = 0;
BaseCreateMessageModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalComponent, deps: [{ token: i1.BaseCreateMessageModalPropertiesService }, { token: i2.SharedMethodsService }], target: i0.ɵɵFactoryTarget.Component });
BaseCreateMessageModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseCreateMessageModalComponent, selector: "ng-component", inputs: { maxAttachmentSizeValue: ["maxAttachmentSize", "maxAttachmentSizeValue"], maxMailoutNameLengthValue: ["maxMailoutNameLength", "maxMailoutNameLengthValue"], maxSubjectLengthValue: ["maxSubjectLength", "maxSubjectLengthValue"], maxMessageLengthValue: ["maxMessageLength", "maxMessageLengthValue"], modalHeaderValue: ["modalHeader", "modalHeaderValue"], hideComposeButtonValue: ["hideComposeButton", "hideComposeButtonValue"], createMessageOpenEventNameValue: ["createMessageOpenEventName", "createMessageOpenEventNameValue"], createMessageClosedEventNameValue: ["createMessageClosedEventName", "createMessageClosedEventNameValue"] }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.BaseCreateMessageModalPropertiesService }, { type: i2.SharedMethodsService }]; }, propDecorators: { maxAttachmentSizeValue: [{
                type: Input,
                args: ['maxAttachmentSize']
            }], maxMailoutNameLengthValue: [{
                type: Input,
                args: ['maxMailoutNameLength']
            }], maxSubjectLengthValue: [{
                type: Input,
                args: ['maxSubjectLength']
            }], maxMessageLengthValue: [{
                type: Input,
                args: ['maxMessageLength']
            }], modalHeaderValue: [{
                type: Input,
                args: ['modalHeader']
            }], hideComposeButtonValue: [{
                type: Input,
                args: ['hideComposeButton']
            }], createMessageOpenEventNameValue: [{
                type: Input,
                args: ['createMessageOpenEventName']
            }], createMessageClosedEventNameValue: [{
                type: Input,
                args: ['createMessageClosedEventName']
            }] } });
//# sourceMappingURL=data:application/json;base64,