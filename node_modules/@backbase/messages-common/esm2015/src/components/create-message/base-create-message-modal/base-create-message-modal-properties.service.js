import { Injectable, Optional } from '@angular/core';
import { defaultModelObservable } from '../../../utils/item-model-property';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export const DefaultWidgetProperties = {
    debounceTime: 500,
    maxAttachmentSize: '10',
    maxMailoutNameLength: 255,
    maxSubjectLength: 100,
    maxMessageLength: 300,
    minSearchLength: 1,
    modalHeader: 'New message',
    hideComposeButton: false,
    createMessageOpenEventName: 'bb.event.messages.create.message.open',
    createMessageClosedEventName: 'bb.event.messages.create.message.close',
    senderDisplayName: 'Backbase',
    shouldPreDefineUser: false,
    isPreDefinedUserReadonly: false,
};
export class BaseCreateMessageModalPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
    }
    /**
     * Max attachment size
     */
    get maxAttachmentSize() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.maxAttachmentSize);
        }
        return this.itemModel.property('maxAttachmentSize', DefaultWidgetProperties.maxAttachmentSize);
    }
    /**
     * Max message length
     */
    get maxMessageLength() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.maxMessageLength);
        }
        return this.itemModel.property('maxMessageLength', DefaultWidgetProperties.maxMessageLength);
    }
    /**
     * Max mailout name length
     */
    get maxMailoutNameLength() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.maxMailoutNameLength);
        }
        return this.itemModel.property('maxMailoutNameLength', DefaultWidgetProperties.maxMailoutNameLength);
    }
    /**
     * Max subject length
     */
    get maxSubjectLength() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.maxSubjectLength);
        }
        return this.itemModel.property('maxSubjectLength', DefaultWidgetProperties.maxSubjectLength);
    }
    /**
     * Modal header
     */
    get modalHeader() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.modalHeader);
        }
        return this.itemModel.property('modalHeader', DefaultWidgetProperties.modalHeader);
    }
    /**
     * Debounce time
     */
    get debounceTime() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.debounceTime);
        }
        return this.itemModel.property('debounceTime', DefaultWidgetProperties.debounceTime);
    }
    /**
     * Min search length
     */
    get minSearchLength() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.minSearchLength);
        }
        return this.itemModel.property('minSearchLength', DefaultWidgetProperties.minSearchLength);
    }
    /**
     * Flag to hide or show compose button
     */
    get hideComposeButton() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.hideComposeButton);
        }
        return this.itemModel.property('hideComposeButton', DefaultWidgetProperties.hideComposeButton);
    }
    /**
     * Open event for create message modal
     */
    get createMessageOpenEventName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.createMessageOpenEventName);
        }
        return this.itemModel.property('createMessageOpenEventName', DefaultWidgetProperties.createMessageOpenEventName);
    }
    /**
     * Close event for create message modal
     */
    get createMessageClosedEventName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.createMessageClosedEventName);
        }
        return this.itemModel.property('createMessageClosedEventName', DefaultWidgetProperties.createMessageClosedEventName);
    }
    /**
     * Flag to show or hide sender name
     */
    get senderDisplayName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.senderDisplayName);
        }
        return this.itemModel.property('senderDisplayName', DefaultWidgetProperties.senderDisplayName);
    }
    /**
     * Flag to predefine or not user input
     */
    get shouldPreDefineUser() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.shouldPreDefineUser);
        }
        return this.itemModel.property('shouldPreDefineUser', DefaultWidgetProperties.shouldPreDefineUser);
    }
    /**
     * Flag to disable predefined user input
     */
    get isPreDefinedUserReadonly() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.isPreDefinedUserReadonly);
        }
        return this.itemModel.property('isPreDefinedUserReadonly', DefaultWidgetProperties.isPreDefinedUserReadonly);
    }
}
BaseCreateMessageModalPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BaseCreateMessageModalPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseCreateMessageModalPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,