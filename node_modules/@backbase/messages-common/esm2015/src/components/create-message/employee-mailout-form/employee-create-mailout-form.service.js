import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-v5-http-ang";
export class EmployeeCreateMailoutFormService {
    constructor(messagesService, employeeService) {
        this.messagesService = messagesService;
        this.employeeService = employeeService;
        this.maxPaginationItemsNum = 65535;
    }
    /**
     * Get topics
     *
     * @returns Get topics stream
     */
    getTopics() {
        return this.employeeService
            .getTopicsEmployee({ size: this.maxPaginationItemsNum, subscribed: true })
            .pipe(catchError(() => of([])));
    }
    /**
     * Create message
     *
     * @param body Create message request body
     * @returns Create message stream
     */
    createMessage(body) {
        return this.messagesService.postMailout({ mailoutPostRequestBody: body });
    }
}
EmployeeCreateMailoutFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormService, deps: [{ token: i1.MailoutHttpService }, { token: i1.EmployeeHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
EmployeeCreateMailoutFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MailoutHttpService }, { type: i1.EmployeeHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wbG95ZWUtY3JlYXRlLW1haWxvdXQtZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tZXNzYWdlcy1jb21tb24vc3JjL2NvbXBvbmVudHMvY3JlYXRlLW1lc3NhZ2UvZW1wbG95ZWUtbWFpbG91dC1mb3JtL2VtcGxveWVlLWNyZWF0ZS1tYWlsb3V0LWZvcm0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFXNUMsTUFBTSxPQUFPLGdDQUFnQztJQUczQyxZQUNtQixlQUFtQyxFQUNuQyxlQUFvQztRQURwQyxvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7UUFDbkMsb0JBQWUsR0FBZixlQUFlLENBQXFCO1FBSnRDLDBCQUFxQixHQUFHLEtBQUssQ0FBQztJQUs1QyxDQUFDO0lBRUo7Ozs7T0FJRztJQUNILFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxlQUFlO2FBQ3hCLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDekUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGFBQWEsQ0FBQyxJQUE0QjtRQUN4QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM1RSxDQUFDOzs4SEEzQlUsZ0NBQWdDO2tJQUFoQyxnQ0FBZ0M7NEZBQWhDLGdDQUFnQztrQkFENUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgRW1wbG95ZWVIdHRwU2VydmljZSxcbiAgTWFpbG91dEh0dHBTZXJ2aWNlLFxuICBNYWlsb3V0UG9zdFJlcXVlc3RCb2R5LFxuICBNYWlsb3V0UG9zdFJlc3BvbnNlQm9keSxcbiAgVG9waWNzR2V0RW1wbG95ZWVSZXNwb25zZUJvZHksXG59IGZyb20gJ0BiYWNrYmFzZS9tZXNzYWdlcy12NS1odHRwLWFuZyc7XG5pbXBvcnQgeyBCYXNlQ3JlYXRlTWVzc2FnZUZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS1mb3JtL2Jhc2UtY3JlYXRlLW1lc3NhZ2UtZm9ybS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVtcGxveWVlQ3JlYXRlTWFpbG91dEZvcm1TZXJ2aWNlIGltcGxlbWVudHMgQmFzZUNyZWF0ZU1lc3NhZ2VGb3JtU2VydmljZTxNYWlsb3V0UG9zdFJlcXVlc3RCb2R5PiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbWF4UGFnaW5hdGlvbkl0ZW1zTnVtID0gNjU1MzU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZXNzYWdlc1NlcnZpY2U6IE1haWxvdXRIdHRwU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVtcGxveWVlU2VydmljZTogRW1wbG95ZWVIdHRwU2VydmljZSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBHZXQgdG9waWNzXG4gICAqXG4gICAqIEByZXR1cm5zIEdldCB0b3BpY3Mgc3RyZWFtXG4gICAqL1xuICBnZXRUb3BpY3MoKTogT2JzZXJ2YWJsZTxUb3BpY3NHZXRFbXBsb3llZVJlc3BvbnNlQm9keVtdIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLmVtcGxveWVlU2VydmljZVxuICAgICAgLmdldFRvcGljc0VtcGxveWVlKHsgc2l6ZTogdGhpcy5tYXhQYWdpbmF0aW9uSXRlbXNOdW0sIHN1YnNjcmliZWQ6IHRydWUgfSlcbiAgICAgIC5waXBlKGNhdGNoRXJyb3IoKCkgPT4gb2YoW10pKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIG1lc3NhZ2VcbiAgICpcbiAgICogQHBhcmFtIGJvZHkgQ3JlYXRlIG1lc3NhZ2UgcmVxdWVzdCBib2R5XG4gICAqIEByZXR1cm5zIENyZWF0ZSBtZXNzYWdlIHN0cmVhbVxuICAgKi9cbiAgY3JlYXRlTWVzc2FnZShib2R5OiBNYWlsb3V0UG9zdFJlcXVlc3RCb2R5KTogT2JzZXJ2YWJsZTxNYWlsb3V0UG9zdFJlc3BvbnNlQm9keSB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1NlcnZpY2UucG9zdE1haWxvdXQoeyBtYWlsb3V0UG9zdFJlcXVlc3RCb2R5OiBib2R5IH0pO1xuICB9XG59XG4iXX0=