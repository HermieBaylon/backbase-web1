import { Component, Directive, Input, Output, EventEmitter } from '@angular/core';
import { Validators } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BaseCreateMessageFormComponent } from '../base-form/base-create-message-form.component';
import { BaseCreateMessageFormService } from '../base-form/base-create-message-form.service';
import { BaseUploadAttachmentsService } from '../../upload-attachments/services/base-attachments.service';
import { MessagesEmployeeUploadAttachmentsService } from '../../upload-attachments/services/employee-upload-attachments.service';
import { EmployeeCreateMailoutFormService } from './employee-create-mailout-form.service';
import { topicPlaceholderConfig } from '../../../utils/topic-placeholder-text-helper';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/messages-encoding/messages-encoding.service";
import * as i2 from "../../../services/shared-methods/shared-methods.service";
import * as i3 from "@angular/forms";
import * as i4 from "../base-form/base-create-message-form.service";
import * as i5 from "../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service";
import * as i6 from "../../upload-attachments/services/messages-upload-attachments.service";
import * as i7 from "../../upload-attachments/messages-upload-attachments.component";
import * as i8 from "@backbase/ui-ang/input-validation-message";
import * as i9 from "@backbase/ui-ang/input-file";
import * as i10 from "@backbase/ui-ang/file-attachment";
import * as i11 from "@backbase/ui-ang/input-text";
import * as i12 from "@backbase/ui-ang/dropdown-single-select";
import * as i13 from "@backbase/ui-ang/input-checkbox";
import * as i14 from "@backbase/ui-ang/rich-text-editor";
import * as i15 from "@backbase/ui-ang/load-button";
import * as i16 from "../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.component";
import * as i17 from "@angular/common";
import * as i18 from "@backbase/ui-ang/button";
import * as i19 from "../../../directives/prevent-bubble-down/prevent-bubble-down.directive";
export class EmployeeCreateMailoutFormComponent extends BaseCreateMessageFormComponent {
    constructor(encodingService, sharedService, fb, cd, createMessageFormService, confirmModalService, uploadService) {
        super(sharedService, confirmModalService, cd, createMessageFormService, fb, encodingService, uploadService);
        this.encodingService = encodingService;
        this.sharedService = sharedService;
        this.fb = fb;
        this.cd = cd;
        this.createMessageFormService = createMessageFormService;
        this.confirmModalService = confirmModalService;
        this.uploadService = uploadService;
        this.hostRef = this;
        /**
         * Configs for topic selector placeholder
         */
        this.topicPlaceholderConfig = topicPlaceholderConfig;
        /**
         * The output with the mailout preview data.
         */
        this.review = new EventEmitter();
        this.defaultSenderName = '';
        this.newMessageFormGroup.addControl('important', this.fb.control(false));
        this.newMessageFormGroup.addControl('notDeletable', this.fb.control(false));
        this.newMessageFormGroup.addControl('mailoutName', this.fb.control(''));
        this.newMessageFormGroup.addControl('recipientsDataId', this.fb.control('', Validators.required));
        this.newMessageFormGroup.addControl('senderDisplayName', this.fb.control('', Validators.required));
        this.newMessageFormGroup.addControl('isBodyHtml', this.fb.control(false));
        this.newMessageFormGroup.addControl('template', this.fb.control(''));
        this.newMessageFormGroup.updateValueAndValidity();
    }
    /**
     * The input with the sender display name.
     */
    set senderDisplayName(value) {
        if (value) {
            const senderNameControl = this.newMessageFormGroup.controls['senderDisplayName'];
            senderNameControl.setValue(value);
            this.newMessageFormGroup.markAsPristine();
            this.defaultSenderName = value;
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.setDefaultMailoutFormValue();
    }
    setDefaultMailoutFormValue() {
        if (this.defaultMailout) {
            this.newMessageFormGroup.patchValue(Object.assign({}, this.defaultMailout));
            const bodyControl = this.newMessageFormGroup.controls['body'];
            if (this.defaultMailout.isBodyHtml) {
                bodyControl.setValue('');
                bodyControl.disable();
            }
            this.newMessageFormGroup.updateValueAndValidity();
            this.newMessageFormGroup.markAsDirty();
        }
    }
    /**
     * The method to load and parse the mailout template file.
     */
    onAddTemplateFile(input) {
        if (input.files && input.files[0]) {
            const file = input.files[0];
            const bodyInput = this.newMessageFormGroup.controls['body'];
            const templateInput = this.newMessageFormGroup.controls['template'];
            const fileReader = new FileReader();
            fileReader.onload = () => {
                templateInput.setValue({
                    body: fileReader.result,
                    name: file.name,
                    size: file.size,
                });
                this.newMessageFormGroup.controls['isBodyHtml'].setValue(true);
                templateInput.markAsTouched();
                bodyInput.clearValidators();
                bodyInput.disable();
            };
            fileReader.readAsText(file);
        }
    }
    /**
     * The method to clear the template file.
     */
    onClearTemplateFile() {
        const body = this.newMessageFormGroup.controls['body'];
        this.newMessageFormGroup.controls['template'].setValue(undefined);
        this.newMessageFormGroup.controls['isBodyHtml'].setValue(false);
        body.setValidators([Validators.required]);
        body.enable();
    }
    /**
     * The method to save the mailout.
     */
    onConfirm() {
        this.newMessageFormGroup.markAllAsTouched();
        this.newMessageFormGroup.markAsDirty();
        const { value, valid } = this.newMessageFormGroup;
        if (valid) {
            if (value.template && value.template.body) {
                value.body = value.template.body;
            }
            const finalValue = Object.assign({ subject: '', topic: '', body: '', mailoutName: value.mailoutName, recipientsData: {
                    id: value.recipientsDataId[0].id,
                }, senderDisplayName: this.defaultSenderName, isBodyHtml: value.isBodyHtml, important: !!value.important, deletable: !value.notDeletable }, this.getSimpleFormVal(value));
            if (value.isBodyHtml) {
                this.review.emit(Object.assign(Object.assign({}, value), { senderDisplayName: this.defaultSenderName }));
            }
            else {
                this.createMessage(finalValue);
            }
        }
    }
    /**
     * The method to discard the mailout.
     *
     * @param discardParam Should open modal flag
     */
    onDiscard(discardParam) {
        if (discardParam) {
            this.confirmModalService.toggleModal(discardParam, this.manipulationTypes.discard, this.newMessageFormGroup);
        }
        else {
            this.confirmModalService.toggleModal(discardParam);
        }
    }
    resetToInit(isFormDiscard = false) {
        super.resetToInit(isFormDiscard);
        this.onClearTemplateFile();
    }
}
EmployeeCreateMailoutFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormComponent, deps: [{ token: i1.MessagesEncodingService }, { token: i2.SharedMethodsService }, { token: i3.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: i4.BaseCreateMessageFormService }, { token: i5.MessagesManipulationConfirmModalService }, { token: i6.MessagesUploadAttachmentsService }], target: i0.ɵɵFactoryTarget.Component });
EmployeeCreateMailoutFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormComponent, selector: "bb-messages-employee-create-mailout-form", inputs: { defaultMailout: "defaultMailout", senderDisplayName: "senderDisplayName" }, outputs: { review: "review" }, providers: [
        {
            provide: BaseCreateMessageFormService,
            useClass: EmployeeCreateMailoutFormService,
        },
        {
            provide: BaseUploadAttachmentsService,
            useClass: MessagesEmployeeUploadAttachmentsService,
        },
    ], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbEmployeeCreateMailoutFormCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    topics: topics | async,\n    maxAttachmentSize: maxAttachmentSize,\n    maxSubjectLength: maxSubjectLength\n  }\"\n></ng-container>\n\n<ng-template\n  bbEmployeeCreateMailoutFormCustomizable\n  let-host\n  let-topics=\"context.topics\"\n  let-maxAttachmentSize=\"context.maxAttachmentSize\"\n>\n  <form [formGroup]=\"host.newMessageFormGroup\" data-role=\"form\" (submit)=\"host.onConfirm()\">\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--fill bb-stack__item--align-top\">\n          <label\n            data-role=\"recipients-label\"\n            for=\"recipientsDataId\"\n            i18n=\"\n              Recipients|Recipients label text@@messages.employeeCreateMailout.composeMailoutForm.recipientsLabelText\"\n            >Recipients</label\n          >\n          <bb-messages-upload-attachments\n            data-role=\"import-recipients\"\n            accept=\"text/csv\"\n            id=\"recipientsDataId\"\n            [maxSize]=\"maxAttachmentSize\"\n            [multiple]=\"false\"\n            [initAttachments]=\"host.defaultMailout?.recipientsDataId\"\n            formControlName=\"recipientsDataId\"\n            i18n-attachmentButtonText=\"\n              Import recipients|Upload recipients attachment button\n              text@@messages.employeeCreateMailout.composeMailoutForm.uploadRecipientsAttachmentButtonText\"\n            attachmentButtonText=\"Import recipients\"\n          ></bb-messages-upload-attachments>\n          <bb-input-validation-message-ui\n            id=\"compose-mailout-sender-name-error\"\n            [showErrors]=\"host.isInvalidControl('recipientsDataId')\"\n          >\n            <span\n              *ngIf=\"host.hasError('recipientsDataId', 'required')\"\n              i18n=\"\n                Error message if recipient field is\n                required@@messages.employeeCreateMailout.composeMailoutForm.errors.recipientsDataIdRequired\"\n            >\n              Recipient is required\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-stack__item bb-stack__item--fill bb-stack__item--align-top\">\n          <label\n            data-role=\"html-template\"\n            for=\"templateFile\"\n            i18n=\"Recipients|Recipients label text@@messages.employeeCreateMailout.composeMailoutForm.htmpTemplateLabel\"\n            >HTML Template</label\n          >\n          <div>\n            <bb-input-file-ui\n              *ngIf=\"!host.newMessageFormGroup.controls['template']?.value\"\n              accept=\".html\"\n              data-role=\"import-template\"\n              buttonText=\"Import template\"\n              i18n-buttonText=\"Import template@@messages.employeeCreateMailout.composeMailoutForm.attachFile\"\n              id=\"templateFile\"\n              (change)=\"host.onAddTemplateFile($event.target)\"\n            ></bb-input-file-ui>\n            <div class=\"row\">\n              <div class=\"col-auto\" *ngIf=\"host.newMessageFormGroup.controls['template']?.value as templateValue\">\n                <bb-file-attachment-ui\n                  [name]=\"templateValue.name\"\n                  [size]=\"templateValue.size\"\n                  [deletable]=\"true\"\n                  [disabled]=\"true\"\n                  (delete)=\"host.onClearTemplateFile()\"\n                ></bb-file-attachment-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"mailout-name-label\"\n        label=\"Mailout name\"\n        i18n-label=\"Mailout name text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNameLabel\"\n        aria-label=\"Mailout name\"\n        i18n-aria-label=\"\n          Subject aria-label text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNametAriaLabel\"\n        placeholder=\"Write mailout name\"\n        i18n-placeholder=\"\n          Mailout name placeholder text@@messages.employeeCreateMailout.composeMailoutForm.mailoutNamePlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"mailoutName\"\n        [maxlength]=\"host.maxMailoutNameLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui [showErrors]=\"host.isInvalidControl('mailoutName')\">\n        <span\n          *ngIf=\"host.hasError('mailoutName', 'maxlength')\"\n          i18n=\"\n            Error message if mailout name value is more then maxlength\n            value@@messages.employeeCreateMailout.composeMailoutForm.errors.mailoutNameMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('name')?.value?.length }} characters exceeds the limit of\n          {{ host.maxMailoutNameLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n      <p\n        class=\"bb-text-support bb-subtitle\"\n        data-role=\"mailout-name-subtitle\"\n        i18n=\"\n          Name exist for internal purposes only. It will not be displayed to\n          users@@messages.employeeCreateMailout.composeMailoutForm.mailoutNameSubtitleText\"\n      >\n        Name exist for internal purposes only. It will not be displayed to users\n      </p>\n    </div>\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        label=\"Sender name\"\n        data-role=\"sender-name\"\n        i18n-label=\"Sender name text@@messages.employeeCreateMailout.composeMailoutForm.senderNameLabel\"\n        aria-label=\"Sender name\"\n        i18n-aria-label=\"\n          Sender name aria-label text@@messages.employeeCreateMailout.composeMailoutForm.senderNameAriaLabel\"\n        aria-invalid=\"host.isInvalidControl('senderDisplayName')\"\n        [readonly]=\"host.defaultSenderName\"\n        aria-describedby=\"compose-mailout-sender-name-error\"\n        placeholder=\"Write sender name\"\n        i18n-placeholder=\"\n          Sender name placeholder text@@messages.employeeCreateMailout.composeMailoutForm.senderNamePlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"senderDisplayName\"\n      >\n      </bb-input-text-ui>\n      <p\n        class=\"bb-text-support bb-subtitle\"\n        data-role=\"sender-name-subtitle\"\n        i18n=\"\n          Employee name will be replaced for the\n          recipient@@messages.employeeCreateMailout.composeMailoutForm.senderDisplayNameSubtitleText\"\n      >\n        Employee name will be replaced for the recipient\n      </p>\n      <bb-input-validation-message-ui\n        id=\"compose-mailout-sender-name-error\"\n        [showErrors]=\"host.isInvalidControl('senderDisplayName')\"\n      >\n        <span\n          *ngIf=\"host.hasError('senderDisplayName', 'required')\"\n          i18n=\"\n            Error message if field is\n            required@@messages.createMessage.composeMessageForm.errors.senderDisplayNameMessageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        *ngIf=\"\n          topics?.length\n            ? topicPlaceholderConfig.selectTopicPlaceholder\n            : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n        \"\n        data-role=\"topics\"\n        [options]=\"topics\"\n        displayAttributePath=\"name\"\n        formControlName=\"topic\"\n        label=\"Topic\"\n        i18n-label=\"Topic label text@@messages.employeeCreateMailout.composeMailoutForm.topicLabel\"\n        aria-label=\"Topic\"\n        i18n-aria-label=\"Topic aria-label text@@messages.employeeCreateMailout.composeMailoutForm.topicAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('topic')\"\n        aria-describedby=\"compose-mailout-topic-error\"\n        labelClasses=\"form-label\"\n        [attr.placeholder]=\"topicPlaceholder\"\n        [placeholder]=\"topicPlaceholder\"\n        (blur)=\"host.resetFormOnElementBlur()\"\n      ></bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui id=\"compose-mailout-topic-error\" [showErrors]=\"host.isInvalidControl('topic')\">\n        <span\n          *ngIf=\"host.hasError('topic', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            required@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"subject\"\n        label=\"Subject\"\n        i18n-label=\"Subject label text@@messages.employeeCreateMailout.composeMailoutForm.subjectLabel\"\n        aria-label=\"Subject\"\n        i18n-aria-label=\"Subject aria-label text@@messages.employeeCreateMailout.composeMailoutForm.subjectAriaLabel\"\n        [aria-invalid]=\"host.isInvalidControl('subject')\"\n        aria-describedby=\"compose-mailout-subject-error\"\n        placeholder=\"Write subject\"\n        i18n-placeholder=\"\n          Subject placeholder text@@messages.employeeCreateMailout.composeMailoutForm.subjectPlaceholder\"\n        labelClasses=\"form-label\"\n        formControlName=\"subject\"\n        [maxlength]=\"host.maxSubjectLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui\n        id=\"compose-mailout-subject-error\"\n        [showErrors]=\"host.isInvalidControl('subject')\"\n      >\n        <span\n          *ngIf=\"host.hasError('subject', 'required')\"\n          i18n=\"\n            Error message if subject field is\n            empty@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectRequired\"\n          >Field is required</span\n        >\n        <span\n          *ngIf=\"host.hasError('subject', 'maxlength')\"\n          i18n=\"\n            Error message if subject value is more then maxlength\n            value@@messages.employeeCreateMailout.composeMailoutForm.errors.subjectMaxlength\"\n          >Your input of {{ newMessageFormGroup?.get('subject')?.value?.length }} characters exceeds the limit of\n          {{ host.maxSubjectLength }}. Please rephrase.</span\n        >\n      </bb-input-validation-message-ui>\n    </div>\n\n    <hr />\n\n    <div class=\"form-group\">\n      <div class=\"bb-stack\">\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"notDeletable\"\n          aria-label=\"Can't be deleted\"\n          data-role=\"deletable\"\n          i18n-aria-label=\"\n            checkbox deletable aria-label@@messages.employeeCreateMailout.composeMailoutForm.deletableCheckboxAriaLabel\"\n          label=\"Can't be deleted\"\n          i18n-label=\"\n            deletable checkbox label text@@messages.employeeCreateMailout.composeMailoutForm.deletableCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n\n        <bb-input-checkbox-ui\n          class=\"bb-stack__item bb-stack__item--fill\"\n          formControlName=\"important\"\n          aria-label=\"important\"\n          data-role=\"important\"\n          i18n-aria-label=\"\n            checkbox important aria-label@@messages.employeeCreateMailout.composeMailoutForm.importantCheckboxAriaLabel\"\n          label=\"Important\"\n          i18n-label=\"\n            important checkbox label text@@messages.employeeCreateMailout.composeMailoutForm.importantCheckboxLabel\"\n        ></bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <bb-rich-text-editor-ui\n        label=\"Message\"\n        data-role=\"message-body\"\n        i18n-label=\"Message label text@@messages.employeeCreateMailout.composeMailoutForm.messageLabel\"\n        aria-label=\"Message\"\n        i18n-aria-label=\"Message aria-label text@@messages.employeeCreateMailout.composeMailoutForm.messageAriaLabel\"\n        [attr.aria-invalid]=\"host.isInvalidControl('body')\"\n        [attr.aria-describedby]=\"'compose-mailout-body-error'\"\n        placeholder=\"Write some text\"\n        i18n-placeholder=\"\n          Message placeholder text@@messages.employeeCreateMailout.composeMailoutForm.messagePlaceholder\"\n        formControlName=\"body\"\n        [counter]=\"true\"\n        [maxLength]=\"host.maxMessageLength\"\n        [required]=\"!host.templateFile\"\n      >\n        <ng-template #actions bbRichTextEditorActions>\n          <bb-rich-text-editor-bold-action></bb-rich-text-editor-bold-action>\n          <bb-rich-text-editor-italic-action></bb-rich-text-editor-italic-action>\n          <bb-rich-text-editor-underline-action></bb-rich-text-editor-underline-action>\n          <bb-rich-text-editor-strikethrough-action> </bb-rich-text-editor-strikethrough-action>\n          <bb-rich-text-editor-olist-action></bb-rich-text-editor-olist-action>\n          <bb-rich-text-editor-ulist-action> </bb-rich-text-editor-ulist-action>\n          <bb-rich-text-editor-link-action></bb-rich-text-editor-link-action>\n        </ng-template>\n      </bb-rich-text-editor-ui>\n      <bb-input-validation-message-ui id=\"compose-mailout-body-error\" [showErrors]=\"host.isInvalidControl('body')\">\n        <span\n          *ngIf=\"host.hasError('body', 'required')\"\n          i18n=\"\n            Error message if field is required@@messages.employeeCreateMailout.composeMailoutForm.errors.messageRequired\"\n        >\n          Field is required\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n    <div class=\"form-group\">\n      <bb-messages-upload-attachments\n        [initAttachments]=\"host.defaultMailout?.attachments\"\n        [maxSize]=\"maxAttachmentSize\"\n        formControlName=\"attachments\"\n      ></bb-messages-upload-attachments>\n    </div>\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        data-role=\"submit\"\n        aria-label=\"Continue\"\n        i18n-aria-label=\"\n          Submit button aria-label text@@messages.employeeCreateMailout.composeMailoutForm.submitButtonAriaLabel\"\n        i18n=\"Submit button text@@messages.employeeCreateMailout.composeMailoutForm.submitButton\"\n        [isLoading]=\"host.formLoading\"\n      >\n        Continue\n      </bb-load-button-ui>\n      <button\n        bbButton\n        bbPreventBubbleDown\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        data-role=\"discard\"\n        aria-label=\"Discard\"\n        i18n-aria-label=\"\n          Discard button aria-label text@@messages.employeeCreateMailout.composeMailoutForm.discardButtonAriaLabel\"\n        i18n=\"Discard button text@@messages.employeeCreateMailout.composeMailoutForm.discardButton\"\n        (click)=\"host.onDiscard(true)\"\n      >\n        Discard\n      </button>\n    </div>\n  </form>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"host.confirmationModal.opened\"\n    [type]=\"host.confirmationModal.type\"\n    (cancel)=\"host.onDiscard(false)\"\n    (confirm)=\"host.confirmConfirmationModal()\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #messageComposeSuccess>\n  <ng-container bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      Your mailout has been successfully sent.|Text of successful conversation\n      compose@@messages.employeeCreateMailout.composeMailoutForm.messageSuccessCompose\"\n    >Your mailout has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #messageComposeError>\n  <ng-container bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      There is an error sending mailout.|Text of failed conversation\n      compose@@messages.employeeCreateMailout.composeMailoutForm.messageErrorCompose\"\n    >There is an error sending mailout.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i7.MessagesUploadAttachmentsComponent; }), selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: ["maxSize", "initAttachments", "disabled", "multiple", "attachmentButtonText", "accept"] }, { type: i0.forwardRef(function () { return i8.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i9.InputFileComponent; }), selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }, { type: i0.forwardRef(function () { return i10.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0.forwardRef(function () { return i11.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i12.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i13.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0.forwardRef(function () { return i14.RichTextEditorComponent; }), selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i0.forwardRef(function () { return i14.RichTextEditorBoldActionComponent; }), selector: "bb-rich-text-editor-bold-action" }, { type: i0.forwardRef(function () { return i14.RichTextEditorItalicActionComponent; }), selector: "bb-rich-text-editor-italic-action" }, { type: i0.forwardRef(function () { return i14.RichTextEditorUnderlineActionComponent; }), selector: "bb-rich-text-editor-underline-action" }, { type: i0.forwardRef(function () { return i14.RichTextEditorStrikethroughActionComponent; }), selector: "bb-rich-text-editor-strikethrough-action" }, { type: i0.forwardRef(function () { return i14.RichTextEditorOlistActionComponent; }), selector: "bb-rich-text-editor-olist-action" }, { type: i0.forwardRef(function () { return i14.RichTextEditorUlistActionComponent; }), selector: "bb-rich-text-editor-ulist-action" }, { type: i0.forwardRef(function () { return i14.RichTextEditorLinkActionComponent; }), selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }, { type: i0.forwardRef(function () { return i15.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i16.MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0.forwardRef(function () { return EmployeeCreateMailoutFormCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormCustomizable]" }, { type: i0.forwardRef(function () { return i3.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i3.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i3.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i3.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i3.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i17.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0.forwardRef(function () { return i3.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i14.RichTextEditorActionsDirective; }), selector: "ng-template[bbRichTextEditorActions]" }, { type: i0.forwardRef(function () { return i18.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i19.PreventBubbleDownDirective; }), selector: "[bbPreventBubbleDown]" }, { type: i0.forwardRef(function () { return EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]" }, { type: i0.forwardRef(function () { return EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective; }), selector: "[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i17.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-employee-create-mailout-form',
                    templateUrl: './employee-create-mailout-form.component.html',
                    providers: [
                        {
                            provide: BaseCreateMessageFormService,
                            useClass: EmployeeCreateMailoutFormService,
                        },
                        {
                            provide: BaseUploadAttachmentsService,
                            useClass: MessagesEmployeeUploadAttachmentsService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.MessagesEncodingService }, { type: i2.SharedMethodsService }, { type: i3.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.BaseCreateMessageFormService }, { type: i5.MessagesManipulationConfirmModalService }, { type: i6.MessagesUploadAttachmentsService }]; }, propDecorators: { review: [{
                type: Output
            }], defaultMailout: [{
                type: Input
            }], senderDisplayName: [{
                type: Input
            }] } });
export class EmployeeCreateMailoutFormCustomizableDirective extends BbTemplate {
}
EmployeeCreateMailoutFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EmployeeCreateMailoutFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmployeeCreateMailoutFormCustomizable]',
                }]
        }] });
export class EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective extends BbTemplate {
}
EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormSuccessNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmployeeCreateMailoutFormSuccessNotificationHeaderCustomizable]',
                }]
        }] });
export class EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective extends BbTemplate {
}
EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, selector: "[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: EmployeeCreateMailoutFormErrorNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmployeeCreateMailoutFormErrorNotificationHeaderCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,