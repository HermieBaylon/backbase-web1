import { __rest } from "tslib";
import { Component, Input, Directive, Output, EventEmitter, ViewChild } from '@angular/core';
import { catchError, map, finalize } from 'rxjs/operators';
import { EMPTY } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { ManipulationType, } from '../../messages-manipulation-confirm-modal/manipulation-confirm-modal-types.model';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/messages-encoding/messages-encoding.service";
import * as i2 from "./employee-mailout-review.service";
import * as i3 from "../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service";
import * as i4 from "../../../services/shared-methods/shared-methods.service";
import * as i5 from "../../messages-preview/messages-preview.component";
import * as i6 from "@backbase/ui-ang/file-attachment";
import * as i7 from "@backbase/ui-ang/load-button";
import * as i8 from "@backbase/ui-ang/alert";
import * as i9 from "@backbase/ui-ang/loading-indicator";
import * as i10 from "../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.component";
import * as i11 from "@angular/common";
import * as i12 from "@backbase/ui-ang/button";
export class MessagesEmployeeMailoutReviewComponent {
    constructor(encodingService, dataService, confirmModalService, sharedService) {
        this.encodingService = encodingService;
        this.dataService = dataService;
        this.confirmModalService = confirmModalService;
        this.sharedService = sharedService;
        /**
         * The cancel mailout output.
         */
        this.cancel = new EventEmitter();
        /**
         * The confirm operation output.
         */
        this.confirm = new EventEmitter();
        /**
         * The edit mailout output.
         */
        this.edit = new EventEmitter();
        /**
         * The sanitize error flag.
         */
        this.sanitizeError = false;
        /**
         * The sanitize loading flag.
         */
        this.sanitizeLoading = false;
        /**
         * The manipulation types enum: `resolve`, `unresolve`, `assign`, `unassign`, `discard`,
         * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`.
         */
        this.manipulationTypes = ManipulationType;
        /**
         * The confirmation modal model.
         */
        this.confirmationModal$ = this.confirmModalService.emitToggleModal$;
    }
    ngOnInit() {
        if (this.mailout) {
            this.sanitizedBody$ = this.sanitizeBody(this.encodingService.b64Encode(this.mailout.body || ''));
        }
    }
    sanitizeBody(body) {
        this.sanitizeLoading = true;
        return this.dataService.sanitizeMessageBody(body).pipe(map(data => data && this.encodingService.b64Decode(data.body)), catchError(() => {
            this.sanitizeError = true;
            return EMPTY;
        }), finalize(() => (this.sanitizeLoading = false)));
    }
    /**
     * The method to switch from the preview to the editing state.
     */
    onEdit() {
        this.edit.emit();
    }
    /**
     * The method to discard the modal.
     *
     * @param discardParam Should open modal flag
     */
    onDiscardModal(discardParam) {
        this.confirmModalService.toggleModal(discardParam, (discardParam && this.manipulationTypes.discardPreview) || undefined);
    }
    /**
     * The method to confirm the discard action.
     */
    onConfirmModal() {
        this.confirmModalService.toggleModal(false);
        this.cancel.emit();
    }
    /**
     * The method to save the mailout.
     *
     * @param employeeCreateMailoutFormModel Create mailout form model data
     */
    createMailout(_a) {
        var { body, subject, topic, attachments, notDeletable, recipientsDataId, template, important } = _a, rest = __rest(_a, ["body", "subject", "topic", "attachments", "notDeletable", "recipientsDataId", "template", "important"]);
        const finalValue = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, rest), { subject: '', topic: '', body: '', deletable: !notDeletable, important: !!important, recipientsData: {
                id: recipientsDataId[0].id,
            } }), (body && body.length && { body: this.encodingService.b64Encode(body) })), (subject && subject.length && { subject: subject })), (topic && topic.id && { topic: topic.id })), (attachments && attachments.length && { attachments: attachments.map(({ id }) => id) }));
        this.dataService.createMailout(finalValue).subscribe(() => this.sharedService.openNotification(this.mailoutCreateSuccessTpl), () => this.sharedService.openNotification(this.mailoutCreateErrorTpl, 'error'), () => this.confirm.emit());
    }
}
MessagesEmployeeMailoutReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewComponent, deps: [{ token: i1.MessagesEncodingService }, { token: i2.MessagesEmployeeMailoutReviewService }, { token: i3.MessagesManipulationConfirmModalService }, { token: i4.SharedMethodsService }], target: i0.ɵɵFactoryTarget.Component });
MessagesEmployeeMailoutReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewComponent, selector: "bb-messages-employee-mailout-review", inputs: { mailout: "mailout" }, outputs: { cancel: "cancel", confirm: "confirm", edit: "edit" }, viewQueries: [{ propertyName: "mailoutCreateSuccessTpl", first: true, predicate: ["mailoutCreateSuccess"], descendants: true }, { propertyName: "mailoutCreateErrorTpl", first: true, predicate: ["mailoutCreateError"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbMessagesEmployeeMailoutReviewCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    sanitizedBody: sanitizedBody$ | async,\n    confirmationModal: confirmationModal$ | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbMessagesEmployeeMailoutReviewCustomizable\n  let-host\n  let-sanitizedBody=\"context.sanitizedBody\"\n  let-confirmationModal=\"context.confirmationModal\"\n>\n  <div class=\"row bb-block bb-block--md\">\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review name label text@@messages.employeeCreateMailout.mailoutReview.name\"\n        data-role=\"mailout-name\"\n      >\n        Name\n      </div>\n      <p data-role=\"mailout-name-content\">{{ host.mailout?.mailoutName }}</p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review topic label text@@messages.employeeCreateMailout.mailoutReview.topic\"\n        data-role=\"mailout-topic\"\n      >\n        Topic\n      </div>\n      <p data-role=\"mailout-topic-content\">{{ host.mailout.topic?.name }}</p>\n    </div>\n    <div class=\"col-12\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review subject label text@@messages.employeeCreateMailout.mailoutReview.subject\"\n        data-role=\"mailout-subject\"\n      >\n        Subject\n      </div>\n      <p data-role=\"mailout-subject-content\">{{ host.mailout.subject }}</p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review read-only label text@@messages.employeeCreateMailout.mailoutReview.readOnly\"\n        data-role=\"mailout-readonly\"\n      >\n        Read only\n      </div>\n      <p\n        i18n=\"Review read-only label text@@messages.employeeCreateMailout.mailoutReview.readOnly.value\"\n        data-role=\"mailout-readonly-content\"\n      >\n        { host.mailout['read-only'] + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review delete label text@@messages.employeeCreateMailout.mailoutReview.delete\"\n        data-role=\"mailout-deletable\"\n      >\n        Users able to delete\n      </div>\n      <p\n        i18n=\"Review delete label text@@messages.employeeCreateMailout.mailoutReview.delete.value\"\n        data-role=\"mailout-deletable-content\"\n      >\n        { !!host.mailout?.notDeletable + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <div\n        class=\"bb-text-semi-bold bb-block bb-block--md\"\n        i18n=\"Review important label text@@messages.employeeCreateMailout.mailoutReview.important\"\n        data-role=\"mailout-important\"\n      >\n        Important\n      </div>\n      <p\n        i18n=\"Review important label text@@messages.employeeCreateMailout.mailoutReview.important.value\"\n        data-role=\"mailout-important-content\"\n      >\n        { !!host.mailout?.important + '', select, true {Yes} other {No} }\n      </p>\n    </div>\n  </div>\n\n  <div class=\"row bb-block bb-block--md\">\n    <div\n      class=\"col-12 bb-text-semi-bold bb-block bb-block--md\"\n      i18n=\"Review body label text@@messages.employeeCreateMailout.mailoutReview.body\"\n    >\n      Custom HTML body preview\n    </div>\n    <div class=\"col-12\">\n      <ng-container *ngIf=\"!host.sanitizeLoading; else sanitizeLoader\">\n        <ng-container *ngIf=\"!host.sanitizeError; else sanitizeError\">\n          <bb-messages-body-preview [body]=\"sanitizedBody\" data-role=\"mailout-body-preview\"></bb-messages-body-preview>\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n\n  <div class=\"row bb-block bb-block--md\">\n    <div\n      class=\"col-12 bb-text-semi-bold bb-block bb-block--md\"\n      i18n=\"Review attachments label text@@messages.employeeCreateMailout.mailoutReview.attachments\"\n      data-role=\"mailout-attachments\"\n    >\n      Attachments\n    </div>\n    <div class=\"col-auto\" *ngFor=\"let attachment of host.mailout.attachments; index as i\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-file-attachment-ui\n          [name]=\"attachment.filename\"\n          [size]=\"attachment.size\"\n          [loading]=\"attachment.loading\"\n          [disabled]=\"true\"\n          data-role=\"mailout-attachments-content\"\n        ></bb-file-attachment-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <bb-load-button-ui\n      class=\"bb-button-bar__button\"\n      data-role=\"send\"\n      aria-label=\"Send\"\n      i18n-aria-label=\"Send button aria-label text@@messages.employeeCreateMailout.mailoutReview.submitButtonAriaLabel\"\n      i18n=\"Send button text@@messages.employeeCreateMailout.mailoutReview.submitButton\"\n      (click)=\"host.createMailout(host.mailout)\"\n    >\n      Send\n    </bb-load-button-ui>\n    <button\n      bbButton\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n      data-role=\"discard\"\n      aria-label=\"Discard\"\n      i18n-aria-label=\"\n        Discard button aria-label text@@messages.employeeCreateMailout.mailoutReview.discardButtonAriaLabel\"\n      i18n=\"Discard button text@@messages.employeeCreateMailout.mailoutReview.discardButton\"\n      (click)=\"host.onDiscardModal(true)\"\n    >\n      Discard\n    </button>\n    <button\n      bbButton\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      color=\"link\"\n      data-role=\"back\"\n      aria-label=\"Back to edit\"\n      i18n-aria-label=\"\n        Back to edit button aria-label text@@messages.employeeCreateMailout.mailoutReview.editButtonAriaLabel\"\n      i18n=\"Back to edit button text@@messages.employeeCreateMailout.mailoutReview.editButton\"\n      (click)=\"host.onEdit(host.mailout)\"\n    >\n      Back to edit\n    </button>\n  </div>\n\n  <ng-template #sanitizeError>\n    <bb-alert-ui\n      data-role=\"sanitize-error\"\n      title=\"We couldn't generate preview. Please contact support for more information\"\n      modifier=\"warning\"\n      [dismissible]=\"false\"\n    ></bb-alert-ui>\n  </ng-template>\n\n  <ng-template #sanitizeLoader>\n    <bb-loading-indicator-ui data-role=\"sanitize-loading\" loaderSize=\"md\" text=\"Loading...\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"confirmationModal.opened\"\n    [type]=\"confirmationModal.type\"\n    (cancel)=\"host.onDiscardModal(false)\"\n    (confirm)=\"host.onConfirmModal()\"\n    data-role=\"discard-modal\"\n  ></bb-messages-manipulation-confirm-modal>\n</ng-template>\n\n<ng-template #mailoutCreateSuccess>\n  <ng-container bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable [bbHostRef]=\"this\"></ng-container>\n</ng-template>\n\n<ng-template bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      Your mailout has been successfully sent.|Text of successful mailout\n      create@@messages.employeeCreateMailout.mailoutReview.messageSuccessCompose\"\n    >Your mailout has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #mailoutCreateError>\n  <ng-container bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable [bbHostRef]=\"this\"></ng-container>\n</ng-template>\n\n<ng-template bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable let-host>\n  <span\n    i18n=\"\n      There is an error sending mailout.|Text of failed mailout\n      create@@messages.employeeCreateMailout.mailoutReview.messageErrorCompose\"\n    >There is an error sending mailout.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i5.MessagesBodyPreviewComponent; }), selector: "bb-messages-body-preview, bb-message-preview", inputs: ["body"] }, { type: i0.forwardRef(function () { return i6.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0.forwardRef(function () { return i7.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i8.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i9.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i10.MessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }], directives: [{ type: i0.forwardRef(function () { return MessagesEmployeeMailoutReviewCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewCustomizable]" }, { type: i0.forwardRef(function () { return i11.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i11.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i12.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]" }, { type: i0.forwardRef(function () { return MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective; }), selector: "[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i11.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-employee-mailout-review',
                    templateUrl: './employee-mailout-review.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.MessagesEncodingService }, { type: i2.MessagesEmployeeMailoutReviewService }, { type: i3.MessagesManipulationConfirmModalService }, { type: i4.SharedMethodsService }]; }, propDecorators: { mailout: [{
                type: Input
            }], cancel: [{
                type: Output
            }], confirm: [{
                type: Output
            }], edit: [{
                type: Output
            }], mailoutCreateSuccessTpl: [{
                type: ViewChild,
                args: ['mailoutCreateSuccess']
            }], mailoutCreateErrorTpl: [{
                type: ViewChild,
                args: ['mailoutCreateError']
            }] } });
export class MessagesEmployeeMailoutReviewCustomizableDirective extends BbTemplate {
}
MessagesEmployeeMailoutReviewCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesEmployeeMailoutReviewCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesEmployeeMailoutReviewCustomizable]',
                }]
        }] });
export class MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective extends BbTemplate {
}
MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesEmployeeMailoutReviewSuccessNotificationHeaderCustomizable]',
                }]
        }] });
export class MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective extends BbTemplate {
}
MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, selector: "[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesEmployeeMailoutReviewErrorNotificationHeaderCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,