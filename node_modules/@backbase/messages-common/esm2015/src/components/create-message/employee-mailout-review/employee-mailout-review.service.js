import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-v5-http-ang";
export class MessagesEmployeeMailoutReviewService {
    constructor(mailoutService) {
        this.mailoutService = mailoutService;
    }
    /**
     * Create mailout
     *
     * @param bodyRequest Create mailout request body
     * @returns Create mailout stream
     */
    createMailout(bodyRequest) {
        return this.mailoutService.postMailout({ mailoutPostRequestBody: bodyRequest });
    }
    /**
     * Sanitize message body
     *
     * @param message Message body
     * @returns Mailout preview response stream
     */
    sanitizeMessageBody(message) {
        return this.mailoutService.postMailoutPreview({ mailoutPreviewRequestBody: { body: message } });
    }
}
MessagesEmployeeMailoutReviewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewService, deps: [{ token: i1.MailoutHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesEmployeeMailoutReviewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesEmployeeMailoutReviewService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MailoutHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wbG95ZWUtbWFpbG91dC1yZXZpZXcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWVzc2FnZXMtY29tbW9uL3NyYy9jb21wb25lbnRzL2NyZWF0ZS1tZXNzYWdlL2VtcGxveWVlLW1haWxvdXQtcmV2aWV3L2VtcGxveWVlLW1haWxvdXQtcmV2aWV3LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBVTNDLE1BQU0sT0FBTyxvQ0FBb0M7SUFDL0MsWUFBNkIsY0FBa0M7UUFBbEMsbUJBQWMsR0FBZCxjQUFjLENBQW9CO0lBQUcsQ0FBQztJQUVuRTs7Ozs7T0FLRztJQUNILGFBQWEsQ0FBQyxXQUFtQztRQUMvQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUUsc0JBQXNCLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxtQkFBbUIsQ0FBQyxPQUFlO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLHlCQUF5QixFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRyxDQUFDOztrSUFyQlUsb0NBQW9DO3NJQUFwQyxvQ0FBb0M7NEZBQXBDLG9DQUFvQztrQkFEaEQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIE1haWxvdXRIdHRwU2VydmljZSxcbiAgTWFpbG91dFBvc3RSZXF1ZXN0Qm9keSxcbiAgTWFpbG91dFBvc3RSZXNwb25zZUJvZHksXG4gIE1haWxvdXRQcmV2aWV3UmVzcG9uc2VCb2R5LFxufSBmcm9tICdAYmFja2Jhc2UvbWVzc2FnZXMtdjUtaHR0cC1hbmcnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWVzc2FnZXNFbXBsb3llZU1haWxvdXRSZXZpZXdTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBtYWlsb3V0U2VydmljZTogTWFpbG91dEh0dHBTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgbWFpbG91dFxuICAgKlxuICAgKiBAcGFyYW0gYm9keVJlcXVlc3QgQ3JlYXRlIG1haWxvdXQgcmVxdWVzdCBib2R5XG4gICAqIEByZXR1cm5zIENyZWF0ZSBtYWlsb3V0IHN0cmVhbVxuICAgKi9cbiAgY3JlYXRlTWFpbG91dChib2R5UmVxdWVzdDogTWFpbG91dFBvc3RSZXF1ZXN0Qm9keSk6IE9ic2VydmFibGU8TWFpbG91dFBvc3RSZXNwb25zZUJvZHkgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMubWFpbG91dFNlcnZpY2UucG9zdE1haWxvdXQoeyBtYWlsb3V0UG9zdFJlcXVlc3RCb2R5OiBib2R5UmVxdWVzdCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYW5pdGl6ZSBtZXNzYWdlIGJvZHlcbiAgICpcbiAgICogQHBhcmFtIG1lc3NhZ2UgTWVzc2FnZSBib2R5XG4gICAqIEByZXR1cm5zIE1haWxvdXQgcHJldmlldyByZXNwb25zZSBzdHJlYW1cbiAgICovXG4gIHNhbml0aXplTWVzc2FnZUJvZHkobWVzc2FnZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxNYWlsb3V0UHJldmlld1Jlc3BvbnNlQm9keSB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5tYWlsb3V0U2VydmljZS5wb3N0TWFpbG91dFByZXZpZXcoeyBtYWlsb3V0UHJldmlld1JlcXVlc3RCb2R5OiB7IGJvZHk6IG1lc3NhZ2UgfSB9KTtcbiAgfVxufVxuIl19