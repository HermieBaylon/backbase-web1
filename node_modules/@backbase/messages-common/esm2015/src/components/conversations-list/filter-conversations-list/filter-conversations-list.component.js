import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BehaviorSubject, combineLatest, EMPTY, Subject } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, map, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { topicPlaceholderConfig } from '../../../utils/topic-placeholder-text-helper';
import * as i0 from "@angular/core";
import * as i1 from "../model/filter-service.model";
import * as i2 from "@angular/forms";
import * as i3 from "../../../services/shared-methods/shared-methods.service";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "@backbase/ui-ang/dropdown-single-select";
import * as i6 from "@backbase/ui-ang/search-box";
import * as i7 from "@backbase/ui-ang/input-datepicker";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
export class FilterConversationsListComponent {
    constructor(service, fb, shared) {
        this.service = service;
        this.fb = fb;
        this.shared = shared;
        /**
         * Configs for topic selector placeholder
         */
        this.topicPlaceholderConfig = topicPlaceholderConfig;
        /**
         * Event emitter for apply action
         */
        this.apply = new EventEmitter();
        /**
         * Event emitter for clear action
         */
        this.clear = new EventEmitter();
        /**
         * The filters form reference.
         */
        this.filterForm = this.fb.group({
            date: [''],
            topic: [''],
            user: [''],
        });
        /**
         * The applied flag.
         */
        this.applied = false;
        /**
         * The opened flag.
         */
        this.opened = false;
        /**
         * The stream with the topic list.
         */
        this.topics$ = new Subject();
        /**
         * The method to get the typeahead options.
         */
        this.typeaheadOptions = {
            ngbTypeahead: this.searchUsers.bind(this),
            resultFormatter: (item) => item.fullName,
            inputFormatter: (item) => item.fullName,
        };
        this.filterParams$ = new BehaviorSubject({});
        this.unsubscribe$ = new Subject();
    }
    /**
     * Observable filter params to init component with
     */
    set filterParams(value) {
        if (value && this.checkFilterParams(this.filterParams$.getValue(), value)) {
            this.applied = true;
            this.filterParams$.next(value);
        }
    }
    ngOnInit() {
        combineLatest([this.filterParams$, this.topics$])
            .pipe(switchMap(([params, topics]) => {
            const { topicId, endDate, startDate, userId } = params;
            if (topics && topicId) {
                this.filterForm.controls['topic'].setValue(topics.find((topic) => topic.id === topicId));
            }
            if (startDate && endDate) {
                this.filterForm.controls['date'].setValue({
                    from: new Date(startDate).toISOString(),
                    to: new Date(endDate).toISOString(),
                });
            }
            if (userId && this.service.getUserById) {
                return this.service
                    .getUserById(userId)
                    .pipe(tap(user => user && this.filterForm.controls['user'].setValue(Object.assign(Object.assign({}, user), { id: params.userId }))));
            }
            return EMPTY;
        }), takeUntil(this.unsubscribe$))
            .subscribe();
        this.service
            .getTopics()
            .pipe(take(1))
            .subscribe(topics => {
            this.topics$.next(topics);
            this.topics$.complete();
        });
    }
    /**
     * The method to submit the form.
     */
    submit() {
        const applyObject = this.convertToFilterParams(this.filterForm);
        this.applied = !!Object.keys(applyObject).length;
        this.opened = false;
        this.apply.emit(applyObject);
    }
    /**
     * The method to reset the form.
     *
     * @param apply Flag to submit or not the form
     */
    reset(apply = false) {
        if (apply) {
            this.filterForm.valueChanges.pipe(take(1)).subscribe(() => {
                this.submit();
            });
        }
        this.filterForm.reset();
    }
    /**
     * The method to open or close the filter form.
     */
    triggerOpened() {
        this.opened = !this.opened;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    convertToFilterParams(form) {
        return Object.assign(Object.assign(Object.assign({}, (form.value.topic && { topicId: form.value.topic.id })), (form.value.user && { userId: form.value.user.id })), (form.value.date && {
            startDate: this.formatDate(form.value.date.from),
            endDate: this.formatDate(form.value.date.to),
        }));
    }
    formatDate(date) {
        const d = new Date(date);
        const year = d.getFullYear();
        const month = d.getMonth() + 1;
        const dt = d.getDate();
        const finalDt = dt < 10 ? `0${dt}` : dt.toString();
        const finalMonth = month < 10 ? `0${month}` : month.toString();
        return `${year}-${finalMonth}-${finalDt}`;
    }
    checkFilterParams(curr, next) {
        if (!Object.keys(next).length || !(next && (next.userId || next.topicId || (next.startDate && next.endDate)))) {
            return false;
        }
        for (const key in next) {
            if (curr[key] && curr[key] === next[key]) {
                return false;
            }
        }
        return true;
    }
    searchUsers(text) {
        return text.pipe(debounceTime(500), distinctUntilChanged(), switchMap(value => {
            if (!this.service.getUsers || !value.length) {
                return EMPTY;
            }
            else {
                return this.service.getUsers(value).pipe(map(response => response && response.identities), catchError(err => {
                    this.shared.openNotification(this.shared.getErrorMessage(err), 'error');
                    return EMPTY;
                }));
            }
        }));
    }
}
FilterConversationsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: FilterConversationsListComponent, deps: [{ token: i1.FilterService }, { token: i2.FormBuilder }, { token: i3.SharedMethodsService }], target: i0.ɵɵFactoryTarget.Component });
FilterConversationsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: FilterConversationsListComponent, selector: "bb-messages-filter-conversation-list", inputs: { headerClass: "headerClass", bodyClass: "bodyClass", filterParams: "filterParams" }, outputs: { apply: "apply", clear: "clear" }, ngImport: i0, template: "<ng-container\n  bbFilterConversationsListCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    topics: topics$ | async\n  }\"\n></ng-container>\n\n<ng-template bbFilterConversationsListCustomizable let-host let-topics=\"context.topics\">\n  <div [ngClass]=\"host.headerClass\" data-role=\"filters-header\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item\">\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            class=\"bb-button-bar__button\"\n            bbButton\n            [color]=\"host.applied ? 'primary' : 'secondary'\"\n            [ngClass]=\"{ active: host.opened }\"\n            (click)=\"host.triggerOpened()\"\n            data-role=\"filter-button\"\n          >\n            <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n            <span\n              *ngIf=\"host.applied; else filtersTextDefault\"\n              i18n=\"\n                Filters applied|Text for filter button if filter was\n                applied@@messages.messagesCommon.conversationsListFilterConversation.filtersAppliedText\"\n              >Filters applied</span\n            >\n          </button>\n          <button\n            class=\"bb-button-bar__button\"\n            bbButton\n            color=\"link\"\n            *ngIf=\"host.applied\"\n            i18n=\"Clear filters@@messages.messagesCommon.conversationsListFilterConversation.clearFilterssButtonText\"\n            (click)=\"host.reset(true)\"\n            data-role=\"clear-header-button\"\n          >\n            Clear filters\n          </button>\n        </div>\n      </div>\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"host.opened\" [ngClass]=\"host.bodyClass\" data-role=\"filters-form-container\">\n    <form [formGroup]=\"host.filterForm\" (submit)=\"host.submit()\">\n      <div class=\"form-row form-group\">\n        <div class=\"col-4\">\n          <bb-dropdown-single-select-ui\n            *ngIf=\"\n              topics?.length\n                ? topicPlaceholderConfig.selectTopicPlaceholder\n                : topicPlaceholderConfig.noTopicsPlaceholder as topicPlaceholder\n            \"\n            label=\"Topic\"\n            data-role=\"topics\"\n            i18n-label=\"Topic label@@messages.messagesCommon.conversationsListFilterConversation.topicLabel\"\n            [options]=\"topics\"\n            displayAttributePath=\"name\"\n            [attr.placeholder]=\"topicPlaceholder\"\n            [placeholder]=\"topicPlaceholder\"\n            formControlName=\"topic\"\n          ></bb-dropdown-single-select-ui>\n        </div>\n        <div class=\"col-4\">\n          <bb-search-box-ui\n            label=\"Customer\"\n            i18n-label=\"\n              Customer label text@@messages.messagesCommon.conversationsListFilterConversation.customerLabelText\"\n            formControlName=\"user\"\n            placeholder=\"Search by name\"\n            i18n-placeholder=\"\n              Search by name\n              placeholder@@messages.messagesCommon.conversationsListFilterConversation.searchByNamePlaceholderText\"\n            [typeaheadOptions]=\"host.typeaheadOptions\"\n          ></bb-search-box-ui>\n        </div>\n        <div class=\"col-4\">\n          <bb-input-datepicker-ui\n            label=\"Date\"\n            i18n-label=\"Date label text@@messages.messagesCommon.conversationsListFilterConversation.dateLabelText\"\n            formControlName=\"date\"\n            [rangeSelection]=\"true\"\n          ></bb-input-datepicker-ui>\n        </div>\n      </div>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n          i18n=\"Close@@messages.messagesCommon.conversationsListFilterConversation.closeButtonText\"\n          (click)=\"host.triggerOpened()\"\n          data-role=\"close-filter\"\n        >\n          Close\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          i18n=\"Apply@@messages.messagesCommon.conversationsListFilterConversation.applyButtonText\"\n          data-role=\"apply-filter\"\n        >\n          Apply\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          i18n=\"Clear All@@messages.messagesCommon.conversationsListFilterConversation.clearAllButtonText\"\n          (click)=\"host.reset()\"\n          data-role=\"clear-filter\"\n        >\n          Clear All\n        </button>\n      </div>\n    </form>\n  </div>\n\n  <ng-template #filtersTextDefault>\n    <span\n      i18n=\"\n        Filters|Text for filter button if filter was\n        applied@@messages.messagesCommon.conversationsListFilterConversation.filtersText\"\n      >Filters</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i5.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i6.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i7.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i0.forwardRef(function () { return FilterConversationsListCustomizableDirective; }), selector: "[bbFilterConversationsListCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i9.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i2.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i2.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i2.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i2.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i0.forwardRef(function () { return i8.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: FilterConversationsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-filter-conversation-list',
                    templateUrl: './filter-conversations-list.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FilterService }, { type: i2.FormBuilder }, { type: i3.SharedMethodsService }]; }, propDecorators: { headerClass: [{
                type: Input
            }], bodyClass: [{
                type: Input
            }], filterParams: [{
                type: Input
            }], apply: [{
                type: Output
            }], clear: [{
                type: Output
            }] } });
export class FilterConversationsListCustomizableDirective extends BbTemplate {
}
FilterConversationsListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: FilterConversationsListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
FilterConversationsListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: FilterConversationsListCustomizableDirective, selector: "[bbFilterConversationsListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: FilterConversationsListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbFilterConversationsListCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvbnZlcnNhdGlvbnMtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNvbW1vbi9zcmMvY29tcG9uZW50cy9jb252ZXJzYXRpb25zLWxpc3QvZmlsdGVyLWNvbnZlcnNhdGlvbnMtbGlzdC9maWx0ZXItY29udmVyc2F0aW9ucy1saXN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWVzc2FnZXMtY29tbW9uL3NyYy9jb21wb25lbnRzL2NvbnZlcnNhdGlvbnMtbGlzdC9maWx0ZXItY29udmVyc2F0aW9ucy1saXN0L2ZpbHRlci1jb252ZXJzYXRpb25zLWxpc3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJHLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEYsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQU0zRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQzs7Ozs7Ozs7Ozs7QUFNdEYsTUFBTSxPQUFPLGdDQUFnQztJQXFFM0MsWUFDbUIsT0FBc0IsRUFDdEIsRUFBZSxFQUNmLE1BQTRCO1FBRjVCLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFDdEIsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQUNmLFdBQU0sR0FB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LENBQUM7YUFDZDtpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDdEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFDaEQsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBRXhFLE9BQU8sS0FBSyxDQUFDO2dCQUNmLENBQUMsQ0FBQyxDQUNILENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs4SEFoTlUsZ0NBQWdDO2tIQUFoQyxnQ0FBZ0MsdU5DaEI3QyxxNUpBcUlBLDJ2Q0RpR2EsNENBQTRDOzRGQXRONUMsZ0NBQWdDO2tCQUo1QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxzQ0FBc0M7b0JBQ2hELFdBQVcsRUFBRSw0Q0FBNEM7aUJBQzFEO2lLQUtVLFdBQVc7c0JBQW5CLEtBQUs7Z0JBSUcsU0FBUztzQkFBakIsS0FBSztnQkFLTyxZQUFZO3NCQUF4QixLQUFLO2dCQWNJLEtBQUs7c0JBQWQsTUFBTTtnQkFJRyxLQUFLO3NCQUFkLE1BQU07O0FBdUxULE1BQU0sT0FBTyw0Q0FBNkMsU0FBUSxVQUdqRTs7MElBSFksNENBQTRDOzhIQUE1Qyw0Q0FBNEM7NEZBQTVDLDRDQUE0QztrQkFIeEQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseUNBQXlDO2lCQUNwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBFTVBUWSwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzd2l0Y2hNYXAsIHRha2UsIHRha2VVbnRpbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQmJUZW1wbGF0ZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcbmltcG9ydCB7IElkZW50aXR5TGlzdGVkSXRlbSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy91c2VyJztcbmltcG9ydCB7IFRvcGljc0dldFJlc3BvbnNlQm9keSB9IGZyb20gJ0BiYWNrYmFzZS9tZXNzYWdlcy12NS1odHRwLWFuZyc7XG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbW9kZWwvZmlsdGVyLXNlcnZpY2UubW9kZWwnO1xuaW1wb3J0IHsgQXBwbHlGaWx0ZXJQYXJhbXMgfSBmcm9tICcuLi9tb2RlbC9wYXJhbXMubW9kZWwnO1xuaW1wb3J0IHsgU2hhcmVkTWV0aG9kc1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9zaGFyZWQtbWV0aG9kcy9zaGFyZWQtbWV0aG9kcy5zZXJ2aWNlJztcbmltcG9ydCB7IHRvcGljUGxhY2Vob2xkZXJDb25maWcgfSBmcm9tICcuLi8uLi8uLi91dGlscy90b3BpYy1wbGFjZWhvbGRlci10ZXh0LWhlbHBlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLW1lc3NhZ2VzLWZpbHRlci1jb252ZXJzYXRpb24tbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9maWx0ZXItY29udmVyc2F0aW9ucy1saXN0LmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgRmlsdGVyQ29udmVyc2F0aW9uc0xpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBDc3MgY2xhc3NlcyBmb3IgaGVhZGVyIGJsb2NrXG4gICAqL1xuICBASW5wdXQoKSBoZWFkZXJDbGFzczogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogQ3NzIGNsYXNzZXMgZm9yIGJvZHkgYmxvY2tcbiAgICovXG4gIEBJbnB1dCgpIGJvZHlDbGFzczogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBPYnNlcnZhYmxlIGZpbHRlciBwYXJhbXMgdG8gaW5pdCBjb21wb25lbnQgd2l0aFxuICAgKi9cbiAgQElucHV0KCkgc2V0IGZpbHRlclBhcmFtcyh2YWx1ZTogQXBwbHlGaWx0ZXJQYXJhbXMgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgJiYgdGhpcy5jaGVja0ZpbHRlclBhcmFtcyh0aGlzLmZpbHRlclBhcmFtcyQuZ2V0VmFsdWUoKSwgdmFsdWUpKSB7XG4gICAgICB0aGlzLmFwcGxpZWQgPSB0cnVlO1xuICAgICAgdGhpcy5maWx0ZXJQYXJhbXMkLm5leHQodmFsdWUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29uZmlncyBmb3IgdG9waWMgc2VsZWN0b3IgcGxhY2Vob2xkZXJcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSB0b3BpY1BsYWNlaG9sZGVyQ29uZmlnID0gdG9waWNQbGFjZWhvbGRlckNvbmZpZztcblxuICAvKipcbiAgICogRXZlbnQgZW1pdHRlciBmb3IgYXBwbHkgYWN0aW9uXG4gICAqL1xuICBAT3V0cHV0KCkgYXBwbHkgPSBuZXcgRXZlbnRFbWl0dGVyPEFwcGx5RmlsdGVyUGFyYW1zPigpO1xuICAvKipcbiAgICogRXZlbnQgZW1pdHRlciBmb3IgY2xlYXIgYWN0aW9uXG4gICAqL1xuICBAT3V0cHV0KCkgY2xlYXIgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLyoqXG4gICAqIFRoZSBmaWx0ZXJzIGZvcm0gcmVmZXJlbmNlLlxuICAgKi9cbiAgZmlsdGVyRm9ybSA9IHRoaXMuZmIuZ3JvdXAoe1xuICAgIGRhdGU6IFsnJ10sXG4gICAgdG9waWM6IFsnJ10sXG4gICAgdXNlcjogWycnXSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFRoZSBhcHBsaWVkIGZsYWcuXG4gICAqL1xuICBhcHBsaWVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBvcGVuZWQgZmxhZy5cbiAgICovXG4gIG9wZW5lZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RyZWFtIHdpdGggdGhlIHRvcGljIGxpc3QuXG4gICAqL1xuICByZWFkb25seSB0b3BpY3MkID0gbmV3IFN1YmplY3Q8VG9waWNzR2V0UmVzcG9uc2VCb2R5W10gfCBudWxsPigpO1xuXG4gIC8qKlxuICAgKiBUaGUgbWV0aG9kIHRvIGdldCB0aGUgdHlwZWFoZWFkIG9wdGlvbnMuXG4gICAqL1xuICByZWFkb25seSB0eXBlYWhlYWRPcHRpb25zID0ge1xuICAgIG5nYlR5cGVhaGVhZDogdGhpcy5zZWFyY2hVc2Vycy5iaW5kKHRoaXMpLFxuICAgIHJlc3VsdEZvcm1hdHRlcjogKGl0ZW06IElkZW50aXR5TGlzdGVkSXRlbSkgPT4gaXRlbS5mdWxsTmFtZSxcbiAgICBpbnB1dEZvcm1hdHRlcjogKGl0ZW06IElkZW50aXR5TGlzdGVkSXRlbSkgPT4gaXRlbS5mdWxsTmFtZSxcbiAgfTtcblxuICBwcml2YXRlIHJlYWRvbmx5IGZpbHRlclBhcmFtcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEFwcGx5RmlsdGVyUGFyYW1zPih7fSk7XG4gIHByaXZhdGUgcmVhZG9ubHkgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlcnZpY2U6IEZpbHRlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBmYjogRm9ybUJ1aWxkZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzaGFyZWQ6IFNoYXJlZE1ldGhvZHNTZXJ2aWNlLFxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29tYmluZUxhdGVzdChbdGhpcy5maWx0ZXJQYXJhbXMkLCB0aGlzLnRvcGljcyRdKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgoW3BhcmFtcywgdG9waWNzXSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgdG9waWNJZCwgZW5kRGF0ZSwgc3RhcnREYXRlLCB1c2VySWQgfSA9IHBhcmFtcztcblxuICAgICAgICAgIGlmICh0b3BpY3MgJiYgdG9waWNJZCkge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJGb3JtLmNvbnRyb2xzWyd0b3BpYyddLnNldFZhbHVlKFxuICAgICAgICAgICAgICB0b3BpY3MuZmluZCgodG9waWM6IFRvcGljc0dldFJlc3BvbnNlQm9keSkgPT4gdG9waWMuaWQgPT09IHRvcGljSWQpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhcnREYXRlICYmIGVuZERhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRm9ybS5jb250cm9sc1snZGF0ZSddLnNldFZhbHVlKHtcbiAgICAgICAgICAgICAgZnJvbTogbmV3IERhdGUoc3RhcnREYXRlKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICB0bzogbmV3IERhdGUoZW5kRGF0ZSkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1c2VySWQgJiYgdGhpcy5zZXJ2aWNlLmdldFVzZXJCeUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlXG4gICAgICAgICAgICAgIC5nZXRVc2VyQnlJZCh1c2VySWQpXG4gICAgICAgICAgICAgIC5waXBlKHRhcCh1c2VyID0+IHVzZXIgJiYgdGhpcy5maWx0ZXJGb3JtLmNvbnRyb2xzWyd1c2VyJ10uc2V0VmFsdWUoeyAuLi51c2VyLCBpZDogcGFyYW1zLnVzZXJJZCB9KSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBFTVBUWTtcbiAgICAgICAgfSksXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCk7XG5cbiAgICB0aGlzLnNlcnZpY2VcbiAgICAgIC5nZXRUb3BpY3MoKVxuICAgICAgLnBpcGUodGFrZSgxKSlcbiAgICAgIC5zdWJzY3JpYmUodG9waWNzID0+IHtcbiAgICAgICAgdGhpcy50b3BpY3MkLm5leHQodG9waWNzKTtcbiAgICAgICAgdGhpcy50b3BpY3MkLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbWV0aG9kIHRvIHN1Ym1pdCB0aGUgZm9ybS5cbiAgICovXG4gIHN1Ym1pdCgpIHtcbiAgICBjb25zdCBhcHBseU9iamVjdDogQXBwbHlGaWx0ZXJQYXJhbXMgPSB0aGlzLmNvbnZlcnRUb0ZpbHRlclBhcmFtcyh0aGlzLmZpbHRlckZvcm0pO1xuXG4gICAgdGhpcy5hcHBsaWVkID0gISFPYmplY3Qua2V5cyhhcHBseU9iamVjdCkubGVuZ3RoO1xuICAgIHRoaXMub3BlbmVkID0gZmFsc2U7XG4gICAgdGhpcy5hcHBseS5lbWl0KGFwcGx5T2JqZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbWV0aG9kIHRvIHJlc2V0IHRoZSBmb3JtLlxuICAgKlxuICAgKiBAcGFyYW0gYXBwbHkgRmxhZyB0byBzdWJtaXQgb3Igbm90IHRoZSBmb3JtXG4gICAqL1xuICByZXNldChhcHBseSA9IGZhbHNlKSB7XG4gICAgaWYgKGFwcGx5KSB7XG4gICAgICB0aGlzLmZpbHRlckZvcm0udmFsdWVDaGFuZ2VzLnBpcGUodGFrZSgxKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdWJtaXQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuZmlsdGVyRm9ybS5yZXNldCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgdG8gb3BlbiBvciBjbG9zZSB0aGUgZmlsdGVyIGZvcm0uXG4gICAqL1xuICB0cmlnZ2VyT3BlbmVkKCkge1xuICAgIHRoaXMub3BlbmVkID0gIXRoaXMub3BlbmVkO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRUb0ZpbHRlclBhcmFtcyhmb3JtOiBGb3JtR3JvdXApOiBBcHBseUZpbHRlclBhcmFtcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLihmb3JtLnZhbHVlLnRvcGljICYmIHsgdG9waWNJZDogZm9ybS52YWx1ZS50b3BpYy5pZCB9KSxcbiAgICAgIC4uLihmb3JtLnZhbHVlLnVzZXIgJiYgeyB1c2VySWQ6IGZvcm0udmFsdWUudXNlci5pZCB9KSxcbiAgICAgIC4uLihmb3JtLnZhbHVlLmRhdGUgJiYge1xuICAgICAgICBzdGFydERhdGU6IHRoaXMuZm9ybWF0RGF0ZShmb3JtLnZhbHVlLmRhdGUuZnJvbSksXG4gICAgICAgIGVuZERhdGU6IHRoaXMuZm9ybWF0RGF0ZShmb3JtLnZhbHVlLmRhdGUudG8pLFxuICAgICAgfSksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0RGF0ZShkYXRlOiBEYXRlKTogc3RyaW5nIHtcbiAgICBjb25zdCBkID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgY29uc3QgeWVhciA9IGQuZ2V0RnVsbFllYXIoKTtcbiAgICBjb25zdCBtb250aCA9IGQuZ2V0TW9udGgoKSArIDE7XG4gICAgY29uc3QgZHQgPSBkLmdldERhdGUoKTtcbiAgICBjb25zdCBmaW5hbER0ID0gZHQgPCAxMCA/IGAwJHtkdH1gIDogZHQudG9TdHJpbmcoKTtcbiAgICBjb25zdCBmaW5hbE1vbnRoID0gbW9udGggPCAxMCA/IGAwJHttb250aH1gIDogbW9udGgudG9TdHJpbmcoKTtcblxuICAgIHJldHVybiBgJHt5ZWFyfS0ke2ZpbmFsTW9udGh9LSR7ZmluYWxEdH1gO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0ZpbHRlclBhcmFtcyhjdXJyOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBuZXh0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogYm9vbGVhbiB7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhuZXh0KS5sZW5ndGggfHwgIShuZXh0ICYmIChuZXh0LnVzZXJJZCB8fCBuZXh0LnRvcGljSWQgfHwgKG5leHQuc3RhcnREYXRlICYmIG5leHQuZW5kRGF0ZSkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChjdXJyW2tleV0gJiYgY3VycltrZXldID09PSBuZXh0W2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZWFyY2hVc2Vycyh0ZXh0OiBPYnNlcnZhYmxlPHN0cmluZz4pOiBPYnNlcnZhYmxlPElkZW50aXR5TGlzdGVkSXRlbVtdIHwgbnVsbCB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0ZXh0LnBpcGUoXG4gICAgICBkZWJvdW5jZVRpbWUoNTAwKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICBzd2l0Y2hNYXAodmFsdWUgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuc2VydmljZS5nZXRVc2VycyB8fCAhdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZ2V0VXNlcnModmFsdWUpLnBpcGUoXG4gICAgICAgICAgICBtYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UgJiYgcmVzcG9uc2UuaWRlbnRpdGllcyksXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2hhcmVkLm9wZW5Ob3RpZmljYXRpb24odGhpcy5zaGFyZWQuZ2V0RXJyb3JNZXNzYWdlKGVyciksICdlcnJvcicpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBFTVBUWTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiRmlsdGVyQ29udmVyc2F0aW9uc0xpc3RDdXN0b21pemFibGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgRmlsdGVyQ29udmVyc2F0aW9uc0xpc3RDdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBGaWx0ZXJDb252ZXJzYXRpb25zTGlzdENvbXBvbmVudCxcbiAgeyB0b3BpY3M6IFRvcGljc0dldFJlc3BvbnNlQm9keVtdIH1cbj4ge31cbiIsIjxuZy1jb250YWluZXJcbiAgYmJGaWx0ZXJDb252ZXJzYXRpb25zTGlzdEN1c3RvbWl6YWJsZVxuICBbYmJIb3N0UmVmXT1cInRoaXNcIlxuICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgIHRvcGljczogdG9waWNzJCB8IGFzeW5jXG4gIH1cIlxuPjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgYmJGaWx0ZXJDb252ZXJzYXRpb25zTGlzdEN1c3RvbWl6YWJsZSBsZXQtaG9zdCBsZXQtdG9waWNzPVwiY29udGV4dC50b3BpY3NcIj5cbiAgPGRpdiBbbmdDbGFzc109XCJob3N0LmhlYWRlckNsYXNzXCIgZGF0YS1yb2xlPVwiZmlsdGVycy1oZWFkZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYmItc3RhY2tcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1zdGFja19faXRlbVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmItYnV0dG9uLWJhciBiYi1idXR0b24tYmFyLS1yZXZlcnNlXCI+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3M9XCJiYi1idXR0b24tYmFyX19idXR0b25cIlxuICAgICAgICAgICAgYmJCdXR0b25cbiAgICAgICAgICAgIFtjb2xvcl09XCJob3N0LmFwcGxpZWQgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5J1wiXG4gICAgICAgICAgICBbbmdDbGFzc109XCJ7IGFjdGl2ZTogaG9zdC5vcGVuZWQgfVwiXG4gICAgICAgICAgICAoY2xpY2spPVwiaG9zdC50cmlnZ2VyT3BlbmVkKClcIlxuICAgICAgICAgICAgZGF0YS1yb2xlPVwiZmlsdGVyLWJ1dHRvblwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGJiLWljb24tdWkgW2Nyb3BwZWRdPVwidHJ1ZVwiIG5hbWU9XCJmaWx0ZXJcIj48L2JiLWljb24tdWk+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAqbmdJZj1cImhvc3QuYXBwbGllZDsgZWxzZSBmaWx0ZXJzVGV4dERlZmF1bHRcIlxuICAgICAgICAgICAgICBpMThuPVwiXG4gICAgICAgICAgICAgICAgRmlsdGVycyBhcHBsaWVkfFRleHQgZm9yIGZpbHRlciBidXR0b24gaWYgZmlsdGVyIHdhc1xuICAgICAgICAgICAgICAgIGFwcGxpZWRAQG1lc3NhZ2VzLm1lc3NhZ2VzQ29tbW9uLmNvbnZlcnNhdGlvbnNMaXN0RmlsdGVyQ29udmVyc2F0aW9uLmZpbHRlcnNBcHBsaWVkVGV4dFwiXG4gICAgICAgICAgICAgID5GaWx0ZXJzIGFwcGxpZWQ8L3NwYW5cbiAgICAgICAgICAgID5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzcz1cImJiLWJ1dHRvbi1iYXJfX2J1dHRvblwiXG4gICAgICAgICAgICBiYkJ1dHRvblxuICAgICAgICAgICAgY29sb3I9XCJsaW5rXCJcbiAgICAgICAgICAgICpuZ0lmPVwiaG9zdC5hcHBsaWVkXCJcbiAgICAgICAgICAgIGkxOG49XCJDbGVhciBmaWx0ZXJzQEBtZXNzYWdlcy5tZXNzYWdlc0NvbW1vbi5jb252ZXJzYXRpb25zTGlzdEZpbHRlckNvbnZlcnNhdGlvbi5jbGVhckZpbHRlcnNzQnV0dG9uVGV4dFwiXG4gICAgICAgICAgICAoY2xpY2spPVwiaG9zdC5yZXNldCh0cnVlKVwiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJjbGVhci1oZWFkZXItYnV0dG9uXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBDbGVhciBmaWx0ZXJzXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiYmItc3RhY2tfX2l0ZW0gYmItc3RhY2tfX2l0ZW0tLXB1c2gtcmlnaHRcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2ICpuZ0lmPVwiaG9zdC5vcGVuZWRcIiBbbmdDbGFzc109XCJob3N0LmJvZHlDbGFzc1wiIGRhdGEtcm9sZT1cImZpbHRlcnMtZm9ybS1jb250YWluZXJcIj5cbiAgICA8Zm9ybSBbZm9ybUdyb3VwXT1cImhvc3QuZmlsdGVyRm9ybVwiIChzdWJtaXQpPVwiaG9zdC5zdWJtaXQoKVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tcm93IGZvcm0tZ3JvdXBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC00XCI+XG4gICAgICAgICAgPGJiLWRyb3Bkb3duLXNpbmdsZS1zZWxlY3QtdWlcbiAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgIHRvcGljcz8ubGVuZ3RoXG4gICAgICAgICAgICAgICAgPyB0b3BpY1BsYWNlaG9sZGVyQ29uZmlnLnNlbGVjdFRvcGljUGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICA6IHRvcGljUGxhY2Vob2xkZXJDb25maWcubm9Ub3BpY3NQbGFjZWhvbGRlciBhcyB0b3BpY1BsYWNlaG9sZGVyXG4gICAgICAgICAgICBcIlxuICAgICAgICAgICAgbGFiZWw9XCJUb3BpY1wiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJ0b3BpY3NcIlxuICAgICAgICAgICAgaTE4bi1sYWJlbD1cIlRvcGljIGxhYmVsQEBtZXNzYWdlcy5tZXNzYWdlc0NvbW1vbi5jb252ZXJzYXRpb25zTGlzdEZpbHRlckNvbnZlcnNhdGlvbi50b3BpY0xhYmVsXCJcbiAgICAgICAgICAgIFtvcHRpb25zXT1cInRvcGljc1wiXG4gICAgICAgICAgICBkaXNwbGF5QXR0cmlidXRlUGF0aD1cIm5hbWVcIlxuICAgICAgICAgICAgW2F0dHIucGxhY2Vob2xkZXJdPVwidG9waWNQbGFjZWhvbGRlclwiXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwidG9waWNQbGFjZWhvbGRlclwiXG4gICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJ0b3BpY1wiXG4gICAgICAgICAgPjwvYmItZHJvcGRvd24tc2luZ2xlLXNlbGVjdC11aT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNFwiPlxuICAgICAgICAgIDxiYi1zZWFyY2gtYm94LXVpXG4gICAgICAgICAgICBsYWJlbD1cIkN1c3RvbWVyXCJcbiAgICAgICAgICAgIGkxOG4tbGFiZWw9XCJcbiAgICAgICAgICAgICAgQ3VzdG9tZXIgbGFiZWwgdGV4dEBAbWVzc2FnZXMubWVzc2FnZXNDb21tb24uY29udmVyc2F0aW9uc0xpc3RGaWx0ZXJDb252ZXJzYXRpb24uY3VzdG9tZXJMYWJlbFRleHRcIlxuICAgICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwidXNlclwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlYXJjaCBieSBuYW1lXCJcbiAgICAgICAgICAgIGkxOG4tcGxhY2Vob2xkZXI9XCJcbiAgICAgICAgICAgICAgU2VhcmNoIGJ5IG5hbWVcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXJAQG1lc3NhZ2VzLm1lc3NhZ2VzQ29tbW9uLmNvbnZlcnNhdGlvbnNMaXN0RmlsdGVyQ29udmVyc2F0aW9uLnNlYXJjaEJ5TmFtZVBsYWNlaG9sZGVyVGV4dFwiXG4gICAgICAgICAgICBbdHlwZWFoZWFkT3B0aW9uc109XCJob3N0LnR5cGVhaGVhZE9wdGlvbnNcIlxuICAgICAgICAgID48L2JiLXNlYXJjaC1ib3gtdWk+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTRcIj5cbiAgICAgICAgICA8YmItaW5wdXQtZGF0ZXBpY2tlci11aVxuICAgICAgICAgICAgbGFiZWw9XCJEYXRlXCJcbiAgICAgICAgICAgIGkxOG4tbGFiZWw9XCJEYXRlIGxhYmVsIHRleHRAQG1lc3NhZ2VzLm1lc3NhZ2VzQ29tbW9uLmNvbnZlcnNhdGlvbnNMaXN0RmlsdGVyQ29udmVyc2F0aW9uLmRhdGVMYWJlbFRleHRcIlxuICAgICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiZGF0ZVwiXG4gICAgICAgICAgICBbcmFuZ2VTZWxlY3Rpb25dPVwidHJ1ZVwiXG4gICAgICAgICAgPjwvYmItaW5wdXQtZGF0ZXBpY2tlci11aT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1idXR0b24tYmFyXCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBiYkJ1dHRvblxuICAgICAgICAgIGNsYXNzPVwiYmItYnV0dG9uLWJhcl9fYnV0dG9uXCJcbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiXG4gICAgICAgICAgaTE4bj1cIkNsb3NlQEBtZXNzYWdlcy5tZXNzYWdlc0NvbW1vbi5jb252ZXJzYXRpb25zTGlzdEZpbHRlckNvbnZlcnNhdGlvbi5jbG9zZUJ1dHRvblRleHRcIlxuICAgICAgICAgIChjbGljayk9XCJob3N0LnRyaWdnZXJPcGVuZWQoKVwiXG4gICAgICAgICAgZGF0YS1yb2xlPVwiY2xvc2UtZmlsdGVyXCJcbiAgICAgICAgPlxuICAgICAgICAgIENsb3NlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgYmJCdXR0b25cbiAgICAgICAgICBjbGFzcz1cImJiLWJ1dHRvbi1iYXJfX2J1dHRvblwiXG4gICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgaTE4bj1cIkFwcGx5QEBtZXNzYWdlcy5tZXNzYWdlc0NvbW1vbi5jb252ZXJzYXRpb25zTGlzdEZpbHRlckNvbnZlcnNhdGlvbi5hcHBseUJ1dHRvblRleHRcIlxuICAgICAgICAgIGRhdGEtcm9sZT1cImFwcGx5LWZpbHRlclwiXG4gICAgICAgID5cbiAgICAgICAgICBBcHBseVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGJiQnV0dG9uXG4gICAgICAgICAgY2xhc3M9XCJiYi1idXR0b24tYmFyX19idXR0b25cIlxuICAgICAgICAgIGNvbG9yPVwibGlua1wiXG4gICAgICAgICAgaTE4bj1cIkNsZWFyIEFsbEBAbWVzc2FnZXMubWVzc2FnZXNDb21tb24uY29udmVyc2F0aW9uc0xpc3RGaWx0ZXJDb252ZXJzYXRpb24uY2xlYXJBbGxCdXR0b25UZXh0XCJcbiAgICAgICAgICAoY2xpY2spPVwiaG9zdC5yZXNldCgpXCJcbiAgICAgICAgICBkYXRhLXJvbGU9XCJjbGVhci1maWx0ZXJcIlxuICAgICAgICA+XG4gICAgICAgICAgQ2xlYXIgQWxsXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICA8L2Rpdj5cblxuICA8bmctdGVtcGxhdGUgI2ZpbHRlcnNUZXh0RGVmYXVsdD5cbiAgICA8c3BhblxuICAgICAgaTE4bj1cIlxuICAgICAgICBGaWx0ZXJzfFRleHQgZm9yIGZpbHRlciBidXR0b24gaWYgZmlsdGVyIHdhc1xuICAgICAgICBhcHBsaWVkQEBtZXNzYWdlcy5tZXNzYWdlc0NvbW1vbi5jb252ZXJzYXRpb25zTGlzdEZpbHRlckNvbnZlcnNhdGlvbi5maWx0ZXJzVGV4dFwiXG4gICAgICA+RmlsdGVyczwvc3BhblxuICAgID5cbiAgPC9uZy10ZW1wbGF0ZT5cbjwvbmctdGVtcGxhdGU+XG4iXX0=