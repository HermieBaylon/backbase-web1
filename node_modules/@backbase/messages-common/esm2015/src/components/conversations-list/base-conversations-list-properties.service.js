import { Injectable, Optional } from '@angular/core';
import { defaultModelObservable } from '../../utils/item-model-property';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export const DefaultWidgetProperties = {
    createMessageOpenEventName: 'bb.event.messages.create.message.open',
    createMessageClosedEventName: 'bb.event.messages.create.message.close',
    itemsPerPage: 10,
    mailboxType: '',
    customerServiceTitle: 'Customer Service',
    viewType: 'all',
    hideAssignedToColumn: false,
    showMailboxTypes: true,
};
export class BaseConversationsListPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
    }
    /**
     * Quantity of items to show per page/to add per request, used for Client and Employee widget
     */
    get itemsPerPage() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.itemsPerPage);
        }
        return this.itemModel.property('itemsPerPage', DefaultWidgetProperties.itemsPerPage);
    }
    /**
     * Event published to open Create message modal widget, used for Client and Employee widget
     */
    get createMessageOpenEventName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.createMessageOpenEventName);
        }
        return this.itemModel.property('createMessageOpenEventName', DefaultWidgetProperties.createMessageOpenEventName);
    }
    /**
     * Event published when Create message modal widget was closed,
     * used for Client and Employee widget to update list of conversations
     */
    get createMessageClosedEventName() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.createMessageClosedEventName);
        }
        return this.itemModel.property('createMessageClosedEventName', DefaultWidgetProperties.createMessageClosedEventName);
    }
    /**
     * Mailbox type property, used for Client widget
     */
    get mailboxType() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.mailboxType);
        }
        return this.itemModel.property('mailboxType', DefaultWidgetProperties.mailboxType);
    }
    /**
     * Customer service title, localizable, used for Client widget
     */
    get customerServiceTitle() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.customerServiceTitle);
        }
        return this.itemModel.property('customerServiceTitle', DefaultWidgetProperties.customerServiceTitle);
    }
    /**
     * View type for conversations list (all, assigned, unassigned, resolved, my-resolved, drafts),
     * used for Employee widget
     */
    get viewType() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.viewType);
        }
        return this.itemModel.property('viewType', DefaultWidgetProperties.viewType);
    }
    /**
     * Property to hide `Assigned to` column, used for Employee widget
     */
    get hideAssignedToColumn() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.hideAssignedToColumn);
        }
        return this.itemModel.property('hideAssignedToColumn', DefaultWidgetProperties.hideAssignedToColumn);
    }
    /**
     * Property to show mailbox types (inbox and sent), used for Employee widget
     */
    get showMailboxTypes() {
        if (!this.itemModel) {
            return defaultModelObservable(DefaultWidgetProperties.showMailboxTypes);
        }
        return this.itemModel.property('showMailboxTypes', DefaultWidgetProperties.showMailboxTypes);
    }
}
BaseConversationsListPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BaseConversationsListPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,