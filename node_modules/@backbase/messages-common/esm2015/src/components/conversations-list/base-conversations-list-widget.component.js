import { Component, EventEmitter, Output } from '@angular/core';
import { BehaviorSubject, combineLatest, EMPTY, Subject } from 'rxjs';
import { map, pluck, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/shared-methods/shared-methods.service";
import * as i2 from "@angular/router";
import * as i3 from "./base-conversations-list-properties.service";
export class BaseConversationsListWidgetComponent {
    constructor(shared, activatedRoute, properties) {
        this.shared = shared;
        this.activatedRoute = activatedRoute;
        this.properties = properties;
        /**
         * Emits id of the selected conversation
         */
        this.conversationId = new EventEmitter();
        /**
         * Emits filter object to keep widget filter params
         */
        this.filter = new EventEmitter();
        /**
         * The `Unsubscribe` subject.
         */
        this.unsubscribe$ = new Subject();
        /**
         * The loading parameter indicating the starting page for the data to be loaded from.
         */
        this.from$ = new BehaviorSubject(0);
        /**
         * The parameters object with the starting page number.
         */
        this.filterParams = {
            from: 0,
        };
        /**
         * The parameters subject with applied filters.
         */
        this.filterParams$ = this.getRouteParam(this.activatedRoute, 'filter').pipe(takeUntil(this.unsubscribe$), map(params => {
            if (params) {
                try {
                    return JSON.parse(params);
                }
                catch (err) { }
            }
            return {};
        }));
    }
    /**
     * The method to change the page and load conversations corresponding to that page.
     *
     * @param page Page number
     */
    onPageChange(page) {
        if (page || page === 0) {
            this.from$.next(page);
            this.filterParams.from = page;
            this.emitFilterParams(this.filterParams);
        }
    }
    /**
     * The method to switch to another mailbox type and load corresponding data.
     *
     * @param mailbox Mailbox type
     */
    onMailboxApply(mailbox) {
        this.from$.next(0);
        this.filterParams = this.setMailboxTypedParams(mailbox);
        this.emitFilterParams(this.filterParams);
    }
    /**
     * The method to fetch conversation list according to the applied filter parameters.
     *
     * @param obj Filter params
     */
    onFilterFormApply(obj) {
        this.from$.next(0);
        this.filterParams = this.setFilterFormParams(obj);
        this.emitFilterParams(this.filterParams);
    }
    /**
     * The method to open the draft thread.
     *
     * @param draft Draft data
     */
    openDraft(draft) {
        if ('conversationId' in draft) {
            this.conversationId.emit(draft.conversationId);
        }
        else {
            this.properties.createMessageOpenEventName
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(eventName => this.shared.eventBusPublish(eventName, { draftId: draft.id }));
        }
    }
    /**
     * The method to open the conversation thread.
     *
     * @param conversation Conversation data
     */
    openConversation(conversation) {
        this.conversationId.emit(typeof conversation === 'string' ? conversation : conversation.id);
    }
    /**
     * The method to open the error notification.
     *
     * @param error Http error response
     */
    showErrorNotification(error) {
        this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
        return EMPTY;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    /**
     * The method to emit the filtering parameters.
     *
     * @param filterParams Filter params data
     */
    emitFilterParams(filterParams) {
        const params = JSON.stringify(filterParams);
        this.filter.emit(params);
    }
    setMailboxTypedParams(mailboxType) {
        return {
            from: 0,
            mailboxType,
        };
    }
    setFilterFormParams(filterParams) {
        return Object.assign({ from: 0 }, filterParams);
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
BaseConversationsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListWidgetComponent, deps: [{ token: i1.SharedMethodsService }, { token: i2.ActivatedRoute }, { token: i3.BaseConversationsListPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
BaseConversationsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationsListWidgetComponent, selector: "ng-component", outputs: { conversationId: "conversationId", filter: "filter" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.SharedMethodsService }, { type: i2.ActivatedRoute }, { type: i3.BaseConversationsListPropertiesService }]; }, propDecorators: { conversationId: [{
                type: Output
            }], filter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,