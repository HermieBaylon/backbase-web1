import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class BaseModalComponent {
    constructor() {
        /**
         * Input that toggles opening/closing the modal
         */
        this.isOpen = false;
        /**
         * Event emitted when modal was resolved
         */
        this.confirm = new EventEmitter();
        /**
         * Event emitted when modal was dismissed
         */
        this.cancel = new EventEmitter();
        /**
         * The unique ID HTML property for each component instance.
         */
        this.id = `base-modal-component-${BaseModalComponent.counter++}`;
        this.hostRef = this;
    }
    /**
     * The method to reset the form and the cancellation modal.
     */
    onCancel() {
        this.cancel.emit();
    }
    /**
     * The method to confirm the value change.
     *
     * @param value Changed value
     */
    onConfirm(value) {
        this.confirm.emit(value);
    }
}
BaseModalComponent.counter = 0;
BaseModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BaseModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseModalComponent, selector: "ng-component", inputs: { isOpen: "isOpen" }, outputs: { confirm: "confirm", cancel: "cancel" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseModalComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNvbW1vbi9zcmMvY29tcG9uZW50cy9iYXNlLW1vZGFsL2Jhc2UtbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBS3ZFLE1BQU0sT0FBTyxrQkFBa0I7SUFIL0I7UUFNRTs7V0FFRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDeEI7O1dBRUc7UUFDTyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7UUFDM0Q7O1dBRUc7UUFDTyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUU1Qzs7V0FFRztRQUNNLE9BQUUsR0FBRyx3QkFBd0Isa0JBQWtCLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUM1RCxZQUFPLEdBQUcsSUFBSSxDQUFDO0tBaUJ6QjtJQWZDOztPQUVHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxTQUFTLENBQUMsS0FBYztRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDOztBQW5DTSwwQkFBTyxHQUFHLENBQUMsQ0FBQztnSEFEUixrQkFBa0I7b0dBQWxCLGtCQUFrQixxSUFGbkIsRUFBRTs0RkFFRCxrQkFBa0I7a0JBSDlCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7OEJBT1UsTUFBTTtzQkFBZCxLQUFLO2dCQUlJLE9BQU87c0JBQWhCLE1BQU07Z0JBSUcsTUFBTTtzQkFBZixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlOiAnJyxcbn0pXG5leHBvcnQgY2xhc3MgQmFzZU1vZGFsQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvdW50ZXIgPSAwO1xuXG4gIC8qKlxuICAgKiBJbnB1dCB0aGF0IHRvZ2dsZXMgb3BlbmluZy9jbG9zaW5nIHRoZSBtb2RhbFxuICAgKi9cbiAgQElucHV0KCkgaXNPcGVuID0gZmFsc2U7XG4gIC8qKlxuICAgKiBFdmVudCBlbWl0dGVkIHdoZW4gbW9kYWwgd2FzIHJlc29sdmVkXG4gICAqL1xuICBAT3V0cHV0KCkgY29uZmlybSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgdW5kZWZpbmVkPigpO1xuICAvKipcbiAgICogRXZlbnQgZW1pdHRlZCB3aGVuIG1vZGFsIHdhcyBkaXNtaXNzZWRcbiAgICovXG4gIEBPdXRwdXQoKSBjYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgSFRNTCBwcm9wZXJ0eSBmb3IgZWFjaCBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqL1xuICByZWFkb25seSBpZCA9IGBiYXNlLW1vZGFsLWNvbXBvbmVudC0ke0Jhc2VNb2RhbENvbXBvbmVudC5jb3VudGVyKyt9YDtcbiAgcmVhZG9ubHkgaG9zdFJlZiA9IHRoaXM7XG5cbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgdG8gcmVzZXQgdGhlIGZvcm0gYW5kIHRoZSBjYW5jZWxsYXRpb24gbW9kYWwuXG4gICAqL1xuICBvbkNhbmNlbCgpIHtcbiAgICB0aGlzLmNhbmNlbC5lbWl0KCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB0byBjb25maXJtIHRoZSB2YWx1ZSBjaGFuZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSBDaGFuZ2VkIHZhbHVlXG4gICAqL1xuICBvbkNvbmZpcm0odmFsdWU/OiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbmZpcm0uZW1pdCh2YWx1ZSk7XG4gIH1cbn1cbiJdfQ==