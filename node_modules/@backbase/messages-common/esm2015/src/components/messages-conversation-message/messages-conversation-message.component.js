import { Component, Directive, Input, TemplateRef, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/ui-ang/file-attachment";
import * as i3 from "../messages-preview/messages-preview.component";
import * as i4 from "@backbase/ui-ang/keyboard-click-directive";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/tooltip-directive";
/**
 * @name MessagesConversationMessageComponent
 *
 * @description
 * Component displays conversation message.
 */
export class MessagesConversationMessageComponent {
    constructor() {
        /**
         * Toggles message collapse (text-truncate and replacement HTML-tags)
         */
        this.opened = false;
        /**
         * Is message body contains html
         */
        this.isBodyHtml = false;
        /**
         * The unique ID HTML property for each widget component instance.
         */
        this.messageId = `messages-conversation-message-${MessagesConversationMessageComponent.counter++}`;
        this.replaceTags = (content) => (content ? content.replace(/<[^>]+>/gi, '') : '');
    }
    /**
     * Text of the message, could have HTML-tags
     */
    set message(value) {
        this.messageText = value;
        this.messageTextWithoutTags = value ? this.replaceTags(value) : undefined;
    }
    /**
     * Toggle message on click
     *
     * @param event Click event
     */
    onClick(event) {
        const selection = document.getSelection();
        if ((selection && selection.toString().length) ||
            (event.target.tagName.toLowerCase() === 'a' && event.target.href)) {
            return;
        }
        this.opened = !this.opened;
    }
    /**
     * Get sender template
     *
     * @returns Sender template
     */
    getSenderTemplate() {
        if (this.sender instanceof TemplateRef) {
            return this.sender;
        }
        return this.defaultSenderTemplate;
    }
    ngOnInit() {
        if (typeof this.messageText === 'undefined') {
            throw new Error(`"message" input is required in "${this.constructor.name}"`);
        }
    }
}
MessagesConversationMessageComponent.counter = 0;
MessagesConversationMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MessagesConversationMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationMessageComponent, selector: "bb-messages-conversation-message, bb-message-ui", inputs: { created: "created", message: "message", sender: "sender", opened: "opened", attachments: "attachments", isBodyHtml: "isBodyHtml" }, viewQueries: [{ propertyName: "defaultSenderTemplate", first: true, predicate: ["defaultSenderTemplate"], descendants: true, static: true }], ngImport: i0, template: "<ng-container bbMessagesConversationMessageCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbMessagesConversationMessageCustomizable let-host>\n  <div\n    class=\"bb-message-ui card-body\"\n    [attr.role]=\"host.isBodyHtml ? null : 'button'\"\n    (bbKeyboardClick)=\"!host.isBodyHtml && host.onClick($event)\"\n    tabindex=\"0\"\n    data-role=\"conversation-message\"\n    [attr.aria-controls]=\"host.messageId\"\n    [attr.aria-expanded]=\"host.opened\"\n  >\n    <div class=\"bb-stack bb-block--md\">\n      <span class=\"sr-only\" i18n=\"Message from|Before sender name@@messages.messagesCommon.messageFrom\"\n        >Message from</span\n      >\n      <span class=\"bb-text-semi-bold\" data-role=\"sender-name\">\n        <ng-container *ngTemplateOutlet=\"host.getSenderTemplate()\"></ng-container>\n      </span>\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <div class=\"bb-stack\">\n          <bb-icon-ui\n            class=\"bb-stack__item bb-text-support\"\n            *ngIf=\"host.attachments && host.attachments.length\"\n            name=\"attachment\"\n            data-role=\"messages-attachment\"\n            aria-label=\"Contains attachments\"\n            i18n-aria-label=\"\n              Contains attachments|Message contains attachments@@messages.messagesCommon.containsAttachments\"\n            bbTooltip=\"Contains attachments\"\n            i18n-bbTooltip=\"@@messages.messagesCommon.containsAttachments\"\n            triggers=\"hover\"\n            placement=\"top\"\n            container=\"body\"\n          ></bb-icon-ui>\n          <div *ngIf=\"host.created\" data-role=\"messages-creation-date\">\n            <span\n              class=\"sr-only\"\n              i18n=\"Date|'Date:' word that precedes message creation date@@messages.messagesCommon.labelForDate\"\n              >Date:</span\n            >\n            <span>{{ host.created | date: 'fullDate' }} </span>\n            <span\n              i18n=\"At|To bridge date and time (Monday March 28th, 2018 at 9:15 AM)@@messages.messagesCommon.createdAt\"\n              >at</span\n            >\n            <span> {{ host.created | date: 'shortTime' }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\" [ngClass]=\"{ 'col-md-8': !host.opened }\" [attr.id]=\"host.messageId\">\n        <div\n          data-role=\"message-content\"\n          *ngIf=\"!host.isBodyHtml; else htmlViewTmpl\"\n          [innerHtml]=\"host.opened ? host.messageText : host.messageTextWithoutTags\"\n          [ngClass]=\"{\n            'text-truncate': !host.opened,\n            'bb-block--md': host.opened && host.attachments\n          }\"\n        ></div>\n        <div data-role=\"attachments-wrapper\" class=\"row\" *ngIf=\"host.opened && host.attachments?.length\">\n          <div class=\"col-4\" *ngFor=\"let attachment of host.attachments\">\n            <bb-file-attachment-ui\n              [name]=\"attachment.filename\"\n              [size]=\"attachment.size\"\n              [fileContent]=\"attachment.linkStream\"\n            ></bb-file-attachment-ui>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #htmlViewTmpl>\n    <bb-messages-body-preview [body]=\"host.messageText\"></bb-messages-body-preview>\n  </ng-template>\n</ng-template>\n\n<ng-template #defaultSenderTemplate>\n  {{ sender }}\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2.FileAttachmentComponent; }), selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i0.forwardRef(function () { return i3.MessagesBodyPreviewComponent; }), selector: "bb-messages-body-preview, bb-message-preview", inputs: ["body"] }], directives: [{ type: i0.forwardRef(function () { return MessagesConversationMessageCustomizableDirective; }), selector: "[bbMessagesConversationMessageCustomizable]" }, { type: i0.forwardRef(function () { return i4.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i5.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i5.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i5.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i0.forwardRef(function () { return i5.DatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-conversation-message, bb-message-ui',
                    templateUrl: './messages-conversation-message.component.html',
                }]
        }], propDecorators: { created: [{
                type: Input
            }], message: [{
                type: Input,
                args: ['message']
            }], sender: [{
                type: Input
            }], opened: [{
                type: Input
            }], attachments: [{
                type: Input
            }], isBodyHtml: [{
                type: Input
            }], defaultSenderTemplate: [{
                type: ViewChild,
                args: ['defaultSenderTemplate', { static: true }]
            }] } });
export class MessagesConversationMessageCustomizableDirective extends BbTemplate {
}
MessagesConversationMessageCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesConversationMessageCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationMessageCustomizableDirective, selector: "[bbMessagesConversationMessageCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationMessageCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesConversationMessageCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,