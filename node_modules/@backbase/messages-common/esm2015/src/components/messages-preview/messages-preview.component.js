import { Component, Input, ViewChild } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { delay, filter, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class MessagesBodyPreviewComponent {
    constructor(renderer, cd) {
        this.renderer = renderer;
        this.cd = cd;
        /**
         * Flag to control visibility
         */
        this.isVisible = false;
        this.iframeContext = new BehaviorSubject(undefined);
        this.destroy = new Subject();
    }
    /**
     * Body from body message
     */
    set body(val) {
        this.iframeContext.next(val);
    }
    ngOnDestroy() {
        this.destroy.next();
    }
    /**
     * Load preview iframe
     */
    iframeLoad() {
        const iframeElement = this.iframeRef.nativeElement;
        const iframeBody = iframeElement.contentDocument.body;
        this.renderer.setStyle(iframeElement, 'width', '100%');
        this.renderer.setStyle(iframeElement, 'border', '0');
        this.renderer.setStyle(iframeBody, 'margin', '0');
        this.iframeContext
            .pipe(filter(Boolean), tap(content => this.renderer.setProperty(iframeBody, 'innerHTML', content)), delay(300), takeUntil(this.destroy))
            .subscribe(() => {
            let currentHeight = iframeBody.scrollHeight;
            let previousHeight = 0;
            let counter = 0;
            /* Several iterations are needed to set iframe height after recalculating template body height
            that contains elements with height or size set in relative units. */
            do {
                this.renderer.setStyle(iframeElement, 'height', `${currentHeight}px`);
                previousHeight = currentHeight;
                currentHeight = iframeBody.scrollHeight;
                counter++;
            } while (previousHeight !== currentHeight && counter < 5);
            this.isVisible = true;
            this.cd.detectChanges();
        });
    }
}
MessagesBodyPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesBodyPreviewComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MessagesBodyPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesBodyPreviewComponent, selector: "bb-messages-body-preview, bb-message-preview", inputs: { body: "body" }, viewQueries: [{ propertyName: "iframeRef", first: true, predicate: ["iframeRef"], descendants: true, static: true }], ngImport: i0, template: "<iframe\n  #iframeRef\n  title=\"Message preview\"\n  i18n-title=\"Message preview title@@messages.message-preview-title\"\n  [style.visibility]=\"isVisible ? 'visible' : 'hidden'\"\n  (load)=\"iframeLoad()\"\n></iframe>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesBodyPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-body-preview, bb-message-preview',
                    templateUrl: './messages-preview.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { body: [{
                type: Input
            }], iframeRef: [{
                type: ViewChild,
                args: ['iframeRef', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMtcHJldmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNvbW1vbi9zcmMvY29tcG9uZW50cy9tZXNzYWdlcy1wcmV2aWV3L21lc3NhZ2VzLXByZXZpZXcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tZXNzYWdlcy1jb21tb24vc3JjL2NvbXBvbmVudHMvbWVzc2FnZXMtcHJldmlldy9tZXNzYWdlcy1wcmV2aWV3LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBcUIsU0FBUyxFQUFjLEtBQUssRUFBd0IsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFNL0QsTUFBTSxPQUFPLDRCQUE0QjtJQXNCdkMsWUFBNkIsUUFBbUIsRUFBbUIsRUFBcUI7UUFBM0QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFtQixPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQWJ4Rjs7V0FFRztRQUNILGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFRCxrQkFBYSxHQUFHLElBQUksZUFBZSxDQUFxQixTQUFTLENBQUMsQ0FBQztRQUNuRSxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQU80QyxDQUFDO0lBckI1Rjs7T0FFRztJQUNILElBQ0ksSUFBSSxDQUFDLEdBQVc7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQWlCRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVO1FBQ1IsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7UUFDbkQsTUFBTSxVQUFVLEdBQUksYUFBYSxDQUFDLGVBQTRCLENBQUMsSUFBSSxDQUFDO1FBRXBFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxhQUFhO2FBQ2YsSUFBSSxDQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDZixHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQzNFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFDVixTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUN4QjthQUNBLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDO1lBQzVDLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztZQUN2QixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFFaEI7Z0ZBQ29FO1lBQ3BFLEdBQUc7Z0JBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxHQUFHLGFBQWEsSUFBSSxDQUFDLENBQUM7Z0JBQ3RFLGNBQWMsR0FBRyxhQUFhLENBQUM7Z0JBQy9CLGFBQWEsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDO2dCQUN4QyxPQUFPLEVBQUUsQ0FBQzthQUNYLFFBQVEsY0FBYyxLQUFLLGFBQWEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBRTFELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzswSEEvRFUsNEJBQTRCOzhHQUE1Qiw0QkFBNEIsb09DUnpDLGdPQU9BOzRGRENhLDRCQUE0QjtrQkFKeEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsOENBQThDO29CQUN4RCxXQUFXLEVBQUUsbUNBQW1DO2lCQUNqRDtnSUFNSyxJQUFJO3NCQURQLEtBQUs7Z0JBZ0JvQyxTQUFTO3NCQUFsRCxTQUFTO3VCQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95LCBSZW5kZXJlcjIsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWxheSwgZmlsdGVyLCB0YWtlVW50aWwsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItbWVzc2FnZXMtYm9keS1wcmV2aWV3LCBiYi1tZXNzYWdlLXByZXZpZXcnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWVzc2FnZXMtcHJldmlldy5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzQm9keVByZXZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAvKipcbiAgICogQm9keSBmcm9tIGJvZHkgbWVzc2FnZVxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGJvZHkodmFsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmlmcmFtZUNvbnRleHQubmV4dCh2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZsYWcgdG8gY29udHJvbCB2aXNpYmlsaXR5XG4gICAqL1xuICBpc1Zpc2libGUgPSBmYWxzZTtcblxuICBwcml2YXRlIHJlYWRvbmx5IGlmcmFtZUNvbnRleHQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZyB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAvKipcbiAgICogTWVzc2FnZSBwcmV2aWV3XG4gICAqL1xuICBAVmlld0NoaWxkKCdpZnJhbWVSZWYnLCB7IHN0YXRpYzogdHJ1ZSB9KSBpZnJhbWVSZWYhOiBFbGVtZW50UmVmPEhUTUxJRnJhbWVFbGVtZW50PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgcmVhZG9ubHkgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveS5uZXh0KCk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCBwcmV2aWV3IGlmcmFtZVxuICAgKi9cbiAgaWZyYW1lTG9hZCgpIHtcbiAgICBjb25zdCBpZnJhbWVFbGVtZW50ID0gdGhpcy5pZnJhbWVSZWYubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCBpZnJhbWVCb2R5ID0gKGlmcmFtZUVsZW1lbnQuY29udGVudERvY3VtZW50IGFzIERvY3VtZW50KS5ib2R5O1xuXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShpZnJhbWVFbGVtZW50LCAnd2lkdGgnLCAnMTAwJScpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoaWZyYW1lRWxlbWVudCwgJ2JvcmRlcicsICcwJyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShpZnJhbWVCb2R5LCAnbWFyZ2luJywgJzAnKTtcblxuICAgIHRoaXMuaWZyYW1lQ29udGV4dFxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcihCb29sZWFuKSxcbiAgICAgICAgdGFwKGNvbnRlbnQgPT4gdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShpZnJhbWVCb2R5LCAnaW5uZXJIVE1MJywgY29udGVudCkpLFxuICAgICAgICBkZWxheSgzMDApLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95KSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBsZXQgY3VycmVudEhlaWdodCA9IGlmcmFtZUJvZHkuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICBsZXQgcHJldmlvdXNIZWlnaHQgPSAwO1xuICAgICAgICBsZXQgY291bnRlciA9IDA7XG5cbiAgICAgICAgLyogU2V2ZXJhbCBpdGVyYXRpb25zIGFyZSBuZWVkZWQgdG8gc2V0IGlmcmFtZSBoZWlnaHQgYWZ0ZXIgcmVjYWxjdWxhdGluZyB0ZW1wbGF0ZSBib2R5IGhlaWdodFxuICAgICAgICB0aGF0IGNvbnRhaW5zIGVsZW1lbnRzIHdpdGggaGVpZ2h0IG9yIHNpemUgc2V0IGluIHJlbGF0aXZlIHVuaXRzLiAqL1xuICAgICAgICBkbyB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShpZnJhbWVFbGVtZW50LCAnaGVpZ2h0JywgYCR7Y3VycmVudEhlaWdodH1weGApO1xuICAgICAgICAgIHByZXZpb3VzSGVpZ2h0ID0gY3VycmVudEhlaWdodDtcbiAgICAgICAgICBjdXJyZW50SGVpZ2h0ID0gaWZyYW1lQm9keS5zY3JvbGxIZWlnaHQ7XG4gICAgICAgICAgY291bnRlcisrO1xuICAgICAgICB9IHdoaWxlIChwcmV2aW91c0hlaWdodCAhPT0gY3VycmVudEhlaWdodCAmJiBjb3VudGVyIDwgNSk7XG5cbiAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH0pO1xuICB9XG59XG4iLCI8aWZyYW1lXG4gICNpZnJhbWVSZWZcbiAgdGl0bGU9XCJNZXNzYWdlIHByZXZpZXdcIlxuICBpMThuLXRpdGxlPVwiTWVzc2FnZSBwcmV2aWV3IHRpdGxlQEBtZXNzYWdlcy5tZXNzYWdlLXByZXZpZXctdGl0bGVcIlxuICBbc3R5bGUudmlzaWJpbGl0eV09XCJpc1Zpc2libGUgPyAndmlzaWJsZScgOiAnaGlkZGVuJ1wiXG4gIChsb2FkKT1cImlmcmFtZUxvYWQoKVwiXG4+PC9pZnJhbWU+XG4iXX0=