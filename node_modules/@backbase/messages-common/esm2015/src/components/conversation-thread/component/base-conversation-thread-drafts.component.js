import { Component, ViewChild } from '@angular/core';
import { EMPTY, of } from 'rxjs';
import { catchError, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/abstract-base-messages-conversation-thread.service";
import * as i2 from "../../../services/shared-methods/shared-methods.service";
export class BaseConversationThreadDraftsComponent {
    constructor(apiThreadService, shared) {
        this.apiThreadService = apiThreadService;
        this.shared = shared;
    }
    saveDraft(conversationId, body) {
        return of(this.draftResponse).pipe(switchMap(draft => (draft ? this.updateDraft(conversationId, body) : this.createDraft(conversationId, body))), tap(() => this.shared.openNotification(this.draftSaveSuccessTpl, 'success')), catchError(error => {
            this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
            return EMPTY;
        }));
    }
    deleteDraft() {
        if (this.apiThreadService.deleteDraft && this.draftResponse) {
            return this.apiThreadService.deleteDraft(this.draftResponse.id).pipe(tap(() => {
                this.draftResponse = undefined;
                this.shared.openNotification(this.draftDeleteSuccessTpl, 'success');
            }), catchError(error => {
                this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
                return EMPTY;
            }));
        }
        return of(undefined);
    }
    createDraft(conversationId, body) {
        if (this.apiThreadService.createDraft) {
            return this.apiThreadService.createDraft(conversationId, body).pipe(tap(res => (this.draftResponse = {
                id: res ? res.id : '',
                createdAt: new Date().toString(),
            })));
        }
        return of(undefined);
    }
    updateDraft(conversationId, body) {
        if (this.apiThreadService.updateDraft) {
            return this.apiThreadService.updateDraft(conversationId, body);
        }
        return of(undefined);
    }
}
BaseConversationThreadDraftsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationThreadDraftsComponent, deps: [{ token: i1.AbstractBaseMessagesConversationThreadService }, { token: i2.SharedMethodsService }], target: i0.ɵɵFactoryTarget.Component });
BaseConversationThreadDraftsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationThreadDraftsComponent, selector: "ng-component", viewQueries: [{ propertyName: "draftSaveSuccessTpl", first: true, predicate: ["draftSaveSuccess"], descendants: true }, { propertyName: "draftDeleteSuccessTpl", first: true, predicate: ["draftDeleteSuccess"], descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationThreadDraftsComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.AbstractBaseMessagesConversationThreadService }, { type: i2.SharedMethodsService }]; }, propDecorators: { draftSaveSuccessTpl: [{
                type: ViewChild,
                args: ['draftSaveSuccess']
            }], draftDeleteSuccessTpl: [{
                type: ViewChild,
                args: ['draftDeleteSuccess']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb252ZXJzYXRpb24tdGhyZWFkLWRyYWZ0cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNvbW1vbi9zcmMvY29tcG9uZW50cy9jb252ZXJzYXRpb24tdGhyZWFkL2NvbXBvbmVudC9iYXNlLWNvbnZlcnNhdGlvbi10aHJlYWQtZHJhZnRzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFlLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRSxPQUFPLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQVc1RCxNQUFNLE9BQU8scUNBQXFDO0lBTWhELFlBQ3FCLGdCQUErRCxFQUMvRCxNQUE0QjtRQUQ1QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQStDO1FBQy9ELFdBQU0sR0FBTixNQUFNLENBQXNCO0lBQzlDLENBQUM7SUFFSixTQUFTLENBQUMsY0FBc0IsRUFBRSxJQUFpQztRQUNqRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUNoQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDN0csR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQzVFLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRTFFLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDM0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUNsRSxHQUFHLENBQUMsR0FBRyxFQUFFO2dCQUNQLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO2dCQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUN0RSxDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBRTFFLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQ0gsQ0FBQztTQUNIO1FBRUQsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVPLFdBQVcsQ0FBQyxjQUFzQixFQUFFLElBQWlDO1FBQzNFLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRTtZQUNyQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDakUsR0FBRyxDQUNELEdBQUcsQ0FBQyxFQUFFLENBQ0osQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHO2dCQUNwQixFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNyQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUU7YUFDakMsQ0FBQyxDQUNMLENBQ0YsQ0FBQztTQUNIO1FBRUQsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVPLFdBQVcsQ0FBQyxjQUFzQixFQUFFLElBQWlDO1FBQzNFLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRTtZQUNyQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2hFO1FBRUQsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7bUlBL0RVLHFDQUFxQzt1SEFBckMscUNBQXFDLDJSQUZ0QyxFQUFFOzRGQUVELHFDQUFxQztrQkFIakQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsRUFBRTtpQkFDYjt1S0FFZ0MsbUJBQW1CO3NCQUFqRCxTQUFTO3VCQUFDLGtCQUFrQjtnQkFDSSxxQkFBcUI7c0JBQXJELFNBQVM7dUJBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFTVBUWSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBNZXNzYWdlUmVwbHlQb3N0UmVxdWVzdEJvZHkgfSBmcm9tICdAYmFja2Jhc2UvbWVzc2FnZXMtdjUtaHR0cC1hbmcnO1xuXG5pbXBvcnQgeyBEcmFmdCB9IGZyb20gJy4uL21vZGVscy9jb252ZXJzYXRpb25zLm1vZGVsJztcbmltcG9ydCB7IEFic3RyYWN0QmFzZU1lc3NhZ2VzQ29udmVyc2F0aW9uVGhyZWFkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2Fic3RyYWN0LWJhc2UtbWVzc2FnZXMtY29udmVyc2F0aW9uLXRocmVhZC5zZXJ2aWNlJztcbmltcG9ydCB7IFNoYXJlZE1ldGhvZHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvc2hhcmVkLW1ldGhvZHMvc2hhcmVkLW1ldGhvZHMuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogJycsXG59KVxuZXhwb3J0IGNsYXNzIEJhc2VDb252ZXJzYXRpb25UaHJlYWREcmFmdHNDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCdkcmFmdFNhdmVTdWNjZXNzJykgZHJhZnRTYXZlU3VjY2Vzc1RwbDogVGVtcGxhdGVSZWY8YW55PiB8IHVuZGVmaW5lZDtcbiAgQFZpZXdDaGlsZCgnZHJhZnREZWxldGVTdWNjZXNzJykgZHJhZnREZWxldGVTdWNjZXNzVHBsOiBUZW1wbGF0ZVJlZjxhbnk+IHwgdW5kZWZpbmVkO1xuXG4gIGRyYWZ0UmVzcG9uc2U6IERyYWZ0IHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBhcGlUaHJlYWRTZXJ2aWNlOiBBYnN0cmFjdEJhc2VNZXNzYWdlc0NvbnZlcnNhdGlvblRocmVhZFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHNoYXJlZDogU2hhcmVkTWV0aG9kc1NlcnZpY2UsXG4gICkge31cblxuICBzYXZlRHJhZnQoY29udmVyc2F0aW9uSWQ6IHN0cmluZywgYm9keTogTWVzc2FnZVJlcGx5UG9zdFJlcXVlc3RCb2R5KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gb2YodGhpcy5kcmFmdFJlc3BvbnNlKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKGRyYWZ0ID0+IChkcmFmdCA/IHRoaXMudXBkYXRlRHJhZnQoY29udmVyc2F0aW9uSWQsIGJvZHkpIDogdGhpcy5jcmVhdGVEcmFmdChjb252ZXJzYXRpb25JZCwgYm9keSkpKSxcbiAgICAgIHRhcCgoKSA9PiB0aGlzLnNoYXJlZC5vcGVuTm90aWZpY2F0aW9uKHRoaXMuZHJhZnRTYXZlU3VjY2Vzc1RwbCwgJ3N1Y2Nlc3MnKSksXG4gICAgICBjYXRjaEVycm9yKGVycm9yID0+IHtcbiAgICAgICAgdGhpcy5zaGFyZWQub3Blbk5vdGlmaWNhdGlvbih0aGlzLnNoYXJlZC5nZXRFcnJvck1lc3NhZ2UoZXJyb3IpLCAnZXJyb3InKTtcblxuICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgZGVsZXRlRHJhZnQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAodGhpcy5hcGlUaHJlYWRTZXJ2aWNlLmRlbGV0ZURyYWZ0ICYmIHRoaXMuZHJhZnRSZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXBpVGhyZWFkU2VydmljZS5kZWxldGVEcmFmdCh0aGlzLmRyYWZ0UmVzcG9uc2UuaWQpLnBpcGUoXG4gICAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kcmFmdFJlc3BvbnNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHRoaXMuc2hhcmVkLm9wZW5Ob3RpZmljYXRpb24odGhpcy5kcmFmdERlbGV0ZVN1Y2Nlc3NUcGwsICdzdWNjZXNzJyk7XG4gICAgICAgIH0pLFxuICAgICAgICBjYXRjaEVycm9yKGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLnNoYXJlZC5vcGVuTm90aWZpY2F0aW9uKHRoaXMuc2hhcmVkLmdldEVycm9yTWVzc2FnZShlcnJvciksICdlcnJvcicpO1xuXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKHVuZGVmaW5lZCk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZURyYWZ0KGNvbnZlcnNhdGlvbklkOiBzdHJpbmcsIGJvZHk6IE1lc3NhZ2VSZXBseVBvc3RSZXF1ZXN0Qm9keSk6IE9ic2VydmFibGU8YW55IHwgbnVsbCB8IHVuZGVmaW5lZD4ge1xuICAgIGlmICh0aGlzLmFwaVRocmVhZFNlcnZpY2UuY3JlYXRlRHJhZnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwaVRocmVhZFNlcnZpY2UuY3JlYXRlRHJhZnQoY29udmVyc2F0aW9uSWQsIGJvZHkpLnBpcGUoXG4gICAgICAgIHRhcChcbiAgICAgICAgICByZXMgPT5cbiAgICAgICAgICAgICh0aGlzLmRyYWZ0UmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgIGlkOiByZXMgPyByZXMuaWQgOiAnJyxcbiAgICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKHVuZGVmaW5lZCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZURyYWZ0KGNvbnZlcnNhdGlvbklkOiBzdHJpbmcsIGJvZHk6IE1lc3NhZ2VSZXBseVBvc3RSZXF1ZXN0Qm9keSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKHRoaXMuYXBpVGhyZWFkU2VydmljZS51cGRhdGVEcmFmdCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXBpVGhyZWFkU2VydmljZS51cGRhdGVEcmFmdChjb252ZXJzYXRpb25JZCwgYm9keSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKHVuZGVmaW5lZCk7XG4gIH1cbn1cbiJdfQ==