import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { BehaviorSubject, combineLatest, EMPTY, Subject, of } from 'rxjs';
import { catchError, switchMap, takeUntil, tap } from 'rxjs/operators';
import { ManipulationType, } from '../../messages-manipulation-confirm-modal/manipulation-confirm-modal-types.model';
import { ReadUnreadStatusType } from '../models/conversations.model';
import { BaseConversationThreadDraftsComponent } from './base-conversation-thread-drafts.component';
import { UnknownIdError } from '../../../utils/unknown-id-error';
import { shareReplayOnce } from '../../../helpers/rxjs-operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/abstract-base-messages-conversation-thread.service";
import * as i2 from "@angular/router";
import * as i3 from "../../../services/shared-methods/shared-methods.service";
import * as i4 from "../../messages-manipulation-confirm-modal/messages-manipulation-confirm-modal.service";
import * as i5 from "../../upload-attachments/services/messages-upload-attachments.service";
import * as i6 from "../../../services/messages-encoding/messages-encoding.service";
export class BaseConversationThreadComponent extends BaseConversationThreadDraftsComponent {
    constructor(apiThreadService, activatedRoute, shared, confirmModalService, uploadService, encodingService) {
        super(apiThreadService, shared);
        this.apiThreadService = apiThreadService;
        this.activatedRoute = activatedRoute;
        this.shared = shared;
        this.confirmModalService = confirmModalService;
        this.uploadService = uploadService;
        this.encodingService = encodingService;
        /**
         * Event emitted when this thread should be closed or navigation should be changed to previous or another widget
         */
        this.back = new EventEmitter();
        /**
         * The conversation thread ID.
         */
        this.id = `base-conversation-thread-component-${BaseConversationThreadComponent.counter++}`;
        /**
         * The manipulation types enum (`resolve`, `unresolve`, `assign`, `unassign`, `discard`,
         * `discardDraft`, `discardPreview`, `deleteTopic`, `deleteMailout`).
         */
        this.manipulationTypes = ManipulationType;
        this.unsubscribe = new Subject();
        this.replyPressed = new Subject();
        this.conversationId$ = new BehaviorSubject(undefined);
        /**
         * The loading flag for the data fetched through the HTTP request.
         */
        this.loading = true;
        /**
         * The flag defining if the reply is opened or not.
         */
        this.replyOpened = false;
        /**
         * The flag defining if the topic alert is closed or not.
         */
        this.topicAlertClosed = false;
        /**
         * The modal for action confirmation.
         */
        this.confirmationModal = {
            opened: false,
            type: undefined,
        };
        /**
         * The reply form.
         */
        this.replyFormGroup = new FormGroup({
            body: new FormControl(),
            attachments: new FormControl(),
        });
        /**
         * The form loading flag.
         */
        this.formLoading = false;
        this.conversationId = this.getConversationId();
        this.markAsReadUnreadSubject = new BehaviorSubject(ReadUnreadStatusType.READ);
        this.markAsReadUnreadStream = this.getMarkAsReadUnreadStream();
    }
    /**
     * Selected conversation id setter
     */
    set selectedConversationId(value) {
        this.conversationId$.next(value);
    }
    /**
     * Conversation id getter
     */
    get conversationIdValue() {
        return this.conversationId$.getValue();
    }
    ngOnDestroy() {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    /**
     * The method to save the draft.
     */
    onSaveDraft() {
        if (this.replyFormGroup.valid) {
            this.saveDraft(this.conversationIdValue ? this.conversationIdValue : '', this.convertFormValue())
                .pipe(takeUntil(this.unsubscribe))
                .subscribe();
        }
    }
    /**
     * The method that is used for component initialization to subscribe for the read-unread status and
     * to toggle the reply form updates.
     */
    initSubscriptions() {
        this.markAsReadUnreadStream.pipe(takeUntil(this.unsubscribe)).subscribe();
        this.confirmModalService.emitToggleModal$.pipe(takeUntil(this.unsubscribe)).subscribe(({ opened, type }) => {
            this.confirmationModal = { opened, type };
            if (!opened && (type === ManipulationType.discard || type === ManipulationType.discardDraft)) {
                this.toggleReplyForm(false);
            }
        });
    }
    /**
     * The method to navigate back.
     */
    navigateBack() {
        this.back.emit();
    }
    /**
     * The method to toggle the reply form.
     *
     * @param flag Toggle status
     */
    toggleReplyForm(flag) {
        this.replyOpened = flag;
        if (!flag) {
            this.uploadService.reset(true);
            this.replyFormGroup.reset();
        }
        else {
            setTimeout(() => this.richTextEditor && this.richTextEditor.labelClick());
        }
    }
    /**
     * The method to submit the reply.
     */
    reply() {
        this.replyFormGroup.markAsDirty();
        this.replyFormGroup.markAllAsTouched();
        if (this.replyFormGroup.valid) {
            this.replyPressed.next(this.convertFormValue());
        }
    }
    /**
     * The method that defines whether the control is valid or not.
     *
     * @param field Field name
     * @returns Is form field valid flag
     */
    isInvalidControl(field) {
        const control = this.getControl(field);
        return !!control && control.touched && control.invalid;
    }
    /**
     * The method to get any errors generated by failing validation, or null if there are no errors.
     *
     * @param field Field name
     * @param type Error type
     */
    hasError(field, type) {
        const control = this.getControl(field);
        return control && control.errors && control.errors[type];
    }
    getConversationId() {
        return this.conversationId$.pipe(switchMap(id => {
            if (!id) {
                this.errorResponse = new UnknownIdError();
                return EMPTY;
            }
            return of(id);
        }), shareReplayOnce());
    }
    getMarkAsReadUnreadStream() {
        return combineLatest([this.markAsReadUnreadSubject, this.conversationId]).pipe(switchMap(([status, conversationId]) => this.apiThreadService.markConversationsAsReadUnread({ status, ids: [conversationId] }).pipe(tap(() => status === ReadUnreadStatusType.UNREAD && this.navigateBack()), catchError(error => {
            this.shared.openNotification(this.shared.getErrorMessage(error), 'error');
            return EMPTY;
        }))));
    }
    convertFormValue() {
        const { body, attachments } = this.replyFormGroup.value;
        return Object.assign({ body: this.encodingService.b64Encode(body) }, ((attachments === null || attachments === void 0 ? void 0 : attachments.length) && { attachments: attachments.map(item => item.id) }));
    }
    getControl(field) {
        var _a;
        return (_a = this.replyFormGroup) === null || _a === void 0 ? void 0 : _a.controls[field];
    }
}
BaseConversationThreadComponent.counter = 0;
BaseConversationThreadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationThreadComponent, deps: [{ token: i1.AbstractBaseMessagesConversationThreadService }, { token: i2.ActivatedRoute }, { token: i3.SharedMethodsService }, { token: i4.MessagesManipulationConfirmModalService }, { token: i5.MessagesUploadAttachmentsService }, { token: i6.MessagesEncodingService }], target: i0.ɵɵFactoryTarget.Component });
BaseConversationThreadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: BaseConversationThreadComponent, selector: "ng-component", inputs: { selectedConversationId: "selectedConversationId" }, outputs: { back: "back" }, viewQueries: [{ propertyName: "replySuccessTpl", first: true, predicate: ["conversationReplySuccess,messageReplySuccess"], descendants: true }, { propertyName: "deleteSuccessTpl", first: true, predicate: ["conversationDeleteSuccess,messageDeleteSuccess"], descendants: true }, { propertyName: "richTextEditor", first: true, predicate: ["richTextEditor"], descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: BaseConversationThreadComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.AbstractBaseMessagesConversationThreadService }, { type: i2.ActivatedRoute }, { type: i3.SharedMethodsService }, { type: i4.MessagesManipulationConfirmModalService }, { type: i5.MessagesUploadAttachmentsService }, { type: i6.MessagesEncodingService }]; }, propDecorators: { back: [{
                type: Output
            }], selectedConversationId: [{
                type: Input
            }], replySuccessTpl: [{
                type: ViewChild,
                args: ['conversationReplySuccess,messageReplySuccess']
            }], deleteSuccessTpl: [{
                type: ViewChild,
                args: ['conversationDeleteSuccess,messageDeleteSuccess']
            }], richTextEditor: [{
                type: ViewChild,
                args: ['richTextEditor']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb252ZXJzYXRpb24tdGhyZWFkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWVzc2FnZXMtY29tbW9uL3NyYy9jb21wb25lbnRzL2NvbnZlcnNhdGlvbi10aHJlYWQvY29tcG9uZW50L2Jhc2UtY29udmVyc2F0aW9uLXRocmVhZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBZSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUcsT0FBTyxFQUFtQixXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFekUsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFjLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEYsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTXZFLE9BQU8sRUFDTCxnQkFBZ0IsR0FFakIsTUFBTSxrRkFBa0YsQ0FBQztBQU0xRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNwRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7Ozs7OztBQUtsRSxNQUFNLE9BQU8sK0JBQWdDLFNBQVEscUNBQXFDO0lBMkZ4RixZQUNxQixnQkFBK0QsRUFDL0QsY0FBOEIsRUFDOUIsTUFBNEIsRUFDdEMsbUJBQTRELEVBQ2xELGFBQStDLEVBQy9DLGVBQXdDO1FBRTNELEtBQUssQ0FBQyxnQkFBZ0IsRUFB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Q29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgRU1QVFksIE9ic2VydmFibGUsIFN1YmplY3QsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBzd2l0Y2hNYXAsIHRha2VVbnRpbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBNZXRhZGF0YSwgTWVzc2FnZVJlcGx5UG9zdFJlcXVlc3RCb2R5LCBNYXJrQXNSZWFkVW5yZWFkUHV0UmVzcG9uc2VCb2R5IH0gZnJvbSAnQGJhY2tiYXNlL21lc3NhZ2VzLXY1LWh0dHAtYW5nJztcblxuaW1wb3J0IHsgUmljaFRleHRFZGl0b3JDb21wb25lbnQgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3JpY2gtdGV4dC1lZGl0b3InO1xuXG5pbXBvcnQge1xuICBNYW5pcHVsYXRpb25UeXBlLFxuICBNZXNzYWdlc0NvbmZpcm1hdGlvbk1vZGFsTW9kZWwsXG59IGZyb20gJy4uLy4uL21lc3NhZ2VzLW1hbmlwdWxhdGlvbi1jb25maXJtLW1vZGFsL21hbmlwdWxhdGlvbi1jb25maXJtLW1vZGFsLXR5cGVzLm1vZGVsJztcbmltcG9ydCB7IEFic3RyYWN0QmFzZU1lc3NhZ2VzQ29udmVyc2F0aW9uVGhyZWFkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2Fic3RyYWN0LWJhc2UtbWVzc2FnZXMtY29udmVyc2F0aW9uLXRocmVhZC5zZXJ2aWNlJztcbmltcG9ydCB7IFNoYXJlZE1ldGhvZHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvc2hhcmVkLW1ldGhvZHMvc2hhcmVkLW1ldGhvZHMuc2VydmljZSc7XG5pbXBvcnQgeyBNZXNzYWdlc01hbmlwdWxhdGlvbkNvbmZpcm1Nb2RhbFNlcnZpY2UgfSBmcm9tICcuLi8uLi9tZXNzYWdlcy1tYW5pcHVsYXRpb24tY29uZmlybS1tb2RhbC9tZXNzYWdlcy1tYW5pcHVsYXRpb24tY29uZmlybS1tb2RhbC5zZXJ2aWNlJztcbmltcG9ydCB7IE1lc3NhZ2VzVXBsb2FkQXR0YWNobWVudHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXBsb2FkLWF0dGFjaG1lbnRzL3NlcnZpY2VzL21lc3NhZ2VzLXVwbG9hZC1hdHRhY2htZW50cy5zZXJ2aWNlJztcbmltcG9ydCB7IE1lc3NhZ2VzRW5jb2RpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvbWVzc2FnZXMtZW5jb2RpbmcvbWVzc2FnZXMtZW5jb2Rpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBSZWFkVW5yZWFkU3RhdHVzVHlwZSB9IGZyb20gJy4uL21vZGVscy9jb252ZXJzYXRpb25zLm1vZGVsJztcbmltcG9ydCB7IEJhc2VDb252ZXJzYXRpb25UaHJlYWREcmFmdHNDb21wb25lbnQgfSBmcm9tICcuL2Jhc2UtY29udmVyc2F0aW9uLXRocmVhZC1kcmFmdHMuY29tcG9uZW50JztcbmltcG9ydCB7IFVua25vd25JZEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdW5rbm93bi1pZC1lcnJvcic7XG5pbXBvcnQgeyBzaGFyZVJlcGxheU9uY2UgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3J4anMtb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlOiAnJyxcbn0pXG5leHBvcnQgY2xhc3MgQmFzZUNvbnZlcnNhdGlvblRocmVhZENvbXBvbmVudCBleHRlbmRzIEJhc2VDb252ZXJzYXRpb25UaHJlYWREcmFmdHNDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBzdGF0aWMgY291bnRlciA9IDA7XG5cbiAgLyoqXG4gICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGlzIHRocmVhZCBzaG91bGQgYmUgY2xvc2VkIG9yIG5hdmlnYXRpb24gc2hvdWxkIGJlIGNoYW5nZWQgdG8gcHJldmlvdXMgb3IgYW5vdGhlciB3aWRnZXRcbiAgICovXG4gIEBPdXRwdXQoKSBiYWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8qKlxuICAgKiBTZWxlY3RlZCBjb252ZXJzYXRpb24gaWQgc2V0dGVyXG4gICAqL1xuICBASW5wdXQoKSBzZXQgc2VsZWN0ZWRDb252ZXJzYXRpb25JZCh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5jb252ZXJzYXRpb25JZCQubmV4dCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG5vdGlmaWNhdGlvbiBmb3IgdGhlIHJlcGx5IHN1Y2Nlc3MuXG4gICAqL1xuICBAVmlld0NoaWxkKCdjb252ZXJzYXRpb25SZXBseVN1Y2Nlc3MsbWVzc2FnZVJlcGx5U3VjY2VzcycpIHJlcGx5U3VjY2Vzc1RwbDogVGVtcGxhdGVSZWY8YW55PiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIG5vdGlmaWNhdGlvbiBmb3IgdGhlIGRlbGV0ZSBzdWNjZXNzLlxuICAgKi9cbiAgQFZpZXdDaGlsZCgnY29udmVyc2F0aW9uRGVsZXRlU3VjY2VzcyxtZXNzYWdlRGVsZXRlU3VjY2VzcycpIGRlbGV0ZVN1Y2Nlc3NUcGw6IFRlbXBsYXRlUmVmPGFueT4gfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBtZXNzYWdlIHRleHQgZWRpdG9yLlxuICAgKi9cbiAgQFZpZXdDaGlsZCgncmljaFRleHRFZGl0b3InKSByaWNoVGV4dEVkaXRvcjogUmljaFRleHRFZGl0b3JDb21wb25lbnQgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBjb252ZXJzYXRpb24gdGhyZWFkIElELlxuICAgKi9cbiAgcmVhZG9ubHkgaWQgPSBgYmFzZS1jb252ZXJzYXRpb24tdGhyZWFkLWNvbXBvbmVudC0ke0Jhc2VDb252ZXJzYXRpb25UaHJlYWRDb21wb25lbnQuY291bnRlcisrfWA7XG5cbiAgLyoqXG4gICAqIFRoZSBtYW5pcHVsYXRpb24gdHlwZXMgZW51bSAoYHJlc29sdmVgLCBgdW5yZXNvbHZlYCwgYGFzc2lnbmAsIGB1bmFzc2lnbmAsIGBkaXNjYXJkYCxcbiAgICogYGRpc2NhcmREcmFmdGAsIGBkaXNjYXJkUHJldmlld2AsIGBkZWxldGVUb3BpY2AsIGBkZWxldGVNYWlsb3V0YCkuXG4gICAqL1xuICByZWFkb25seSBtYW5pcHVsYXRpb25UeXBlcyA9IE1hbmlwdWxhdGlvblR5cGU7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHVuc3Vic2NyaWJlID0gbmV3IFN1YmplY3QoKTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHJlcGx5UHJlc3NlZCA9IG5ldyBTdWJqZWN0PE1lc3NhZ2VSZXBseVBvc3RSZXF1ZXN0Qm9keT4oKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb252ZXJzYXRpb25JZCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZyB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuICAvKipcbiAgICogVGhlIGVycm9yIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgZXJyb3JSZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UgfCBVbmtub3duSWRFcnJvciB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGxvYWRpbmcgZmxhZyBmb3IgdGhlIGRhdGEgZmV0Y2hlZCB0aHJvdWdoIHRoZSBIVFRQIHJlcXVlc3QuXG4gICAqL1xuICBsb2FkaW5nID0gdHJ1ZTtcblxuICAvKipcbiAgICogVGhlIGZsYWcgZGVmaW5pbmcgaWYgdGhlIHJlcGx5IGlzIG9wZW5lZCBvciBub3QuXG4gICAqL1xuICByZXBseU9wZW5lZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgZmxhZyBkZWZpbmluZyBpZiB0aGUgdG9waWMgYWxlcnQgaXMgY2xvc2VkIG9yIG5vdC5cbiAgICovXG4gIHRvcGljQWxlcnRDbG9zZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogVGhlIG1vZGFsIGZvciBhY3Rpb24gY29uZmlybWF0aW9uLlxuICAgKi9cbiAgY29uZmlybWF0aW9uTW9kYWw6IE1lc3NhZ2VzQ29uZmlybWF0aW9uTW9kYWxNb2RlbCA9IHtcbiAgICBvcGVuZWQ6IGZhbHNlLFxuICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgfTtcblxuICAvKipcbiAgICogVGhlIHJlcGx5IGZvcm0uXG4gICAqL1xuICByZXBseUZvcm1Hcm91cCA9IG5ldyBGb3JtR3JvdXAoe1xuICAgIGJvZHk6IG5ldyBGb3JtQ29udHJvbCgpLFxuICAgIGF0dGFjaG1lbnRzOiBuZXcgRm9ybUNvbnRyb2woKSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFRoZSBmb3JtIGxvYWRpbmcgZmxhZy5cbiAgICovXG4gIGZvcm1Mb2FkaW5nID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbnZlcnNhdGlvbklkOiBPYnNlcnZhYmxlPHN0cmluZz4gPSB0aGlzLmdldENvbnZlcnNhdGlvbklkKCk7XG4gIHByb3RlY3RlZCByZWFkb25seSBtYXJrQXNSZWFkVW5yZWFkU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UmVhZFVucmVhZFN0YXR1c1R5cGU+KFJlYWRVbnJlYWRTdGF0dXNUeXBlLlJFQUQpO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgbWFya0FzUmVhZFVucmVhZFN0cmVhbTogT2JzZXJ2YWJsZTxNYXJrQXNSZWFkVW5yZWFkUHV0UmVzcG9uc2VCb2R5IHwgbnVsbD4gPVxuICAgIHRoaXMuZ2V0TWFya0FzUmVhZFVucmVhZFN0cmVhbSgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBhcGlUaHJlYWRTZXJ2aWNlOiBBYnN0cmFjdEJhc2VNZXNzYWdlc0NvbnZlcnNhdGlvblRocmVhZFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2hhcmVkOiBTaGFyZWRNZXRob2RzU2VydmljZSxcbiAgICByZWFkb25seSBjb25maXJtTW9kYWxTZXJ2aWNlOiBNZXNzYWdlc01hbmlwdWxhdGlvbkNvbmZpcm1Nb2RhbFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHVwbG9hZFNlcnZpY2U6IE1lc3NhZ2VzVXBsb2FkQXR0YWNobWVudHNTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBlbmNvZGluZ1NlcnZpY2U6IE1lc3NhZ2VzRW5jb2RpbmdTZXJ2aWNlLFxuICApIHtcbiAgICBzdXBlcihhcGlUaHJlYWRTZXJ2aWNlLCBzaGFyZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnNhdGlvbiBpZCBnZXR0ZXJcbiAgICovXG4gIGdldCBjb252ZXJzYXRpb25JZFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnZlcnNhdGlvbklkJC5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy51bnN1YnNjcmliZS5uZXh0KCk7XG4gICAgdGhpcy51bnN1YnNjcmliZS5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgdG8gc2F2ZSB0aGUgZHJhZnQuXG4gICAqL1xuICBvblNhdmVEcmFmdCgpIHtcbiAgICBpZiAodGhpcy5yZXBseUZvcm1Hcm91cC52YWxpZCkge1xuICAgICAgdGhpcy5zYXZlRHJhZnQodGhpcy5jb252ZXJzYXRpb25JZFZhbHVlID8gdGhpcy5jb252ZXJzYXRpb25JZFZhbHVlIDogJycsIHRoaXMuY29udmVydEZvcm1WYWx1ZSgpKVxuICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSkpXG4gICAgICAgIC5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB0aGF0IGlzIHVzZWQgZm9yIGNvbXBvbmVudCBpbml0aWFsaXphdGlvbiB0byBzdWJzY3JpYmUgZm9yIHRoZSByZWFkLXVucmVhZCBzdGF0dXMgYW5kXG4gICAqIHRvIHRvZ2dsZSB0aGUgcmVwbHkgZm9ybSB1cGRhdGVzLlxuICAgKi9cbiAgaW5pdFN1YnNjcmlwdGlvbnMoKSB7XG4gICAgdGhpcy5tYXJrQXNSZWFkVW5yZWFkU3RyZWFtLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUpKS5zdWJzY3JpYmUoKTtcblxuICAgIHRoaXMuY29uZmlybU1vZGFsU2VydmljZS5lbWl0VG9nZ2xlTW9kYWwkLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUpKS5zdWJzY3JpYmUoKHsgb3BlbmVkLCB0eXBlIH0pID0+IHtcbiAgICAgIHRoaXMuY29uZmlybWF0aW9uTW9kYWwgPSB7IG9wZW5lZCwgdHlwZSB9O1xuXG4gICAgICBpZiAoIW9wZW5lZCAmJiAodHlwZSA9PT0gTWFuaXB1bGF0aW9uVHlwZS5kaXNjYXJkIHx8IHR5cGUgPT09IE1hbmlwdWxhdGlvblR5cGUuZGlzY2FyZERyYWZ0KSkge1xuICAgICAgICB0aGlzLnRvZ2dsZVJlcGx5Rm9ybShmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB0byBuYXZpZ2F0ZSBiYWNrLlxuICAgKi9cbiAgbmF2aWdhdGVCYWNrKCkge1xuICAgIHRoaXMuYmFjay5lbWl0KCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB0byB0b2dnbGUgdGhlIHJlcGx5IGZvcm0uXG4gICAqXG4gICAqIEBwYXJhbSBmbGFnIFRvZ2dsZSBzdGF0dXNcbiAgICovXG4gIHRvZ2dsZVJlcGx5Rm9ybShmbGFnOiBib29sZWFuKSB7XG4gICAgdGhpcy5yZXBseU9wZW5lZCA9IGZsYWc7XG5cbiAgICBpZiAoIWZsYWcpIHtcbiAgICAgIHRoaXMudXBsb2FkU2VydmljZS5yZXNldCh0cnVlKTtcbiAgICAgIHRoaXMucmVwbHlGb3JtR3JvdXAucmVzZXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnJpY2hUZXh0RWRpdG9yICYmIHRoaXMucmljaFRleHRFZGl0b3IubGFiZWxDbGljaygpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB0byBzdWJtaXQgdGhlIHJlcGx5LlxuICAgKi9cbiAgcmVwbHkoKSB7XG4gICAgdGhpcy5yZXBseUZvcm1Hcm91cC5tYXJrQXNEaXJ0eSgpO1xuICAgIHRoaXMucmVwbHlGb3JtR3JvdXAubWFya0FsbEFzVG91Y2hlZCgpO1xuICAgIGlmICh0aGlzLnJlcGx5Rm9ybUdyb3VwLnZhbGlkKSB7XG4gICAgICB0aGlzLnJlcGx5UHJlc3NlZC5uZXh0KHRoaXMuY29udmVydEZvcm1WYWx1ZSgpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB0aGF0IGRlZmluZXMgd2hldGhlciB0aGUgY29udHJvbCBpcyB2YWxpZCBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSBmaWVsZCBGaWVsZCBuYW1lXG4gICAqIEByZXR1cm5zIElzIGZvcm0gZmllbGQgdmFsaWQgZmxhZ1xuICAgKi9cbiAgaXNJbnZhbGlkQ29udHJvbChmaWVsZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMuZ2V0Q29udHJvbChmaWVsZCk7XG5cbiAgICByZXR1cm4gISFjb250cm9sICYmIGNvbnRyb2wudG91Y2hlZCAmJiBjb250cm9sLmludmFsaWQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB0byBnZXQgYW55IGVycm9ycyBnZW5lcmF0ZWQgYnkgZmFpbGluZyB2YWxpZGF0aW9uLCBvciBudWxsIGlmIHRoZXJlIGFyZSBubyBlcnJvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBmaWVsZCBGaWVsZCBuYW1lXG4gICAqIEBwYXJhbSB0eXBlIEVycm9yIHR5cGVcbiAgICovXG4gIGhhc0Vycm9yKGZpZWxkOiBzdHJpbmcsIHR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbnRyb2wgPSB0aGlzLmdldENvbnRyb2woZmllbGQpO1xuXG4gICAgcmV0dXJuIGNvbnRyb2wgJiYgY29udHJvbC5lcnJvcnMgJiYgY29udHJvbC5lcnJvcnNbdHlwZV07XG4gIH1cblxuICBwcml2YXRlIGdldENvbnZlcnNhdGlvbklkKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuY29udmVyc2F0aW9uSWQkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoaWQgPT4ge1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgdGhpcy5lcnJvclJlc3BvbnNlID0gbmV3IFVua25vd25JZEVycm9yKCk7XG5cbiAgICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2YoaWQpO1xuICAgICAgfSksXG4gICAgICBzaGFyZVJlcGxheU9uY2UoKSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRNYXJrQXNSZWFkVW5yZWFkU3RyZWFtKCk6IE9ic2VydmFibGU8TWFya0FzUmVhZFVucmVhZFB1dFJlc3BvbnNlQm9keSB8IG51bGw+IHtcbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChbdGhpcy5tYXJrQXNSZWFkVW5yZWFkU3ViamVjdCwgdGhpcy5jb252ZXJzYXRpb25JZF0pLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKFtzdGF0dXMsIGNvbnZlcnNhdGlvbklkXSkgPT5cbiAgICAgICAgdGhpcy5hcGlUaHJlYWRTZXJ2aWNlLm1hcmtDb252ZXJzYXRpb25zQXNSZWFkVW5yZWFkKHsgc3RhdHVzLCBpZHM6IFtjb252ZXJzYXRpb25JZF0gfSkucGlwZShcbiAgICAgICAgICB0YXAoKCkgPT4gc3RhdHVzID09PSBSZWFkVW5yZWFkU3RhdHVzVHlwZS5VTlJFQUQgJiYgdGhpcy5uYXZpZ2F0ZUJhY2soKSksXG4gICAgICAgICAgY2F0Y2hFcnJvcihlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLnNoYXJlZC5vcGVuTm90aWZpY2F0aW9uKHRoaXMuc2hhcmVkLmdldEVycm9yTWVzc2FnZShlcnJvciksICdlcnJvcicpO1xuXG4gICAgICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICAgICAgfSksXG4gICAgICAgICksXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRGb3JtVmFsdWUoKTogTWVzc2FnZVJlcGx5UG9zdFJlcXVlc3RCb2R5IHtcbiAgICBjb25zdCB7IGJvZHksIGF0dGFjaG1lbnRzIH0gPSB0aGlzLnJlcGx5Rm9ybUdyb3VwLnZhbHVlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGJvZHk6IHRoaXMuZW5jb2RpbmdTZXJ2aWNlLmI2NEVuY29kZShib2R5KSxcbiAgICAgIC4uLihhdHRhY2htZW50cz8ubGVuZ3RoICYmIHsgYXR0YWNobWVudHM6IChhdHRhY2htZW50cyBhcyBNZXRhZGF0YVtdKS5tYXAoaXRlbSA9PiBpdGVtLmlkKSB9KSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb250cm9sKGZpZWxkOiBzdHJpbmcpOiBBYnN0cmFjdENvbnRyb2wgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnJlcGx5Rm9ybUdyb3VwPy5jb250cm9sc1tmaWVsZF07XG4gIH1cbn1cbiJdfQ==