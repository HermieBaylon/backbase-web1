import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ARRANGEMENT_MANAGER_BASE_PATH } from '../variables';
import { ArrangementManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class BalancesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ArrangementManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getAggregations(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contentLanguage = requestParameters["contentLanguage"];
        const _productKindIds = requestParameters["productKindIds"];
        const _externalProductKindIds = requestParameters["externalProductKindIds"];
        const _groupedBy = requestParameters["groupedBy"];
        const _includeTotals = requestParameters["includeTotals"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_productKindIds) {
            _productKindIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'productKindIds');
            });
        }
        if (_externalProductKindIds) {
            _externalProductKindIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'externalProductKindIds');
            });
        }
        if (_groupedBy !== undefined && _groupedBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _groupedBy, 'groupedBy');
        }
        if (_includeTotals !== undefined && _includeTotals !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _includeTotals, 'includeTotals');
        }
        let headers = this.defaultHeaders;
        if (_contentLanguage !== undefined && _contentLanguage !== null) {
            headers = headers.set('Content-Language', String(_contentLanguage));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/balances/aggregations`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAggregationsUrl(requestParameters) {
        const _contentLanguage = requestParameters["contentLanguage"];
        const _productKindIds = requestParameters["productKindIds"];
        const _externalProductKindIds = requestParameters["externalProductKindIds"];
        const _groupedBy = requestParameters["groupedBy"];
        const _includeTotals = requestParameters["includeTotals"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_productKindIds) {
            _productKindIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'productKindIds');
            });
        }
        if (_externalProductKindIds) {
            _externalProductKindIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'externalProductKindIds');
            });
        }
        if (_groupedBy !== undefined && _groupedBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _groupedBy, 'groupedBy');
        }
        if (_includeTotals !== undefined && _includeTotals !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _includeTotals, 'includeTotals');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/balances/aggregations${queryString ? `?${queryString}` : ''}`;
    }
    getFavoriteCurrencies(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/balances/aggregations/favorites/currencies`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getFavoriteCurrenciesUrl() {
        return `${this.configuration.basePath}/client-api/v2/balances/aggregations/favorites/currencies`;
    }
}
BalancesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BalancesHttpService, deps: [{ token: i1.HttpClient }, { token: ARRANGEMENT_MANAGER_BASE_PATH, optional: true }, { token: i2.ArrangementManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BalancesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BalancesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BalancesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ARRANGEMENT_MANAGER_BASE_PATH]
                }] }, { type: i2.ArrangementManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,