import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ARRANGEMENT_MANAGER_BASE_PATH } from '../variables';
import { ArrangementManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class ArrangementViewsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ArrangementManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getArrangementView(requestParameters, observe = 'body', reportProgress = false, options) {
        const _viewName = requestParameters["viewName"];
        if (_viewName === null || _viewName === undefined) {
            throw new Error('Required parameter viewName was null or undefined when calling getArrangementView.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/arrangement-views/${encodeURIComponent(String(_viewName))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getArrangementViewUrl(requestParameters) {
        const _viewName = requestParameters["viewName"];
        if (_viewName === null || _viewName === undefined) {
            throw new Error('Required parameter viewName was null or undefined when calling getArrangementView.');
        }
        return `${this.configuration.basePath}/client-api/v2/arrangement-views/${encodeURIComponent(String(_viewName))}`;
    }
    getArrangementViewGroup(requestParameters, observe = 'body', reportProgress = false, options) {
        const _viewName = requestParameters["viewName"];
        if (_viewName === null || _viewName === undefined) {
            throw new Error('Required parameter viewName was null or undefined when calling getArrangementViewGroup.');
        }
        const _groupName = requestParameters["groupName"];
        if (_groupName === null || _groupName === undefined) {
            throw new Error('Required parameter groupName was null or undefined when calling getArrangementViewGroup.');
        }
        const _cursor = requestParameters["cursor"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, '_cursor');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, '_limit');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/arrangement-views/${encodeURIComponent(String(_viewName))}/groups/${encodeURIComponent(String(_groupName))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getArrangementViewGroupUrl(requestParameters) {
        const _viewName = requestParameters["viewName"];
        if (_viewName === null || _viewName === undefined) {
            throw new Error('Required parameter viewName was null or undefined when calling getArrangementViewGroup.');
        }
        const _groupName = requestParameters["groupName"];
        if (_groupName === null || _groupName === undefined) {
            throw new Error('Required parameter groupName was null or undefined when calling getArrangementViewGroup.');
        }
        const _cursor = requestParameters["cursor"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, '_cursor');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, '_limit');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/arrangement-views/${encodeURIComponent(String(_viewName))}/groups/${encodeURIComponent(String(_groupName))}${queryString ? `?${queryString}` : ''}`;
    }
}
ArrangementViewsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ArrangementViewsHttpService, deps: [{ token: i1.HttpClient }, { token: ARRANGEMENT_MANAGER_BASE_PATH, optional: true }, { token: i2.ArrangementManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ArrangementViewsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ArrangementViewsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ArrangementViewsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ARRANGEMENT_MANAGER_BASE_PATH]
                }] }, { type: i2.ArrangementManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,