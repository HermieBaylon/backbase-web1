import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AccountBalanceHistory } from '../model/models';
import { AccountBalanceHistoryItem } from '../model/models';
import { FilterAccountsRequest } from '../model/models';
import { FilterAccountsResponse } from '../model/models';
import { TimePeriod } from '../model/models';
import { ArrangementManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface FilterAccountsRequestParams {
    ["filterAccountsRequest"]: FilterAccountsRequest;
}
export interface GetBalanceHistoryRequestParams {
    ["arrangementIds"]: string;
    ["accept"]?: string;
    ["dateFrom"]?: string;
    ["dateTo"]?: string;
    ["timePeriod"]?: TimePeriod;
    ["format"]?: 'json' | 'csv';
}
export interface GetBalanceHistoryForArrangementRequestParams {
    ["arrangementId"]: string;
    ["dateFrom"]?: string;
    ["dateTo"]?: string;
    ["timePeriod"]?: TimePeriod;
    ["from"]?: number;
    ["size"]?: number;
    ["cursor"]?: string;
}
export declare class AccountsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ArrangementManagerConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ArrangementManagerConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    filterAccounts(requestParameters: FilterAccountsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<FilterAccountsResponse>>;
    filterAccounts(requestParameters: FilterAccountsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<FilterAccountsResponse>>>;
    filterAccounts(requestParameters: FilterAccountsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<FilterAccountsResponse>>>;
    filterAccountsUrl(requestParameters: FilterAccountsRequestParams): string;
    getBalanceHistory(requestParameters: GetBalanceHistoryRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AccountBalanceHistory>;
    getBalanceHistory(requestParameters: GetBalanceHistoryRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AccountBalanceHistory>>;
    getBalanceHistory(requestParameters: GetBalanceHistoryRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AccountBalanceHistory>>;
    getBalanceHistory(requestParameters: GetBalanceHistoryRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<AccountBalanceHistory>;
    getBalanceHistory(requestParameters: GetBalanceHistoryRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<AccountBalanceHistory>>;
    getBalanceHistory(requestParameters: GetBalanceHistoryRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<AccountBalanceHistory>>;
    getBalanceHistoryUrl(requestParameters: GetBalanceHistoryRequestParams): string;
    getBalanceHistoryForArrangement(requestParameters: GetBalanceHistoryForArrangementRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<AccountBalanceHistoryItem>>;
    getBalanceHistoryForArrangement(requestParameters: GetBalanceHistoryForArrangementRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<AccountBalanceHistoryItem>>>;
    getBalanceHistoryForArrangement(requestParameters: GetBalanceHistoryForArrangementRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<AccountBalanceHistoryItem>>>;
    getBalanceHistoryForArrangement(requestParameters: GetBalanceHistoryForArrangementRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<Array<AccountBalanceHistoryItem>>;
    getBalanceHistoryForArrangement(requestParameters: GetBalanceHistoryForArrangementRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<Array<AccountBalanceHistoryItem>>>;
    getBalanceHistoryForArrangement(requestParameters: GetBalanceHistoryForArrangementRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<Array<AccountBalanceHistoryItem>>>;
    getBalanceHistoryForArrangementUrl(requestParameters: GetBalanceHistoryForArrangementRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AccountsHttpService>;
}
