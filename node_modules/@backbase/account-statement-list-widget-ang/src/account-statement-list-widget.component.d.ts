import { OnDestroy, OnInit } from '@angular/core';
import { AccountItem, Accounts, AccountStatementBaseWidgetComponent, AccountStatementDataService, AccountStatementGetReqParams, FilterParams, LoadingParams, LoadingState, ProccessedAccountStatementsRawData, SortingParams, StateAccounts, StateAccountStatements, StateCategories } from '@backbase/account-statement-common-ang';
import { AccountStatement } from '@backbase/data-ang/account-statements';
import { ProductSummaryItem } from '@backbase/data-ang/arrangements';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { AccountStatementListWidgetPropertiesService } from './services/account-statements-list-widget-properties.service';
import { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import { AccountStatementListWidgetProperties } from './types/account-statement-list-widget-properties';
import * as i0 from "@angular/core";
export declare const DEFAULT_FROM_VALUE = 0;
export declare class AccountStatementListWidgetComponent extends AccountStatementBaseWidgetComponent<AccountStatementListWidgetPropertiesService> implements OnInit, OnDestroy {
    private readonly service;
    /**
     * Flag to show/hide description
     */
    set showDescriptionValue(value: boolean | undefined);
    readonly hostRef: this;
    readonly loadingStates: typeof LoadingState;
    accounts: StateAccounts;
    categories: StateCategories;
    accountStatements: StateAccountStatements;
    private readonly destroy$;
    /**
     * Minimal date for "Date range" filter. Default value is "1970-01-01".
     */
    minimalDate: Observable<NgbDateStruct>;
    /**
     * Maximum date for "Date range" filter. Default value is current date.
     */
    maximumDate: NgbDateStruct;
    readonly selectedAccount: Subject<AccountItem | ProductSummaryItem>;
    readonly sortingParamsNew: BehaviorSubject<{} | SortingParams>;
    readonly sortingParams: Observable<SortingParams>;
    readonly filterParams: BehaviorSubject<FilterParams>;
    readonly loadingParamsNew: BehaviorSubject<LoadingParams>;
    readonly loadingParams: Observable<{
        size: number;
        from: number;
        cursor?: string | undefined;
        dateFrom: Date;
        dateTo: Date;
    }>;
    accountsError?: Error;
    accountsData: Observable<ProductSummaryItem[] | never[]>;
    widgetProperties: AccountStatementListWidgetProperties;
    constructor(service: AccountStatementDataService, propertiesService: AccountStatementListWidgetPropertiesService);
    ngOnInit(): void;
    get pageSize(): Observable<number>;
    get sortingOrder(): Observable<string>;
    get sortingDirection(): Observable<string>;
    get showDescription(): Observable<boolean>;
    get showCategory(): Observable<boolean>;
    get notificationDismissTimeProperty(): Observable<number>;
    setFilterParams(params: FilterParams): void;
    setSortingParams(params: SortingParams): void;
    setLoadingParams(params: LoadingParams): void;
    setPageNumber(page: number): void;
    selectAccount(account: AccountItem | ProductSummaryItem | undefined): void;
    getInitialSelectedAccount: (accounts: Accounts) => AccountItem;
    getAccountStatements(params?: AccountStatementGetReqParams): Observable<ProccessedAccountStatementsRawData>;
    private areFiltersApplied;
    private get initializeMinimalDateFilterLimit();
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountStatementListWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AccountStatementListWidgetComponent, "bb-account-statement-list-widget", never, { "showDescriptionValue": "showDescription"; }, {}, never, never>;
}
export declare class AccountStatementListCustomizableDirective extends BbTemplate<AccountStatementListWidgetComponent, {
    accounts: ProductSummaryItem[];
    accountsError?: Error;
    categories?: string[];
    accountStatements: AccountStatement[];
    selectedAccount: AccountItem | ProductSummaryItem;
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountStatementListCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AccountStatementListCustomizableDirective, "[bbAccountStatementListCustomizable]", never, {}, {}, never>;
}
