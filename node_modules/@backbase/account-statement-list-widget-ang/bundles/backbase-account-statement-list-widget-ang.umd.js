(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@backbase/account-statement-common-ang'), require('@backbase/foundation-ang/core'), require('@ng-bootstrap/ng-bootstrap'), require('rxjs'), require('rxjs/operators'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/dropdown-multi-select'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/date-pipe'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/table'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/list-multiple-select'), require('@backbase/ui-ang/product-item-basic-account'), require('@backbase/ui-ang/product-selector')) :
    typeof define === 'function' && define.amd ? define('@backbase/account-statement-list-widget-ang', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@backbase/account-statement-common-ang', '@backbase/foundation-ang/core', '@ng-bootstrap/ng-bootstrap', 'rxjs', 'rxjs/operators', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/dropdown-multi-select', '@backbase/ui-ang/button', '@backbase/ui-ang/notification', '@backbase/ui-ang/date-pipe', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/table', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/list-multiple-select', '@backbase/ui-ang/product-item-basic-account', '@backbase/ui-ang/product-selector'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["account-statement-list-widget-ang"] = {}), global.ng.common, global.ng.core, global.ng.forms, global.i1, global.i1$1, global.ngBootstrap, global.rxjs, global.rxjs.operators, global.i2, global.i3, global.i4, global.i5, global.i6, global.i7, global.i2$1, global.i4$1, global.i2$2, global.i3$2, global.i6$1, global.dropdownMenu, global.listMultipleSelect, global.productItemBasicAccount, global.productSelector));
})(this, (function (exports, i3$1, i0, i1$2, i1, i1$1, ngBootstrap, rxjs, operators, i2, i3, i4, i5, i6, i7, i2$1, i4$1, i2$2, i3$2, i6$1, dropdownMenu, listMultipleSelect, productItemBasicAccount, productSelector) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /* eslint-disable @typescript-eslint/naming-convention */
    var ListWidgetProperties = {
        SHOW_DESCRIPTION: 'bb.accountStatement.showDescription',
        PAGINATION_TYPE: 'bb.accountStatement.paginationType',
    };

    var AccountStatementListWidgetPropertiesService = /** @class */ (function (_super) {
        __extends(AccountStatementListWidgetPropertiesService, _super);
        function AccountStatementListWidgetPropertiesService(itemModel) {
            var _this = _super.call(this, itemModel) || this;
            _this.showDescription$$ = new rxjs.BehaviorSubject(undefined);
            /* eslint-disable @typescript-eslint/member-ordering */
            _this.showDescription$ = _this.getWidgetProperty$(_this.showDescription$$, _this.showDescriptionIM$);
            _this.widgetProperties$ = rxjs.combineLatest([
                _this.pageSize$,
                _this.sortingOrder$,
                _this.sortingDirection$,
                _this.notificationDismissTime$,
                _this.showCategory$,
                _this.showDescription$,
                _this.relativeDateLimit$,
                _this.absoluteDateLimit$,
                _this.paginationType$,
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 9), pageSize = _c[0], sortingOrder = _c[1], sortingDirection = _c[2], notificationDismissTimeProperty = _c[3], showCategory = _c[4], showDescription = _c[5], relativeDateLimit = _c[6], absoluteDateLimit = _c[7], paginationType = _c[8];
                return ({
                    pageSize: pageSize,
                    sortingOrder: sortingOrder,
                    sortingDirection: sortingDirection,
                    notificationDismissTimeProperty: notificationDismissTimeProperty,
                    showCategory: showCategory,
                    showDescription: showDescription,
                    relativeDateLimit: relativeDateLimit,
                    absoluteDateLimit: absoluteDateLimit,
                    paginationType: paginationType,
                });
            }));
            return _this;
        }
        /* eslint-enable @typescript-eslint/member-ordering */
        AccountStatementListWidgetPropertiesService.prototype.setShowDescription = function (value) {
            this.showDescription$$.next(value);
        };
        AccountStatementListWidgetPropertiesService.prototype.getPaginationTypeIM$ = function () {
            var _a;
            var defaultValue = i1.PaginationType.LoadMore;
            return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(ListWidgetProperties.PAGINATION_TYPE, defaultValue)) || rxjs.of(defaultValue);
        };
        Object.defineProperty(AccountStatementListWidgetPropertiesService.prototype, "showDescriptionIM$", {
            get: function () {
                var _a;
                var defaultValue = true;
                return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(ListWidgetProperties.SHOW_DESCRIPTION, defaultValue).pipe(operators.map(i1.modelItemToBoolean))) ||
                    rxjs.of(defaultValue));
            },
            enumerable: false,
            configurable: true
        });
        return AccountStatementListWidgetPropertiesService;
    }(i1.AccountStatementBasePropertiesService));
    AccountStatementListWidgetPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetPropertiesService, deps: [{ token: i1__namespace.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AccountStatementListWidgetPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var AccountStatementFilterFormComponent = /** @class */ (function () {
        function AccountStatementFilterFormComponent(fb) {
            this.fb = fb;
            /**
             * Array of account statement categories
             */
            this.categories = [];
            /**
             * Whether default category is presented in filter section.
             */
            this.showCategory = true;
            /**
             * Whether filter options applied to all account statement list elements
             */
            this.filtersApplied = false;
            this.filterParams = {};
            /**
             * Emit filter change event
             */
            this.filtersChange = new i0.EventEmitter();
            this.filterForm = this.fb.group({});
            this.hostRef = this;
            this.unsubscribe = new rxjs.Subject();
        }
        AccountStatementFilterFormComponent.prototype.ngOnInit = function () {
            this.createForm();
        };
        AccountStatementFilterFormComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe.next();
            this.unsubscribe.complete();
        };
        AccountStatementFilterFormComponent.prototype.createForm = function () {
            var _a, _b, _c;
            this.filterForm = this.fb.group({
                categories: [((_a = this.filterParams) === null || _a === void 0 ? void 0 : _a.category) || []],
                bookDate: ((_b = this.filterParams) === null || _b === void 0 ? void 0 : _b.dateFrom)
                    ? {
                        from: this.filterParams.dateFrom,
                        to: (_c = this.filterParams) === null || _c === void 0 ? void 0 : _c.dateTo,
                    }
                    : '',
            });
        };
        AccountStatementFilterFormComponent.prototype.resetForm = function () {
            this.filterForm.reset();
            this.filtersChange.emit({});
            this.focusFilterButton();
        };
        AccountStatementFilterFormComponent.prototype.onSubmit = function () {
            var categoriesValue = this.filterForm.controls['categories'].value || [];
            var _d = (this.filterForm && this.filterForm.controls['bookDate'].value) || {}, _e = _d.from, dateFrom = _e === void 0 ? '' : _e, _f = _d.to, dateTo = _f === void 0 ? '' : _f;
            this.filtersChange.emit(Object.assign(Object.assign({ category: categoriesValue }, (dateFrom && {
                dateFrom: dateFrom,
            })), ((dateTo || dateFrom) && {
                dateTo: dateTo || dateFrom,
            })));
            this.filterForm.markAsPristine();
            this.focusFilterButton();
        };
        AccountStatementFilterFormComponent.prototype.focusFilterButton = function () {
            if (this.filterButton) {
                this.filterButton.nativeElement.focus();
            }
        };
        return AccountStatementFilterFormComponent;
    }());
    AccountStatementFilterFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementFilterFormComponent, deps: [{ token: i1__namespace$1.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementFilterFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementFilterFormComponent, selector: "bb-account-statement-filter-form", inputs: { categories: "categories", showCategory: "showCategory", filtersApplied: "filtersApplied", filterParams: "filterParams", minDate: "minDate", maxDate: "maxDate" }, outputs: { filtersChange: "filtersChange" }, viewQueries: [{ propertyName: "filterButton", first: true, predicate: ["filterButton"], descendants: true }], ngImport: i0__namespace, template: "<ng-container bbAccountStatementFilterFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementFilterFormCustomizable let-host>\n  <bb-collapsible-ui>\n    <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\" let-toggle=\"toggle\">\n      <div class=\"card-header bb-button-bar bb-button-bar--reverse\">\n        <button\n          class=\"bb-button-bar__button\"\n          bbButton\n          #filterButton\n          data-role=\"collapsible-filter-btn\"\n          [color]=\"host.filtersApplied && !host.isOpen ? 'primary' : 'secondary'\"\n          [class.active]=\"host.isOpen\"\n          (click)=\"toggle()\"\n        >\n          <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n          <span\n            *ngIf=\"host.filtersApplied && !host.isOpen; else filterButtonTextDefault\"\n            i18n=\"\n              Filters applied|Filter form button filter label@@accountStatement.filter.form.button.filter.applied.label\"\n          >\n            Filters applied\n          </span>\n          <ng-template #filterButtonTextDefault>\n            <span i18n=\"Filter|Filter form button filter label@@accountStatement.filter.form.button.filter.label\">\n              Filter\n            </span>\n          </ng-template>\n        </button>\n      </div>\n    </ng-template>\n\n    <ng-template bbCollapsibleBody let-toggle=\"toggle\">\n      <form\n        data-role=\"filter-form\"\n        class=\"card-body account-statements-filter__form-container\"\n        [formGroup]=\"host.filterForm\"\n      >\n        <div class=\"row\">\n          <div class=\"bb-block bb-block--md col-12 col-sm-6\" *ngIf=\"host.filterForm.controls['bookDate']\">\n            <bb-input-datepicker-ui\n              i18n-label=\"Book date|Filter form book date label@@accountStatement.filter.form.datepicker.label\"\n              label=\"Book date range\"\n              labelClasses=\"form-label\"\n              [rangeSelection]=\"true\"\n              [minDate]=\"hostRef.minDate!\"\n              [maxDate]=\"hostRef.maxDate!\"\n              aria-label=\"Book date\"\n              i18n-aria-label=\"Book date filter aria label@@accountStatement.filter.form.datepicker.aria-label\"\n              [attr.aria-invalid]=\"host.filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n              formControlName=\"bookDate\"\n              data-role=\"book-date\"\n            ></bb-input-datepicker-ui>\n\n            <bb-input-validation-message-ui\n              class=\"account-statements-filter__validation-message\"\n              aria-live=\"polite\"\n              [showErrors]=\"host.filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n            >\n              <span\n                i18n=\"\n                  Error invalid date format in book date\n                  range@@accountStatement.filter.form.datepicker.error.invalidDateFormat\"\n                data-role=\"invalid-book-date-error-message\"\n                >Invalid date format</span\n              >\n            </bb-input-validation-message-ui>\n\n            <bb-input-validation-message-ui\n              class=\"account-statements-filter__validation-message\"\n              aria-live=\"polite\"\n              [showErrors]=\"\n                !host.filterForm.controls['bookDate'].hasError('invalidDateFormat') &&\n                (host.filterForm.controls['bookDate'].hasError('dateGreaterThanMaxDate') ||\n                  host.filterForm.controls['bookDate'].hasError('dateLessThanMinDate'))\n              \"\n            >\n              <span\n                i18n=\"\n                  Selected date range contains invalid dates\n                  range@@accountStatement.filter.form.datepicker.error.dateLessThanMinDate\"\n                data-role=\"invalid-book-date-limit-error-message\"\n                >The selected dates include values outside the allowed date range. Please select a date interval in the\n                permitted time frame.</span\n              >\n            </bb-input-validation-message-ui>\n          </div>\n\n          <ng-container *ngIf=\"host.showCategory\">\n            <bb-dropdown-multi-select-ui\n              *ngIf=\"host.categories?.length\"\n              [formControl]=\"host.filterForm.controls['categories']\"\n              class=\"bb-block bb-block--lg col-12 col-sm-6\"\n              data-role=\"categories-filter\"\n              placeholder=\"Select product category\"\n              i18n-placeholder=\"\n                Category select placeholder|Category multiple\n                select@@accountStatement.filter.form.categories.placeholder\"\n              label=\"Category\"\n              i18n-label=\"Category label|Category multiple select@@accountStatement.filter.form.categories.label\"\n            >\n              <bb-dropdown-multi-select-option-ui\n                *ngFor=\"let option of host.categories\"\n                [label]=\"option\"\n                [value]=\"option\"\n              >\n              </bb-dropdown-multi-select-option-ui>\n            </bb-dropdown-multi-select-ui>\n          </ng-container>\n        </div>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            type=\"submit\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"apply\"\n            [disabled]=\"host.filterForm.pristine || host.filterForm.invalid\"\n            (click)=\"host.onSubmit(); toggle()\"\n            i18n=\"Apply|Filter form button apply label@@accountStatement.filter.form.button.apply.label\"\n          >\n            Apply\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"close\"\n            (click)=\"toggle(); host.focusFilterButton()\"\n            i18n=\"Close|Filter form button close label@@accountStatement.filter.form.button.close.label\"\n          >\n            Close\n          </button>\n          <button\n            bbButton\n            color=\"link\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"clear-all\"\n            *ngIf=\"host.filterForm.dirty || host.filtersApplied\"\n            (click)=\"host.resetForm()\"\n            i18n=\"Clear All|Filter form button clear label@@accountStatement.filter.form.button.clear.label\"\n          >\n            Clear all\n          </button>\n        </div>\n      </form>\n    </ng-template>\n  </bb-collapsible-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountStatementFilterFormCustomizableDirective; }), selector: "[bbAccountStatementFilterFormCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementFilterFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-statement-filter-form',
                        templateUrl: './account-statement-filter-form.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.FormBuilder }]; }, propDecorators: { categories: [{
                    type: i0.Input
                }], showCategory: [{
                    type: i0.Input
                }], filtersApplied: [{
                    type: i0.Input
                }], filterParams: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], filtersChange: [{
                    type: i0.Output
                }], filterButton: [{
                    type: i0.ViewChild,
                    args: ['filterButton']
                }] } });
    var AccountStatementFilterFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementFilterFormCustomizableDirective, _super);
        function AccountStatementFilterFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementFilterFormCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementFilterFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementFilterFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementFilterFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementFilterFormCustomizableDirective, selector: "[bbAccountStatementFilterFormCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementFilterFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[bbAccountStatementFilterFormCustomizable]' }]
            }] });

    var AccountStatementTableRowComponent = /** @class */ (function () {
        function AccountStatementTableRowComponent(dataService, notificationsService) {
            this.dataService = dataService;
            this.notificationsService = notificationsService;
            /**
             * Whether Description content is presented for specific row in the account statement list table
             */
            this.showDescription = true;
            /**
             * Whether Category content is presented for specific row in the account statement list table
             */
            this.showCategory = true;
            /**
             * Time of displaying notification after download failure in milliseconds.
             */
            this.notificationDismissTimeProperty = 0;
            /**
             * Table row id.
             * Used in creating unique ids for preview and download text for a11y
             */
            this.accountStatementTableRowId = AccountStatementTableRowComponent._id++;
            this.mimeTypeExtensions = i1.mimeTypeExtensions;
            this.documentPDFhref = '';
            this.hostRef = this;
        }
        Object.defineProperty(AccountStatementTableRowComponent.prototype, "item", {
            get: function () {
                return this.itemValue;
            },
            /**
             * Setter for each account statement item that will be presented in table row
             */
            set: function (value) {
                var _this = this;
                if (value) {
                    this.documentPDF = value.documents.find(function (document) { return document.contentType === 'application/pdf'; });
                    this.documentPDFhref = (this.documentPDF && this.getDocumentLink(this.documentPDF)) || '';
                    this.itemValue = Object.assign(Object.assign({}, value), { documents: value.documents.map(function (document) { return (Object.assign(Object.assign({}, document), { url: _this.getDocumentLink(document) })); }) });
                }
            },
            enumerable: false,
            configurable: true
        });
        AccountStatementTableRowComponent.prototype.onDownloadFailure = function () {
            this.notificationsService.showNotification({
                header: this.downloadFailureNotificationHeader,
                message: '',
                modifier: 'error',
                ttl: this.notificationDismissTimeProperty,
            });
        };
        AccountStatementTableRowComponent.prototype.getDocumentLink = function (document) {
            return document.url || this.dataService.getAccountStatementDownloadUrl(document.uid || '');
        };
        return AccountStatementTableRowComponent;
    }());
    AccountStatementTableRowComponent._id = 0;
    AccountStatementTableRowComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementTableRowComponent, deps: [{ token: i1__namespace$2.AccountStatementDataService }, { token: i2__namespace$1.NotificationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementTableRowComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableRowComponent, selector: "tr[bb-account-statement-table-row]", inputs: { showDescription: "showDescription", showCategory: "showCategory", notificationDismissTimeProperty: "notificationDismissTimeProperty", item: "item" }, viewQueries: [{ propertyName: "downloadFailureNotificationHeader", first: true, predicate: ["downloadFailureNotificationHeader"], descendants: true }], ngImport: i0__namespace, template: "<ng-container bbAccountStatementTableRowCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementTableRowCustomizable let-host>\n  <div class=\"d-md-none bb-stack bb-stack--align-top\">\n    <td class=\"bb-stack__item\">\n      <div\n        class=\"bb-block bb-block--xs bb-text-semi-bold\"\n        i18n=\"Book date|Account statement table head title@@accountStatement.table.head.date.title\"\n      >\n        Book date\n      </div>\n      <div>{{ host.item.date | bbDate: 'shortDate' }}</div>\n    </td>\n\n    <bb-account-statement-view-online\n      class=\"bb-stack__item bb-stack__item--push-right\"\n      *ngIf=\"host.documentPDF\"\n      [href]=\"host.documentPDFhref\"\n      describedByElementId=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-view-online>\n\n    <bb-account-statement-downloads\n      class=\"bb-stack__item\"\n      [ngClass]=\"{ 'bb-stack__item--push-right': !host.documentPDF }\"\n      [documents]=\"host.item.documents\"\n      [mimeTypeExtensions]=\"host.mimeTypeExtensions\"\n      (downloadFailure)=\"host.onDownloadFailure()\"\n      describedByElementId=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-downloads>\n  </div>\n  <td\n    class=\"d-md-table-cell d-none\"\n    [attr.colspan]=\"host.showCategory || host.showDescription ? null : 3\"\n    data-role=\"date-td\"\n  >\n    {{ host.item.date | bbDate: 'shortDate' }}\n  </td>\n  <!--If showDescription is false, it should colspan up to the description-->\n  <td *ngIf=\"host.showCategory\" [attr.colspan]=\"host.showDescription ? null : 2\" data-role=\"category-td\">\n    <div\n      class=\"bb-block bb-block--xs bb-text-semi-bold d-md-none\"\n      i18n=\"\u0421ategory|Account statement table head title@@accountStatement.table.head.category.title\"\n    >\n      Category\n    </div>\n    <div data-role=\"category-content\">{{ host.item.category }}</div>\n  </td>\n  <!--If showCategory is false, it should colspan including category-->\n  <td *ngIf=\"host.showDescription\" [attr.colspan]=\"host.showCategory ? null : 2\" data-role=\"description-td\">\n    <div\n      class=\"bb-block bb-block--xs bb-text-semi-bold d-md-none\"\n      i18n=\"Description|Account statement table head title@@accountStatement.table.row.description.title\"\n      data-role=\"description-label\"\n    >\n      Description\n    </div>\n    <div data-role=\"description-content\">{{ host.item.description }}</div>\n  </td>\n\n  <td class=\"d-md-table-cell d-none bb-text-align-center\">\n    <span\n      *ngIf=\"host.documentPDF\"\n      id=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n      class=\"sr-only\"\n      i18n=\"Preview for|describing preview text for screen reader@@account-statement-list.preview-button.description\"\n    >\n      Preview for\n      <ng-container *ngTemplateOutlet=\"screenReaderDescription\"></ng-container>\n    </span>\n    <bb-account-statement-view-online\n      *ngIf=\"host.documentPDF\"\n      [href]=\"host.documentPDFhref\"\n      describedByElementId=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-view-online>\n  </td>\n\n  <td class=\"d-md-table-cell d-none bb-text-align-center\">\n    <span\n      i18n=\"Download for|describing download text for screen reader@@account-statement-list.download-button.description\"\n      id=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n      class=\"sr-only\"\n    >\n      {host.item.documents?.length, plural, =1 {Download\n      {{ host.mimeTypeExtensions[host.item.documents[0]?.contentType] }}} other {Show download actions} } for\n      <ng-container *ngTemplateOutlet=\"screenReaderDescription\"></ng-container>\n    </span>\n    <bb-account-statement-downloads\n      [documents]=\"host.item.documents\"\n      [mimeTypeExtensions]=\"host.mimeTypeExtensions\"\n      (downloadFailure)=\"host.onDownloadFailure()\"\n      describedByElementId=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-downloads>\n  </td>\n  <ng-template #screenReaderDescription>\n    <span\n      i18n=\"\n        Category, description and book date for screen reader|describing what text is read by screen reader for download\n        or preview buttons @@account-statement-list.actions.description\"\n    >\n      {host.showCategory.toString(), select, true { 'category ' {{ host.item.category }} }} {(host.showCategory &&\n      host.showDescription).toString(), select, true { 'with description ' {{ host.item.description }} }}\n      {(!host.showCategory && host.showDescription).toString(), select, true { 'description'\n      {{ host.item.description }} }} {(host.showCategory || host.showDescription).toString(), select, true {'and'}} book\n      date {{ host.item.date | bbDate: 'fullDate' }}\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #downloadFailureNotificationHeader>\n  <ng-container bbAccountStatementDownloadFailureNotificationHeaderCustomizable [bbHostRef]=\"this\"> </ng-container>\n\n  <ng-template bbAccountStatementDownloadFailureNotificationHeaderCustomizable>\n    <span i18n=\"Failed to download statement@@account-statement-table-row.error-notification.header\"\n      >The statement cannot be downloaded now, please try again later</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$2.ӨAccountStatementViewOnlineComponent; }), selector: "bb-account-statement-view-online", inputs: ["href", "describedByElementId"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.ӨAccountStatementDownloadsComponent; }), selector: "bb-account-statement-downloads", inputs: ["documents", "mimeTypeExtensions", "describedByElementId", "tooltipPlacement"], outputs: ["downloadFailure"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountStatementTableRowCustomizableDirective; }), selector: "[bbAccountStatementTableRowCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return AccountStatementDownloadFailureNotificationHeaderCustomizableDirective; }), selector: "[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]" }], pipes: { "bbDate": i0__namespace.forwardRef(function () { return i4__namespace$1.BbDatePipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementTableRowComponent, decorators: [{
                type: i0.Component,
                args: [{
                        // eslint-disable-next-line @angular-eslint/component-selector
                        selector: 'tr[bb-account-statement-table-row]',
                        templateUrl: './account-statement-table-row.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.AccountStatementDataService }, { type: i2__namespace$1.NotificationService }]; }, propDecorators: { showDescription: [{
                    type: i0.Input
                }], showCategory: [{
                    type: i0.Input
                }], notificationDismissTimeProperty: [{
                    type: i0.Input
                }], downloadFailureNotificationHeader: [{
                    type: i0.ViewChild,
                    args: ['downloadFailureNotificationHeader']
                }], item: [{
                    type: i0.Input
                }] } });
    var AccountStatementTableRowCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementTableRowCustomizableDirective, _super);
        function AccountStatementTableRowCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementTableRowCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementTableRowCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementTableRowCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementTableRowCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableRowCustomizableDirective, selector: "[bbAccountStatementTableRowCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementTableRowCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[bbAccountStatementTableRowCustomizable]' }]
            }] });
    var AccountStatementDownloadFailureNotificationHeaderCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, _super);
        function AccountStatementDownloadFailureNotificationHeaderCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementDownloadFailureNotificationHeaderCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementDownloadFailureNotificationHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementDownloadFailureNotificationHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, selector: "[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]',
                    }]
            }] });

    var AccountStatementTableComponent = /** @class */ (function () {
        function AccountStatementTableComponent() {
            /**
             * Array of account statements
             */
            this.accountStatements = [];
            /**
             * Whether Description column is presented in the account statement list table
             *
             * @default true
             */
            this.showDescription = true;
            /**
             * Whether Category column is presented in the account statement list table
             *
             * @default true
             */
            this.showCategory = true;
            this.loading = false;
            /**
             * Time after notification for download failure will be dismissed.
             */
            this.notificationDismissTimeProperty = 0;
            /**
             * Emit sorting parameters change event
             */
            this.sortingParamsChange = new i0.EventEmitter();
            this.hostRef = this;
        }
        AccountStatementTableComponent.prototype.onSort = function (params) {
            this.sortingParamsChange.emit({
                direction: params.direction.toUpperCase(),
                orderBy: params.column,
            });
        };
        return AccountStatementTableComponent;
    }());
    AccountStatementTableComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementTableComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementTableComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableComponent, selector: "bb-account-statement-table", inputs: { accountStatements: "accountStatements", showDescription: "showDescription", showCategory: "showCategory", sortingParams: "sortingParams", loading: "loading", notificationDismissTimeProperty: "notificationDismissTimeProperty" }, outputs: { sortingParamsChange: "sortingParamsChange" }, ngImport: i0__namespace, template: "<ng-container bbAccountStatementTableCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementTableCustomizable let-host>\n  <div class=\"table-responsive\">\n    <table\n      class=\"table\"\n      aria-label=\"Account statements table\"\n      i18n-aria-label=\"Aria label for account statements table@@accountStatement.table.aria-label\"\n      [bbTable]=\"accountStatements\"\n      (sort)=\"host.onSort($event)\"\n      bbTableFocus\n    >\n      <colgroup>\n        <col width=\"20%\" />\n        <col width=\"20%\" />\n        <col width=\"40%\" />\n        <col width=\"10%\" />\n        <col width=\"10%\" />\n      </colgroup>\n      <thead>\n        <tr>\n          <th\n            bbSortable=\"date\"\n            [direction]=\"host.sortingParams?.orderBy === 'date' ? (host.sortingParams?.direction | lowercase) : ''\"\n            scope=\"col\"\n            data-role=\"header-date\"\n            [attr.colspan]=\"host.showCategory || host.showDescription ? null : 3\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"Book date|Account statement table head title@@accountStatement.table.head.date.title\"\n              data-role=\"book-date-thead\"\n              >Book date</span\n            >\n          </th>\n          <th\n            *ngIf=\"host.showCategory\"\n            bbSortable=\"category\"\n            [direction]=\"host.sortingParams?.orderBy === 'category' ? (host.sortingParams?.direction | lowercase) : ''\"\n            scope=\"col\"\n            data-role=\"header-category\"\n            [attr.colspan]=\"host.showDescription ? null : 2\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"\u0421ategory|Account statement table head title@@accountStatement.table.head.category.title\"\n              >Category</span\n            >\n          </th>\n          <th\n            *ngIf=\"host.showDescription\"\n            bbSortable=\"description\"\n            [attr.colspan]=\"host.showCategory ? null : 2\"\n            [direction]=\"\n              host.sortingParams?.orderBy === 'description' ? (host.sortingParams?.direction | lowercase) : ''\n            \"\n            scope=\"col\"\n            data-role=\"header-description\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"Description|Account statement table head title@@accountStatement.table.head.description.title\"\n              >Description</span\n            >\n          </th>\n          <th scope=\"col\">\n            <span\n              class=\"th-content\"\n              i18n=\"Preview|Account statement table head title@@account-statement.table.head.preview.title\"\n              data-role=\"preview-thead\"\n              >Preview</span\n            >\n          </th>\n          <th scope=\"col\">\n            <span\n              class=\"th-content\"\n              i18n=\"Download|Account statement table head title@@account-statement.table.head.download.title\"\n              data-role=\"download-thead\"\n              >Download</span\n            >\n          </th>\n        </tr>\n      </thead>\n      <tbody *ngIf=\"!host.loading\">\n        <tr\n          bb-account-statement-table-row\n          [bbRow]=\"accountStatement\"\n          [showCategory]=\"host.showCategory\"\n          [showDescription]=\"host.showDescription\"\n          *ngFor=\"let accountStatement of host.accountStatements\"\n          [item]=\"accountStatement\"\n          [notificationDismissTimeProperty]=\"host.notificationDismissTimeProperty\"\n        ></tr>\n      </tbody>\n    </table>\n\n    <bb-loading-indicator-ui *ngIf=\"host.loading\" loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return AccountStatementTableRowComponent; }), selector: "tr[bb-account-statement-table-row]", inputs: ["showDescription", "showCategory", "notificationDismissTimeProperty", "item"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountStatementTableCustomizableDirective; }), selector: "[bbAccountStatementTableCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i3__namespace$2.TableDirective; }), selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$2.TableFocusDirective; }), selector: "[bbTableFocus]" }, { type: i0__namespace.forwardRef(function () { return i3__namespace$2.TableSortableDirective; }), selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$2.TableRowDirective; }), selector: "tr[bbRow]", inputs: ["bbRow"] }], pipes: { "lowercase": i0__namespace.forwardRef(function () { return i3__namespace$1.LowerCasePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementTableComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-statement-table',
                        templateUrl: './account-statement-table.component.html',
                    }]
            }], propDecorators: { accountStatements: [{
                    type: i0.Input
                }], showDescription: [{
                    type: i0.Input
                }], showCategory: [{
                    type: i0.Input
                }], sortingParams: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], notificationDismissTimeProperty: [{
                    type: i0.Input
                }], sortingParamsChange: [{
                    type: i0.Output
                }] } });
    var AccountStatementTableCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementTableCustomizableDirective, _super);
        function AccountStatementTableCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementTableCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementTableCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementTableCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementTableCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableCustomizableDirective, selector: "[bbAccountStatementTableCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementTableCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[bbAccountStatementTableCustomizable]' }]
            }] });

    var STORAGE_ACCOUNT_SELECTED_KEY = 'bb.product.selected';
    var DEFAULT_FROM_VALUE = 0;
    var AccountStatementListWidgetComponent = /** @class */ (function (_super) {
        __extends(AccountStatementListWidgetComponent, _super);
        function AccountStatementListWidgetComponent(service, propertiesService) {
            var _this = _super.call(this, propertiesService) || this;
            _this.service = service;
            _this.hostRef = _this;
            _this.loadingStates = i1.LoadingState;
            _this.accounts = {
                data: undefined,
                error: false,
            };
            _this.categories = {
                data: undefined,
                error: false,
            };
            _this.accountStatements = {
                data: undefined,
                error: false,
                totalCount: undefined,
                isLoading: i1.LoadingState.IDLE,
                areFiltersApplied: false,
            };
            _this.destroy$ = new rxjs.Subject();
            /* eslint-disable @typescript-eslint/member-ordering */
            /**
             * Minimal date for "Date range" filter. Default value is "1970-01-01".
             */
            _this.minimalDate = _this.initializeMinimalDateFilterLimit;
            /**
             * Maximum date for "Date range" filter. Default value is current date.
             */
            _this.maximumDate = i1.convertDateObjToDateStruct(i1.today());
            _this.selectedAccount = new rxjs.Subject();
            // eslint-disable-next-line @typescript-eslint/ban-types
            _this.sortingParamsNew = new rxjs.BehaviorSubject({});
            _this.sortingParams = rxjs.combineLatest([
                _this.propertiesService.sortingOrder$,
                _this.propertiesService.sortingDirection$,
                _this.sortingParamsNew,
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 3), orderBy = _b[0], direction = _b[1], newParams = _b[2];
                return (Object.assign({ orderBy: orderBy, direction: direction }, newParams));
            }));
            _this.filterParams = new rxjs.BehaviorSubject({});
            _this.loadingParamsNew = new rxjs.BehaviorSubject({
                from: DEFAULT_FROM_VALUE,
            });
            _this.loadingParams = rxjs.combineLatest([
                _this.propertiesService.pageSize$,
                _this.loadingParamsNew,
                _this.minimalDate,
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 3), size = _b[0], newParams = _b[1], minimalDate = _b[2];
                return (Object.assign({ size: size, from: DEFAULT_FROM_VALUE, dateFrom: i1.convertDateStructToDateObj(minimalDate), dateTo: i1.convertDateStructToDateObj(_this.maximumDate) }, newParams));
            }), operators.takeUntil(_this.destroy$));
            _this.accountsError = undefined;
            _this.accountsData = _this.service
                .getAccounts({
                size: i1.ACCOUNTS_REQUEST_ALL_SIZE,
            })
                .pipe(operators.map(function (response) { return response.body; }), operators.tap(function (accounts) {
                _this.selectAccount(accounts[0]);
            }), operators.catchError(function (error) {
                _this.accountsError = error;
                return rxjs.of([]);
            }));
            _this.widgetProperties = {};
            _this.getInitialSelectedAccount = function (accounts) {
                var accountId = window.localStorage.getItem(STORAGE_ACCOUNT_SELECTED_KEY);
                return accounts.find(function (item) { return item.id === accountId; }) || accounts[0];
            };
            _this.accounts.data = _this.service.loadAccounts().pipe(operators.tap(function (accounts) {
                if (accounts && accounts.length) {
                    var initialAccount = _this.getInitialSelectedAccount(accounts);
                    _this.selectAccount(initialAccount);
                }
            }), operators.catchError(function () {
                _this.accounts.error = true;
                return rxjs.of([]);
            }), operators.shareReplay(1));
            var params = rxjs.combineLatest([
                _this.selectedAccount.pipe(operators.map(function (_a) {
                    var id = _a.id;
                    return id;
                }), operators.distinctUntilChanged()),
                _this.loadingParams,
                _this.sortingParams,
                _this.filterParams.pipe(operators.distinctUntilChanged(function (prev, cur) { return i1.simpleArrayCompare(prev.category, cur.category) &&
                    prev.dateFrom === cur.dateFrom &&
                    prev.dateTo === cur.dateTo; }), operators.tap(function (filterParams) { return (_this.accountStatements.areFiltersApplied = _this.areFiltersApplied(filterParams)); })),
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 4), accountId = _b[0], loadingParams = _b[1], sortingParams = _b[2], filterParams = _b[3];
                return (Object.assign(Object.assign(Object.assign({ accountId: accountId }, loadingParams), (sortingParams.direction && Object.assign({}, sortingParams))), filterParams));
            }), operators.distinctUntilChanged(function (prev, cur) {
                if (cur.from === prev.from && cur.from !== DEFAULT_FROM_VALUE) {
                    _this.setLoadingParams({ from: DEFAULT_FROM_VALUE });
                    return true;
                }
                return false;
            }));
            _this.accountStatements.data = params.pipe(operators.startWith({}), operators.pairwise(), operators.tap(function (_a) {
                var _b = __read(_a, 2), oldParams = _b[0], newParams = _b[1];
                _this.accountStatements.isLoading = i1.smartLoadingState(oldParams, Object.assign(Object.assign({}, newParams), { paginationType: _this.widgetProperties.paginationType }));
                _this.accountStatements.error = false;
            }), operators.switchMap(function (_a) {
                var _b = __read(_a, 2), newParams = _b[1];
                return _this.getAccountStatements(newParams).pipe(operators.tap(function (response) { return (_this.accountStatements.totalCount = response && response.totalCount); }), operators.map(function (response) { return [newParams, response && response.data]; }));
            }), operators.scan(function (acc, _a) {
                var _b = __read(_a, 2), reqParams = _b[0], cur = _b[1];
                if (_this.widgetProperties.paginationType === i1.PaginationType.LoadMore &&
                    reqParams.from !== DEFAULT_FROM_VALUE) {
                    return __spreadArray(__spreadArray([], __read(acc)), __read((cur || [])));
                }
                else {
                    return __spreadArray([], __read((cur || [])));
                }
            }, []), operators.tap(function () { return (_this.accountStatements.isLoading = i1.LoadingState.IDLE); }));
            _this.categories.data = _this.showCategory.pipe(operators.filter(Boolean), operators.switchMap(function () { return _this.service.loadCategories().pipe(operators.catchError(function () {
                _this.categories.error = true;
                return rxjs.of([]);
            })); }));
            return _this;
        }
        Object.defineProperty(AccountStatementListWidgetComponent.prototype, "showDescriptionValue", {
            /**
             * Flag to show/hide description
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                this.propertiesService.setShowDescription(value);
            },
            enumerable: false,
            configurable: true
        });
        AccountStatementListWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.propertiesService.widgetProperties$
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (properties) { return (_this.widgetProperties = properties); });
        };
        Object.defineProperty(AccountStatementListWidgetComponent.prototype, "pageSize", {
            // TODO: Merge these getters into one observable subscription that would produce object with all widget properties
            get: function () {
                return this.propertiesService.pageSize$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountStatementListWidgetComponent.prototype, "sortingOrder", {
            get: function () {
                return this.propertiesService.sortingOrder$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountStatementListWidgetComponent.prototype, "sortingDirection", {
            get: function () {
                return this.propertiesService.sortingDirection$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountStatementListWidgetComponent.prototype, "showDescription", {
            get: function () {
                return this.propertiesService.showDescription$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountStatementListWidgetComponent.prototype, "showCategory", {
            get: function () {
                return this.propertiesService.showCategory$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountStatementListWidgetComponent.prototype, "notificationDismissTimeProperty", {
            get: function () {
                return this.propertiesService.notificationDismissTime$;
            },
            enumerable: false,
            configurable: true
        });
        AccountStatementListWidgetComponent.prototype.setFilterParams = function (params) {
            this.filterParams.next(params);
        };
        AccountStatementListWidgetComponent.prototype.setSortingParams = function (params) {
            this.sortingParamsNew.next(params);
        };
        AccountStatementListWidgetComponent.prototype.setLoadingParams = function (params) {
            this.loadingParamsNew.next(Object.assign({}, params));
        };
        AccountStatementListWidgetComponent.prototype.setPageNumber = function (page) {
            this.loadingParamsNew.next(Object.assign(Object.assign({}, this.loadingParamsNew.getValue()), { from: page }));
        };
        AccountStatementListWidgetComponent.prototype.selectAccount = function (account) {
            this.selectedAccount.next(account);
        };
        AccountStatementListWidgetComponent.prototype.getAccountStatements = function (params) {
            var _this = this;
            if (params === void 0) { params = {}; }
            return this.service.loadAccountStatements(params).pipe(operators.catchError(function () {
                _this.accountStatements.error = true;
                return rxjs.of({ data: [], totalCount: 0 });
            }));
        };
        AccountStatementListWidgetComponent.prototype.areFiltersApplied = function (filterParams) {
            var areCategoriesApplied = !!filterParams.category && filterParams.category.length !== 0;
            var isBookDateApplied = !!filterParams.dateFrom && !!filterParams.dateTo;
            return areCategoriesApplied || isBookDateApplied;
        };
        Object.defineProperty(AccountStatementListWidgetComponent.prototype, "initializeMinimalDateFilterLimit", {
            get: function () {
                return rxjs.combineLatest([
                    this.propertiesService.absoluteDateLimit$.pipe(operators.takeUntil(this.destroy$)),
                    this.propertiesService.relativeDateLimit$.pipe(operators.takeUntil(this.destroy$)),
                ]).pipe(operators.map(function (_a) {
                    var _b = __read(_a, 2), absoluteDateLimit = _b[0], relativeMonthLimit = _b[1];
                    // this sets default value to the first millisecond of Unix date
                    var limitDate = i1.getDateFilterLimit(absoluteDateLimit, relativeMonthLimit);
                    return i1.convertDateObjToDateStruct(limitDate);
                }));
            },
            enumerable: false,
            configurable: true
        });
        AccountStatementListWidgetComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
        };
        return AccountStatementListWidgetComponent;
    }(i1.AccountStatementBaseWidgetComponent));
    AccountStatementListWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetComponent, deps: [{ token: i1__namespace$2.AccountStatementDataService }, { token: AccountStatementListWidgetPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementListWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementListWidgetComponent, selector: "bb-account-statement-list-widget", inputs: { showDescriptionValue: ["showDescription", "showDescriptionValue"] }, providers: [AccountStatementListWidgetPropertiesService], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  bbAccountStatementListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    accounts: (accountsData | async)!,\n    accountsError: accountsError,\n    categories: (categories.data | async)!,\n    accountStatements: (accountStatements.data | async)!,\n    selectedAccount: (selectedAccount | async)!\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementListCustomizable\n  let-host\n  let-accounts=\"context.accounts\"\n  let-accountsError=\"context.accountsError\"\n  let-categories=\"context.categories\"\n  let-selectedAccount=\"context.selectedAccount\"\n  let-accountStatements=\"context.accountStatements\"\n>\n  <div aria-live=\"polite\">\n    <ng-container *ngIf=\"accounts; else loadingState\">\n      <ng-container *ngIf=\"!accountsError; else errorStateAccounts\">\n        <ng-container *ngIf=\"accounts.length; else emptyStateAccounts\">\n          <div class=\"bb-block bb-block--xl\">\n            <bb-account-statement-account-selector\n              [accounts]=\"accounts\"\n              (accountSelect)=\"host.selectAccount($event)\"\n            ></bb-account-statement-account-selector>\n          </div>\n\n          <div class=\"card\">\n            <ng-container\n              *ngIf=\"\n                accountStatements && host.accountStatements.isLoading !== host.loadingStates.LOADING;\n                else loadingState\n              \"\n            >\n              <ng-container *ngIf=\"!host.accountStatements.error; else errorStateAccountStatements\">\n                <ng-container\n                  *ngIf=\"\n                    accountStatements.length ||\n                      host.accountStatements.areFiltersApplied ||\n                      host.accountStatements.isLoading === host.loadingStates.LOADING_FILTERED;\n                    else emptyStateAccountStatements\n                  \"\n                >\n                  <bb-account-statement-filter-form\n                    [categories]=\"categories\"\n                    [filtersApplied]=\"host.accountStatements.areFiltersApplied\"\n                    [filterParams]=\"(host.filterParams | async)!\"\n                    (filtersChange)=\"host.setFilterParams($event)\"\n                    [showCategory]=\"host.showCategory | async\"\n                    [minDate]=\"(host.minimalDate | async)!\"\n                    [maxDate]=\"host.maximumDate\"\n                  ></bb-account-statement-filter-form>\n\n                  <ng-container\n                    *ngIf=\"host.accountStatements.isLoading !== host.loadingStates.LOADING_FILTERED; else loadingState\"\n                  >\n                    <ng-container *ngIf=\"accountStatements.length; else emptyStateAccountStatementsFiltered\">\n                      <bb-account-statement-table\n                        class=\"bb-block card-section\"\n                        [accountStatements]=\"accountStatements\"\n                        [showCategory]=\"(host.showCategory | async)!\"\n                        [showDescription]=\"(host.showDescription | async)!\"\n                        [sortingParams]=\"host.sortingParams | async\"\n                        [notificationDismissTimeProperty]=\"(host.notificationDismissTimeProperty | async)!\"\n                        [loading]=\"host.accountStatements.isLoading === host.loadingStates.LOADING_TABLE\"\n                        (sortingParamsChange)=\"host.setSortingParams($event)\"\n                      ></bb-account-statement-table>\n                      <!--Temporary add $any. Remove it once we remove the extension slots-->\n                      <bb-account-statement-pagination\n                        [paginationType]=\"host.widgetProperties.paginationType\"\n                        [loading]=\"host.accountStatements.isLoading === host.loadingStates.LOADING_MORE\"\n                        [itemsPerPage]=\"host.widgetProperties.pageSize\"\n                        [page]=\"$any(host.loadingParams | async).from\"\n                        [count]=\"host.accountStatements?.totalCount\"\n                        [hasMore]=\"accountStatements.length !== host.accountStatements?.totalCount\"\n                        (loadMore)=\"host.setPageNumber($event)\"\n                        (pageChange)=\"host.setPageNumber($event)\"\n                      >\n                      </bb-account-statement-pagination>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui\n      loaderSize=\"md\"\n      i18n-text=\"Loading data...|Loading title@@accountStatement.loading.title\"\n      text=\"Loading data...\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #emptyStateAccounts>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        iconSize=\"xxl\"\n        iconModifier=\"current-accounts\"\n        i18n-title=\"No Account selected|Accounts state title theme two@@accountStatement.accounts.state.title.theme.two\"\n        title=\"No account selected\"\n        i18n-subtitle=\"\n          You need to select account in order to view account statements|Accounts state subtitle theme\n          two@@accountStatement.accounts.state.subtitle.theme.two\"\n        subtitle=\"You need to select account in order to view account statements\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorStateAccounts>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        data-role=\"accounts-error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Account list error state subtitle@@accountStatement.account-list.error-state.subtitle\"\n        title=\"Account list is not loading\"\n        i18n-title=\"Account list is not loading error state title@@accountStatement.account-list.error-state.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyStateAccountStatements>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"description\"\n      i18n-title=\"\n        No Account Statements found|Account statements state title theme\n        two@@accountStatement.statements.state.title.theme2\"\n      title=\"No Account Statements for selected account\"\n      i18n-subtitle=\"\n        You don't have any account statements to be displayed for this account|Account statements state subtitle theme\n        two@@accountStatement.statements.state.subtitle.theme2\"\n      subtitle=\"You don't have any account statements to be displayed for this account\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #emptyStateAccountStatementsFiltered>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"search\"\n      i18n-title=\"\n        No Results Found|Account statements filtered state title@@accountStatement.statements.filtered.state.title\"\n      title=\"No Results Found\"\n      i18n-subtitle=\"\n        We can\u2019t find what you\u2019re looking for. Please try a different criteria.|Account statements filtered state\n        subtitle@@accountStatement.statements.filtered.state.subtitle\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #errorStateAccountStatements>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      data-role=\"account-statements-error-state\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      i18n-subtitle=\"Account statements list error state subtitle@@accountStatement.statement-list.error-state.subtitle\"\n      title=\"Account statement list is not loading\"\n      i18n-title=\"\n        Account statement list is not loading error state title@@accountStatement.statement-list.error-state.title\"\n    >\n    </bb-empty-state-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$2.ӨAccountStatementAccountSelectorComponent; }), selector: "bb-account-statement-account-selector", inputs: ["accounts"], outputs: ["accountSelect"] }, { type: i0__namespace.forwardRef(function () { return AccountStatementFilterFormComponent; }), selector: "bb-account-statement-filter-form", inputs: ["categories", "showCategory", "filtersApplied", "filterParams", "minDate", "maxDate"], outputs: ["filtersChange"] }, { type: i0__namespace.forwardRef(function () { return AccountStatementTableComponent; }), selector: "bb-account-statement-table", inputs: ["accountStatements", "showDescription", "showCategory", "sortingParams", "loading", "notificationDismissTimeProperty"], outputs: ["sortingParamsChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.ӨAccountStatementPaginationComponent; }), selector: "bb-account-statement-pagination", inputs: ["page", "from", "count", "itemsPerPage", "paginationType", "hasMore", "loading"], outputs: ["pageChange", "loadMore"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountStatementListCustomizableDirective; }), selector: "[bbAccountStatementListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i3__namespace$1.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-statement-list-widget',
                        templateUrl: './account-statement-list-widget.component.html',
                        providers: [AccountStatementListWidgetPropertiesService],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.AccountStatementDataService }, { type: AccountStatementListWidgetPropertiesService }]; }, propDecorators: { showDescriptionValue: [{
                    type: i0.Input,
                    args: ['showDescription']
                }] } });
    var AccountStatementListCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementListCustomizableDirective, _super);
        function AccountStatementListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementListCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementListCustomizableDirective, selector: "[bbAccountStatementListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountStatementListCustomizable]',
                    }]
            }] });

    var components = [
        AccountStatementListWidgetComponent,
        AccountStatementFilterFormComponent,
        AccountStatementTableComponent,
        AccountStatementTableRowComponent,
    ];
    var directives = [
        AccountStatementListCustomizableDirective,
        AccountStatementFilterFormCustomizableDirective,
        AccountStatementTableCustomizableDirective,
        AccountStatementTableRowCustomizableDirective,
        AccountStatementDownloadFailureNotificationHeaderCustomizableDirective,
    ];
    var uiModules = [
        ngBootstrap.NgbDropdownModule,
        i7.ButtonModule,
        i2.CollapsibleModule,
        dropdownMenu.DropdownMenuModule,
        i6$1.EmptyStateModule,
        i3.IconModule,
        i4.InputDatepickerModule,
        i5.InputValidationMessageModule,
        listMultipleSelect.ListMultipleSelectModule,
        i2$2.LoadingIndicatorModule,
        productItemBasicAccount.ProductItemBasicAccountModule,
        productSelector.ProductSelectorModule,
        i6.DropdownMultiSelectModule,
        i3$2.TableModule,
        i2$1.NotificationModule,
        i4$1.BbDatePipeModule,
    ];
    var AccountStatementListWidgetModule = /** @class */ (function () {
        function AccountStatementListWidgetModule() {
        }
        return AccountStatementListWidgetModule;
    }());
    AccountStatementListWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AccountStatementListWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetModule, declarations: [AccountStatementListWidgetComponent,
            AccountStatementFilterFormComponent,
            AccountStatementTableComponent,
            AccountStatementTableRowComponent, AccountStatementListCustomizableDirective,
            AccountStatementFilterFormCustomizableDirective,
            AccountStatementTableCustomizableDirective,
            AccountStatementTableRowCustomizableDirective,
            AccountStatementDownloadFailureNotificationHeaderCustomizableDirective], imports: [i3$1.CommonModule,
            i1$2.FormsModule,
            i1$2.ReactiveFormsModule,
            i1.AccountStatementCommonModule, i1__namespace.BackbaseCoreModule, ngBootstrap.NgbDropdownModule,
            i7.ButtonModule,
            i2.CollapsibleModule,
            dropdownMenu.DropdownMenuModule,
            i6$1.EmptyStateModule,
            i3.IconModule,
            i4.InputDatepickerModule,
            i5.InputValidationMessageModule,
            listMultipleSelect.ListMultipleSelectModule,
            i2$2.LoadingIndicatorModule,
            productItemBasicAccount.ProductItemBasicAccountModule,
            productSelector.ProductSelectorModule,
            i6.DropdownMultiSelectModule,
            i3$2.TableModule,
            i2$1.NotificationModule,
            i4$1.BbDatePipeModule], exports: [i1.AccountStatementCommonModule, AccountStatementListWidgetComponent,
            AccountStatementFilterFormComponent,
            AccountStatementTableComponent,
            AccountStatementTableRowComponent, AccountStatementListCustomizableDirective,
            AccountStatementFilterFormCustomizableDirective,
            AccountStatementTableCustomizableDirective,
            AccountStatementTableRowCustomizableDirective,
            AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, ngBootstrap.NgbDropdownModule,
            i7.ButtonModule,
            i2.CollapsibleModule,
            dropdownMenu.DropdownMenuModule,
            i6$1.EmptyStateModule,
            i3.IconModule,
            i4.InputDatepickerModule,
            i5.InputValidationMessageModule,
            listMultipleSelect.ListMultipleSelectModule,
            i2$2.LoadingIndicatorModule,
            productItemBasicAccount.ProductItemBasicAccountModule,
            productSelector.ProductSelectorModule,
            i6.DropdownMultiSelectModule,
            i3$2.TableModule,
            i2$1.NotificationModule,
            i4$1.BbDatePipeModule] });
    AccountStatementListWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetModule, imports: [__spreadArray([
                i3$1.CommonModule,
                i1$2.FormsModule,
                i1$2.ReactiveFormsModule,
                i1.AccountStatementCommonModule,
                i1$1.BackbaseCoreModule.withConfig({
                    // eslint-disable-next-line @typescript-eslint/naming-convention
                    classMap: { AccountStatementListWidgetComponent: AccountStatementListWidgetComponent },
                })
            ], __read(uiModules)), i1.AccountStatementCommonModule, ngBootstrap.NgbDropdownModule,
            i7.ButtonModule,
            i2.CollapsibleModule,
            dropdownMenu.DropdownMenuModule,
            i6$1.EmptyStateModule,
            i3.IconModule,
            i4.InputDatepickerModule,
            i5.InputValidationMessageModule,
            listMultipleSelect.ListMultipleSelectModule,
            i2$2.LoadingIndicatorModule,
            productItemBasicAccount.ProductItemBasicAccountModule,
            productSelector.ProductSelectorModule,
            i6.DropdownMultiSelectModule,
            i3$2.TableModule,
            i2$1.NotificationModule,
            i4$1.BbDatePipeModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementListWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        imports: __spreadArray([
                            i3$1.CommonModule,
                            i1$2.FormsModule,
                            i1$2.ReactiveFormsModule,
                            i1.AccountStatementCommonModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                // eslint-disable-next-line @typescript-eslint/naming-convention
                                classMap: { AccountStatementListWidgetComponent: AccountStatementListWidgetComponent },
                            })
                        ], __read(uiModules)),
                        exports: __spreadArray(__spreadArray(__spreadArray([i1.AccountStatementCommonModule], __read(components)), __read(directives)), __read(uiModules)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccountStatementDownloadFailureNotificationHeaderCustomizableDirective = AccountStatementDownloadFailureNotificationHeaderCustomizableDirective;
    exports.AccountStatementFilterFormComponent = AccountStatementFilterFormComponent;
    exports.AccountStatementFilterFormCustomizableDirective = AccountStatementFilterFormCustomizableDirective;
    exports.AccountStatementListWidgetComponent = AccountStatementListWidgetComponent;
    exports.AccountStatementListWidgetModule = AccountStatementListWidgetModule;
    exports.AccountStatementListWidgetPropertiesService = AccountStatementListWidgetPropertiesService;
    exports.AccountStatementTableComponent = AccountStatementTableComponent;
    exports.AccountStatementTableCustomizableDirective = AccountStatementTableCustomizableDirective;
    exports.AccountStatementTableRowComponent = AccountStatementTableRowComponent;
    exports.AccountStatementTableRowCustomizableDirective = AccountStatementTableRowCustomizableDirective;
    exports["ӨAccountStatementListCustomizableDirective"] = AccountStatementListCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-account-statement-list-widget-ang.umd.js.map
