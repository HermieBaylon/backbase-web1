import { Component, Directive, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/collapsible";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "@backbase/ui-ang/input-datepicker";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@backbase/ui-ang/dropdown-multi-select";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@angular/common";
export class AccountStatementFilterFormComponent {
    constructor(fb) {
        this.fb = fb;
        /**
         * Array of account statement categories
         */
        this.categories = [];
        /**
         * Whether default category is presented in filter section.
         */
        this.showCategory = true;
        /**
         * Whether filter options applied to all account statement list elements
         */
        this.filtersApplied = false;
        this.filterParams = {};
        /**
         * Emit filter change event
         */
        this.filtersChange = new EventEmitter();
        this.filterForm = this.fb.group({});
        this.hostRef = this;
        this.unsubscribe = new Subject();
    }
    ngOnInit() {
        this.createForm();
    }
    ngOnDestroy() {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    createForm() {
        var _a, _b, _c;
        this.filterForm = this.fb.group({
            categories: [((_a = this.filterParams) === null || _a === void 0 ? void 0 : _a.category) || []],
            bookDate: ((_b = this.filterParams) === null || _b === void 0 ? void 0 : _b.dateFrom)
                ? {
                    from: this.filterParams.dateFrom,
                    to: (_c = this.filterParams) === null || _c === void 0 ? void 0 : _c.dateTo,
                }
                : '',
        });
    }
    resetForm() {
        this.filterForm.reset();
        this.filtersChange.emit({});
        this.focusFilterButton();
    }
    onSubmit() {
        const categoriesValue = this.filterForm.controls['categories'].value || [];
        const { from: dateFrom = '', to: dateTo = '' } = (this.filterForm && this.filterForm.controls['bookDate'].value) || {};
        this.filtersChange.emit(Object.assign(Object.assign({ category: categoriesValue }, (dateFrom && {
            dateFrom,
        })), ((dateTo || dateFrom) && {
            dateTo: dateTo || dateFrom,
        })));
        this.filterForm.markAsPristine();
        this.focusFilterButton();
    }
    focusFilterButton() {
        if (this.filterButton) {
            this.filterButton.nativeElement.focus();
        }
    }
}
AccountStatementFilterFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementFilterFormComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementFilterFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementFilterFormComponent, selector: "bb-account-statement-filter-form", inputs: { categories: "categories", showCategory: "showCategory", filtersApplied: "filtersApplied", filterParams: "filterParams", minDate: "minDate", maxDate: "maxDate" }, outputs: { filtersChange: "filtersChange" }, viewQueries: [{ propertyName: "filterButton", first: true, predicate: ["filterButton"], descendants: true }], ngImport: i0, template: "<ng-container bbAccountStatementFilterFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementFilterFormCustomizable let-host>\n  <bb-collapsible-ui>\n    <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\" let-toggle=\"toggle\">\n      <div class=\"card-header bb-button-bar bb-button-bar--reverse\">\n        <button\n          class=\"bb-button-bar__button\"\n          bbButton\n          #filterButton\n          data-role=\"collapsible-filter-btn\"\n          [color]=\"host.filtersApplied && !host.isOpen ? 'primary' : 'secondary'\"\n          [class.active]=\"host.isOpen\"\n          (click)=\"toggle()\"\n        >\n          <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n          <span\n            *ngIf=\"host.filtersApplied && !host.isOpen; else filterButtonTextDefault\"\n            i18n=\"\n              Filters applied|Filter form button filter label@@accountStatement.filter.form.button.filter.applied.label\"\n          >\n            Filters applied\n          </span>\n          <ng-template #filterButtonTextDefault>\n            <span i18n=\"Filter|Filter form button filter label@@accountStatement.filter.form.button.filter.label\">\n              Filter\n            </span>\n          </ng-template>\n        </button>\n      </div>\n    </ng-template>\n\n    <ng-template bbCollapsibleBody let-toggle=\"toggle\">\n      <form\n        data-role=\"filter-form\"\n        class=\"card-body account-statements-filter__form-container\"\n        [formGroup]=\"host.filterForm\"\n      >\n        <div class=\"row\">\n          <div class=\"bb-block bb-block--md col-12 col-sm-6\" *ngIf=\"host.filterForm.controls['bookDate']\">\n            <bb-input-datepicker-ui\n              i18n-label=\"Book date|Filter form book date label@@accountStatement.filter.form.datepicker.label\"\n              label=\"Book date range\"\n              labelClasses=\"form-label\"\n              [rangeSelection]=\"true\"\n              [minDate]=\"hostRef.minDate!\"\n              [maxDate]=\"hostRef.maxDate!\"\n              aria-label=\"Book date\"\n              i18n-aria-label=\"Book date filter aria label@@accountStatement.filter.form.datepicker.aria-label\"\n              [attr.aria-invalid]=\"host.filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n              formControlName=\"bookDate\"\n              data-role=\"book-date\"\n            ></bb-input-datepicker-ui>\n\n            <bb-input-validation-message-ui\n              class=\"account-statements-filter__validation-message\"\n              aria-live=\"polite\"\n              [showErrors]=\"host.filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n            >\n              <span\n                i18n=\"\n                  Error invalid date format in book date\n                  range@@accountStatement.filter.form.datepicker.error.invalidDateFormat\"\n                data-role=\"invalid-book-date-error-message\"\n                >Invalid date format</span\n              >\n            </bb-input-validation-message-ui>\n\n            <bb-input-validation-message-ui\n              class=\"account-statements-filter__validation-message\"\n              aria-live=\"polite\"\n              [showErrors]=\"\n                !host.filterForm.controls['bookDate'].hasError('invalidDateFormat') &&\n                (host.filterForm.controls['bookDate'].hasError('dateGreaterThanMaxDate') ||\n                  host.filterForm.controls['bookDate'].hasError('dateLessThanMinDate'))\n              \"\n            >\n              <span\n                i18n=\"\n                  Selected date range contains invalid dates\n                  range@@accountStatement.filter.form.datepicker.error.dateLessThanMinDate\"\n                data-role=\"invalid-book-date-limit-error-message\"\n                >The selected dates include values outside the allowed date range. Please select a date interval in the\n                permitted time frame.</span\n              >\n            </bb-input-validation-message-ui>\n          </div>\n\n          <ng-container *ngIf=\"host.showCategory\">\n            <bb-dropdown-multi-select-ui\n              *ngIf=\"host.categories?.length\"\n              [formControl]=\"host.filterForm.controls['categories']\"\n              class=\"bb-block bb-block--lg col-12 col-sm-6\"\n              data-role=\"categories-filter\"\n              placeholder=\"Select product category\"\n              i18n-placeholder=\"\n                Category select placeholder|Category multiple\n                select@@accountStatement.filter.form.categories.placeholder\"\n              label=\"Category\"\n              i18n-label=\"Category label|Category multiple select@@accountStatement.filter.form.categories.label\"\n            >\n              <bb-dropdown-multi-select-option-ui\n                *ngFor=\"let option of host.categories\"\n                [label]=\"option\"\n                [value]=\"option\"\n              >\n              </bb-dropdown-multi-select-option-ui>\n            </bb-dropdown-multi-select-ui>\n          </ng-container>\n        </div>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            type=\"submit\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"apply\"\n            [disabled]=\"host.filterForm.pristine || host.filterForm.invalid\"\n            (click)=\"host.onSubmit(); toggle()\"\n            i18n=\"Apply|Filter form button apply label@@accountStatement.filter.form.button.apply.label\"\n          >\n            Apply\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"close\"\n            (click)=\"toggle(); host.focusFilterButton()\"\n            i18n=\"Close|Filter form button close label@@accountStatement.filter.form.button.close.label\"\n          >\n            Close\n          </button>\n          <button\n            bbButton\n            color=\"link\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"clear-all\"\n            *ngIf=\"host.filterForm.dirty || host.filtersApplied\"\n            (click)=\"host.resetForm()\"\n            i18n=\"Clear All|Filter form button clear label@@accountStatement.filter.form.button.clear.label\"\n          >\n            Clear all\n          </button>\n        </div>\n      </form>\n    </ng-template>\n  </bb-collapsible-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0.forwardRef(function () { return i3.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i4.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i5.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i6.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0.forwardRef(function () { return i6.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementFilterFormCustomizableDirective; }), selector: "[bbAccountStatementFilterFormCustomizable]" }, { type: i0.forwardRef(function () { return i2.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i4.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0.forwardRef(function () { return i4.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementFilterFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-filter-form',
                    templateUrl: './account-statement-filter-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { categories: [{
                type: Input
            }], showCategory: [{
                type: Input
            }], filtersApplied: [{
                type: Input
            }], filterParams: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], filtersChange: [{
                type: Output
            }], filterButton: [{
                type: ViewChild,
                args: ['filterButton']
            }] } });
export class AccountStatementFilterFormCustomizableDirective extends BbTemplate {
}
AccountStatementFilterFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementFilterFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementFilterFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementFilterFormCustomizableDirective, selector: "[bbAccountStatementFilterFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementFilterFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementFilterFormCustomizable]' }]
        }] });
//# sourceMappingURL=data:application/json;base64,