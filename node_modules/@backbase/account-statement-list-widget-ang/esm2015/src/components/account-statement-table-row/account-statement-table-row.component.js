import { ChangeDetectionStrategy, Component, Directive, Input, ViewChild } from '@angular/core';
import { mimeTypeExtensions, } from '@backbase/account-statement-common-ang';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/account-statement-common-ang";
import * as i2 from "@backbase/ui-ang/notification";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/ui-ang/date-pipe";
export class AccountStatementTableRowComponent {
    constructor(dataService, notificationsService) {
        this.dataService = dataService;
        this.notificationsService = notificationsService;
        /**
         * Whether Description content is presented for specific row in the account statement list table
         */
        this.showDescription = true;
        /**
         * Whether Category content is presented for specific row in the account statement list table
         */
        this.showCategory = true;
        /**
         * Time of displaying notification after download failure in milliseconds.
         */
        this.notificationDismissTimeProperty = 0;
        /**
         * Table row id.
         * Used in creating unique ids for preview and download text for a11y
         */
        this.accountStatementTableRowId = AccountStatementTableRowComponent._id++;
        this.mimeTypeExtensions = mimeTypeExtensions;
        this.documentPDFhref = '';
        this.hostRef = this;
    }
    /**
     * Setter for each account statement item that will be presented in table row
     */
    set item(value) {
        if (value) {
            this.documentPDF = value.documents.find(document => document.contentType === 'application/pdf');
            this.documentPDFhref = (this.documentPDF && this.getDocumentLink(this.documentPDF)) || '';
            this.itemValue = Object.assign(Object.assign({}, value), { documents: value.documents.map(document => (Object.assign(Object.assign({}, document), { url: this.getDocumentLink(document) }))) });
        }
    }
    get item() {
        return this.itemValue;
    }
    onDownloadFailure() {
        this.notificationsService.showNotification({
            header: this.downloadFailureNotificationHeader,
            message: '',
            modifier: 'error',
            ttl: this.notificationDismissTimeProperty,
        });
    }
    getDocumentLink(document) {
        return document.url || this.dataService.getAccountStatementDownloadUrl(document.uid || '');
    }
}
AccountStatementTableRowComponent._id = 0;
AccountStatementTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableRowComponent, deps: [{ token: i1.AccountStatementDataService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableRowComponent, selector: "tr[bb-account-statement-table-row]", inputs: { showDescription: "showDescription", showCategory: "showCategory", notificationDismissTimeProperty: "notificationDismissTimeProperty", item: "item" }, viewQueries: [{ propertyName: "downloadFailureNotificationHeader", first: true, predicate: ["downloadFailureNotificationHeader"], descendants: true }], ngImport: i0, template: "<ng-container bbAccountStatementTableRowCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementTableRowCustomizable let-host>\n  <div class=\"d-md-none bb-stack bb-stack--align-top\">\n    <td class=\"bb-stack__item\">\n      <div\n        class=\"bb-block bb-block--xs bb-text-semi-bold\"\n        i18n=\"Book date|Account statement table head title@@accountStatement.table.head.date.title\"\n      >\n        Book date\n      </div>\n      <div>{{ host.item.date | bbDate: 'shortDate' }}</div>\n    </td>\n\n    <bb-account-statement-view-online\n      class=\"bb-stack__item bb-stack__item--push-right\"\n      *ngIf=\"host.documentPDF\"\n      [href]=\"host.documentPDFhref\"\n      describedByElementId=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-view-online>\n\n    <bb-account-statement-downloads\n      class=\"bb-stack__item\"\n      [ngClass]=\"{ 'bb-stack__item--push-right': !host.documentPDF }\"\n      [documents]=\"host.item.documents\"\n      [mimeTypeExtensions]=\"host.mimeTypeExtensions\"\n      (downloadFailure)=\"host.onDownloadFailure()\"\n      describedByElementId=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-downloads>\n  </div>\n  <td\n    class=\"d-md-table-cell d-none\"\n    [attr.colspan]=\"host.showCategory || host.showDescription ? null : 3\"\n    data-role=\"date-td\"\n  >\n    {{ host.item.date | bbDate: 'shortDate' }}\n  </td>\n  <!--If showDescription is false, it should colspan up to the description-->\n  <td *ngIf=\"host.showCategory\" [attr.colspan]=\"host.showDescription ? null : 2\" data-role=\"category-td\">\n    <div\n      class=\"bb-block bb-block--xs bb-text-semi-bold d-md-none\"\n      i18n=\"\u0421ategory|Account statement table head title@@accountStatement.table.head.category.title\"\n    >\n      Category\n    </div>\n    <div data-role=\"category-content\">{{ host.item.category }}</div>\n  </td>\n  <!--If showCategory is false, it should colspan including category-->\n  <td *ngIf=\"host.showDescription\" [attr.colspan]=\"host.showCategory ? null : 2\" data-role=\"description-td\">\n    <div\n      class=\"bb-block bb-block--xs bb-text-semi-bold d-md-none\"\n      i18n=\"Description|Account statement table head title@@accountStatement.table.row.description.title\"\n      data-role=\"description-label\"\n    >\n      Description\n    </div>\n    <div data-role=\"description-content\">{{ host.item.description }}</div>\n  </td>\n\n  <td class=\"d-md-table-cell d-none bb-text-align-center\">\n    <span\n      *ngIf=\"host.documentPDF\"\n      id=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n      class=\"sr-only\"\n      i18n=\"Preview for|describing preview text for screen reader@@account-statement-list.preview-button.description\"\n    >\n      Preview for\n      <ng-container *ngTemplateOutlet=\"screenReaderDescription\"></ng-container>\n    </span>\n    <bb-account-statement-view-online\n      *ngIf=\"host.documentPDF\"\n      [href]=\"host.documentPDFhref\"\n      describedByElementId=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-view-online>\n  </td>\n\n  <td class=\"d-md-table-cell d-none bb-text-align-center\">\n    <span\n      i18n=\"Download for|describing download text for screen reader@@account-statement-list.download-button.description\"\n      id=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n      class=\"sr-only\"\n    >\n      {host.item.documents?.length, plural, =1 {Download\n      {{ host.mimeTypeExtensions[host.item.documents[0]?.contentType] }}} other {Show download actions} } for\n      <ng-container *ngTemplateOutlet=\"screenReaderDescription\"></ng-container>\n    </span>\n    <bb-account-statement-downloads\n      [documents]=\"host.item.documents\"\n      [mimeTypeExtensions]=\"host.mimeTypeExtensions\"\n      (downloadFailure)=\"host.onDownloadFailure()\"\n      describedByElementId=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-downloads>\n  </td>\n  <ng-template #screenReaderDescription>\n    <span\n      i18n=\"\n        Category, description and book date for screen reader|describing what text is read by screen reader for download\n        or preview buttons @@account-statement-list.actions.description\"\n    >\n      {host.showCategory.toString(), select, true { 'category ' {{ host.item.category }} }} {(host.showCategory &&\n      host.showDescription).toString(), select, true { 'with description ' {{ host.item.description }} }}\n      {(!host.showCategory && host.showDescription).toString(), select, true { 'description'\n      {{ host.item.description }} }} {(host.showCategory || host.showDescription).toString(), select, true {'and'}} book\n      date {{ host.item.date | bbDate: 'fullDate' }}\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #downloadFailureNotificationHeader>\n  <ng-container bbAccountStatementDownloadFailureNotificationHeaderCustomizable [bbHostRef]=\"this\"> </ng-container>\n\n  <ng-template bbAccountStatementDownloadFailureNotificationHeaderCustomizable>\n    <span i18n=\"Failed to download statement@@account-statement-table-row.error-notification.header\"\n      >The statement cannot be downloaded now, please try again later</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.ӨAccountStatementViewOnlineComponent; }), selector: "bb-account-statement-view-online", inputs: ["href", "describedByElementId"] }, { type: i0.forwardRef(function () { return i1.ӨAccountStatementDownloadsComponent; }), selector: "bb-account-statement-downloads", inputs: ["documents", "mimeTypeExtensions", "describedByElementId", "tooltipPlacement"], outputs: ["downloadFailure"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementTableRowCustomizableDirective; }), selector: "[bbAccountStatementTableRowCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i3.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return AccountStatementDownloadFailureNotificationHeaderCustomizableDirective; }), selector: "[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]" }], pipes: { "bbDate": i0.forwardRef(function () { return i4.BbDatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableRowComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'tr[bb-account-statement-table-row]',
                    templateUrl: './account-statement-table-row.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.AccountStatementDataService }, { type: i2.NotificationService }]; }, propDecorators: { showDescription: [{
                type: Input
            }], showCategory: [{
                type: Input
            }], notificationDismissTimeProperty: [{
                type: Input
            }], downloadFailureNotificationHeader: [{
                type: ViewChild,
                args: ['downloadFailureNotificationHeader']
            }], item: [{
                type: Input
            }] } });
export class AccountStatementTableRowCustomizableDirective extends BbTemplate {
}
AccountStatementTableRowCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableRowCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementTableRowCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableRowCustomizableDirective, selector: "[bbAccountStatementTableRowCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableRowCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementTableRowCustomizable]' }]
        }] });
export class AccountStatementDownloadFailureNotificationHeaderCustomizableDirective extends BbTemplate {
}
AccountStatementDownloadFailureNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementDownloadFailureNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, selector: "[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,