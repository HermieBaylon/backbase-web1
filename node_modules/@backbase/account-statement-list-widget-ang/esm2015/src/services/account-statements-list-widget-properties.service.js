import { Injectable, Optional } from '@angular/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { AccountStatementBasePropertiesService, modelItemToBoolean, PaginationType, } from '@backbase/account-statement-common-ang';
import { ListWidgetProperties } from '../constants/widget-properties';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export class AccountStatementListWidgetPropertiesService extends AccountStatementBasePropertiesService {
    constructor(itemModel) {
        super(itemModel);
        this.showDescription$$ = new BehaviorSubject(undefined);
        /* eslint-disable @typescript-eslint/member-ordering */
        this.showDescription$ = this.getWidgetProperty$(this.showDescription$$, this.showDescriptionIM$);
        this.widgetProperties$ = combineLatest([
            this.pageSize$,
            this.sortingOrder$,
            this.sortingDirection$,
            this.notificationDismissTime$,
            this.showCategory$,
            this.showDescription$,
            this.relativeDateLimit$,
            this.absoluteDateLimit$,
            this.paginationType$,
        ]).pipe(map(([pageSize, sortingOrder, sortingDirection, notificationDismissTimeProperty, showCategory, showDescription, relativeDateLimit, absoluteDateLimit, paginationType,]) => ({
            pageSize,
            sortingOrder,
            sortingDirection,
            notificationDismissTimeProperty,
            showCategory,
            showDescription,
            relativeDateLimit,
            absoluteDateLimit,
            paginationType,
        })));
    }
    /* eslint-enable @typescript-eslint/member-ordering */
    setShowDescription(value) {
        this.showDescription$$.next(value);
    }
    getPaginationTypeIM$() {
        var _a;
        const defaultValue = PaginationType.LoadMore;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(ListWidgetProperties.PAGINATION_TYPE, defaultValue)) || of(defaultValue);
    }
    get showDescriptionIM$() {
        var _a;
        const defaultValue = true;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(ListWidgetProperties.SHOW_DESCRIPTION, defaultValue).pipe(map(modelItemToBoolean))) ||
            of(defaultValue));
    }
}
AccountStatementListWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementListWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1zdGF0ZW1lbnRzLWxpc3Qtd2lkZ2V0LXByb3BlcnRpZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWNjb3VudC1zdGF0ZW1lbnQtbGlzdC13aWRnZXQtYW5nL3NyYy9zZXJ2aWNlcy9hY2NvdW50LXN0YXRlbWVudHMtbGlzdC13aWRnZXQtcHJvcGVydGllcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUNMLHFDQUFxQyxFQUNyQyxrQkFBa0IsRUFDbEIsY0FBYyxHQUNmLE1BQU0sd0NBQXdDLENBQUM7QUFJaEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7OztBQUd0RSxNQUFNLE9BQU8sMkNBQTRDLFNBQVEscUNBQXFDO0lBR3BHLFlBQXdCLFNBQW9CO1FBQzFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUhGLHNCQUFpQixHQUFHLElBQUksZUFBZSxDQUFzQixTQUFTLENBQUMsQ0FBQztRQU16Rix1REFBdUQ7UUFDOUMscUJBQWdCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM1RixzQkFBaUIsR0FBcUQsYUFBYSxDQUFDO1lBQzNGLElBQUksQ0FBQyxTQUFTO1lBQ2QsSUFBSSxDQUFDLGFBQWE7WUFDbEIsSUFBSSxDQUFDLGlCQUFpQjtZQUN0QixJQUFJLENBQUMsd0JBQXdCO1lBQzdCLElBQUksQ0FBQyxhQUFhO1lBQ2xCLElBQUksQ0FBQyxnQkFBZ0I7WUFDckIsSUFBSSxDQUFDLGtCQUFrQjtZQUN2QixJQUFJLENBQUMsa0JBQWtCO1lBQ3ZCLElBQUksQ0FBQyxlQUFlO1NBQ3JCLENBQUMsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUNELENBQUMsQ0FDQyxRQUFRLEVBQ1IsWUFBWSxFQUNaLGdCQUFnQixFQUNoQiwrQkFBK0IsRUFDL0IsWUFBWSxFQUNaLGVBQWUsRUFDZixpQkFBaUIsRUFDakIsaUJBQWlCLEVBQ2pCLGNBQWMsRUFDUixFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1osUUFBUTtZQUNSLFlBQVk7WUFDWixnQkFBZ0I7WUFDaEIsK0JBQStCO1lBQy9CLFlBQVk7WUFDWixlQUFlO1lBQ2YsaUJBQWlCO1lBQ2pCLGlCQUFpQjtZQUNqQixjQUFjO1NBQ2YsQ0FBQyxDQUNILENBQ0YsQ0FBQztJQXRDRixDQUFDO0lBd0NELHNEQUFzRDtJQUV0RCxrQkFBa0IsQ0FBQyxLQUEwQjtRQUMzQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFUyxvQkFBb0I7O1FBQzVCLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7UUFDN0MsT0FBTyxDQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsUUFBUSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsS0FBSSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELElBQVksa0JBQWtCOztRQUM1QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDMUIsT0FBTyxDQUNMLENBQUEsTUFBQSxJQUFJLENBQUMsU0FBUywwQ0FBRSxRQUFRLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUMzRyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQ2pCLENBQUM7SUFDSixDQUFDOzt5SUE5RFUsMkNBQTJDOzZJQUEzQywyQ0FBMkM7NEZBQTNDLDJDQUEyQztrQkFEdkQsVUFBVTs7MEJBSUksUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7XG4gIEFjY291bnRTdGF0ZW1lbnRCYXNlUHJvcGVydGllc1NlcnZpY2UsXG4gIG1vZGVsSXRlbVRvQm9vbGVhbixcbiAgUGFnaW5hdGlvblR5cGUsXG59IGZyb20gJ0BiYWNrYmFzZS9hY2NvdW50LXN0YXRlbWVudC1jb21tb24tYW5nJztcbmltcG9ydCB7IEl0ZW1Nb2RlbCB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcblxuaW1wb3J0IHsgQWNjb3VudFN0YXRlbWVudExpc3RXaWRnZXRQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vdHlwZXMvYWNjb3VudC1zdGF0ZW1lbnQtbGlzdC13aWRnZXQtcHJvcGVydGllcyc7XG5pbXBvcnQgeyBMaXN0V2lkZ2V0UHJvcGVydGllcyB9IGZyb20gJy4uL2NvbnN0YW50cy93aWRnZXQtcHJvcGVydGllcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY2NvdW50U3RhdGVtZW50TGlzdFdpZGdldFByb3BlcnRpZXNTZXJ2aWNlIGV4dGVuZHMgQWNjb3VudFN0YXRlbWVudEJhc2VQcm9wZXJ0aWVzU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2hvd0Rlc2NyaXB0aW9uJCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4gfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgaXRlbU1vZGVsOiBJdGVtTW9kZWwpIHtcbiAgICBzdXBlcihpdGVtTW9kZWwpO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L21lbWJlci1vcmRlcmluZyAqL1xuICByZWFkb25seSBzaG93RGVzY3JpcHRpb24kID0gdGhpcy5nZXRXaWRnZXRQcm9wZXJ0eSQodGhpcy5zaG93RGVzY3JpcHRpb24kJCwgdGhpcy5zaG93RGVzY3JpcHRpb25JTSQpO1xuICByZWFkb25seSB3aWRnZXRQcm9wZXJ0aWVzJDogT2JzZXJ2YWJsZTxBY2NvdW50U3RhdGVtZW50TGlzdFdpZGdldFByb3BlcnRpZXM+ID0gY29tYmluZUxhdGVzdChbXG4gICAgdGhpcy5wYWdlU2l6ZSQsXG4gICAgdGhpcy5zb3J0aW5nT3JkZXIkLFxuICAgIHRoaXMuc29ydGluZ0RpcmVjdGlvbiQsXG4gICAgdGhpcy5ub3RpZmljYXRpb25EaXNtaXNzVGltZSQsXG4gICAgdGhpcy5zaG93Q2F0ZWdvcnkkLFxuICAgIHRoaXMuc2hvd0Rlc2NyaXB0aW9uJCxcbiAgICB0aGlzLnJlbGF0aXZlRGF0ZUxpbWl0JCxcbiAgICB0aGlzLmFic29sdXRlRGF0ZUxpbWl0JCxcbiAgICB0aGlzLnBhZ2luYXRpb25UeXBlJCxcbiAgXSkucGlwZShcbiAgICBtYXAoXG4gICAgICAoW1xuICAgICAgICBwYWdlU2l6ZSxcbiAgICAgICAgc29ydGluZ09yZGVyLFxuICAgICAgICBzb3J0aW5nRGlyZWN0aW9uLFxuICAgICAgICBub3RpZmljYXRpb25EaXNtaXNzVGltZVByb3BlcnR5LFxuICAgICAgICBzaG93Q2F0ZWdvcnksXG4gICAgICAgIHNob3dEZXNjcmlwdGlvbixcbiAgICAgICAgcmVsYXRpdmVEYXRlTGltaXQsXG4gICAgICAgIGFic29sdXRlRGF0ZUxpbWl0LFxuICAgICAgICBwYWdpbmF0aW9uVHlwZSxcbiAgICAgIF06IGFueVtdKSA9PiAoe1xuICAgICAgICBwYWdlU2l6ZSxcbiAgICAgICAgc29ydGluZ09yZGVyLFxuICAgICAgICBzb3J0aW5nRGlyZWN0aW9uLFxuICAgICAgICBub3RpZmljYXRpb25EaXNtaXNzVGltZVByb3BlcnR5LFxuICAgICAgICBzaG93Q2F0ZWdvcnksXG4gICAgICAgIHNob3dEZXNjcmlwdGlvbixcbiAgICAgICAgcmVsYXRpdmVEYXRlTGltaXQsXG4gICAgICAgIGFic29sdXRlRGF0ZUxpbWl0LFxuICAgICAgICBwYWdpbmF0aW9uVHlwZSxcbiAgICAgIH0pLFxuICAgICksXG4gICk7XG5cbiAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbWVtYmVyLW9yZGVyaW5nICovXG5cbiAgc2V0U2hvd0Rlc2NyaXB0aW9uKHZhbHVlOiBib29sZWFuIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgdGhpcy5zaG93RGVzY3JpcHRpb24kJC5uZXh0KHZhbHVlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRQYWdpbmF0aW9uVHlwZUlNJCgpOiBPYnNlcnZhYmxlPFBhZ2luYXRpb25UeXBlPiB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gUGFnaW5hdGlvblR5cGUuTG9hZE1vcmU7XG4gICAgcmV0dXJuIHRoaXMuaXRlbU1vZGVsPy5wcm9wZXJ0eShMaXN0V2lkZ2V0UHJvcGVydGllcy5QQUdJTkFUSU9OX1RZUEUsIGRlZmF1bHRWYWx1ZSkgfHwgb2YoZGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHNob3dEZXNjcmlwdGlvbklNJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0cnVlO1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLml0ZW1Nb2RlbD8ucHJvcGVydHkoTGlzdFdpZGdldFByb3BlcnRpZXMuU0hPV19ERVNDUklQVElPTiwgZGVmYXVsdFZhbHVlKS5waXBlKG1hcChtb2RlbEl0ZW1Ub0Jvb2xlYW4pKSB8fFxuICAgICAgb2YoZGVmYXVsdFZhbHVlKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==