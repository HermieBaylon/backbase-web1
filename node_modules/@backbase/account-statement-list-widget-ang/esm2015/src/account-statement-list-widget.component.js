import { Component, Directive, Input } from '@angular/core';
import { ACCOUNTS_REQUEST_ALL_SIZE, AccountStatementBaseWidgetComponent, convertDateObjToDateStruct, convertDateStructToDateObj, getDateFilterLimit, LoadingState, PaginationType, simpleArrayCompare, smartLoadingState, today, } from '@backbase/account-statement-common-ang';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { catchError, distinctUntilChanged, filter, map, pairwise, scan, shareReplay, startWith, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { AccountStatementListWidgetPropertiesService } from './services/account-statements-list-widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/account-statement-common-ang";
import * as i2 from "./services/account-statements-list-widget-properties.service";
import * as i3 from "./components/account-statement-filter-form/account-statement-filter-form.component";
import * as i4 from "./components/account-statement-table/account-statement-table.component";
import * as i5 from "@backbase/ui-ang/loading-indicator";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@angular/common";
const STORAGE_ACCOUNT_SELECTED_KEY = 'bb.product.selected';
export const DEFAULT_FROM_VALUE = 0;
export class AccountStatementListWidgetComponent extends AccountStatementBaseWidgetComponent {
    constructor(service, propertiesService) {
        super(propertiesService);
        this.service = service;
        this.hostRef = this;
        this.loadingStates = LoadingState;
        this.accounts = {
            data: undefined,
            error: false,
        };
        this.categories = {
            data: undefined,
            error: false,
        };
        this.accountStatements = {
            data: undefined,
            error: false,
            totalCount: undefined,
            isLoading: LoadingState.IDLE,
            areFiltersApplied: false,
        };
        this.destroy$ = new Subject();
        /* eslint-disable @typescript-eslint/member-ordering */
        /**
         * Minimal date for "Date range" filter. Default value is "1970-01-01".
         */
        this.minimalDate = this.initializeMinimalDateFilterLimit;
        /**
         * Maximum date for "Date range" filter. Default value is current date.
         */
        this.maximumDate = convertDateObjToDateStruct(today());
        this.selectedAccount = new Subject();
        // eslint-disable-next-line @typescript-eslint/ban-types
        this.sortingParamsNew = new BehaviorSubject({});
        this.sortingParams = combineLatest([
            this.propertiesService.sortingOrder$,
            this.propertiesService.sortingDirection$,
            this.sortingParamsNew,
        ]).pipe(map(([orderBy, direction, newParams]) => (Object.assign({ orderBy,
            direction }, newParams))));
        this.filterParams = new BehaviorSubject({});
        this.loadingParamsNew = new BehaviorSubject({
            from: DEFAULT_FROM_VALUE,
        });
        this.loadingParams = combineLatest([
            this.propertiesService.pageSize$,
            this.loadingParamsNew,
            this.minimalDate,
        ]).pipe(map(([size, newParams, minimalDate]) => (Object.assign({ size, from: DEFAULT_FROM_VALUE, dateFrom: convertDateStructToDateObj(minimalDate), dateTo: convertDateStructToDateObj(this.maximumDate) }, newParams))), takeUntil(this.destroy$));
        this.accountsError = undefined;
        this.accountsData = this.service
            .getAccounts({
            size: ACCOUNTS_REQUEST_ALL_SIZE,
        })
            .pipe(map(response => response.body), tap(accounts => {
            this.selectAccount(accounts[0]);
        }), catchError(error => {
            this.accountsError = error;
            return of([]);
        }));
        this.widgetProperties = {};
        this.getInitialSelectedAccount = (accounts) => {
            const accountId = window.localStorage.getItem(STORAGE_ACCOUNT_SELECTED_KEY);
            return accounts.find(item => item.id === accountId) || accounts[0];
        };
        this.accounts.data = this.service.loadAccounts().pipe(tap((accounts) => {
            if (accounts && accounts.length) {
                const initialAccount = this.getInitialSelectedAccount(accounts);
                this.selectAccount(initialAccount);
            }
        }), catchError(() => {
            this.accounts.error = true;
            return of([]);
        }), shareReplay(1));
        const params = combineLatest([
            this.selectedAccount.pipe(map(({ id }) => id), distinctUntilChanged()),
            this.loadingParams,
            this.sortingParams,
            this.filterParams.pipe(distinctUntilChanged((prev, cur) => simpleArrayCompare(prev.category, cur.category) &&
                prev.dateFrom === cur.dateFrom &&
                prev.dateTo === cur.dateTo), tap(filterParams => (this.accountStatements.areFiltersApplied = this.areFiltersApplied(filterParams)))),
        ]).pipe(map(([accountId, loadingParams, sortingParams, filterParams]) => (Object.assign(Object.assign(Object.assign({ accountId }, loadingParams), (sortingParams.direction && Object.assign({}, sortingParams))), filterParams))), distinctUntilChanged((prev, cur) => {
            if (cur.from === prev.from && cur.from !== DEFAULT_FROM_VALUE) {
                this.setLoadingParams({ from: DEFAULT_FROM_VALUE });
                return true;
            }
            return false;
        }));
        this.accountStatements.data = params.pipe(startWith({}), pairwise(), tap(([oldParams, newParams]) => {
            this.accountStatements.isLoading = smartLoadingState(oldParams, Object.assign(Object.assign({}, newParams), { paginationType: this.widgetProperties.paginationType }));
            this.accountStatements.error = false;
        }), switchMap(([, newParams]) => this.getAccountStatements(newParams).pipe(tap((response) => (this.accountStatements.totalCount = response && response.totalCount)), map((response) => [newParams, response && response.data]))), scan((acc, [reqParams, cur]) => {
            if (this.widgetProperties.paginationType === PaginationType.LoadMore &&
                reqParams.from !== DEFAULT_FROM_VALUE) {
                return [...acc, ...(cur || [])];
            }
            else {
                return [...(cur || [])];
            }
        }, []), tap(() => (this.accountStatements.isLoading = LoadingState.IDLE)));
        this.categories.data = this.showCategory.pipe(filter(Boolean), switchMap(() => this.service.loadCategories().pipe(catchError(() => {
            this.categories.error = true;
            return of([]);
        }))));
    }
    /**
     * Flag to show/hide description
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set showDescriptionValue(value) {
        this.propertiesService.setShowDescription(value);
    }
    ngOnInit() {
        this.propertiesService.widgetProperties$
            .pipe(takeUntil(this.destroy$))
            .subscribe(properties => (this.widgetProperties = properties));
    }
    // TODO: Merge these getters into one observable subscription that would produce object with all widget properties
    get pageSize() {
        return this.propertiesService.pageSize$;
    }
    get sortingOrder() {
        return this.propertiesService.sortingOrder$;
    }
    get sortingDirection() {
        return this.propertiesService.sortingDirection$;
    }
    get showDescription() {
        return this.propertiesService.showDescription$;
    }
    get showCategory() {
        return this.propertiesService.showCategory$;
    }
    get notificationDismissTimeProperty() {
        return this.propertiesService.notificationDismissTime$;
    }
    setFilterParams(params) {
        this.filterParams.next(params);
    }
    setSortingParams(params) {
        this.sortingParamsNew.next(params);
    }
    setLoadingParams(params) {
        this.loadingParamsNew.next(Object.assign({}, params));
    }
    setPageNumber(page) {
        this.loadingParamsNew.next(Object.assign(Object.assign({}, this.loadingParamsNew.getValue()), { from: page }));
    }
    selectAccount(account) {
        this.selectedAccount.next(account);
    }
    getAccountStatements(params = {}) {
        return this.service.loadAccountStatements(params).pipe(catchError(() => {
            this.accountStatements.error = true;
            return of({ data: [], totalCount: 0 });
        }));
    }
    areFiltersApplied(filterParams) {
        const areCategoriesApplied = !!filterParams.category && filterParams.category.length !== 0;
        const isBookDateApplied = !!filterParams.dateFrom && !!filterParams.dateTo;
        return areCategoriesApplied || isBookDateApplied;
    }
    get initializeMinimalDateFilterLimit() {
        return combineLatest([
            this.propertiesService.absoluteDateLimit$.pipe(takeUntil(this.destroy$)),
            this.propertiesService.relativeDateLimit$.pipe(takeUntil(this.destroy$)),
        ]).pipe(map(([absoluteDateLimit, relativeMonthLimit]) => {
            // this sets default value to the first millisecond of Unix date
            const limitDate = getDateFilterLimit(absoluteDateLimit, relativeMonthLimit);
            return convertDateObjToDateStruct(limitDate);
        }));
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
AccountStatementListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetComponent, deps: [{ token: i1.AccountStatementDataService }, { token: i2.AccountStatementListWidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementListWidgetComponent, selector: "bb-account-statement-list-widget", inputs: { showDescriptionValue: ["showDescription", "showDescriptionValue"] }, providers: [AccountStatementListWidgetPropertiesService], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbAccountStatementListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    accounts: (accountsData | async)!,\n    accountsError: accountsError,\n    categories: (categories.data | async)!,\n    accountStatements: (accountStatements.data | async)!,\n    selectedAccount: (selectedAccount | async)!\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementListCustomizable\n  let-host\n  let-accounts=\"context.accounts\"\n  let-accountsError=\"context.accountsError\"\n  let-categories=\"context.categories\"\n  let-selectedAccount=\"context.selectedAccount\"\n  let-accountStatements=\"context.accountStatements\"\n>\n  <div aria-live=\"polite\">\n    <ng-container *ngIf=\"accounts; else loadingState\">\n      <ng-container *ngIf=\"!accountsError; else errorStateAccounts\">\n        <ng-container *ngIf=\"accounts.length; else emptyStateAccounts\">\n          <div class=\"bb-block bb-block--xl\">\n            <bb-account-statement-account-selector\n              [accounts]=\"accounts\"\n              (accountSelect)=\"host.selectAccount($event)\"\n            ></bb-account-statement-account-selector>\n          </div>\n\n          <div class=\"card\">\n            <ng-container\n              *ngIf=\"\n                accountStatements && host.accountStatements.isLoading !== host.loadingStates.LOADING;\n                else loadingState\n              \"\n            >\n              <ng-container *ngIf=\"!host.accountStatements.error; else errorStateAccountStatements\">\n                <ng-container\n                  *ngIf=\"\n                    accountStatements.length ||\n                      host.accountStatements.areFiltersApplied ||\n                      host.accountStatements.isLoading === host.loadingStates.LOADING_FILTERED;\n                    else emptyStateAccountStatements\n                  \"\n                >\n                  <bb-account-statement-filter-form\n                    [categories]=\"categories\"\n                    [filtersApplied]=\"host.accountStatements.areFiltersApplied\"\n                    [filterParams]=\"(host.filterParams | async)!\"\n                    (filtersChange)=\"host.setFilterParams($event)\"\n                    [showCategory]=\"host.showCategory | async\"\n                    [minDate]=\"(host.minimalDate | async)!\"\n                    [maxDate]=\"host.maximumDate\"\n                  ></bb-account-statement-filter-form>\n\n                  <ng-container\n                    *ngIf=\"host.accountStatements.isLoading !== host.loadingStates.LOADING_FILTERED; else loadingState\"\n                  >\n                    <ng-container *ngIf=\"accountStatements.length; else emptyStateAccountStatementsFiltered\">\n                      <bb-account-statement-table\n                        class=\"bb-block card-section\"\n                        [accountStatements]=\"accountStatements\"\n                        [showCategory]=\"(host.showCategory | async)!\"\n                        [showDescription]=\"(host.showDescription | async)!\"\n                        [sortingParams]=\"host.sortingParams | async\"\n                        [notificationDismissTimeProperty]=\"(host.notificationDismissTimeProperty | async)!\"\n                        [loading]=\"host.accountStatements.isLoading === host.loadingStates.LOADING_TABLE\"\n                        (sortingParamsChange)=\"host.setSortingParams($event)\"\n                      ></bb-account-statement-table>\n                      <!--Temporary add $any. Remove it once we remove the extension slots-->\n                      <bb-account-statement-pagination\n                        [paginationType]=\"host.widgetProperties.paginationType\"\n                        [loading]=\"host.accountStatements.isLoading === host.loadingStates.LOADING_MORE\"\n                        [itemsPerPage]=\"host.widgetProperties.pageSize\"\n                        [page]=\"$any(host.loadingParams | async).from\"\n                        [count]=\"host.accountStatements?.totalCount\"\n                        [hasMore]=\"accountStatements.length !== host.accountStatements?.totalCount\"\n                        (loadMore)=\"host.setPageNumber($event)\"\n                        (pageChange)=\"host.setPageNumber($event)\"\n                      >\n                      </bb-account-statement-pagination>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui\n      loaderSize=\"md\"\n      i18n-text=\"Loading data...|Loading title@@accountStatement.loading.title\"\n      text=\"Loading data...\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #emptyStateAccounts>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        iconSize=\"xxl\"\n        iconModifier=\"current-accounts\"\n        i18n-title=\"No Account selected|Accounts state title theme two@@accountStatement.accounts.state.title.theme.two\"\n        title=\"No account selected\"\n        i18n-subtitle=\"\n          You need to select account in order to view account statements|Accounts state subtitle theme\n          two@@accountStatement.accounts.state.subtitle.theme.two\"\n        subtitle=\"You need to select account in order to view account statements\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorStateAccounts>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        data-role=\"accounts-error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Account list error state subtitle@@accountStatement.account-list.error-state.subtitle\"\n        title=\"Account list is not loading\"\n        i18n-title=\"Account list is not loading error state title@@accountStatement.account-list.error-state.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyStateAccountStatements>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"description\"\n      i18n-title=\"\n        No Account Statements found|Account statements state title theme\n        two@@accountStatement.statements.state.title.theme2\"\n      title=\"No Account Statements for selected account\"\n      i18n-subtitle=\"\n        You don't have any account statements to be displayed for this account|Account statements state subtitle theme\n        two@@accountStatement.statements.state.subtitle.theme2\"\n      subtitle=\"You don't have any account statements to be displayed for this account\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #emptyStateAccountStatementsFiltered>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"search\"\n      i18n-title=\"\n        No Results Found|Account statements filtered state title@@accountStatement.statements.filtered.state.title\"\n      title=\"No Results Found\"\n      i18n-subtitle=\"\n        We can\u2019t find what you\u2019re looking for. Please try a different criteria.|Account statements filtered state\n        subtitle@@accountStatement.statements.filtered.state.subtitle\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #errorStateAccountStatements>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      data-role=\"account-statements-error-state\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      i18n-subtitle=\"Account statements list error state subtitle@@accountStatement.statement-list.error-state.subtitle\"\n      title=\"Account statement list is not loading\"\n      i18n-title=\"\n        Account statement list is not loading error state title@@accountStatement.statement-list.error-state.title\"\n    >\n    </bb-empty-state-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.ӨAccountStatementAccountSelectorComponent; }), selector: "bb-account-statement-account-selector", inputs: ["accounts"], outputs: ["accountSelect"] }, { type: i0.forwardRef(function () { return i3.AccountStatementFilterFormComponent; }), selector: "bb-account-statement-filter-form", inputs: ["categories", "showCategory", "filtersApplied", "filterParams", "minDate", "maxDate"], outputs: ["filtersChange"] }, { type: i0.forwardRef(function () { return i4.AccountStatementTableComponent; }), selector: "bb-account-statement-table", inputs: ["accountStatements", "showDescription", "showCategory", "sortingParams", "loading", "notificationDismissTimeProperty"], outputs: ["sortingParamsChange"] }, { type: i0.forwardRef(function () { return i1.ӨAccountStatementPaginationComponent; }), selector: "bb-account-statement-pagination", inputs: ["page", "from", "count", "itemsPerPage", "paginationType", "hasMore", "loading"], outputs: ["pageChange", "loadMore"] }, { type: i0.forwardRef(function () { return i5.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i6.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementListCustomizableDirective; }), selector: "[bbAccountStatementListCustomizable]" }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0.forwardRef(function () { return i7.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-list-widget',
                    templateUrl: './account-statement-list-widget.component.html',
                    providers: [AccountStatementListWidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.AccountStatementDataService }, { type: i2.AccountStatementListWidgetPropertiesService }]; }, propDecorators: { showDescriptionValue: [{
                type: Input,
                args: ['showDescription']
            }] } });
export class AccountStatementListCustomizableDirective extends BbTemplate {
}
AccountStatementListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementListCustomizableDirective, selector: "[bbAccountStatementListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementListCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,