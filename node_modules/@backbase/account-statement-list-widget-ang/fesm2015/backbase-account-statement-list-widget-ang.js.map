{"version":3,"file":"backbase-account-statement-list-widget-ang.js","sources":["../../../../libs/account-statement-list-widget-ang/src/constants/widget-properties.ts","../../../../libs/account-statement-list-widget-ang/src/services/account-statements-list-widget-properties.service.ts","../../../../libs/account-statement-list-widget-ang/src/components/account-statement-filter-form/account-statement-filter-form.component.ts","../../../../libs/account-statement-list-widget-ang/src/components/account-statement-filter-form/account-statement-filter-form.component.html","../../../../libs/account-statement-list-widget-ang/src/components/account-statement-table-row/account-statement-table-row.component.ts","../../../../libs/account-statement-list-widget-ang/src/components/account-statement-table-row/account-statement-table-row.component.html","../../../../libs/account-statement-list-widget-ang/src/components/account-statement-table/account-statement-table.component.ts","../../../../libs/account-statement-list-widget-ang/src/components/account-statement-table/account-statement-table.component.html","../../../../libs/account-statement-list-widget-ang/src/account-statement-list-widget.component.ts","../../../../libs/account-statement-list-widget-ang/src/account-statement-list-widget.component.html","../../../../libs/account-statement-list-widget-ang/src/account-statement-list-widget.module.ts","../../../../libs/account-statement-list-widget-ang/backbase-account-statement-list-widget-ang.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nexport const ListWidgetProperties = {\n  SHOW_DESCRIPTION: 'bb.accountStatement.showDescription',\n  PAGINATION_TYPE: 'bb.accountStatement.paginationType',\n};\n","import { Injectable, Optional } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  AccountStatementBasePropertiesService,\n  modelItemToBoolean,\n  PaginationType,\n} from '@backbase/account-statement-common-ang';\nimport { ItemModel } from '@backbase/foundation-ang/core';\n\nimport { AccountStatementListWidgetProperties } from '../types/account-statement-list-widget-properties';\nimport { ListWidgetProperties } from '../constants/widget-properties';\n\n@Injectable()\nexport class AccountStatementListWidgetPropertiesService extends AccountStatementBasePropertiesService {\n  private readonly showDescription$$ = new BehaviorSubject<boolean | undefined>(undefined);\n\n  constructor(@Optional() itemModel: ItemModel) {\n    super(itemModel);\n  }\n\n  /* eslint-disable @typescript-eslint/member-ordering */\n  readonly showDescription$ = this.getWidgetProperty$(this.showDescription$$, this.showDescriptionIM$);\n  readonly widgetProperties$: Observable<AccountStatementListWidgetProperties> = combineLatest([\n    this.pageSize$,\n    this.sortingOrder$,\n    this.sortingDirection$,\n    this.notificationDismissTime$,\n    this.showCategory$,\n    this.showDescription$,\n    this.relativeDateLimit$,\n    this.absoluteDateLimit$,\n    this.paginationType$,\n  ]).pipe(\n    map(\n      ([\n        pageSize,\n        sortingOrder,\n        sortingDirection,\n        notificationDismissTimeProperty,\n        showCategory,\n        showDescription,\n        relativeDateLimit,\n        absoluteDateLimit,\n        paginationType,\n      ]: any[]) => ({\n        pageSize,\n        sortingOrder,\n        sortingDirection,\n        notificationDismissTimeProperty,\n        showCategory,\n        showDescription,\n        relativeDateLimit,\n        absoluteDateLimit,\n        paginationType,\n      }),\n    ),\n  );\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  setShowDescription(value: boolean | undefined): void {\n    this.showDescription$$.next(value);\n  }\n\n  protected getPaginationTypeIM$(): Observable<PaginationType> {\n    const defaultValue = PaginationType.LoadMore;\n    return this.itemModel?.property(ListWidgetProperties.PAGINATION_TYPE, defaultValue) || of(defaultValue);\n  }\n\n  private get showDescriptionIM$(): Observable<boolean> {\n    const defaultValue = true;\n    return (\n      this.itemModel?.property(ListWidgetProperties.SHOW_DESCRIPTION, defaultValue).pipe(map(modelItemToBoolean)) ||\n      of(defaultValue)\n    );\n  }\n}\n","import {\n  Component,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { Categories, FilterParams } from '@backbase/account-statement-common-ang';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Subject } from 'rxjs';\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'bb-account-statement-filter-form',\n  templateUrl: './account-statement-filter-form.component.html',\n})\nexport class AccountStatementFilterFormComponent implements OnDestroy, OnInit {\n  /**\n   * Array of account statement categories\n   */\n  @Input() categories: Categories = [];\n\n  /**\n   * Whether default category is presented in filter section.\n   */\n  @Input() showCategory: boolean | undefined | null = true;\n\n  /**\n   * Whether filter options applied to all account statement list elements\n   */\n  @Input() filtersApplied = false;\n\n  @Input() filterParams: FilterParams = {};\n\n  @Input() minDate: NgbDateStruct | undefined;\n\n  @Input() maxDate: NgbDateStruct | undefined;\n\n  /**\n   * Emit filter change event\n   */\n  @Output() filtersChange = new EventEmitter<FilterParams>();\n\n  @ViewChild('filterButton') filterButton?: ElementRef;\n\n  filterForm: FormGroup = this.fb.group({});\n  readonly hostRef = this;\n  private readonly unsubscribe = new Subject<void>();\n\n  constructor(private readonly fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.createForm();\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n  createForm() {\n    this.filterForm = this.fb.group({\n      categories: [this.filterParams?.category || []],\n      bookDate: this.filterParams?.dateFrom\n        ? {\n            from: this.filterParams.dateFrom,\n            to: this.filterParams?.dateTo,\n          }\n        : '',\n    });\n  }\n\n  resetForm() {\n    this.filterForm.reset();\n    this.filtersChange.emit({});\n    this.focusFilterButton();\n  }\n\n  onSubmit() {\n    const categoriesValue = this.filterForm.controls['categories'].value || [];\n    const { from: dateFrom = '', to: dateTo = '' } =\n      (this.filterForm && this.filterForm.controls['bookDate'].value) || {};\n\n    this.filtersChange.emit({\n      category: categoriesValue,\n      ...(dateFrom && {\n        dateFrom,\n      }),\n      ...((dateTo || dateFrom) && {\n        dateTo: dateTo || dateFrom,\n      }),\n    });\n\n    this.filterForm.markAsPristine();\n    this.focusFilterButton();\n  }\n\n  focusFilterButton() {\n    if (this.filterButton) {\n      this.filterButton.nativeElement.focus();\n    }\n  }\n}\n\n@Directive({ selector: '[bbAccountStatementFilterFormCustomizable]' })\nexport class AccountStatementFilterFormCustomizableDirective extends BbTemplate<\n  AccountStatementFilterFormComponent,\n  void\n> {}\n","<ng-container bbAccountStatementFilterFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementFilterFormCustomizable let-host>\n  <bb-collapsible-ui>\n    <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\" let-toggle=\"toggle\">\n      <div class=\"card-header bb-button-bar bb-button-bar--reverse\">\n        <button\n          class=\"bb-button-bar__button\"\n          bbButton\n          #filterButton\n          data-role=\"collapsible-filter-btn\"\n          [color]=\"host.filtersApplied && !host.isOpen ? 'primary' : 'secondary'\"\n          [class.active]=\"host.isOpen\"\n          (click)=\"toggle()\"\n        >\n          <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n          <span\n            *ngIf=\"host.filtersApplied && !host.isOpen; else filterButtonTextDefault\"\n            i18n=\"\n              Filters applied|Filter form button filter label@@accountStatement.filter.form.button.filter.applied.label\"\n          >\n            Filters applied\n          </span>\n          <ng-template #filterButtonTextDefault>\n            <span i18n=\"Filter|Filter form button filter label@@accountStatement.filter.form.button.filter.label\">\n              Filter\n            </span>\n          </ng-template>\n        </button>\n      </div>\n    </ng-template>\n\n    <ng-template bbCollapsibleBody let-toggle=\"toggle\">\n      <form\n        data-role=\"filter-form\"\n        class=\"card-body account-statements-filter__form-container\"\n        [formGroup]=\"host.filterForm\"\n      >\n        <div class=\"row\">\n          <div class=\"bb-block bb-block--md col-12 col-sm-6\" *ngIf=\"host.filterForm.controls['bookDate']\">\n            <bb-input-datepicker-ui\n              i18n-label=\"Book date|Filter form book date label@@accountStatement.filter.form.datepicker.label\"\n              label=\"Book date range\"\n              labelClasses=\"form-label\"\n              [rangeSelection]=\"true\"\n              [minDate]=\"hostRef.minDate!\"\n              [maxDate]=\"hostRef.maxDate!\"\n              aria-label=\"Book date\"\n              i18n-aria-label=\"Book date filter aria label@@accountStatement.filter.form.datepicker.aria-label\"\n              [attr.aria-invalid]=\"host.filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n              formControlName=\"bookDate\"\n              data-role=\"book-date\"\n            ></bb-input-datepicker-ui>\n\n            <bb-input-validation-message-ui\n              class=\"account-statements-filter__validation-message\"\n              aria-live=\"polite\"\n              [showErrors]=\"host.filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n            >\n              <span\n                i18n=\"\n                  Error invalid date format in book date\n                  range@@accountStatement.filter.form.datepicker.error.invalidDateFormat\"\n                data-role=\"invalid-book-date-error-message\"\n                >Invalid date format</span\n              >\n            </bb-input-validation-message-ui>\n\n            <bb-input-validation-message-ui\n              class=\"account-statements-filter__validation-message\"\n              aria-live=\"polite\"\n              [showErrors]=\"\n                !host.filterForm.controls['bookDate'].hasError('invalidDateFormat') &&\n                (host.filterForm.controls['bookDate'].hasError('dateGreaterThanMaxDate') ||\n                  host.filterForm.controls['bookDate'].hasError('dateLessThanMinDate'))\n              \"\n            >\n              <span\n                i18n=\"\n                  Selected date range contains invalid dates\n                  range@@accountStatement.filter.form.datepicker.error.dateLessThanMinDate\"\n                data-role=\"invalid-book-date-limit-error-message\"\n                >The selected dates include values outside the allowed date range. Please select a date interval in the\n                permitted time frame.</span\n              >\n            </bb-input-validation-message-ui>\n          </div>\n\n          <ng-container *ngIf=\"host.showCategory\">\n            <bb-dropdown-multi-select-ui\n              *ngIf=\"host.categories?.length\"\n              [formControl]=\"host.filterForm.controls['categories']\"\n              class=\"bb-block bb-block--lg col-12 col-sm-6\"\n              data-role=\"categories-filter\"\n              placeholder=\"Select product category\"\n              i18n-placeholder=\"\n                Category select placeholder|Category multiple\n                select@@accountStatement.filter.form.categories.placeholder\"\n              label=\"Category\"\n              i18n-label=\"Category label|Category multiple select@@accountStatement.filter.form.categories.label\"\n            >\n              <bb-dropdown-multi-select-option-ui\n                *ngFor=\"let option of host.categories\"\n                [label]=\"option\"\n                [value]=\"option\"\n              >\n              </bb-dropdown-multi-select-option-ui>\n            </bb-dropdown-multi-select-ui>\n          </ng-container>\n        </div>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            type=\"submit\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"apply\"\n            [disabled]=\"host.filterForm.pristine || host.filterForm.invalid\"\n            (click)=\"host.onSubmit(); toggle()\"\n            i18n=\"Apply|Filter form button apply label@@accountStatement.filter.form.button.apply.label\"\n          >\n            Apply\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"close\"\n            (click)=\"toggle(); host.focusFilterButton()\"\n            i18n=\"Close|Filter form button close label@@accountStatement.filter.form.button.close.label\"\n          >\n            Close\n          </button>\n          <button\n            bbButton\n            color=\"link\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"clear-all\"\n            *ngIf=\"host.filterForm.dirty || host.filtersApplied\"\n            (click)=\"host.resetForm()\"\n            i18n=\"Clear All|Filter form button clear label@@accountStatement.filter.form.button.clear.label\"\n          >\n            Clear all\n          </button>\n        </div>\n      </form>\n    </ng-template>\n  </bb-collapsible-ui>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, Directive, Input, TemplateRef, ViewChild } from '@angular/core';\n\nimport {\n  AccountStatementDataService,\n  mimeTypeExtensions,\n  MimeTypeExtensions,\n} from '@backbase/account-statement-common-ang';\nimport { AccountStatement, AccountStatementDocument } from '@backbase/data-ang/account-statements';\n\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { NotificationService } from '@backbase/ui-ang/notification';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'tr[bb-account-statement-table-row]',\n  templateUrl: './account-statement-table-row.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccountStatementTableRowComponent {\n  private static _id = 0;\n\n  /**\n   * Whether Description content is presented for specific row in the account statement list table\n   */\n  @Input() showDescription: boolean | null = true;\n\n  /**\n   * Whether Category content is presented for specific row in the account statement list table\n   */\n  @Input() showCategory: boolean | null = true;\n\n  /**\n   * Time of displaying notification after download failure in milliseconds.\n   */\n  @Input() notificationDismissTimeProperty = 0;\n\n  @ViewChild('downloadFailureNotificationHeader') downloadFailureNotificationHeader!: TemplateRef<any>;\n\n  /**\n   * Table row id.\n   * Used in creating unique ids for preview and download text for a11y\n   */\n  readonly accountStatementTableRowId = AccountStatementTableRowComponent._id++;\n\n  readonly mimeTypeExtensions: MimeTypeExtensions = mimeTypeExtensions;\n\n  /**\n   * Setter for each account statement item that will be presented in table row\n   */\n  @Input()\n  set item(value: AccountStatement | undefined) {\n    if (value) {\n      this.documentPDF = value.documents.find(document => document.contentType === 'application/pdf');\n      this.documentPDFhref = (this.documentPDF && this.getDocumentLink(this.documentPDF)) || '';\n      this.itemValue = {\n        ...value,\n        documents: value.documents.map(document => ({\n          ...document,\n          url: this.getDocumentLink(document),\n        })),\n      };\n    }\n  }\n\n  get item(): AccountStatement | undefined {\n    return this.itemValue;\n  }\n\n  documentPDF: AccountStatementDocument | undefined;\n  documentPDFhref = '';\n  readonly hostRef = this;\n\n  private itemValue: AccountStatement | undefined;\n\n  constructor(\n    private readonly dataService: AccountStatementDataService,\n    private readonly notificationsService: NotificationService,\n  ) {}\n\n  onDownloadFailure() {\n    this.notificationsService.showNotification({\n      header: this.downloadFailureNotificationHeader,\n      message: '',\n      modifier: 'error',\n      ttl: this.notificationDismissTimeProperty,\n    });\n  }\n\n  private getDocumentLink(document: AccountStatementDocument): string {\n    return document.url || this.dataService.getAccountStatementDownloadUrl(document.uid || '');\n  }\n}\n\n@Directive({ selector: '[bbAccountStatementTableRowCustomizable]' })\nexport class AccountStatementTableRowCustomizableDirective extends BbTemplate<\n  AccountStatementTableRowComponent,\n  void\n> {}\n\n@Directive({\n  selector: '[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]',\n})\nexport class AccountStatementDownloadFailureNotificationHeaderCustomizableDirective extends BbTemplate<\n  AccountStatementTableRowComponent,\n  void\n> {}\n","<ng-container bbAccountStatementTableRowCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementTableRowCustomizable let-host>\n  <div class=\"d-md-none bb-stack bb-stack--align-top\">\n    <td class=\"bb-stack__item\">\n      <div\n        class=\"bb-block bb-block--xs bb-text-semi-bold\"\n        i18n=\"Book date|Account statement table head title@@accountStatement.table.head.date.title\"\n      >\n        Book date\n      </div>\n      <div>{{ host.item.date | bbDate: 'shortDate' }}</div>\n    </td>\n\n    <bb-account-statement-view-online\n      class=\"bb-stack__item bb-stack__item--push-right\"\n      *ngIf=\"host.documentPDF\"\n      [href]=\"host.documentPDFhref\"\n      describedByElementId=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-view-online>\n\n    <bb-account-statement-downloads\n      class=\"bb-stack__item\"\n      [ngClass]=\"{ 'bb-stack__item--push-right': !host.documentPDF }\"\n      [documents]=\"host.item.documents\"\n      [mimeTypeExtensions]=\"host.mimeTypeExtensions\"\n      (downloadFailure)=\"host.onDownloadFailure()\"\n      describedByElementId=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-downloads>\n  </div>\n  <td\n    class=\"d-md-table-cell d-none\"\n    [attr.colspan]=\"host.showCategory || host.showDescription ? null : 3\"\n    data-role=\"date-td\"\n  >\n    {{ host.item.date | bbDate: 'shortDate' }}\n  </td>\n  <!--If showDescription is false, it should colspan up to the description-->\n  <td *ngIf=\"host.showCategory\" [attr.colspan]=\"host.showDescription ? null : 2\" data-role=\"category-td\">\n    <div\n      class=\"bb-block bb-block--xs bb-text-semi-bold d-md-none\"\n      i18n=\"Сategory|Account statement table head title@@accountStatement.table.head.category.title\"\n    >\n      Category\n    </div>\n    <div data-role=\"category-content\">{{ host.item.category }}</div>\n  </td>\n  <!--If showCategory is false, it should colspan including category-->\n  <td *ngIf=\"host.showDescription\" [attr.colspan]=\"host.showCategory ? null : 2\" data-role=\"description-td\">\n    <div\n      class=\"bb-block bb-block--xs bb-text-semi-bold d-md-none\"\n      i18n=\"Description|Account statement table head title@@accountStatement.table.row.description.title\"\n      data-role=\"description-label\"\n    >\n      Description\n    </div>\n    <div data-role=\"description-content\">{{ host.item.description }}</div>\n  </td>\n\n  <td class=\"d-md-table-cell d-none bb-text-align-center\">\n    <span\n      *ngIf=\"host.documentPDF\"\n      id=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n      class=\"sr-only\"\n      i18n=\"Preview for|describing preview text for screen reader@@account-statement-list.preview-button.description\"\n    >\n      Preview for\n      <ng-container *ngTemplateOutlet=\"screenReaderDescription\"></ng-container>\n    </span>\n    <bb-account-statement-view-online\n      *ngIf=\"host.documentPDF\"\n      [href]=\"host.documentPDFhref\"\n      describedByElementId=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-view-online>\n  </td>\n\n  <td class=\"d-md-table-cell d-none bb-text-align-center\">\n    <span\n      i18n=\"Download for|describing download text for screen reader@@account-statement-list.download-button.description\"\n      id=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n      class=\"sr-only\"\n    >\n      {host.item.documents?.length, plural, =1 {Download\n      {{ host.mimeTypeExtensions[host.item.documents[0]?.contentType] }}} other {Show download actions} } for\n      <ng-container *ngTemplateOutlet=\"screenReaderDescription\"></ng-container>\n    </span>\n    <bb-account-statement-downloads\n      [documents]=\"host.item.documents\"\n      [mimeTypeExtensions]=\"host.mimeTypeExtensions\"\n      (downloadFailure)=\"host.onDownloadFailure()\"\n      describedByElementId=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-downloads>\n  </td>\n  <ng-template #screenReaderDescription>\n    <span\n      i18n=\"\n        Category, description and book date for screen reader|describing what text is read by screen reader for download\n        or preview buttons @@account-statement-list.actions.description\"\n    >\n      {host.showCategory.toString(), select, true { 'category ' {{ host.item.category }} }} {(host.showCategory &&\n      host.showDescription).toString(), select, true { 'with description ' {{ host.item.description }} }}\n      {(!host.showCategory && host.showDescription).toString(), select, true { 'description'\n      {{ host.item.description }} }} {(host.showCategory || host.showDescription).toString(), select, true {'and'}} book\n      date {{ host.item.date | bbDate: 'fullDate' }}\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #downloadFailureNotificationHeader>\n  <ng-container bbAccountStatementDownloadFailureNotificationHeaderCustomizable [bbHostRef]=\"this\"> </ng-container>\n\n  <ng-template bbAccountStatementDownloadFailureNotificationHeaderCustomizable>\n    <span i18n=\"Failed to download statement@@account-statement-table-row.error-notification.header\"\n      >The statement cannot be downloaded now, please try again later</span\n    >\n  </ng-template>\n</ng-template>\n","import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';\n\nimport { SortDirection, SortingParams } from '@backbase/account-statement-common-ang';\nimport { AccountStatement } from '@backbase/data-ang/account-statements';\n\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { SortEvent } from '@backbase/ui-ang/table';\n\n@Component({\n  selector: 'bb-account-statement-table',\n  templateUrl: './account-statement-table.component.html',\n})\nexport class AccountStatementTableComponent {\n  /**\n   * Array of account statements\n   */\n  @Input() accountStatements: AccountStatement[] | null | undefined = [];\n\n  /**\n   * Whether Description column is presented in the account statement list table\n   *\n   * @default true\n   */\n  @Input() showDescription = true;\n\n  /**\n   * Whether Category column is presented in the account statement list table\n   *\n   * @default true\n   */\n  @Input() showCategory = true;\n\n  /**\n   * Initial state of sorting\n   */\n  @Input() sortingParams: SortingParams | null | undefined;\n\n  @Input() loading = false;\n\n  /**\n   * Time after notification for download failure will be dismissed.\n   */\n  @Input() notificationDismissTimeProperty = 0;\n\n  /**\n   * Emit sorting parameters change event\n   */\n  @Output() sortingParamsChange = new EventEmitter<SortingParams>();\n\n  hostRef = this;\n\n  onSort(params: SortEvent) {\n    this.sortingParamsChange.emit({\n      direction: params.direction.toUpperCase() as SortDirection,\n      orderBy: params.column,\n    });\n  }\n}\n\n@Directive({ selector: '[bbAccountStatementTableCustomizable]' })\nexport class AccountStatementTableCustomizableDirective extends BbTemplate<AccountStatementTableComponent, void> {}\n","<ng-container bbAccountStatementTableCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementTableCustomizable let-host>\n  <div class=\"table-responsive\">\n    <table\n      class=\"table\"\n      aria-label=\"Account statements table\"\n      i18n-aria-label=\"Aria label for account statements table@@accountStatement.table.aria-label\"\n      [bbTable]=\"accountStatements\"\n      (sort)=\"host.onSort($event)\"\n      bbTableFocus\n    >\n      <colgroup>\n        <col width=\"20%\" />\n        <col width=\"20%\" />\n        <col width=\"40%\" />\n        <col width=\"10%\" />\n        <col width=\"10%\" />\n      </colgroup>\n      <thead>\n        <tr>\n          <th\n            bbSortable=\"date\"\n            [direction]=\"host.sortingParams?.orderBy === 'date' ? (host.sortingParams?.direction | lowercase) : ''\"\n            scope=\"col\"\n            data-role=\"header-date\"\n            [attr.colspan]=\"host.showCategory || host.showDescription ? null : 3\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"Book date|Account statement table head title@@accountStatement.table.head.date.title\"\n              data-role=\"book-date-thead\"\n              >Book date</span\n            >\n          </th>\n          <th\n            *ngIf=\"host.showCategory\"\n            bbSortable=\"category\"\n            [direction]=\"host.sortingParams?.orderBy === 'category' ? (host.sortingParams?.direction | lowercase) : ''\"\n            scope=\"col\"\n            data-role=\"header-category\"\n            [attr.colspan]=\"host.showDescription ? null : 2\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"Сategory|Account statement table head title@@accountStatement.table.head.category.title\"\n              >Category</span\n            >\n          </th>\n          <th\n            *ngIf=\"host.showDescription\"\n            bbSortable=\"description\"\n            [attr.colspan]=\"host.showCategory ? null : 2\"\n            [direction]=\"\n              host.sortingParams?.orderBy === 'description' ? (host.sortingParams?.direction | lowercase) : ''\n            \"\n            scope=\"col\"\n            data-role=\"header-description\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"Description|Account statement table head title@@accountStatement.table.head.description.title\"\n              >Description</span\n            >\n          </th>\n          <th scope=\"col\">\n            <span\n              class=\"th-content\"\n              i18n=\"Preview|Account statement table head title@@account-statement.table.head.preview.title\"\n              data-role=\"preview-thead\"\n              >Preview</span\n            >\n          </th>\n          <th scope=\"col\">\n            <span\n              class=\"th-content\"\n              i18n=\"Download|Account statement table head title@@account-statement.table.head.download.title\"\n              data-role=\"download-thead\"\n              >Download</span\n            >\n          </th>\n        </tr>\n      </thead>\n      <tbody *ngIf=\"!host.loading\">\n        <tr\n          bb-account-statement-table-row\n          [bbRow]=\"accountStatement\"\n          [showCategory]=\"host.showCategory\"\n          [showDescription]=\"host.showDescription\"\n          *ngFor=\"let accountStatement of host.accountStatements\"\n          [item]=\"accountStatement\"\n          [notificationDismissTimeProperty]=\"host.notificationDismissTimeProperty\"\n        ></tr>\n      </tbody>\n    </table>\n\n    <bb-loading-indicator-ui *ngIf=\"host.loading\" loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n","import { Component, Directive, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport {\n  AccountItem,\n  Accounts,\n  ACCOUNTS_REQUEST_ALL_SIZE,\n  AccountStatementBaseWidgetComponent,\n  AccountStatementDataService,\n  AccountStatementGetReqParams,\n  convertDateObjToDateStruct,\n  convertDateStructToDateObj,\n  FilterParams,\n  getDateFilterLimit,\n  LoadingParams,\n  LoadingState,\n  PaginationType,\n  ProccessedAccountStatementsRawData,\n  simpleArrayCompare,\n  smartLoadingState,\n  SortingParams,\n  StateAccounts,\n  StateAccountStatements,\n  StateCategories,\n  today,\n} from '@backbase/account-statement-common-ang';\nimport { AccountStatement } from '@backbase/data-ang/account-statements';\nimport { ProductSummaryItem } from '@backbase/data-ang/arrangements';\n\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\n\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  pairwise,\n  scan,\n  shareReplay,\n  startWith,\n  switchMap,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\n\nimport { AccountStatementListWidgetPropertiesService } from './services/account-statements-list-widget-properties.service';\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\nimport { AccountStatementListWidgetProperties } from './types/account-statement-list-widget-properties';\n\nconst STORAGE_ACCOUNT_SELECTED_KEY = 'bb.product.selected';\nexport const DEFAULT_FROM_VALUE = 0;\n\n@Component({\n  selector: 'bb-account-statement-list-widget',\n  templateUrl: './account-statement-list-widget.component.html',\n  providers: [AccountStatementListWidgetPropertiesService],\n})\nexport class AccountStatementListWidgetComponent\n  extends AccountStatementBaseWidgetComponent<AccountStatementListWidgetPropertiesService>\n  implements OnInit, OnDestroy\n{\n  /**\n   * Flag to show/hide description\n   */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('showDescription') set showDescriptionValue(value: boolean | undefined) {\n    this.propertiesService.setShowDescription(value);\n  }\n\n  readonly hostRef = this;\n  readonly loadingStates = LoadingState;\n\n  accounts: StateAccounts = {\n    data: undefined,\n    error: false,\n  };\n  categories: StateCategories = {\n    data: undefined,\n    error: false,\n  };\n  accountStatements: StateAccountStatements = {\n    data: undefined,\n    error: false,\n    totalCount: undefined,\n    isLoading: LoadingState.IDLE,\n    areFiltersApplied: false,\n  };\n\n  private readonly destroy$ = new Subject<void>();\n\n  /* eslint-disable @typescript-eslint/member-ordering */\n  /**\n   * Minimal date for \"Date range\" filter. Default value is \"1970-01-01\".\n   */\n  minimalDate: Observable<NgbDateStruct> = this.initializeMinimalDateFilterLimit;\n\n  /**\n   * Maximum date for \"Date range\" filter. Default value is current date.\n   */\n  maximumDate: NgbDateStruct = convertDateObjToDateStruct(today());\n\n  readonly selectedAccount = new Subject<AccountItem | ProductSummaryItem>();\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  readonly sortingParamsNew = new BehaviorSubject<SortingParams | {}>({});\n  readonly sortingParams: Observable<SortingParams> = combineLatest([\n    this.propertiesService.sortingOrder$,\n    this.propertiesService.sortingDirection$,\n    this.sortingParamsNew,\n  ]).pipe(\n    map(([orderBy, direction, newParams]) => ({\n      orderBy,\n      direction,\n      ...newParams,\n    })),\n  );\n  readonly filterParams = new BehaviorSubject<FilterParams>({});\n  readonly loadingParamsNew = new BehaviorSubject<LoadingParams>({\n    from: DEFAULT_FROM_VALUE,\n  });\n  readonly loadingParams = combineLatest([\n    this.propertiesService.pageSize$,\n    this.loadingParamsNew,\n    this.minimalDate,\n  ]).pipe(\n    map(([size, newParams, minimalDate]) => ({\n      size,\n      from: DEFAULT_FROM_VALUE,\n      dateFrom: convertDateStructToDateObj(minimalDate),\n      dateTo: convertDateStructToDateObj(this.maximumDate),\n      ...newParams,\n    })),\n    takeUntil(this.destroy$),\n  );\n\n  accountsError?: Error = undefined;\n  accountsData = this.service\n    .getAccounts({\n      size: ACCOUNTS_REQUEST_ALL_SIZE,\n    })\n    .pipe(\n      map(response => response.body),\n      tap(accounts => {\n        this.selectAccount(accounts[0]);\n      }),\n      catchError(error => {\n        this.accountsError = error;\n        return of([]);\n      }),\n    );\n\n  widgetProperties: AccountStatementListWidgetProperties = {};\n\n  constructor(\n    private readonly service: AccountStatementDataService,\n    propertiesService: AccountStatementListWidgetPropertiesService,\n  ) {\n    super(propertiesService);\n\n    this.accounts.data = this.service.loadAccounts().pipe(\n      tap((accounts: Accounts | null) => {\n        if (accounts && accounts.length) {\n          const initialAccount = this.getInitialSelectedAccount(accounts);\n          this.selectAccount(initialAccount);\n        }\n      }),\n      catchError(() => {\n        this.accounts.error = true;\n        return of([]);\n      }),\n      shareReplay(1),\n    );\n\n    const params: Observable<AccountStatementGetReqParams> = combineLatest([\n      this.selectedAccount.pipe(\n        map(({ id }) => id),\n        distinctUntilChanged(),\n      ),\n      this.loadingParams,\n      this.sortingParams,\n      this.filterParams.pipe(\n        distinctUntilChanged(\n          (prev, cur) =>\n            simpleArrayCompare(prev.category, cur.category) &&\n            prev.dateFrom === cur.dateFrom &&\n            prev.dateTo === cur.dateTo,\n        ),\n        tap(filterParams => (this.accountStatements.areFiltersApplied = this.areFiltersApplied(filterParams))),\n      ),\n    ]).pipe(\n      map(\n        ([accountId, loadingParams, sortingParams, filterParams]) =>\n          ({\n            accountId,\n            ...loadingParams,\n            ...(sortingParams.direction && { ...sortingParams }),\n            ...filterParams,\n          } as AccountStatementGetReqParams),\n      ),\n      distinctUntilChanged((prev, cur) => {\n        if (cur.from === prev.from && cur.from !== DEFAULT_FROM_VALUE) {\n          this.setLoadingParams({ from: DEFAULT_FROM_VALUE });\n          return true;\n        }\n\n        return false;\n      }),\n    );\n\n    this.accountStatements.data = params.pipe(\n      startWith({} as AccountStatementGetReqParams),\n      pairwise(),\n      tap(([oldParams, newParams]) => {\n        this.accountStatements.isLoading = smartLoadingState(oldParams, {\n          ...newParams,\n          paginationType: this.widgetProperties.paginationType,\n        });\n        this.accountStatements.error = false;\n      }),\n      switchMap(\n        ([, newParams]): Observable<[AccountStatementGetReqParams, AccountStatement[] | null]> =>\n          this.getAccountStatements(newParams).pipe(\n            tap(\n              (response: ProccessedAccountStatementsRawData) =>\n                (this.accountStatements.totalCount = response && response.totalCount),\n            ),\n            map((response: ProccessedAccountStatementsRawData) => [newParams, response && response.data]),\n          ),\n      ),\n      scan(\n        (\n          acc: AccountStatement[],\n          [reqParams, cur]: [AccountStatementGetReqParams, AccountStatement[] | null],\n        ): AccountStatement[] => {\n          if (\n            this.widgetProperties.paginationType === PaginationType.LoadMore &&\n            reqParams.from !== DEFAULT_FROM_VALUE\n          ) {\n            return [...acc, ...(cur || [])];\n          } else {\n            return [...(cur || [])];\n          }\n        },\n        [],\n      ),\n      tap(() => (this.accountStatements.isLoading = LoadingState.IDLE)),\n    );\n\n    this.categories.data = this.showCategory.pipe(\n      filter(Boolean),\n      switchMap(() =>\n        this.service.loadCategories().pipe(\n          catchError(() => {\n            this.categories.error = true;\n            return of([]);\n          }),\n        ),\n      ),\n    );\n  }\n\n  ngOnInit() {\n    this.propertiesService.widgetProperties$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(properties => (this.widgetProperties = properties));\n  }\n\n  // TODO: Merge these getters into one observable subscription that would produce object with all widget properties\n  get pageSize(): Observable<number> {\n    return this.propertiesService.pageSize$;\n  }\n\n  get sortingOrder(): Observable<string> {\n    return this.propertiesService.sortingOrder$;\n  }\n\n  get sortingDirection(): Observable<string> {\n    return this.propertiesService.sortingDirection$;\n  }\n\n  get showDescription(): Observable<boolean> {\n    return this.propertiesService.showDescription$;\n  }\n\n  get showCategory(): Observable<boolean> {\n    return this.propertiesService.showCategory$;\n  }\n\n  get notificationDismissTimeProperty(): Observable<number> {\n    return this.propertiesService.notificationDismissTime$;\n  }\n\n  setFilterParams(params: FilterParams) {\n    this.filterParams.next(params);\n  }\n\n  setSortingParams(params: SortingParams) {\n    this.sortingParamsNew.next(params);\n  }\n\n  setLoadingParams(params: LoadingParams) {\n    this.loadingParamsNew.next({ ...params });\n  }\n\n  setPageNumber(page: number) {\n    this.loadingParamsNew.next({\n      ...this.loadingParamsNew.getValue(),\n      from: page,\n    });\n  }\n\n  selectAccount(account: AccountItem | ProductSummaryItem | undefined): void {\n    this.selectedAccount.next(account);\n  }\n\n  getInitialSelectedAccount = (accounts: Accounts): AccountItem => {\n    const accountId: string | null = window.localStorage.getItem(STORAGE_ACCOUNT_SELECTED_KEY);\n    return accounts.find(item => item.id === accountId) || accounts[0];\n  };\n\n  getAccountStatements(params: AccountStatementGetReqParams = {}): Observable<ProccessedAccountStatementsRawData> {\n    return this.service.loadAccountStatements(params).pipe(\n      catchError(() => {\n        this.accountStatements.error = true;\n        return of({ data: [], totalCount: 0 });\n      }),\n    );\n  }\n\n  private areFiltersApplied(filterParams: FilterParams): boolean {\n    const areCategoriesApplied = !!filterParams.category && filterParams.category.length !== 0;\n    const isBookDateApplied = !!filterParams.dateFrom && !!filterParams.dateTo;\n    return areCategoriesApplied || isBookDateApplied;\n  }\n\n  private get initializeMinimalDateFilterLimit() {\n    return combineLatest([\n      this.propertiesService.absoluteDateLimit$.pipe(takeUntil(this.destroy$)),\n      this.propertiesService.relativeDateLimit$.pipe(takeUntil(this.destroy$)),\n    ]).pipe(\n      map(([absoluteDateLimit, relativeMonthLimit]) => {\n        // this sets default value to the first millisecond of Unix date\n        const limitDate = getDateFilterLimit(absoluteDateLimit, relativeMonthLimit);\n        return convertDateObjToDateStruct(limitDate);\n      }),\n    );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n  }\n}\n\n@Directive({\n  selector: '[bbAccountStatementListCustomizable]',\n})\nexport class AccountStatementListCustomizableDirective extends BbTemplate<\n  AccountStatementListWidgetComponent,\n  {\n    accounts: ProductSummaryItem[];\n    accountsError?: Error;\n    categories?: string[];\n    accountStatements: AccountStatement[];\n    selectedAccount: AccountItem | ProductSummaryItem;\n  }\n> {}\n","<ng-container\n  bbAccountStatementListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    accounts: (accountsData | async)!,\n    accountsError: accountsError,\n    categories: (categories.data | async)!,\n    accountStatements: (accountStatements.data | async)!,\n    selectedAccount: (selectedAccount | async)!\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementListCustomizable\n  let-host\n  let-accounts=\"context.accounts\"\n  let-accountsError=\"context.accountsError\"\n  let-categories=\"context.categories\"\n  let-selectedAccount=\"context.selectedAccount\"\n  let-accountStatements=\"context.accountStatements\"\n>\n  <div aria-live=\"polite\">\n    <ng-container *ngIf=\"accounts; else loadingState\">\n      <ng-container *ngIf=\"!accountsError; else errorStateAccounts\">\n        <ng-container *ngIf=\"accounts.length; else emptyStateAccounts\">\n          <div class=\"bb-block bb-block--xl\">\n            <bb-account-statement-account-selector\n              [accounts]=\"accounts\"\n              (accountSelect)=\"host.selectAccount($event)\"\n            ></bb-account-statement-account-selector>\n          </div>\n\n          <div class=\"card\">\n            <ng-container\n              *ngIf=\"\n                accountStatements && host.accountStatements.isLoading !== host.loadingStates.LOADING;\n                else loadingState\n              \"\n            >\n              <ng-container *ngIf=\"!host.accountStatements.error; else errorStateAccountStatements\">\n                <ng-container\n                  *ngIf=\"\n                    accountStatements.length ||\n                      host.accountStatements.areFiltersApplied ||\n                      host.accountStatements.isLoading === host.loadingStates.LOADING_FILTERED;\n                    else emptyStateAccountStatements\n                  \"\n                >\n                  <bb-account-statement-filter-form\n                    [categories]=\"categories\"\n                    [filtersApplied]=\"host.accountStatements.areFiltersApplied\"\n                    [filterParams]=\"(host.filterParams | async)!\"\n                    (filtersChange)=\"host.setFilterParams($event)\"\n                    [showCategory]=\"host.showCategory | async\"\n                    [minDate]=\"(host.minimalDate | async)!\"\n                    [maxDate]=\"host.maximumDate\"\n                  ></bb-account-statement-filter-form>\n\n                  <ng-container\n                    *ngIf=\"host.accountStatements.isLoading !== host.loadingStates.LOADING_FILTERED; else loadingState\"\n                  >\n                    <ng-container *ngIf=\"accountStatements.length; else emptyStateAccountStatementsFiltered\">\n                      <bb-account-statement-table\n                        class=\"bb-block card-section\"\n                        [accountStatements]=\"accountStatements\"\n                        [showCategory]=\"(host.showCategory | async)!\"\n                        [showDescription]=\"(host.showDescription | async)!\"\n                        [sortingParams]=\"host.sortingParams | async\"\n                        [notificationDismissTimeProperty]=\"(host.notificationDismissTimeProperty | async)!\"\n                        [loading]=\"host.accountStatements.isLoading === host.loadingStates.LOADING_TABLE\"\n                        (sortingParamsChange)=\"host.setSortingParams($event)\"\n                      ></bb-account-statement-table>\n                      <!--Temporary add $any. Remove it once we remove the extension slots-->\n                      <bb-account-statement-pagination\n                        [paginationType]=\"host.widgetProperties.paginationType\"\n                        [loading]=\"host.accountStatements.isLoading === host.loadingStates.LOADING_MORE\"\n                        [itemsPerPage]=\"host.widgetProperties.pageSize\"\n                        [page]=\"$any(host.loadingParams | async).from\"\n                        [count]=\"host.accountStatements?.totalCount\"\n                        [hasMore]=\"accountStatements.length !== host.accountStatements?.totalCount\"\n                        (loadMore)=\"host.setPageNumber($event)\"\n                        (pageChange)=\"host.setPageNumber($event)\"\n                      >\n                      </bb-account-statement-pagination>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui\n      loaderSize=\"md\"\n      i18n-text=\"Loading data...|Loading title@@accountStatement.loading.title\"\n      text=\"Loading data...\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #emptyStateAccounts>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        iconSize=\"xxl\"\n        iconModifier=\"current-accounts\"\n        i18n-title=\"No Account selected|Accounts state title theme two@@accountStatement.accounts.state.title.theme.two\"\n        title=\"No account selected\"\n        i18n-subtitle=\"\n          You need to select account in order to view account statements|Accounts state subtitle theme\n          two@@accountStatement.accounts.state.subtitle.theme.two\"\n        subtitle=\"You need to select account in order to view account statements\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorStateAccounts>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        data-role=\"accounts-error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Account list error state subtitle@@accountStatement.account-list.error-state.subtitle\"\n        title=\"Account list is not loading\"\n        i18n-title=\"Account list is not loading error state title@@accountStatement.account-list.error-state.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyStateAccountStatements>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"description\"\n      i18n-title=\"\n        No Account Statements found|Account statements state title theme\n        two@@accountStatement.statements.state.title.theme2\"\n      title=\"No Account Statements for selected account\"\n      i18n-subtitle=\"\n        You don't have any account statements to be displayed for this account|Account statements state subtitle theme\n        two@@accountStatement.statements.state.subtitle.theme2\"\n      subtitle=\"You don't have any account statements to be displayed for this account\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #emptyStateAccountStatementsFiltered>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"search\"\n      i18n-title=\"\n        No Results Found|Account statements filtered state title@@accountStatement.statements.filtered.state.title\"\n      title=\"No Results Found\"\n      i18n-subtitle=\"\n        We can’t find what you’re looking for. Please try a different criteria.|Account statements filtered state\n        subtitle@@accountStatement.statements.filtered.state.subtitle\"\n      subtitle=\"We can’t find what you’re looking for. Please try a different criteria.\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #errorStateAccountStatements>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      data-role=\"account-statements-error-state\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      i18n-subtitle=\"Account statements list error state subtitle@@accountStatement.statement-list.error-state.subtitle\"\n      title=\"Account statement list is not loading\"\n      i18n-title=\"\n        Account statement list is not loading error state title@@accountStatement.statement-list.error-state.title\"\n    >\n    </bb-empty-state-ui>\n  </ng-template>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AccountStatementCommonModule } from '@backbase/account-statement-common-ang';\nimport { BackbaseCoreModule } from '@backbase/foundation-ang/core';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport {\n  AccountStatementListCustomizableDirective,\n  AccountStatementListWidgetComponent,\n} from './account-statement-list-widget.component';\n\nimport {\n  AccountStatementFilterFormComponent,\n  AccountStatementFilterFormCustomizableDirective,\n} from './components/account-statement-filter-form/account-statement-filter-form.component';\nimport {\n  AccountStatementDownloadFailureNotificationHeaderCustomizableDirective,\n  AccountStatementTableRowComponent,\n  AccountStatementTableRowCustomizableDirective,\n} from './components/account-statement-table-row/account-statement-table-row.component';\nimport {\n  AccountStatementTableComponent,\n  AccountStatementTableCustomizableDirective,\n} from './components/account-statement-table/account-statement-table.component';\nimport { ButtonModule } from '@backbase/ui-ang/button';\nimport { CollapsibleModule } from '@backbase/ui-ang/collapsible';\nimport { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';\nimport { DropdownMultiSelectModule } from '@backbase/ui-ang/dropdown-multi-select';\nimport { EmptyStateModule } from '@backbase/ui-ang/empty-state';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';\nimport { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';\nimport { ListMultipleSelectModule } from '@backbase/ui-ang/list-multiple-select';\nimport { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';\nimport { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';\nimport { ProductSelectorModule } from '@backbase/ui-ang/product-selector';\nimport { TableModule } from '@backbase/ui-ang/table';\nimport { NotificationModule } from '@backbase/ui-ang/notification';\nimport { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';\n\nconst components = [\n  AccountStatementListWidgetComponent,\n  AccountStatementFilterFormComponent,\n  AccountStatementTableComponent,\n  AccountStatementTableRowComponent,\n];\n\nconst directives = [\n  AccountStatementListCustomizableDirective,\n  AccountStatementFilterFormCustomizableDirective,\n  AccountStatementTableCustomizableDirective,\n  AccountStatementTableRowCustomizableDirective,\n  AccountStatementDownloadFailureNotificationHeaderCustomizableDirective,\n];\n\nconst uiModules = [\n  NgbDropdownModule,\n  ButtonModule,\n  CollapsibleModule,\n  DropdownMenuModule,\n  EmptyStateModule,\n  IconModule,\n  InputDatepickerModule,\n  InputValidationMessageModule,\n  ListMultipleSelectModule,\n  LoadingIndicatorModule,\n  ProductItemBasicAccountModule,\n  ProductSelectorModule,\n  DropdownMultiSelectModule,\n  TableModule,\n  NotificationModule,\n  BbDatePipeModule,\n];\n\n@NgModule({\n  declarations: [...components, ...directives],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AccountStatementCommonModule,\n    BackbaseCoreModule.withConfig({\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      classMap: { AccountStatementListWidgetComponent },\n    }),\n    ...uiModules,\n  ],\n  exports: [AccountStatementCommonModule, ...components, ...directives, ...uiModules],\n})\nexport class AccountStatementListWidgetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}