import * as i3$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Optional, EventEmitter, Component, Input, Output, ViewChild, Directive, ChangeDetectionStrategy, NgModule } from '@angular/core';
import * as i1$1 from '@angular/forms';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i1$2 from '@backbase/account-statement-common-ang';
import { AccountStatementBasePropertiesService, PaginationType, modelItemToBoolean, mimeTypeExtensions, AccountStatementBaseWidgetComponent, LoadingState, convertDateObjToDateStruct, today, convertDateStructToDateObj, ACCOUNTS_REQUEST_ALL_SIZE, simpleArrayCompare, smartLoadingState, getDateFilterLimit, AccountStatementCommonModule } from '@backbase/account-statement-common-ang';
import * as i1 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { map, takeUntil, tap, catchError, shareReplay, distinctUntilChanged, startWith, pairwise, switchMap, scan, filter } from 'rxjs/operators';
import * as i2 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i4 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i5 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i6 from '@backbase/ui-ang/dropdown-multi-select';
import { DropdownMultiSelectModule } from '@backbase/ui-ang/dropdown-multi-select';
import * as i7 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i2$1 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i4$1 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i2$2 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i3$2 from '@backbase/ui-ang/table';
import { TableModule } from '@backbase/ui-ang/table';
import * as i6$1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import { ListMultipleSelectModule } from '@backbase/ui-ang/list-multiple-select';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import { ProductSelectorModule } from '@backbase/ui-ang/product-selector';

/* eslint-disable @typescript-eslint/naming-convention */
const ListWidgetProperties = {
    SHOW_DESCRIPTION: 'bb.accountStatement.showDescription',
    PAGINATION_TYPE: 'bb.accountStatement.paginationType',
};

class AccountStatementListWidgetPropertiesService extends AccountStatementBasePropertiesService {
    constructor(itemModel) {
        super(itemModel);
        this.showDescription$$ = new BehaviorSubject(undefined);
        /* eslint-disable @typescript-eslint/member-ordering */
        this.showDescription$ = this.getWidgetProperty$(this.showDescription$$, this.showDescriptionIM$);
        this.widgetProperties$ = combineLatest([
            this.pageSize$,
            this.sortingOrder$,
            this.sortingDirection$,
            this.notificationDismissTime$,
            this.showCategory$,
            this.showDescription$,
            this.relativeDateLimit$,
            this.absoluteDateLimit$,
            this.paginationType$,
        ]).pipe(map(([pageSize, sortingOrder, sortingDirection, notificationDismissTimeProperty, showCategory, showDescription, relativeDateLimit, absoluteDateLimit, paginationType,]) => ({
            pageSize,
            sortingOrder,
            sortingDirection,
            notificationDismissTimeProperty,
            showCategory,
            showDescription,
            relativeDateLimit,
            absoluteDateLimit,
            paginationType,
        })));
    }
    /* eslint-enable @typescript-eslint/member-ordering */
    setShowDescription(value) {
        this.showDescription$$.next(value);
    }
    getPaginationTypeIM$() {
        var _a;
        const defaultValue = PaginationType.LoadMore;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(ListWidgetProperties.PAGINATION_TYPE, defaultValue)) || of(defaultValue);
    }
    get showDescriptionIM$() {
        var _a;
        const defaultValue = true;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(ListWidgetProperties.SHOW_DESCRIPTION, defaultValue).pipe(map(modelItemToBoolean))) ||
            of(defaultValue));
    }
}
AccountStatementListWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementListWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class AccountStatementFilterFormComponent {
    constructor(fb) {
        this.fb = fb;
        /**
         * Array of account statement categories
         */
        this.categories = [];
        /**
         * Whether default category is presented in filter section.
         */
        this.showCategory = true;
        /**
         * Whether filter options applied to all account statement list elements
         */
        this.filtersApplied = false;
        this.filterParams = {};
        /**
         * Emit filter change event
         */
        this.filtersChange = new EventEmitter();
        this.filterForm = this.fb.group({});
        this.hostRef = this;
        this.unsubscribe = new Subject();
    }
    ngOnInit() {
        this.createForm();
    }
    ngOnDestroy() {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    createForm() {
        var _a, _b, _c;
        this.filterForm = this.fb.group({
            categories: [((_a = this.filterParams) === null || _a === void 0 ? void 0 : _a.category) || []],
            bookDate: ((_b = this.filterParams) === null || _b === void 0 ? void 0 : _b.dateFrom)
                ? {
                    from: this.filterParams.dateFrom,
                    to: (_c = this.filterParams) === null || _c === void 0 ? void 0 : _c.dateTo,
                }
                : '',
        });
    }
    resetForm() {
        this.filterForm.reset();
        this.filtersChange.emit({});
        this.focusFilterButton();
    }
    onSubmit() {
        const categoriesValue = this.filterForm.controls['categories'].value || [];
        const { from: dateFrom = '', to: dateTo = '' } = (this.filterForm && this.filterForm.controls['bookDate'].value) || {};
        this.filtersChange.emit(Object.assign(Object.assign({ category: categoriesValue }, (dateFrom && {
            dateFrom,
        })), ((dateTo || dateFrom) && {
            dateTo: dateTo || dateFrom,
        })));
        this.filterForm.markAsPristine();
        this.focusFilterButton();
    }
    focusFilterButton() {
        if (this.filterButton) {
            this.filterButton.nativeElement.focus();
        }
    }
}
AccountStatementFilterFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementFilterFormComponent, deps: [{ token: i1$1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementFilterFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementFilterFormComponent, selector: "bb-account-statement-filter-form", inputs: { categories: "categories", showCategory: "showCategory", filtersApplied: "filtersApplied", filterParams: "filterParams", minDate: "minDate", maxDate: "maxDate" }, outputs: { filtersChange: "filtersChange" }, viewQueries: [{ propertyName: "filterButton", first: true, predicate: ["filterButton"], descendants: true }], ngImport: i0, template: "<ng-container bbAccountStatementFilterFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementFilterFormCustomizable let-host>\n  <bb-collapsible-ui>\n    <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\" let-toggle=\"toggle\">\n      <div class=\"card-header bb-button-bar bb-button-bar--reverse\">\n        <button\n          class=\"bb-button-bar__button\"\n          bbButton\n          #filterButton\n          data-role=\"collapsible-filter-btn\"\n          [color]=\"host.filtersApplied && !host.isOpen ? 'primary' : 'secondary'\"\n          [class.active]=\"host.isOpen\"\n          (click)=\"toggle()\"\n        >\n          <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n          <span\n            *ngIf=\"host.filtersApplied && !host.isOpen; else filterButtonTextDefault\"\n            i18n=\"\n              Filters applied|Filter form button filter label@@accountStatement.filter.form.button.filter.applied.label\"\n          >\n            Filters applied\n          </span>\n          <ng-template #filterButtonTextDefault>\n            <span i18n=\"Filter|Filter form button filter label@@accountStatement.filter.form.button.filter.label\">\n              Filter\n            </span>\n          </ng-template>\n        </button>\n      </div>\n    </ng-template>\n\n    <ng-template bbCollapsibleBody let-toggle=\"toggle\">\n      <form\n        data-role=\"filter-form\"\n        class=\"card-body account-statements-filter__form-container\"\n        [formGroup]=\"host.filterForm\"\n      >\n        <div class=\"row\">\n          <div class=\"bb-block bb-block--md col-12 col-sm-6\" *ngIf=\"host.filterForm.controls['bookDate']\">\n            <bb-input-datepicker-ui\n              i18n-label=\"Book date|Filter form book date label@@accountStatement.filter.form.datepicker.label\"\n              label=\"Book date range\"\n              labelClasses=\"form-label\"\n              [rangeSelection]=\"true\"\n              [minDate]=\"hostRef.minDate!\"\n              [maxDate]=\"hostRef.maxDate!\"\n              aria-label=\"Book date\"\n              i18n-aria-label=\"Book date filter aria label@@accountStatement.filter.form.datepicker.aria-label\"\n              [attr.aria-invalid]=\"host.filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n              formControlName=\"bookDate\"\n              data-role=\"book-date\"\n            ></bb-input-datepicker-ui>\n\n            <bb-input-validation-message-ui\n              class=\"account-statements-filter__validation-message\"\n              aria-live=\"polite\"\n              [showErrors]=\"host.filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n            >\n              <span\n                i18n=\"\n                  Error invalid date format in book date\n                  range@@accountStatement.filter.form.datepicker.error.invalidDateFormat\"\n                data-role=\"invalid-book-date-error-message\"\n                >Invalid date format</span\n              >\n            </bb-input-validation-message-ui>\n\n            <bb-input-validation-message-ui\n              class=\"account-statements-filter__validation-message\"\n              aria-live=\"polite\"\n              [showErrors]=\"\n                !host.filterForm.controls['bookDate'].hasError('invalidDateFormat') &&\n                (host.filterForm.controls['bookDate'].hasError('dateGreaterThanMaxDate') ||\n                  host.filterForm.controls['bookDate'].hasError('dateLessThanMinDate'))\n              \"\n            >\n              <span\n                i18n=\"\n                  Selected date range contains invalid dates\n                  range@@accountStatement.filter.form.datepicker.error.dateLessThanMinDate\"\n                data-role=\"invalid-book-date-limit-error-message\"\n                >The selected dates include values outside the allowed date range. Please select a date interval in the\n                permitted time frame.</span\n              >\n            </bb-input-validation-message-ui>\n          </div>\n\n          <ng-container *ngIf=\"host.showCategory\">\n            <bb-dropdown-multi-select-ui\n              *ngIf=\"host.categories?.length\"\n              [formControl]=\"host.filterForm.controls['categories']\"\n              class=\"bb-block bb-block--lg col-12 col-sm-6\"\n              data-role=\"categories-filter\"\n              placeholder=\"Select product category\"\n              i18n-placeholder=\"\n                Category select placeholder|Category multiple\n                select@@accountStatement.filter.form.categories.placeholder\"\n              label=\"Category\"\n              i18n-label=\"Category label|Category multiple select@@accountStatement.filter.form.categories.label\"\n            >\n              <bb-dropdown-multi-select-option-ui\n                *ngFor=\"let option of host.categories\"\n                [label]=\"option\"\n                [value]=\"option\"\n              >\n              </bb-dropdown-multi-select-option-ui>\n            </bb-dropdown-multi-select-ui>\n          </ng-container>\n        </div>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            type=\"submit\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"apply\"\n            [disabled]=\"host.filterForm.pristine || host.filterForm.invalid\"\n            (click)=\"host.onSubmit(); toggle()\"\n            i18n=\"Apply|Filter form button apply label@@accountStatement.filter.form.button.apply.label\"\n          >\n            Apply\n          </button>\n          <button\n            bbButton\n            color=\"secondary\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"close\"\n            (click)=\"toggle(); host.focusFilterButton()\"\n            i18n=\"Close|Filter form button close label@@accountStatement.filter.form.button.close.label\"\n          >\n            Close\n          </button>\n          <button\n            bbButton\n            color=\"link\"\n            buttonSize=\"sm\"\n            class=\"bb-button-bar__button\"\n            data-role=\"clear-all\"\n            *ngIf=\"host.filterForm.dirty || host.filtersApplied\"\n            (click)=\"host.resetForm()\"\n            i18n=\"Clear All|Filter form button clear label@@accountStatement.filter.form.button.clear.label\"\n          >\n            Clear all\n          </button>\n        </div>\n      </form>\n    </ng-template>\n  </bb-collapsible-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0.forwardRef(function () { return i3.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i4.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i5.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i6.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0.forwardRef(function () { return i6.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementFilterFormCustomizableDirective; }), selector: "[bbAccountStatementFilterFormCustomizable]" }, { type: i0.forwardRef(function () { return i2.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i3$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0.forwardRef(function () { return i1$1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i4.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0.forwardRef(function () { return i4.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0.forwardRef(function () { return i1$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i1$1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i3$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementFilterFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-filter-form',
                    templateUrl: './account-statement-filter-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.FormBuilder }]; }, propDecorators: { categories: [{
                type: Input
            }], showCategory: [{
                type: Input
            }], filtersApplied: [{
                type: Input
            }], filterParams: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], filtersChange: [{
                type: Output
            }], filterButton: [{
                type: ViewChild,
                args: ['filterButton']
            }] } });
class AccountStatementFilterFormCustomizableDirective extends BbTemplate {
}
AccountStatementFilterFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementFilterFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementFilterFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementFilterFormCustomizableDirective, selector: "[bbAccountStatementFilterFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementFilterFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementFilterFormCustomizable]' }]
        }] });

class AccountStatementTableRowComponent {
    constructor(dataService, notificationsService) {
        this.dataService = dataService;
        this.notificationsService = notificationsService;
        /**
         * Whether Description content is presented for specific row in the account statement list table
         */
        this.showDescription = true;
        /**
         * Whether Category content is presented for specific row in the account statement list table
         */
        this.showCategory = true;
        /**
         * Time of displaying notification after download failure in milliseconds.
         */
        this.notificationDismissTimeProperty = 0;
        /**
         * Table row id.
         * Used in creating unique ids for preview and download text for a11y
         */
        this.accountStatementTableRowId = AccountStatementTableRowComponent._id++;
        this.mimeTypeExtensions = mimeTypeExtensions;
        this.documentPDFhref = '';
        this.hostRef = this;
    }
    /**
     * Setter for each account statement item that will be presented in table row
     */
    set item(value) {
        if (value) {
            this.documentPDF = value.documents.find(document => document.contentType === 'application/pdf');
            this.documentPDFhref = (this.documentPDF && this.getDocumentLink(this.documentPDF)) || '';
            this.itemValue = Object.assign(Object.assign({}, value), { documents: value.documents.map(document => (Object.assign(Object.assign({}, document), { url: this.getDocumentLink(document) }))) });
        }
    }
    get item() {
        return this.itemValue;
    }
    onDownloadFailure() {
        this.notificationsService.showNotification({
            header: this.downloadFailureNotificationHeader,
            message: '',
            modifier: 'error',
            ttl: this.notificationDismissTimeProperty,
        });
    }
    getDocumentLink(document) {
        return document.url || this.dataService.getAccountStatementDownloadUrl(document.uid || '');
    }
}
AccountStatementTableRowComponent._id = 0;
AccountStatementTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableRowComponent, deps: [{ token: i1$2.AccountStatementDataService }, { token: i2$1.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableRowComponent, selector: "tr[bb-account-statement-table-row]", inputs: { showDescription: "showDescription", showCategory: "showCategory", notificationDismissTimeProperty: "notificationDismissTimeProperty", item: "item" }, viewQueries: [{ propertyName: "downloadFailureNotificationHeader", first: true, predicate: ["downloadFailureNotificationHeader"], descendants: true }], ngImport: i0, template: "<ng-container bbAccountStatementTableRowCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementTableRowCustomizable let-host>\n  <div class=\"d-md-none bb-stack bb-stack--align-top\">\n    <td class=\"bb-stack__item\">\n      <div\n        class=\"bb-block bb-block--xs bb-text-semi-bold\"\n        i18n=\"Book date|Account statement table head title@@accountStatement.table.head.date.title\"\n      >\n        Book date\n      </div>\n      <div>{{ host.item.date | bbDate: 'shortDate' }}</div>\n    </td>\n\n    <bb-account-statement-view-online\n      class=\"bb-stack__item bb-stack__item--push-right\"\n      *ngIf=\"host.documentPDF\"\n      [href]=\"host.documentPDFhref\"\n      describedByElementId=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-view-online>\n\n    <bb-account-statement-downloads\n      class=\"bb-stack__item\"\n      [ngClass]=\"{ 'bb-stack__item--push-right': !host.documentPDF }\"\n      [documents]=\"host.item.documents\"\n      [mimeTypeExtensions]=\"host.mimeTypeExtensions\"\n      (downloadFailure)=\"host.onDownloadFailure()\"\n      describedByElementId=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-downloads>\n  </div>\n  <td\n    class=\"d-md-table-cell d-none\"\n    [attr.colspan]=\"host.showCategory || host.showDescription ? null : 3\"\n    data-role=\"date-td\"\n  >\n    {{ host.item.date | bbDate: 'shortDate' }}\n  </td>\n  <!--If showDescription is false, it should colspan up to the description-->\n  <td *ngIf=\"host.showCategory\" [attr.colspan]=\"host.showDescription ? null : 2\" data-role=\"category-td\">\n    <div\n      class=\"bb-block bb-block--xs bb-text-semi-bold d-md-none\"\n      i18n=\"\u0421ategory|Account statement table head title@@accountStatement.table.head.category.title\"\n    >\n      Category\n    </div>\n    <div data-role=\"category-content\">{{ host.item.category }}</div>\n  </td>\n  <!--If showCategory is false, it should colspan including category-->\n  <td *ngIf=\"host.showDescription\" [attr.colspan]=\"host.showCategory ? null : 2\" data-role=\"description-td\">\n    <div\n      class=\"bb-block bb-block--xs bb-text-semi-bold d-md-none\"\n      i18n=\"Description|Account statement table head title@@accountStatement.table.row.description.title\"\n      data-role=\"description-label\"\n    >\n      Description\n    </div>\n    <div data-role=\"description-content\">{{ host.item.description }}</div>\n  </td>\n\n  <td class=\"d-md-table-cell d-none bb-text-align-center\">\n    <span\n      *ngIf=\"host.documentPDF\"\n      id=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n      class=\"sr-only\"\n      i18n=\"Preview for|describing preview text for screen reader@@account-statement-list.preview-button.description\"\n    >\n      Preview for\n      <ng-container *ngTemplateOutlet=\"screenReaderDescription\"></ng-container>\n    </span>\n    <bb-account-statement-view-online\n      *ngIf=\"host.documentPDF\"\n      [href]=\"host.documentPDFhref\"\n      describedByElementId=\"describe-preview-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-view-online>\n  </td>\n\n  <td class=\"d-md-table-cell d-none bb-text-align-center\">\n    <span\n      i18n=\"Download for|describing download text for screen reader@@account-statement-list.download-button.description\"\n      id=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n      class=\"sr-only\"\n    >\n      {host.item.documents?.length, plural, =1 {Download\n      {{ host.mimeTypeExtensions[host.item.documents[0]?.contentType] }}} other {Show download actions} } for\n      <ng-container *ngTemplateOutlet=\"screenReaderDescription\"></ng-container>\n    </span>\n    <bb-account-statement-downloads\n      [documents]=\"host.item.documents\"\n      [mimeTypeExtensions]=\"host.mimeTypeExtensions\"\n      (downloadFailure)=\"host.onDownloadFailure()\"\n      describedByElementId=\"describe-download-by-{{ host.accountStatementTableRowId }}\"\n    ></bb-account-statement-downloads>\n  </td>\n  <ng-template #screenReaderDescription>\n    <span\n      i18n=\"\n        Category, description and book date for screen reader|describing what text is read by screen reader for download\n        or preview buttons @@account-statement-list.actions.description\"\n    >\n      {host.showCategory.toString(), select, true { 'category ' {{ host.item.category }} }} {(host.showCategory &&\n      host.showDescription).toString(), select, true { 'with description ' {{ host.item.description }} }}\n      {(!host.showCategory && host.showDescription).toString(), select, true { 'description'\n      {{ host.item.description }} }} {(host.showCategory || host.showDescription).toString(), select, true {'and'}} book\n      date {{ host.item.date | bbDate: 'fullDate' }}\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #downloadFailureNotificationHeader>\n  <ng-container bbAccountStatementDownloadFailureNotificationHeaderCustomizable [bbHostRef]=\"this\"> </ng-container>\n\n  <ng-template bbAccountStatementDownloadFailureNotificationHeaderCustomizable>\n    <span i18n=\"Failed to download statement@@account-statement-table-row.error-notification.header\"\n      >The statement cannot be downloaded now, please try again later</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.ӨAccountStatementViewOnlineComponent; }), selector: "bb-account-statement-view-online", inputs: ["href", "describedByElementId"] }, { type: i0.forwardRef(function () { return i1$2.ӨAccountStatementDownloadsComponent; }), selector: "bb-account-statement-downloads", inputs: ["documents", "mimeTypeExtensions", "describedByElementId", "tooltipPlacement"], outputs: ["downloadFailure"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementTableRowCustomizableDirective; }), selector: "[bbAccountStatementTableRowCustomizable]" }, { type: i0.forwardRef(function () { return i3$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i3$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return AccountStatementDownloadFailureNotificationHeaderCustomizableDirective; }), selector: "[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]" }], pipes: { "bbDate": i0.forwardRef(function () { return i4$1.BbDatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableRowComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'tr[bb-account-statement-table-row]',
                    templateUrl: './account-statement-table-row.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.AccountStatementDataService }, { type: i2$1.NotificationService }]; }, propDecorators: { showDescription: [{
                type: Input
            }], showCategory: [{
                type: Input
            }], notificationDismissTimeProperty: [{
                type: Input
            }], downloadFailureNotificationHeader: [{
                type: ViewChild,
                args: ['downloadFailureNotificationHeader']
            }], item: [{
                type: Input
            }] } });
class AccountStatementTableRowCustomizableDirective extends BbTemplate {
}
AccountStatementTableRowCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableRowCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementTableRowCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableRowCustomizableDirective, selector: "[bbAccountStatementTableRowCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableRowCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementTableRowCustomizable]' }]
        }] });
class AccountStatementDownloadFailureNotificationHeaderCustomizableDirective extends BbTemplate {
}
AccountStatementDownloadFailureNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementDownloadFailureNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, selector: "[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementDownloadFailureNotificationHeaderCustomizable]',
                }]
        }] });

class AccountStatementTableComponent {
    constructor() {
        /**
         * Array of account statements
         */
        this.accountStatements = [];
        /**
         * Whether Description column is presented in the account statement list table
         *
         * @default true
         */
        this.showDescription = true;
        /**
         * Whether Category column is presented in the account statement list table
         *
         * @default true
         */
        this.showCategory = true;
        this.loading = false;
        /**
         * Time after notification for download failure will be dismissed.
         */
        this.notificationDismissTimeProperty = 0;
        /**
         * Emit sorting parameters change event
         */
        this.sortingParamsChange = new EventEmitter();
        this.hostRef = this;
    }
    onSort(params) {
        this.sortingParamsChange.emit({
            direction: params.direction.toUpperCase(),
            orderBy: params.column,
        });
    }
}
AccountStatementTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountStatementTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableComponent, selector: "bb-account-statement-table", inputs: { accountStatements: "accountStatements", showDescription: "showDescription", showCategory: "showCategory", sortingParams: "sortingParams", loading: "loading", notificationDismissTimeProperty: "notificationDismissTimeProperty" }, outputs: { sortingParamsChange: "sortingParamsChange" }, ngImport: i0, template: "<ng-container bbAccountStatementTableCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbAccountStatementTableCustomizable let-host>\n  <div class=\"table-responsive\">\n    <table\n      class=\"table\"\n      aria-label=\"Account statements table\"\n      i18n-aria-label=\"Aria label for account statements table@@accountStatement.table.aria-label\"\n      [bbTable]=\"accountStatements\"\n      (sort)=\"host.onSort($event)\"\n      bbTableFocus\n    >\n      <colgroup>\n        <col width=\"20%\" />\n        <col width=\"20%\" />\n        <col width=\"40%\" />\n        <col width=\"10%\" />\n        <col width=\"10%\" />\n      </colgroup>\n      <thead>\n        <tr>\n          <th\n            bbSortable=\"date\"\n            [direction]=\"host.sortingParams?.orderBy === 'date' ? (host.sortingParams?.direction | lowercase) : ''\"\n            scope=\"col\"\n            data-role=\"header-date\"\n            [attr.colspan]=\"host.showCategory || host.showDescription ? null : 3\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"Book date|Account statement table head title@@accountStatement.table.head.date.title\"\n              data-role=\"book-date-thead\"\n              >Book date</span\n            >\n          </th>\n          <th\n            *ngIf=\"host.showCategory\"\n            bbSortable=\"category\"\n            [direction]=\"host.sortingParams?.orderBy === 'category' ? (host.sortingParams?.direction | lowercase) : ''\"\n            scope=\"col\"\n            data-role=\"header-category\"\n            [attr.colspan]=\"host.showDescription ? null : 2\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"\u0421ategory|Account statement table head title@@accountStatement.table.head.category.title\"\n              >Category</span\n            >\n          </th>\n          <th\n            *ngIf=\"host.showDescription\"\n            bbSortable=\"description\"\n            [attr.colspan]=\"host.showCategory ? null : 2\"\n            [direction]=\"\n              host.sortingParams?.orderBy === 'description' ? (host.sortingParams?.direction | lowercase) : ''\n            \"\n            scope=\"col\"\n            data-role=\"header-description\"\n          >\n            <span\n              class=\"th-content\"\n              i18n=\"Description|Account statement table head title@@accountStatement.table.head.description.title\"\n              >Description</span\n            >\n          </th>\n          <th scope=\"col\">\n            <span\n              class=\"th-content\"\n              i18n=\"Preview|Account statement table head title@@account-statement.table.head.preview.title\"\n              data-role=\"preview-thead\"\n              >Preview</span\n            >\n          </th>\n          <th scope=\"col\">\n            <span\n              class=\"th-content\"\n              i18n=\"Download|Account statement table head title@@account-statement.table.head.download.title\"\n              data-role=\"download-thead\"\n              >Download</span\n            >\n          </th>\n        </tr>\n      </thead>\n      <tbody *ngIf=\"!host.loading\">\n        <tr\n          bb-account-statement-table-row\n          [bbRow]=\"accountStatement\"\n          [showCategory]=\"host.showCategory\"\n          [showDescription]=\"host.showDescription\"\n          *ngFor=\"let accountStatement of host.accountStatements\"\n          [item]=\"accountStatement\"\n          [notificationDismissTimeProperty]=\"host.notificationDismissTimeProperty\"\n        ></tr>\n      </tbody>\n    </table>\n\n    <bb-loading-indicator-ui *ngIf=\"host.loading\" loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return AccountStatementTableRowComponent; }), selector: "tr[bb-account-statement-table-row]", inputs: ["showDescription", "showCategory", "notificationDismissTimeProperty", "item"] }, { type: i0.forwardRef(function () { return i2$2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementTableCustomizableDirective; }), selector: "[bbAccountStatementTableCustomizable]" }, { type: i0.forwardRef(function () { return i3$2.TableDirective; }), selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i0.forwardRef(function () { return i3$2.TableFocusDirective; }), selector: "[bbTableFocus]" }, { type: i0.forwardRef(function () { return i3$2.TableSortableDirective; }), selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i0.forwardRef(function () { return i3$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i3$2.TableRowDirective; }), selector: "tr[bbRow]", inputs: ["bbRow"] }], pipes: { "lowercase": i0.forwardRef(function () { return i3$1.LowerCasePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-table',
                    templateUrl: './account-statement-table.component.html',
                }]
        }], propDecorators: { accountStatements: [{
                type: Input
            }], showDescription: [{
                type: Input
            }], showCategory: [{
                type: Input
            }], sortingParams: [{
                type: Input
            }], loading: [{
                type: Input
            }], notificationDismissTimeProperty: [{
                type: Input
            }], sortingParamsChange: [{
                type: Output
            }] } });
class AccountStatementTableCustomizableDirective extends BbTemplate {
}
AccountStatementTableCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementTableCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementTableCustomizableDirective, selector: "[bbAccountStatementTableCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementTableCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementTableCustomizable]' }]
        }] });

const STORAGE_ACCOUNT_SELECTED_KEY = 'bb.product.selected';
const DEFAULT_FROM_VALUE = 0;
class AccountStatementListWidgetComponent extends AccountStatementBaseWidgetComponent {
    constructor(service, propertiesService) {
        super(propertiesService);
        this.service = service;
        this.hostRef = this;
        this.loadingStates = LoadingState;
        this.accounts = {
            data: undefined,
            error: false,
        };
        this.categories = {
            data: undefined,
            error: false,
        };
        this.accountStatements = {
            data: undefined,
            error: false,
            totalCount: undefined,
            isLoading: LoadingState.IDLE,
            areFiltersApplied: false,
        };
        this.destroy$ = new Subject();
        /* eslint-disable @typescript-eslint/member-ordering */
        /**
         * Minimal date for "Date range" filter. Default value is "1970-01-01".
         */
        this.minimalDate = this.initializeMinimalDateFilterLimit;
        /**
         * Maximum date for "Date range" filter. Default value is current date.
         */
        this.maximumDate = convertDateObjToDateStruct(today());
        this.selectedAccount = new Subject();
        // eslint-disable-next-line @typescript-eslint/ban-types
        this.sortingParamsNew = new BehaviorSubject({});
        this.sortingParams = combineLatest([
            this.propertiesService.sortingOrder$,
            this.propertiesService.sortingDirection$,
            this.sortingParamsNew,
        ]).pipe(map(([orderBy, direction, newParams]) => (Object.assign({ orderBy,
            direction }, newParams))));
        this.filterParams = new BehaviorSubject({});
        this.loadingParamsNew = new BehaviorSubject({
            from: DEFAULT_FROM_VALUE,
        });
        this.loadingParams = combineLatest([
            this.propertiesService.pageSize$,
            this.loadingParamsNew,
            this.minimalDate,
        ]).pipe(map(([size, newParams, minimalDate]) => (Object.assign({ size, from: DEFAULT_FROM_VALUE, dateFrom: convertDateStructToDateObj(minimalDate), dateTo: convertDateStructToDateObj(this.maximumDate) }, newParams))), takeUntil(this.destroy$));
        this.accountsError = undefined;
        this.accountsData = this.service
            .getAccounts({
            size: ACCOUNTS_REQUEST_ALL_SIZE,
        })
            .pipe(map(response => response.body), tap(accounts => {
            this.selectAccount(accounts[0]);
        }), catchError(error => {
            this.accountsError = error;
            return of([]);
        }));
        this.widgetProperties = {};
        this.getInitialSelectedAccount = (accounts) => {
            const accountId = window.localStorage.getItem(STORAGE_ACCOUNT_SELECTED_KEY);
            return accounts.find(item => item.id === accountId) || accounts[0];
        };
        this.accounts.data = this.service.loadAccounts().pipe(tap((accounts) => {
            if (accounts && accounts.length) {
                const initialAccount = this.getInitialSelectedAccount(accounts);
                this.selectAccount(initialAccount);
            }
        }), catchError(() => {
            this.accounts.error = true;
            return of([]);
        }), shareReplay(1));
        const params = combineLatest([
            this.selectedAccount.pipe(map(({ id }) => id), distinctUntilChanged()),
            this.loadingParams,
            this.sortingParams,
            this.filterParams.pipe(distinctUntilChanged((prev, cur) => simpleArrayCompare(prev.category, cur.category) &&
                prev.dateFrom === cur.dateFrom &&
                prev.dateTo === cur.dateTo), tap(filterParams => (this.accountStatements.areFiltersApplied = this.areFiltersApplied(filterParams)))),
        ]).pipe(map(([accountId, loadingParams, sortingParams, filterParams]) => (Object.assign(Object.assign(Object.assign({ accountId }, loadingParams), (sortingParams.direction && Object.assign({}, sortingParams))), filterParams))), distinctUntilChanged((prev, cur) => {
            if (cur.from === prev.from && cur.from !== DEFAULT_FROM_VALUE) {
                this.setLoadingParams({ from: DEFAULT_FROM_VALUE });
                return true;
            }
            return false;
        }));
        this.accountStatements.data = params.pipe(startWith({}), pairwise(), tap(([oldParams, newParams]) => {
            this.accountStatements.isLoading = smartLoadingState(oldParams, Object.assign(Object.assign({}, newParams), { paginationType: this.widgetProperties.paginationType }));
            this.accountStatements.error = false;
        }), switchMap(([, newParams]) => this.getAccountStatements(newParams).pipe(tap((response) => (this.accountStatements.totalCount = response && response.totalCount)), map((response) => [newParams, response && response.data]))), scan((acc, [reqParams, cur]) => {
            if (this.widgetProperties.paginationType === PaginationType.LoadMore &&
                reqParams.from !== DEFAULT_FROM_VALUE) {
                return [...acc, ...(cur || [])];
            }
            else {
                return [...(cur || [])];
            }
        }, []), tap(() => (this.accountStatements.isLoading = LoadingState.IDLE)));
        this.categories.data = this.showCategory.pipe(filter(Boolean), switchMap(() => this.service.loadCategories().pipe(catchError(() => {
            this.categories.error = true;
            return of([]);
        }))));
    }
    /**
     * Flag to show/hide description
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set showDescriptionValue(value) {
        this.propertiesService.setShowDescription(value);
    }
    ngOnInit() {
        this.propertiesService.widgetProperties$
            .pipe(takeUntil(this.destroy$))
            .subscribe(properties => (this.widgetProperties = properties));
    }
    // TODO: Merge these getters into one observable subscription that would produce object with all widget properties
    get pageSize() {
        return this.propertiesService.pageSize$;
    }
    get sortingOrder() {
        return this.propertiesService.sortingOrder$;
    }
    get sortingDirection() {
        return this.propertiesService.sortingDirection$;
    }
    get showDescription() {
        return this.propertiesService.showDescription$;
    }
    get showCategory() {
        return this.propertiesService.showCategory$;
    }
    get notificationDismissTimeProperty() {
        return this.propertiesService.notificationDismissTime$;
    }
    setFilterParams(params) {
        this.filterParams.next(params);
    }
    setSortingParams(params) {
        this.sortingParamsNew.next(params);
    }
    setLoadingParams(params) {
        this.loadingParamsNew.next(Object.assign({}, params));
    }
    setPageNumber(page) {
        this.loadingParamsNew.next(Object.assign(Object.assign({}, this.loadingParamsNew.getValue()), { from: page }));
    }
    selectAccount(account) {
        this.selectedAccount.next(account);
    }
    getAccountStatements(params = {}) {
        return this.service.loadAccountStatements(params).pipe(catchError(() => {
            this.accountStatements.error = true;
            return of({ data: [], totalCount: 0 });
        }));
    }
    areFiltersApplied(filterParams) {
        const areCategoriesApplied = !!filterParams.category && filterParams.category.length !== 0;
        const isBookDateApplied = !!filterParams.dateFrom && !!filterParams.dateTo;
        return areCategoriesApplied || isBookDateApplied;
    }
    get initializeMinimalDateFilterLimit() {
        return combineLatest([
            this.propertiesService.absoluteDateLimit$.pipe(takeUntil(this.destroy$)),
            this.propertiesService.relativeDateLimit$.pipe(takeUntil(this.destroy$)),
        ]).pipe(map(([absoluteDateLimit, relativeMonthLimit]) => {
            // this sets default value to the first millisecond of Unix date
            const limitDate = getDateFilterLimit(absoluteDateLimit, relativeMonthLimit);
            return convertDateObjToDateStruct(limitDate);
        }));
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
AccountStatementListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetComponent, deps: [{ token: i1$2.AccountStatementDataService }, { token: AccountStatementListWidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementListWidgetComponent, selector: "bb-account-statement-list-widget", inputs: { showDescriptionValue: ["showDescription", "showDescriptionValue"] }, providers: [AccountStatementListWidgetPropertiesService], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbAccountStatementListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    accounts: (accountsData | async)!,\n    accountsError: accountsError,\n    categories: (categories.data | async)!,\n    accountStatements: (accountStatements.data | async)!,\n    selectedAccount: (selectedAccount | async)!\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementListCustomizable\n  let-host\n  let-accounts=\"context.accounts\"\n  let-accountsError=\"context.accountsError\"\n  let-categories=\"context.categories\"\n  let-selectedAccount=\"context.selectedAccount\"\n  let-accountStatements=\"context.accountStatements\"\n>\n  <div aria-live=\"polite\">\n    <ng-container *ngIf=\"accounts; else loadingState\">\n      <ng-container *ngIf=\"!accountsError; else errorStateAccounts\">\n        <ng-container *ngIf=\"accounts.length; else emptyStateAccounts\">\n          <div class=\"bb-block bb-block--xl\">\n            <bb-account-statement-account-selector\n              [accounts]=\"accounts\"\n              (accountSelect)=\"host.selectAccount($event)\"\n            ></bb-account-statement-account-selector>\n          </div>\n\n          <div class=\"card\">\n            <ng-container\n              *ngIf=\"\n                accountStatements && host.accountStatements.isLoading !== host.loadingStates.LOADING;\n                else loadingState\n              \"\n            >\n              <ng-container *ngIf=\"!host.accountStatements.error; else errorStateAccountStatements\">\n                <ng-container\n                  *ngIf=\"\n                    accountStatements.length ||\n                      host.accountStatements.areFiltersApplied ||\n                      host.accountStatements.isLoading === host.loadingStates.LOADING_FILTERED;\n                    else emptyStateAccountStatements\n                  \"\n                >\n                  <bb-account-statement-filter-form\n                    [categories]=\"categories\"\n                    [filtersApplied]=\"host.accountStatements.areFiltersApplied\"\n                    [filterParams]=\"(host.filterParams | async)!\"\n                    (filtersChange)=\"host.setFilterParams($event)\"\n                    [showCategory]=\"host.showCategory | async\"\n                    [minDate]=\"(host.minimalDate | async)!\"\n                    [maxDate]=\"host.maximumDate\"\n                  ></bb-account-statement-filter-form>\n\n                  <ng-container\n                    *ngIf=\"host.accountStatements.isLoading !== host.loadingStates.LOADING_FILTERED; else loadingState\"\n                  >\n                    <ng-container *ngIf=\"accountStatements.length; else emptyStateAccountStatementsFiltered\">\n                      <bb-account-statement-table\n                        class=\"bb-block card-section\"\n                        [accountStatements]=\"accountStatements\"\n                        [showCategory]=\"(host.showCategory | async)!\"\n                        [showDescription]=\"(host.showDescription | async)!\"\n                        [sortingParams]=\"host.sortingParams | async\"\n                        [notificationDismissTimeProperty]=\"(host.notificationDismissTimeProperty | async)!\"\n                        [loading]=\"host.accountStatements.isLoading === host.loadingStates.LOADING_TABLE\"\n                        (sortingParamsChange)=\"host.setSortingParams($event)\"\n                      ></bb-account-statement-table>\n                      <!--Temporary add $any. Remove it once we remove the extension slots-->\n                      <bb-account-statement-pagination\n                        [paginationType]=\"host.widgetProperties.paginationType\"\n                        [loading]=\"host.accountStatements.isLoading === host.loadingStates.LOADING_MORE\"\n                        [itemsPerPage]=\"host.widgetProperties.pageSize\"\n                        [page]=\"$any(host.loadingParams | async).from\"\n                        [count]=\"host.accountStatements?.totalCount\"\n                        [hasMore]=\"accountStatements.length !== host.accountStatements?.totalCount\"\n                        (loadMore)=\"host.setPageNumber($event)\"\n                        (pageChange)=\"host.setPageNumber($event)\"\n                      >\n                      </bb-account-statement-pagination>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui\n      loaderSize=\"md\"\n      i18n-text=\"Loading data...|Loading title@@accountStatement.loading.title\"\n      text=\"Loading data...\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #emptyStateAccounts>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        iconSize=\"xxl\"\n        iconModifier=\"current-accounts\"\n        i18n-title=\"No Account selected|Accounts state title theme two@@accountStatement.accounts.state.title.theme.two\"\n        title=\"No account selected\"\n        i18n-subtitle=\"\n          You need to select account in order to view account statements|Accounts state subtitle theme\n          two@@accountStatement.accounts.state.subtitle.theme.two\"\n        subtitle=\"You need to select account in order to view account statements\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorStateAccounts>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        data-role=\"accounts-error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Account list error state subtitle@@accountStatement.account-list.error-state.subtitle\"\n        title=\"Account list is not loading\"\n        i18n-title=\"Account list is not loading error state title@@accountStatement.account-list.error-state.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyStateAccountStatements>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"description\"\n      i18n-title=\"\n        No Account Statements found|Account statements state title theme\n        two@@accountStatement.statements.state.title.theme2\"\n      title=\"No Account Statements for selected account\"\n      i18n-subtitle=\"\n        You don't have any account statements to be displayed for this account|Account statements state subtitle theme\n        two@@accountStatement.statements.state.subtitle.theme2\"\n      subtitle=\"You don't have any account statements to be displayed for this account\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #emptyStateAccountStatementsFiltered>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"search\"\n      i18n-title=\"\n        No Results Found|Account statements filtered state title@@accountStatement.statements.filtered.state.title\"\n      title=\"No Results Found\"\n      i18n-subtitle=\"\n        We can\u2019t find what you\u2019re looking for. Please try a different criteria.|Account statements filtered state\n        subtitle@@accountStatement.statements.filtered.state.subtitle\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #errorStateAccountStatements>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      data-role=\"account-statements-error-state\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      i18n-subtitle=\"Account statements list error state subtitle@@accountStatement.statement-list.error-state.subtitle\"\n      title=\"Account statement list is not loading\"\n      i18n-title=\"\n        Account statement list is not loading error state title@@accountStatement.statement-list.error-state.title\"\n    >\n    </bb-empty-state-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.ӨAccountStatementAccountSelectorComponent; }), selector: "bb-account-statement-account-selector", inputs: ["accounts"], outputs: ["accountSelect"] }, { type: i0.forwardRef(function () { return AccountStatementFilterFormComponent; }), selector: "bb-account-statement-filter-form", inputs: ["categories", "showCategory", "filtersApplied", "filterParams", "minDate", "maxDate"], outputs: ["filtersChange"] }, { type: i0.forwardRef(function () { return AccountStatementTableComponent; }), selector: "bb-account-statement-table", inputs: ["accountStatements", "showDescription", "showCategory", "sortingParams", "loading", "notificationDismissTimeProperty"], outputs: ["sortingParamsChange"] }, { type: i0.forwardRef(function () { return i1$2.ӨAccountStatementPaginationComponent; }), selector: "bb-account-statement-pagination", inputs: ["page", "from", "count", "itemsPerPage", "paginationType", "hasMore", "loading"], outputs: ["pageChange", "loadMore"] }, { type: i0.forwardRef(function () { return i2$2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i6$1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementListCustomizableDirective; }), selector: "[bbAccountStatementListCustomizable]" }, { type: i0.forwardRef(function () { return i3$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0.forwardRef(function () { return i3$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-list-widget',
                    templateUrl: './account-statement-list-widget.component.html',
                    providers: [AccountStatementListWidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1$2.AccountStatementDataService }, { type: AccountStatementListWidgetPropertiesService }]; }, propDecorators: { showDescriptionValue: [{
                type: Input,
                args: ['showDescription']
            }] } });
class AccountStatementListCustomizableDirective extends BbTemplate {
}
AccountStatementListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementListCustomizableDirective, selector: "[bbAccountStatementListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementListCustomizable]',
                }]
        }] });

const components = [
    AccountStatementListWidgetComponent,
    AccountStatementFilterFormComponent,
    AccountStatementTableComponent,
    AccountStatementTableRowComponent,
];
const directives = [
    AccountStatementListCustomizableDirective,
    AccountStatementFilterFormCustomizableDirective,
    AccountStatementTableCustomizableDirective,
    AccountStatementTableRowCustomizableDirective,
    AccountStatementDownloadFailureNotificationHeaderCustomizableDirective,
];
const uiModules = [
    NgbDropdownModule,
    ButtonModule,
    CollapsibleModule,
    DropdownMenuModule,
    EmptyStateModule,
    IconModule,
    InputDatepickerModule,
    InputValidationMessageModule,
    ListMultipleSelectModule,
    LoadingIndicatorModule,
    ProductItemBasicAccountModule,
    ProductSelectorModule,
    DropdownMultiSelectModule,
    TableModule,
    NotificationModule,
    BbDatePipeModule,
];
class AccountStatementListWidgetModule {
}
AccountStatementListWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountStatementListWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetModule, declarations: [AccountStatementListWidgetComponent,
        AccountStatementFilterFormComponent,
        AccountStatementTableComponent,
        AccountStatementTableRowComponent, AccountStatementListCustomizableDirective,
        AccountStatementFilterFormCustomizableDirective,
        AccountStatementTableCustomizableDirective,
        AccountStatementTableRowCustomizableDirective,
        AccountStatementDownloadFailureNotificationHeaderCustomizableDirective], imports: [CommonModule,
        FormsModule,
        ReactiveFormsModule,
        AccountStatementCommonModule, i1.BackbaseCoreModule, NgbDropdownModule,
        ButtonModule,
        CollapsibleModule,
        DropdownMenuModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputValidationMessageModule,
        ListMultipleSelectModule,
        LoadingIndicatorModule,
        ProductItemBasicAccountModule,
        ProductSelectorModule,
        DropdownMultiSelectModule,
        TableModule,
        NotificationModule,
        BbDatePipeModule], exports: [AccountStatementCommonModule, AccountStatementListWidgetComponent,
        AccountStatementFilterFormComponent,
        AccountStatementTableComponent,
        AccountStatementTableRowComponent, AccountStatementListCustomizableDirective,
        AccountStatementFilterFormCustomizableDirective,
        AccountStatementTableCustomizableDirective,
        AccountStatementTableRowCustomizableDirective,
        AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, NgbDropdownModule,
        ButtonModule,
        CollapsibleModule,
        DropdownMenuModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputValidationMessageModule,
        ListMultipleSelectModule,
        LoadingIndicatorModule,
        ProductItemBasicAccountModule,
        ProductSelectorModule,
        DropdownMultiSelectModule,
        TableModule,
        NotificationModule,
        BbDatePipeModule] });
AccountStatementListWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetModule, imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            AccountStatementCommonModule,
            BackbaseCoreModule.withConfig({
                // eslint-disable-next-line @typescript-eslint/naming-convention
                classMap: { AccountStatementListWidgetComponent },
            }),
            ...uiModules,
        ], AccountStatementCommonModule, NgbDropdownModule,
        ButtonModule,
        CollapsibleModule,
        DropdownMenuModule,
        EmptyStateModule,
        IconModule,
        InputDatepickerModule,
        InputValidationMessageModule,
        ListMultipleSelectModule,
        LoadingIndicatorModule,
        ProductItemBasicAccountModule,
        ProductSelectorModule,
        DropdownMultiSelectModule,
        TableModule,
        NotificationModule,
        BbDatePipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementListWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components, ...directives],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        AccountStatementCommonModule,
                        BackbaseCoreModule.withConfig({
                            // eslint-disable-next-line @typescript-eslint/naming-convention
                            classMap: { AccountStatementListWidgetComponent },
                        }),
                        ...uiModules,
                    ],
                    exports: [AccountStatementCommonModule, ...components, ...directives, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccountStatementDownloadFailureNotificationHeaderCustomizableDirective, AccountStatementFilterFormComponent, AccountStatementFilterFormCustomizableDirective, AccountStatementListWidgetComponent, AccountStatementListWidgetModule, AccountStatementListWidgetPropertiesService, AccountStatementTableComponent, AccountStatementTableCustomizableDirective, AccountStatementTableRowComponent, AccountStatementTableRowCustomizableDirective, AccountStatementListCustomizableDirective as ӨAccountStatementListCustomizableDirective };
//# sourceMappingURL=backbase-account-statement-list-widget-ang.js.map
