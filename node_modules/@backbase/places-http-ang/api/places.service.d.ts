import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Place } from '../model/models';
import { PlacesConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetPlacesRequestParams {
    ["latitude"]: number;
    ["longitude"]: number;
    ["radius"]: number;
    ["type"]?: string;
    ["types"]?: Array<string>;
}
export declare class PlacesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PlacesConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PlacesConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getPlaces(requestParameters: GetPlacesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<Place>>;
    getPlaces(requestParameters: GetPlacesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<Place>>>;
    getPlaces(requestParameters: GetPlacesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<Place>>>;
    getPlacesUrl(requestParameters: GetPlacesRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PlacesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PlacesHttpService>;
}
