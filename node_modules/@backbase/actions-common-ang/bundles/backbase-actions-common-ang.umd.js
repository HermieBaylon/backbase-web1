(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/actions'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/input-inline-edit'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/switch'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/amount'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/data-ang/engagement')) :
    typeof define === 'function' && define.amd ? define('@backbase/actions-common-ang', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'rxjs', 'rxjs/operators', '@backbase/data-ang/actions', '@backbase/ui-ang/button', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/header', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/input-inline-edit', '@backbase/ui-ang/modal', '@backbase/ui-ang/switch', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/amount', '@backbase/foundation-ang/core', '@backbase/ui-ang/dropdown-single-select', '@backbase/data-ang/engagement'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["actions-common-ang"] = {}), global.ng.core, global.ng.common, global.ng.forms, global.rxjs, global.rxjs.operators, global.i1$1, global.i6$1, global.i2$1, global.i3$1, global.i2, global.i3, global.i6, global.modal, global.i1$2, global.i5$1, global.i5$2, global.core, global.i2$2, global.i1$3));
})(this, (function (exports, i0, i5, i1, rxjs, operators, i1$1, i6$1, i2$1, i3$1, i2, i3, i6, modal, i1$2, i5$1, i5$2, core, i2$2, i1$3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var NoFractionDigitsPipe = /** @class */ (function () {
        function NoFractionDigitsPipe() {
        }
        NoFractionDigitsPipe.prototype.transform = function (val) {
            return val ? val.replace(/\..*/, '') : '';
        };
        return NoFractionDigitsPipe;
    }());
    NoFractionDigitsPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: NoFractionDigitsPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    NoFractionDigitsPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: NoFractionDigitsPipe, name: "noFractionDigits" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: NoFractionDigitsPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'noFractionDigits',
                        pure: true,
                    }]
            }] });

    var AM_PM = ['AM', 'PM'];
    var DAYS_OF_WEEK = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];
    function getTimeOptions(startTime, minutesStep, excludedOptions, amPmFormat) {
        var timeOptions = [];
        var index = 0;
        while (startTime < 24 * 60) {
            var hh = Math.floor(startTime / 60);
            var mm = startTime % 60;
            if (!excludedOptions.includes(startTime)) {
                timeOptions[index] = {
                    label: getOptionLabel(hh, mm, amPmFormat),
                    time: startTime,
                };
                index++;
            }
            startTime = startTime + minutesStep;
        }
        return timeOptions;
    }
    function getHoursOfDay(scheduleTime) {
        if (scheduleTime === void 0) { scheduleTime = []; }
        var list = scheduleTime.map(function (time) { return String(time / 60); });
        if (!list.length) {
            for (var i = 0; i < 24; i++) {
                list.push("" + i);
            }
        }
        return list;
    }
    function hoursToMinutesArray(hours) {
        return (hours === null || hours === void 0 ? void 0 : hours.map(function (hour) { return Number(hour) * 60; })) || [];
    }
    function getOptionLabel(hh, mm, amPmFormat) {
        var getFormattedTime = function (hours, suffix) {
            if (hours === void 0) { hours = hh; }
            if (suffix === void 0) { suffix = ''; }
            return ('0' + hours).slice(-2) + '.' + ('0' + mm).slice(-2) + suffix;
        };
        return amPmFormat ? getFormattedTime(hh % 12, AM_PM[Math.floor(hh / 12)]) : getFormattedTime();
    }

    var firstNonEmptyString = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args.find(function (item) { return !!item; }) || '';
    };
    var filterObjectByPropNames = function (obj, keysToExclude) {
        var resultObj = Object.assign({}, obj);
        keysToExclude.forEach(function (id) { return delete resultObj[id]; });
        return resultObj;
    };
    var isEqualNumberArrays = function (arr1, arr2) {
        if (arr1.length !== arr2.length) {
            return false;
        }
        var sortedArr1 = sortNumberArray(arr1);
        var sortedArr2 = sortNumberArray(arr2);
        return sortedArr1.every(function (v, i) { return v === sortedArr2[i]; });
    };
    var sortNumberArray = function (arr, asc) {
        if (asc === void 0) { asc = true; }
        return arr.slice(0).sort(function (a, b) { return (asc ? a - b : b - a); });
    };

    var fromHttpResponse = function (body) {
        if (body === null) {
            throw new Error('Response body not set');
        }
        return body;
    };
    var secondsToMilliseconds = function (seconds) { return seconds * 1000; };
    var actionRecipeFormItemToRequest = function (_a) {
        var id = _a.id, name = _a.name, amount = _a.amount, actions = _a.actions, recurrence = _a.recurrence, restActionRecipe = __rest(_a, ["id", "name", "amount", "actions", "recurrence"]);
        return (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, restActionRecipe), (id && { id: id })), (name && { name: name })), { amount: (amount === null || amount === void 0 ? void 0 : amount.amount) || '0' }), (Object.keys(notificationRecurrenceFormValueToRequest(recurrence)).length && {
            recurrence: notificationRecurrenceFormValueToRequest(recurrence),
        })), { actions: notificationChannelsFormValueToRequest(actions) }));
    };
    var parseActionRecipeFormItem = function (_a) {
        var id = _a.id, name = _a.name, amount = _a.amount, actions = _a.actions, recurrence = _a.recurrence, restActionRecipe = __rest(_a, ["id", "name", "amount", "actions", "recurrence"]);
        return (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, restActionRecipe), (id && { id: id })), (name && { name: name })), { amount: amount.amount || '0', actions: parseNotificationChannelsFormValue(actions) }), (Object.keys(notificationRecurrenceFormValueToRequest(recurrence)).length && {
            recurrence: notificationRecurrenceFormValueToRequest(recurrence),
        })));
    };
    var arrangementActionRecipeToRequest = function (arrangementId) { return function (actionRecipeFormItemValue) { return (Object.assign({ arrangementId: arrangementId }, actionRecipeFormItemToRequest(actionRecipeFormItemValue))); }; };
    var mergeNotificationChannels = function (channels, defaultChannels) { return channels
        ? channels.map(function (channel) { return (Object.assign(Object.assign({}, channel), { enabled: defaultChannels.some(function (_b) {
                var type = _b.type;
                return type === channel.type;
            }) })); })
        : []; };
    var mergeSpecificationsWithActionRecipes = function (specs, recipes) { return specs.reduce(function (prev, specification) {
        var _b;
        return (Object.assign(Object.assign({}, prev), (_b = {}, _b[specification.id] = {
            specification: specification,
            actionRecipe: recipes.find(function (_b) {
                var specificationId = _b.specificationId;
                return specificationId === specification.id;
            }),
        }, _b)));
    }, {}); };
    var getMappedRecurrenceResponse = function (responseRecurrence, _b) {
        var cachedRecurrence = _b.recurrence;
        return (Object.assign(Object.assign({}, responseRecurrence), { hoursOfDay: getCachedHoursOfDay(responseRecurrence, cachedRecurrence) }));
    };
    var notificationChannelsFormValueToRequest = function (channels) { return Object.keys(channels)
        .filter(function (key) { return channels[key]; })
        .map(function (type) { return ({ type: type }); }); };
    var notificationRecurrenceFormValueToRequest = function (rec) { return (Object.assign(Object.assign({}, (((rec === null || rec === void 0 ? void 0 : rec.scheduleTime.length) || 0) !== 0 && { hoursOfDay: getHoursOfDay(rec === null || rec === void 0 ? void 0 : rec.scheduleTime) })), (((rec === null || rec === void 0 ? void 0 : rec.scheduleTime.length) || 0) !== 0 && { daysOfWeek: (rec === null || rec === void 0 ? void 0 : rec.daysOfWeek) || DAYS_OF_WEEK }))); };
    var parseNotificationChannelsFormValue = function (channels) { return Object.keys(channels).map(function (type) { return ({
        type: type,
        enabled: channels[type],
    }); }); };
    var getCachedHoursOfDay = function (responseRecurrence, cachedRecurrence) {
        if (!(cachedRecurrence === null || cachedRecurrence === void 0 ? void 0 : cachedRecurrence.scheduleTime)) {
            return responseRecurrence.hoursOfDay;
        }
        if (!isEqualNumberArrays(cachedRecurrence.scheduleTime.slice(0), hoursToMinutesArray(responseRecurrence.hoursOfDay))) {
            return responseRecurrence.hoursOfDay;
        }
        return cachedRecurrence.scheduleTime.map(function (minutes) { return String(minutes / 60); });
    };

    var ActionsFormBuilderService = /** @class */ (function () {
        function ActionsFormBuilderService(fb) {
            this.fb = fb;
        }
        /**
         * Method to build action recipe form group.
         *
         * @param specification - acton recipe specification
         * @param actionRecipe - action recipe
         * @param account - account data
         * @returns prefilled form object
         */
        ActionsFormBuilderService.prototype.buildActionRecipeFormGroup = function (specification, actionRecipe, account) {
            var actionRecipeFormValue = this.buildActionRecipeFormValue(specification, actionRecipe, account);
            return this.fb.group(Object.assign(Object.assign({}, actionRecipeFormValue), { actions: this.fb.group(actionRecipeFormValue.actions), recurrence: this.buildScheduleNotificationsFormGroup(actionRecipe) }));
        };
        /**
         * Method to build action recipe form value.
         *
         * @param specification - acton recipe specification
         * @param actionRecipe - action recipe
         * @param account - account data
         * @returns action recipe form value object
         */
        ActionsFormBuilderService.prototype.buildActionRecipeFormValue = function (specification, actionRecipe, account) {
            var _a, _b;
            var _c = actionRecipe || this.getDefaultActionRecipe(specification), actions = _c.actions, amount = _c.amount, active = _c.active, recurrence = _c.recurrence, id = _c.id, specificationId = _c.specificationId, name = _c.name;
            return Object.assign({ id: id, 
                // tslint:disable-next-line:no-null-keyword
                name: name || null, specificationId: specificationId, active: active, recurrence: this.buildRecurrenceFormItem(recurrence), amount: {
                    amount: amount,
                    currency: account ? account.currency : {},
                }, actions: this.buildChannelsFormValue(actions) }, (((_a = specification.recipeDefaults) === null || _a === void 0 ? void 0 : _a.additions) && { additions: Object.assign({}, (_b = specification.recipeDefaults) === null || _b === void 0 ? void 0 : _b.additions) }));
        };
        /**
         * Method to build schedule notificatons form group.
         *
         * @param actionRecipe - action recipe
         * @returns prefilled form object
         */
        ActionsFormBuilderService.prototype.buildScheduleNotificationsFormGroup = function (actionRecipe) {
            return this.fb.group({
                scheduleTime: this.getTimeOptions(actionRecipe),
            });
        };
        ActionsFormBuilderService.prototype.getDefaultActionRecipe = function (specification) {
            return {
                // tslint:disable-next-line:no-null-keyword
                id: null,
                // tslint:disable-next-line:no-null-keyword
                name: specification.name || null,
                specificationId: specification.id,
                amount: (specification.recipeDefaults && specification.recipeDefaults.amount) || '0',
                active: false,
                actions: mergeNotificationChannels(specification.actions, (specification.recipeDefaults && specification.recipeDefaults.actions) || []),
            };
        };
        ActionsFormBuilderService.prototype.buildChannelsFormValue = function (channels) {
            return channels.reduce(function (previous, current) {
                var _c;
                return (Object.assign(Object.assign({}, previous), (_c = {}, _c[current.type] = current.enabled, _c)));
            }, {});
        };
        ActionsFormBuilderService.prototype.buildRecurrenceFormItem = function (recurrence) {
            return Object.assign({ scheduleTime: hoursToMinutesArray(recurrence === null || recurrence === void 0 ? void 0 : recurrence.hoursOfDay) }, ((recurrence === null || recurrence === void 0 ? void 0 : recurrence.daysOfWeek) && { daysOfWeek: recurrence === null || recurrence === void 0 ? void 0 : recurrence.daysOfWeek }));
        };
        ActionsFormBuilderService.prototype.getTimeOptions = function (recipe) {
            var _this = this;
            var _a, _b;
            var mappedHours = ((_b = (_a = recipe === null || recipe === void 0 ? void 0 : recipe.recurrence) === null || _a === void 0 ? void 0 : _a.hoursOfDay) === null || _b === void 0 ? void 0 : _b.map(function (option) { return _this.fb.control(Number(option) * 60); })) || [];
            return this.fb.array((mappedHours === null || mappedHours === void 0 ? void 0 : mappedHours.length) !== 24 ? mappedHours : []);
        };
        return ActionsFormBuilderService;
    }());
    ActionsFormBuilderService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsFormBuilderService, deps: [{ token: i1__namespace.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ActionsFormBuilderService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsFormBuilderService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsFormBuilderService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.FormBuilder }]; } });

    var EMPTY_RESPONSE_ERROR = new Error('Response data is empty');

    var ACTION_RECIPES_LIMIT = 999999;
    var ActionsNotificationsSettingsDataService = /** @class */ (function () {
        function ActionsNotificationsSettingsDataService(dataHttpService, actionSpecificationsService) {
            this.dataHttpService = dataHttpService;
            this.actionSpecificationsService = actionSpecificationsService;
        }
        /**
         * Method to get action recipes.
         *
         * @param params - params object
         * @returns action recipe array
         */
        ActionsNotificationsSettingsDataService.prototype.getActionRecipes = function (params) {
            if (params === void 0) { params = {}; }
            var requestParams = Object.assign({ limit: ACTION_RECIPES_LIMIT }, params);
            return this.dataHttpService.getActionRecipes(requestParams).pipe(operators.map(fromHttpResponse), operators.map(function (response) { return response.actionRecipes; }));
        };
        /**
         * Method to get action recipe specifications.
         *
         * @returns action recipe specifications
         */
        ActionsNotificationsSettingsDataService.prototype.getSpecifications = function () {
            return this.actionSpecificationsService.getActionRecipeSpecifications({}).pipe(operators.map(fromHttpResponse), operators.map(function (response) { return response.actionRecipeSpecifications || []; }));
        };
        /**
         * Method to save action recipe.
         *
         * @param action - recipe form value
         * @param arrangementId - arrangement ID
         * @returns batch processing response
         */
        ActionsNotificationsSettingsDataService.prototype.saveActionRecipe = function (actionRecipeFormItem, arrangementId) {
            var recipeToRequest = arrangementId
                ? arrangementActionRecipeToRequest(arrangementId)
                : actionRecipeFormItemToRequest;
            var batchProcessingPutRequestBody = { actionRecipes: [recipeToRequest(actionRecipeFormItem)] };
            return this.dataHttpService
                .putBatchProcessing({ batchProcessingPutRequestBody: batchProcessingPutRequestBody })
                .pipe(operators.switchMap(function (body) { return (body ? rxjs.of(body) : rxjs.throwError(EMPTY_RESPONSE_ERROR)); }));
        };
        return ActionsNotificationsSettingsDataService;
    }());
    ActionsNotificationsSettingsDataService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationsSettingsDataService, deps: [{ token: i1__namespace$1.ActionRecipesHttpService }, { token: i1__namespace$1.ActionRecipeSpecificationsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ActionsNotificationsSettingsDataService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationsSettingsDataService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationsSettingsDataService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActionRecipesHttpService }, { type: i1__namespace$1.ActionRecipeSpecificationsHttpService }]; } });

    var ActionsNotificationChannelsComponent = /** @class */ (function () {
        function ActionsNotificationChannelsComponent(controlContainer) {
            this.controlContainer = controlContainer;
            /**
             * Action notification channels IDs.
             */
            this.id = "bb-actions-notification-channels-" + ActionsNotificationChannelsComponent.idCounter++;
            /**
             * Actions map.
             */
            this.actionsMap = new Map();
        }
        Object.defineProperty(ActionsNotificationChannelsComponent.prototype, "actions", {
            /**
             * Actions map setter.
             */
            set: function (value) {
                this.actionsMap = new Map(value.map(function (action) { return [action.type, action]; }));
            },
            enumerable: false,
            configurable: true
        });
        ActionsNotificationChannelsComponent.prototype.ngAfterContentInit = function () {
            this.formGroup = this.controlContainer.control;
        };
        return ActionsNotificationChannelsComponent;
    }());
    ActionsNotificationChannelsComponent.idCounter = 0;
    ActionsNotificationChannelsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationChannelsComponent, deps: [{ token: i1__namespace.ControlContainer }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ActionsNotificationChannelsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsNotificationChannelsComponent, selector: "bb-actions-notification-channels", inputs: { actions: "actions" }, ngImport: i0__namespace, template: "<ng-container\n  bbActionsNotificationChannelsCustomizableDirective\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    actionsMap: actionsMap\n  }\"\n></ng-container>\n\n<ng-template bbActionsNotificationChannelsCustomizableDirective let-hostRef let-actionsMap=\"context.actionsMap\">\n  <label class=\"bb-label bb-stack\" *ngIf=\"actionsMap.has('sms') || actionsMap.has('email')\">\n    <span\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      i18n=\"Title for notification channels@@actions-common.notification-channels.title\"\n      data-role=\"channel-title\"\n      >Additional channels</span\n    >\n    <bb-icon-ui\n      class=\"bb-stack__item\"\n      tabindex=\"0\"\n      name=\"info\"\n      size=\"sm\"\n      data-role=\"channel-title-icon\"\n      triggers=\"hover focus\"\n      aria-label=\"Other channels that you would like to receive notifications through, additionally to the ones in-app\"\n      i18n-aria-label=\"\n        Channels that you would like to receive notifications through@@actions-common.notification-channels.others\"\n      bbTooltip=\"Other channels that you would like to receive notifications through, additionally to the ones in-app\"\n      i18n-bbTooltip=\"@@actions-common.notification-channels.others\"\n    ></bb-icon-ui>\n  </label>\n  <div [formGroup]=\"hostRef.formGroup\">\n    <div *ngIf=\"actionsMap.has('sms')\" class=\"bb-block bb-block--sm\">\n      <bb-input-checkbox-ui\n        label=\"SMS\"\n        i18n-label=\"Label for sms channel checkbox@@actions-common.notification-channels.sms.label\"\n        formControlName=\"sms\"\n        data-role=\"sms-checkbox\"\n      ></bb-input-checkbox-ui>\n    </div>\n\n    <div *ngIf=\"actionsMap.has('email')\" class=\"bb-block bb-block--sm\">\n      <bb-input-checkbox-ui\n        label=\"Email\"\n        i18n-label=\"Label for email channel checkbox@@actions-common.notification-channels.email.label\"\n        formControlName=\"email\"\n        data-role=\"email-checkbox\"\n      ></bb-input-checkbox-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ActionsNotificationChannelsCustomizableDirective; }), selector: "[bbActionsNotificationChannelsCustomizableDirective]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationChannelsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-actions-notification-channels',
                        templateUrl: './actions-notification-channels.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ControlContainer }]; }, propDecorators: { actions: [{
                    type: i0.Input
                }] } });
    var ActionsNotificationChannelsCustomizableDirective = /** @class */ (function (_super) {
        __extends(ActionsNotificationChannelsCustomizableDirective, _super);
        function ActionsNotificationChannelsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ActionsNotificationChannelsCustomizableDirective;
    }(core.BbTemplate));
    ActionsNotificationChannelsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationChannelsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ActionsNotificationChannelsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsNotificationChannelsCustomizableDirective, selector: "[bbActionsNotificationChannelsCustomizableDirective]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationChannelsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbActionsNotificationChannelsCustomizableDirective]',
                    }]
            }] });

    // tslint:disable-next-line:directive-class-suffix
    var ArrangementBasedRecipeModel = /** @class */ (function () {
        function ArrangementBasedRecipeModel(actionsFormBuilderService) {
            this.actionsFormBuilderService = actionsFormBuilderService;
            /**
             * On submit event emitter.
             */
            this.submit = new i0.EventEmitter();
            /**
             * Specifications with actions.
             */
            this.specificationActions = [];
            /**
             * Loading flag.
             */
            this.isLoading = false;
            this.destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(ArrangementBasedRecipeModel.prototype, "specification", {
            /**
             * Specification getter.
             */
            get: function () {
                return this.specificationValue;
            },
            /**
             * Specification setter.
             */
            set: function (specification) {
                this.specificationValue = specification;
                this.specificationActions = specification.actions || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ArrangementBasedRecipeModel.prototype, "isCardExpanded", {
            /**
             * Method to check if card form control is expanded.
             *
             * @returns boolean value
             */
            get: function () {
                var activeControl = this.formGroup && this.formGroup.get('active');
                return activeControl && activeControl.value && !this.isLoading;
            },
            enumerable: false,
            configurable: true
        });
        ArrangementBasedRecipeModel.prototype.ngOnInit = function () {
            var _this = this;
            this.formGroup = this.actionsFormBuilderService.buildActionRecipeFormGroup(this.specification, this.actionRecipe, this.account);
            this.formGroup.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (value) {
                _this.onSubmit(value);
            });
        };
        ArrangementBasedRecipeModel.prototype.ngOnChanges = function (changes) {
            var actionRecipe = changes.actionRecipe;
            if (this.formGroup && actionRecipe && actionRecipe.previousValue !== actionRecipe.currentValue) {
                this.formGroup.patchValue(this.actionsFormBuilderService.buildActionRecipeFormValue(this.specification, this.actionRecipe, this.account), {
                    emitEvent: false,
                });
                this.isLoading = false;
            }
        };
        ArrangementBasedRecipeModel.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * Method to submit action recipe form.
         *
         * @param formValue - action recipe form value
         */
        ArrangementBasedRecipeModel.prototype.onSubmit = function (formValue) {
            this.submit.emit(formValue);
        };
        /**
         * Method to set loading flag to true.
         */
        ArrangementBasedRecipeModel.prototype.onActiveLoadingChange = function () {
            this.isLoading = true;
        };
        return ArrangementBasedRecipeModel;
    }());
    ArrangementBasedRecipeModel.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ArrangementBasedRecipeModel, deps: [{ token: ActionsFormBuilderService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ArrangementBasedRecipeModel.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ArrangementBasedRecipeModel, inputs: { account: "account", actionRecipe: "actionRecipe", specification: "specification" }, outputs: { submit: "submit" }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ArrangementBasedRecipeModel, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: ActionsFormBuilderService }]; }, propDecorators: { account: [{
                    type: i0.Input
                }], actionRecipe: [{
                    type: i0.Input
                }], specification: [{
                    type: i0.Input
                }], submit: [{
                    type: i0.Output
                }] } });

    var SwitchWithLoadingComponent = /** @class */ (function () {
        function SwitchWithLoadingComponent() {
            /**
             * Loading indicator presentation marker.
             */
            this.isLoading = false;
            /**
             * ControlValueAccessor on change handler.
             */
            this.onChange = function () { };
            /**
             * ControlValueAccessor on touch handler.
             */
            this.onTouch = function () { };
        }
        Object.defineProperty(SwitchWithLoadingComponent.prototype, "value", {
            /**
             * ControlValueAccessor value getter.
             */
            get: function () {
                return this._value;
            },
            /**
             * ControlValueAccessor value setter.
             */
            set: function (val) {
                this._value = val;
                this.onChange(val);
                this.onTouch(val);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Method from ControlValueAccessor to write a new value to the element.
         *
         * @param value - new value
         */
        SwitchWithLoadingComponent.prototype.writeValue = function (value) {
            this._value = value;
        };
        /**
         * Method from ControlValueAccessor to register on change handler.
         *
         * @param fn - on change handler function
         */
        SwitchWithLoadingComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * Method from ControlValueAccessor to register on touched handler.
         *
         * @param fn - on touched handler function
         */
        SwitchWithLoadingComponent.prototype.registerOnTouched = function (fn) {
            this.onTouch = fn;
        };
        return SwitchWithLoadingComponent;
    }());
    SwitchWithLoadingComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SwitchWithLoadingComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    SwitchWithLoadingComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: SwitchWithLoadingComponent, selector: "bb-switch-with-loading", inputs: { isLoading: "isLoading", ariaLabel: ["aria-label", "ariaLabel"] }, providers: [
            {
                provide: i1.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return SwitchWithLoadingComponent; }),
                multi: true,
            },
        ], ngImport: i0__namespace, template: "<bb-switch-ui\n  [aria-label]=\"ariaLabel\"\n  [(ngModel)]=\"value\"\n  (blur)=\"onTouch()\"\n  *ngIf=\"!isLoading; else loadingIndicator\"\n></bb-switch-ui>\n<ng-template #loadingIndicator>\n  <div class=\"bb-loading-indicator bb-loading-indicator--sm\" data-role=\"loading-indicator\">\n    <svg aria-label=\"Loading indicator\" class=\"bb-loading-indicator__circle\" preserveAspectRatio=\"xMinYMin meet\">\n      <circle class=\"bb-loading-indicator__path\" cx=\"50%\" cy=\"50%\" fill=\"none\" r=\"40%\" stroke=\"currentColor\"></circle>\n    </svg>\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace$2.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: SwitchWithLoadingComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-switch-with-loading',
                        templateUrl: './switch-with-loading.component.html',
                        providers: [
                            {
                                provide: i1.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return SwitchWithLoadingComponent; }),
                                multi: true,
                            },
                        ],
                    }]
            }], propDecorators: { isLoading: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input,
                    args: ['aria-label']
                }] } });

    var ActionsAccountBalanceRecipeFormComponent = /** @class */ (function (_super) {
        __extends(ActionsAccountBalanceRecipeFormComponent, _super);
        function ActionsAccountBalanceRecipeFormComponent(actionsFormBuilderService) {
            var _this = _super.call(this, actionsFormBuilderService) || this;
            /**
             * Account balance action recipe ID.
             */
            _this.id = "bb-actions-account-balance-recipe-form-" + ActionsAccountBalanceRecipeFormComponent.idCounter++;
            return _this;
        }
        /**
         * Method to patch the form with the amount and currency.
         *
         * @param amount - amount input value
         */
        ActionsAccountBalanceRecipeFormComponent.prototype.onInlineEditAccept = function (amount) {
            if (this.formGroup) {
                var amountControl = this.formGroup.get('amount');
                if (amountControl) {
                    amountControl.patchValue({
                        amount: amount || '0',
                        currency: amountControl.value.currency,
                    });
                }
            }
        };
        return ActionsAccountBalanceRecipeFormComponent;
    }(ArrangementBasedRecipeModel));
    ActionsAccountBalanceRecipeFormComponent.idCounter = 0;
    ActionsAccountBalanceRecipeFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsAccountBalanceRecipeFormComponent, deps: [{ token: ActionsFormBuilderService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ActionsAccountBalanceRecipeFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsAccountBalanceRecipeFormComponent, selector: "bb-actions-account-balance-recipe-form", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  bbActionsAccountBalanceRecipeCustomizableDirective\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    formGroup: formGroup,\n    isLoading: isLoading\n  }\"\n></ng-container>\n\n<ng-template\n  bbActionsAccountBalanceRecipeCustomizableDirective\n  let-hostRef\n  let-formGroup=\"context.formGroup\"\n  let-isLoading=\"context.isLoading\"\n>\n  <form [formGroup]=\"formGroup\">\n    <bb-collapsible-ui class=\"card\" [isOpen]=\"hostRef.isCardExpanded\">\n      <ng-template bbCollapsibleHeader>\n        <div [ngClass]=\"hostRef.isCardExpanded ? 'card-header' : 'card-body'\">\n          <div class=\"bb-stack\">\n            <bb-header-ui\n              class=\"bb-stack__item\"\n              headingType=\"h5\"\n              heading=\"Balance\"\n              i18n-heading=\"Account balance recipe heading@@actions-common.account-balance-recipe.heading\"\n              data-role=\"balance-header\"\n            ></bb-header-ui>\n            <bb-switch-with-loading\n              [isLoading]=\"isLoading\"\n              (change)=\"hostRef.onActiveLoadingChange()\"\n              formControlName=\"active\"\n              class=\"bb-stack__item bb-stack__item--push-right\"\n              aria-label=\"Enable and expand account balance notifications\"\n              i18n-aria-label=\"\n                Account balance switcher aria label@@actions-common.account-balance-recipe.switcher.aria-label\"\n              data-role=\"balance-switcher\"\n            ></bb-switch-with-loading>\n          </div>\n          <div\n            class=\"bb-text-support\"\n            i18n=\"Account balance subheading@@actions-common.account-balance-recipe.subheading\"\n            data-role=\"balance-sub-header\"\n          >\n            Receive notifications when your balance is lower than a selected amount\n          </div>\n        </div>\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <div class=\"card-body\">\n          <label\n            id=\"currency-input-label\"\n            class=\"bb-label\"\n            i18n=\"Lower than input label@@actions-common.account-balance-recipe.lower-than-input\"\n            >Lower than\n          </label>\n          <div class=\"row\">\n            <div class=\"col-sm-6 col-12 bb-block bb-block--md\">\n              <ng-template #amountTemplate>\n                <bb-amount-ui\n                  class=\"bb-highlight\"\n                  [amount]=\"formGroup.get('amount').value.amount\"\n                  [currency]=\"account?.currency\"\n                ></bb-amount-ui>\n              </ng-template>\n              <bb-input-inline-edit-ui\n                pattern=\"-?\\d{1,18}\"\n                (accept)=\"hostRef.onInlineEditAccept($event)\"\n                [inputText]=\"formGroup.get('amount').value.amount | noFractionDigits\"\n                [inputInlineTemplate]=\"amountTemplate\"\n                data-role=\"balance-input\"\n                i18n-ariaLabelEdit=\"\n                  Edit amount without\n                  fractions@@actions-common.account-balance-recipe.edit-amount-without-fractions-button\"\n                ariaLabelEdit=\"Edit amount without fractions\"\n              ></bb-input-inline-edit-ui>\n            </div>\n          </div>\n          <bb-actions-notification-channels\n            formGroupName=\"actions\"\n            [actions]=\"hostRef.specificationActions\"\n          ></bb-actions-notification-channels>\n        </div>\n      </ng-template>\n    </bb-collapsible-ui>\n  </form>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return SwitchWithLoadingComponent; }), selector: "bb-switch-with-loading", inputs: ["isLoading", "aria-label"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.InputInlineEditComponent; }), selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }, { type: i0__namespace.forwardRef(function () { return ActionsNotificationChannelsComponent; }), selector: "bb-actions-notification-channels", inputs: ["actions"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ActionsAccountBalanceRecipeCustomizableDirective; }), selector: "[bbActionsAccountBalanceRecipeCustomizableDirective]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormGroupName; }), selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "noFractionDigits": i0__namespace.forwardRef(function () { return NoFractionDigitsPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsAccountBalanceRecipeFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-actions-account-balance-recipe-form',
                        templateUrl: './actions-account-balance-recipe-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ActionsFormBuilderService }]; } });
    var ActionsAccountBalanceRecipeCustomizableDirective = /** @class */ (function (_super) {
        __extends(ActionsAccountBalanceRecipeCustomizableDirective, _super);
        function ActionsAccountBalanceRecipeCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ActionsAccountBalanceRecipeCustomizableDirective;
    }(core.BbTemplate));
    ActionsAccountBalanceRecipeCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsAccountBalanceRecipeCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ActionsAccountBalanceRecipeCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsAccountBalanceRecipeCustomizableDirective, selector: "[bbActionsAccountBalanceRecipeCustomizableDirective]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsAccountBalanceRecipeCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbActionsAccountBalanceRecipeCustomizableDirective]',
                    }]
            }] });

    var ActionsTransactionsRecipeFormComponent = /** @class */ (function (_super) {
        __extends(ActionsTransactionsRecipeFormComponent, _super);
        function ActionsTransactionsRecipeFormComponent(actionsFormBuilderService) {
            return _super.call(this, actionsFormBuilderService) || this;
        }
        return ActionsTransactionsRecipeFormComponent;
    }(ArrangementBasedRecipeModel));
    ActionsTransactionsRecipeFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsTransactionsRecipeFormComponent, deps: [{ token: ActionsFormBuilderService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ActionsTransactionsRecipeFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsTransactionsRecipeFormComponent, selector: "bb-actions-transactions-recipe-form", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  bbActionsTransactionsRecipeCustomizableDirective\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    formGroup: formGroup,\n    isLoading: isLoading\n  }\"\n></ng-container>\n\n<ng-template\n  bbActionsTransactionsRecipeCustomizableDirective\n  let-hostRef\n  let-formGroup=\"context.formGroup\"\n  let-isLoading=\"context.isLoading\"\n>\n  <form [formGroup]=\"formGroup\">\n    <bb-collapsible-ui class=\"card\" [isOpen]=\"hostRef.isCardExpanded\">\n      <ng-template bbCollapsibleHeader>\n        <div [ngClass]=\"hostRef.isCardExpanded ? 'card-header' : 'card-body'\" data-role=\"collapsible-header\">\n          <div class=\"bb-stack\">\n            <bb-header-ui\n              class=\"bb-stack__item\"\n              headingType=\"h5\"\n              heading=\"Debits and credits\"\n              i18n-heading=\"Debits and credits recipe heading@@actions-common.transactions-recipe.heading\"\n              data-role=\"transactions-recipe-header\"\n            ></bb-header-ui>\n            <bb-switch-with-loading\n              [isLoading]=\"isLoading\"\n              (change)=\"hostRef.onActiveLoadingChange()\"\n              formControlName=\"active\"\n              class=\"bb-stack__item bb-stack__item--push-right\"\n              aria-label=\"Enable and expand debits and credits notifications\"\n              i18n-aria-label=\"\n                Debits and credits switcher aria label@@actions-common.transactions-recipe.switcher.aria-label\"\n              data-role=\"transactions-recipe-switcher\"\n            ></bb-switch-with-loading>\n          </div>\n          <div\n            class=\"bb-text-support\"\n            i18n=\"Debits and credits subheading@@actions-common.transactions-recipe.subheading\"\n            data-role=\"transactions-recipe-sub-header\"\n          >\n            Receive notification when an amount is debited or credited from your account\n          </div>\n        </div>\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <div class=\"card-body\">\n          <bb-actions-notification-channels\n            formGroupName=\"actions\"\n            [actions]=\"hostRef.specificationActions\"\n          ></bb-actions-notification-channels>\n        </div>\n      </ng-template>\n    </bb-collapsible-ui>\n  </form>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return SwitchWithLoadingComponent; }), selector: "bb-switch-with-loading", inputs: ["isLoading", "aria-label"] }, { type: i0__namespace.forwardRef(function () { return ActionsNotificationChannelsComponent; }), selector: "bb-actions-notification-channels", inputs: ["actions"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ActionsTransactionsRecipeCustomizableDirective; }), selector: "[bbActionsTransactionsRecipeCustomizableDirective]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormGroupName; }), selector: "[formGroupName]", inputs: ["formGroupName"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsTransactionsRecipeFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        //TODO: remove first selector in 3.8.0
                        selector: 'bb-actions-transactions-recipe-form',
                        templateUrl: './actions-transactions-recipe-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ActionsFormBuilderService }]; } });
    var ActionsTransactionsRecipeCustomizableDirective = /** @class */ (function (_super) {
        __extends(ActionsTransactionsRecipeCustomizableDirective, _super);
        function ActionsTransactionsRecipeCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ActionsTransactionsRecipeCustomizableDirective;
    }(core.BbTemplate));
    ActionsTransactionsRecipeCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsTransactionsRecipeCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ActionsTransactionsRecipeCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsTransactionsRecipeCustomizableDirective, selector: "[bbActionsTransactionsRecipeCustomizableDirective]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsTransactionsRecipeCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbActionsTransactionsRecipeCustomizableDirective]',
                    }]
            }] });

    var MinutesInDay = 1440;
    exports.ScheduleType = void 0;
    (function (ScheduleType) {
        ScheduleType["RightAway"] = "RightAway";
        ScheduleType["Custom"] = "Custom";
    })(exports.ScheduleType || (exports.ScheduleType = {}));
    var ScheduleDescriptionText = {
        // TODO: use in component template once localize pipe will be available
        RightAway: 'Notifications will be sent immediately.',
        Custom: 'Notifications will be grouped and sent at specified time.',
    };
    var DefaultTime = 480;
    var MaxOptionsQuantity = 4;

    var TimePickerComponent = /** @class */ (function () {
        function TimePickerComponent() {
            this.timeOptions = [];
            this.excludedOptions$$ = new rxjs.BehaviorSubject([]);
            this.componentDestroyed$ = new rxjs.Subject();
            /**
             * Start time
             */
            this.startTime = 0;
            /**
             * Step on minutes for time options
             */
            this.minutesStep = 60;
            /**
             * Time form control
             */
            this.timeControl = new i1.FormControl();
            /**
             * Change event handler
             */
            this.onChange = function (_time) { }; // NOSONAR
            /**
             * Touched event handler
             */
            this.onTouched = function () { }; // NOSONAR
        }
        Object.defineProperty(TimePickerComponent.prototype, "excludedOptions", {
            /**
             * Options to exclude
             */
            set: function (options) {
                this.excludedOptions$$.next(options || []);
            },
            enumerable: false,
            configurable: true
        });
        TimePickerComponent.prototype.ngOnInit = function () {
            this.onExcludedOptionsChange();
            this.onFormValueChange();
        };
        TimePickerComponent.prototype.onExcludedOptionsChange = function () {
            var _this = this;
            this.excludedOptions$$.pipe(operators.takeUntil(this.componentDestroyed$)).subscribe(function (options) {
                var _a, _b;
                var timeControlValue = ((_a = _this.timeControl.value) === null || _a === void 0 ? void 0 : _a.time) || ((_b = _this.controlRef) === null || _b === void 0 ? void 0 : _b.value);
                var excludedOptions = timeControlValue || timeControlValue === 0 ? options.filter(function (option) { return option !== timeControlValue; }) : [];
                _this.timeOptions = getTimeOptions(_this.startTime, _this.minutesStep, excludedOptions, _this.amPmFormat);
                var selection = _this.timeOptions.find(function (option) { return option.time === timeControlValue; });
                _this.timeControl.setValue(selection);
            });
        };
        TimePickerComponent.prototype.onFormValueChange = function () {
            var _this = this;
            this.timeControl.valueChanges.pipe(operators.takeUntil(this.componentDestroyed$)).subscribe(function (value) {
                if (value) {
                    _this.onChange(value.time);
                }
            });
        };
        /**
         * Method to register change event handler
         *
         * @param fn
         */
        TimePickerComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * Method to register touched event handler
         *
         * @param fn
         */
        TimePickerComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * Method to write initial value to the input
         *
         * @param time
         */
        TimePickerComponent.prototype.writeValue = function (time) {
            this.timeControl.setValue(this.timeOptions.find(function (ts) { return ts.time === time; }));
        };
        TimePickerComponent.prototype.markAsTouched = function (event) {
            var target = event.target;
            target.blur();
            this.onTouched();
        };
        TimePickerComponent.prototype.ngOnDestroy = function () {
            this.componentDestroyed$.next(true);
        };
        return TimePickerComponent;
    }());
    TimePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: TimePickerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TimePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: TimePickerComponent, selector: "bb-time-picker", inputs: { startTime: "startTime", minutesStep: "minutesStep", amPmFormat: "amPmFormat", excludedOptions: "excludedOptions", controlRef: "controlRef", label: "label" }, providers: [
            {
                provide: i1.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return TimePickerComponent; }),
                multi: true,
            },
        ], ngImport: i0__namespace, template: "<bb-dropdown-single-select-ui\n  iconName=\"caret-down\"\n  [options]=\"timeOptions\"\n  [label]=\"label\"\n  (change)=\"markAsTouched($event)\"\n  [formControl]=\"timeControl\"\n  displayAttributePath=\"label\"\n  data-role=\"time-picker-dropdown\"\n>\n</bb-dropdown-single-select-ui>\n", components: [{ type: i2__namespace$2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }], directives: [{ type: i1__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: TimePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-time-picker',
                        templateUrl: './time-picker.component.html',
                        providers: [
                            {
                                provide: i1.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return TimePickerComponent; }),
                                multi: true,
                            },
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { startTime: [{
                    type: i0.Input
                }], minutesStep: [{
                    type: i0.Input
                }], amPmFormat: [{
                    type: i0.Input
                }], excludedOptions: [{
                    type: i0.Input
                }], controlRef: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }] } });

    var ActionsScheduleNotificationsComponent = /** @class */ (function () {
        function ActionsScheduleNotificationsComponent(fb) {
            this.fb = fb;
            /**
             * Schedule type enum
             */
            this.ScheduleType = exports.ScheduleType;
            /**
             * Maximum options quantity
             */
            this.MaxOptionsQuantity = MaxOptionsQuantity;
            /**
             * Stream of selected options
             */
            this.selectedTimeOptions$ = rxjs.of([]);
            this.selectedTimeOptions = [];
            this.destroy$ = new rxjs.Subject();
            /**
             * Minutes step in time options list.
             */
            this.minutesStep = 60;
            /**
             * Schedule form submit output.
             */
            this.submit = new i0.EventEmitter();
        }
        ActionsScheduleNotificationsComponent.prototype.ngOnInit = function () {
            this.scheduleType = this.getScheduleType(this.actionRecipe);
            this.onScheduleFormChange();
        };
        ActionsScheduleNotificationsComponent.prototype.onScheduleTypeChange = function (event) {
            var target = event.target;
            if (this.scheduleType === this.ScheduleType.RightAway) {
                this.resetScheduleForm();
            }
            else if (this.scheduleType === this.ScheduleType.Custom) {
                this.addTimeOption();
            }
            target.blur();
        };
        ActionsScheduleNotificationsComponent.prototype.addTimeOption = function () {
            this.scheduleTime.push(this.fb.control(this.defaultTime));
            this.submitScheduleForm();
        };
        ActionsScheduleNotificationsComponent.prototype.deleteTimeOption = function (index) {
            this.scheduleTime.removeAt(index);
            this.submitScheduleForm();
        };
        ActionsScheduleNotificationsComponent.prototype.timeControlChange = function () {
            this.submitScheduleForm();
        };
        ActionsScheduleNotificationsComponent.prototype.onScheduleFormChange = function () {
            var _this = this;
            this.selectedTimeOptions$ = this.scheduleForm.controls.scheduleTime.valueChanges.pipe(operators.filter(function (val) { return val; }), operators.tap(function (val) { return (_this.selectedTimeOptions = val); }), operators.distinctUntilChanged(), operators.takeUntil(this.destroy$));
        };
        ActionsScheduleNotificationsComponent.prototype.submitScheduleForm = function () {
            this.submit.emit(this.scheduleForm);
        };
        ActionsScheduleNotificationsComponent.prototype.getScheduleType = function (recipe) {
            var _a, _b;
            var hoursOfDayQuantity = ((_b = (_a = recipe.recurrence) === null || _a === void 0 ? void 0 : _a.hoursOfDay) === null || _b === void 0 ? void 0 : _b.length) || 0;
            var hoursScheduleApplied = hoursOfDayQuantity !== 0 && hoursOfDayQuantity !== 24;
            if (!hoursScheduleApplied) {
                return exports.ScheduleType.RightAway;
            }
            return exports.ScheduleType.Custom;
        };
        ActionsScheduleNotificationsComponent.prototype.resetScheduleForm = function () {
            this.scheduleTime.clear();
            this.submitScheduleForm();
        };
        Object.defineProperty(ActionsScheduleNotificationsComponent.prototype, "scheduleTime", {
            /**
             * Getter for repeat count control
             */
            get: function () {
                return this.scheduleForm.get('scheduleTime');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ActionsScheduleNotificationsComponent.prototype, "defaultTime", {
            /**
             * Getter for default time which returns 08:00 for the first option and +1 hour for subsequent
             */
            get: function () {
                var lastSelectedTimeOption = this.lastSelectedTimeOption;
                var defaultTime = lastSelectedTimeOption + this.minutesStep;
                if (!lastSelectedTimeOption && lastSelectedTimeOption !== 0) {
                    return DefaultTime;
                }
                if (defaultTime === MinutesInDay) {
                    defaultTime = 0;
                }
                while (this.selectedTimeOptions.includes(defaultTime)) {
                    if (defaultTime === MinutesInDay) {
                        defaultTime = 0;
                    }
                    else {
                        defaultTime = defaultTime + 60;
                    }
                }
                return defaultTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ActionsScheduleNotificationsComponent.prototype, "lastSelectedTimeOption", {
            /**
             * Getter for last added time option
             */
            get: function () {
                var _a;
                return (_a = this.scheduleTime.controls[this.scheduleTime.controls.length - 1]) === null || _a === void 0 ? void 0 : _a.value;
            },
            enumerable: false,
            configurable: true
        });
        ActionsScheduleNotificationsComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        return ActionsScheduleNotificationsComponent;
    }());
    ActionsScheduleNotificationsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsScheduleNotificationsComponent, deps: [{ token: i1__namespace.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ActionsScheduleNotificationsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsScheduleNotificationsComponent, selector: "bb-actions-schedule-notifications", inputs: { actionRecipe: "actionRecipe", scheduleForm: "scheduleForm", minutesStep: "minutesStep" }, outputs: { submit: "submit" }, ngImport: i0__namespace, template: "<ng-container bbActionsScheduleNotificationsComponentCustomizableDirective [bbHostRef]=\"this\"> </ng-container>\n<ng-template bbActionsScheduleNotificationsComponentCustomizableDirective let-hostRef>\n  <div class=\"row bb-block bb-block--md bb-stack bb-stack--align-baseline\">\n    <div class=\"col-3\">\n      <span i18n=\"Notify me label@@actions-common.actions-schedule-notifications.title\"> Notify me </span>\n    </div>\n    <div class=\"col-3\">\n      <bb-dropdown-single-select-ui\n        iconName=\"caret-down\"\n        [required]=\"true\"\n        [(ngModel)]=\"hostRef.scheduleType\"\n        (change)=\"hostRef.onScheduleTypeChange($event)\"\n        aria-label=\"Schedule type\"\n        i18n-aria-label=\"\n          Schedule type dropdown@@actions-common.actions-schedule-notifications.schedule-type-dropdown.aria-label\"\n        data-role=\"notifications-schedule-type\"\n      >\n        <bb-dropdown-single-select-option-ui\n          i18n-label=\"\n            Schedule type dropdown right away\n            option@@actions-common.actions-schedule-notifications.schedule-type-right-away-option.label\"\n          label=\"Right away\"\n          [value]=\"hostRef.ScheduleType.RightAway\"\n        ></bb-dropdown-single-select-option-ui>\n        <bb-dropdown-single-select-option-ui\n          i18n-label=\"\n            Schedule type dropdown custom\n            option@@actions-common.actions-schedule-notifications.schedule-type-custom-option.label\"\n          label=\"Custom\"\n          [value]=\"hostRef.ScheduleType.Custom\"\n        ></bb-dropdown-single-select-option-ui>\n      </bb-dropdown-single-select-ui>\n    </div>\n    <div\n      class=\"col-6 row bb-stack bb-stack--align-baseline no-gutters\"\n      *ngIf=\"hostRef.scheduleType === hostRef.ScheduleType.Custom\"\n    >\n      <span\n        class=\"col-1\"\n        i18n=\"Schedule time picker title @@actions-common.actions-schedule-notifications.schedule-time-picker.title\"\n        >At</span\n      >\n      <form class=\"col-11\" [formGroup]=\"hostRef.scheduleForm\">\n        <div\n          class=\"row no-gutters bb-block bb-block--md\"\n          formArrayName=\"scheduleTime\"\n          *ngFor=\"let ref of hostRef.scheduleTime.controls; let i = index; let last = last\"\n        >\n          <bb-time-picker\n            class=\"col-6 actions-schedule-time-picker__dropdown\"\n            [formControlName]=\"i\"\n            [excludedOptions]=\"hostRef.selectedTimeOptions$ | async\"\n            [controlRef]=\"ref\"\n            [minutesStep]=\"hostRef.minutesStep\"\n            (change)=\"hostRef.timeControlChange()\"\n            data-role=\"schedule-time-picker\"\n            i18n-aria-label=\"\n              Schedule time picker label @@actions-common.actions-schedule-notifications.schedule-time-picker.aria-label\"\n            aria-label=\"actions-schedule-notifications-time-picker\"\n          ></bb-time-picker>\n          <button\n            bbButton\n            circle=\"true\"\n            *ngIf=\"last && i !== 0\"\n            (click)=\"hostRef.deleteTimeOption(i)\"\n            color=\"link\"\n            aria-label=\"Delete time option\"\n            i18n-aria-label=\"\n              Schedule delete time option\n              @@actions-common.actions-schedule-notifications.schedule-delete-time-option.aria-label\"\n            data-role=\"delete-time-option\"\n          >\n            <bb-icon-ui name=\"delete\" class=\"text-muted\"></bb-icon-ui>\n          </button>\n        </div>\n        <button\n          bbButton\n          class=\"bb-stack__item\"\n          color=\"primary\"\n          circle=\"true\"\n          buttonSize=\"sm\"\n          type=\"button\"\n          *ngIf=\"hostRef.scheduleTime.controls.length < hostRef.MaxOptionsQuantity\"\n          (click)=\"hostRef.addTimeOption()\"\n          aria-label=\"Add time option\"\n          i18n-aria-label=\"\n            Schedule add time option @@actions-common.actions-schedule-notifications.schedule-time-add-option.aria-label\"\n          data-role=\"add-time-option\"\n        >\n          <bb-icon-ui name=\"add\" size=\"sm\"></bb-icon-ui>\n        </button>\n      </form>\n    </div>\n  </div>\n  <div class=\"bb-block bb-block--md text-center bb-text-support\" data-role=\"schedule-description\">\n    <em i18n=\"Schedule description@@actions-common.actions-schedule-notifications.schedule-description\">\n      Notifications will be {hostRef.scheduleType, select, Custom {grouped and sent at specified time.} RightAway {sent\n      immediately.}}\n    </em>\n    <hr />\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$2.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0__namespace.forwardRef(function () { return TimePickerComponent; }), selector: "bb-time-picker", inputs: ["startTime", "minutesStep", "amPmFormat", "excludedOptions", "controlRef", "label"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ActionsScheduleNotificationsComponentCustomizableDirective; }), selector: "[bbActionsScheduleNotificationsComponentCustomizableDirective]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormArrayName; }), selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i5__namespace.AsyncPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsScheduleNotificationsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-actions-schedule-notifications',
                        templateUrl: './actions-schedule-notifications.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.FormBuilder }]; }, propDecorators: { actionRecipe: [{
                    type: i0.Input
                }], scheduleForm: [{
                    type: i0.Input
                }], minutesStep: [{
                    type: i0.Input
                }], submit: [{
                    type: i0.Output
                }] } });
    var ActionsScheduleNotificationsComponentCustomizableDirective = /** @class */ (function (_super) {
        __extends(ActionsScheduleNotificationsComponentCustomizableDirective, _super);
        function ActionsScheduleNotificationsComponentCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ActionsScheduleNotificationsComponentCustomizableDirective;
    }(core.BbTemplate));
    ActionsScheduleNotificationsComponentCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsScheduleNotificationsComponentCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ActionsScheduleNotificationsComponentCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsScheduleNotificationsComponentCustomizableDirective, selector: "[bbActionsScheduleNotificationsComponentCustomizableDirective]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsScheduleNotificationsComponentCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbActionsScheduleNotificationsComponentCustomizableDirective]',
                    }]
            }] });

    var ActionsToggleRecipeFormComponent = /** @class */ (function () {
        function ActionsToggleRecipeFormComponent(actionsFormBuilderService) {
            this.actionsFormBuilderService = actionsFormBuilderService;
            /**
             * Flag to control if schedule notifications is enabled
             */
            this.scheduleEnabled = false;
            /**
             * On form submit output.
             */
            this.submit = new i0.EventEmitter();
            /**
             * Loading state flag.
             */
            this.isLoading = false;
        }
        ActionsToggleRecipeFormComponent.prototype.ngOnInit = function () {
            this.formGroup = this.actionsFormBuilderService.buildActionRecipeFormGroup(this.specification, this.actionRecipe);
        };
        ActionsToggleRecipeFormComponent.prototype.ngOnChanges = function (changes) {
            var actionRecipe = changes.actionRecipe;
            if (this.formGroup && actionRecipe && actionRecipe.previousValue !== actionRecipe.currentValue) {
                this.isLoading = false;
                this.formGroup.patchValue(this.actionsFormBuilderService.buildActionRecipeFormValue(this.specification, this.actionRecipe));
            }
        };
        /**
         * Method to handle schedule form change and trigger submit action.
         *
         * @param value - action recipe form value
         */
        ActionsToggleRecipeFormComponent.prototype.onScheduleChange = function (value) {
            var _a, _b;
            (_a = this.formGroup) === null || _a === void 0 ? void 0 : _a.patchValue(value);
            this.submit.emit((_b = this.formGroup) === null || _b === void 0 ? void 0 : _b.value);
        };
        /**
         * Method to submit action recipe form.
         *
         * @param formValue - action recipe form value
         */
        ActionsToggleRecipeFormComponent.prototype.onSubmit = function (formValue) {
            this.isLoading = true;
            this.submit.emit(formValue);
        };
        return ActionsToggleRecipeFormComponent;
    }());
    ActionsToggleRecipeFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsToggleRecipeFormComponent, deps: [{ token: ActionsFormBuilderService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ActionsToggleRecipeFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsToggleRecipeFormComponent, selector: "bb-actions-toggle-recipe-form", inputs: { actionRecipe: "actionRecipe", specification: "specification", label: "label", scheduleEnabled: "scheduleEnabled" }, outputs: { submit: "submit" }, usesOnChanges: true, ngImport: i0__namespace, template: "<ng-container bbActionsToggleRecipeFormCustomizableDirective [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbActionsToggleRecipeFormCustomizableDirective let-hostRef>\n  <ng-container *ngIf=\"hostRef.formGroup\">\n    <form [formGroup]=\"hostRef.formGroup\">\n      <div class=\"bb-block bb-block--md bb-stack\">\n        <div\n          class=\"bb-stack__item bb-text-support bb-text-bold\"\n          [attr.data-role]=\"'toggle-recipe-label-' + hostRef.specification.id\"\n        >\n          {{ hostRef.label }}\n        </div>\n        <bb-switch-with-loading\n          [isLoading]=\"hostRef.isLoading\"\n          class=\"bb-stack__item bb-stack__item--push-right\"\n          formControlName=\"active\"\n          (change)=\"hostRef.onSubmit(hostRef.formGroup.value)\"\n          aria-label=\"{{ 'Switch on/off ' + hostRef.label }}\"\n          i18n-aria-label=\"Toggle recipe aria label@@actions-common.actions-toggle-recipe-form.switcher.aria-label\"\n          [attr.data-role]=\"'toggle-recipe-' + hostRef.specification.id\"\n        ></bb-switch-with-loading>\n      </div>\n      <bb-actions-schedule-notifications\n        class=\"bb-stack__item\"\n        *ngIf=\"hostRef.scheduleEnabled && hostRef.formGroup.value?.active && hostRef.actionRecipe\"\n        [scheduleForm]=\"hostRef.formGroup.get('recurrence')\"\n        [actionRecipe]=\"hostRef.actionRecipe\"\n        (submit)=\"hostRef.onScheduleChange($event)\"\n      ></bb-actions-schedule-notifications>\n    </form>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return SwitchWithLoadingComponent; }), selector: "bb-switch-with-loading", inputs: ["isLoading", "aria-label"] }, { type: i0__namespace.forwardRef(function () { return ActionsScheduleNotificationsComponent; }), selector: "bb-actions-schedule-notifications", inputs: ["actionRecipe", "scheduleForm", "minutesStep"], outputs: ["submit"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ActionsToggleRecipeFormCustomizableDirective; }), selector: "[bbActionsToggleRecipeFormCustomizableDirective]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsToggleRecipeFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-actions-toggle-recipe-form',
                        templateUrl: './actions-toggle-recipe-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ActionsFormBuilderService }]; }, propDecorators: { actionRecipe: [{
                    type: i0.Input
                }], specification: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], scheduleEnabled: [{
                    type: i0.Input
                }], submit: [{
                    type: i0.Output
                }] } });
    var ActionsToggleRecipeFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(ActionsToggleRecipeFormCustomizableDirective, _super);
        function ActionsToggleRecipeFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ActionsToggleRecipeFormCustomizableDirective;
    }(core.BbTemplate));
    ActionsToggleRecipeFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsToggleRecipeFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ActionsToggleRecipeFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsToggleRecipeFormCustomizableDirective, selector: "[bbActionsToggleRecipeFormCustomizableDirective]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsToggleRecipeFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbActionsToggleRecipeFormCustomizableDirective]',
                    }]
            }] });

    var TimePickerModule = /** @class */ (function () {
        function TimePickerModule() {
        }
        return TimePickerModule;
    }());
    TimePickerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: TimePickerModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TimePickerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: TimePickerModule, declarations: [TimePickerComponent], imports: [i5.CommonModule, i2$2.DropdownSingleSelectModule, i1.ReactiveFormsModule], exports: [TimePickerComponent, i2$2.DropdownSingleSelectModule, i1.ReactiveFormsModule] });
    TimePickerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: TimePickerModule, imports: [[i5.CommonModule, i2$2.DropdownSingleSelectModule, i1.ReactiveFormsModule], i2$2.DropdownSingleSelectModule, i1.ReactiveFormsModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: TimePickerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i2$2.DropdownSingleSelectModule, i1.ReactiveFormsModule],
                        declarations: [TimePickerComponent],
                        exports: [TimePickerComponent, i2$2.DropdownSingleSelectModule, i1.ReactiveFormsModule],
                    }]
            }] });

    var PreferenceDataMap = {
        '1': {
            generalNotificationId: 'new-transaction-occurred',
            preferenceName: 'Transactions',
            preferenceLabel: 'Transactions',
            specificationId: '1',
        },
        '4': {
            generalNotificationId: 'account-balance-low',
            preferenceName: 'AccountBalance',
            preferenceLabel: 'Account Balance',
            specificationId: '4',
        },
    };

    var ActionsNotificationsPreferencesDataService = /** @class */ (function () {
        function ActionsNotificationsPreferencesDataService(dataHttpService) {
            var _this = this;
            this.dataHttpService = dataHttpService;
            this.cachedNotificationPreferences$$ = new rxjs.BehaviorSubject([]);
            this.mapSavePreferenceResponce = function () { return function (preference) { return preference.pipe(operators.withLatestFrom(_this.cachedNotificationPreferences$$), operators.switchMap(function (_d) {
                var _e = __read(_d, 2), pref = _e[0], preferences = _e[1];
                _this.updatePreferencesCache(preferences, pref);
                return rxjs.of({
                    actionRecipes: [_this.preferenceToRecipe(pref)],
                });
            })); }; };
            this.preferenceToSpecification = function (_d) {
                var userConditions = _d.userConditions, channels = _d.channels, generalNotificationId = _d.generalNotificationId;
                var _a, _b, _c;
                return ({
                    actions: channels.map(function (channel) { return ({ type: channel.channel }); }),
                    recipeDefaults: Object.assign({}, (((_a = userConditions === null || userConditions === void 0 ? void 0 : userConditions.conditions) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('amount')) && {
                        amount: "" + ((_b = userConditions === null || userConditions === void 0 ? void 0 : userConditions.conditions) === null || _b === void 0 ? void 0 : _b.amount),
                    })),
                    id: (_c = Object.values(PreferenceDataMap).find(function (pref) { return pref.generalNotificationId === generalNotificationId; })) === null || _c === void 0 ? void 0 : _c.specificationId,
                });
            };
            this.preferenceToRecipe = function (_d) {
                var channels = _d.channels, userConditions = _d.userConditions, createdOn = _d.createdOn, generalNotificationId = _d.generalNotificationId, active = _d.active, id = _d.id;
                var _a, _b, _c;
                return (Object.assign(Object.assign({ specificationId: (_a = Object.values(PreferenceDataMap).find(function (pref) { return pref.generalNotificationId === generalNotificationId; })) === null || _a === void 0 ? void 0 : _a.specificationId, active: active, actions: channels.map(function (channel) { return ({
                        type: channel.channel,
                        enabled: channel.enabled,
                    }); }), createdOn: createdOn }, (((_b = userConditions === null || userConditions === void 0 ? void 0 : userConditions.conditions) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('amount')) && {
                    amount: "" + ((_c = userConditions === null || userConditions === void 0 ? void 0 : userConditions.conditions) === null || _c === void 0 ? void 0 : _c.amount),
                })), { id: id || '' }));
            };
        }
        /**
         * Method to get action recipes.
         *
         * @param arrangementId
         * @returns action recipe array
         */
        ActionsNotificationsPreferencesDataService.prototype.getActionRecipes = function (arrangementId) {
            var _this = this;
            var requestParams = {
                entityId: arrangementId,
                entityType: 'arrangement',
            };
            return this.dataHttpService.getNotificationPreferences(requestParams).pipe(operators.map(fromHttpResponse), operators.map(function (_d) {
                var notificationPreferences = _d.notificationPreferences;
                _this.cachedNotificationPreferences$$.next(notificationPreferences);
                return notificationPreferences.map(function (pref) { return _this.preferenceToRecipe(pref); });
            }));
        };
        /**
         * Method to get action recipe specifications.
         *
         * @returns action recipe specifications
         */
        ActionsNotificationsPreferencesDataService.prototype.getSpecifications = function () {
            var _this = this;
            return this.cachedNotificationPreferences$$.pipe(operators.map(fromHttpResponse), operators.map(function (notificationPreferences) { return notificationPreferences.map(function (pref) { return _this.preferenceToSpecification(pref); }); }));
        };
        /**
         * Method to save action recipe.
         *
         * @param action - recipe form value
         * @param arrangementId - arrangement ID
         * @returns batch processing response
         */
        ActionsNotificationsPreferencesDataService.prototype.saveActionRecipe = function (actionRecipeFormItem, arrangementId) {
            var notificationPreferences = this.cachedNotificationPreferences$$.getValue();
            var preferenceToUpdate = notificationPreferences.find(function (pref) { return pref.generalNotificationId === PreferenceDataMap[actionRecipeFormItem.specificationId].generalNotificationId; });
            if (preferenceToUpdate.id) {
                return this.updateNotificationPreference(preferenceToUpdate, actionRecipeFormItem);
            }
            else {
                return this.createNotificationPreference(preferenceToUpdate, actionRecipeFormItem, arrangementId);
            }
        };
        ActionsNotificationsPreferencesDataService.prototype.updateNotificationPreference = function (preferenceToUpdate, actionRecipeFormItem) {
            var notificationPreferencePutRequest = this.getNotificationPreferencePutRequest(preferenceToUpdate, actionRecipeFormItem);
            return this.dataHttpService
                .updateNotificationPreference({ id: preferenceToUpdate.id || '', notificationPreferencePutRequest: notificationPreferencePutRequest })
                .pipe(this.mapSavePreferenceResponce());
        };
        ActionsNotificationsPreferencesDataService.prototype.createNotificationPreference = function (preferenceToUpdate, actionRecipeFormItem, arrangementId) {
            var notificationPreferencePostRequest = this.getNotificationPreferencePostRequest(preferenceToUpdate, actionRecipeFormItem, arrangementId);
            return this.dataHttpService
                .createNotificationPreference({ notificationPreferencePostRequest: notificationPreferencePostRequest })
                .pipe(this.mapSavePreferenceResponce());
        };
        ActionsNotificationsPreferencesDataService.prototype.getNotificationPreferencePutRequest = function (preference, actionRecipeFormItem) {
            return {
                active: actionRecipeFormItem.active,
                channels: preference.channels.map(function (channel) { return (Object.assign(Object.assign({}, channel), { enabled: !!actionRecipeFormItem.actions[channel.channel] })); }),
                conditions: Object.assign({}, (actionRecipeFormItem.amount.amount !== undefined && {
                    amount: "" + actionRecipeFormItem.amount.amount,
                })),
            };
        };
        ActionsNotificationsPreferencesDataService.prototype.getNotificationPreferencePostRequest = function (preference, actionRecipeFormItem, arrangementId) {
            var _a;
            return {
                generalNotificationId: preference.generalNotificationId,
                active: actionRecipeFormItem.active,
                eRef: arrangementId,
                channels: preference.channels.map(function (channel) { return (Object.assign(Object.assign({}, channel), { enabled: !!actionRecipeFormItem.actions[channel.channel] })); }),
                conditions: Object.assign({}, (_a = preference.userConditions) === null || _a === void 0 ? void 0 : _a.conditions),
            };
        };
        ActionsNotificationsPreferencesDataService.prototype.updatePreferencesCache = function (preferences, updatedPreference) {
            var updatedPreferences = preferences.map(function (pref) { return pref.generalNotificationId === updatedPreference.generalNotificationId ? updatedPreference : pref; });
            this.cachedNotificationPreferences$$.next(updatedPreferences);
        };
        return ActionsNotificationsPreferencesDataService;
    }());
    ActionsNotificationsPreferencesDataService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationsPreferencesDataService, deps: [{ token: i1__namespace$3.NotificationPreferenceService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ActionsNotificationsPreferencesDataService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationsPreferencesDataService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsNotificationsPreferencesDataService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$3.NotificationPreferenceService }]; } });

    var components = [
        ActionsNotificationChannelsComponent,
        ActionsAccountBalanceRecipeFormComponent,
        ActionsTransactionsRecipeFormComponent,
        ActionsToggleRecipeFormComponent,
        SwitchWithLoadingComponent,
        ActionsScheduleNotificationsComponent,
    ];
    var directives = [
        ActionsNotificationChannelsCustomizableDirective,
        ActionsAccountBalanceRecipeCustomizableDirective,
        ActionsTransactionsRecipeCustomizableDirective,
        ActionsToggleRecipeFormCustomizableDirective,
        ActionsScheduleNotificationsComponentCustomizableDirective,
    ];
    var pipes = [NoFractionDigitsPipe];
    var uiModules = [
        i5$2.AmountModule,
        modal.ModalModule,
        i6$1.ButtonModule,
        i3.InputCheckboxModule,
        i1$2.SwitchModule,
        i3$1.HeaderModule,
        i2$1.CollapsibleModule,
        i2.IconModule,
        i5$1.TooltipModule,
        i6.InputInlineEditModule,
    ];
    var ActionsCommonModule = /** @class */ (function () {
        function ActionsCommonModule() {
        }
        return ActionsCommonModule;
    }());
    ActionsCommonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsCommonModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ActionsCommonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsCommonModule, declarations: [ActionsNotificationChannelsComponent,
            ActionsAccountBalanceRecipeFormComponent,
            ActionsTransactionsRecipeFormComponent,
            ActionsToggleRecipeFormComponent,
            SwitchWithLoadingComponent,
            ActionsScheduleNotificationsComponent, ActionsNotificationChannelsCustomizableDirective,
            ActionsAccountBalanceRecipeCustomizableDirective,
            ActionsTransactionsRecipeCustomizableDirective,
            ActionsToggleRecipeFormCustomizableDirective,
            ActionsScheduleNotificationsComponentCustomizableDirective, NoFractionDigitsPipe], imports: [i5.CommonModule, i1.FormsModule, i1.ReactiveFormsModule, TimePickerModule, i5$2.AmountModule,
            modal.ModalModule,
            i6$1.ButtonModule,
            i3.InputCheckboxModule,
            i1$2.SwitchModule,
            i3$1.HeaderModule,
            i2$1.CollapsibleModule,
            i2.IconModule,
            i5$1.TooltipModule,
            i6.InputInlineEditModule], exports: [ActionsNotificationChannelsComponent,
            ActionsAccountBalanceRecipeFormComponent,
            ActionsTransactionsRecipeFormComponent,
            ActionsToggleRecipeFormComponent,
            SwitchWithLoadingComponent,
            ActionsScheduleNotificationsComponent, i5$2.AmountModule,
            modal.ModalModule,
            i6$1.ButtonModule,
            i3.InputCheckboxModule,
            i1$2.SwitchModule,
            i3$1.HeaderModule,
            i2$1.CollapsibleModule,
            i2.IconModule,
            i5$1.TooltipModule,
            i6.InputInlineEditModule, ActionsNotificationChannelsCustomizableDirective,
            ActionsAccountBalanceRecipeCustomizableDirective,
            ActionsTransactionsRecipeCustomizableDirective,
            ActionsToggleRecipeFormCustomizableDirective,
            ActionsScheduleNotificationsComponentCustomizableDirective, NoFractionDigitsPipe, TimePickerModule] });
    ActionsCommonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsCommonModule, providers: [
            ActionsFormBuilderService,
            ActionsNotificationsSettingsDataService,
            ActionsNotificationsPreferencesDataService,
        ], imports: [__spreadArray([i5.CommonModule, i1.FormsModule, i1.ReactiveFormsModule, TimePickerModule], __read(uiModules)), i5$2.AmountModule,
            modal.ModalModule,
            i6$1.ButtonModule,
            i3.InputCheckboxModule,
            i1$2.SwitchModule,
            i3$1.HeaderModule,
            i2$1.CollapsibleModule,
            i2.IconModule,
            i5$1.TooltipModule,
            i6.InputInlineEditModule, TimePickerModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: ActionsCommonModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([i5.CommonModule, i1.FormsModule, i1.ReactiveFormsModule, TimePickerModule], __read(uiModules)),
                        providers: [
                            ActionsFormBuilderService,
                            ActionsNotificationsSettingsDataService,
                            ActionsNotificationsPreferencesDataService,
                        ],
                        declarations: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(pipes)),
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(uiModules)), __read(directives)), __read(pipes)), [TimePickerModule]),
                    }]
            }] });

    var NotificationsPreferencesBaseDataService = /** @class */ (function () {
        function NotificationsPreferencesBaseDataService() {
        }
        return NotificationsPreferencesBaseDataService;
    }());

    var getPropertyValue = function (input, prop) { return rxjs.combineLatest([input, prop]).pipe(operators.map(function (_a) {
        var _b = __read(_a, 2), inputVal = _b[0], propVal = _b[1];
        return (inputVal !== undefined ? inputVal : propVal);
    })); };

    exports.SpecificationIds = void 0;
    (function (SpecificationIds) {
        SpecificationIds["Transactions"] = "1";
        SpecificationIds["AccountBalance"] = "4";
        SpecificationIds["Payments"] = "5";
        SpecificationIds["Contacts"] = "6";
        SpecificationIds["PaymentsToApprove"] = "13";
        SpecificationIds["ContactsToApprove"] = "14";
    })(exports.SpecificationIds || (exports.SpecificationIds = {}));

    var DEFAULT_NOTIFICATION_DISMISS_TIME = 5;
    var DEFAULT_SPECIFICATION_IDS = '5, 6, 13, 14';
    var DEFAULT_API_MODE = 'actions';
    var ActionsBasePropertiesService = /** @class */ (function () {
        function ActionsBasePropertiesService() {
        }
        /**
         * Method to get notification dismiss time preference value.
         *
         * @returns notification dismiss time in seconds
         */
        ActionsBasePropertiesService.prototype.getNotificationDismissTimeProperty = function () {
            return rxjs.of(DEFAULT_NOTIFICATION_DISMISS_TIME).pipe(operators.map(secondsToMilliseconds));
        };
        /**
         * Method to get specification IDs.
         *
         * @returns specification IDs array
         */
        ActionsBasePropertiesService.prototype.getSpecificationIDs = function () {
            return rxjs.of(DEFAULT_SPECIFICATION_IDS).pipe(operators.map(function (data) { return data.replace(/\s/g, '').split(','); }));
        };
        ActionsBasePropertiesService.prototype.getApiMode = function () {
            return DEFAULT_API_MODE;
        };
        return ActionsBasePropertiesService;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ActionsBasePropertiesService = ActionsBasePropertiesService;
    exports.ActionsCommonModule = ActionsCommonModule;
    exports.ActionsNotificationsPreferencesDataService = ActionsNotificationsPreferencesDataService;
    exports.ActionsNotificationsSettingsDataService = ActionsNotificationsSettingsDataService;
    exports.DAYS_OF_WEEK = DAYS_OF_WEEK;
    exports.DEFAULT_API_MODE = DEFAULT_API_MODE;
    exports.DEFAULT_NOTIFICATION_DISMISS_TIME = DEFAULT_NOTIFICATION_DISMISS_TIME;
    exports.DEFAULT_SPECIFICATION_IDS = DEFAULT_SPECIFICATION_IDS;
    exports.DefaultTime = DefaultTime;
    exports.EMPTY_RESPONSE_ERROR = EMPTY_RESPONSE_ERROR;
    exports.MaxOptionsQuantity = MaxOptionsQuantity;
    exports.MinutesInDay = MinutesInDay;
    exports.NotificationsPreferencesBaseDataService = NotificationsPreferencesBaseDataService;
    exports.ScheduleDescriptionText = ScheduleDescriptionText;
    exports.actionRecipeFormItemToRequest = actionRecipeFormItemToRequest;
    exports.arrangementActionRecipeToRequest = arrangementActionRecipeToRequest;
    exports.filterObjectByPropNames = filterObjectByPropNames;
    exports.firstNonEmptyString = firstNonEmptyString;
    exports.fromHttpResponse = fromHttpResponse;
    exports.getHoursOfDay = getHoursOfDay;
    exports.getMappedRecurrenceResponse = getMappedRecurrenceResponse;
    exports.getPropertyValue = getPropertyValue;
    exports.getTimeOptions = getTimeOptions;
    exports.hoursToMinutesArray = hoursToMinutesArray;
    exports.isEqualNumberArrays = isEqualNumberArrays;
    exports.mergeNotificationChannels = mergeNotificationChannels;
    exports.mergeSpecificationsWithActionRecipes = mergeSpecificationsWithActionRecipes;
    exports.parseActionRecipeFormItem = parseActionRecipeFormItem;
    exports.secondsToMilliseconds = secondsToMilliseconds;
    exports.sortNumberArray = sortNumberArray;
    exports["ӨActionsAccountBalanceRecipeCustomizableDirective"] = ActionsAccountBalanceRecipeCustomizableDirective;
    exports["ӨActionsAccountBalanceRecipeFormComponent"] = ActionsAccountBalanceRecipeFormComponent;
    exports["ӨActionsNotificationChannelsComponent"] = ActionsNotificationChannelsComponent;
    exports["ӨActionsNotificationChannelsCustomizableDirective"] = ActionsNotificationChannelsCustomizableDirective;
    exports["ӨActionsScheduleNotificationsComponent"] = ActionsScheduleNotificationsComponent;
    exports["ӨActionsScheduleNotificationsComponentCustomizableDirective"] = ActionsScheduleNotificationsComponentCustomizableDirective;
    exports["ӨActionsToggleRecipeFormComponent"] = ActionsToggleRecipeFormComponent;
    exports["ӨActionsToggleRecipeFormCustomizableDirective"] = ActionsToggleRecipeFormCustomizableDirective;
    exports["ӨActionsTransactionsRecipeCustomizableDirective"] = ActionsTransactionsRecipeCustomizableDirective;
    exports["ӨActionsTransactionsRecipeFormComponent"] = ActionsTransactionsRecipeFormComponent;
    exports["ӨNoFractionDigitsPipe"] = NoFractionDigitsPipe;
    exports["ӨSwitchWithLoadingComponent"] = SwitchWithLoadingComponent;
    exports["ӨTimePickerComponent"] = TimePickerComponent;
    exports["ӨTimePickerModule"] = TimePickerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-actions-common-ang.umd.js.map
