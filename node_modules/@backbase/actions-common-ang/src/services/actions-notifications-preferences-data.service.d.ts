import { Observable } from 'rxjs';
import { ActionRecipe, ActionRecipeSpecification, BatchProcessingPutResponseBody } from '@backbase/data-ang/actions';
import { NotificationPreferenceService } from '@backbase/data-ang/engagement';
import { ActionRecipeFormItemValue } from '../models/action-recipes-form-value.model';
import { NotificationsPreferencesBaseDataService } from './notification-preferences-base-data.service';
import * as i0 from "@angular/core";
export declare class ActionsNotificationsPreferencesDataService implements NotificationsPreferencesBaseDataService {
    private readonly dataHttpService;
    private readonly cachedNotificationPreferences$$;
    constructor(dataHttpService: NotificationPreferenceService);
    /**
     * Method to get action recipes.
     *
     * @param arrangementId
     * @returns action recipe array
     */
    getActionRecipes(arrangementId: string): Observable<ActionRecipe[]>;
    /**
     * Method to get action recipe specifications.
     *
     * @returns action recipe specifications
     */
    getSpecifications(): Observable<ActionRecipeSpecification[]>;
    /**
     * Method to save action recipe.
     *
     * @param action - recipe form value
     * @param arrangementId - arrangement ID
     * @returns batch processing response
     */
    saveActionRecipe(actionRecipeFormItem: ActionRecipeFormItemValue, arrangementId: string): Observable<BatchProcessingPutResponseBody>;
    private updateNotificationPreference;
    private createNotificationPreference;
    private mapSavePreferenceResponce;
    private getNotificationPreferencePutRequest;
    private getNotificationPreferencePostRequest;
    private preferenceToSpecification;
    private preferenceToRecipe;
    private updatePreferencesCache;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActionsNotificationsPreferencesDataService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ActionsNotificationsPreferencesDataService>;
}
