import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { EMPTY_RESPONSE_ERROR } from '../constants/errors';
import { actionRecipeFormItemToRequest, arrangementActionRecipeToRequest, fromHttpResponse } from '../helpers/mappers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/actions";
export const ACTION_RECIPES_LIMIT = 999999;
export class ActionsNotificationsSettingsDataService {
    constructor(dataHttpService, actionSpecificationsService) {
        this.dataHttpService = dataHttpService;
        this.actionSpecificationsService = actionSpecificationsService;
    }
    /**
     * Method to get action recipes.
     *
     * @param params - params object
     * @returns action recipe array
     */
    getActionRecipes(params = {}) {
        const requestParams = Object.assign({ limit: ACTION_RECIPES_LIMIT }, params);
        return this.dataHttpService.getActionRecipes(requestParams).pipe(map(fromHttpResponse), map(response => response.actionRecipes));
    }
    /**
     * Method to get action recipe specifications.
     *
     * @returns action recipe specifications
     */
    getSpecifications() {
        return this.actionSpecificationsService.getActionRecipeSpecifications({}).pipe(map(fromHttpResponse), map(response => response.actionRecipeSpecifications || []));
    }
    /**
     * Method to save action recipe.
     *
     * @param action - recipe form value
     * @param arrangementId - arrangement ID
     * @returns batch processing response
     */
    saveActionRecipe(actionRecipeFormItem, arrangementId) {
        const recipeToRequest = arrangementId
            ? arrangementActionRecipeToRequest(arrangementId)
            : actionRecipeFormItemToRequest;
        const batchProcessingPutRequestBody = { actionRecipes: [recipeToRequest(actionRecipeFormItem)] };
        return this.dataHttpService
            .putBatchProcessing({ batchProcessingPutRequestBody })
            .pipe(switchMap(body => (body ? of(body) : throwError(EMPTY_RESPONSE_ERROR))));
    }
}
ActionsNotificationsSettingsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationsSettingsDataService, deps: [{ token: i1.ActionRecipesHttpService }, { token: i1.ActionRecipeSpecificationsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ActionsNotificationsSettingsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationsSettingsDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationsSettingsDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ActionRecipesHttpService }, { type: i1.ActionRecipeSpecificationsHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy1ub3RpZmljYXRpb25zLXNldHRpbmdzLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWN0aW9ucy1jb21tb24tYW5nL3NyYy9zZXJ2aWNlcy9hY3Rpb25zLW5vdGlmaWNhdGlvbnMtc2V0dGluZ3MtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsZ0NBQWdDLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBSXZILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLE1BQU0sQ0FBQztBQUczQyxNQUFNLE9BQU8sdUNBQXVDO0lBQ2xELFlBQ21CLGVBQXlDLEVBQ3pDLDJCQUFrRTtRQURsRSxvQkFBZSxHQUFmLGVBQWUsQ0FBMEI7UUFDekMsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUF1QztJQUNsRixDQUFDO0lBRUo7Ozs7O09BS0c7SUFDSCxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsRUFBRTtRQUMxQixNQUFNLGFBQWEsbUJBQ2pCLEtBQUssRUFBRSxvQkFBb0IsSUFDeEIsTUFBTSxDQUNWLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUM5RCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFDckIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUN4QyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQywyQkFBMkIsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQzVFLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUNyQixHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLElBQUksRUFBRSxDQUFDLENBQzNELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsZ0JBQWdCLENBQ2Qsb0JBQStDLEVBQy9DLGFBQXNCO1FBRXRCLE1BQU0sZUFBZSxHQUFHLGFBQWE7WUFDbkMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQztZQUNqRCxDQUFDLENBQUMsNkJBQTZCLENBQUM7UUFDbEMsTUFBTSw2QkFBNkIsR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUVqRyxPQUFPLElBQUksQ0FBQyxlQUFlO2FBQ3hCLGtCQUFrQixDQUFDLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQzthQUNyRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkYsQ0FBQzs7cUlBdkRVLHVDQUF1Qzt5SUFBdkMsdUNBQXVDOzRGQUF2Qyx1Q0FBdUM7a0JBRG5ELFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBY3Rpb25SZWNpcGUsXG4gIEFjdGlvblJlY2lwZVNwZWNpZmljYXRpb24sXG4gIEFjdGlvblJlY2lwZVNwZWNpZmljYXRpb25zSHR0cFNlcnZpY2UsXG4gIEFjdGlvblJlY2lwZXNIdHRwU2VydmljZSxcbiAgQmF0Y2hQcm9jZXNzaW5nUHV0UmVzcG9uc2VCb2R5LFxufSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYWN0aW9ucyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBFTVBUWV9SRVNQT05TRV9FUlJPUiB9IGZyb20gJy4uL2NvbnN0YW50cy9lcnJvcnMnO1xuaW1wb3J0IHsgYWN0aW9uUmVjaXBlRm9ybUl0ZW1Ub1JlcXVlc3QsIGFycmFuZ2VtZW50QWN0aW9uUmVjaXBlVG9SZXF1ZXN0LCBmcm9tSHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vaGVscGVycy9tYXBwZXJzJztcbmltcG9ydCB7IEFjdGlvblJlY2lwZUZvcm1JdGVtVmFsdWUgfSBmcm9tICcuLi9tb2RlbHMvYWN0aW9uLXJlY2lwZXMtZm9ybS12YWx1ZS5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zUHJlZmVyZW5jZXNCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICcuL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlcy1iYXNlLWRhdGEuc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBBQ1RJT05fUkVDSVBFU19MSU1JVCA9IDk5OTk5OTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjdGlvbnNOb3RpZmljYXRpb25zU2V0dGluZ3NEYXRhU2VydmljZSBpbXBsZW1lbnRzIE5vdGlmaWNhdGlvbnNQcmVmZXJlbmNlc0Jhc2VEYXRhU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YUh0dHBTZXJ2aWNlOiBBY3Rpb25SZWNpcGVzSHR0cFNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBhY3Rpb25TcGVjaWZpY2F0aW9uc1NlcnZpY2U6IEFjdGlvblJlY2lwZVNwZWNpZmljYXRpb25zSHR0cFNlcnZpY2UsXG4gICkge31cblxuICAvKipcbiAgICogTWV0aG9kIHRvIGdldCBhY3Rpb24gcmVjaXBlcy5cbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIHBhcmFtcyBvYmplY3RcbiAgICogQHJldHVybnMgYWN0aW9uIHJlY2lwZSBhcnJheVxuICAgKi9cbiAgZ2V0QWN0aW9uUmVjaXBlcyhwYXJhbXMgPSB7fSk6IE9ic2VydmFibGU8QWN0aW9uUmVjaXBlW10+IHtcbiAgICBjb25zdCByZXF1ZXN0UGFyYW1zID0ge1xuICAgICAgbGltaXQ6IEFDVElPTl9SRUNJUEVTX0xJTUlULFxuICAgICAgLi4ucGFyYW1zLFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhSHR0cFNlcnZpY2UuZ2V0QWN0aW9uUmVjaXBlcyhyZXF1ZXN0UGFyYW1zKS5waXBlKFxuICAgICAgbWFwKGZyb21IdHRwUmVzcG9uc2UpLFxuICAgICAgbWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFjdGlvblJlY2lwZXMpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRvIGdldCBhY3Rpb24gcmVjaXBlIHNwZWNpZmljYXRpb25zLlxuICAgKlxuICAgKiBAcmV0dXJucyBhY3Rpb24gcmVjaXBlIHNwZWNpZmljYXRpb25zXG4gICAqL1xuICBnZXRTcGVjaWZpY2F0aW9ucygpOiBPYnNlcnZhYmxlPEFjdGlvblJlY2lwZVNwZWNpZmljYXRpb25bXT4ge1xuICAgIHJldHVybiB0aGlzLmFjdGlvblNwZWNpZmljYXRpb25zU2VydmljZS5nZXRBY3Rpb25SZWNpcGVTcGVjaWZpY2F0aW9ucyh7fSkucGlwZShcbiAgICAgIG1hcChmcm9tSHR0cFJlc3BvbnNlKSxcbiAgICAgIG1hcChyZXNwb25zZSA9PiByZXNwb25zZS5hY3Rpb25SZWNpcGVTcGVjaWZpY2F0aW9ucyB8fCBbXSksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gc2F2ZSBhY3Rpb24gcmVjaXBlLlxuICAgKlxuICAgKiBAcGFyYW0gYWN0aW9uIC0gcmVjaXBlIGZvcm0gdmFsdWVcbiAgICogQHBhcmFtIGFycmFuZ2VtZW50SWQgLSBhcnJhbmdlbWVudCBJRFxuICAgKiBAcmV0dXJucyBiYXRjaCBwcm9jZXNzaW5nIHJlc3BvbnNlXG4gICAqL1xuICBzYXZlQWN0aW9uUmVjaXBlKFxuICAgIGFjdGlvblJlY2lwZUZvcm1JdGVtOiBBY3Rpb25SZWNpcGVGb3JtSXRlbVZhbHVlLFxuICAgIGFycmFuZ2VtZW50SWQ/OiBzdHJpbmcsXG4gICk6IE9ic2VydmFibGU8QmF0Y2hQcm9jZXNzaW5nUHV0UmVzcG9uc2VCb2R5PiB7XG4gICAgY29uc3QgcmVjaXBlVG9SZXF1ZXN0ID0gYXJyYW5nZW1lbnRJZFxuICAgICAgPyBhcnJhbmdlbWVudEFjdGlvblJlY2lwZVRvUmVxdWVzdChhcnJhbmdlbWVudElkKVxuICAgICAgOiBhY3Rpb25SZWNpcGVGb3JtSXRlbVRvUmVxdWVzdDtcbiAgICBjb25zdCBiYXRjaFByb2Nlc3NpbmdQdXRSZXF1ZXN0Qm9keSA9IHsgYWN0aW9uUmVjaXBlczogW3JlY2lwZVRvUmVxdWVzdChhY3Rpb25SZWNpcGVGb3JtSXRlbSldIH07XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhSHR0cFNlcnZpY2VcbiAgICAgIC5wdXRCYXRjaFByb2Nlc3NpbmcoeyBiYXRjaFByb2Nlc3NpbmdQdXRSZXF1ZXN0Qm9keSB9KVxuICAgICAgLnBpcGUoc3dpdGNoTWFwKGJvZHkgPT4gKGJvZHkgPyBvZihib2R5KSA6IHRocm93RXJyb3IoRU1QVFlfUkVTUE9OU0VfRVJST1IpKSkpO1xuICB9XG59XG4iXX0=