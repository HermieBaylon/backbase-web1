import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { map, switchMap, withLatestFrom } from 'rxjs/operators';
import { PreferenceDataMap } from '../models/notification-to-specification-id.model';
import { fromHttpResponse } from '../helpers/mappers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/engagement";
export class ActionsNotificationsPreferencesDataService {
    constructor(dataHttpService) {
        this.dataHttpService = dataHttpService;
        this.cachedNotificationPreferences$$ = new BehaviorSubject([]);
        this.mapSavePreferenceResponce = () => (preference) => preference.pipe(withLatestFrom(this.cachedNotificationPreferences$$), switchMap(([pref, preferences]) => {
            this.updatePreferencesCache(preferences, pref);
            return of({
                actionRecipes: [this.preferenceToRecipe(pref)],
            });
        }));
        this.preferenceToSpecification = ({ userConditions, channels, generalNotificationId, }) => {
            var _a, _b, _c;
            return ({
                actions: channels.map(channel => ({ type: channel.channel })),
                recipeDefaults: Object.assign({}, (((_a = userConditions === null || userConditions === void 0 ? void 0 : userConditions.conditions) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('amount')) && {
                    amount: `${(_b = userConditions === null || userConditions === void 0 ? void 0 : userConditions.conditions) === null || _b === void 0 ? void 0 : _b.amount}`,
                })),
                id: (_c = Object.values(PreferenceDataMap).find(pref => pref.generalNotificationId === generalNotificationId)) === null || _c === void 0 ? void 0 : _c.specificationId,
            });
        };
        this.preferenceToRecipe = ({ channels, userConditions, createdOn, generalNotificationId, active, id, }) => {
            var _a, _b, _c;
            return (Object.assign(Object.assign({ specificationId: (_a = Object.values(PreferenceDataMap).find(pref => pref.generalNotificationId === generalNotificationId)) === null || _a === void 0 ? void 0 : _a.specificationId, active, actions: channels.map(channel => ({
                    type: channel.channel,
                    enabled: channel.enabled,
                })), createdOn }, (((_b = userConditions === null || userConditions === void 0 ? void 0 : userConditions.conditions) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('amount')) && {
                amount: `${(_c = userConditions === null || userConditions === void 0 ? void 0 : userConditions.conditions) === null || _c === void 0 ? void 0 : _c.amount}`,
            })), { id: id || '' }));
        };
    }
    /**
     * Method to get action recipes.
     *
     * @param arrangementId
     * @returns action recipe array
     */
    getActionRecipes(arrangementId) {
        const requestParams = {
            entityId: arrangementId,
            entityType: 'arrangement',
        };
        return this.dataHttpService.getNotificationPreferences(requestParams).pipe(map(fromHttpResponse), map(({ notificationPreferences }) => {
            this.cachedNotificationPreferences$$.next(notificationPreferences);
            return notificationPreferences.map(pref => this.preferenceToRecipe(pref));
        }));
    }
    /**
     * Method to get action recipe specifications.
     *
     * @returns action recipe specifications
     */
    getSpecifications() {
        return this.cachedNotificationPreferences$$.pipe(map(fromHttpResponse), map(notificationPreferences => notificationPreferences.map(pref => this.preferenceToSpecification(pref))));
    }
    /**
     * Method to save action recipe.
     *
     * @param action - recipe form value
     * @param arrangementId - arrangement ID
     * @returns batch processing response
     */
    saveActionRecipe(actionRecipeFormItem, arrangementId) {
        const notificationPreferences = this.cachedNotificationPreferences$$.getValue();
        const preferenceToUpdate = notificationPreferences.find(pref => pref.generalNotificationId === PreferenceDataMap[actionRecipeFormItem.specificationId].generalNotificationId);
        if (preferenceToUpdate.id) {
            return this.updateNotificationPreference(preferenceToUpdate, actionRecipeFormItem);
        }
        else {
            return this.createNotificationPreference(preferenceToUpdate, actionRecipeFormItem, arrangementId);
        }
    }
    updateNotificationPreference(preferenceToUpdate, actionRecipeFormItem) {
        const notificationPreferencePutRequest = this.getNotificationPreferencePutRequest(preferenceToUpdate, actionRecipeFormItem);
        return this.dataHttpService
            .updateNotificationPreference({ id: preferenceToUpdate.id || '', notificationPreferencePutRequest })
            .pipe(this.mapSavePreferenceResponce());
    }
    createNotificationPreference(preferenceToUpdate, actionRecipeFormItem, arrangementId) {
        const notificationPreferencePostRequest = this.getNotificationPreferencePostRequest(preferenceToUpdate, actionRecipeFormItem, arrangementId);
        return this.dataHttpService
            .createNotificationPreference({ notificationPreferencePostRequest })
            .pipe(this.mapSavePreferenceResponce());
    }
    getNotificationPreferencePutRequest(preference, actionRecipeFormItem) {
        return {
            active: actionRecipeFormItem.active,
            channels: preference.channels.map(channel => (Object.assign(Object.assign({}, channel), { enabled: !!actionRecipeFormItem.actions[channel.channel] }))),
            conditions: Object.assign({}, (actionRecipeFormItem.amount.amount !== undefined && {
                amount: `${actionRecipeFormItem.amount.amount}`,
            })),
        };
    }
    getNotificationPreferencePostRequest(preference, actionRecipeFormItem, arrangementId) {
        var _a;
        return {
            generalNotificationId: preference.generalNotificationId,
            active: actionRecipeFormItem.active,
            eRef: arrangementId,
            channels: preference.channels.map(channel => (Object.assign(Object.assign({}, channel), { enabled: !!actionRecipeFormItem.actions[channel.channel] }))),
            conditions: Object.assign({}, (_a = preference.userConditions) === null || _a === void 0 ? void 0 : _a.conditions),
        };
    }
    updatePreferencesCache(preferences, updatedPreference) {
        const updatedPreferences = preferences.map(pref => pref.generalNotificationId === updatedPreference.generalNotificationId ? updatedPreference : pref);
        this.cachedNotificationPreferences$$.next(updatedPreferences);
    }
}
ActionsNotificationsPreferencesDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationsPreferencesDataService, deps: [{ token: i1.NotificationPreferenceService }], target: i0.ɵɵFactoryTarget.Injectable });
ActionsNotificationsPreferencesDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationsPreferencesDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationsPreferencesDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NotificationPreferenceService }]; } });
//# sourceMappingURL=data:application/json;base64,