import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output, } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { of, Subject } from 'rxjs';
import { distinctUntilChanged, filter, takeUntil, tap } from 'rxjs/operators';
import { DefaultTime, MaxOptionsQuantity, ScheduleType, MinutesInDay, } from '../../models/schedule-notifications.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/dropdown-single-select";
import * as i3 from "../time-picker/time-picker.component";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class ActionsScheduleNotificationsComponent {
    constructor(fb) {
        this.fb = fb;
        /**
         * Schedule type enum
         */
        this.ScheduleType = ScheduleType;
        /**
         * Maximum options quantity
         */
        this.MaxOptionsQuantity = MaxOptionsQuantity;
        /**
         * Stream of selected options
         */
        this.selectedTimeOptions$ = of([]);
        this.selectedTimeOptions = [];
        this.destroy$ = new Subject();
        /**
         * Minutes step in time options list.
         */
        this.minutesStep = 60;
        /**
         * Schedule form submit output.
         */
        this.submit = new EventEmitter();
    }
    ngOnInit() {
        this.scheduleType = this.getScheduleType(this.actionRecipe);
        this.onScheduleFormChange();
    }
    onScheduleTypeChange(event) {
        const target = event.target;
        if (this.scheduleType === this.ScheduleType.RightAway) {
            this.resetScheduleForm();
        }
        else if (this.scheduleType === this.ScheduleType.Custom) {
            this.addTimeOption();
        }
        target.blur();
    }
    addTimeOption() {
        this.scheduleTime.push(this.fb.control(this.defaultTime));
        this.submitScheduleForm();
    }
    deleteTimeOption(index) {
        this.scheduleTime.removeAt(index);
        this.submitScheduleForm();
    }
    timeControlChange() {
        this.submitScheduleForm();
    }
    onScheduleFormChange() {
        this.selectedTimeOptions$ = this.scheduleForm.controls.scheduleTime.valueChanges.pipe(filter(val => val), tap(val => (this.selectedTimeOptions = val)), distinctUntilChanged(), takeUntil(this.destroy$));
    }
    submitScheduleForm() {
        this.submit.emit(this.scheduleForm);
    }
    getScheduleType(recipe) {
        var _a, _b;
        const hoursOfDayQuantity = ((_b = (_a = recipe.recurrence) === null || _a === void 0 ? void 0 : _a.hoursOfDay) === null || _b === void 0 ? void 0 : _b.length) || 0;
        const hoursScheduleApplied = hoursOfDayQuantity !== 0 && hoursOfDayQuantity !== 24;
        if (!hoursScheduleApplied) {
            return ScheduleType.RightAway;
        }
        return ScheduleType.Custom;
    }
    resetScheduleForm() {
        this.scheduleTime.clear();
        this.submitScheduleForm();
    }
    /**
     * Getter for repeat count control
     */
    get scheduleTime() {
        return this.scheduleForm.get('scheduleTime');
    }
    /**
     * Getter for default time which returns 08:00 for the first option and +1 hour for subsequent
     */
    get defaultTime() {
        const lastSelectedTimeOption = this.lastSelectedTimeOption;
        let defaultTime = lastSelectedTimeOption + this.minutesStep;
        if (!lastSelectedTimeOption && lastSelectedTimeOption !== 0) {
            return DefaultTime;
        }
        if (defaultTime === MinutesInDay) {
            defaultTime = 0;
        }
        while (this.selectedTimeOptions.includes(defaultTime)) {
            if (defaultTime === MinutesInDay) {
                defaultTime = 0;
            }
            else {
                defaultTime = defaultTime + 60;
            }
        }
        return defaultTime;
    }
    /**
     * Getter for last added time option
     */
    get lastSelectedTimeOption() {
        var _a;
        return (_a = this.scheduleTime.controls[this.scheduleTime.controls.length - 1]) === null || _a === void 0 ? void 0 : _a.value;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ActionsScheduleNotificationsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsScheduleNotificationsComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ActionsScheduleNotificationsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsScheduleNotificationsComponent, selector: "bb-actions-schedule-notifications", inputs: { actionRecipe: "actionRecipe", scheduleForm: "scheduleForm", minutesStep: "minutesStep" }, outputs: { submit: "submit" }, ngImport: i0, template: "<ng-container bbActionsScheduleNotificationsComponentCustomizableDirective [bbHostRef]=\"this\"> </ng-container>\n<ng-template bbActionsScheduleNotificationsComponentCustomizableDirective let-hostRef>\n  <div class=\"row bb-block bb-block--md bb-stack bb-stack--align-baseline\">\n    <div class=\"col-3\">\n      <span i18n=\"Notify me label@@actions-common.actions-schedule-notifications.title\"> Notify me </span>\n    </div>\n    <div class=\"col-3\">\n      <bb-dropdown-single-select-ui\n        iconName=\"caret-down\"\n        [required]=\"true\"\n        [(ngModel)]=\"hostRef.scheduleType\"\n        (change)=\"hostRef.onScheduleTypeChange($event)\"\n        aria-label=\"Schedule type\"\n        i18n-aria-label=\"\n          Schedule type dropdown@@actions-common.actions-schedule-notifications.schedule-type-dropdown.aria-label\"\n        data-role=\"notifications-schedule-type\"\n      >\n        <bb-dropdown-single-select-option-ui\n          i18n-label=\"\n            Schedule type dropdown right away\n            option@@actions-common.actions-schedule-notifications.schedule-type-right-away-option.label\"\n          label=\"Right away\"\n          [value]=\"hostRef.ScheduleType.RightAway\"\n        ></bb-dropdown-single-select-option-ui>\n        <bb-dropdown-single-select-option-ui\n          i18n-label=\"\n            Schedule type dropdown custom\n            option@@actions-common.actions-schedule-notifications.schedule-type-custom-option.label\"\n          label=\"Custom\"\n          [value]=\"hostRef.ScheduleType.Custom\"\n        ></bb-dropdown-single-select-option-ui>\n      </bb-dropdown-single-select-ui>\n    </div>\n    <div\n      class=\"col-6 row bb-stack bb-stack--align-baseline no-gutters\"\n      *ngIf=\"hostRef.scheduleType === hostRef.ScheduleType.Custom\"\n    >\n      <span\n        class=\"col-1\"\n        i18n=\"Schedule time picker title @@actions-common.actions-schedule-notifications.schedule-time-picker.title\"\n        >At</span\n      >\n      <form class=\"col-11\" [formGroup]=\"hostRef.scheduleForm\">\n        <div\n          class=\"row no-gutters bb-block bb-block--md\"\n          formArrayName=\"scheduleTime\"\n          *ngFor=\"let ref of hostRef.scheduleTime.controls; let i = index; let last = last\"\n        >\n          <bb-time-picker\n            class=\"col-6 actions-schedule-time-picker__dropdown\"\n            [formControlName]=\"i\"\n            [excludedOptions]=\"hostRef.selectedTimeOptions$ | async\"\n            [controlRef]=\"ref\"\n            [minutesStep]=\"hostRef.minutesStep\"\n            (change)=\"hostRef.timeControlChange()\"\n            data-role=\"schedule-time-picker\"\n            i18n-aria-label=\"\n              Schedule time picker label @@actions-common.actions-schedule-notifications.schedule-time-picker.aria-label\"\n            aria-label=\"actions-schedule-notifications-time-picker\"\n          ></bb-time-picker>\n          <button\n            bbButton\n            circle=\"true\"\n            *ngIf=\"last && i !== 0\"\n            (click)=\"hostRef.deleteTimeOption(i)\"\n            color=\"link\"\n            aria-label=\"Delete time option\"\n            i18n-aria-label=\"\n              Schedule delete time option\n              @@actions-common.actions-schedule-notifications.schedule-delete-time-option.aria-label\"\n            data-role=\"delete-time-option\"\n          >\n            <bb-icon-ui name=\"delete\" class=\"text-muted\"></bb-icon-ui>\n          </button>\n        </div>\n        <button\n          bbButton\n          class=\"bb-stack__item\"\n          color=\"primary\"\n          circle=\"true\"\n          buttonSize=\"sm\"\n          type=\"button\"\n          *ngIf=\"hostRef.scheduleTime.controls.length < hostRef.MaxOptionsQuantity\"\n          (click)=\"hostRef.addTimeOption()\"\n          aria-label=\"Add time option\"\n          i18n-aria-label=\"\n            Schedule add time option @@actions-common.actions-schedule-notifications.schedule-time-add-option.aria-label\"\n          data-role=\"add-time-option\"\n        >\n          <bb-icon-ui name=\"add\" size=\"sm\"></bb-icon-ui>\n        </button>\n      </form>\n    </div>\n  </div>\n  <div class=\"bb-block bb-block--md text-center bb-text-support\" data-role=\"schedule-description\">\n    <em i18n=\"Schedule description@@actions-common.actions-schedule-notifications.schedule-description\">\n      Notifications will be {hostRef.scheduleType, select, Custom {grouped and sent at specified time.} RightAway {sent\n      immediately.}}\n    </em>\n    <hr />\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i2.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0.forwardRef(function () { return i3.TimePickerComponent; }), selector: "bb-time-picker", inputs: ["startTime", "minutesStep", "amPmFormat", "excludedOptions", "controlRef", "label"] }, { type: i0.forwardRef(function () { return i4.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return ActionsScheduleNotificationsComponentCustomizableDirective; }), selector: "[bbActionsScheduleNotificationsComponentCustomizableDirective]" }, { type: i0.forwardRef(function () { return i1.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i5.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i1.FormArrayName; }), selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i6.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i5.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsScheduleNotificationsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-actions-schedule-notifications',
                    templateUrl: './actions-schedule-notifications.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { actionRecipe: [{
                type: Input
            }], scheduleForm: [{
                type: Input
            }], minutesStep: [{
                type: Input
            }], submit: [{
                type: Output
            }] } });
export class ActionsScheduleNotificationsComponentCustomizableDirective extends BbTemplate {
}
ActionsScheduleNotificationsComponentCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsScheduleNotificationsComponentCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ActionsScheduleNotificationsComponentCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsScheduleNotificationsComponentCustomizableDirective, selector: "[bbActionsScheduleNotificationsComponentCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsScheduleNotificationsComponentCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbActionsScheduleNotificationsComponentCustomizableDirective]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,