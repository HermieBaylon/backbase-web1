import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/switch";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
export class SwitchWithLoadingComponent {
    constructor() {
        /**
         * Loading indicator presentation marker.
         */
        this.isLoading = false;
        /**
         * ControlValueAccessor on change handler.
         */
        this.onChange = () => { };
        /**
         * ControlValueAccessor on touch handler.
         */
        this.onTouch = () => { };
    }
    /**
     * ControlValueAccessor value setter.
     */
    set value(val) {
        this._value = val;
        this.onChange(val);
        this.onTouch(val);
    }
    /**
     * ControlValueAccessor value getter.
     */
    get value() {
        return this._value;
    }
    /**
     * Method from ControlValueAccessor to write a new value to the element.
     *
     * @param value - new value
     */
    writeValue(value) {
        this._value = value;
    }
    /**
     * Method from ControlValueAccessor to register on change handler.
     *
     * @param fn - on change handler function
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Method from ControlValueAccessor to register on touched handler.
     *
     * @param fn - on touched handler function
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
}
SwitchWithLoadingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SwitchWithLoadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SwitchWithLoadingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: SwitchWithLoadingComponent, selector: "bb-switch-with-loading", inputs: { isLoading: "isLoading", ariaLabel: ["aria-label", "ariaLabel"] }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => SwitchWithLoadingComponent),
            multi: true,
        },
    ], ngImport: i0, template: "<bb-switch-ui\n  [aria-label]=\"ariaLabel\"\n  [(ngModel)]=\"value\"\n  (blur)=\"onTouch()\"\n  *ngIf=\"!isLoading; else loadingIndicator\"\n></bb-switch-ui>\n<ng-template #loadingIndicator>\n  <div class=\"bb-loading-indicator bb-loading-indicator--sm\" data-role=\"loading-indicator\">\n    <svg aria-label=\"Loading indicator\" class=\"bb-loading-indicator__circle\" preserveAspectRatio=\"xMinYMin meet\">\n      <circle class=\"bb-loading-indicator__path\" cx=\"50%\" cy=\"50%\" fill=\"none\" r=\"40%\" stroke=\"currentColor\"></circle>\n    </svg>\n  </div>\n</ng-template>\n", components: [{ type: i1.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: SwitchWithLoadingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-switch-with-loading',
                    templateUrl: './switch-with-loading.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => SwitchWithLoadingComponent),
                            multi: true,
                        },
                    ],
                }]
        }], propDecorators: { isLoading: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLXdpdGgtbG9hZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FjdGlvbnMtY29tbW9uLWFuZy9zcmMvY29tcG9uZW50cy9zd2l0Y2gtd2l0aC1sb2FkaW5nL3N3aXRjaC13aXRoLWxvYWRpbmcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hY3Rpb25zLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvc3dpdGNoLXdpdGgtbG9hZGluZy9zd2l0Y2gtd2l0aC1sb2FkaW5nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBYXpFLE1BQU0sT0FBTywwQkFBMEI7SUFYdkM7UUFZRTs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFTM0I7O1dBRUc7UUFDSCxhQUFRLEdBQWEsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBRTlCOztXQUVHO1FBQ0gsWUFBTyxHQUFhLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztLQTRDOUI7SUExQ0M7O09BRUc7SUFDSCxJQUFJLEtBQUssQ0FBQyxHQUFZO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGdCQUFnQixDQUFDLEVBQVk7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxpQkFBaUIsQ0FBQyxFQUFZO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7O3dIQWhFVSwwQkFBMEI7NEdBQTFCLDBCQUEwQiw2SEFSMUI7UUFDVDtZQUNFLE9BQU8sRUFBRSxpQkFBaUI7WUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztZQUN6RCxLQUFLLEVBQUUsSUFBSTtTQUNaO0tBQ0YsMEJDWkgsc2tCQWFBOzRGRENhLDBCQUEwQjtrQkFYdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxXQUFXLEVBQUUsc0NBQXNDO29CQUNuRCxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLENBQUM7NEJBQ3pELEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGO2lCQUNGOzhCQUtVLFNBQVM7c0JBQWpCLEtBQUs7Z0JBS2UsU0FBUztzQkFBN0IsS0FBSzt1QkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1zd2l0Y2gtd2l0aC1sb2FkaW5nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3N3aXRjaC13aXRoLWxvYWRpbmcuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFN3aXRjaFdpdGhMb2FkaW5nQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFN3aXRjaFdpdGhMb2FkaW5nQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAvKipcbiAgICogTG9hZGluZyBpbmRpY2F0b3IgcHJlc2VudGF0aW9uIG1hcmtlci5cbiAgICovXG4gIEBJbnB1dCgpIGlzTG9hZGluZyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBhcmlhLWxhYmVsIGF0dHJpYnV0ZSB0ZXh0LlxuICAgKi9cbiAgQElucHV0KCdhcmlhLWxhYmVsJykgYXJpYUxhYmVsPzogc3RyaW5nO1xuXG4gIHByaXZhdGUgX3ZhbHVlITogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ29udHJvbFZhbHVlQWNjZXNzb3Igb24gY2hhbmdlIGhhbmRsZXIuXG4gICAqL1xuICBvbkNoYW5nZTogRnVuY3Rpb24gPSAoKSA9PiB7fTtcblxuICAvKipcbiAgICogQ29udHJvbFZhbHVlQWNjZXNzb3Igb24gdG91Y2ggaGFuZGxlci5cbiAgICovXG4gIG9uVG91Y2g6IEZ1bmN0aW9uID0gKCkgPT4ge307XG5cbiAgLyoqXG4gICAqIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHZhbHVlIHNldHRlci5cbiAgICovXG4gIHNldCB2YWx1ZSh2YWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbDtcbiAgICB0aGlzLm9uQ2hhbmdlKHZhbCk7XG4gICAgdGhpcy5vblRvdWNoKHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udHJvbFZhbHVlQWNjZXNzb3IgdmFsdWUgZ2V0dGVyLlxuICAgKi9cbiAgZ2V0IHZhbHVlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgZnJvbSBDb250cm9sVmFsdWVBY2Nlc3NvciB0byB3cml0ZSBhIG5ldyB2YWx1ZSB0byB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIC0gbmV3IHZhbHVlXG4gICAqL1xuICB3cml0ZVZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgZnJvbSBDb250cm9sVmFsdWVBY2Nlc3NvciB0byByZWdpc3RlciBvbiBjaGFuZ2UgaGFuZGxlci5cbiAgICpcbiAgICogQHBhcmFtIGZuIC0gb24gY2hhbmdlIGhhbmRsZXIgZnVuY3Rpb25cbiAgICovXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKSB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCBmcm9tIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHRvIHJlZ2lzdGVyIG9uIHRvdWNoZWQgaGFuZGxlci5cbiAgICpcbiAgICogQHBhcmFtIGZuIC0gb24gdG91Y2hlZCBoYW5kbGVyIGZ1bmN0aW9uXG4gICAqL1xuICByZWdpc3Rlck9uVG91Y2hlZChmbjogRnVuY3Rpb24pIHtcbiAgICB0aGlzLm9uVG91Y2ggPSBmbjtcbiAgfVxufVxuIiwiPGJiLXN3aXRjaC11aVxuICBbYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIlxuICBbKG5nTW9kZWwpXT1cInZhbHVlXCJcbiAgKGJsdXIpPVwib25Ub3VjaCgpXCJcbiAgKm5nSWY9XCIhaXNMb2FkaW5nOyBlbHNlIGxvYWRpbmdJbmRpY2F0b3JcIlxuPjwvYmItc3dpdGNoLXVpPlxuPG5nLXRlbXBsYXRlICNsb2FkaW5nSW5kaWNhdG9yPlxuICA8ZGl2IGNsYXNzPVwiYmItbG9hZGluZy1pbmRpY2F0b3IgYmItbG9hZGluZy1pbmRpY2F0b3ItLXNtXCIgZGF0YS1yb2xlPVwibG9hZGluZy1pbmRpY2F0b3JcIj5cbiAgICA8c3ZnIGFyaWEtbGFiZWw9XCJMb2FkaW5nIGluZGljYXRvclwiIGNsYXNzPVwiYmItbG9hZGluZy1pbmRpY2F0b3JfX2NpcmNsZVwiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWluWU1pbiBtZWV0XCI+XG4gICAgICA8Y2lyY2xlIGNsYXNzPVwiYmItbG9hZGluZy1pbmRpY2F0b3JfX3BhdGhcIiBjeD1cIjUwJVwiIGN5PVwiNTAlXCIgZmlsbD1cIm5vbmVcIiByPVwiNDAlXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCI+PC9jaXJjbGU+XG4gICAgPC9zdmc+XG4gIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==