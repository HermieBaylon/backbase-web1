import { ChangeDetectionStrategy, Component, Directive, Input } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/input-checkbox";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/tooltip-directive";
export class ActionsNotificationChannelsComponent {
    constructor(controlContainer) {
        this.controlContainer = controlContainer;
        /**
         * Action notification channels IDs.
         */
        this.id = `bb-actions-notification-channels-${ActionsNotificationChannelsComponent.idCounter++}`;
        /**
         * Actions map.
         */
        this.actionsMap = new Map();
    }
    /**
     * Actions map setter.
     */
    set actions(value) {
        this.actionsMap = new Map(value.map(action => [action.type, action]));
    }
    ngAfterContentInit() {
        this.formGroup = this.controlContainer.control;
    }
}
ActionsNotificationChannelsComponent.idCounter = 0;
ActionsNotificationChannelsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationChannelsComponent, deps: [{ token: i1.ControlContainer }], target: i0.ɵɵFactoryTarget.Component });
ActionsNotificationChannelsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsNotificationChannelsComponent, selector: "bb-actions-notification-channels", inputs: { actions: "actions" }, ngImport: i0, template: "<ng-container\n  bbActionsNotificationChannelsCustomizableDirective\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    actionsMap: actionsMap\n  }\"\n></ng-container>\n\n<ng-template bbActionsNotificationChannelsCustomizableDirective let-hostRef let-actionsMap=\"context.actionsMap\">\n  <label class=\"bb-label bb-stack\" *ngIf=\"actionsMap.has('sms') || actionsMap.has('email')\">\n    <span\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      i18n=\"Title for notification channels@@actions-common.notification-channels.title\"\n      data-role=\"channel-title\"\n      >Additional channels</span\n    >\n    <bb-icon-ui\n      class=\"bb-stack__item\"\n      tabindex=\"0\"\n      name=\"info\"\n      size=\"sm\"\n      data-role=\"channel-title-icon\"\n      triggers=\"hover focus\"\n      aria-label=\"Other channels that you would like to receive notifications through, additionally to the ones in-app\"\n      i18n-aria-label=\"\n        Channels that you would like to receive notifications through@@actions-common.notification-channels.others\"\n      bbTooltip=\"Other channels that you would like to receive notifications through, additionally to the ones in-app\"\n      i18n-bbTooltip=\"@@actions-common.notification-channels.others\"\n    ></bb-icon-ui>\n  </label>\n  <div [formGroup]=\"hostRef.formGroup\">\n    <div *ngIf=\"actionsMap.has('sms')\" class=\"bb-block bb-block--sm\">\n      <bb-input-checkbox-ui\n        label=\"SMS\"\n        i18n-label=\"Label for sms channel checkbox@@actions-common.notification-channels.sms.label\"\n        formControlName=\"sms\"\n        data-role=\"sms-checkbox\"\n      ></bb-input-checkbox-ui>\n    </div>\n\n    <div *ngIf=\"actionsMap.has('email')\" class=\"bb-block bb-block--sm\">\n      <bb-input-checkbox-ui\n        label=\"Email\"\n        i18n-label=\"Label for email channel checkbox@@actions-common.notification-channels.email.label\"\n        formControlName=\"email\"\n        data-role=\"email-checkbox\"\n      ></bb-input-checkbox-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i3.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i0.forwardRef(function () { return ActionsNotificationChannelsCustomizableDirective; }), selector: "[bbActionsNotificationChannelsCustomizableDirective]" }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i5.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationChannelsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-actions-notification-channels',
                    templateUrl: './actions-notification-channels.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ControlContainer }]; }, propDecorators: { actions: [{
                type: Input
            }] } });
export class ActionsNotificationChannelsCustomizableDirective extends BbTemplate {
}
ActionsNotificationChannelsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationChannelsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ActionsNotificationChannelsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsNotificationChannelsCustomizableDirective, selector: "[bbActionsNotificationChannelsCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsNotificationChannelsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbActionsNotificationChannelsCustomizableDirective]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy1ub3RpZmljYXRpb24tY2hhbm5lbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hY3Rpb25zLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvYWN0aW9ucy1ub3RpZmljYXRpb24tY2hhbm5lbHMvYWN0aW9ucy1ub3RpZmljYXRpb24tY2hhbm5lbHMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hY3Rpb25zLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvYWN0aW9ucy1ub3RpZmljYXRpb24tY2hhbm5lbHMvYWN0aW9ucy1ub3RpZmljYXRpb24tY2hhbm5lbHMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQix1QkFBdUIsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd2RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7Ozs7QUFPM0QsTUFBTSxPQUFPLG9DQUFvQztJQXlCL0MsWUFBNkIsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUF0Qi9EOztXQUVHO1FBQ00sT0FBRSxHQUFHLG9DQUFvQyxvQ0FBb0MsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO1FBU3JHOztXQUVHO1FBQ0gsZUFBVSxHQUEwRCxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBT1osQ0FBQztJQWpCbkU7O09BRUc7SUFDSCxJQUFhLE9BQU8sQ0FBQyxLQUE0QjtRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFjRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBb0IsQ0FBQztJQUM5RCxDQUFDOztBQTVCTSw4Q0FBUyxHQUFHLENBQUMsQ0FBQztrSUFEVixvQ0FBb0M7c0hBQXBDLG9DQUFvQyx3R0NWakQsMGhFQWtEQSxrYkRMYSxnREFBZ0Q7NEZBbkNoRCxvQ0FBb0M7a0JBTGhELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtDQUFrQztvQkFDNUMsV0FBVyxFQUFFLGdEQUFnRDtvQkFDN0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO3VHQVljLE9BQU87c0JBQW5CLEtBQUs7O0FBd0JSLE1BQU0sT0FBTyxnREFBaUQsU0FBUSxVQUtyRTs7OElBTFksZ0RBQWdEO2tJQUFoRCxnREFBZ0Q7NEZBQWhELGdEQUFnRDtrQkFINUQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0RBQXNEO2lCQUNqRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xDb250YWluZXIsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFNwZWNpZmljYXRpb25BY3Rpb24gfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYWN0aW9ucyc7XG5pbXBvcnQgeyBCYlRlbXBsYXRlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1hY3Rpb25zLW5vdGlmaWNhdGlvbi1jaGFubmVscycsXG4gIHRlbXBsYXRlVXJsOiAnLi9hY3Rpb25zLW5vdGlmaWNhdGlvbi1jaGFubmVscy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBBY3Rpb25zTm90aWZpY2F0aW9uQ2hhbm5lbHNDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgc3RhdGljIGlkQ291bnRlciA9IDA7XG5cbiAgLyoqXG4gICAqIEFjdGlvbiBub3RpZmljYXRpb24gY2hhbm5lbHMgSURzLlxuICAgKi9cbiAgcmVhZG9ubHkgaWQgPSBgYmItYWN0aW9ucy1ub3RpZmljYXRpb24tY2hhbm5lbHMtJHtBY3Rpb25zTm90aWZpY2F0aW9uQ2hhbm5lbHNDb21wb25lbnQuaWRDb3VudGVyKyt9YDtcblxuICAvKipcbiAgICogQWN0aW9ucyBtYXAgc2V0dGVyLlxuICAgKi9cbiAgQElucHV0KCkgc2V0IGFjdGlvbnModmFsdWU6IFNwZWNpZmljYXRpb25BY3Rpb25bXSkge1xuICAgIHRoaXMuYWN0aW9uc01hcCA9IG5ldyBNYXAodmFsdWUubWFwKGFjdGlvbiA9PiBbYWN0aW9uLnR5cGUsIGFjdGlvbl0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3Rpb25zIG1hcC5cbiAgICovXG4gIGFjdGlvbnNNYXA6IE1hcDxTcGVjaWZpY2F0aW9uQWN0aW9uWyd0eXBlJ10sIFNwZWNpZmljYXRpb25BY3Rpb24+ID0gbmV3IE1hcCgpO1xuXG4gIC8qKlxuICAgKiBOb3RpZmljYXRpb24gY2hhbm5lbHMgc2V0dGluZ3MgZm9ybS5cbiAgICovXG4gIGZvcm1Hcm91cD86IEZvcm1Hcm91cDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNvbnRyb2xDb250YWluZXI6IENvbnRyb2xDb250YWluZXIpIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuZm9ybUdyb3VwID0gdGhpcy5jb250cm9sQ29udGFpbmVyLmNvbnRyb2wgYXMgRm9ybUdyb3VwO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYkFjdGlvbnNOb3RpZmljYXRpb25DaGFubmVsc0N1c3RvbWl6YWJsZURpcmVjdGl2ZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBBY3Rpb25zTm90aWZpY2F0aW9uQ2hhbm5lbHNDdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBBY3Rpb25zTm90aWZpY2F0aW9uQ2hhbm5lbHNDb21wb25lbnQsXG4gIHtcbiAgICBhY3Rpb25zTWFwOiBNYXA8U3BlY2lmaWNhdGlvbkFjdGlvblsndHlwZSddLCBTcGVjaWZpY2F0aW9uQWN0aW9uPjtcbiAgfVxuPiB7fVxuIiwiPG5nLWNvbnRhaW5lclxuICBiYkFjdGlvbnNOb3RpZmljYXRpb25DaGFubmVsc0N1c3RvbWl6YWJsZURpcmVjdGl2ZVxuICBbYmJIb3N0UmVmXT1cInRoaXNcIlxuICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgIGFjdGlvbnNNYXA6IGFjdGlvbnNNYXBcbiAgfVwiXG4+PC9uZy1jb250YWluZXI+XG5cbjxuZy10ZW1wbGF0ZSBiYkFjdGlvbnNOb3RpZmljYXRpb25DaGFubmVsc0N1c3RvbWl6YWJsZURpcmVjdGl2ZSBsZXQtaG9zdFJlZiBsZXQtYWN0aW9uc01hcD1cImNvbnRleHQuYWN0aW9uc01hcFwiPlxuICA8bGFiZWwgY2xhc3M9XCJiYi1sYWJlbCBiYi1zdGFja1wiICpuZ0lmPVwiYWN0aW9uc01hcC5oYXMoJ3NtcycpIHx8IGFjdGlvbnNNYXAuaGFzKCdlbWFpbCcpXCI+XG4gICAgPHNwYW5cbiAgICAgIGNsYXNzPVwiYmItc3RhY2tfX2l0ZW0gYmItc3RhY2tfX2l0ZW0tLXNwYWNpbmctc21cIlxuICAgICAgaTE4bj1cIlRpdGxlIGZvciBub3RpZmljYXRpb24gY2hhbm5lbHNAQGFjdGlvbnMtY29tbW9uLm5vdGlmaWNhdGlvbi1jaGFubmVscy50aXRsZVwiXG4gICAgICBkYXRhLXJvbGU9XCJjaGFubmVsLXRpdGxlXCJcbiAgICAgID5BZGRpdGlvbmFsIGNoYW5uZWxzPC9zcGFuXG4gICAgPlxuICAgIDxiYi1pY29uLXVpXG4gICAgICBjbGFzcz1cImJiLXN0YWNrX19pdGVtXCJcbiAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICBuYW1lPVwiaW5mb1wiXG4gICAgICBzaXplPVwic21cIlxuICAgICAgZGF0YS1yb2xlPVwiY2hhbm5lbC10aXRsZS1pY29uXCJcbiAgICAgIHRyaWdnZXJzPVwiaG92ZXIgZm9jdXNcIlxuICAgICAgYXJpYS1sYWJlbD1cIk90aGVyIGNoYW5uZWxzIHRoYXQgeW91IHdvdWxkIGxpa2UgdG8gcmVjZWl2ZSBub3RpZmljYXRpb25zIHRocm91Z2gsIGFkZGl0aW9uYWxseSB0byB0aGUgb25lcyBpbi1hcHBcIlxuICAgICAgaTE4bi1hcmlhLWxhYmVsPVwiXG4gICAgICAgIENoYW5uZWxzIHRoYXQgeW91IHdvdWxkIGxpa2UgdG8gcmVjZWl2ZSBub3RpZmljYXRpb25zIHRocm91Z2hAQGFjdGlvbnMtY29tbW9uLm5vdGlmaWNhdGlvbi1jaGFubmVscy5vdGhlcnNcIlxuICAgICAgYmJUb29sdGlwPVwiT3RoZXIgY2hhbm5lbHMgdGhhdCB5b3Ugd291bGQgbGlrZSB0byByZWNlaXZlIG5vdGlmaWNhdGlvbnMgdGhyb3VnaCwgYWRkaXRpb25hbGx5IHRvIHRoZSBvbmVzIGluLWFwcFwiXG4gICAgICBpMThuLWJiVG9vbHRpcD1cIkBAYWN0aW9ucy1jb21tb24ubm90aWZpY2F0aW9uLWNoYW5uZWxzLm90aGVyc1wiXG4gICAgPjwvYmItaWNvbi11aT5cbiAgPC9sYWJlbD5cbiAgPGRpdiBbZm9ybUdyb3VwXT1cImhvc3RSZWYuZm9ybUdyb3VwXCI+XG4gICAgPGRpdiAqbmdJZj1cImFjdGlvbnNNYXAuaGFzKCdzbXMnKVwiIGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLXNtXCI+XG4gICAgICA8YmItaW5wdXQtY2hlY2tib3gtdWlcbiAgICAgICAgbGFiZWw9XCJTTVNcIlxuICAgICAgICBpMThuLWxhYmVsPVwiTGFiZWwgZm9yIHNtcyBjaGFubmVsIGNoZWNrYm94QEBhY3Rpb25zLWNvbW1vbi5ub3RpZmljYXRpb24tY2hhbm5lbHMuc21zLmxhYmVsXCJcbiAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwic21zXCJcbiAgICAgICAgZGF0YS1yb2xlPVwic21zLWNoZWNrYm94XCJcbiAgICAgID48L2JiLWlucHV0LWNoZWNrYm94LXVpPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiAqbmdJZj1cImFjdGlvbnNNYXAuaGFzKCdlbWFpbCcpXCIgY2xhc3M9XCJiYi1ibG9jayBiYi1ibG9jay0tc21cIj5cbiAgICAgIDxiYi1pbnB1dC1jaGVja2JveC11aVxuICAgICAgICBsYWJlbD1cIkVtYWlsXCJcbiAgICAgICAgaTE4bi1sYWJlbD1cIkxhYmVsIGZvciBlbWFpbCBjaGFubmVsIGNoZWNrYm94QEBhY3Rpb25zLWNvbW1vbi5ub3RpZmljYXRpb24tY2hhbm5lbHMuZW1haWwubGFiZWxcIlxuICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJlbWFpbFwiXG4gICAgICAgIGRhdGEtcm9sZT1cImVtYWlsLWNoZWNrYm94XCJcbiAgICAgID48L2JiLWlucHV0LWNoZWNrYm94LXVpPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=