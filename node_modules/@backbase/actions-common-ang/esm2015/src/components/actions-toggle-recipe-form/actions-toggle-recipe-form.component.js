import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output, } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/actions-form-builder.service";
import * as i2 from "../switch-with-loading/switch-with-loading.component";
import * as i3 from "../actions-schedule-notifications/actions-schedule-notifications.component";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
export class ActionsToggleRecipeFormComponent {
    constructor(actionsFormBuilderService) {
        this.actionsFormBuilderService = actionsFormBuilderService;
        /**
         * Flag to control if schedule notifications is enabled
         */
        this.scheduleEnabled = false;
        /**
         * On form submit output.
         */
        this.submit = new EventEmitter();
        /**
         * Loading state flag.
         */
        this.isLoading = false;
    }
    ngOnInit() {
        this.formGroup = this.actionsFormBuilderService.buildActionRecipeFormGroup(this.specification, this.actionRecipe);
    }
    ngOnChanges(changes) {
        const { actionRecipe } = changes;
        if (this.formGroup && actionRecipe && actionRecipe.previousValue !== actionRecipe.currentValue) {
            this.isLoading = false;
            this.formGroup.patchValue(this.actionsFormBuilderService.buildActionRecipeFormValue(this.specification, this.actionRecipe));
        }
    }
    /**
     * Method to handle schedule form change and trigger submit action.
     *
     * @param value - action recipe form value
     */
    onScheduleChange(value) {
        var _a, _b;
        (_a = this.formGroup) === null || _a === void 0 ? void 0 : _a.patchValue(value);
        this.submit.emit((_b = this.formGroup) === null || _b === void 0 ? void 0 : _b.value);
    }
    /**
     * Method to submit action recipe form.
     *
     * @param formValue - action recipe form value
     */
    onSubmit(formValue) {
        this.isLoading = true;
        this.submit.emit(formValue);
    }
}
ActionsToggleRecipeFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsToggleRecipeFormComponent, deps: [{ token: i1.ActionsFormBuilderService }], target: i0.ɵɵFactoryTarget.Component });
ActionsToggleRecipeFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsToggleRecipeFormComponent, selector: "bb-actions-toggle-recipe-form", inputs: { actionRecipe: "actionRecipe", specification: "specification", label: "label", scheduleEnabled: "scheduleEnabled" }, outputs: { submit: "submit" }, usesOnChanges: true, ngImport: i0, template: "<ng-container bbActionsToggleRecipeFormCustomizableDirective [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbActionsToggleRecipeFormCustomizableDirective let-hostRef>\n  <ng-container *ngIf=\"hostRef.formGroup\">\n    <form [formGroup]=\"hostRef.formGroup\">\n      <div class=\"bb-block bb-block--md bb-stack\">\n        <div\n          class=\"bb-stack__item bb-text-support bb-text-bold\"\n          [attr.data-role]=\"'toggle-recipe-label-' + hostRef.specification.id\"\n        >\n          {{ hostRef.label }}\n        </div>\n        <bb-switch-with-loading\n          [isLoading]=\"hostRef.isLoading\"\n          class=\"bb-stack__item bb-stack__item--push-right\"\n          formControlName=\"active\"\n          (change)=\"hostRef.onSubmit(hostRef.formGroup.value)\"\n          aria-label=\"{{ 'Switch on/off ' + hostRef.label }}\"\n          i18n-aria-label=\"Toggle recipe aria label@@actions-common.actions-toggle-recipe-form.switcher.aria-label\"\n          [attr.data-role]=\"'toggle-recipe-' + hostRef.specification.id\"\n        ></bb-switch-with-loading>\n      </div>\n      <bb-actions-schedule-notifications\n        class=\"bb-stack__item\"\n        *ngIf=\"hostRef.scheduleEnabled && hostRef.formGroup.value?.active && hostRef.actionRecipe\"\n        [scheduleForm]=\"hostRef.formGroup.get('recurrence')\"\n        [actionRecipe]=\"hostRef.actionRecipe\"\n        (submit)=\"hostRef.onScheduleChange($event)\"\n      ></bb-actions-schedule-notifications>\n    </form>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.SwitchWithLoadingComponent; }), selector: "bb-switch-with-loading", inputs: ["isLoading", "aria-label"] }, { type: i0.forwardRef(function () { return i3.ActionsScheduleNotificationsComponent; }), selector: "bb-actions-schedule-notifications", inputs: ["actionRecipe", "scheduleForm", "minutesStep"], outputs: ["submit"] }], directives: [{ type: i0.forwardRef(function () { return ActionsToggleRecipeFormCustomizableDirective; }), selector: "[bbActionsToggleRecipeFormCustomizableDirective]" }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i5.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i5.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i5.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i5.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i5.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsToggleRecipeFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-actions-toggle-recipe-form',
                    templateUrl: './actions-toggle-recipe-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ActionsFormBuilderService }]; }, propDecorators: { actionRecipe: [{
                type: Input
            }], specification: [{
                type: Input
            }], label: [{
                type: Input
            }], scheduleEnabled: [{
                type: Input
            }], submit: [{
                type: Output
            }] } });
export class ActionsToggleRecipeFormCustomizableDirective extends BbTemplate {
}
ActionsToggleRecipeFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsToggleRecipeFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ActionsToggleRecipeFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsToggleRecipeFormCustomizableDirective, selector: "[bbActionsToggleRecipeFormCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsToggleRecipeFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbActionsToggleRecipeFormCustomizableDirective]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,