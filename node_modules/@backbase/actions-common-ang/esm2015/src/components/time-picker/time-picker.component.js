import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { getTimeOptions } from '../../helpers/time.helper';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/dropdown-single-select";
import * as i2 from "@angular/forms";
export class TimePickerComponent {
    constructor() {
        this.timeOptions = [];
        this.excludedOptions$$ = new BehaviorSubject([]);
        this.componentDestroyed$ = new Subject();
        /**
         * Start time
         */
        this.startTime = 0;
        /**
         * Step on minutes for time options
         */
        this.minutesStep = 60;
        /**
         * Time form control
         */
        this.timeControl = new FormControl();
        /**
         * Change event handler
         */
        this.onChange = (_time) => { }; // NOSONAR
        /**
         * Touched event handler
         */
        this.onTouched = () => { }; // NOSONAR
    }
    /**
     * Options to exclude
     */
    set excludedOptions(options) {
        this.excludedOptions$$.next(options || []);
    }
    ngOnInit() {
        this.onExcludedOptionsChange();
        this.onFormValueChange();
    }
    onExcludedOptionsChange() {
        this.excludedOptions$$.pipe(takeUntil(this.componentDestroyed$)).subscribe(options => {
            var _a, _b;
            const timeControlValue = ((_a = this.timeControl.value) === null || _a === void 0 ? void 0 : _a.time) || ((_b = this.controlRef) === null || _b === void 0 ? void 0 : _b.value);
            const excludedOptions = timeControlValue || timeControlValue === 0 ? options.filter(option => option !== timeControlValue) : [];
            this.timeOptions = getTimeOptions(this.startTime, this.minutesStep, excludedOptions, this.amPmFormat);
            const selection = this.timeOptions.find(option => option.time === timeControlValue);
            this.timeControl.setValue(selection);
        });
    }
    onFormValueChange() {
        this.timeControl.valueChanges.pipe(takeUntil(this.componentDestroyed$)).subscribe(value => {
            if (value) {
                this.onChange(value.time);
            }
        });
    }
    /**
     * Method to register change event handler
     *
     * @param fn
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Method to register touched event handler
     *
     * @param fn
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Method to write initial value to the input
     *
     * @param time
     */
    writeValue(time) {
        this.timeControl.setValue(this.timeOptions.find(ts => ts.time === time));
    }
    markAsTouched(event) {
        const target = event.target;
        target.blur();
        this.onTouched();
    }
    ngOnDestroy() {
        this.componentDestroyed$.next(true);
    }
}
TimePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: TimePickerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TimePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: TimePickerComponent, selector: "bb-time-picker", inputs: { startTime: "startTime", minutesStep: "minutesStep", amPmFormat: "amPmFormat", excludedOptions: "excludedOptions", controlRef: "controlRef", label: "label" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TimePickerComponent),
            multi: true,
        },
    ], ngImport: i0, template: "<bb-dropdown-single-select-ui\n  iconName=\"caret-down\"\n  [options]=\"timeOptions\"\n  [label]=\"label\"\n  (change)=\"markAsTouched($event)\"\n  [formControl]=\"timeControl\"\n  displayAttributePath=\"label\"\n  data-role=\"time-picker-dropdown\"\n>\n</bb-dropdown-single-select-ui>\n", components: [{ type: i1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }], directives: [{ type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: TimePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-time-picker',
                    templateUrl: './time-picker.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TimePickerComponent),
                            multi: true,
                        },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { startTime: [{
                type: Input
            }], minutesStep: [{
                type: Input
            }], amPmFormat: [{
                type: Input
            }], excludedOptions: [{
                type: Input
            }], controlRef: [{
                type: Input
            }], label: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,