import { __rest } from "tslib";
import { DAYS_OF_WEEK, getHoursOfDay, hoursToMinutesArray } from './time.helper';
import { isEqualNumberArrays } from './utils';
export const fromHttpResponse = (body) => {
    if (body === null) {
        throw new Error('Response body not set');
    }
    return body;
};
export const secondsToMilliseconds = (seconds) => seconds * 1000;
export const actionRecipeFormItemToRequest = (_a) => {
    var { id, name, amount, actions, recurrence } = _a, restActionRecipe = __rest(_a, ["id", "name", "amount", "actions", "recurrence"]);
    return (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, restActionRecipe), (id && { id })), (name && { name })), { amount: (amount === null || amount === void 0 ? void 0 : amount.amount) || '0' }), (Object.keys(notificationRecurrenceFormValueToRequest(recurrence)).length && {
        recurrence: notificationRecurrenceFormValueToRequest(recurrence),
    })), { actions: notificationChannelsFormValueToRequest(actions) }));
};
export const parseActionRecipeFormItem = (_a) => {
    var { id, name, amount, actions, recurrence } = _a, restActionRecipe = __rest(_a, ["id", "name", "amount", "actions", "recurrence"]);
    return (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, restActionRecipe), (id && { id })), (name && { name })), { amount: amount.amount || '0', actions: parseNotificationChannelsFormValue(actions) }), (Object.keys(notificationRecurrenceFormValueToRequest(recurrence)).length && {
        recurrence: notificationRecurrenceFormValueToRequest(recurrence),
    })));
};
export const arrangementActionRecipeToRequest = (arrangementId) => (actionRecipeFormItemValue) => (Object.assign({ arrangementId }, actionRecipeFormItemToRequest(actionRecipeFormItemValue)));
export const mergeNotificationChannels = (channels, defaultChannels) => channels
    ? channels.map(channel => (Object.assign(Object.assign({}, channel), { enabled: defaultChannels.some(({ type }) => type === channel.type) })))
    : [];
export const mergeSpecificationsWithActionRecipes = (specs, recipes) => specs.reduce((prev, specification) => (Object.assign(Object.assign({}, prev), { [specification.id]: {
        specification,
        actionRecipe: recipes.find(({ specificationId }) => specificationId === specification.id),
    } })), {});
export const getMappedRecurrenceResponse = (responseRecurrence, { recurrence: cachedRecurrence }) => (Object.assign(Object.assign({}, responseRecurrence), { hoursOfDay: getCachedHoursOfDay(responseRecurrence, cachedRecurrence) }));
const notificationChannelsFormValueToRequest = (channels) => Object.keys(channels)
    .filter(key => channels[key])
    .map(type => ({ type }));
const notificationRecurrenceFormValueToRequest = (rec) => (Object.assign(Object.assign({}, (((rec === null || rec === void 0 ? void 0 : rec.scheduleTime.length) || 0) !== 0 && { hoursOfDay: getHoursOfDay(rec === null || rec === void 0 ? void 0 : rec.scheduleTime) })), (((rec === null || rec === void 0 ? void 0 : rec.scheduleTime.length) || 0) !== 0 && { daysOfWeek: (rec === null || rec === void 0 ? void 0 : rec.daysOfWeek) || DAYS_OF_WEEK })));
const parseNotificationChannelsFormValue = (channels) => Object.keys(channels).map(type => ({
    type,
    enabled: channels[type],
}));
const getCachedHoursOfDay = (responseRecurrence, cachedRecurrence) => {
    if (!(cachedRecurrence === null || cachedRecurrence === void 0 ? void 0 : cachedRecurrence.scheduleTime)) {
        return responseRecurrence.hoursOfDay;
    }
    if (!isEqualNumberArrays(cachedRecurrence.scheduleTime.slice(0), hoursToMinutesArray(responseRecurrence.hoursOfDay))) {
        return responseRecurrence.hoursOfDay;
    }
    return cachedRecurrence.scheduleTime.map(minutes => String(minutes / 60));
};
//# sourceMappingURL=data:application/json;base64,