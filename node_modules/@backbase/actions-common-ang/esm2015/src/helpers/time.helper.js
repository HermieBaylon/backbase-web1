const AM_PM = ['AM', 'PM'];
export const DAYS_OF_WEEK = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];
export function getTimeOptions(startTime, minutesStep, excludedOptions, amPmFormat) {
    const timeOptions = [];
    let index = 0;
    while (startTime < 24 * 60) {
        const hh = Math.floor(startTime / 60);
        const mm = startTime % 60;
        if (!excludedOptions.includes(startTime)) {
            timeOptions[index] = {
                label: getOptionLabel(hh, mm, amPmFormat),
                time: startTime,
            };
            index++;
        }
        startTime = startTime + minutesStep;
    }
    return timeOptions;
}
export function getHoursOfDay(scheduleTime = []) {
    const list = scheduleTime.map(time => String(time / 60));
    if (!list.length) {
        for (let i = 0; i < 24; i++) {
            list.push(`${i}`);
        }
    }
    return list;
}
export function hoursToMinutesArray(hours) {
    return (hours === null || hours === void 0 ? void 0 : hours.map(hour => Number(hour) * 60)) || [];
}
function getOptionLabel(hh, mm, amPmFormat) {
    const getFormattedTime = (hours = hh, suffix = '') => ('0' + hours).slice(-2) + '.' + ('0' + mm).slice(-2) + suffix;
    return amPmFormat ? getFormattedTime(hh % 12, AM_PM[Math.floor(hh / 12)]) : getFormattedTime();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FjdGlvbnMtY29tbW9uLWFuZy9zcmMvaGVscGVycy90aW1lLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUUzQixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQWlCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFNUYsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsU0FBaUIsRUFDakIsV0FBbUIsRUFDbkIsZUFBeUIsRUFDekIsVUFBbUI7SUFFbkIsTUFBTSxXQUFXLEdBQWlCLEVBQUUsQ0FBQztJQUNyQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxPQUFPLFNBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzFCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sRUFBRSxHQUFHLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDeEMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUNuQixLQUFLLEVBQUUsY0FBYyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDO2dCQUN6QyxJQUFJLEVBQUUsU0FBUzthQUNoQixDQUFDO1lBRUYsS0FBSyxFQUFFLENBQUM7U0FDVDtRQUVELFNBQVMsR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDO0tBQ3JDO0lBRUQsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsZUFBeUIsRUFBRTtJQUN2RCxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBaUIsQ0FBQztJQUN6RSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQWdCLENBQUMsQ0FBQztTQUNqQztLQUNGO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLEtBQStCO0lBQ2pFLE9BQU8sQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFJLEVBQUUsQ0FBQztBQUNyRCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsRUFBVSxFQUFFLEVBQVUsRUFBRSxVQUFtQjtJQUNqRSxNQUFNLGdCQUFnQixHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBRXBILE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDakcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERheXNPZldlZWssIEhvdXJzT2ZEYXkgfSBmcm9tICdAYmFja2Jhc2UvYWN0aW9ucy1odHRwLWFuZyc7XG5pbXBvcnQgeyBUaW1lT3B0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL3NjaGVkdWxlLW5vdGlmaWNhdGlvbnMubW9kZWwnO1xuXG5jb25zdCBBTV9QTSA9IFsnQU0nLCAnUE0nXTtcblxuZXhwb3J0IGNvbnN0IERBWVNfT0ZfV0VFSzogRGF5c09mV2Vla1tdID0gWydNT04nLCAnVFVFJywgJ1dFRCcsICdUSFUnLCAnRlJJJywgJ1NBVCcsICdTVU4nXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVPcHRpb25zKFxuICBzdGFydFRpbWU6IG51bWJlcixcbiAgbWludXRlc1N0ZXA6IG51bWJlcixcbiAgZXhjbHVkZWRPcHRpb25zOiBudW1iZXJbXSxcbiAgYW1QbUZvcm1hdDogYm9vbGVhbixcbik6IFRpbWVPcHRpb25bXSB7XG4gIGNvbnN0IHRpbWVPcHRpb25zOiBUaW1lT3B0aW9uW10gPSBbXTtcbiAgbGV0IGluZGV4ID0gMDtcbiAgd2hpbGUgKHN0YXJ0VGltZSA8IDI0ICogNjApIHtcbiAgICBjb25zdCBoaCA9IE1hdGguZmxvb3Ioc3RhcnRUaW1lIC8gNjApO1xuICAgIGNvbnN0IG1tID0gc3RhcnRUaW1lICUgNjA7XG4gICAgaWYgKCFleGNsdWRlZE9wdGlvbnMuaW5jbHVkZXMoc3RhcnRUaW1lKSkge1xuICAgICAgdGltZU9wdGlvbnNbaW5kZXhdID0ge1xuICAgICAgICBsYWJlbDogZ2V0T3B0aW9uTGFiZWwoaGgsIG1tLCBhbVBtRm9ybWF0KSxcbiAgICAgICAgdGltZTogc3RhcnRUaW1lLFxuICAgICAgfTtcblxuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBzdGFydFRpbWUgPSBzdGFydFRpbWUgKyBtaW51dGVzU3RlcDtcbiAgfVxuXG4gIHJldHVybiB0aW1lT3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhvdXJzT2ZEYXkoc2NoZWR1bGVUaW1lOiBudW1iZXJbXSA9IFtdKTogSG91cnNPZkRheVtdIHtcbiAgY29uc3QgbGlzdCA9IHNjaGVkdWxlVGltZS5tYXAodGltZSA9PiBTdHJpbmcodGltZSAvIDYwKSkgYXMgSG91cnNPZkRheVtdO1xuICBpZiAoIWxpc3QubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICBsaXN0LnB1c2goYCR7aX1gIGFzIEhvdXJzT2ZEYXkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsaXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaG91cnNUb01pbnV0ZXNBcnJheShob3VyczogSG91cnNPZkRheVtdIHwgdW5kZWZpbmVkKTogbnVtYmVyW10ge1xuICByZXR1cm4gaG91cnM/Lm1hcChob3VyID0+IE51bWJlcihob3VyKSAqIDYwKSB8fCBbXTtcbn1cblxuZnVuY3Rpb24gZ2V0T3B0aW9uTGFiZWwoaGg6IG51bWJlciwgbW06IG51bWJlciwgYW1QbUZvcm1hdDogYm9vbGVhbik6IHN0cmluZyB7XG4gIGNvbnN0IGdldEZvcm1hdHRlZFRpbWUgPSAoaG91cnMgPSBoaCwgc3VmZml4ID0gJycpID0+ICgnMCcgKyBob3Vycykuc2xpY2UoLTIpICsgJy4nICsgKCcwJyArIG1tKS5zbGljZSgtMikgKyBzdWZmaXg7XG5cbiAgcmV0dXJuIGFtUG1Gb3JtYXQgPyBnZXRGb3JtYXR0ZWRUaW1lKGhoICUgMTIsIEFNX1BNW01hdGguZmxvb3IoaGggLyAxMildKSA6IGdldEZvcm1hdHRlZFRpbWUoKTtcbn1cbiJdfQ==