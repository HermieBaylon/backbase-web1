import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/actions-form-builder.service";
// tslint:disable-next-line:directive-class-suffix
export class ArrangementBasedRecipeModel {
    constructor(actionsFormBuilderService) {
        this.actionsFormBuilderService = actionsFormBuilderService;
        /**
         * On submit event emitter.
         */
        this.submit = new EventEmitter();
        /**
         * Specifications with actions.
         */
        this.specificationActions = [];
        /**
         * Loading flag.
         */
        this.isLoading = false;
        this.destroy$ = new Subject();
    }
    /**
     * Specification setter.
     */
    set specification(specification) {
        this.specificationValue = specification;
        this.specificationActions = specification.actions || [];
    }
    /**
     * Specification getter.
     */
    get specification() {
        return this.specificationValue;
    }
    /**
     * Method to check if card form control is expanded.
     *
     * @returns boolean value
     */
    get isCardExpanded() {
        const activeControl = this.formGroup && this.formGroup.get('active');
        return activeControl && activeControl.value && !this.isLoading;
    }
    ngOnInit() {
        this.formGroup = this.actionsFormBuilderService.buildActionRecipeFormGroup(this.specification, this.actionRecipe, this.account);
        this.formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
            this.onSubmit(value);
        });
    }
    ngOnChanges(changes) {
        const { actionRecipe } = changes;
        if (this.formGroup && actionRecipe && actionRecipe.previousValue !== actionRecipe.currentValue) {
            this.formGroup.patchValue(this.actionsFormBuilderService.buildActionRecipeFormValue(this.specification, this.actionRecipe, this.account), {
                emitEvent: false,
            });
            this.isLoading = false;
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Method to submit action recipe form.
     *
     * @param formValue - action recipe form value
     */
    onSubmit(formValue) {
        this.submit.emit(formValue);
    }
    /**
     * Method to set loading flag to true.
     */
    onActiveLoadingChange() {
        this.isLoading = true;
    }
}
ArrangementBasedRecipeModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ArrangementBasedRecipeModel, deps: [{ token: i1.ActionsFormBuilderService }], target: i0.ɵɵFactoryTarget.Directive });
ArrangementBasedRecipeModel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ArrangementBasedRecipeModel, inputs: { account: "account", actionRecipe: "actionRecipe", specification: "specification" }, outputs: { submit: "submit" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ArrangementBasedRecipeModel, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActionsFormBuilderService }]; }, propDecorators: { account: [{
                type: Input
            }], actionRecipe: [{
                type: Input
            }], specification: [{
                type: Input
            }], submit: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYW5nZW1lbnQtYmFzZWQtcmVjaXBlLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hY3Rpb25zLWNvbW1vbi1hbmcvc3JjL21vZGVscy9hcnJhbmdlbWVudC1iYXNlZC1yZWNpcGUubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWdDLE1BQU0sRUFBaUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3BILE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFNM0Msa0RBQWtEO0FBQ2xELE1BQU0sT0FBZ0IsMkJBQTJCO0lBaUUvQyxZQUF1Qyx5QkFBb0Q7UUFBcEQsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjtRQWpDM0Y7O1dBRUc7UUFDTyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQTZCLENBQUM7UUFFakU7O1dBRUc7UUFDSCx5QkFBb0IsR0FBMEIsRUFBRSxDQUFDO1FBT2pEOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUVELGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBYThDLENBQUM7SUF0RC9GOztPQUVHO0lBQ0gsSUFDSSxhQUFhLENBQUMsYUFBd0M7UUFDeEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGFBQWEsQ0FBQztRQUN4QyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsYUFBYSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsa0JBQStDLENBQUM7SUFDOUQsQ0FBQztJQTZCRDs7OztPQUlHO0lBQ0gsSUFBSSxjQUFjO1FBQ2hCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFckUsT0FBTyxhQUFhLElBQUksYUFBYSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDakUsQ0FBQztJQUlELFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQywwQkFBMEIsQ0FDeEUsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FDYixDQUFDO1FBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNqQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxhQUFhLEtBQUssWUFBWSxDQUFDLFlBQVksRUFBRTtZQUM5RixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FDdkIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQzlHO2dCQUNFLFNBQVMsRUFBRSxLQUFLO2FBQ2pCLENBQ0YsQ0FBQztZQUNGLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsU0FBb0M7UUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gscUJBQXFCO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7O3lIQTlHbUIsMkJBQTJCOzZHQUEzQiwyQkFBMkI7NEZBQTNCLDJCQUEyQjtrQkFGaEQsU0FBUztnSEFNQyxPQUFPO3NCQUFmLEtBQUs7Z0JBS0csWUFBWTtzQkFBcEIsS0FBSztnQkFNRixhQUFhO3NCQURoQixLQUFLO2dCQXFCSSxNQUFNO3NCQUFmLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtcbiAgQWN0aW9uUmVjaXBlR2V0UmVzcG9uc2VCb2R5LFxuICBBY3Rpb25SZWNpcGVTcGVjaWZpY2F0aW9uLFxuICBTcGVjaWZpY2F0aW9uQWN0aW9uLFxufSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYWN0aW9ucyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBY3Rpb25zRm9ybUJ1aWxkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYWN0aW9ucy1mb3JtLWJ1aWxkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBBY2NvdW50QXJyYW5nZW1lbnRJdGVtIH0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2FycmFuZ2VtZW50cyc7XG5pbXBvcnQgeyBBY3Rpb25SZWNpcGVGb3JtSXRlbVZhbHVlIH0gZnJvbSAnLi9hY3Rpb24tcmVjaXBlcy1mb3JtLXZhbHVlLm1vZGVsJztcblxuQERpcmVjdGl2ZSgpXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFycmFuZ2VtZW50QmFzZWRSZWNpcGVNb2RlbCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAvKipcbiAgICogQWNjb3VudCBkYXRhLlxuICAgKi9cbiAgQElucHV0KCkgYWNjb3VudD86IEFjY291bnRBcnJhbmdlbWVudEl0ZW07XG5cbiAgLyoqXG4gICAqIEFjdGlvbiByZWNpcGUgZGF0YS5cbiAgICovXG4gIEBJbnB1dCgpIGFjdGlvblJlY2lwZT86IEFjdGlvblJlY2lwZUdldFJlc3BvbnNlQm9keTtcblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbiBzZXR0ZXIuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgc3BlY2lmaWNhdGlvbihzcGVjaWZpY2F0aW9uOiBBY3Rpb25SZWNpcGVTcGVjaWZpY2F0aW9uKSB7XG4gICAgdGhpcy5zcGVjaWZpY2F0aW9uVmFsdWUgPSBzcGVjaWZpY2F0aW9uO1xuICAgIHRoaXMuc3BlY2lmaWNhdGlvbkFjdGlvbnMgPSBzcGVjaWZpY2F0aW9uLmFjdGlvbnMgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbiBnZXR0ZXIuXG4gICAqL1xuICBnZXQgc3BlY2lmaWNhdGlvbigpOiBBY3Rpb25SZWNpcGVTcGVjaWZpY2F0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5zcGVjaWZpY2F0aW9uVmFsdWUgYXMgQWN0aW9uUmVjaXBlU3BlY2lmaWNhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGVjaWZpY2F0aW9uIHZhbHVlLlxuICAgKi9cbiAgc3BlY2lmaWNhdGlvblZhbHVlPzogQWN0aW9uUmVjaXBlU3BlY2lmaWNhdGlvbjtcblxuICAvKipcbiAgICogT24gc3VibWl0IGV2ZW50IGVtaXR0ZXIuXG4gICAqL1xuICBAT3V0cHV0KCkgc3VibWl0ID0gbmV3IEV2ZW50RW1pdHRlcjxBY3Rpb25SZWNpcGVGb3JtSXRlbVZhbHVlPigpO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpY2F0aW9ucyB3aXRoIGFjdGlvbnMuXG4gICAqL1xuICBzcGVjaWZpY2F0aW9uQWN0aW9uczogU3BlY2lmaWNhdGlvbkFjdGlvbltdID0gW107XG5cbiAgLyoqXG4gICAqIEFjY291bnQgZGF0YS5cbiAgICovXG4gIGZvcm1Hcm91cD86IEZvcm1Hcm91cDtcblxuICAvKipcbiAgICogTG9hZGluZyBmbGFnLlxuICAgKi9cbiAgaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBjaGVjayBpZiBjYXJkIGZvcm0gY29udHJvbCBpcyBleHBhbmRlZC5cbiAgICpcbiAgICogQHJldHVybnMgYm9vbGVhbiB2YWx1ZVxuICAgKi9cbiAgZ2V0IGlzQ2FyZEV4cGFuZGVkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGFjdGl2ZUNvbnRyb2wgPSB0aGlzLmZvcm1Hcm91cCAmJiB0aGlzLmZvcm1Hcm91cC5nZXQoJ2FjdGl2ZScpO1xuXG4gICAgcmV0dXJuIGFjdGl2ZUNvbnRyb2wgJiYgYWN0aXZlQ29udHJvbC52YWx1ZSAmJiAhdGhpcy5pc0xvYWRpbmc7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhY3Rpb25zRm9ybUJ1aWxkZXJTZXJ2aWNlOiBBY3Rpb25zRm9ybUJ1aWxkZXJTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybUdyb3VwID0gdGhpcy5hY3Rpb25zRm9ybUJ1aWxkZXJTZXJ2aWNlLmJ1aWxkQWN0aW9uUmVjaXBlRm9ybUdyb3VwKFxuICAgICAgdGhpcy5zcGVjaWZpY2F0aW9uLFxuICAgICAgdGhpcy5hY3Rpb25SZWNpcGUsXG4gICAgICB0aGlzLmFjY291bnQsXG4gICAgKTtcbiAgICB0aGlzLmZvcm1Hcm91cC52YWx1ZUNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICB0aGlzLm9uU3VibWl0KHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IGFjdGlvblJlY2lwZSB9ID0gY2hhbmdlcztcbiAgICBpZiAodGhpcy5mb3JtR3JvdXAgJiYgYWN0aW9uUmVjaXBlICYmIGFjdGlvblJlY2lwZS5wcmV2aW91c1ZhbHVlICE9PSBhY3Rpb25SZWNpcGUuY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLmZvcm1Hcm91cC5wYXRjaFZhbHVlKFxuICAgICAgICB0aGlzLmFjdGlvbnNGb3JtQnVpbGRlclNlcnZpY2UuYnVpbGRBY3Rpb25SZWNpcGVGb3JtVmFsdWUodGhpcy5zcGVjaWZpY2F0aW9uLCB0aGlzLmFjdGlvblJlY2lwZSwgdGhpcy5hY2NvdW50KSxcbiAgICAgICAge1xuICAgICAgICAgIGVtaXRFdmVudDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRvIHN1Ym1pdCBhY3Rpb24gcmVjaXBlIGZvcm0uXG4gICAqXG4gICAqIEBwYXJhbSBmb3JtVmFsdWUgLSBhY3Rpb24gcmVjaXBlIGZvcm0gdmFsdWVcbiAgICovXG4gIG9uU3VibWl0KGZvcm1WYWx1ZTogQWN0aW9uUmVjaXBlRm9ybUl0ZW1WYWx1ZSkge1xuICAgIHRoaXMuc3VibWl0LmVtaXQoZm9ybVZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gc2V0IGxvYWRpbmcgZmxhZyB0byB0cnVlLlxuICAgKi9cbiAgb25BY3RpdmVMb2FkaW5nQ2hhbmdlKCkge1xuICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgfVxufVxuIl19