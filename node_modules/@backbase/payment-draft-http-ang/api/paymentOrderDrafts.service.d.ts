import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DraftIdentifiedPaymentOrder } from '../model/models';
import { DraftInitiatePaymentOrder } from '../model/models';
import { DraftInitiatePaymentOrderWithId } from '../model/models';
import { DraftPaymentOrderGetResponseBody } from '../model/models';
import { DraftPaymentOrderPutResponseBody } from '../model/models';
import { PaymentOrdersDraftsPostResponseBody } from '../model/models';
import { PaymentDraftConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteDraftPaymentOrderRequestParams {
    ["draftPaymentOrderId"]: string;
}
export interface GetDraftPaymentOrderRequestParams {
    ["draftPaymentOrderId"]: string;
}
export interface GetPaymentOrdersDraftsRequestParams {
    ["query"]?: string;
    ["amountFrom"]?: number;
    ["amountTo"]?: number;
    ["executionDate"]?: string;
    ["executionDateFrom"]?: string;
    ["executionDateTo"]?: string;
    ["nextExecutionDate"]?: string;
    ["nextExecutionDateFrom"]?: string;
    ["nextExecutionDateTo"]?: string;
    ["paymentMode"]?: 'SINGLE' | 'RECURRING';
    ["paymentSetupId"]?: string;
    ["transferFrequency"]?: 'ONCE' | 'DAILY' | 'WEEKLY' | 'BIWEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY';
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
}
export interface PostPaymentOrdersDraftsRequestParams {
    ["draftInitiatePaymentOrder"]: DraftInitiatePaymentOrder;
}
export interface PutDraftPaymentOrderRequestParams {
    ["draftPaymentOrderId"]: string;
    ["draftInitiatePaymentOrderWithId"]: DraftInitiatePaymentOrderWithId;
}
export declare class PaymentOrderDraftsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentDraftConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentDraftConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteDraftPaymentOrder(requestParameters: DeleteDraftPaymentOrderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteDraftPaymentOrder(requestParameters: DeleteDraftPaymentOrderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteDraftPaymentOrder(requestParameters: DeleteDraftPaymentOrderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteDraftPaymentOrderUrl(requestParameters: DeleteDraftPaymentOrderRequestParams): string;
    getDraftPaymentOrder(requestParameters: GetDraftPaymentOrderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DraftPaymentOrderGetResponseBody>;
    getDraftPaymentOrder(requestParameters: GetDraftPaymentOrderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DraftPaymentOrderGetResponseBody>>;
    getDraftPaymentOrder(requestParameters: GetDraftPaymentOrderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DraftPaymentOrderGetResponseBody>>;
    getDraftPaymentOrderUrl(requestParameters: GetDraftPaymentOrderRequestParams): string;
    getPaymentOrdersDrafts(requestParameters: GetPaymentOrdersDraftsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<DraftIdentifiedPaymentOrder>>;
    getPaymentOrdersDrafts(requestParameters: GetPaymentOrdersDraftsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<DraftIdentifiedPaymentOrder>>>;
    getPaymentOrdersDrafts(requestParameters: GetPaymentOrdersDraftsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<DraftIdentifiedPaymentOrder>>>;
    getPaymentOrdersDraftsUrl(requestParameters: GetPaymentOrdersDraftsRequestParams): string;
    postPaymentOrdersDrafts(requestParameters: PostPaymentOrdersDraftsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOrdersDraftsPostResponseBody>;
    postPaymentOrdersDrafts(requestParameters: PostPaymentOrdersDraftsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOrdersDraftsPostResponseBody>>;
    postPaymentOrdersDrafts(requestParameters: PostPaymentOrdersDraftsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOrdersDraftsPostResponseBody>>;
    postPaymentOrdersDraftsUrl(requestParameters: PostPaymentOrdersDraftsRequestParams): string;
    putDraftPaymentOrder(requestParameters: PutDraftPaymentOrderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DraftPaymentOrderPutResponseBody>;
    putDraftPaymentOrder(requestParameters: PutDraftPaymentOrderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DraftPaymentOrderPutResponseBody>>;
    putDraftPaymentOrder(requestParameters: PutDraftPaymentOrderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DraftPaymentOrderPutResponseBody>>;
    putDraftPaymentOrderUrl(requestParameters: PutDraftPaymentOrderRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentOrderDraftsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentOrderDraftsHttpService>;
}
