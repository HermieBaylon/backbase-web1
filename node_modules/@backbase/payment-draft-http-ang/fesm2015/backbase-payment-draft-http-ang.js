import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

var DraftSchedule;
(function (DraftSchedule) {
    DraftSchedule.NonWorkingDayExecutionStrategyEnum = {
        BEFORE: 'BEFORE',
        AFTER: 'AFTER',
        NONE: 'NONE'
    };
    DraftSchedule.TransferFrequencyEnum = {
        ONCE: 'ONCE',
        DAILY: 'DAILY',
        WEEKLY: 'WEEKLY',
        BIWEEKLY: 'BIWEEKLY',
        MONTHLY: 'MONTHLY',
        QUARTERLY: 'QUARTERLY',
        YEARLY: 'YEARLY'
    };
    DraftSchedule.EveryEnum = {
        _1: '1',
        _2: '2'
    };
})(DraftSchedule || (DraftSchedule = {}));

const InstructionPriority = {
    NORM: 'NORM',
    HIGH: 'HIGH'
};

const InvolvedPartyRole = {
    CREDITOR: 'CREDITOR',
    DEBTOR: 'DEBTOR'
};

const PaymentMode = {
    SINGLE: 'SINGLE',
    RECURRING: 'RECURRING'
};

var RemittanceInformation;
(function (RemittanceInformation) {
    RemittanceInformation.TypeEnum = {
        STRUCTURED: 'STRUCTURED',
        UNSTRUCTURED: 'UNSTRUCTURED'
    };
})(RemittanceInformation || (RemittanceInformation = {}));

const SchemeNames = {
    IBAN: 'IBAN',
    BBAN: 'BBAN',
    ID: 'ID',
    EXTERNALID: 'EXTERNAL_ID',
    EMAIL: 'EMAIL',
    MOBILE: 'MOBILE'
};

const Status = {
    DRAFT: 'DRAFT',
    ENTERED: 'ENTERED',
    READY: 'READY',
    ACCEPTED: 'ACCEPTED',
    PROCESSED: 'PROCESSED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED',
    CANCELLATIONPENDING: 'CANCELLATION_PENDING',
    CONFIRMATIONPENDING: 'CONFIRMATION_PENDING',
    CONFIRMATIONDECLINED: 'CONFIRMATION_DECLINED',
    REPLACED: 'REPLACED'
};

const PAYMENT_DRAFT_BASE_PATH = new InjectionToken('PAYMENT_DRAFT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PaymentDraftConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentDraftConfiguration');

class PaymentDraftApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PaymentDraftApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PaymentDraftApiModule,
            providers: [{ provide: PaymentDraftConfiguration, useFactory: configurationFactory }]
        };
    }
}
PaymentDraftApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentDraftApiModule, deps: [{ token: PaymentDraftApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentDraftConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PaymentDraftApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentDraftApiModule });
PaymentDraftApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentDraftApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentDraftApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PaymentDraftApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PaymentDraftConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class PaymentOrderDraftsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentDraftConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteDraftPaymentOrder(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftPaymentOrderId = requestParameters["draftPaymentOrderId"];
        if (_draftPaymentOrderId === null || _draftPaymentOrderId === undefined) {
            throw new Error('Required parameter draftPaymentOrderId was null or undefined when calling deleteDraftPaymentOrder.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/payment-order-drafts/${encodeURIComponent(String(_draftPaymentOrderId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteDraftPaymentOrderUrl(requestParameters) {
        const _draftPaymentOrderId = requestParameters["draftPaymentOrderId"];
        if (_draftPaymentOrderId === null || _draftPaymentOrderId === undefined) {
            throw new Error('Required parameter draftPaymentOrderId was null or undefined when calling deleteDraftPaymentOrder.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-order-drafts/${encodeURIComponent(String(_draftPaymentOrderId))}`;
    }
    getDraftPaymentOrder(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftPaymentOrderId = requestParameters["draftPaymentOrderId"];
        if (_draftPaymentOrderId === null || _draftPaymentOrderId === undefined) {
            throw new Error('Required parameter draftPaymentOrderId was null or undefined when calling getDraftPaymentOrder.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-order-drafts/${encodeURIComponent(String(_draftPaymentOrderId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getDraftPaymentOrderUrl(requestParameters) {
        const _draftPaymentOrderId = requestParameters["draftPaymentOrderId"];
        if (_draftPaymentOrderId === null || _draftPaymentOrderId === undefined) {
            throw new Error('Required parameter draftPaymentOrderId was null or undefined when calling getDraftPaymentOrder.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-order-drafts/${encodeURIComponent(String(_draftPaymentOrderId))}`;
    }
    getPaymentOrdersDrafts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _amountFrom = requestParameters["amountFrom"];
        const _amountTo = requestParameters["amountTo"];
        const _executionDate = requestParameters["executionDate"];
        const _executionDateFrom = requestParameters["executionDateFrom"];
        const _executionDateTo = requestParameters["executionDateTo"];
        const _nextExecutionDate = requestParameters["nextExecutionDate"];
        const _nextExecutionDateFrom = requestParameters["nextExecutionDateFrom"];
        const _nextExecutionDateTo = requestParameters["nextExecutionDateTo"];
        const _paymentMode = requestParameters["paymentMode"];
        const _paymentSetupId = requestParameters["paymentSetupId"];
        const _transferFrequency = requestParameters["transferFrequency"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_amountFrom !== undefined && _amountFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
        }
        if (_amountTo !== undefined && _amountTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
        }
        if (_executionDate !== undefined && _executionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
        }
        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
        }
        if (_executionDateTo !== undefined && _executionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
        }
        if (_nextExecutionDate !== undefined && _nextExecutionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDate, 'nextExecutionDate');
        }
        if (_nextExecutionDateFrom !== undefined && _nextExecutionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateFrom, 'nextExecutionDateFrom');
        }
        if (_nextExecutionDateTo !== undefined && _nextExecutionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateTo, 'nextExecutionDateTo');
        }
        if (_paymentMode !== undefined && _paymentMode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentMode, 'paymentMode');
        }
        if (_paymentSetupId !== undefined && _paymentSetupId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentSetupId, 'paymentSetupId');
        }
        if (_transferFrequency !== undefined && _transferFrequency !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _transferFrequency, 'transferFrequency');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-order-drafts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentOrdersDraftsUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _amountFrom = requestParameters["amountFrom"];
        const _amountTo = requestParameters["amountTo"];
        const _executionDate = requestParameters["executionDate"];
        const _executionDateFrom = requestParameters["executionDateFrom"];
        const _executionDateTo = requestParameters["executionDateTo"];
        const _nextExecutionDate = requestParameters["nextExecutionDate"];
        const _nextExecutionDateFrom = requestParameters["nextExecutionDateFrom"];
        const _nextExecutionDateTo = requestParameters["nextExecutionDateTo"];
        const _paymentMode = requestParameters["paymentMode"];
        const _paymentSetupId = requestParameters["paymentSetupId"];
        const _transferFrequency = requestParameters["transferFrequency"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_amountFrom !== undefined && _amountFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountFrom, 'amountFrom');
        }
        if (_amountTo !== undefined && _amountTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountTo, 'amountTo');
        }
        if (_executionDate !== undefined && _executionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDate, 'executionDate');
        }
        if (_executionDateFrom !== undefined && _executionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateFrom, 'executionDateFrom');
        }
        if (_executionDateTo !== undefined && _executionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _executionDateTo, 'executionDateTo');
        }
        if (_nextExecutionDate !== undefined && _nextExecutionDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDate, 'nextExecutionDate');
        }
        if (_nextExecutionDateFrom !== undefined && _nextExecutionDateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateFrom, 'nextExecutionDateFrom');
        }
        if (_nextExecutionDateTo !== undefined && _nextExecutionDateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _nextExecutionDateTo, 'nextExecutionDateTo');
        }
        if (_paymentMode !== undefined && _paymentMode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentMode, 'paymentMode');
        }
        if (_paymentSetupId !== undefined && _paymentSetupId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentSetupId, 'paymentSetupId');
        }
        if (_transferFrequency !== undefined && _transferFrequency !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _transferFrequency, 'transferFrequency');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/payment-order-drafts${queryString ? `?${queryString}` : ''}`;
    }
    postPaymentOrdersDrafts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftInitiatePaymentOrder = requestParameters["draftInitiatePaymentOrder"];
        if (_draftInitiatePaymentOrder === null || _draftInitiatePaymentOrder === undefined) {
            throw new Error('Required parameter draftInitiatePaymentOrder was null or undefined when calling postPaymentOrdersDrafts.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-order-drafts`, _draftInitiatePaymentOrder, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postPaymentOrdersDraftsUrl(requestParameters) {
        const _draftInitiatePaymentOrder = requestParameters["draftInitiatePaymentOrder"];
        if (_draftInitiatePaymentOrder === null || _draftInitiatePaymentOrder === undefined) {
            throw new Error('Required parameter draftInitiatePaymentOrder was null or undefined when calling postPaymentOrdersDrafts.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-order-drafts`;
    }
    putDraftPaymentOrder(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftPaymentOrderId = requestParameters["draftPaymentOrderId"];
        if (_draftPaymentOrderId === null || _draftPaymentOrderId === undefined) {
            throw new Error('Required parameter draftPaymentOrderId was null or undefined when calling putDraftPaymentOrder.');
        }
        const _draftInitiatePaymentOrderWithId = requestParameters["draftInitiatePaymentOrderWithId"];
        if (_draftInitiatePaymentOrderWithId === null || _draftInitiatePaymentOrderWithId === undefined) {
            throw new Error('Required parameter draftInitiatePaymentOrderWithId was null or undefined when calling putDraftPaymentOrder.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/payment-order-drafts/${encodeURIComponent(String(_draftPaymentOrderId))}`, _draftInitiatePaymentOrderWithId, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putDraftPaymentOrderUrl(requestParameters) {
        const _draftPaymentOrderId = requestParameters["draftPaymentOrderId"];
        if (_draftPaymentOrderId === null || _draftPaymentOrderId === undefined) {
            throw new Error('Required parameter draftPaymentOrderId was null or undefined when calling putDraftPaymentOrder.');
        }
        const _draftInitiatePaymentOrderWithId = requestParameters["draftInitiatePaymentOrderWithId"];
        if (_draftInitiatePaymentOrderWithId === null || _draftInitiatePaymentOrderWithId === undefined) {
            throw new Error('Required parameter draftInitiatePaymentOrderWithId was null or undefined when calling putDraftPaymentOrder.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-order-drafts/${encodeURIComponent(String(_draftPaymentOrderId))}`;
    }
}
PaymentOrderDraftsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderDraftsHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_DRAFT_BASE_PATH, optional: true }, { token: PaymentDraftConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentOrderDraftsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderDraftsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderDraftsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_DRAFT_BASE_PATH]
                }] }, { type: PaymentDraftConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PaymentOrderDraftsHttpServiceDeleteDraftPaymentOrderMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-order-drafts/{draftPaymentOrderId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentOrderDraftsHttpServiceGetDraftPaymentOrderMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-order-drafts/{draftPaymentOrderId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                    "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                    "status": "ACCEPTED",
                    "version": 1,
                    "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                    "reasonCode": "AC01",
                    "reasonText": "Accepted by bank",
                    "originatorAccount": {
                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                        "externalArrangementId": "729190421493794513132",
                        "identification": {
                            "identification": "NL53RABO0309349755",
                            "schemeName": "IBAN"
                        }
                    },
                    "instructionPriority": "NORM",
                    "requestedExecutionDate": "2017-07-16",
                    "paymentType": "SEPA_CREDIT_TRANSFER",
                    "transferTransactionInformation": {
                        "instructedAmount": {
                            "amount": "5000.55",
                            "currencyCode": "EUR"
                        },
                        "counterpartyAccount": {
                            "identification": {
                                "identification": "FR708933019952AUNHQNQ0KZ",
                                "schemeName": "IBAN"
                            },
                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                            "externalArrangementId": "9669274787995385962"
                        },
                        "counterparty": {
                            "name": "Backbase",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                "country": "NL"
                            }
                        },
                        "remittanceInformation": {
                            "type": "UNSTRUCTURED",
                            "content": "Return a debt"
                        }
                    },
                    "actions": [],
                    "createdBy": "U00243",
                    "createdAt": "2017-05-12T14:33:13.452Z"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentOrderDraftsHttpServiceGetPaymentOrdersDraftsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-order-drafts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                            "identification": {
                                "identification": "NL81TRIO0212471066",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Smith Bonus Savings",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "HIGH",
                        "requestedExecutionDate": "2018-08-16",
                        "paymentMode": "SINGLE",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "749.99",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "MR1300020001010000123456753",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "John Smith"
                            }
                        },
                        "actions": ["APPROVE", "FINAL_APPROVE", "REJECT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "0d0b6350-0ff9-11e8-b642-0ed5f89f718b",
                        "approvalId": "518bbd4a-0ff9-11e8-b642-0ed5f89f718b",
                        "status": "PROCESSED",
                        "bankStatus": "FINISHED",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL18INGB0664923638",
                                "schemeName": "IBAN"
                            },
                            "name": "Credit Account"
                        },
                        "originator": {
                            "name": "Random Account",
                            "postalAddress": {
                                "country": "NL"
                            }
                        },
                        "batchBooking": true,
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-08-11",
                        "paymentMode": "RECURRING",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "schedule": {
                            "transferFrequency": "MONTHLY",
                            "on": 1,
                            "startDate": "2017-08-12",
                            "every": "1",
                            "nextExecutionDate": "2018-08-15",
                            "endDate": "2018-05-12"
                        },
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "100.00",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "NO9386011117947",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Jack Yellow"
                            },
                            "remittanceInformation": {
                                "type": "STRUCTURED",
                                "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                            }
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "c383c69f-38bf-4e3e-ad3f-5f58cf971bb1",
                        "status": "REJECTED",
                        "bankStatus": "ACCOUNT_BLOCKED",
                        "reasonCode": "AB01",
                        "reasonText": "Account blocked",
                        "errorDescription": "Blocked by bank.",
                        "originatorAccount": {
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                            "identification": {
                                "identification": "FR188388353832IH3CAWFYXAA36",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr and Mrs J. Smith"
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "LT121000011101001000",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "7d34215a-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "ae01c614-d473-48d6-af7d-f516292b39cb",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                            "identification": {
                                "identification": "NL81TRIO0212471066",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Smith Bonus Savings"
                        },
                        "batchBooking": false,
                        "requestedExecutionDate": "2018-07-23",
                        "paymentMode": "SINGLE",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "749.99",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "LI21088100002324013AA",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Delivery Service"
                            }
                        },
                        "actions": ["APPROVE", "REJECT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "version": 1
                    }, {
                        "id": "7d342c15-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "ae01a624-d473-48d6-af7d-f516292b39cb",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                            "identification": {
                                "identification": "FR188388353832IH3CAWFYXAA36",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr and Mrs J. Smith"
                        },
                        "batchBooking": false,
                        "requestedExecutionDate": "2018-06-12",
                        "paymentMode": "SINGLE",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "99.99",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "MR1300020001010000123456753",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "John Smith"
                            }
                        },
                        "actions": ["APPROVE", "REJECT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "7d341a2a-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "264b69e4-3df0-49c1-8cda-e2bb437461e8",
                        "status": "ACCEPTED",
                        "bankStatus": "FINISHED",
                        "originatorAccount": {
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                            "identification": {
                                "identification": "FR188388353832IH3CAWFYXAA36",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr and Mrs J. Smith"
                        },
                        "batchBooking": true,
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-08-11",
                        "paymentMode": "RECURRING",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "schedule": {
                            "transferFrequency": "MONTHLY",
                            "on": 1,
                            "startDate": "2017-08-12",
                            "every": "1",
                            "nextExecutionDate": "2018-08-15",
                            "endDate": "2018-05-12"
                        },
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "133.33",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "NO9386011117947",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Jack Yellow"
                            },
                            "remittanceInformation": {
                                "type": "STRUCTURED",
                                "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                            }
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 9312
                    }, {
                        "id": "5cea81b2-0ff9-11e8-b642-0ed5f89f718b",
                        "approvalId": "61624e82-0ff9-11e8-b642-0ed5f89f718b",
                        "status": "ACCEPTED",
                        "bankStatus": "FINISHED",
                        "originatorAccount": {
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                            "identification": {
                                "identification": "NL81TRIO0212471066",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Smith Bonus Savings",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "batchBooking": true,
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-08-11",
                        "paymentMode": "RECURRING",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "schedule": {
                            "transferFrequency": "MONTHLY",
                            "on": 1,
                            "startDate": "2017-08-12",
                            "every": "1",
                            "nextExecutionDate": "2018-08-15",
                            "endDate": "2018-05-12"
                        },
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "166.66",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "HU42117730161111101800000000",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Jack Brown"
                            },
                            "remittanceInformation": {
                                "type": "STRUCTURED",
                                "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                            }
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "version": 42,
                        "edited": false,
                        "originatingAccountCurrency": "EUR"
                    }, {
                        "id": "06db9298-189b-11e8-accf-0ed5f89f718b",
                        "approvalId": "11863018-189b-11e8-accf-0ed5f89f718b",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "identification": {
                                "identification": "0260-0959-3",
                                "schemeName": "BBAN"
                            }
                        },
                        "originator": {
                            "name": "John Doe",
                            "postalAddress": {
                                "addressLine1": "228 Park Ave S",
                                "town": "New York"
                            }
                        },
                        "batchBooking": false,
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-08-12",
                        "paymentMode": "RECURRING",
                        "paymentType": "US_FOREIGN_WIRE",
                        "schedule": {
                            "transferFrequency": "MONTHLY",
                            "on": 1,
                            "startDate": "2017-08-12",
                            "every": "1",
                            "nextExecutionDate": "2017-09-12",
                            "endDate": "2018-05-12"
                        },
                        "transferTransactionInformation": {
                            "endToEndIdentification": "TRNSCT REF 1234567890",
                            "instructedAmount": {
                                "amount": "104.66",
                                "currencyCode": "USD"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "NL91 ABNA 0417 1643 00",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Jack Brown",
                                "postalAddress": {
                                    "addressLine1": "2589 Peaceful Lane",
                                    "postCode": "44128",
                                    "town": "Warrensville Heights",
                                    "country": "US"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Unstructured content"
                            },
                            "counterpartyBank": {
                                "bankBranchCode": "082000549",
                                "name": "Morgan Chase",
                                "postalAddress": {
                                    "addressLine1": "4789 Vernon Street",
                                    "postCode": "92028",
                                    "town": "Fallbrook",
                                    "country": "US"
                                }
                            },
                            "correspondentBank": {
                                "bankBranchCode": "122105155",
                                "name": "Bank of America"
                            },
                            "intermediaryBank": {
                                "bic": "DABAIE2D",
                                "bankBranchCode": "102000021",
                                "name": "SNSB"
                            },
                            "messageToBank": "My us international wire payment explanation.",
                            "targetCurrency": "EUR"
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 42
                    }, {
                        "id": "fa088818-623a-4260-bc46-1ff678de8dae",
                        "approvalId": "8605dc85-726c-4795-9b55-ff698ad2d1e4",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                            "identification": {
                                "identification": "00400440116243",
                                "schemeName": "BBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr John Usmith",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, New York"
                            }
                        },
                        "instructionPriority": "HIGH",
                        "requestedExecutionDate": "2018-08-16",
                        "paymentMode": "SINGLE",
                        "paymentType": "INTERNAL",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "749.99",
                                "currencyCode": "USD"
                            },
                            "counterpartyAccount": {
                                "accountType": "SAVINGS",
                                "identification": {
                                    "identification": "3242342348899",
                                    "schemeName": "BBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                            },
                            "counterparty": {
                                "name": "John Doe"
                            }
                        },
                        "actions": ["APPROVE", "REJECT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "f58a410e-469c-41f1-8c51-21b6d24bd3c1",
                        "approvalId": "7527c230-01a7-41b8-a021-dc29aca98fe3",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                            "identification": {
                                "identification": "00400440116243",
                                "schemeName": "BBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr John Usmith",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Los Angeles"
                            }
                        },
                        "instructionPriority": "HIGH",
                        "requestedExecutionDate": "2018-08-16",
                        "paymentMode": "SINGLE",
                        "paymentType": "INTERNAL",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "134",
                                "currencyCode": "USD"
                            },
                            "counterpartyAccount": {
                                "accountType": "CHECKING",
                                "identification": {
                                    "identification": "3242342123899",
                                    "schemeName": "BBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                            },
                            "counterparty": {
                                "name": "Dan Brown"
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt`"
                            }
                        },
                        "actions": ["APPROVE", "REJECT", "EDIT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentOrderDraftsHttpServicePostPaymentOrdersDraftsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-order-drafts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "af2599ef-759a-4b78-8e67-4949055a532b"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentOrderDraftsHttpServicePutDraftPaymentOrderMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-order-drafts/{draftPaymentOrderId}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentOrderDraftsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/payment-order-drafts/{draftPaymentOrderId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/payment-order-drafts/{draftPaymentOrderId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                    "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                    "status": "ACCEPTED",
                    "version": 1,
                    "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                    "reasonCode": "AC01",
                    "reasonText": "Accepted by bank",
                    "originatorAccount": {
                        "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                        "externalArrangementId": "729190421493794513132",
                        "identification": {
                            "identification": "NL53RABO0309349755",
                            "schemeName": "IBAN"
                        }
                    },
                    "instructionPriority": "NORM",
                    "requestedExecutionDate": "2017-07-16",
                    "paymentType": "SEPA_CREDIT_TRANSFER",
                    "transferTransactionInformation": {
                        "instructedAmount": {
                            "amount": "5000.55",
                            "currencyCode": "EUR"
                        },
                        "counterpartyAccount": {
                            "identification": {
                                "identification": "FR708933019952AUNHQNQ0KZ",
                                "schemeName": "IBAN"
                            },
                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                            "externalArrangementId": "9669274787995385962"
                        },
                        "counterparty": {
                            "name": "Backbase",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                "country": "NL"
                            }
                        },
                        "remittanceInformation": {
                            "type": "UNSTRUCTURED",
                            "content": "Return a debt"
                        }
                    },
                    "actions": [],
                    "createdBy": "U00243",
                    "createdAt": "2017-05-12T14:33:13.452Z"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/payment-order-drafts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "7d34169c-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "49dad7ab-604b-407a-ba47-a61ad93f31ce",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                            "identification": {
                                "identification": "NL81TRIO0212471066",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Smith Bonus Savings",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "instructionPriority": "HIGH",
                        "requestedExecutionDate": "2018-08-16",
                        "paymentMode": "SINGLE",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "749.99",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "MR1300020001010000123456753",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "John Smith"
                            }
                        },
                        "actions": ["APPROVE", "FINAL_APPROVE", "REJECT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "0d0b6350-0ff9-11e8-b642-0ed5f89f718b",
                        "approvalId": "518bbd4a-0ff9-11e8-b642-0ed5f89f718b",
                        "status": "PROCESSED",
                        "bankStatus": "FINISHED",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "externalArrangementId": "729190421493794513132",
                            "identification": {
                                "identification": "NL18INGB0664923638",
                                "schemeName": "IBAN"
                            },
                            "name": "Credit Account"
                        },
                        "originator": {
                            "name": "Random Account",
                            "postalAddress": {
                                "country": "NL"
                            }
                        },
                        "batchBooking": true,
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-08-11",
                        "paymentMode": "RECURRING",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "schedule": {
                            "transferFrequency": "MONTHLY",
                            "on": 1,
                            "startDate": "2017-08-12",
                            "every": "1",
                            "nextExecutionDate": "2018-08-15",
                            "endDate": "2018-05-12"
                        },
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "100.00",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "NO9386011117947",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Jack Yellow"
                            },
                            "remittanceInformation": {
                                "type": "STRUCTURED",
                                "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                            }
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "c383c69f-38bf-4e3e-ad3f-5f58cf971bb1",
                        "status": "REJECTED",
                        "bankStatus": "ACCOUNT_BLOCKED",
                        "reasonCode": "AB01",
                        "reasonText": "Account blocked",
                        "errorDescription": "Blocked by bank.",
                        "originatorAccount": {
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                            "identification": {
                                "identification": "FR188388353832IH3CAWFYXAA36",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr and Mrs J. Smith"
                        },
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-07-16",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "5000.55",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "LT121000011101001000",
                                    "schemeName": "IBAN"
                                },
                                "name": "ABN Amro"
                            },
                            "counterparty": {
                                "name": "Backbase",
                                "postalAddress": {
                                    "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                    "country": "NL"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt"
                            }
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "7d34215a-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "ae01c614-d473-48d6-af7d-f516292b39cb",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                            "identification": {
                                "identification": "NL81TRIO0212471066",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Smith Bonus Savings"
                        },
                        "batchBooking": false,
                        "requestedExecutionDate": "2018-07-23",
                        "paymentMode": "SINGLE",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "749.99",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "LI21088100002324013AA",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Delivery Service"
                            }
                        },
                        "actions": ["APPROVE", "REJECT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "version": 1
                    }, {
                        "id": "7d342c15-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "ae01a624-d473-48d6-af7d-f516292b39cb",
                        "status": "ACCEPTED",
                        "bankStatus": "ACCEPTEDTECHNICALVALIDATION",
                        "reasonCode": "AC01",
                        "reasonText": "Accepted by bank",
                        "originatorAccount": {
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                            "identification": {
                                "identification": "FR188388353832IH3CAWFYXAA36",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr and Mrs J. Smith"
                        },
                        "batchBooking": false,
                        "requestedExecutionDate": "2018-06-12",
                        "paymentMode": "SINGLE",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "99.99",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "MR1300020001010000123456753",
                                    "schemeName": "IBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "externalArrangementId": "9669274787995385962"
                            },
                            "counterparty": {
                                "name": "John Smith"
                            }
                        },
                        "actions": ["APPROVE", "REJECT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "7d341a2a-6714-11e7-907b-a6006ad3dba0",
                        "approvalId": "264b69e4-3df0-49c1-8cda-e2bb437461e8",
                        "status": "ACCEPTED",
                        "bankStatus": "FINISHED",
                        "originatorAccount": {
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "bcf10f4d-4b2f-4413-9bab-31ff693608b5",
                            "identification": {
                                "identification": "FR188388353832IH3CAWFYXAA36",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr and Mrs J. Smith"
                        },
                        "batchBooking": true,
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-08-11",
                        "paymentMode": "RECURRING",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "schedule": {
                            "transferFrequency": "MONTHLY",
                            "on": 1,
                            "startDate": "2017-08-12",
                            "every": "1",
                            "nextExecutionDate": "2018-08-15",
                            "endDate": "2018-05-12"
                        },
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "133.33",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "NO9386011117947",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Jack Yellow"
                            },
                            "remittanceInformation": {
                                "type": "STRUCTURED",
                                "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                            }
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 9312
                    }, {
                        "id": "5cea81b2-0ff9-11e8-b642-0ed5f89f718b",
                        "approvalId": "61624e82-0ff9-11e8-b642-0ed5f89f718b",
                        "status": "ACCEPTED",
                        "bankStatus": "FINISHED",
                        "originatorAccount": {
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "externalArrangementId": "a3f8defe-f447-4475-b5c1-d3971ec7a273",
                            "identification": {
                                "identification": "NL81TRIO0212471066",
                                "schemeName": "IBAN"
                            }
                        },
                        "originator": {
                            "name": "Smith Bonus Savings",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam"
                            }
                        },
                        "batchBooking": true,
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2018-08-11",
                        "paymentMode": "RECURRING",
                        "paymentType": "SEPA_CREDIT_TRANSFER",
                        "schedule": {
                            "transferFrequency": "MONTHLY",
                            "on": 1,
                            "startDate": "2017-08-12",
                            "every": "1",
                            "nextExecutionDate": "2018-08-15",
                            "endDate": "2018-05-12"
                        },
                        "transferTransactionInformation": {
                            "instructedAmount": {
                                "amount": "166.66",
                                "currencyCode": "EUR"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "HU42117730161111101800000000",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Jack Brown"
                            },
                            "remittanceInformation": {
                                "type": "STRUCTURED",
                                "content": "<some-xml-tags>structured content with XML</some-xml-tags>"
                            }
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "version": 42,
                        "edited": false,
                        "originatingAccountCurrency": "EUR"
                    }, {
                        "id": "06db9298-189b-11e8-accf-0ed5f89f718b",
                        "approvalId": "11863018-189b-11e8-accf-0ed5f89f718b",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                            "identification": {
                                "identification": "0260-0959-3",
                                "schemeName": "BBAN"
                            }
                        },
                        "originator": {
                            "name": "John Doe",
                            "postalAddress": {
                                "addressLine1": "228 Park Ave S",
                                "town": "New York"
                            }
                        },
                        "batchBooking": false,
                        "instructionPriority": "NORM",
                        "requestedExecutionDate": "2017-08-12",
                        "paymentMode": "RECURRING",
                        "paymentType": "US_FOREIGN_WIRE",
                        "schedule": {
                            "transferFrequency": "MONTHLY",
                            "on": 1,
                            "startDate": "2017-08-12",
                            "every": "1",
                            "nextExecutionDate": "2017-09-12",
                            "endDate": "2018-05-12"
                        },
                        "transferTransactionInformation": {
                            "endToEndIdentification": "TRNSCT REF 1234567890",
                            "instructedAmount": {
                                "amount": "104.66",
                                "currencyCode": "USD"
                            },
                            "counterpartyAccount": {
                                "identification": {
                                    "identification": "NL91 ABNA 0417 1643 00",
                                    "schemeName": "IBAN"
                                }
                            },
                            "counterparty": {
                                "name": "Jack Brown",
                                "postalAddress": {
                                    "addressLine1": "2589 Peaceful Lane",
                                    "postCode": "44128",
                                    "town": "Warrensville Heights",
                                    "country": "US"
                                }
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Unstructured content"
                            },
                            "counterpartyBank": {
                                "bankBranchCode": "082000549",
                                "name": "Morgan Chase",
                                "postalAddress": {
                                    "addressLine1": "4789 Vernon Street",
                                    "postCode": "92028",
                                    "town": "Fallbrook",
                                    "country": "US"
                                }
                            },
                            "correspondentBank": {
                                "bankBranchCode": "122105155",
                                "name": "Bank of America"
                            },
                            "intermediaryBank": {
                                "bic": "DABAIE2D",
                                "bankBranchCode": "102000021",
                                "name": "SNSB"
                            },
                            "messageToBank": "My us international wire payment explanation.",
                            "targetCurrency": "EUR"
                        },
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 42
                    }, {
                        "id": "fa088818-623a-4260-bc46-1ff678de8dae",
                        "approvalId": "8605dc85-726c-4795-9b55-ff698ad2d1e4",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                            "identification": {
                                "identification": "00400440116243",
                                "schemeName": "BBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr John Usmith",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, New York"
                            }
                        },
                        "instructionPriority": "HIGH",
                        "requestedExecutionDate": "2018-08-16",
                        "paymentMode": "SINGLE",
                        "paymentType": "INTERNAL",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "749.99",
                                "currencyCode": "USD"
                            },
                            "counterpartyAccount": {
                                "accountType": "SAVINGS",
                                "identification": {
                                    "identification": "3242342348899",
                                    "schemeName": "BBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                            },
                            "counterparty": {
                                "name": "John Doe"
                            }
                        },
                        "actions": ["APPROVE", "REJECT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }, {
                        "id": "f58a410e-469c-41f1-8c51-21b6d24bd3c1",
                        "approvalId": "7527c230-01a7-41b8-a021-dc29aca98fe3",
                        "status": "ENTERED",
                        "originatorAccount": {
                            "arrangementId": "07642680-2b6f-11e8-b467-0ed5f89f718b",
                            "identification": {
                                "identification": "00400440116243",
                                "schemeName": "BBAN"
                            }
                        },
                        "originator": {
                            "name": "Mr John Usmith",
                            "postalAddress": {
                                "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Los Angeles"
                            }
                        },
                        "instructionPriority": "HIGH",
                        "requestedExecutionDate": "2018-08-16",
                        "paymentMode": "SINGLE",
                        "paymentType": "INTERNAL",
                        "transferTransactionInformation": {
                            "endToEndIdentification": "Some reference",
                            "instructedAmount": {
                                "amount": "134",
                                "currencyCode": "USD"
                            },
                            "counterpartyAccount": {
                                "accountType": "CHECKING",
                                "identification": {
                                    "identification": "3242342123899",
                                    "schemeName": "BBAN"
                                },
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2"
                            },
                            "counterparty": {
                                "name": "Dan Brown"
                            },
                            "remittanceInformation": {
                                "type": "UNSTRUCTURED",
                                "content": "Return a debt`"
                            }
                        },
                        "actions": ["APPROVE", "REJECT", "EDIT"],
                        "createdBy": "U00243",
                        "createdAt": "2017-05-12T14:33:13.452Z",
                        "edited": false,
                        "version": 1
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/payment-order-drafts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "af2599ef-759a-4b78-8e67-4949055a532b"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/payment-order-drafts/{draftPaymentOrderId}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, DraftSchedule, InstructionPriority, InvolvedPartyRole, PAYMENT_DRAFT_BASE_PATH, PaymentDraftApiModule, PaymentDraftConfiguration, PaymentMode, PaymentOrderDraftsHttpService, PaymentOrderDraftsHttpServiceDeleteDraftPaymentOrderMocksProvider, PaymentOrderDraftsHttpServiceGetDraftPaymentOrderMocksProvider, PaymentOrderDraftsHttpServiceGetPaymentOrdersDraftsMocksProvider, PaymentOrderDraftsHttpServiceMocksProvider, PaymentOrderDraftsHttpServicePostPaymentOrdersDraftsMocksProvider, PaymentOrderDraftsHttpServicePutDraftPaymentOrderMocksProvider, RemittanceInformation, SchemeNames, Status };
//# sourceMappingURL=backbase-payment-draft-http-ang.js.map
