import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "../bb-payment-card-group/payment-card-group.component";
import * as i2 from "@backbase/ui-ang/empty-state";
import * as i3 from "@angular/common";
const groupByPaymentCardType = (paymentCards, paymentCardType) => ({
    type: paymentCardType,
    paymentCards: paymentCards.filter((paymentCard) => paymentCard.type === paymentCardType),
});
const groupByPaymentCardTypes = (paymentCards, paymentCardTypes) => paymentCardTypes.reduce((acc, paymentCardType) => {
    const paymentCardGroup = groupByPaymentCardType(paymentCards, paymentCardType);
    return paymentCardGroup.paymentCards.length ? [...acc, paymentCardGroup] : acc;
}, []);
export class PaymentCardsContainerComponent {
    constructor() {
        /**
         * Specifies how the payment cards are grouped, specified as an array of types.  Defaults to the
         * empty array, which means all cards are shown in one group.
         */
        this.groupByPaymentCardTypes = [];
        /**
         * Event emitter for selecting a card.
         */
        this.selectCard = new EventEmitter();
        /**
         * Payment cards, grouped by the `groupByPaymentCardTypes` configuration.
         */
        this.paymentCardGroups = [];
        this.hostRef = this;
    }
    get hasItems() {
        return typeof this.paymentCards !== 'undefined' && this.paymentCards.length > 0;
    }
    ngOnChanges(changes) {
        const paymentCards = changes.paymentCards ? changes.paymentCards.currentValue : this.paymentCards;
        const paymentCardTypes = changes.groupByPaymentCardTypes
            ? changes.groupByPaymentCardTypes.currentValue
            : this.groupByPaymentCardTypes;
        // Populate `paymentCardGroups` field.
        this.paymentCardGroups = groupByPaymentCardTypes(paymentCards, paymentCardTypes);
    }
    onSelectCard(paymentCard) {
        this.selectCard.emit(paymentCard);
    }
}
PaymentCardsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardsContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardsContainerComponent, selector: "bb-payment-cards-container", inputs: { paymentCards: "paymentCards", groupByPaymentCardTypes: "groupByPaymentCardTypes", notificationTtl: "notificationTtl", updateAllLimits: "updateAllLimits" }, outputs: { selectCard: "selectCard" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"hasItems; else emptyState\">\n  <ng-container bbCardsListPaymentCardsContainerCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-container>\n\n<ng-template bbCardsListPaymentCardsContainerCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.paymentCardGroups.length\">\n    <ng-container *ngFor=\"let paymentCardGroup of hostRef.paymentCardGroups\">\n      <bb-payment-card-group\n        *ngIf=\"paymentCardGroup.paymentCards.length\"\n        class=\"bb-block bb-block--sm\"\n        [heading]=\"paymentCardGroup.type\"\n        [paymentCards]=\"paymentCardGroup.paymentCards\"\n        [notificationTtl]=\"hostRef.notificationTtl\"\n        [updateAllLimits]=\"hostRef.updateAllLimits\"\n        (selectCard)=\"hostRef.onSelectCard($event)\"\n      ></bb-payment-card-group>\n    </ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"!hostRef.paymentCardGroups.length\">\n    <bb-payment-card-group\n      [paymentCards]=\"hostRef.paymentCards\"\n      [notificationTtl]=\"hostRef.notificationTtl\"\n      (selectCard)=\"hostRef.onSelectCard($event)\"\n    ></bb-payment-card-group>\n  </ng-container>\n</ng-template>\n\n<ng-template bbCardsListPaymentCardsEmptyStateContainerCustomizable let-hostRef>\n  <div class=\"card bb-state-container\">\n    <bb-empty-state-ui\n      i18n-title=\"No cards found@@cards.state.noResultsFound.title\"\n      title=\"No Cards Found\"\n      i18n-subtitle=\"No cards to be displayed@@cards.state.noResultsFound.subtitle\"\n      subtitle=\"You don't have any cards to be displayed.\"\n      iconSize=\"xxl\"\n      iconModifier=\"credit-card\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <ng-container \n    bbCardsListPaymentCardsEmptyStateContainerCustomizable \n    [bbHostRef]=\"hostRef\"\n  ></ng-container>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1.PaymentCardGroupComponent; }), selector: "bb-payment-card-group", inputs: ["heading", "paymentCards", "notificationTtl", "updateAllLimits"], outputs: ["selectCard"] }, { type: i0.forwardRef(function () { return i2.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return CardsListPaymentCardsContainerCustomizableDirective; }), selector: "[bbCardsListPaymentCardsContainerCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return CardsListPaymentCardsEmptyStateContainerCustomizableDirective; }), selector: "[bbCardsListPaymentCardsEmptyStateContainerCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-cards-container',
                    templateUrl: './payment-cards-container.component.html',
                }]
        }], propDecorators: { paymentCards: [{
                type: Input
            }], groupByPaymentCardTypes: [{
                type: Input
            }], notificationTtl: [{
                type: Input
            }], updateAllLimits: [{
                type: Input
            }], selectCard: [{
                type: Output
            }] } });
export class CardsListPaymentCardsContainerCustomizableDirective extends BbTemplate {
}
CardsListPaymentCardsContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardsContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsListPaymentCardsContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsListPaymentCardsContainerCustomizableDirective, selector: "[bbCardsListPaymentCardsContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardsContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsListPaymentCardsContainerCustomizable]',
                }]
        }] });
export class CardsListPaymentCardsEmptyStateContainerCustomizableDirective extends BbTemplate {
}
CardsListPaymentCardsEmptyStateContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardsEmptyStateContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsListPaymentCardsEmptyStateContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsListPaymentCardsEmptyStateContainerCustomizableDirective, selector: "[bbCardsListPaymentCardsEmptyStateContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardsEmptyStateContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsListPaymentCardsEmptyStateContainerCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,