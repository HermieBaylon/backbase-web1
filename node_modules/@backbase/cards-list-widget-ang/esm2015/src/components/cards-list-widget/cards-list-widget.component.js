import { Component, EventEmitter, Input, Optional, Output } from '@angular/core';
import { CardsService, filterInputParameters } from '@backbase/cards-common-ang';
import { BehaviorSubject, of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/cards-common-ang";
import * as i2 from "../../services/widget-properties.service";
import * as i3 from "../bb-payment-cards-container/payment-cards-container.component";
import * as i4 from "@backbase/ui-ang/loading-indicator";
import * as i5 from "@angular/common";
export class CardsListWidgetComponent {
    constructor(cardsService, widgetPropertiesService) {
        this.cardsService = cardsService;
        this.widgetPropertiesService = widgetPropertiesService;
        this.notificationTtlSubject = new BehaviorSubject(undefined);
        this.updateAllLimitsSubject = new BehaviorSubject(undefined);
        this.groupByPaymentCardTypesSubject = new BehaviorSubject(undefined);
        /**
         * Event emitter for selecting a card.
         */
        this.selectedCard = new EventEmitter();
        this.handleError = (errors) => {
            this.errors = errors;
            return of([]);
        };
    }
    /**
     * Notification timeout timer value configuration
     */
    // eslint-disable-next-line
    set notificationTtlValue(value) {
        this.notificationTtlSubject.next(value);
    }
    /**
     * Enable to send multiple limits to the API when updating values
     */
    set updateAllLimitsValue(value) {
        this.updateAllLimitsSubject.next(value);
    }
    /**
     * Types of cards configuration value
     */
    // eslint-disable-next-line
    set groupByPaymentCardTypesValue(value) {
        const newArray = value === null || value === void 0 ? void 0 : value.split(',').filter((val) => val.length > 0);
        this.groupByPaymentCardTypesSubject.next(newArray);
    }
    ngOnInit() {
        this.cardsService.setParameters(this.groupByPaymentCardTypes);
        this.paymentCards = this.cardsService.getCards().pipe(catchError(this.handleError));
    }
    get groupByPaymentCardTypes() {
        return filterInputParameters(this.groupByPaymentCardTypesSubject, this.widgetPropertiesService.groupByPaymentCardTypes);
    }
    get notificationTtl() {
        return filterInputParameters(this.notificationTtlSubject, this.widgetPropertiesService.notificationTtl);
    }
    get updateAllLimits() {
        return filterInputParameters(this.updateAllLimitsSubject, this.widgetPropertiesService.updateAllLimits);
    }
    onSelectCard(paymentCard) {
        this.selectedCard.emit(paymentCard.id);
    }
}
CardsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListWidgetComponent, deps: [{ token: i1.CardsService }, { token: i2.WidgetPropertiesService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CardsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsListWidgetComponent, selector: "bb-cards-list-widget", inputs: { notificationTtlValue: ["notificationTtl", "notificationTtlValue"], updateAllLimitsValue: ["updateAllLimits", "updateAllLimitsValue"], groupByPaymentCardTypesValue: ["groupByPaymentCardTypes", "groupByPaymentCardTypesValue"] }, outputs: { selectedCard: "selectedCard" }, providers: [CardsService, WidgetPropertiesService], ngImport: i0, template: "<ng-container *ngIf=\"!errors; else errorState\">\n  <ng-container *ngIf=\"paymentCards | async as paymentCards; else loadingState\">\n    <bb-payment-cards-container\n      class=\"bb-block\"\n      [paymentCards]=\"paymentCards\"\n      [groupByPaymentCardTypes]=\"(groupByPaymentCardTypes | async) || undefined\"\n      [notificationTtl]=\"(notificationTtl | async) || undefined\"\n      [updateAllLimits]=\"(updateAllLimits | async) || undefined\"\n      (selectCard)=\"onSelectCard($event)\"\n    ></bb-payment-cards-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card bb-state-container\">\n    <bb-loading-indicator-ui \n      loaderSize=\"lg\" \n      text=\"Loading cards..\"\n      i18n-text=\"Loading state indicator text@@cards.list.loadingIndicator.text\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-payment-card-multiple-error-state [errors]=\"errors\"></bb-payment-card-multiple-error-state>\n</ng-template>", components: [{ type: i3.PaymentCardsContainerComponent, selector: "bb-payment-cards-container", inputs: ["paymentCards", "groupByPaymentCardTypes", "notificationTtl", "updateAllLimits"], outputs: ["selectCard"] }, { type: i4.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1.PaymentCardMultipleErrorStateComponent, selector: "bb-payment-card-multiple-error-state", inputs: ["errors"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-list-widget',
                    templateUrl: './cards-list-widget.component.html',
                    providers: [CardsService, WidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.CardsService }, { type: i2.WidgetPropertiesService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { notificationTtlValue: [{
                type: Input,
                args: ['notificationTtl']
            }], updateAllLimitsValue: [{
                type: Input,
                args: ['updateAllLimits']
            }], groupByPaymentCardTypesValue: [{
                type: Input,
                args: ['groupByPaymentCardTypes']
            }], selectedCard: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,