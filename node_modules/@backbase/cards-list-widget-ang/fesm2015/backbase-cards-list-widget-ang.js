import * as i1$1 from '@backbase/cards-common-ang';
import { PaymentCardControlsBase, PaymentCardContainerBase, PaymentCardStatus, PaymentCardLockStatus, BaseWidgetPropertiesService, DEFAULT_PAYMENT_CARD_TYPE_GROUP, filterInputParameters, CardsService, CardsCommonModule } from '@backbase/cards-common-ang';
export { CardsBackendError, LimitChannelMappingConfigToken, PaymentCardLockStatus, PaymentCardReplacementReason, PaymentCardReplacementStatus, PaymentCardStatus, ReplacementReasonMappingConfigToken, ReplacementStatusMappingConfigToken, StatusMappingConfigToken } from '@backbase/cards-common-ang';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, Directive, EventEmitter, Input, Output, Injectable, Optional, NgModule } from '@angular/core';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i2$1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i4 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i3$1 from '@backbase/ui-ang/payment-card';
import { PaymentCardModule } from '@backbase/ui-ang/payment-card';
import * as i2 from '@backbase/ui-ang/notification';
import { of, BehaviorSubject } from 'rxjs';
import { map, catchError } from 'rxjs/operators';

class PaymentCardControlsComponent extends PaymentCardControlsBase {
}
PaymentCardControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardControlsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
PaymentCardControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardControlsComponent, selector: "bb-payment-card-controls,bb-cards-list-payment-card-controls", usesInheritance: true, ngImport: i0, template: "<ng-container bbCardsListPaymentCardControlsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsListPaymentCardControlsCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.paymentCard.status === 'ACTIVE'\">\n    <span class=\"bb-payment-card-controls\">\n      <bb-load-button-ui\n        color=\"secondary\"\n        [isLoading]=\"hostRef.isLockLoading\"\n        (click)=\"!hostRef.isLockLoading && hostRef.onLock()\"\n        i18n=\"Lock button|Control card by locking@@card.control.lock\"\n        *ngIf=\"!hostRef.isLocked\"\n      >Lock</bb-load-button-ui>\n      <bb-load-button-ui\n        color=\"primary\"\n        [isLoading]=\"hostRef.isLockLoading\"\n        (click)=\"!hostRef.isLockLoading && hostRef.onUnlock()\"\n        i18n=\"Unlock button|Control card by unlocking@@card.control.unlock\"\n        *ngIf=\"hostRef.isLocked\"\n      >Unlock</bb-load-button-ui>\n    </span>\n\n    <bb-payment-card-initiate-replacement\n      [paymentCard]=\"hostRef.paymentCard\"\n      [isInitiateReplacementLoading]=\"hostRef.isInitiateReplacementLoading\"\n      (initiateReplacement)=\"hostRef.onInitiateReplacement($event)\"\n    ></bb-payment-card-initiate-replacement>\n  </ng-container>\n\n  <ng-container *ngIf=\"hostRef.paymentCard.status === 'INACTIVE'\">\n    <bb-payment-card-initiate-activation\n      [paymentCard]=\"hostRef.paymentCard\"\n      [isInitiateActivationLoading]=\"hostRef.isInitiateActivationLoading\"\n      (initiateActivation)=\"hostRef.onInitiateActivation($event)\"\n    ></bb-payment-card-initiate-activation>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i1$1.PaymentCardInitiateReplacementComponent; }), selector: "bb-payment-card-initiate-replacement", inputs: ["paymentCard", "isInitiateReplacementLoading"], outputs: ["initiateReplacement"] }, { type: i0.forwardRef(function () { return i1$1.PaymentCardInitiateActivationComponent; }), selector: "bb-payment-card-initiate-activation", inputs: ["paymentCard", "isInitiateActivationLoading"], outputs: ["initiateActivation"] }], directives: [{ type: i0.forwardRef(function () { return CardsListPaymentCardControlsCustomizableDirective; }), selector: "[bbCardsListPaymentCardControlsCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardControlsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-controls,bb-cards-list-payment-card-controls',
                    templateUrl: './payment-card-controls.component.html',
                }]
        }] });
class CardsListPaymentCardControlsCustomizableDirective extends BbTemplate {
}
CardsListPaymentCardControlsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardControlsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsListPaymentCardControlsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsListPaymentCardControlsCustomizableDirective, selector: "[bbCardsListPaymentCardControlsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardControlsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsListPaymentCardControlsCustomizable]',
                }]
        }] });

class PaymentCardComponent extends PaymentCardContainerBase {
    constructor(cardsService, cd, notificationService) {
        super(cardsService, cd, notificationService);
        this.cardsService = cardsService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.hostRef = this;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        /* eslint-disable max-len */
        const cardListLocalizations = {
            activationErrorHeader: $localize `:Error@@card.list.activation.notification.errorHeader:Error`,
            activationErrorMessage: $localize `:Failed to Activate Card. Unable to proceed, please try again.@@card.list.activation.notification.errorBody:Failed to Activate Card. Unable to proceed, please try again.`,
            activationSuccessHeader: $localize `:Card Activated@@card.list.activation.notification.successHeader:Card Activated.`,
            lockErrorHeader: $localize `:Error@@card.list.lock.notification.errorHeader:Error`,
            lockErrorMessage: $localize `:Card number cannot be locked, try again later|Lock Error Message@@card.list.lock.notification.errorMessage:Card number ending with ${(_a = this.paymentCard) === null || _a === void 0 ? void 0 : _a.number}:Card Number: cannot be locked! Try again later.`,
            lockSuccessHeader: $localize `:Card locked@@card.list.lock.notification.successHeader:Card locked`,
            lockSuccessMessage: $localize `:Card number locked|Successful lock message@@card.list.lock.notification.successMessage:Card number ending with ${(_b = this.paymentCard) === null || _b === void 0 ? void 0 : _b.number}:Card Number: has been locked.`,
            replacementErrorHeader: $localize `:Error@@card.list.replacement.notification.errorHeader:Error`,
            replacementErrorMessage: $localize `:Can't request card replacement. Try again@@card.list.replacement.notification.errorBody:Unable to request a card replacement. Try again later.`,
            replacementSuccessHeader: $localize `:New card ordered header@@card.list.replacement.notification.successHeader:New card ordered`,
            replacementSuccessMessage: $localize `:New card ordered@@card.list.replacement.notification.successBody:A new card has been ordered.`,
            requestNewPinSuccessMessage: $localize `:New PIN requested@@card.list.pin.notification.requestNewPinSuccessMessage:New PIN requested`,
            requestPinErrorMessage: $localize `:Can't request PIN. Try again@@card.list.requestPin.notification.errorBody:Can't request PIN.  Please try again later.`,
            resetPinSuccessMessage: $localize `:PIN successfully reset@@card.list.pin.notification.resetPinSuccessMessage:PIN successfully reset`,
            resetPinErrorMessage: $localize `:Unable to change PIN, try again@@card.list.resetPin.notification.errorBody:Unable to change PIN.  Please try again later.`,
            resetInvalidPinMessage: $localize `:Unable to change PIN, validations not meet@@card.list.pin.notification.resetInvalidPinMessage:Unable to change PIN. New PIN and confirm don't match`,
            unlockErrorHeader: $localize `:Error@@card.list.unlock.notification.errorHeader:Error`,
            unlockErrorMessage: $localize `:Card number cannot be unlocked, try again later|Unlock Error Message@@card.list.unlock.notification.errorMessage:Card number ending with ${(_c = this.paymentCard) === null || _c === void 0 ? void 0 : _c.number}:Card Number: cannot be unlocked! Try again later.`,
            unlockSuccessHeader: $localize `:Card unlocked@@card.list.unlock.notification.successHeader:Card unlocked`,
            unlockSuccessMessage: $localize `:Card number unlocked|Successful unlock Error Message@@card.list.unlock.notification.successMessage:Card number ending with ${(_d = this.paymentCard) === null || _d === void 0 ? void 0 : _d.number}:Card Number: has been unlocked.`,
            updateLimitErrorHeader: $localize `:Update Limit Error Header@@card.list.limit.notification.errorHeader:`,
            updateLimitErrorMessage: $localize `:Unable to change card limit@@card.list.limit.notification.errorBody:Unable to change card limit`,
            updateLimitSuccessHeader: $localize `:Limit changed header@@card.list.limit.notification.successHeader:Limit changed`,
            updateLimitSuccessMessage: $localize `:Card limit changed successfully@@card.list.limit.notification.changeLimitSuccessMessage:Card limit changed successfully`,
        };
        this.localizations = Object.assign({}, cardListLocalizations);
    }
    /**
     * Translate the payment card status/lock status/replacement status into a displayable
     * PaymentCardDisplayState.
     */
    getDisplayState() {
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Inactive) {
            return 'INACTIVE';
        }
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Canceled) {
            return 'CANCELLED';
        }
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Expired) {
            return 'EXPIRED';
        }
        if (this.paymentCard && this.paymentCard.lockStatus === PaymentCardLockStatus.Locked) {
            return 'LOCKED';
        }
        return undefined;
    }
}
PaymentCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardComponent, deps: [{ token: i1$1.CardsService }, { token: i0.ChangeDetectorRef }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
PaymentCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardComponent, selector: "bb-payment-card", usesInheritance: true, ngImport: i0, template: "<ng-container bbCardsListPaymentCardCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsListPaymentCardCustomizable let-hostRef>\n  <div class=\"bb-payment-card-component\">\n    <bb-payment-card-state-wrapper-ui\n      [state]=\"hostRef.getDisplayState()\"\n      (click)=\"hostRef.onOpenDetails()\"\n      style=\"cursor: pointer;\"\n    >\n    <bb-payment-card-ui bbAccessibilityKeyboard [paymentCard]=\"hostRef.paymentCard\"></bb-payment-card-ui>\n    </bb-payment-card-state-wrapper-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.PaymentCardStateWrapperComponent; }), selector: "bb-payment-card-state-wrapper,bb-payment-card-state-wrapper-ui", inputs: ["state"] }, { type: i0.forwardRef(function () { return i3$1.PaymentCardComponent; }), selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }], directives: [{ type: i0.forwardRef(function () { return CardsListPaymentCardCustomizableDirective; }), selector: "[bbCardsListPaymentCardCustomizable]" }, { type: i0.forwardRef(function () { return i1$1.AccessibilityKeyboardDirective; }), selector: "[bbAccessibilityKeyboard]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card',
                    templateUrl: './payment-card.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.CardsService }, { type: i0.ChangeDetectorRef }, { type: i2.NotificationService }]; } });
class CardsListPaymentCardCustomizableDirective extends BbTemplate {
}
CardsListPaymentCardCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsListPaymentCardCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsListPaymentCardCustomizableDirective, selector: "[bbCardsListPaymentCardCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsListPaymentCardCustomizable]',
                }]
        }] });

class PaymentCardGroupComponent {
    constructor() {
        /**
         * Event emitter for selecting a card.
         */
        this.selectCard = new EventEmitter();
    }
    ngOnInit() {
        if (typeof this.paymentCards === 'undefined') {
            throw new Error(`"paymentCards" input is required in "${this.constructor.name}"`);
        }
    }
    onSelectCard(paymentCard) {
        this.selectCard.emit(paymentCard);
    }
}
PaymentCardGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardGroupComponent, selector: "bb-payment-card-group", inputs: { heading: "heading", paymentCards: "paymentCards", notificationTtl: "notificationTtl", updateAllLimits: "updateAllLimits" }, outputs: { selectCard: "selectCard" }, ngImport: i0, template: "<div class=\"bb-block bb-block--sm\">\n  <div class=\"bb-payment-card-group-header bb-block bb-block--lg\" *ngIf=\"heading\">\n    <h2 role=\"heading\" aria-level=\"2\" tabindex=\"0\"> \n      {{heading}}\n      <ng-container i18n=\"Card group heading|Heading for group of cards@@cards.group.heading\">\n        cards\n      </ng-container>\n    </h2>\n  </div>\n  <div class=\"bb-stack bb-stack--wrap bb-stack--density-lg\">\n    <div class=\"bb-stack__item bb-block--lg\" *ngFor=\"let paymentCard of paymentCards\">\n      <bb-payment-card\n        [paymentCard]=\"paymentCard\"\n        [notificationTtl]=\"notificationTtl\"\n        [updateAllLimits]=\"updateAllLimits\"\n        (selectCard)=\"onSelectCard($event)\"\n      ></bb-payment-card>\n    </div>\n  </div>\n</div>", components: [{ type: PaymentCardComponent, selector: "bb-payment-card" }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-group',
                    templateUrl: './payment-card-group.component.html',
                }]
        }], propDecorators: { heading: [{
                type: Input
            }], paymentCards: [{
                type: Input
            }], notificationTtl: [{
                type: Input
            }], updateAllLimits: [{
                type: Input
            }], selectCard: [{
                type: Output
            }] } });

const groupByPaymentCardType = (paymentCards, paymentCardType) => ({
    type: paymentCardType,
    paymentCards: paymentCards.filter((paymentCard) => paymentCard.type === paymentCardType),
});
const groupByPaymentCardTypes = (paymentCards, paymentCardTypes) => paymentCardTypes.reduce((acc, paymentCardType) => {
    const paymentCardGroup = groupByPaymentCardType(paymentCards, paymentCardType);
    return paymentCardGroup.paymentCards.length ? [...acc, paymentCardGroup] : acc;
}, []);
class PaymentCardsContainerComponent {
    constructor() {
        /**
         * Specifies how the payment cards are grouped, specified as an array of types.  Defaults to the
         * empty array, which means all cards are shown in one group.
         */
        this.groupByPaymentCardTypes = [];
        /**
         * Event emitter for selecting a card.
         */
        this.selectCard = new EventEmitter();
        /**
         * Payment cards, grouped by the `groupByPaymentCardTypes` configuration.
         */
        this.paymentCardGroups = [];
        this.hostRef = this;
    }
    get hasItems() {
        return typeof this.paymentCards !== 'undefined' && this.paymentCards.length > 0;
    }
    ngOnChanges(changes) {
        const paymentCards = changes.paymentCards ? changes.paymentCards.currentValue : this.paymentCards;
        const paymentCardTypes = changes.groupByPaymentCardTypes
            ? changes.groupByPaymentCardTypes.currentValue
            : this.groupByPaymentCardTypes;
        // Populate `paymentCardGroups` field.
        this.paymentCardGroups = groupByPaymentCardTypes(paymentCards, paymentCardTypes);
    }
    onSelectCard(paymentCard) {
        this.selectCard.emit(paymentCard);
    }
}
PaymentCardsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardsContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardsContainerComponent, selector: "bb-payment-cards-container", inputs: { paymentCards: "paymentCards", groupByPaymentCardTypes: "groupByPaymentCardTypes", notificationTtl: "notificationTtl", updateAllLimits: "updateAllLimits" }, outputs: { selectCard: "selectCard" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"hasItems; else emptyState\">\n  <ng-container bbCardsListPaymentCardsContainerCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-container>\n\n<ng-template bbCardsListPaymentCardsContainerCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.paymentCardGroups.length\">\n    <ng-container *ngFor=\"let paymentCardGroup of hostRef.paymentCardGroups\">\n      <bb-payment-card-group\n        *ngIf=\"paymentCardGroup.paymentCards.length\"\n        class=\"bb-block bb-block--sm\"\n        [heading]=\"paymentCardGroup.type\"\n        [paymentCards]=\"paymentCardGroup.paymentCards\"\n        [notificationTtl]=\"hostRef.notificationTtl\"\n        [updateAllLimits]=\"hostRef.updateAllLimits\"\n        (selectCard)=\"hostRef.onSelectCard($event)\"\n      ></bb-payment-card-group>\n    </ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"!hostRef.paymentCardGroups.length\">\n    <bb-payment-card-group\n      [paymentCards]=\"hostRef.paymentCards\"\n      [notificationTtl]=\"hostRef.notificationTtl\"\n      (selectCard)=\"hostRef.onSelectCard($event)\"\n    ></bb-payment-card-group>\n  </ng-container>\n</ng-template>\n\n<ng-template bbCardsListPaymentCardsEmptyStateContainerCustomizable let-hostRef>\n  <div class=\"card bb-state-container\">\n    <bb-empty-state-ui\n      i18n-title=\"No cards found@@cards.state.noResultsFound.title\"\n      title=\"No Cards Found\"\n      i18n-subtitle=\"No cards to be displayed@@cards.state.noResultsFound.subtitle\"\n      subtitle=\"You don't have any cards to be displayed.\"\n      iconSize=\"xxl\"\n      iconModifier=\"credit-card\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <ng-container \n    bbCardsListPaymentCardsEmptyStateContainerCustomizable \n    [bbHostRef]=\"hostRef\"\n  ></ng-container>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return PaymentCardGroupComponent; }), selector: "bb-payment-card-group", inputs: ["heading", "paymentCards", "notificationTtl", "updateAllLimits"], outputs: ["selectCard"] }, { type: i0.forwardRef(function () { return i2$1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return CardsListPaymentCardsContainerCustomizableDirective; }), selector: "[bbCardsListPaymentCardsContainerCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return CardsListPaymentCardsEmptyStateContainerCustomizableDirective; }), selector: "[bbCardsListPaymentCardsEmptyStateContainerCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-cards-container',
                    templateUrl: './payment-cards-container.component.html',
                }]
        }], propDecorators: { paymentCards: [{
                type: Input
            }], groupByPaymentCardTypes: [{
                type: Input
            }], notificationTtl: [{
                type: Input
            }], updateAllLimits: [{
                type: Input
            }], selectCard: [{
                type: Output
            }] } });
class CardsListPaymentCardsContainerCustomizableDirective extends BbTemplate {
}
CardsListPaymentCardsContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardsContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsListPaymentCardsContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsListPaymentCardsContainerCustomizableDirective, selector: "[bbCardsListPaymentCardsContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardsContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsListPaymentCardsContainerCustomizable]',
                }]
        }] });
class CardsListPaymentCardsEmptyStateContainerCustomizableDirective extends BbTemplate {
}
CardsListPaymentCardsEmptyStateContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardsEmptyStateContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsListPaymentCardsEmptyStateContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsListPaymentCardsEmptyStateContainerCustomizableDirective, selector: "[bbCardsListPaymentCardsEmptyStateContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListPaymentCardsEmptyStateContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsListPaymentCardsEmptyStateContainerCustomizable]',
                }]
        }] });

/**
 * Enumeration of possible widget preferences
 */
const WidgetProperties = {
    GroupByPaymentCardTypes: 'groupByPaymentCardTypes',
};

class WidgetPropertiesService extends BaseWidgetPropertiesService {
    constructor(itemModel) {
        super(itemModel);
        this.itemModel = itemModel;
    }
    get groupByPaymentCardTypes() {
        return this.itemModel
            ? this.itemModel
                .property(WidgetProperties.GroupByPaymentCardTypes)
                .pipe(map((propertyValue) => (propertyValue || '').split(',').filter((value) => value.length > 0)))
            : of(DEFAULT_PAYMENT_CARD_TYPE_GROUP);
    }
}
WidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: WidgetPropertiesService, deps: [{ token: i1$2.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
WidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: WidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: WidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class CardsListWidgetComponent {
    constructor(cardsService, widgetPropertiesService) {
        this.cardsService = cardsService;
        this.widgetPropertiesService = widgetPropertiesService;
        this.notificationTtlSubject = new BehaviorSubject(undefined);
        this.updateAllLimitsSubject = new BehaviorSubject(undefined);
        this.groupByPaymentCardTypesSubject = new BehaviorSubject(undefined);
        /**
         * Event emitter for selecting a card.
         */
        this.selectedCard = new EventEmitter();
        this.handleError = (errors) => {
            this.errors = errors;
            return of([]);
        };
    }
    /**
     * Notification timeout timer value configuration
     */
    // eslint-disable-next-line
    set notificationTtlValue(value) {
        this.notificationTtlSubject.next(value);
    }
    /**
     * Enable to send multiple limits to the API when updating values
     */
    set updateAllLimitsValue(value) {
        this.updateAllLimitsSubject.next(value);
    }
    /**
     * Types of cards configuration value
     */
    // eslint-disable-next-line
    set groupByPaymentCardTypesValue(value) {
        const newArray = value === null || value === void 0 ? void 0 : value.split(',').filter((val) => val.length > 0);
        this.groupByPaymentCardTypesSubject.next(newArray);
    }
    ngOnInit() {
        this.cardsService.setParameters(this.groupByPaymentCardTypes);
        this.paymentCards = this.cardsService.getCards().pipe(catchError(this.handleError));
    }
    get groupByPaymentCardTypes() {
        return filterInputParameters(this.groupByPaymentCardTypesSubject, this.widgetPropertiesService.groupByPaymentCardTypes);
    }
    get notificationTtl() {
        return filterInputParameters(this.notificationTtlSubject, this.widgetPropertiesService.notificationTtl);
    }
    get updateAllLimits() {
        return filterInputParameters(this.updateAllLimitsSubject, this.widgetPropertiesService.updateAllLimits);
    }
    onSelectCard(paymentCard) {
        this.selectedCard.emit(paymentCard.id);
    }
}
CardsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListWidgetComponent, deps: [{ token: i1$1.CardsService }, { token: WidgetPropertiesService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CardsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsListWidgetComponent, selector: "bb-cards-list-widget", inputs: { notificationTtlValue: ["notificationTtl", "notificationTtlValue"], updateAllLimitsValue: ["updateAllLimits", "updateAllLimitsValue"], groupByPaymentCardTypesValue: ["groupByPaymentCardTypes", "groupByPaymentCardTypesValue"] }, outputs: { selectedCard: "selectedCard" }, providers: [CardsService, WidgetPropertiesService], ngImport: i0, template: "<ng-container *ngIf=\"!errors; else errorState\">\n  <ng-container *ngIf=\"paymentCards | async as paymentCards; else loadingState\">\n    <bb-payment-cards-container\n      class=\"bb-block\"\n      [paymentCards]=\"paymentCards\"\n      [groupByPaymentCardTypes]=\"(groupByPaymentCardTypes | async) || undefined\"\n      [notificationTtl]=\"(notificationTtl | async) || undefined\"\n      [updateAllLimits]=\"(updateAllLimits | async) || undefined\"\n      (selectCard)=\"onSelectCard($event)\"\n    ></bb-payment-cards-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card bb-state-container\">\n    <bb-loading-indicator-ui \n      loaderSize=\"lg\" \n      text=\"Loading cards..\"\n      i18n-text=\"Loading state indicator text@@cards.list.loadingIndicator.text\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-payment-card-multiple-error-state [errors]=\"errors\"></bb-payment-card-multiple-error-state>\n</ng-template>", components: [{ type: PaymentCardsContainerComponent, selector: "bb-payment-cards-container", inputs: ["paymentCards", "groupByPaymentCardTypes", "notificationTtl", "updateAllLimits"], outputs: ["selectCard"] }, { type: i4.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1$1.PaymentCardMultipleErrorStateComponent, selector: "bb-payment-card-multiple-error-state", inputs: ["errors"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-list-widget',
                    templateUrl: './cards-list-widget.component.html',
                    providers: [CardsService, WidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1$1.CardsService }, { type: WidgetPropertiesService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { notificationTtlValue: [{
                type: Input,
                args: ['notificationTtl']
            }], updateAllLimitsValue: [{
                type: Input,
                args: ['updateAllLimits']
            }], groupByPaymentCardTypesValue: [{
                type: Input,
                args: ['groupByPaymentCardTypes']
            }], selectedCard: [{
                type: Output
            }] } });

const modules = [
    PaymentCardModule,
    LoadingIndicatorModule,
    LoadButtonModule,
    IconModule,
    EmptyStateModule,
    CardsCommonModule,
];
const components = [
    CardsListWidgetComponent,
    PaymentCardComponent,
    PaymentCardControlsComponent,
    PaymentCardGroupComponent,
    PaymentCardsContainerComponent,
];
const customizables = [
    CardsListPaymentCardCustomizableDirective,
    CardsListPaymentCardControlsCustomizableDirective,
    CardsListPaymentCardsContainerCustomizableDirective,
    CardsListPaymentCardsEmptyStateContainerCustomizableDirective,
];
class CardsListWidgetModule {
}
CardsListWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CardsListWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListWidgetModule, declarations: [CardsListWidgetComponent,
        PaymentCardComponent,
        PaymentCardControlsComponent,
        PaymentCardGroupComponent,
        PaymentCardsContainerComponent, CardsListPaymentCardCustomizableDirective,
        CardsListPaymentCardControlsCustomizableDirective,
        CardsListPaymentCardsContainerCustomizableDirective,
        CardsListPaymentCardsEmptyStateContainerCustomizableDirective], imports: [CommonModule, i1$2.BackbaseCoreModule, PaymentCardModule,
        LoadingIndicatorModule,
        LoadButtonModule,
        IconModule,
        EmptyStateModule,
        CardsCommonModule], exports: [PaymentCardModule,
        LoadingIndicatorModule,
        LoadButtonModule,
        IconModule,
        EmptyStateModule,
        CardsCommonModule, CardsListWidgetComponent,
        PaymentCardComponent,
        PaymentCardControlsComponent,
        PaymentCardGroupComponent,
        PaymentCardsContainerComponent, CardsListPaymentCardCustomizableDirective,
        CardsListPaymentCardControlsCustomizableDirective,
        CardsListPaymentCardsContainerCustomizableDirective,
        CardsListPaymentCardsEmptyStateContainerCustomizableDirective] });
CardsListWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListWidgetModule, providers: [], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { CardsListWidgetComponent },
            }),
            ...modules,
        ], PaymentCardModule,
        LoadingIndicatorModule,
        LoadButtonModule,
        IconModule,
        EmptyStateModule,
        CardsCommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsListWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { CardsListWidgetComponent },
                        }),
                        ...modules,
                    ],
                    providers: [],
                    declarations: [...components, ...customizables],
                    exports: [...modules, ...components, ...customizables],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CardsListPaymentCardControlsCustomizableDirective, CardsListPaymentCardCustomizableDirective, CardsListPaymentCardsContainerCustomizableDirective, CardsListPaymentCardsEmptyStateContainerCustomizableDirective, CardsListWidgetComponent, CardsListWidgetModule, PaymentCardComponent, PaymentCardControlsComponent, PaymentCardGroupComponent, PaymentCardsContainerComponent };
//# sourceMappingURL=backbase-cards-list-widget-ang.js.map
