{"version":3,"file":"backbase-cards-list-widget-ang.js","sources":["../../../../libs/cards-list-widget-ang/src/components/bb-payment-card-controls/payment-card-controls.component.ts","../../../../libs/cards-list-widget-ang/src/components/bb-payment-card-controls/payment-card-controls.component.html","../../../../libs/cards-list-widget-ang/src/components/bb-payment-card/payment-card.component.ts","../../../../libs/cards-list-widget-ang/src/components/bb-payment-card/payment-card.component.html","../../../../libs/cards-list-widget-ang/src/components/bb-payment-card-group/payment-card-group.component.ts","../../../../libs/cards-list-widget-ang/src/components/bb-payment-card-group/payment-card-group.component.html","../../../../libs/cards-list-widget-ang/src/components/bb-payment-cards-container/payment-cards-container.component.ts","../../../../libs/cards-list-widget-ang/src/components/bb-payment-cards-container/payment-cards-container.component.html","../../../../libs/cards-list-widget-ang/src/constants.ts","../../../../libs/cards-list-widget-ang/src/services/widget-properties.service.ts","../../../../libs/cards-list-widget-ang/src/components/cards-list-widget/cards-list-widget.component.ts","../../../../libs/cards-list-widget-ang/src/components/cards-list-widget/cards-list-widget.component.html","../../../../libs/cards-list-widget-ang/src/cards-list-widget.module.ts","../../../../libs/cards-list-widget-ang/backbase-cards-list-widget-ang.ts"],"sourcesContent":["import { Component, Directive, OnInit } from '@angular/core';\nimport { PaymentCardControlsBase } from '@backbase/cards-common-ang';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\n\n@Component({\n  selector: 'bb-payment-card-controls,bb-cards-list-payment-card-controls',\n  templateUrl: './payment-card-controls.component.html',\n})\nexport class PaymentCardControlsComponent extends PaymentCardControlsBase implements OnInit {}\n\n@Directive({\n  selector: '[bbCardsListPaymentCardControlsCustomizable]',\n})\nexport class CardsListPaymentCardControlsCustomizableDirective extends BbTemplate<\n  PaymentCardControlsComponent,\n  undefined\n> {}\n","<ng-container bbCardsListPaymentCardControlsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsListPaymentCardControlsCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.paymentCard.status === 'ACTIVE'\">\n    <span class=\"bb-payment-card-controls\">\n      <bb-load-button-ui\n        color=\"secondary\"\n        [isLoading]=\"hostRef.isLockLoading\"\n        (click)=\"!hostRef.isLockLoading && hostRef.onLock()\"\n        i18n=\"Lock button|Control card by locking@@card.control.lock\"\n        *ngIf=\"!hostRef.isLocked\"\n      >Lock</bb-load-button-ui>\n      <bb-load-button-ui\n        color=\"primary\"\n        [isLoading]=\"hostRef.isLockLoading\"\n        (click)=\"!hostRef.isLockLoading && hostRef.onUnlock()\"\n        i18n=\"Unlock button|Control card by unlocking@@card.control.unlock\"\n        *ngIf=\"hostRef.isLocked\"\n      >Unlock</bb-load-button-ui>\n    </span>\n\n    <bb-payment-card-initiate-replacement\n      [paymentCard]=\"hostRef.paymentCard\"\n      [isInitiateReplacementLoading]=\"hostRef.isInitiateReplacementLoading\"\n      (initiateReplacement)=\"hostRef.onInitiateReplacement($event)\"\n    ></bb-payment-card-initiate-replacement>\n  </ng-container>\n\n  <ng-container *ngIf=\"hostRef.paymentCard.status === 'INACTIVE'\">\n    <bb-payment-card-initiate-activation\n      [paymentCard]=\"hostRef.paymentCard\"\n      [isInitiateActivationLoading]=\"hostRef.isInitiateActivationLoading\"\n      (initiateActivation)=\"hostRef.onInitiateActivation($event)\"\n    ></bb-payment-card-initiate-activation>\n  </ng-container>\n</ng-template>\n","import { ChangeDetectorRef, Component, Directive, OnInit } from '@angular/core';\nimport {\n  CardsService,\n  PaymentCardContainerBase,\n  PaymentCardDisplayState,\n  PaymentCardLockStatus,\n  PaymentCardStatus,\n} from '@backbase/cards-common-ang';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { NotificationService } from '@backbase/ui-ang/notification';\n\ndeclare const $localize: any;\n\n@Component({\n  selector: 'bb-payment-card',\n  templateUrl: './payment-card.component.html',\n})\nexport class PaymentCardComponent extends PaymentCardContainerBase implements OnInit {\n  readonly hostRef = this;\n\n  ngOnInit() {\n    /* eslint-disable max-len */\n    const cardListLocalizations = {\n      activationErrorHeader: $localize`:Error@@card.list.activation.notification.errorHeader:Error`,\n      activationErrorMessage: $localize`:Failed to Activate Card. Unable to proceed, please try again.@@card.list.activation.notification.errorBody:Failed to Activate Card. Unable to proceed, please try again.`,\n      activationSuccessHeader: $localize`:Card Activated@@card.list.activation.notification.successHeader:Card Activated.`,\n      lockErrorHeader: $localize`:Error@@card.list.lock.notification.errorHeader:Error`,\n      lockErrorMessage: $localize`:Card number cannot be locked, try again later|Lock Error Message@@card.list.lock.notification.errorMessage:Card number ending with ${this.paymentCard?.number}:Card Number: cannot be locked! Try again later.`,\n      lockSuccessHeader: $localize`:Card locked@@card.list.lock.notification.successHeader:Card locked`,\n      lockSuccessMessage: $localize`:Card number locked|Successful lock message@@card.list.lock.notification.successMessage:Card number ending with ${this.paymentCard?.number}:Card Number: has been locked.`,\n      replacementErrorHeader: $localize`:Error@@card.list.replacement.notification.errorHeader:Error`,\n      replacementErrorMessage: $localize`:Can't request card replacement. Try again@@card.list.replacement.notification.errorBody:Unable to request a card replacement. Try again later.`,\n      replacementSuccessHeader: $localize`:New card ordered header@@card.list.replacement.notification.successHeader:New card ordered`,\n      replacementSuccessMessage: $localize`:New card ordered@@card.list.replacement.notification.successBody:A new card has been ordered.`,\n      requestNewPinSuccessMessage: $localize`:New PIN requested@@card.list.pin.notification.requestNewPinSuccessMessage:New PIN requested`,\n      requestPinErrorMessage: $localize`:Can't request PIN. Try again@@card.list.requestPin.notification.errorBody:Can't request PIN.  Please try again later.`,\n      resetPinSuccessMessage: $localize`:PIN successfully reset@@card.list.pin.notification.resetPinSuccessMessage:PIN successfully reset`,\n      resetPinErrorMessage: $localize`:Unable to change PIN, try again@@card.list.resetPin.notification.errorBody:Unable to change PIN.  Please try again later.`,\n      resetInvalidPinMessage: $localize`:Unable to change PIN, validations not meet@@card.list.pin.notification.resetInvalidPinMessage:Unable to change PIN. New PIN and confirm don't match`,\n      unlockErrorHeader: $localize`:Error@@card.list.unlock.notification.errorHeader:Error`,\n      unlockErrorMessage: $localize`:Card number cannot be unlocked, try again later|Unlock Error Message@@card.list.unlock.notification.errorMessage:Card number ending with ${this.paymentCard?.number}:Card Number: cannot be unlocked! Try again later.`,\n      unlockSuccessHeader: $localize`:Card unlocked@@card.list.unlock.notification.successHeader:Card unlocked`,\n      unlockSuccessMessage: $localize`:Card number unlocked|Successful unlock Error Message@@card.list.unlock.notification.successMessage:Card number ending with ${this.paymentCard?.number}:Card Number: has been unlocked.`,\n      updateLimitErrorHeader: $localize`:Update Limit Error Header@@card.list.limit.notification.errorHeader:`,\n      updateLimitErrorMessage: $localize`:Unable to change card limit@@card.list.limit.notification.errorBody:Unable to change card limit`,\n      updateLimitSuccessHeader: $localize`:Limit changed header@@card.list.limit.notification.successHeader:Limit changed`,\n      updateLimitSuccessMessage: $localize`:Card limit changed successfully@@card.list.limit.notification.changeLimitSuccessMessage:Card limit changed successfully`,\n    };\n\n    this.localizations = { ...cardListLocalizations };\n  }\n\n  constructor(\n    protected readonly cardsService: CardsService,\n    protected readonly cd: ChangeDetectorRef,\n    protected readonly notificationService: NotificationService,\n  ) {\n    super(cardsService, cd, notificationService);\n  }\n\n  /**\n   * Translate the payment card status/lock status/replacement status into a displayable\n   * PaymentCardDisplayState.\n   */\n  getDisplayState(): PaymentCardDisplayState | undefined {\n    if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Inactive) {\n      return 'INACTIVE';\n    }\n\n    if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Canceled) {\n      return 'CANCELLED';\n    }\n\n    if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Expired) {\n      return 'EXPIRED';\n    }\n\n    if (this.paymentCard && this.paymentCard.lockStatus === PaymentCardLockStatus.Locked) {\n      return 'LOCKED';\n    }\n\n    return undefined;\n  }\n}\n\n@Directive({\n  selector: '[bbCardsListPaymentCardCustomizable]',\n})\nexport class CardsListPaymentCardCustomizableDirective extends BbTemplate<PaymentCardComponent, undefined> {}\n","<ng-container bbCardsListPaymentCardCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsListPaymentCardCustomizable let-hostRef>\n  <div class=\"bb-payment-card-component\">\n    <bb-payment-card-state-wrapper-ui\n      [state]=\"hostRef.getDisplayState()\"\n      (click)=\"hostRef.onOpenDetails()\"\n      style=\"cursor: pointer;\"\n    >\n    <bb-payment-card-ui bbAccessibilityKeyboard [paymentCard]=\"hostRef.paymentCard\"></bb-payment-card-ui>\n    </bb-payment-card-state-wrapper-ui>\n  </div>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { PaymentCard } from '@backbase/cards-common-ang';\n\n@Component({\n  selector: 'bb-payment-card-group',\n  templateUrl: './payment-card-group.component.html',\n})\nexport class PaymentCardGroupComponent implements OnInit {\n  /**\n   * Title to be displayed over payment cards.\n   */\n  @Input() heading: string | undefined;\n  /**\n   * Array of payment cards to be displayed.\n   */\n  @Input() paymentCards: Array<PaymentCard> | undefined;\n  /**\n   * Specifies the time that a notification would be displayed\n   */\n  @Input() notificationTtl: number | undefined;\n  /**\n   * Enable to send multiple limits to the API when updating values\n   */\n  @Input() updateAllLimits: boolean | undefined;\n  /**\n   * Event emitter for selecting a card.\n   */\n  @Output() readonly selectCard = new EventEmitter<PaymentCard>();\n\n  ngOnInit() {\n    if (typeof this.paymentCards === 'undefined') {\n      throw new Error(`\"paymentCards\" input is required in \"${this.constructor.name}\"`);\n    }\n  }\n\n  onSelectCard(paymentCard: PaymentCard) {\n    this.selectCard.emit(paymentCard);\n  }\n}\n","<div class=\"bb-block bb-block--sm\">\n  <div class=\"bb-payment-card-group-header bb-block bb-block--lg\" *ngIf=\"heading\">\n    <h2 role=\"heading\" aria-level=\"2\" tabindex=\"0\"> \n      {{heading}}\n      <ng-container i18n=\"Card group heading|Heading for group of cards@@cards.group.heading\">\n        cards\n      </ng-container>\n    </h2>\n  </div>\n  <div class=\"bb-stack bb-stack--wrap bb-stack--density-lg\">\n    <div class=\"bb-stack__item bb-block--lg\" *ngFor=\"let paymentCard of paymentCards\">\n      <bb-payment-card\n        [paymentCard]=\"paymentCard\"\n        [notificationTtl]=\"notificationTtl\"\n        [updateAllLimits]=\"updateAllLimits\"\n        (selectCard)=\"onSelectCard($event)\"\n      ></bb-payment-card>\n    </div>\n  </div>\n</div>","import { Component, Directive, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { PaymentCard } from '@backbase/cards-common-ang';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\n\nexport interface PaymentCardGroup {\n  type: string;\n  paymentCards: Array<PaymentCard>;\n}\n\nconst groupByPaymentCardType = (paymentCards: Array<PaymentCard>, paymentCardType: string) => ({\n  type: paymentCardType,\n  paymentCards: paymentCards.filter((paymentCard) => paymentCard.type === paymentCardType),\n});\n\nconst groupByPaymentCardTypes = (\n  paymentCards: Array<PaymentCard>,\n  paymentCardTypes: Array<string>,\n): Array<PaymentCardGroup> =>\n  paymentCardTypes.reduce((acc: Array<PaymentCardGroup>, paymentCardType: string) => {\n    const paymentCardGroup = groupByPaymentCardType(paymentCards, paymentCardType);\n\n    return paymentCardGroup.paymentCards.length ? [...acc, paymentCardGroup] : acc;\n  }, []);\n\n@Component({\n  selector: 'bb-payment-cards-container',\n  templateUrl: './payment-cards-container.component.html',\n})\nexport class PaymentCardsContainerComponent implements OnChanges {\n  /**\n   * All payment cards to be displayed.\n   */\n  @Input() paymentCards: Array<PaymentCard> | undefined;\n  /**\n   * Specifies how the payment cards are grouped, specified as an array of types.  Defaults to the\n   * empty array, which means all cards are shown in one group.\n   */\n  @Input() groupByPaymentCardTypes: string[] | undefined = [];\n  /**\n   * Specifies the time that a notification would be displayed\n   */\n  @Input() notificationTtl: number | undefined;\n  /**\n   * Enable to send multiple limits to the API when updating values\n   */\n  @Input() updateAllLimits: boolean | undefined;\n  /**\n   * Event emitter for selecting a card.\n   */\n  @Output() readonly selectCard = new EventEmitter<PaymentCard>();\n  /**\n   * Payment cards, grouped by the `groupByPaymentCardTypes` configuration.\n   */\n  paymentCardGroups: Array<PaymentCardGroup> = [];\n\n  get hasItems() {\n    return typeof this.paymentCards !== 'undefined' && this.paymentCards.length > 0;\n  }\n\n  readonly hostRef = this;\n\n  ngOnChanges(changes: SimpleChanges) {\n    const paymentCards = changes.paymentCards ? changes.paymentCards.currentValue : this.paymentCards;\n    const paymentCardTypes = changes.groupByPaymentCardTypes\n      ? changes.groupByPaymentCardTypes.currentValue\n      : this.groupByPaymentCardTypes;\n\n    // Populate `paymentCardGroups` field.\n    this.paymentCardGroups = groupByPaymentCardTypes(paymentCards, paymentCardTypes);\n  }\n\n  onSelectCard(paymentCard: PaymentCard) {\n    this.selectCard.emit(paymentCard);\n  }\n}\n\n@Directive({\n  selector: '[bbCardsListPaymentCardsContainerCustomizable]',\n})\nexport class CardsListPaymentCardsContainerCustomizableDirective extends BbTemplate<\n  PaymentCardsContainerComponent,\n  undefined\n> {}\n\n@Directive({\n  selector: '[bbCardsListPaymentCardsEmptyStateContainerCustomizable]',\n})\nexport class CardsListPaymentCardsEmptyStateContainerCustomizableDirective extends BbTemplate<\n  PaymentCardsContainerComponent,\n  undefined\n> {}\n","<ng-container *ngIf=\"hasItems; else emptyState\">\n  <ng-container bbCardsListPaymentCardsContainerCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-container>\n\n<ng-template bbCardsListPaymentCardsContainerCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.paymentCardGroups.length\">\n    <ng-container *ngFor=\"let paymentCardGroup of hostRef.paymentCardGroups\">\n      <bb-payment-card-group\n        *ngIf=\"paymentCardGroup.paymentCards.length\"\n        class=\"bb-block bb-block--sm\"\n        [heading]=\"paymentCardGroup.type\"\n        [paymentCards]=\"paymentCardGroup.paymentCards\"\n        [notificationTtl]=\"hostRef.notificationTtl\"\n        [updateAllLimits]=\"hostRef.updateAllLimits\"\n        (selectCard)=\"hostRef.onSelectCard($event)\"\n      ></bb-payment-card-group>\n    </ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"!hostRef.paymentCardGroups.length\">\n    <bb-payment-card-group\n      [paymentCards]=\"hostRef.paymentCards\"\n      [notificationTtl]=\"hostRef.notificationTtl\"\n      (selectCard)=\"hostRef.onSelectCard($event)\"\n    ></bb-payment-card-group>\n  </ng-container>\n</ng-template>\n\n<ng-template bbCardsListPaymentCardsEmptyStateContainerCustomizable let-hostRef>\n  <div class=\"card bb-state-container\">\n    <bb-empty-state-ui\n      i18n-title=\"No cards found@@cards.state.noResultsFound.title\"\n      title=\"No Cards Found\"\n      i18n-subtitle=\"No cards to be displayed@@cards.state.noResultsFound.subtitle\"\n      subtitle=\"You don't have any cards to be displayed.\"\n      iconSize=\"xxl\"\n      iconModifier=\"credit-card\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <ng-container \n    bbCardsListPaymentCardsEmptyStateContainerCustomizable \n    [bbHostRef]=\"hostRef\"\n  ></ng-container>\n</ng-template>\n\n","/**\n * Enumeration of possible widget preferences\n */\nexport const WidgetProperties = {\n  GroupByPaymentCardTypes: 'groupByPaymentCardTypes',\n};\n","import { Injectable, Optional } from '@angular/core';\nimport { BaseWidgetPropertiesService, DEFAULT_PAYMENT_CARD_TYPE_GROUP } from '@backbase/cards-common-ang';\nimport { ItemModel } from '@backbase/foundation-ang/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { WidgetProperties } from '../constants';\n\n@Injectable()\nexport class WidgetPropertiesService extends BaseWidgetPropertiesService {\n  get groupByPaymentCardTypes(): Observable<Array<string>> {\n    return this.itemModel\n      ? this.itemModel\n          .property(WidgetProperties.GroupByPaymentCardTypes)\n          .pipe(\n            map((propertyValue) => ((propertyValue as string) || '').split(',').filter((value) => value.length > 0)),\n          )\n      : of(DEFAULT_PAYMENT_CARD_TYPE_GROUP);\n  }\n\n  constructor(@Optional() protected readonly itemModel: ItemModel) {\n    super(itemModel);\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Optional, Output } from '@angular/core';\nimport { CardsBackendError, CardsService, filterInputParameters, PaymentCard } from '@backbase/cards-common-ang';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { WidgetPropertiesService } from '../../services/widget-properties.service';\n\n@Component({\n  selector: 'bb-cards-list-widget',\n  templateUrl: './cards-list-widget.component.html',\n  providers: [CardsService, WidgetPropertiesService],\n})\nexport class CardsListWidgetComponent implements OnInit {\n  private readonly notificationTtlSubject = new BehaviorSubject<number | undefined>(undefined);\n  private readonly updateAllLimitsSubject = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly groupByPaymentCardTypesSubject = new BehaviorSubject<string[] | undefined>(undefined);\n\n  /**\n   * Notification timeout timer value configuration\n   */\n  // eslint-disable-next-line\n  @Input('notificationTtl')\n  set notificationTtlValue(value: number | undefined) {\n    this.notificationTtlSubject.next(value);\n  }\n  /**\n   * Enable to send multiple limits to the API when updating values\n   */\n  @Input('updateAllLimits') set updateAllLimitsValue(value: boolean | undefined) {\n    this.updateAllLimitsSubject.next(value);\n  }\n  /**\n   * Types of cards configuration value\n   */\n  // eslint-disable-next-line\n  @Input('groupByPaymentCardTypes')\n  set groupByPaymentCardTypesValue(value: string | undefined) {\n    const newArray = value?.split(',').filter((val) => val.length > 0);\n\n    this.groupByPaymentCardTypesSubject.next(newArray);\n  }\n  /**\n   * Event emitter for selecting a card.\n   */\n  @Output() readonly selectedCard = new EventEmitter<string>();\n  /**\n   * Observable of payment cards.\n   */\n  paymentCards: Observable<Array<PaymentCard>> | undefined;\n  /**\n   * Error message in case something unexpected occurs.\n   */\n  errors: CardsBackendError[] | undefined;\n\n  constructor(\n    private readonly cardsService: CardsService,\n    @Optional() private readonly widgetPropertiesService: WidgetPropertiesService,\n  ) {}\n\n  private readonly handleError = (errors: CardsBackendError[]) => {\n    this.errors = errors;\n\n    return of([]);\n  };\n\n  ngOnInit() {\n    this.cardsService.setParameters(this.groupByPaymentCardTypes);\n    this.paymentCards = this.cardsService.getCards().pipe(catchError(this.handleError));\n  }\n\n  get groupByPaymentCardTypes(): Observable<string[]> {\n    return filterInputParameters(\n      this.groupByPaymentCardTypesSubject,\n      this.widgetPropertiesService.groupByPaymentCardTypes,\n    );\n  }\n\n  get notificationTtl(): Observable<number> {\n    return filterInputParameters(this.notificationTtlSubject, this.widgetPropertiesService.notificationTtl);\n  }\n\n  get updateAllLimits(): Observable<boolean> {\n    return filterInputParameters(this.updateAllLimitsSubject, this.widgetPropertiesService.updateAllLimits);\n  }\n\n  onSelectCard(paymentCard: PaymentCard) {\n    this.selectedCard.emit(paymentCard.id);\n  }\n}\n","<ng-container *ngIf=\"!errors; else errorState\">\n  <ng-container *ngIf=\"paymentCards | async as paymentCards; else loadingState\">\n    <bb-payment-cards-container\n      class=\"bb-block\"\n      [paymentCards]=\"paymentCards\"\n      [groupByPaymentCardTypes]=\"(groupByPaymentCardTypes | async) || undefined\"\n      [notificationTtl]=\"(notificationTtl | async) || undefined\"\n      [updateAllLimits]=\"(updateAllLimits | async) || undefined\"\n      (selectCard)=\"onSelectCard($event)\"\n    ></bb-payment-cards-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card bb-state-container\">\n    <bb-loading-indicator-ui \n      loaderSize=\"lg\" \n      text=\"Loading cards..\"\n      i18n-text=\"Loading state indicator text@@cards.list.loadingIndicator.text\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-payment-card-multiple-error-state [errors]=\"errors\"></bb-payment-card-multiple-error-state>\n</ng-template>","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CardsCommonModule } from '@backbase/cards-common-ang';\nimport { BackbaseCoreModule } from '@backbase/foundation-ang/core';\nimport { EmptyStateModule } from '@backbase/ui-ang/empty-state';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport { LoadButtonModule } from '@backbase/ui-ang/load-button';\nimport { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';\nimport { PaymentCardModule } from '@backbase/ui-ang/payment-card';\nimport {\n  CardsListPaymentCardControlsCustomizableDirective,\n  PaymentCardControlsComponent,\n} from './components/bb-payment-card-controls/payment-card-controls.component';\nimport { PaymentCardGroupComponent } from './components/bb-payment-card-group/payment-card-group.component';\nimport {\n  CardsListPaymentCardCustomizableDirective,\n  PaymentCardComponent,\n} from './components/bb-payment-card/payment-card.component';\nimport {\n  CardsListPaymentCardsContainerCustomizableDirective,\n  CardsListPaymentCardsEmptyStateContainerCustomizableDirective,\n  PaymentCardsContainerComponent,\n} from './components/bb-payment-cards-container/payment-cards-container.component';\nimport { CardsListWidgetComponent } from './components/cards-list-widget/cards-list-widget.component';\n\nconst modules = [\n  PaymentCardModule,\n  LoadingIndicatorModule,\n  LoadButtonModule,\n  IconModule,\n  EmptyStateModule,\n  CardsCommonModule,\n];\n\nconst components = [\n  CardsListWidgetComponent,\n  PaymentCardComponent,\n  PaymentCardControlsComponent,\n  PaymentCardGroupComponent,\n  PaymentCardsContainerComponent,\n];\n\nconst customizables = [\n  CardsListPaymentCardCustomizableDirective,\n  CardsListPaymentCardControlsCustomizableDirective,\n  CardsListPaymentCardsContainerCustomizableDirective,\n  CardsListPaymentCardsEmptyStateContainerCustomizableDirective,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BackbaseCoreModule.withConfig({\n      classMap: { CardsListWidgetComponent },\n    }),\n    ...modules,\n  ],\n  providers: [],\n  declarations: [...components, ...customizables],\n  exports: [...modules, ...components, ...customizables],\n})\nexport class CardsListWidgetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}