import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { secondsToMilliseconds } from '@backbase/actions-common-ang';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export const ActionsRetailNotificationPreferencesJourneyToken = new InjectionToken('ActionsRetailNotificationPreferencesJourneyConfiguration injection token');
export function provideConfig(defaults) {
    return {
        provide: defaults,
        useFactory: (custom) => (Object.assign(Object.assign({}, new defaults()), custom)),
        deps: [ActionsRetailNotificationPreferencesJourneyToken],
    };
}
export const configDefaults = {
    notificationDismissTime: 5,
    specificationIDs: '1, 4',
    apiMode: 'engagements',
};
export class ActionsRetailNotificationPreferencesJourneyConfigService {
    constructor(staticConfigOverrides) {
        this.staticConfig = Object.assign(Object.assign({}, configDefaults), staticConfigOverrides);
    }
    /**
     * Method to get notification dismiss time preference value.
     *
     * @returns notification dismiss time in seconds
     */
    get notificationDismissTime$() {
        return of(this.staticConfig.notificationDismissTime).pipe(map(Number), map(number => (isNaN(number) ? configDefaults.notificationDismissTime : number)), map(secondsToMilliseconds));
    }
    /**
     * Method to get specification IDs.
     *
     * @returns specification IDs array
     */
    get specificationIDs$() {
        return of(this.staticConfig.specificationIDs).pipe(map(data => data.replace(/\s/g, '').split(',')));
    }
    /**
     * Method to get api mode.
     *
     * @returns api mode string
     */
    get apiMode() {
        return this.staticConfig.apiMode;
    }
}
ActionsRetailNotificationPreferencesJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsRetailNotificationPreferencesJourneyConfigService, deps: [{ token: ActionsRetailNotificationPreferencesJourneyToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ActionsRetailNotificationPreferencesJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsRetailNotificationPreferencesJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsRetailNotificationPreferencesJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ActionsRetailNotificationPreferencesJourneyToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy1yZXRhaWwtbm90aWZpY2F0aW9uLXByZWZlcmVuY2VzLWpvdXJuZXktY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2FjdGlvbnMtcmV0YWlsLW5vdGlmaWNhdGlvbi1wcmVmZXJlbmNlcy1qb3VybmV5L3NyYy9hY3Rpb25zLXJldGFpbC1ub3RpZmljYXRpb24tcHJlZmVyZW5jZXMtam91cm5leS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBVyxxQkFBcUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQVFyQyxNQUFNLENBQUMsTUFBTSxnREFBZ0QsR0FBRyxJQUFJLGNBQWMsQ0FFaEYsMEVBQTBFLENBQUMsQ0FBQztBQUU5RSxNQUFNLFVBQVUsYUFBYSxDQUFJLFFBQXFCO0lBQ3BELE9BQU87UUFDTCxPQUFPLEVBQUUsUUFBUTtRQUNqQixVQUFVLEVBQUUsQ0FBQyxNQUFTLEVBQUUsRUFBRSxDQUFDLGlDQUFNLElBQUksUUFBUSxFQUFFLEdBQUssTUFBTSxFQUFHO1FBQzdELElBQUksRUFBRSxDQUFDLGdEQUFnRCxDQUFDO0tBQ3pELENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUE2RDtJQUN0Rix1QkFBdUIsRUFBRSxDQUFDO0lBQzFCLGdCQUFnQixFQUFFLE1BQU07SUFDeEIsT0FBTyxFQUFFLGFBQWE7Q0FDdkIsQ0FBQztBQUdGLE1BQU0sT0FBTyx3REFBd0Q7SUFFbkUsWUFHRSxxQkFBZ0Y7UUFFaEYsSUFBSSxDQUFDLFlBQVksbUNBQVEsY0FBYyxHQUFLLHFCQUFxQixDQUFFLENBQUM7SUFDdEUsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFJLHdCQUF3QjtRQUMxQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLENBQUMsSUFBSSxDQUN2RCxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQ1gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDaEYsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQzNCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksaUJBQWlCO1FBQ25CLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7SUFDbkMsQ0FBQzs7c0pBdkNVLHdEQUF3RCxrQkFJekQsZ0RBQWdEOzBKQUovQyx3REFBd0Q7NEZBQXhELHdEQUF3RDtrQkFEcEUsVUFBVTs7MEJBSU4sUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxnREFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwaU1vZGUsIHNlY29uZHNUb01pbGxpc2Vjb25kcyB9IGZyb20gJ0BiYWNrYmFzZS9hY3Rpb25zLWNvbW1vbi1hbmcnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25zUmV0YWlsTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNKb3VybmV5Q29uZmlndXJhdGlvbiB7XG4gIG5vdGlmaWNhdGlvbkRpc21pc3NUaW1lOiBudW1iZXI7XG4gIHNwZWNpZmljYXRpb25JRHM6IHN0cmluZztcbiAgYXBpTW9kZTogQXBpTW9kZTtcbn1cblxuZXhwb3J0IGNvbnN0IEFjdGlvbnNSZXRhaWxOb3RpZmljYXRpb25QcmVmZXJlbmNlc0pvdXJuZXlUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxcbiAgUGFydGlhbDxBY3Rpb25zUmV0YWlsTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNKb3VybmV5Q29uZmlndXJhdGlvbj5cbj4oJ0FjdGlvbnNSZXRhaWxOb3RpZmljYXRpb25QcmVmZXJlbmNlc0pvdXJuZXlDb25maWd1cmF0aW9uIGluamVjdGlvbiB0b2tlbicpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUNvbmZpZzxUPihkZWZhdWx0czogbmV3ICgpID0+IFQpOiBQcm92aWRlciB7XG4gIHJldHVybiB7XG4gICAgcHJvdmlkZTogZGVmYXVsdHMsXG4gICAgdXNlRmFjdG9yeTogKGN1c3RvbTogVCkgPT4gKHsgLi4ubmV3IGRlZmF1bHRzKCksIC4uLmN1c3RvbSB9KSxcbiAgICBkZXBzOiBbQWN0aW9uc1JldGFpbE5vdGlmaWNhdGlvblByZWZlcmVuY2VzSm91cm5leVRva2VuXSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbmZpZ0RlZmF1bHRzOiBBY3Rpb25zUmV0YWlsTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNKb3VybmV5Q29uZmlndXJhdGlvbiA9IHtcbiAgbm90aWZpY2F0aW9uRGlzbWlzc1RpbWU6IDUsXG4gIHNwZWNpZmljYXRpb25JRHM6ICcxLCA0JyxcbiAgYXBpTW9kZTogJ2VuZ2FnZW1lbnRzJyxcbn07XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY3Rpb25zUmV0YWlsTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNKb3VybmV5Q29uZmlnU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhdGljQ29uZmlnOiBBY3Rpb25zUmV0YWlsTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNKb3VybmV5Q29uZmlndXJhdGlvbjtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEFjdGlvbnNSZXRhaWxOb3RpZmljYXRpb25QcmVmZXJlbmNlc0pvdXJuZXlUb2tlbilcbiAgICBzdGF0aWNDb25maWdPdmVycmlkZXM/OiBBY3Rpb25zUmV0YWlsTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNKb3VybmV5Q29uZmlndXJhdGlvbixcbiAgKSB7XG4gICAgdGhpcy5zdGF0aWNDb25maWcgPSB7IC4uLmNvbmZpZ0RlZmF1bHRzLCAuLi5zdGF0aWNDb25maWdPdmVycmlkZXMgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gZ2V0IG5vdGlmaWNhdGlvbiBkaXNtaXNzIHRpbWUgcHJlZmVyZW5jZSB2YWx1ZS5cbiAgICpcbiAgICogQHJldHVybnMgbm90aWZpY2F0aW9uIGRpc21pc3MgdGltZSBpbiBzZWNvbmRzXG4gICAqL1xuICBnZXQgbm90aWZpY2F0aW9uRGlzbWlzc1RpbWUkKCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG9mKHRoaXMuc3RhdGljQ29uZmlnLm5vdGlmaWNhdGlvbkRpc21pc3NUaW1lKS5waXBlKFxuICAgICAgbWFwKE51bWJlciksXG4gICAgICBtYXAobnVtYmVyID0+IChpc05hTihudW1iZXIpID8gY29uZmlnRGVmYXVsdHMubm90aWZpY2F0aW9uRGlzbWlzc1RpbWUgOiBudW1iZXIpKSxcbiAgICAgIG1hcChzZWNvbmRzVG9NaWxsaXNlY29uZHMpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRvIGdldCBzcGVjaWZpY2F0aW9uIElEcy5cbiAgICpcbiAgICogQHJldHVybnMgc3BlY2lmaWNhdGlvbiBJRHMgYXJyYXlcbiAgICovXG4gIGdldCBzcGVjaWZpY2F0aW9uSURzJCgpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIG9mKHRoaXMuc3RhdGljQ29uZmlnLnNwZWNpZmljYXRpb25JRHMpLnBpcGUobWFwKGRhdGEgPT4gZGF0YS5yZXBsYWNlKC9cXHMvZywgJycpLnNwbGl0KCcsJykpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gZ2V0IGFwaSBtb2RlLlxuICAgKlxuICAgKiBAcmV0dXJucyBhcGkgbW9kZSBzdHJpbmdcbiAgICovXG4gIGdldCBhcGlNb2RlKCk6IEFwaU1vZGUge1xuICAgIHJldHVybiB0aGlzLnN0YXRpY0NvbmZpZy5hcGlNb2RlO1xuICB9XG59XG4iXX0=