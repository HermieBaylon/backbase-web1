import * as i3 from '@angular/common';
import { DOCUMENT, formatDate, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, Injectable, Inject, HostListener, LOCALE_ID, NgModule, Optional } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i1 from '@backbase/ui-ang/account-selector';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';
import * as i1$1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i4 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i5 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import { of, throwError, BehaviorSubject, combineLatest } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
import * as i1$2 from '@backbase/data-ang/arrangements';
import * as i2$1 from '@backbase/data-ang/account-statements';
import { AccountStatementsPostRequest } from '@backbase/data-ang/account-statements';
import * as i3$1 from '@angular/common/http';
import * as i1$3 from '@backbase/ui-ang/pagination';
import { PaginationModule } from '@backbase/ui-ang/pagination';
import * as i2$2 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import { __decorate, __param } from 'tslib';
import { convertToParamMap } from '@angular/router';

class AccountStatementAccountSelectorComponent {
    constructor() {
        this.accounts = [];
        this.accountSelect = new EventEmitter();
        this.id = `bb-account-statement-account-selector-${AccountStatementAccountSelectorComponent.idCounter++}`;
    }
    onSelect(account) {
        this.accountSelect.emit(account);
    }
}
AccountStatementAccountSelectorComponent.idCounter = 0;
AccountStatementAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementAccountSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountStatementAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementAccountSelectorComponent, selector: "bb-account-statement-account-selector", inputs: { accounts: "accounts" }, outputs: { accountSelect: "accountSelect" }, ngImport: i0, template: "<ng-container\n  bbAccountStatementAccountSelectorCustomizableDirective\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accounts: accounts\n  }\"\n>\n</ng-container>\n\n<ng-template bbAccountStatementAccountSelectorCustomizableDirective let-hostRef let-accounts=\"context.accounts\">\n  <span\n    [attr.id]=\"hostRef.id + '-label'\"\n    class=\"sr-only\"\n    data-role=\"account-selector-label\"\n    i18n=\"Account selector dropdown aria label@@account-statement.accounts-selector.label\"\n    >Account selector dropdown</span\n  >\n  <bb-account-selector-ui\n    [items]=\"accounts\"\n    [searchable]=\"false\"\n    [markFirst]=\"true\"\n    [selectedItems]=\"accounts[0]\"\n    [aria-labelledby]=\"hostRef.id + '-label'\"\n    (change)=\"hostRef.onSelect($event)\"\n    placeholder=\"Select an account\"\n    i18n-placeholder=\"Select an account|accounts selector placeholder@@account-statement.accounts-selector.placeholder\"\n  >\n  </bb-account-selector-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementAccountSelectorCustomizableDirective; }), selector: "[bbAccountStatementAccountSelectorCustomizableDirective]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-account-selector',
                    templateUrl: './account-statement-account-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { accounts: [{
                type: Input
            }], accountSelect: [{
                type: Output
            }] } });
class AccountStatementAccountSelectorCustomizableDirective extends BbTemplate {
}
AccountStatementAccountSelectorCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementAccountSelectorCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementAccountSelectorCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementAccountSelectorCustomizableDirective, selector: "[bbAccountStatementAccountSelectorCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementAccountSelectorCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementAccountSelectorCustomizableDirective]',
                }]
        }] });

/* eslint-disable @typescript-eslint/naming-convention */
// eslint-disable-next-line no-shadow
var LoadingState;
(function (LoadingState) {
    LoadingState["IDLE"] = "IDLE";
    LoadingState["LOADING"] = "LOADING";
    LoadingState["LOADING_MORE"] = "LOADING_MORE";
    LoadingState["LOADING_FILTERED"] = "LOADING_FILTERED";
    LoadingState["LOADING_TABLE"] = "LOADING_TABLE";
})(LoadingState || (LoadingState = {}));
/* eslint-enable @typescript-eslint/naming-convention */

/**
 * The first day Unix date: 01-01-1970
 */
const unixZeroDay = () => new Date(0);
const today = () => new Date(new Date().setHours(0, 0, 0, 0));
const getCurrentYear = () => today().getFullYear();
const getCurrentMonth = () => today().getMonth();
const currentDate = () => today().getDate();
const currentDay = () => today().getDay();
const normalizeDay = (day) => (day + 6) % 7;
const firstDayInLastMonth = () => new Date(getCurrentYear(), getCurrentMonth() - 1, 1);
const lastDayInLastMonth = () => new Date(today().setDate(0));
const firstDayInLastQuarter = () => new Date(getCurrentYear(), Math.floor(getCurrentMonth() / 3) * 3 - 3, 1);
const lastDayInLastQuarter = () => new Date(firstDayInLastQuarter().getFullYear(), firstDayInLastQuarter().getMonth() + 3, 0);
const firstDayInThisQuarter = () => new Date(getCurrentYear(), Math.floor(getCurrentMonth() / 3) * 3, 1);
const lastDayInThisQuarter = () => new Date(firstDayInThisQuarter().getFullYear(), firstDayInThisQuarter().getMonth() + 3, 0);
const firstDayInThisWeek = () => new Date(today().setDate(currentDate() - normalizeDay(currentDay())));
const lastDayInThisWeek = () => new Date(firstDayInThisWeek().setDate(firstDayInThisWeek().getDate() + 6));
const firstDayInLastWeek = () => new Date(today().setDate(currentDate() - 7 - normalizeDay(currentDay())));
const lastDayInLastWeek = () => new Date(firstDayInLastWeek().setDate(firstDayInLastWeek().getDate() + 6));
const firstDayInThisMonth = () => new Date(getCurrentYear(), getCurrentMonth(), 1);
const lastDayInThisMonth = () => new Date(getCurrentYear(), getCurrentMonth() + 1, 0);
const firstDayInThisYear = () => new Date(getCurrentYear(), 0, 1);
const lastDayInThisYear = () => new Date(getCurrentYear(), 11, 31);
/**
 * Convert Date object into {day, month, year} structure in order to be used with Datepicker component.
 * Note: Months in this structure are counted from 1.
 *
 * @param date  Date object to be converted.
 */
const convertDateObjToDateStruct = (date) => ({
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    day: date.getDate(),
});
/**
 * Convert the object of type NgbDateStruct into a Date object
 *
 * @param dateObj of type NgbDateStruct
 * @returns Date object
 */
const convertDateStructToDateObj = (dateStruct) => new Date(dateStruct.year, dateStruct.month - 1, dateStruct.day);
/**
 * Gives the number of months between two dates
 *
 * @param firstDate
 * @param secondDate
 * @returns number of months between firstDate and secondDate
 * @example getMonthDiff(new Date(2020, 1, 1), new Date(2020, 5, 1)); // 4
 */
const getMonthDiff = (firstDate, secondDate) => {
    const months = (secondDate.getFullYear() - firstDate.getFullYear()) * 12 - firstDate.getMonth() + secondDate.getMonth();
    return months <= 0 ? 0 : months;
};

/**
 * Validate if the given month limit is lies in between two dates
 *
 * @param number Number of months that will be validated
 * @param Date [from=new Date(0)] start range of the month limit
 * @param Date [to=new Date()] end range of the month limit
 * @returns boolean
 * @example isMonthLimitValid(5)
 */
const isMonthLimitValid = (month, from = new Date(0), to = new Date()) => month > 0 && month <= getMonthDiff(from, to);
/**
 * Validate if the date lies in between two dates
 *
 * @param number Number of months that will be validated
 * @param Date [from=new Date(0)] start range of the month limit
 * @param Date [to=new Date()] end range of the month limit
 * @returns boolean
 * @example isDateLimitValid('1994-10-20')
 */
const isDateLimitValid = (input, from = new Date(0), to = new Date()) => {
    const date = new Date(input);
    if (isNaN(date.getTime())) {
        return false;
    }
    return date >= from && date <= to;
};
/**
 * Validate if the date format is of type (yyyy-MM-dd, yyyy/MM/dd, yyyy.MM.dd)
 *
 * @param string input string
 * @returns boolean
 * @example isDateFormatValid('1994-10-20')
 */
const isDateFormatValid = (input) => {
    const formats = [
        /([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/,
        /([12]\d{3}\.(0[1-9]|1[0-2])\.(0[1-9]|[12]\d|3[01]))/,
        /([12]\d{3}\/(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01]))/,
    ];
    return formats.some(format => format.test(input));
};

/* eslint-disable @typescript-eslint/naming-convention */
// eslint-disable-next-line no-shadow
var PaginationType;
(function (PaginationType) {
    PaginationType["Pagination"] = "PAGINATION";
    PaginationType["LoadMore"] = "LOAD_MORE";
})(PaginationType || (PaginationType = {}));
/* eslint-enable @typescript-eslint/naming-convention */

const getFilenameFromHeaders = (headers) => {
    const contentDispositionHeader = headers.get('Content-Disposition') || '';
    const filenameRegexp = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
    const matches = contentDispositionHeader.match(filenameRegexp);
    let filename = '';
    if (!!matches && matches[1]) {
        filename = matches[1].replace(/['"]/g, '');
    }
    return filename;
};
const getTotalCountFromHeaders = (headers) => {
    const header = headers.get('x-total-count');
    return (header && parseInt(header, 10)) || 0;
};
const modelItemToBoolean = (value) => {
    if (typeof value === 'boolean') {
        return value;
    }
    return value === 'true';
};
const toInteger = (value) => {
    if ((typeof value === 'string' && /^\d+$/.test(value)) || typeof value === 'number') {
        return parseInt(value, 10) || 0;
    }
    return 0;
};
/**
 * Split string by delimiter (String or RegExp), /\s+/ by default.
 *
 * @param str String that needs to be split.
 * @param delimiter by which string needs to be split
 * @returns string[]
 * @example stringToWords('1cdb2224-8926-4b4d,1cdb2224-8926-4b92', ',')
 */
const stringToWords = (str, delimiter) => {
    if (!str) {
        return [];
    }
    return str.trim().split(delimiter || /\s+/);
};
const simpleArrayCompare = (a = [], b = []) => a.length !== b.length ? false : a.every((item, i) => b[i] === item);
const smartLoadingState = (prev, cur) => {
    if (prev.direction !== cur.direction ||
        prev.orderBy !== cur.orderBy ||
        (prev.from !== cur.from && cur.paginationType === PaginationType.Pagination)) {
        return LoadingState.LOADING_TABLE;
    }
    if (cur.from !== 0) {
        return LoadingState.LOADING_MORE;
    }
    if (prev.category !== cur.category || prev.dateFrom !== cur.dateFrom || prev.dateTo !== cur.dateTo) {
        return LoadingState.LOADING_FILTERED;
    }
    return LoadingState.LOADING;
};
/**
 * Choose limit date for Date filter field. By default, value should be zero day in Unix time.
 * If both absolute and relative limits are passed, absolute has precedent.
 *
 * @param absoluteDateLimit {string} Absolute date in format (yyyy-mm-dd)
 * @param relativeMonthLimit {number} Number of months in the past from present date.
 * @returns Date
 */
const getDateFilterLimit = (absoluteDateLimit = '', relativeMonthLimit = 0) => {
    let limitDate = unixZeroDay();
    if (isDateFormatValid(absoluteDateLimit) && isDateLimitValid(absoluteDateLimit)) {
        limitDate = new Date(absoluteDateLimit);
    }
    else if (absoluteDateLimit === '' && isMonthLimitValid(relativeMonthLimit)) {
        limitDate = new Date();
        limitDate.setMonth(limitDate.getMonth() - relativeMonthLimit);
    }
    return limitDate;
};
/**
 * Function to check if url contains querystring or not
 *
 * @param url {string} Url that needs to be checked
 * @returns boolean
 * @example isQueryStringExist('http://test.com?dateFrom=20-10-2020')
 */
const isQueryStringExist = (url) => {
    const pattern = new RegExp(/\?.+=.*/g);
    return pattern.test(url);
};

// @dynamic to suppress error with resolving Document type during compilation
class AccountStatementDomService {
    constructor(document) {
        this.document = document;
    }
    simulateLinkClick(attributes = {}, renderer) {
        const link = renderer.createElement('a');
        for (const [name, value] of Object.entries(attributes)) {
            link.setAttribute(name, value);
        }
        renderer.appendChild(this.document.body, link);
        link.click();
        renderer.removeChild(this.document.body, link);
    }
}
AccountStatementDomService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDomService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementDomService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDomService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDomService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });

// @dynamic to suppress error with resolving Window type during compilation
class AccountStatementDownloadDocDirective {
    constructor(domService, renderer) {
        this.domService = domService;
        this.renderer = renderer;
        /**
         * document item which is available for downloading
         */
        this.doc = {};
        /**
         * custom filename for document
         */
        this.filename = '';
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.downloadFailure = new EventEmitter();
    }
    onClick() {
        this.downloadDoc(this.doc);
    }
    downloadDoc(doc) {
        if (doc.url) {
            const url = isQueryStringExist(doc.url) ? `${doc.url}&inline=false` : `${doc.url}?inline=false`;
            this.domService.simulateLinkClick({
                href: url,
            }, this.renderer);
        }
    }
}
AccountStatementDownloadDocDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadDocDirective, deps: [{ token: AccountStatementDomService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
AccountStatementDownloadDocDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadDocDirective, selector: "[bbAccountStatementDownloadDoc]", inputs: { doc: ["bbAccountStatementDownloadDoc", "doc"], filename: ["bbAccountStatementDownloadDocFilename", "filename"] }, outputs: { downloadFailure: "bbAccountStatementDownloadDocFailure" }, host: { listeners: { "click": "onClick()", "keydown.enter": "onClick()", "keydown.space": "onClick()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadDocDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementDownloadDoc]',
                }]
        }], ctorParameters: function () { return [{ type: AccountStatementDomService }, { type: i0.Renderer2 }]; }, propDecorators: { doc: [{
                type: Input,
                args: ['bbAccountStatementDownloadDoc']
            }], filename: [{
                type: Input,
                args: ['bbAccountStatementDownloadDocFilename']
            }], downloadFailure: [{
                type: Output,
                args: ['bbAccountStatementDownloadDocFailure']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['keydown.enter']
            }, {
                type: HostListener,
                args: ['keydown.space']
            }] } });

class AccountStatementDownloadsComponent {
    constructor() {
        this.documents = [];
        this.mimeTypeExtensions = {};
        this.downloadFailure = new EventEmitter();
        this.describedByElementId = '';
        /**
         * Position where tooltip will be displayed relative to the button element.
         *
         * @default 'top'
         */
        this.tooltipPlacement = 'top';
    }
    onDownloadDocFailure(error) {
        this.downloadFailure.emit(error);
    }
}
AccountStatementDownloadsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountStatementDownloadsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadsComponent, selector: "bb-account-statement-downloads", inputs: { documents: "documents", mimeTypeExtensions: "mimeTypeExtensions", describedByElementId: "describedByElementId", tooltipPlacement: "tooltipPlacement" }, outputs: { downloadFailure: "downloadFailure" }, ngImport: i0, template: "<ng-container\n  bbAccountStatementDownloadsCustomizableDirective\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    documents: documents,\n    mimeTypeExtensions: mimeTypeExtensions\n  }\"\n>\n</ng-container>\n\n<ng-template\n  bbAccountStatementDownloadsCustomizableDirective\n  let-hostRef\n  let-documents=\"context.documents\"\n  let-mimeTypeExtensions=\"context.mimeTypeExtensions\"\n>\n  <ng-container *ngIf=\"documents.length; else emptyState\">\n    <div\n      *ngIf=\"documents.length === 1; else documentsToDownload\"\n      triggers=\"hover focus\"\n      [bbTooltip]=\"singleDownloadTooltip\"\n      [placement]=\"hostRef.tooltipPlacement\"\n    >\n      <button\n        bbButton\n        color=\"link\"\n        [circle]=\"true\"\n        aria-label=\"Download one available format\"\n        i18n-aria-label=\"Download one available format@@account-statement.download-one-format.aria-label\"\n        [attr.aria-describedby]=\"hostRef.describedByElementId\"\n        [bbAccountStatementDownloadDoc]=\"documents[0]\"\n        (bbAccountStatementDownloadDocFailure)=\"hostRef.onDownloadDocFailure($event)\"\n        data-role=\"download-one\"\n      >\n        <bb-icon-ui name=\"get-app\" size=\"md\"></bb-icon-ui>\n      </button>\n    </div>\n\n    <ng-template #singleDownloadTooltip>\n      <ng-container\n        *ngIf=\"mimeTypeExtensions[documents[0].contentType]; else singleDownloadTooltipNoExtension\"\n        i18n=\"Tooltip for download single file button@@account-statement.single.download.tooltip\"\n      >\n        Download - {{ mimeTypeExtensions[documents[0].contentType] }}\n      </ng-container>\n\n      <ng-template\n        #singleDownloadTooltipNoExtension\n        i18n=\"\n          File|Tooltip for download button of single file that does not have standard file\n          extension@@account-statement.single.download.tooltip.unknown-extension\"\n      >\n        Download - File\n      </ng-template>\n    </ng-template>\n\n    <ng-template #documentsToDownload>\n      <div\n        triggers=\"hover focus\"\n        [placement]=\"hostRef.tooltipPlacement\"\n        bbTooltip=\"Show downloads actions\"\n        i18n-bbTooltip=\"\n          Show downloads actions for tooltip with provided description@@account-statement.download.dropdown-menu.tooltip\"\n      >\n        <bb-dropdown-menu-ui\n          [attr.data-role]=\"'as-dropdown-menu'\"\n          icon=\"get-app\"\n          btnColor=\"link\"\n          [btnCircle]=\"true\"\n          container=\"body\"\n          dropDownButtonLabel=\"Show download actions\"\n          i18n-dropDownButtonLabel=\"\n            Show download actions|Downloads dropdown menu aria label with provided\n            description@@account-statement.downloads.dropdown-menu.aria-label.no-description\"\n          [attr.aria-describedby]=\"hostRef.describedByElementId\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <a\n              *ngFor=\"let document of documents; index as index\"\n              rel=\"noopener\"\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"download-statement\"\n              href=\"\"\n              (click)=\"$event.preventDefault()\"\n              [bbAccountStatementDownloadDoc]=\"document\"\n              (bbAccountStatementDownloadDocFailure)=\"hostRef.onDownloadDocFailure($event)\"\n            >\n              <span\n                *ngIf=\"mimeTypeExtensions[document.contentType]; else dropdownItemNoExtension\"\n                [attr.aria-labelledby]=\"'dropdown-item-download-file-' + document.uuid\"\n              >\n                {{ mimeTypeExtensions[document.contentType] }}\n              </span>\n\n              <ng-template\n                #dropdownItemNoExtension\n                i18n=\"\n                  Dropdown item to download file with unknown\n                  extension@@account-statement.downloads.downloads-as.no-extension-file\"\n              >\n                File {{ index + 1 }}\n              </ng-template>\n\n              <div id=\"dropdown-item-download-file-{{ document.uuid }}\" class=\"sr-only\">\n                <span\n                  *ngIf=\"mimeTypeExtensions[document.contentType]; else dropdownItemAriaLabelNoExtension\"\n                  i18n=\"Download file with specific extension@@account-statement.downloads.downloads-as.aria-label\"\n                >\n                  Download as {{ mimeTypeExtensions[document.contentType] }}\n                </span>\n\n                <ng-template\n                  #dropdownItemAriaLabelNoExtension\n                  i18n=\"Download file with unknown extension@@account-statement.downloads.downloads-unknown.aria-label\"\n                >\n                  Download unknown extension file {{ index + 1 }}\n                </ng-template>\n              </div>\n            </a>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #emptyState>\n    <div\n      triggers=\"hover focus\"\n      placement=\"bottom\"\n      bbTooltip=\"Download is not supported for this statement, please contact the bank\"\n      i18n-bbTooltip=\"Downloads are empty tooltip@@account-statement.downloads.empty-state.tooltip\"\n    >\n      <bb-icon-ui\n        [attr.data-role]=\"'empty-state'\"\n        name=\"warning\"\n        color=\"warning\"\n        tabindex=\"0\"\n        [attr.aria-describedby]=\"hostRef.describedByElementId\"\n      ></bb-icon-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementDownloadsCustomizableDirective; }), selector: "[bbAccountStatementDownloadsCustomizableDirective]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i5.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return AccountStatementDownloadDocDirective; }), selector: "[bbAccountStatementDownloadDoc]", inputs: ["bbAccountStatementDownloadDoc", "bbAccountStatementDownloadDocFilename"], outputs: ["bbAccountStatementDownloadDocFailure"] }, { type: i0.forwardRef(function () { return i2.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-downloads',
                    templateUrl: './account-statement-downloads.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { documents: [{
                type: Input
            }], mimeTypeExtensions: [{
                type: Input
            }], downloadFailure: [{
                type: Output
            }], describedByElementId: [{
                type: Input
            }], tooltipPlacement: [{
                type: Input
            }] } });
class AccountStatementDownloadsCustomizableDirective extends BbTemplate {
}
AccountStatementDownloadsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementDownloadsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadsCustomizableDirective, selector: "[bbAccountStatementDownloadsCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementDownloadsCustomizableDirective]',
                }]
        }] });

class AccountStatementViewOnlineComponent {
    constructor(domService, renderer) {
        this.domService = domService;
        this.renderer = renderer;
        this.href = '/';
        this.describedByElementId = '';
    }
    viewOnline() {
        this.domService.simulateLinkClick({
            target: '_blank',
            href: this.href,
        }, this.renderer);
    }
}
AccountStatementViewOnlineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementViewOnlineComponent, deps: [{ token: AccountStatementDomService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementViewOnlineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementViewOnlineComponent, selector: "bb-account-statement-view-online", inputs: { href: "href", describedByElementId: "describedByElementId" }, ngImport: i0, template: "<div\n  triggers=\"hover focus\"\n  bbTooltip=\"Preview\"\n  i18n-bbTooltip=\"Preview|Tooltip text for preview button@@account-statement.preview.tooltip-simple\"\n>\n  <button\n    bbButton\n    color=\"link\"\n    [circle]=\"true\"\n    aria-label=\"View online\"\n    i18n-aria-label=\"View online link aria label@@account-statement.view-online.aria-label\"\n    [attr.aria-describedby]=\"describedByElementId\"\n    (click)=\"viewOnline()\"\n    data-role=\"view-online\"\n  >\n    <bb-icon-ui name=\"open-in-new\"></bb-icon-ui>\n  </button>\n</div>\n", components: [{ type: i1$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementViewOnlineComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-view-online',
                    templateUrl: './account-statement-view-online.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: AccountStatementDomService }, { type: i0.Renderer2 }]; }, propDecorators: { href: [{
                type: Input
            }], describedByElementId: [{
                type: Input
            }] } });

const EMPTY_RESPONSE_ERROR = new Error('Response body not set');

/* eslint-disable @typescript-eslint/naming-convention */
// eslint-disable-next-line no-shadow
var HttpObserveType;
(function (HttpObserveType) {
    HttpObserveType["BODY"] = "body";
    HttpObserveType["RESPONSE"] = "response";
    HttpObserveType["EVENT"] = "event";
})(HttpObserveType || (HttpObserveType = {}));
/* eslint-enable @typescript-eslint/naming-convention */

const getArrangementsRequiredParams = {
    businessFunction: 'Product Summary',
    resourceName: 'Product Summary',
    privilege: 'view',
};
const isNonNullableHttpResponse = (response) => 
// eslint-disable-next-line no-null/no-null
response.body !== null;
class AccountStatementDataService {
    constructor(productSummaryHttpService, accountStatementsHttpService, http, locale) {
        this.productSummaryHttpService = productSummaryHttpService;
        this.accountStatementsHttpService = accountStatementsHttpService;
        this.http = http;
        this.locale = locale;
    }
    getAccounts(params) {
        return this.productSummaryHttpService
            .getArrangementsByBusinessFunction(Object.assign(Object.assign(Object.assign({}, getArrangementsRequiredParams), { favoriteFirst: true }), params), HttpObserveType.RESPONSE)
            .pipe(switchMap(response => (isNonNullableHttpResponse(response) ? of(response) : throwError(EMPTY_RESPONSE_ERROR))));
    }
    getAccountStatementsBusiness(params) {
        return this.accountStatementsHttpService
            .postAccountStatements(params, HttpObserveType.RESPONSE)
            .pipe(switchMap(response => isNonNullableHttpResponse(response) && Array.isArray(response.body)
            ? of(response)
            : throwError(EMPTY_RESPONSE_ERROR)));
    }
    loadAccounts() {
        return this.productSummaryHttpService
            .getArrangementsByBusinessFunction(getArrangementsRequiredParams, HttpObserveType.RESPONSE)
            .pipe(map(response => this.processAccountsRawData(response.body)));
    }
    loadCategories() {
        return this.accountStatementsHttpService.getCategories(HttpObserveType.RESPONSE).pipe(map(({ body }) => {
            // eslint-disable-next-line no-null/no-null
            if (body === null) {
                throw new Error('Response does not contain body');
            }
            return body.categories;
        }));
    }
    loadAccountStatements(params = {}) {
        return this.accountStatementsHttpService
            .getAccountStatements(this.formatAccountStatementsParams(params), HttpObserveType.RESPONSE)
            .pipe(map((response) => this.processAccountStatementsRawData(response)));
    }
    getAccountStatementDownloadUrl(uid) {
        return this.accountStatementsHttpService.downloadAccountStatementsUrl({ uid });
    }
    downloadFile(url) {
        return this.http.get(url, {
            responseType: 'arraybuffer',
            observe: 'response',
        });
    }
    processAccountsRawData(rawData) {
        return (rawData &&
            rawData.map((account) => ({
                id: account.id,
                name: account.bankAlias || account.name,
                identifier: account.IBAN || account.BBAN || account.productNumber,
                amount: account.availableBalance,
                currency: account.currency,
            })));
    }
    processAccountStatementsRawData(rawData) {
        const totalCount = (rawData && parseInt(String(rawData.headers.get('x-total-count')), 10)) || 0;
        return {
            data: rawData && rawData.body,
            totalCount,
        };
    }
    formatBookDate(date) {
        return formatDate(new Date(date), 'yyyy-MM-dd', this.locale);
    }
    formatAccountStatementsParams(params) {
        const { dateFrom, dateTo } = params;
        return Object.assign(Object.assign(Object.assign({}, params), (dateFrom && {
            dateFrom: this.formatBookDate(dateFrom),
        })), (dateTo && {
            dateTo: this.formatBookDate(dateTo),
        }));
    }
}
AccountStatementDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDataService, deps: [{ token: i1$2.ProductSummaryHttpService }, { token: i2$1.AccountStatementHttpService }, { token: i3$1.HttpClient }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.ProductSummaryHttpService }, { type: i2$1.AccountStatementHttpService }, { type: i3$1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class AccountStatementPaginationComponent {
    constructor() {
        /**
         * Event (Output) that emits when page prop is changed
         */
        this.pageChange = new EventEmitter();
        /**
         * Event (Output) that emits when load-more
         */
        this.loadMore = new EventEmitter();
        this.paginationTypeEnum = PaginationType;
    }
    onPageChange(page) {
        this.pageChange.emit(page);
    }
    onLoadMore(loadMoreParams) {
        if (!this.loading) {
            this.loadMore.emit(loadMoreParams.from);
        }
    }
}
AccountStatementPaginationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementPaginationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountStatementPaginationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementPaginationComponent, selector: "bb-account-statement-pagination", inputs: { page: "page", from: "from", count: "count", itemsPerPage: "itemsPerPage", paginationType: "paginationType", hasMore: "hasMore", loading: "loading" }, outputs: { pageChange: "pageChange", loadMore: "loadMore" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl bb-text-align-center\">\n  <bb-pagination-ui\n    *ngIf=\"paginationType === paginationTypeEnum.Pagination && (hasMore || (!!page && page > 0))\"\n    [page]=\"page || 0\"\n    [totalItems]=\"count || 0\"\n    [itemsPerPage]=\"itemsPerPage || 0\"\n    [boundaryLinks]=\"true\"\n    [directionLinks]=\"true\"\n    [maxNavPages]=\"3\"\n    (pageChange)=\"onPageChange($event)\"\n  >\n  </bb-pagination-ui>\n\n  <bb-load-button-ui\n    color=\"link\"\n    *ngIf=\"paginationType === paginationTypeEnum.LoadMore\"\n    [from]=\"page || 0\"\n    [size]=\"itemsPerPage || 0\"\n    [totalCount]=\"count || 0\"\n    [isLoading]=\"loading || false\"\n    (paramChange)=\"onLoadMore($event)\"\n    data-role=\"load-more-button\"\n  >\n    <span i18n=\"Load more|Load More button text@@accountStatement.list.load-more\">Load more</span>\n  </bb-load-button-ui>\n</div>\n", components: [{ type: i1$3.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i2$2.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementPaginationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-pagination',
                    templateUrl: './account-statement-pagination.component.html',
                }]
        }], propDecorators: { page: [{
                type: Input
            }], from: [{
                type: Input
            }], count: [{
                type: Input
            }], itemsPerPage: [{
                type: Input
            }], paginationType: [{
                type: Input
            }], hasMore: [{
                type: Input
            }], loading: [{
                type: Input
            }], pageChange: [{
                type: Output
            }], loadMore: [{
                type: Output
            }] } });

const components = [
    AccountStatementViewOnlineComponent,
    AccountStatementDownloadsComponent,
    AccountStatementAccountSelectorComponent,
    AccountStatementPaginationComponent,
];
const directives = [
    AccountStatementDownloadDocDirective,
    AccountStatementDownloadsCustomizableDirective,
    AccountStatementAccountSelectorCustomizableDirective,
];
const uiModules = [
    ButtonModule,
    DropdownMenuModule,
    IconModule,
    TooltipModule,
    AccountSelectorModule,
    LoadButtonModule,
    PaginationModule,
];
class AccountStatementCommonModule {
}
AccountStatementCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountStatementCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementCommonModule, declarations: [AccountStatementViewOnlineComponent,
        AccountStatementDownloadsComponent,
        AccountStatementAccountSelectorComponent,
        AccountStatementPaginationComponent, AccountStatementDownloadDocDirective,
        AccountStatementDownloadsCustomizableDirective,
        AccountStatementAccountSelectorCustomizableDirective], imports: [CommonModule, ButtonModule,
        DropdownMenuModule,
        IconModule,
        TooltipModule,
        AccountSelectorModule,
        LoadButtonModule,
        PaginationModule], exports: [AccountStatementViewOnlineComponent,
        AccountStatementDownloadsComponent,
        AccountStatementAccountSelectorComponent,
        AccountStatementPaginationComponent, AccountStatementDownloadDocDirective,
        AccountStatementDownloadsCustomizableDirective,
        AccountStatementAccountSelectorCustomizableDirective, ButtonModule,
        DropdownMenuModule,
        IconModule,
        TooltipModule,
        AccountSelectorModule,
        LoadButtonModule,
        PaginationModule] });
AccountStatementCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementCommonModule, providers: [AccountStatementDataService, AccountStatementDomService], imports: [[CommonModule, ...uiModules], ButtonModule,
        DropdownMenuModule,
        IconModule,
        TooltipModule,
        AccountSelectorModule,
        LoadButtonModule,
        PaginationModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules],
                    declarations: [...components, ...directives],
                    providers: [AccountStatementDataService, AccountStatementDomService],
                    exports: [...components, ...directives, ...uiModules],
                }]
        }] });

// @dynamic
// eslint-disable-next-line @angular-eslint/directive-class-suffix
class AccountStatementBaseWidgetComponent {
    constructor(propertiesService) {
        this.propertiesService = propertiesService;
    }
    /* eslint-disable @angular-eslint/no-input-rename */
    /**
     * Number of statements per page
     */
    set pageSizeValue(value) {
        this.propertiesService.setPageSize(value);
    }
    /**
     * Sorting order (date, description, category)
     */
    set sortingOrderValue(value) {
        this.propertiesService.setSortingOrder(value);
    }
    /**
     * Sorting direction (ASC, DESC)
     */
    set sortingDirectionValue(value) {
        this.propertiesService.setSortingDirection(value);
    }
    /**
     * Flag to show/hide categories
     */
    set showCategoryValue(value) {
        this.propertiesService.setShowCategory(value);
    }
    /* eslint-enable @angular-eslint/no-input-rename */
    /**
     * Notification dismiss time in seconds
     */
    set notificationDismissTime(value) {
        this.propertiesService.setNotificationDismissTime(value);
    }
    /**
     * Relative filter datepicker limit (months)
     */
    set relativeDateLimit(value) {
        this.propertiesService.setRelativeDateLimit(value);
    }
    /**
     * Absolute filter datepicker limit (yyyy-mm-dd)
     */
    set absoluteDateLimit(value) {
        this.propertiesService.setAbsoluteDateLimit(value);
    }
    /**
     * Pagination type (PAGINATION or LOAD_MORE)
     */
    set paginationType(value) {
        this.propertiesService.setPaginationType(value);
    }
}
AccountStatementBaseWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBaseWidgetComponent, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBaseWidgetComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBaseWidgetComponent, inputs: { pageSizeValue: ["pageSize", "pageSizeValue"], sortingOrderValue: ["sortingOrder", "sortingOrderValue"], sortingDirectionValue: ["sortingDirection", "sortingDirectionValue"], showCategoryValue: ["showCategory", "showCategoryValue"], notificationDismissTime: "notificationDismissTime", relativeDateLimit: "relativeDateLimit", absoluteDateLimit: "absoluteDateLimit", paginationType: "paginationType" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBaseWidgetComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined }]; }, propDecorators: { pageSizeValue: [{
                type: Input,
                args: ['pageSize']
            }], sortingOrderValue: [{
                type: Input,
                args: ['sortingOrder']
            }], sortingDirectionValue: [{
                type: Input,
                args: ['sortingDirection']
            }], showCategoryValue: [{
                type: Input,
                args: ['showCategory']
            }], notificationDismissTime: [{
                type: Input
            }], relativeDateLimit: [{
                type: Input
            }], absoluteDateLimit: [{
                type: Input
            }], paginationType: [{
                type: Input
            }] } });

const secondsToMilliseconds = (seconds) => seconds * 1000;

const DEFAULT_NOTIFICATION_DISMISS_TIME = 5;
const DEFAULT_PAGE_SIZE = 24;
const widgetPropertyNames = {
    /* eslint-disable @typescript-eslint/naming-convention */
    PAGE_SIZE: 'bb.accountStatement.pageSize',
    SORTING_ORDER: 'bb.accountStatement.sortingOrder',
    SORTING_DIRECTION: 'bb.accountStatement.sortingDirection',
    RELATIVE_DATE_LIMIT: 'bb.accountStatement.relativeDateLimit',
    ABSOLUTE_DATE_LIMIT: 'bb.accountStatement.absoluteDateLimit',
    NOTIFICATION_DISMISS_TIME: 'notificationDismissTime',
    SHOW_CATEGORY: 'bb.accountStatement.showCategory',
    /* eslint-enable @typescript-eslint/naming-convention */
};
let AccountStatementBasePropertiesService = class AccountStatementBasePropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
        /* eslint-disable @typescript-eslint/member-ordering */
        this.pageSize$$ = new BehaviorSubject(undefined);
        this.sortingOrder$$ = new BehaviorSubject(undefined);
        this.sortingDirection$$ = new BehaviorSubject(undefined);
        this.relativeDateLimit$$ = new BehaviorSubject(undefined);
        this.absoluteDateLimit$$ = new BehaviorSubject(undefined);
        this.paginationType$$ = new BehaviorSubject(undefined);
        this.notificationDismissTime$$ = new BehaviorSubject(undefined);
        this.showCategory$$ = new BehaviorSubject(undefined);
        this.pageSize$ = this.getWidgetProperty$(this.pageSize$$, this.pageSizeIM$);
        this.sortingOrder$ = this.getWidgetProperty$(this.sortingOrder$$, this.sortingOrderIM$);
        this.sortingDirection$ = this.getWidgetProperty$(this.sortingDirection$$, this.sortingDirectionIM$);
        this.relativeDateLimit$ = this.getWidgetProperty$(this.relativeDateLimit$$, this.relativeDateLimitIM$);
        this.absoluteDateLimit$ = this.getWidgetProperty$(this.absoluteDateLimit$$, this.absoluteDateLimitIM$);
        this.paginationType$ = this.getWidgetProperty$(this.paginationType$$, this.getPaginationTypeIM$());
        this.notificationDismissTime$ = this.getWidgetProperty$(this.notificationDismissTime$$, this.notificationDismissTimePropertyIM$).pipe(map(secondsToMilliseconds));
        this.showCategory$ = this.getWidgetProperty$(this.showCategory$$, this.showCategoryIM$);
    }
    /* eslint-enable @typescript-eslint/member-ordering */
    setPaginationType(value) {
        this.paginationType$$.next(value);
    }
    setPageSize(value) {
        this.pageSize$$.next(value);
    }
    setSortingOrder(value) {
        this.sortingOrder$$.next(value);
    }
    setSortingDirection(value) {
        this.sortingDirection$$.next(value);
    }
    setNotificationDismissTime(value) {
        this.notificationDismissTime$$.next(value);
    }
    setRelativeDateLimit(value) {
        this.relativeDateLimit$$.next(value);
    }
    setAbsoluteDateLimit(value) {
        this.absoluteDateLimit$$.next(value);
    }
    setShowCategory(value) {
        this.showCategory$$.next(value);
    }
    getWidgetProperty$(property$, propertyIM$) {
        return combineLatest([property$, propertyIM$]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    get pageSizeIM$() {
        var _a;
        const defaultValue = DEFAULT_PAGE_SIZE;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.PAGE_SIZE, defaultValue).pipe(map(toInteger))) || of(defaultValue));
    }
    get sortingOrderIM$() {
        var _a;
        const defaultValue = 'date';
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.SORTING_ORDER, defaultValue)) || of(defaultValue);
    }
    get sortingDirectionIM$() {
        var _a;
        const defaultValue = AccountStatementsPostRequest.DirectionEnum.DESC;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.SORTING_DIRECTION, defaultValue)) || of(defaultValue);
    }
    get relativeDateLimitIM$() {
        var _a;
        const defaultValue = 0;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.RELATIVE_DATE_LIMIT, defaultValue).pipe(map(toInteger))) ||
            of(defaultValue));
    }
    get absoluteDateLimitIM$() {
        var _a;
        const defaultValue = '';
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.ABSOLUTE_DATE_LIMIT, defaultValue)) || of(defaultValue);
    }
    get notificationDismissTimePropertyIM$() {
        var _a;
        const defaultValue = DEFAULT_NOTIFICATION_DISMISS_TIME;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.NOTIFICATION_DISMISS_TIME, defaultValue).pipe(map(Number), map(num => (isNaN(num) ? DEFAULT_NOTIFICATION_DISMISS_TIME : num)))) || of(defaultValue));
    }
    get showCategoryIM$() {
        var _a;
        const defaultValue = true;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.SHOW_CATEGORY, defaultValue).pipe(map(modelItemToBoolean))) ||
            of(defaultValue));
    }
};
AccountStatementBasePropertiesService = __decorate([
    __param(0, Optional())
], AccountStatementBasePropertiesService);

const DEFAULT_JOURNEY_CONFIGURATION = {
    absoluteDateLimit: '',
    notificationDismissTime: 5,
    paginationType: PaginationType.LoadMore,
    pageSize: 24,
    relativeDateLimit: 0,
    sortingDirection: 'DESC',
    sortingOrder: 'date',
    showCategory: true,
};

/**
 * Abstract class for all the journeys that require common configuration
 *
 * @template T - Type of the configuration object for journey
 * @internal
 */
class JourneyConfigurationService {
    /**
     * Create new instance of journey service
     *
     * @param staticConfigOverrides new configuration object provided by concrete class
     */
    constructor(staticConfigOverrides) {
        this.staticConfig = Object.assign(Object.assign({}, DEFAULT_JOURNEY_CONFIGURATION), staticConfigOverrides);
    }
    /** Absolute filter datepicker limit (yyyy-mm-dd)
     *
     * @defaultValue ''
     * @returns An observable of string
     */
    get absoluteDateLimit() {
        return of(this.staticConfig.absoluteDateLimit);
    }
    /**
     * Notification dismiss time in seconds (defaults to 5)
     *
     * @defaultValue 5
     * @returns An observable of number
     */
    get notificationDismissTime() {
        return of(this.staticConfig.notificationDismissTime);
    }
    /**
     * PaginationType will decide whether the user will see load more or page number style pagination
     *
     * @defaultValue `PaginationType.LOAD_MORE`
     * @returns An observable of PaginationType enum
     */
    get paginationType() {
        return of(this.staticConfig.paginationType);
    }
    /**
     * Number of items to be fetched in single request
     *
     * @defaultValue 10
     * @returns An observable of number
     */
    get pageSize() {
        return of(this.staticConfig.pageSize);
    }
    /**
     * Relative filter datepicker limit (months)
     *
     * @defaultValue 0
     * @returns An observable of number
     */
    get relativeDateLimit() {
        return of(this.staticConfig.relativeDateLimit);
    }
    /**
     * Sorting direction (ASC, DESC)
     *
     * @defaultValue DESC
     * @returns a string
     */
    get sortingDirection() {
        return of(this.staticConfig.sortingDirection);
    }
    /**
     * Sorting order (date, description, category)
     *
     * @defaultValue date
     * @returns a string
     */
    get sortingOrder() {
        return of(this.staticConfig.sortingOrder);
    }
    /**
     * Show category
     *
     * @defaultValue true
     * @returns An observable of boolean
     */
    get showCategory() {
        return of(this.staticConfig.showCategory);
    }
}

const mimeTypeExtensions = {
    'application/pdf': 'PDF',
    'text/csv': 'CSV',
    'text/plain': 'TXT',
    'application/rtf': 'RTF',
    'application/msword': 'DOC',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'DOC',
    'application/vnd.ms-excel': 'XLS',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'XLS',
    'application/xml': 'XML',
    'image/png': 'PNG',
    'image/jpeg': 'JPG',
    'image/gif': 'GIF',
    'image/tiff': 'TIFF',
    'binary/octet-stream': 'File',
};

const ACCOUNTS_REQUEST_ALL_SIZE = 9999;

/* eslint-disable @typescript-eslint/naming-convention */
// eslint-disable-next-line no-shadow
var DatePeriods;
(function (DatePeriods) {
    DatePeriods["Today"] = "Today";
    DatePeriods["Yesterday"] = "Yesterday";
    DatePeriods["ThisWeek"] = "This week";
    DatePeriods["LastWeek"] = "Last week";
    DatePeriods["ThisMonth"] = "This month";
    DatePeriods["LastMonth"] = "Last month";
    DatePeriods["ThisQuarter"] = "This quarter";
    DatePeriods["LastQuarter"] = "Last quarter";
    DatePeriods["ThisYear"] = "This year";
    DatePeriods["AllTime"] = "All time";
})(DatePeriods || (DatePeriods = {}));
/* eslint-enable @typescript-eslint/naming-convention */

const CUSTOM_FILTER_PERIODS_VALUES = {
    [DatePeriods.AllTime]: () => ({
        from: undefined,
        to: undefined,
    }),
    [DatePeriods.Today]: () => ({
        from: today(),
        to: today(),
    }),
    [DatePeriods.Yesterday]: () => ({
        from: new Date(today().setDate(today().getDate() - 1)),
        to: new Date(today().setDate(today().getDate() - 1)),
    }),
    [DatePeriods.ThisWeek]: () => ({
        from: firstDayInThisWeek(),
        to: today(),
    }),
    [DatePeriods.LastWeek]: () => ({
        from: firstDayInLastWeek(),
        to: lastDayInLastWeek(),
    }),
    [DatePeriods.ThisMonth]: () => ({
        from: firstDayInThisMonth(),
        to: today(),
    }),
    [DatePeriods.LastMonth]: () => ({
        from: firstDayInLastMonth(),
        to: lastDayInLastMonth(),
    }),
    [DatePeriods.ThisQuarter]: () => ({
        from: firstDayInThisQuarter(),
        to: today(),
    }),
    [DatePeriods.LastQuarter]: () => ({
        from: firstDayInLastQuarter(),
        to: lastDayInLastQuarter(),
    }),
    [DatePeriods.ThisYear]: () => ({
        from: firstDayInThisYear(),
        to: today(),
    }),
};

const accountStatementsResponseMock = [
    {
        accountId: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',
        accountName: 'The Walt Disney Company',
        accountNumber: 'UA85 3996 2200 0000 0260 0123 3566 1',
        date: '2016-02-15',
        category: 'Credit Card',
        description: 'Credit Card statement - February 2016',
        documents: [
            {
                url: 'http://server.com/documentsdepo/uid_1',
                contentType: 'application/pdf',
            },
        ],
    },
    {
        accountId: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',
        accountName: 'The Walt Disney Company',
        accountNumber: 'UA85 3996 2200 0000 0260 0123 3566 1',
        date: '2016-03-15',
        category: 'Credit Card',
        description: 'Credit Card statement - March 2016',
        documents: [
            {
                uid: 'uid_2',
                contentType: 'application/pdf',
            },
        ],
    },
    {
        accountId: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',
        accountName: 'The Walt Disney Company',
        accountNumber: 'UA85 3996 2200 0000 0260 0123 3566 1',
        date: '2016-04-15',
        category: 'Credit Card',
        description: 'Credit Card statement - April 2016',
        documents: [
            {
                uid: 'uid_3',
                contentType: 'application/pdf',
            },
        ],
    },
    {
        accountId: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',
        accountName: 'The Walt Disney Company',
        accountNumber: 'UA85 3996 2200 0000 0260 0123 3566 1',
        date: '2016-05-15',
        category: 'Credit Card',
        description: 'Credit Card statement - May 2016',
        documents: [
            {
                url: 'http://server.com/documentsdepo/uid_4',
                contentType: 'application/pdf',
            },
        ],
    },
    {
        accountId: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',
        accountName: 'The Walt Disney Company',
        accountNumber: 'UA85 3996 2200 0000 0260 0123 3566 1',
        date: '2016-06-15',
        category: 'Credit Card',
        description: 'Credit Card statement - June 2016',
        documents: [
            {
                uid: 'uid_5',
                contentType: 'application/pdf',
            },
        ],
    },
];

const accountsResponseMock = [
    {
        id: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4691',
        externalArrangementId: 'bcf10f4d-4b2f-4413-9bab-31ff693608b5',
        externalLegalEntityId: 'c7a382786d514262b75ab9531b749a2b',
        externalProductId: 'fade7867-533e-465e-90cb-e41675c54400',
        name: 'Mr and Mrs J. Smith',
        bankAlias: 'Our joined account',
        sourceId: 'LJBASI2XXXX',
        bookedBalance: 1000,
        availableBalance: 1500,
        creditLimit: 442.12,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        IBAN: 'CY3887370130MJFTJ3B8Y9W7IGRO',
        // eslint-disable-next-line @typescript-eslint/naming-convention
        BBAN: '8873701303897',
        currency: 'AED',
        externalTransferAllowed: true,
        urgentTransferAllowed: true,
        accruedInterest: 0.54,
        // eslint-disable-next-line id-blacklist
        number: 'PANS',
        principalAmount: 620.54,
        currentInvestmentValue: 0.16,
        legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],
        productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',
        productNumber: 'ffdd939c-ac4a-4441-ae47-70a7259899e7',
        productKindName: 'Current Account',
        productTypeName: 'Current Account',
        // eslint-disable-next-line @typescript-eslint/naming-convention
        BIC: 'AABAFI22',
        bankBranchCode: 'bankBranchCode',
        visible: false,
        accountOpeningDate: '2016-01-28T16:41:41.090Z',
        accountInterestRate: 100.2,
        valueDateBalance: 100.1,
        creditLimitUsage: 100.3,
        creditLimitInterestRate: 100.4,
        creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',
        startDate: '2016-02-28T16:41:41.090Z',
        termUnit: 'Y',
        termNumber: 50,
        interestPaymentFrequencyUnit: 'M',
        interestPaymentFrequencyNumber: 15,
        maturityDate: '2017-02-28T16:41:41.090Z',
        maturityAmount: 99.5,
        autoRenewalIndicator: true,
        interestSettlementAccount: 'interestSettlementAccount1',
        outstandingPrincipalAmount: 100.2,
        monthlyInstalmentAmount: 100.1,
        amountInArrear: 100.3,
        minimumRequiredBalance: 80.4,
        creditCardAccountNumber: '123456',
        validThru: '2019-02-28T16:41:41.090Z',
        applicableInterestRate: 101.2,
        remainingCredit: 50,
        outstandingPayment: 105.5,
        minimumPayment: 51.1,
        minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',
        totalInvestmentValue: 110.2,
        debitCards: [
            {
                // eslint-disable-next-line id-blacklist
                number: '4578',
                expiryDate: '2020-08-22',
                cardId: 'id1',
                cardholderName: 'John Doe',
                cardType: 'Visa Electron',
                cardStatus: 'Active',
            },
            {
                // eslint-disable-next-line id-blacklist
                number: '3241',
                expiryDate: '2019-01-14',
                cardId: 'id2',
                cardholderName: 'John Doe',
                cardType: 'Visa',
                cardStatus: 'Active',
            },
        ],
        accountHolderAddressLine1: 'accountHolderAddressLine11',
        accountHolderAddressLine2: 'accountHolderAddressLine12',
        accountHolderStreetName: 'accountHolderStreetName1',
        town: 'Paris',
        postCode: '2000',
        countrySubDivision: 'countrySubDivision1',
        accountHolderNames: 'Danthe Mohr',
        accountHolderCountry: 'FR',
        creditAccount: true,
        debitAccount: true,
        lastUpdateDate: '2016-01-28T16:41:41.090Z',
        favorite: true,
        userPreferences: {
            alias: 'Our joined account',
            visible: true,
            favorite: false,
        },
        product: {
            externalId: 'externalProductidId',
            externalTypeId: 'externalProductTypeId',
            typeName: 'Current Account',
            productKind: {
                id: 1,
                externalKindId: 'kind1',
                kindName: 'Current Account',
                kindUri: 'current-account',
            },
        },
        state: {
            externalStateId: 'externalStateId1',
            state: 'Active',
        },
    },
    {
        id: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4692',
        externalArrangementId: 'bcf10f4d-4b2f-4413-9bab-31ff693608b5',
        externalLegalEntityId: 'c7a382786d514262b75ab9531b749a2b',
        externalProductId: 'fade7867-533e-465e-90cb-e41675c54400',
        name: 'Howlin Wolf',
        bankAlias: 'Royalties account',
        sourceId: 'LJBASI2XXXX',
        bookedBalance: 15000,
        availableBalance: 21500,
        creditLimit: 3442.12,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        IBAN: 'GB60OHSF29521903589133',
        // eslint-disable-next-line @typescript-eslint/naming-convention
        BBAN: '029521903589133',
        currency: 'AED',
        externalTransferAllowed: true,
        urgentTransferAllowed: true,
        accruedInterest: 0.54,
        // eslint-disable-next-line id-blacklist
        number: 'PANS',
        principalAmount: 620.54,
        currentInvestmentValue: 0.16,
        legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],
        productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',
        productNumber: 'ffdd939c-ac4a-4441-ae47-70a7259899e7',
        productKindName: 'Current Account',
        productTypeName: 'Current Account',
        // eslint-disable-next-line @typescript-eslint/naming-convention
        BIC: 'AABAFI22',
        bankBranchCode: 'bankBranchCode',
        visible: false,
        accountOpeningDate: '2016-01-28T16:41:41.090Z',
        accountInterestRate: 100.2,
        valueDateBalance: 100.1,
        creditLimitUsage: 100.3,
        creditLimitInterestRate: 100.4,
        creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',
        startDate: '2016-02-28T16:41:41.090Z',
        termUnit: 'Y',
        termNumber: 50,
        interestPaymentFrequencyUnit: 'M',
        interestPaymentFrequencyNumber: 15,
        maturityDate: '2017-02-28T16:41:41.090Z',
        maturityAmount: 99.5,
        autoRenewalIndicator: true,
        interestSettlementAccount: 'interestSettlementAccount1',
        outstandingPrincipalAmount: 100.2,
        monthlyInstalmentAmount: 100.1,
        amountInArrear: 100.3,
        minimumRequiredBalance: 80.4,
        creditCardAccountNumber: '123456',
        validThru: '2019-02-28T16:41:41.090Z',
        applicableInterestRate: 101.2,
        remainingCredit: 50,
        outstandingPayment: 105.5,
        minimumPayment: 51.1,
        minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',
        totalInvestmentValue: 110.2,
        debitCards: [
            {
                // eslint-disable-next-line id-blacklist
                number: '4578',
                expiryDate: '2020-08-22',
                cardId: 'id1',
                cardholderName: 'John Doe',
                cardType: 'Visa Electron',
                cardStatus: 'Active',
            },
            {
                // eslint-disable-next-line id-blacklist
                number: '3241',
                expiryDate: '2019-01-14',
                cardId: 'id2',
                cardholderName: 'John Doe',
                cardType: 'Visa',
                cardStatus: 'Active',
            },
        ],
        accountHolderAddressLine1: 'accountHolderAddressLine11',
        accountHolderAddressLine2: 'accountHolderAddressLine12',
        accountHolderStreetName: 'accountHolderStreetName1',
        town: 'Skopje',
        postCode: '2000',
        countrySubDivision: 'countrySubDivision1',
        accountHolderNames: 'Toso Malerot',
        accountHolderCountry: 'MK',
        creditAccount: true,
        debitAccount: true,
        lastUpdateDate: '2016-01-28T16:41:41.090Z',
        favorite: true,
        userPreferences: {
            alias: 'Royalties account',
            visible: true,
            favorite: false,
        },
        product: {
            externalId: 'externalProductidId',
            externalTypeId: 'externalProductTypeId',
            typeName: 'Current Account',
            productKind: {
                id: 1,
                externalKindId: 'kind1',
                kindName: 'Current Account',
                kindUri: 'current-account',
            },
        },
        state: {
            externalStateId: 'externalStateId2',
            state: 'InActive',
        },
    },
    {
        id: '3cdb2224-8926-4b4d-a99f-1c9dfbbb4600',
        externalArrangementId: 'bcf10f4d-4b2f-4413-9bab-31ff693608b5',
        externalLegalEntityId: 'c7a382786d514262b75ab9531b749a2b',
        externalProductId: 'fade7867-533e-465e-90cb-e41675c54400',
        name: 'Company saving account',
        bankAlias: 'Langosh, Okuneva and Spencer',
        sourceId: 'LJBASI2XXXX',
        bookedBalance: 10550000,
        availableBalance: 1500,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        IBAN: 'IT09R0442267398V9QB48EV3THQ',
        // eslint-disable-next-line @typescript-eslint/naming-convention
        BBAN: '904422673989483',
        currency: 'EUR',
        externalTransferAllowed: true,
        urgentTransferAllowed: true,
        accruedInterest: 36.16,
        // eslint-disable-next-line id-blacklist
        number: 'PANS',
        principalAmount: 620.54,
        currentInvestmentValue: 0.16,
        legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],
        productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',
        productNumber: 'ffdd939c-ac4a-4441-ae47-70a7259899e7',
        productKindName: 'Savings Account',
        productTypeName: 'productTypeName',
        // eslint-disable-next-line @typescript-eslint/naming-convention
        BIC: 'AABAFI22',
        bankBranchCode: 'bankBranchCode',
        visible: false,
        accountOpeningDate: '2016-01-28T16:41:41.090Z',
        accountInterestRate: 100.2,
        valueDateBalance: 100.1,
        creditLimitUsage: 100.3,
        creditLimitInterestRate: 100.4,
        creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',
        startDate: '2016-02-28T16:41:41.090Z',
        termUnit: 'Y',
        termNumber: 50,
        interestPaymentFrequencyUnit: 'M',
        interestPaymentFrequencyNumber: 15,
        maturityDate: '2017-02-28T16:41:41.090Z',
        maturityAmount: 99.5,
        autoRenewalIndicator: true,
        interestSettlementAccount: 'interestSettlementAccount1',
        outstandingPrincipalAmount: 100.2,
        monthlyInstalmentAmount: 100.1,
        amountInArrear: 100.3,
        minimumRequiredBalance: 80.4,
        creditCardAccountNumber: '123456',
        validThru: '2019-02-28T16:41:41.090Z',
        applicableInterestRate: 101.2,
        remainingCredit: 50,
        outstandingPayment: 105.5,
        minimumPayment: 51.1,
        minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',
        totalInvestmentValue: 110.2,
        debitCards: [
            {
                // eslint-disable-next-line id-blacklist
                number: '4578',
                expiryDate: '2020-08-22',
                cardId: 'id1',
                cardholderName: 'John Doe',
                cardType: 'Visa Electron',
                cardStatus: 'Active',
            },
            {
                // eslint-disable-next-line id-blacklist
                number: '3241',
                expiryDate: '2019-01-14',
                cardId: 'id2',
                cardholderName: 'John Doe',
                cardType: 'Visa',
                cardStatus: 'Active',
            },
        ],
        accountHolderAddressLine1: 'accountHolderAddressLine11',
        accountHolderAddressLine2: 'accountHolderAddressLine12',
        accountHolderStreetName: 'accountHolderStreetName1',
        town: 'Skopje',
        postCode: '2000',
        countrySubDivision: 'countrySubDivision1',
        accountHolderNames: 'Mile Panika',
        accountHolderCountry: 'MK',
        creditAccount: true,
        debitAccount: true,
        lastUpdateDate: '2016-01-28T16:41:41.090Z',
        favorite: true,
        userPreferences: {
            alias: 'Langosh, Okuneva and Spencer',
            visible: true,
            favorite: false,
        },
        product: {
            externalId: 'externalProductidId',
            externalTypeId: 'externalProductTypeId',
            typeName: 'Saving Account',
            productKind: {
                id: 1,
                externalKindId: 'kind1',
                kindName: 'Saving Account',
                kindUri: 'Saving-account',
            },
        },
        state: {
            externalStateId: 'externalStateId2',
            state: 'Open',
        },
    },
];
const accountsDataMock = [
    {
        id: '1',
        name: 'Account Name',
        identifier: '1234 5678 9012',
        amount: 1,
        currency: 'EUR',
    },
    {
        id: '2',
        name: 'Account Name 2',
        identifier: '5678 9012 1234',
        amount: 2,
        currency: 'USD',
    },
];

class ActivatedRouteStub {
    /* eslint-enable @typescript-eslint/member-ordering */
    constructor(initialParams) {
        this.subject = new BehaviorSubject({});
        /* eslint-disable @typescript-eslint/member-ordering */
        this.paramMap = this.subject.asObservable();
        this.setParamMap(initialParams);
    }
    setParamMap(params = {}, parent) {
        const paramMap = convertToParamMap(params);
        this._paramMap = paramMap;
        if (parent) {
            this.parent = new ActivatedRouteStub();
            this.parent.paramMap = of(paramMap);
        }
        this.subject.next(paramMap);
    }
}

/**
 * Generated bundle index. Do not edit.
 */

export { ACCOUNTS_REQUEST_ALL_SIZE, AccountStatementBasePropertiesService, AccountStatementBaseWidgetComponent, AccountStatementCommonModule, AccountStatementDataService, AccountStatementDomService, ActivatedRouteStub, CUSTOM_FILTER_PERIODS_VALUES, DEFAULT_JOURNEY_CONFIGURATION, DatePeriods, EMPTY_RESPONSE_ERROR, JourneyConfigurationService, LoadingState, PaginationType, accountStatementsResponseMock, accountsDataMock, accountsResponseMock, convertDateObjToDateStruct, convertDateStructToDateObj, firstDayInLastMonth, firstDayInLastQuarter, firstDayInLastWeek, firstDayInThisMonth, firstDayInThisQuarter, firstDayInThisWeek, firstDayInThisYear, getDateFilterLimit, getFilenameFromHeaders, getMonthDiff, getTotalCountFromHeaders, isDateFormatValid, isDateLimitValid, isMonthLimitValid, isQueryStringExist, lastDayInLastMonth, lastDayInLastQuarter, lastDayInLastWeek, lastDayInThisMonth, lastDayInThisQuarter, lastDayInThisWeek, lastDayInThisYear, mimeTypeExtensions, modelItemToBoolean, secondsToMilliseconds, simpleArrayCompare, smartLoadingState, stringToWords, toInteger, today, unixZeroDay, widgetPropertyNames, AccountStatementAccountSelectorComponent as ӨAccountStatementAccountSelectorComponent, AccountStatementAccountSelectorCustomizableDirective as ӨAccountStatementAccountSelectorCustomizableDirective, AccountStatementDownloadDocDirective as ӨAccountStatementDownloadDocDirective, AccountStatementDownloadsComponent as ӨAccountStatementDownloadsComponent, AccountStatementDownloadsCustomizableDirective as ӨAccountStatementDownloadsCustomizableDirective, AccountStatementPaginationComponent as ӨAccountStatementPaginationComponent, AccountStatementViewOnlineComponent as ӨAccountStatementViewOnlineComponent };
//# sourceMappingURL=backbase-account-statement-common-ang.js.map
