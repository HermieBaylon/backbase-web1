import { HttpClient, HttpResponse } from '@angular/common/http';
import { AccountStatement, AccountStatementHttpService, PostAccountStatementsRequestParams } from '@backbase/data-ang/account-statements';
import { ProductSummaryHttpService, ProductSummaryItem } from '@backbase/data-ang/arrangements';
import { Observable } from 'rxjs';
import { AccountStatementGetReqParams, Categories, ProccessedAccountStatementsRawData } from '../models/account-statement';
import { AccountsGetRequestParams } from '../models/accounts.model';
import { Accounts } from '../models/product-summary';
import * as i0 from "@angular/core";
export interface NonNullableHttpResponse<T> extends HttpResponse<T> {
    body: T;
}
export declare class AccountStatementDataService {
    private readonly productSummaryHttpService;
    private readonly accountStatementsHttpService;
    private readonly http;
    private readonly locale;
    constructor(productSummaryHttpService: ProductSummaryHttpService, accountStatementsHttpService: AccountStatementHttpService, http: HttpClient, locale: string);
    getAccounts(params?: AccountsGetRequestParams): Observable<NonNullableHttpResponse<ProductSummaryItem[]>>;
    getAccountStatementsBusiness(params: PostAccountStatementsRequestParams): Observable<NonNullableHttpResponse<AccountStatement[]>>;
    loadAccounts(): Observable<Accounts | null>;
    loadCategories(): Observable<Categories>;
    loadAccountStatements(params?: AccountStatementGetReqParams): Observable<ProccessedAccountStatementsRawData>;
    getAccountStatementDownloadUrl(uid: string): string;
    downloadFile(url: string): Observable<HttpResponse<ArrayBuffer>>;
    private processAccountsRawData;
    private processAccountStatementsRawData;
    private formatBookDate;
    private formatAccountStatementsParams;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountStatementDataService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AccountStatementDataService>;
}
