import { Observable } from 'rxjs';
import { JourneyConfiguration } from '../models/journey-configuration.model';
import { PaginationType } from '../models/pagination-type.model';
import { SortDirection } from '../models/sort-direction.model';
/**
 * Abstract class for all the journeys that require common configuration
 *
 * @template T - Type of the configuration object for journey
 * @internal
 */
export declare abstract class JourneyConfigurationService<T extends JourneyConfiguration> {
    /** Property containing configuration for the journey */
    protected staticConfig: T;
    /**
     * Create new instance of journey service
     *
     * @param staticConfigOverrides new configuration object provided by concrete class
     */
    constructor(staticConfigOverrides: T);
    /** Absolute filter datepicker limit (yyyy-mm-dd)
     *
     * @defaultValue ''
     * @returns An observable of string
     */
    get absoluteDateLimit(): Observable<string>;
    /**
     * Notification dismiss time in seconds (defaults to 5)
     *
     * @defaultValue 5
     * @returns An observable of number
     */
    get notificationDismissTime(): Observable<number>;
    /**
     * PaginationType will decide whether the user will see load more or page number style pagination
     *
     * @defaultValue `PaginationType.LOAD_MORE`
     * @returns An observable of PaginationType enum
     */
    get paginationType(): Observable<PaginationType>;
    /**
     * Number of items to be fetched in single request
     *
     * @defaultValue 10
     * @returns An observable of number
     */
    get pageSize(): Observable<number>;
    /**
     * Relative filter datepicker limit (months)
     *
     * @defaultValue 0
     * @returns An observable of number
     */
    get relativeDateLimit(): Observable<number>;
    /**
     * Sorting direction (ASC, DESC)
     *
     * @defaultValue DESC
     * @returns a string
     */
    get sortingDirection(): Observable<SortDirection>;
    /**
     * Sorting order (date, description, category)
     *
     * @defaultValue date
     * @returns a string
     */
    get sortingOrder(): Observable<string>;
    /**
     * Show category
     *
     * @defaultValue true
     * @returns An observable of boolean
     */
    get showCategory(): Observable<boolean>;
}
