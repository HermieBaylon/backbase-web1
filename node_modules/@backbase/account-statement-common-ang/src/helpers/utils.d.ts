import { HttpHeaders } from '@angular/common/http';
import { AccountStatementGetReqParams } from '../models/account-statement';
import { LoadingState } from '../models/loading-state.model';
export declare const getFilenameFromHeaders: (headers: HttpHeaders) => string;
export declare const getTotalCountFromHeaders: (headers: HttpHeaders) => number;
export declare const modelItemToBoolean: (value: string | boolean) => boolean;
export declare const toInteger: (value: any) => number;
/**
 * Split string by delimiter (String or RegExp), /\s+/ by default.
 *
 * @param str String that needs to be split.
 * @param delimiter by which string needs to be split
 * @returns string[]
 * @example stringToWords('1cdb2224-8926-4b4d,1cdb2224-8926-4b92', ',')
 */
export declare const stringToWords: (str: string | undefined, delimiter?: string | undefined) => string[];
export declare const simpleArrayCompare: (a?: Array<string | number>, b?: Array<string | number>) => boolean;
export declare const smartLoadingState: (prev: Partial<AccountStatementGetReqParams>, cur: AccountStatementGetReqParams) => LoadingState;
/**
 * Choose limit date for Date filter field. By default, value should be zero day in Unix time.
 * If both absolute and relative limits are passed, absolute has precedent.
 *
 * @param absoluteDateLimit {string} Absolute date in format (yyyy-mm-dd)
 * @param relativeMonthLimit {number} Number of months in the past from present date.
 * @returns Date
 */
export declare const getDateFilterLimit: (absoluteDateLimit?: string, relativeMonthLimit?: number) => Date;
/**
 * Function to check if url contains querystring or not
 *
 * @param url {string} Url that needs to be checked
 * @returns boolean
 * @example isQueryStringExist('http://test.com?dateFrom=20-10-2020')
 */
export declare const isQueryStringExist: (url: string) => boolean;
