import { formatDate } from '@angular/common';
import { Inject, Injectable, LOCALE_ID } from '@angular/core';
import { of, throwError } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { EMPTY_RESPONSE_ERROR } from '../constants/errors';
import { HttpObserveType } from '../models/http-observe.model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/arrangements";
import * as i2 from "@backbase/data-ang/account-statements";
import * as i3 from "@angular/common/http";
const getArrangementsRequiredParams = {
    businessFunction: 'Product Summary',
    resourceName: 'Product Summary',
    privilege: 'view',
};
const isNonNullableHttpResponse = (response) => 
// eslint-disable-next-line no-null/no-null
response.body !== null;
export class AccountStatementDataService {
    constructor(productSummaryHttpService, accountStatementsHttpService, http, locale) {
        this.productSummaryHttpService = productSummaryHttpService;
        this.accountStatementsHttpService = accountStatementsHttpService;
        this.http = http;
        this.locale = locale;
    }
    getAccounts(params) {
        return this.productSummaryHttpService
            .getArrangementsByBusinessFunction(Object.assign(Object.assign(Object.assign({}, getArrangementsRequiredParams), { favoriteFirst: true }), params), HttpObserveType.RESPONSE)
            .pipe(switchMap(response => (isNonNullableHttpResponse(response) ? of(response) : throwError(EMPTY_RESPONSE_ERROR))));
    }
    getAccountStatementsBusiness(params) {
        return this.accountStatementsHttpService
            .postAccountStatements(params, HttpObserveType.RESPONSE)
            .pipe(switchMap(response => isNonNullableHttpResponse(response) && Array.isArray(response.body)
            ? of(response)
            : throwError(EMPTY_RESPONSE_ERROR)));
    }
    loadAccounts() {
        return this.productSummaryHttpService
            .getArrangementsByBusinessFunction(getArrangementsRequiredParams, HttpObserveType.RESPONSE)
            .pipe(map(response => this.processAccountsRawData(response.body)));
    }
    loadCategories() {
        return this.accountStatementsHttpService.getCategories(HttpObserveType.RESPONSE).pipe(map(({ body }) => {
            // eslint-disable-next-line no-null/no-null
            if (body === null) {
                throw new Error('Response does not contain body');
            }
            return body.categories;
        }));
    }
    loadAccountStatements(params = {}) {
        return this.accountStatementsHttpService
            .getAccountStatements(this.formatAccountStatementsParams(params), HttpObserveType.RESPONSE)
            .pipe(map((response) => this.processAccountStatementsRawData(response)));
    }
    getAccountStatementDownloadUrl(uid) {
        return this.accountStatementsHttpService.downloadAccountStatementsUrl({ uid });
    }
    downloadFile(url) {
        return this.http.get(url, {
            responseType: 'arraybuffer',
            observe: 'response',
        });
    }
    processAccountsRawData(rawData) {
        return (rawData &&
            rawData.map((account) => ({
                id: account.id,
                name: account.bankAlias || account.name,
                identifier: account.IBAN || account.BBAN || account.productNumber,
                amount: account.availableBalance,
                currency: account.currency,
            })));
    }
    processAccountStatementsRawData(rawData) {
        const totalCount = (rawData && parseInt(String(rawData.headers.get('x-total-count')), 10)) || 0;
        return {
            data: rawData && rawData.body,
            totalCount,
        };
    }
    formatBookDate(date) {
        return formatDate(new Date(date), 'yyyy-MM-dd', this.locale);
    }
    formatAccountStatementsParams(params) {
        const { dateFrom, dateTo } = params;
        return Object.assign(Object.assign(Object.assign({}, params), (dateFrom && {
            dateFrom: this.formatBookDate(dateFrom),
        })), (dateTo && {
            dateTo: this.formatBookDate(dateTo),
        }));
    }
}
AccountStatementDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDataService, deps: [{ token: i1.ProductSummaryHttpService }, { token: i2.AccountStatementHttpService }, { token: i3.HttpClient }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }, { type: i2.AccountStatementHttpService }, { type: i3.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,