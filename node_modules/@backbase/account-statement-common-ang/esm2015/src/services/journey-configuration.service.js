import { of } from 'rxjs';
import { DEFAULT_JOURNEY_CONFIGURATION } from '../constants/journey-configuration';
/**
 * Abstract class for all the journeys that require common configuration
 *
 * @template T - Type of the configuration object for journey
 * @internal
 */
export class JourneyConfigurationService {
    /**
     * Create new instance of journey service
     *
     * @param staticConfigOverrides new configuration object provided by concrete class
     */
    constructor(staticConfigOverrides) {
        this.staticConfig = Object.assign(Object.assign({}, DEFAULT_JOURNEY_CONFIGURATION), staticConfigOverrides);
    }
    /** Absolute filter datepicker limit (yyyy-mm-dd)
     *
     * @defaultValue ''
     * @returns An observable of string
     */
    get absoluteDateLimit() {
        return of(this.staticConfig.absoluteDateLimit);
    }
    /**
     * Notification dismiss time in seconds (defaults to 5)
     *
     * @defaultValue 5
     * @returns An observable of number
     */
    get notificationDismissTime() {
        return of(this.staticConfig.notificationDismissTime);
    }
    /**
     * PaginationType will decide whether the user will see load more or page number style pagination
     *
     * @defaultValue `PaginationType.LOAD_MORE`
     * @returns An observable of PaginationType enum
     */
    get paginationType() {
        return of(this.staticConfig.paginationType);
    }
    /**
     * Number of items to be fetched in single request
     *
     * @defaultValue 10
     * @returns An observable of number
     */
    get pageSize() {
        return of(this.staticConfig.pageSize);
    }
    /**
     * Relative filter datepicker limit (months)
     *
     * @defaultValue 0
     * @returns An observable of number
     */
    get relativeDateLimit() {
        return of(this.staticConfig.relativeDateLimit);
    }
    /**
     * Sorting direction (ASC, DESC)
     *
     * @defaultValue DESC
     * @returns a string
     */
    get sortingDirection() {
        return of(this.staticConfig.sortingDirection);
    }
    /**
     * Sorting order (date, description, category)
     *
     * @defaultValue date
     * @returns a string
     */
    get sortingOrder() {
        return of(this.staticConfig.sortingOrder);
    }
    /**
     * Show category
     *
     * @defaultValue true
     * @returns An observable of boolean
     */
    get showCategory() {
        return of(this.staticConfig.showCategory);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam91cm5leS1jb25maWd1cmF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FjY291bnQtc3RhdGVtZW50LWNvbW1vbi1hbmcvc3JjL3NlcnZpY2VzL2pvdXJuZXktY29uZmlndXJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFLbkY7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQWdCLDJCQUEyQjtJQUkvQzs7OztPQUlHO0lBQ0gsWUFBWSxxQkFBd0I7UUFDbEMsSUFBSSxDQUFDLFlBQVksbUNBQVEsNkJBQTZCLEdBQUsscUJBQXFCLENBQUUsQ0FBQztJQUNyRixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksaUJBQWlCO1FBQ25CLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUFJLHVCQUF1QjtRQUN6QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxRQUFRO1FBQ1YsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILElBQUksWUFBWTtRQUNkLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxZQUFZO1FBQ2QsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgREVGQVVMVF9KT1VSTkVZX0NPTkZJR1VSQVRJT04gfSBmcm9tICcuLi9jb25zdGFudHMvam91cm5leS1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IEpvdXJuZXlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL2pvdXJuZXktY29uZmlndXJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uVHlwZSB9IGZyb20gJy4uL21vZGVscy9wYWdpbmF0aW9uLXR5cGUubW9kZWwnO1xuaW1wb3J0IHsgU29ydERpcmVjdGlvbiB9IGZyb20gJy4uL21vZGVscy9zb3J0LWRpcmVjdGlvbi5tb2RlbCc7XG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgZm9yIGFsbCB0aGUgam91cm5leXMgdGhhdCByZXF1aXJlIGNvbW1vbiBjb25maWd1cmF0aW9uXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUeXBlIG9mIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBmb3Igam91cm5leVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBKb3VybmV5Q29uZmlndXJhdGlvblNlcnZpY2U8VCBleHRlbmRzIEpvdXJuZXlDb25maWd1cmF0aW9uPiB7XG4gIC8qKiBQcm9wZXJ0eSBjb250YWluaW5nIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBqb3VybmV5ICovXG4gIHByb3RlY3RlZCBzdGF0aWNDb25maWc6IFQ7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBuZXcgaW5zdGFuY2Ugb2Ygam91cm5leSBzZXJ2aWNlXG4gICAqXG4gICAqIEBwYXJhbSBzdGF0aWNDb25maWdPdmVycmlkZXMgbmV3IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHByb3ZpZGVkIGJ5IGNvbmNyZXRlIGNsYXNzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzdGF0aWNDb25maWdPdmVycmlkZXM6IFQpIHtcbiAgICB0aGlzLnN0YXRpY0NvbmZpZyA9IHsgLi4uREVGQVVMVF9KT1VSTkVZX0NPTkZJR1VSQVRJT04sIC4uLnN0YXRpY0NvbmZpZ092ZXJyaWRlcyB9O1xuICB9XG5cbiAgLyoqIEFic29sdXRlIGZpbHRlciBkYXRlcGlja2VyIGxpbWl0ICh5eXl5LW1tLWRkKVxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlICcnXG4gICAqIEByZXR1cm5zIEFuIG9ic2VydmFibGUgb2Ygc3RyaW5nXG4gICAqL1xuICBnZXQgYWJzb2x1dGVEYXRlTGltaXQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gb2YodGhpcy5zdGF0aWNDb25maWcuYWJzb2x1dGVEYXRlTGltaXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vdGlmaWNhdGlvbiBkaXNtaXNzIHRpbWUgaW4gc2Vjb25kcyAoZGVmYXVsdHMgdG8gNSlcbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSA1XG4gICAqIEByZXR1cm5zIEFuIG9ic2VydmFibGUgb2YgbnVtYmVyXG4gICAqL1xuICBnZXQgbm90aWZpY2F0aW9uRGlzbWlzc1RpbWUoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gb2YodGhpcy5zdGF0aWNDb25maWcubm90aWZpY2F0aW9uRGlzbWlzc1RpbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhZ2luYXRpb25UeXBlIHdpbGwgZGVjaWRlIHdoZXRoZXIgdGhlIHVzZXIgd2lsbCBzZWUgbG9hZCBtb3JlIG9yIHBhZ2UgbnVtYmVyIHN0eWxlIHBhZ2luYXRpb25cbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSBgUGFnaW5hdGlvblR5cGUuTE9BRF9NT1JFYFxuICAgKiBAcmV0dXJucyBBbiBvYnNlcnZhYmxlIG9mIFBhZ2luYXRpb25UeXBlIGVudW1cbiAgICovXG4gIGdldCBwYWdpbmF0aW9uVHlwZSgpOiBPYnNlcnZhYmxlPFBhZ2luYXRpb25UeXBlPiB7XG4gICAgcmV0dXJuIG9mKHRoaXMuc3RhdGljQ29uZmlnLnBhZ2luYXRpb25UeXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgaXRlbXMgdG8gYmUgZmV0Y2hlZCBpbiBzaW5nbGUgcmVxdWVzdFxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIDEwXG4gICAqIEByZXR1cm5zIEFuIG9ic2VydmFibGUgb2YgbnVtYmVyXG4gICAqL1xuICBnZXQgcGFnZVNpemUoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gb2YodGhpcy5zdGF0aWNDb25maWcucGFnZVNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbGF0aXZlIGZpbHRlciBkYXRlcGlja2VyIGxpbWl0IChtb250aHMpXG4gICAqXG4gICAqIEBkZWZhdWx0VmFsdWUgMFxuICAgKiBAcmV0dXJucyBBbiBvYnNlcnZhYmxlIG9mIG51bWJlclxuICAgKi9cbiAgZ2V0IHJlbGF0aXZlRGF0ZUxpbWl0KCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG9mKHRoaXMuc3RhdGljQ29uZmlnLnJlbGF0aXZlRGF0ZUxpbWl0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0aW5nIGRpcmVjdGlvbiAoQVNDLCBERVNDKVxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIERFU0NcbiAgICogQHJldHVybnMgYSBzdHJpbmdcbiAgICovXG4gIGdldCBzb3J0aW5nRGlyZWN0aW9uKCk6IE9ic2VydmFibGU8U29ydERpcmVjdGlvbj4ge1xuICAgIHJldHVybiBvZih0aGlzLnN0YXRpY0NvbmZpZy5zb3J0aW5nRGlyZWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0aW5nIG9yZGVyIChkYXRlLCBkZXNjcmlwdGlvbiwgY2F0ZWdvcnkpXG4gICAqXG4gICAqIEBkZWZhdWx0VmFsdWUgZGF0ZVxuICAgKiBAcmV0dXJucyBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0IHNvcnRpbmdPcmRlcigpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiBvZih0aGlzLnN0YXRpY0NvbmZpZy5zb3J0aW5nT3JkZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgY2F0ZWdvcnlcbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSB0cnVlXG4gICAqIEByZXR1cm5zIEFuIG9ic2VydmFibGUgb2YgYm9vbGVhblxuICAgKi9cbiAgZ2V0IHNob3dDYXRlZ29yeSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gb2YodGhpcy5zdGF0aWNDb25maWcuc2hvd0NhdGVnb3J5KTtcbiAgfVxufVxuIl19