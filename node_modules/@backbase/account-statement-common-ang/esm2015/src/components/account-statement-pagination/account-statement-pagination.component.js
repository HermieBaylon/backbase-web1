import { Component, EventEmitter, Input, Output } from '@angular/core';
import { PaginationType } from '../../models/pagination-type.model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/pagination";
import * as i2 from "@backbase/ui-ang/load-button";
import * as i3 from "@angular/common";
export class AccountStatementPaginationComponent {
    constructor() {
        /**
         * Event (Output) that emits when page prop is changed
         */
        this.pageChange = new EventEmitter();
        /**
         * Event (Output) that emits when load-more
         */
        this.loadMore = new EventEmitter();
        this.paginationTypeEnum = PaginationType;
    }
    onPageChange(page) {
        this.pageChange.emit(page);
    }
    onLoadMore(loadMoreParams) {
        if (!this.loading) {
            this.loadMore.emit(loadMoreParams.from);
        }
    }
}
AccountStatementPaginationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementPaginationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountStatementPaginationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementPaginationComponent, selector: "bb-account-statement-pagination", inputs: { page: "page", from: "from", count: "count", itemsPerPage: "itemsPerPage", paginationType: "paginationType", hasMore: "hasMore", loading: "loading" }, outputs: { pageChange: "pageChange", loadMore: "loadMore" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl bb-text-align-center\">\n  <bb-pagination-ui\n    *ngIf=\"paginationType === paginationTypeEnum.Pagination && (hasMore || (!!page && page > 0))\"\n    [page]=\"page || 0\"\n    [totalItems]=\"count || 0\"\n    [itemsPerPage]=\"itemsPerPage || 0\"\n    [boundaryLinks]=\"true\"\n    [directionLinks]=\"true\"\n    [maxNavPages]=\"3\"\n    (pageChange)=\"onPageChange($event)\"\n  >\n  </bb-pagination-ui>\n\n  <bb-load-button-ui\n    color=\"link\"\n    *ngIf=\"paginationType === paginationTypeEnum.LoadMore\"\n    [from]=\"page || 0\"\n    [size]=\"itemsPerPage || 0\"\n    [totalCount]=\"count || 0\"\n    [isLoading]=\"loading || false\"\n    (paramChange)=\"onLoadMore($event)\"\n    data-role=\"load-more-button\"\n  >\n    <span i18n=\"Load more|Load More button text@@accountStatement.list.load-more\">Load more</span>\n  </bb-load-button-ui>\n</div>\n", components: [{ type: i1.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i2.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementPaginationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-pagination',
                    templateUrl: './account-statement-pagination.component.html',
                }]
        }], propDecorators: { page: [{
                type: Input
            }], from: [{
                type: Input
            }], count: [{
                type: Input
            }], itemsPerPage: [{
                type: Input
            }], paginationType: [{
                type: Input
            }], hasMore: [{
                type: Input
            }], loading: [{
                type: Input
            }], pageChange: [{
                type: Output
            }], loadMore: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1zdGF0ZW1lbnQtcGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FjY291bnQtc3RhdGVtZW50LWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvYWNjb3VudC1zdGF0ZW1lbnQtcGFnaW5hdGlvbi9hY2NvdW50LXN0YXRlbWVudC1wYWdpbmF0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWNjb3VudC1zdGF0ZW1lbnQtY29tbW9uLWFuZy9zcmMvY29tcG9uZW50cy9hY2NvdW50LXN0YXRlbWVudC1wYWdpbmF0aW9uL2FjY291bnQtc3RhdGVtZW50LXBhZ2luYXRpb24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7Ozs7O0FBT3BFLE1BQU0sT0FBTyxtQ0FBbUM7SUFKaEQ7UUFrQ0U7O1dBRUc7UUFDTyxlQUFVLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFDeEU7O1dBRUc7UUFDTyxhQUFRLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFFdEUsdUJBQWtCLEdBQUcsY0FBYyxDQUFDO0tBV3JDO0lBVEMsWUFBWSxDQUFDLElBQVk7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELFVBQVUsQ0FBQyxjQUE4QjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDOztpSUFqRFUsbUNBQW1DO3FIQUFuQyxtQ0FBbUMsb1NDUmhELGc0QkEwQkE7NEZEbEJhLG1DQUFtQztrQkFKL0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUNBQWlDO29CQUMzQyxXQUFXLEVBQUUsK0NBQStDO2lCQUM3RDs4QkFLVSxJQUFJO3NCQUFaLEtBQUs7Z0JBSUcsSUFBSTtzQkFBWixLQUFLO2dCQUlHLEtBQUs7c0JBQWIsS0FBSztnQkFJRyxZQUFZO3NCQUFwQixLQUFLO2dCQUlHLGNBQWM7c0JBQXRCLEtBQUs7Z0JBSUcsT0FBTztzQkFBZixLQUFLO2dCQUlHLE9BQU87c0JBQWYsS0FBSztnQkFLSSxVQUFVO3NCQUFuQixNQUFNO2dCQUlHLFFBQVE7c0JBQWpCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFnaW5hdGlvblR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGFnaW5hdGlvbi10eXBlLm1vZGVsJztcbmltcG9ydCB7IExvYWRNb3JlUGFyYW1zIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9sb2FkLWJ1dHRvbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWFjY291bnQtc3RhdGVtZW50LXBhZ2luYXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vYWNjb3VudC1zdGF0ZW1lbnQtcGFnaW5hdGlvbi5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEFjY291bnRTdGF0ZW1lbnRQYWdpbmF0aW9uQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEN1cnJlbnQgcGFnZSBpdGVtcyBudW1iZXJcbiAgICovXG4gIEBJbnB1dCgpIHBhZ2U6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFRoZSBwYWdlIHRvIGxpc3QgZnJvbSB3aGVuIFwiTE9BRCBNT1JFXCIgYnV0dG9uIGlzIGRpc3BsYXllZFxuICAgKi9cbiAgQElucHV0KCkgZnJvbTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVG90YWwgbnVtYmVyIG9mIGl0ZW1zXG4gICAqL1xuICBASW5wdXQoKSBjb3VudDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogTnVtYmVyIG9mIGl0ZW1zIHBlciBwYWdlXG4gICAqL1xuICBASW5wdXQoKSBpdGVtc1BlclBhZ2U6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFR5cGUgb2YgcGFnaW5hdGlvbiAobG9hZC1tb3JlIG9yIHJlZ3VsYXIgcGFnaW5hdGlvbilcbiAgICovXG4gIEBJbnB1dCgpIHBhZ2luYXRpb25UeXBlOiBQYWdpbmF0aW9uVHlwZSB8IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFRoZSBmbGFnIHRvIGluZGljYXRlIGlmIHRoZXJlIGFyZSBtb3JlIGl0ZW1zXG4gICAqL1xuICBASW5wdXQoKSBoYXNNb3JlOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVGhlIGZsYWcgdG8gaW5kaWNhdGUgbG9hZGluZyBzdGF0ZVxuICAgKi9cbiAgQElucHV0KCkgbG9hZGluZzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogRXZlbnQgKE91dHB1dCkgdGhhdCBlbWl0cyB3aGVuIHBhZ2UgcHJvcCBpcyBjaGFuZ2VkXG4gICAqL1xuICBAT3V0cHV0KCkgcGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcbiAgLyoqXG4gICAqIEV2ZW50IChPdXRwdXQpIHRoYXQgZW1pdHMgd2hlbiBsb2FkLW1vcmVcbiAgICovXG4gIEBPdXRwdXQoKSBsb2FkTW9yZTogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICBwYWdpbmF0aW9uVHlwZUVudW0gPSBQYWdpbmF0aW9uVHlwZTtcblxuICBvblBhZ2VDaGFuZ2UocGFnZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5wYWdlQ2hhbmdlLmVtaXQocGFnZSk7XG4gIH1cblxuICBvbkxvYWRNb3JlKGxvYWRNb3JlUGFyYW1zOiBMb2FkTW9yZVBhcmFtcyk6IHZvaWQge1xuICAgIGlmICghdGhpcy5sb2FkaW5nKSB7XG4gICAgICB0aGlzLmxvYWRNb3JlLmVtaXQobG9hZE1vcmVQYXJhbXMuZnJvbSk7XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLXhsIGJiLXRleHQtYWxpZ24tY2VudGVyXCI+XG4gIDxiYi1wYWdpbmF0aW9uLXVpXG4gICAgKm5nSWY9XCJwYWdpbmF0aW9uVHlwZSA9PT0gcGFnaW5hdGlvblR5cGVFbnVtLlBhZ2luYXRpb24gJiYgKGhhc01vcmUgfHwgKCEhcGFnZSAmJiBwYWdlID4gMCkpXCJcbiAgICBbcGFnZV09XCJwYWdlIHx8IDBcIlxuICAgIFt0b3RhbEl0ZW1zXT1cImNvdW50IHx8IDBcIlxuICAgIFtpdGVtc1BlclBhZ2VdPVwiaXRlbXNQZXJQYWdlIHx8IDBcIlxuICAgIFtib3VuZGFyeUxpbmtzXT1cInRydWVcIlxuICAgIFtkaXJlY3Rpb25MaW5rc109XCJ0cnVlXCJcbiAgICBbbWF4TmF2UGFnZXNdPVwiM1wiXG4gICAgKHBhZ2VDaGFuZ2UpPVwib25QYWdlQ2hhbmdlKCRldmVudClcIlxuICA+XG4gIDwvYmItcGFnaW5hdGlvbi11aT5cblxuICA8YmItbG9hZC1idXR0b24tdWlcbiAgICBjb2xvcj1cImxpbmtcIlxuICAgICpuZ0lmPVwicGFnaW5hdGlvblR5cGUgPT09IHBhZ2luYXRpb25UeXBlRW51bS5Mb2FkTW9yZVwiXG4gICAgW2Zyb21dPVwicGFnZSB8fCAwXCJcbiAgICBbc2l6ZV09XCJpdGVtc1BlclBhZ2UgfHwgMFwiXG4gICAgW3RvdGFsQ291bnRdPVwiY291bnQgfHwgMFwiXG4gICAgW2lzTG9hZGluZ109XCJsb2FkaW5nIHx8IGZhbHNlXCJcbiAgICAocGFyYW1DaGFuZ2UpPVwib25Mb2FkTW9yZSgkZXZlbnQpXCJcbiAgICBkYXRhLXJvbGU9XCJsb2FkLW1vcmUtYnV0dG9uXCJcbiAgPlxuICAgIDxzcGFuIGkxOG49XCJMb2FkIG1vcmV8TG9hZCBNb3JlIGJ1dHRvbiB0ZXh0QEBhY2NvdW50U3RhdGVtZW50Lmxpc3QubG9hZC1tb3JlXCI+TG9hZCBtb3JlPC9zcGFuPlxuICA8L2JiLWxvYWQtYnV0dG9uLXVpPlxuPC9kaXY+XG4iXX0=