import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/ui-ang/dropdown-menu";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/ui-ang/tooltip-directive";
import * as i5 from "@backbase/ui-ang/button";
import * as i6 from "../../directives/account-statement-download-doc/account-statement-download-doc.directive";
export class AccountStatementDownloadsComponent {
    constructor() {
        this.documents = [];
        this.mimeTypeExtensions = {};
        this.downloadFailure = new EventEmitter();
        this.describedByElementId = '';
        /**
         * Position where tooltip will be displayed relative to the button element.
         *
         * @default 'top'
         */
        this.tooltipPlacement = 'top';
    }
    onDownloadDocFailure(error) {
        this.downloadFailure.emit(error);
    }
}
AccountStatementDownloadsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountStatementDownloadsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadsComponent, selector: "bb-account-statement-downloads", inputs: { documents: "documents", mimeTypeExtensions: "mimeTypeExtensions", describedByElementId: "describedByElementId", tooltipPlacement: "tooltipPlacement" }, outputs: { downloadFailure: "downloadFailure" }, ngImport: i0, template: "<ng-container\n  bbAccountStatementDownloadsCustomizableDirective\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    documents: documents,\n    mimeTypeExtensions: mimeTypeExtensions\n  }\"\n>\n</ng-container>\n\n<ng-template\n  bbAccountStatementDownloadsCustomizableDirective\n  let-hostRef\n  let-documents=\"context.documents\"\n  let-mimeTypeExtensions=\"context.mimeTypeExtensions\"\n>\n  <ng-container *ngIf=\"documents.length; else emptyState\">\n    <div\n      *ngIf=\"documents.length === 1; else documentsToDownload\"\n      triggers=\"hover focus\"\n      [bbTooltip]=\"singleDownloadTooltip\"\n      [placement]=\"hostRef.tooltipPlacement\"\n    >\n      <button\n        bbButton\n        color=\"link\"\n        [circle]=\"true\"\n        aria-label=\"Download one available format\"\n        i18n-aria-label=\"Download one available format@@account-statement.download-one-format.aria-label\"\n        [attr.aria-describedby]=\"hostRef.describedByElementId\"\n        [bbAccountStatementDownloadDoc]=\"documents[0]\"\n        (bbAccountStatementDownloadDocFailure)=\"hostRef.onDownloadDocFailure($event)\"\n        data-role=\"download-one\"\n      >\n        <bb-icon-ui name=\"get-app\" size=\"md\"></bb-icon-ui>\n      </button>\n    </div>\n\n    <ng-template #singleDownloadTooltip>\n      <ng-container\n        *ngIf=\"mimeTypeExtensions[documents[0].contentType]; else singleDownloadTooltipNoExtension\"\n        i18n=\"Tooltip for download single file button@@account-statement.single.download.tooltip\"\n      >\n        Download - {{ mimeTypeExtensions[documents[0].contentType] }}\n      </ng-container>\n\n      <ng-template\n        #singleDownloadTooltipNoExtension\n        i18n=\"\n          File|Tooltip for download button of single file that does not have standard file\n          extension@@account-statement.single.download.tooltip.unknown-extension\"\n      >\n        Download - File\n      </ng-template>\n    </ng-template>\n\n    <ng-template #documentsToDownload>\n      <div\n        triggers=\"hover focus\"\n        [placement]=\"hostRef.tooltipPlacement\"\n        bbTooltip=\"Show downloads actions\"\n        i18n-bbTooltip=\"\n          Show downloads actions for tooltip with provided description@@account-statement.download.dropdown-menu.tooltip\"\n      >\n        <bb-dropdown-menu-ui\n          [attr.data-role]=\"'as-dropdown-menu'\"\n          icon=\"get-app\"\n          btnColor=\"link\"\n          [btnCircle]=\"true\"\n          container=\"body\"\n          dropDownButtonLabel=\"Show download actions\"\n          i18n-dropDownButtonLabel=\"\n            Show download actions|Downloads dropdown menu aria label with provided\n            description@@account-statement.downloads.dropdown-menu.aria-label.no-description\"\n          [attr.aria-describedby]=\"hostRef.describedByElementId\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <a\n              *ngFor=\"let document of documents; index as index\"\n              rel=\"noopener\"\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"download-statement\"\n              href=\"\"\n              (click)=\"$event.preventDefault()\"\n              [bbAccountStatementDownloadDoc]=\"document\"\n              (bbAccountStatementDownloadDocFailure)=\"hostRef.onDownloadDocFailure($event)\"\n            >\n              <span\n                *ngIf=\"mimeTypeExtensions[document.contentType]; else dropdownItemNoExtension\"\n                [attr.aria-labelledby]=\"'dropdown-item-download-file-' + document.uuid\"\n              >\n                {{ mimeTypeExtensions[document.contentType] }}\n              </span>\n\n              <ng-template\n                #dropdownItemNoExtension\n                i18n=\"\n                  Dropdown item to download file with unknown\n                  extension@@account-statement.downloads.downloads-as.no-extension-file\"\n              >\n                File {{ index + 1 }}\n              </ng-template>\n\n              <div id=\"dropdown-item-download-file-{{ document.uuid }}\" class=\"sr-only\">\n                <span\n                  *ngIf=\"mimeTypeExtensions[document.contentType]; else dropdownItemAriaLabelNoExtension\"\n                  i18n=\"Download file with specific extension@@account-statement.downloads.downloads-as.aria-label\"\n                >\n                  Download as {{ mimeTypeExtensions[document.contentType] }}\n                </span>\n\n                <ng-template\n                  #dropdownItemAriaLabelNoExtension\n                  i18n=\"Download file with unknown extension@@account-statement.downloads.downloads-unknown.aria-label\"\n                >\n                  Download unknown extension file {{ index + 1 }}\n                </ng-template>\n              </div>\n            </a>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #emptyState>\n    <div\n      triggers=\"hover focus\"\n      placement=\"bottom\"\n      bbTooltip=\"Download is not supported for this statement, please contact the bank\"\n      i18n-bbTooltip=\"Downloads are empty tooltip@@account-statement.downloads.empty-state.tooltip\"\n    >\n      <bb-icon-ui\n        [attr.data-role]=\"'empty-state'\"\n        name=\"warning\"\n        color=\"warning\"\n        tabindex=\"0\"\n        [attr.aria-describedby]=\"hostRef.describedByElementId\"\n      ></bb-icon-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementDownloadsCustomizableDirective; }), selector: "[bbAccountStatementDownloadsCustomizableDirective]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i5.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i6.AccountStatementDownloadDocDirective; }), selector: "[bbAccountStatementDownloadDoc]", inputs: ["bbAccountStatementDownloadDoc", "bbAccountStatementDownloadDocFilename"], outputs: ["bbAccountStatementDownloadDocFailure"] }, { type: i0.forwardRef(function () { return i2.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-downloads',
                    templateUrl: './account-statement-downloads.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { documents: [{
                type: Input
            }], mimeTypeExtensions: [{
                type: Input
            }], downloadFailure: [{
                type: Output
            }], describedByElementId: [{
                type: Input
            }], tooltipPlacement: [{
                type: Input
            }] } });
export class AccountStatementDownloadsCustomizableDirective extends BbTemplate {
}
AccountStatementDownloadsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementDownloadsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadsCustomizableDirective, selector: "[bbAccountStatementDownloadsCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementDownloadsCustomizableDirective]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,