import { LoadingState } from '../models/loading-state.model';
import { isDateFormatValid, isDateLimitValid, isMonthLimitValid } from '../validators/date-validator';
import { unixZeroDay } from './date-helpers';
import { PaginationType } from '../models/pagination-type.model';
export const getFilenameFromHeaders = (headers) => {
    const contentDispositionHeader = headers.get('Content-Disposition') || '';
    const filenameRegexp = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
    const matches = contentDispositionHeader.match(filenameRegexp);
    let filename = '';
    if (!!matches && matches[1]) {
        filename = matches[1].replace(/['"]/g, '');
    }
    return filename;
};
export const getTotalCountFromHeaders = (headers) => {
    const header = headers.get('x-total-count');
    return (header && parseInt(header, 10)) || 0;
};
export const modelItemToBoolean = (value) => {
    if (typeof value === 'boolean') {
        return value;
    }
    return value === 'true';
};
export const toInteger = (value) => {
    if ((typeof value === 'string' && /^\d+$/.test(value)) || typeof value === 'number') {
        return parseInt(value, 10) || 0;
    }
    return 0;
};
/**
 * Split string by delimiter (String or RegExp), /\s+/ by default.
 *
 * @param str String that needs to be split.
 * @param delimiter by which string needs to be split
 * @returns string[]
 * @example stringToWords('1cdb2224-8926-4b4d,1cdb2224-8926-4b92', ',')
 */
export const stringToWords = (str, delimiter) => {
    if (!str) {
        return [];
    }
    return str.trim().split(delimiter || /\s+/);
};
export const simpleArrayCompare = (a = [], b = []) => a.length !== b.length ? false : a.every((item, i) => b[i] === item);
export const smartLoadingState = (prev, cur) => {
    if (prev.direction !== cur.direction ||
        prev.orderBy !== cur.orderBy ||
        (prev.from !== cur.from && cur.paginationType === PaginationType.Pagination)) {
        return LoadingState.LOADING_TABLE;
    }
    if (cur.from !== 0) {
        return LoadingState.LOADING_MORE;
    }
    if (prev.category !== cur.category || prev.dateFrom !== cur.dateFrom || prev.dateTo !== cur.dateTo) {
        return LoadingState.LOADING_FILTERED;
    }
    return LoadingState.LOADING;
};
/**
 * Choose limit date for Date filter field. By default, value should be zero day in Unix time.
 * If both absolute and relative limits are passed, absolute has precedent.
 *
 * @param absoluteDateLimit {string} Absolute date in format (yyyy-mm-dd)
 * @param relativeMonthLimit {number} Number of months in the past from present date.
 * @returns Date
 */
export const getDateFilterLimit = (absoluteDateLimit = '', relativeMonthLimit = 0) => {
    let limitDate = unixZeroDay();
    if (isDateFormatValid(absoluteDateLimit) && isDateLimitValid(absoluteDateLimit)) {
        limitDate = new Date(absoluteDateLimit);
    }
    else if (absoluteDateLimit === '' && isMonthLimitValid(relativeMonthLimit)) {
        limitDate = new Date();
        limitDate.setMonth(limitDate.getMonth() - relativeMonthLimit);
    }
    return limitDate;
};
/**
 * Function to check if url contains querystring or not
 *
 * @param url {string} Url that needs to be checked
 * @returns boolean
 * @example isQueryStringExist('http://test.com?dateFrom=20-10-2020')
 */
export const isQueryStringExist = (url) => {
    const pattern = new RegExp(/\?.+=.*/g);
    return pattern.test(url);
};
//# sourceMappingURL=data:application/json;base64,