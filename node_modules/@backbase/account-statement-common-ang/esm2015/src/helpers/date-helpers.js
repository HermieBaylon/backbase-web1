/**
 * The first day Unix date: 01-01-1970
 */
export const unixZeroDay = () => new Date(0);
export const today = () => new Date(new Date().setHours(0, 0, 0, 0));
const getCurrentYear = () => today().getFullYear();
const getCurrentMonth = () => today().getMonth();
const currentDate = () => today().getDate();
const currentDay = () => today().getDay();
const normalizeDay = (day) => (day + 6) % 7;
export const firstDayInLastMonth = () => new Date(getCurrentYear(), getCurrentMonth() - 1, 1);
export const lastDayInLastMonth = () => new Date(today().setDate(0));
export const firstDayInLastQuarter = () => new Date(getCurrentYear(), Math.floor(getCurrentMonth() / 3) * 3 - 3, 1);
export const lastDayInLastQuarter = () => new Date(firstDayInLastQuarter().getFullYear(), firstDayInLastQuarter().getMonth() + 3, 0);
export const firstDayInThisQuarter = () => new Date(getCurrentYear(), Math.floor(getCurrentMonth() / 3) * 3, 1);
export const lastDayInThisQuarter = () => new Date(firstDayInThisQuarter().getFullYear(), firstDayInThisQuarter().getMonth() + 3, 0);
export const firstDayInThisWeek = () => new Date(today().setDate(currentDate() - normalizeDay(currentDay())));
export const lastDayInThisWeek = () => new Date(firstDayInThisWeek().setDate(firstDayInThisWeek().getDate() + 6));
export const firstDayInLastWeek = () => new Date(today().setDate(currentDate() - 7 - normalizeDay(currentDay())));
export const lastDayInLastWeek = () => new Date(firstDayInLastWeek().setDate(firstDayInLastWeek().getDate() + 6));
export const firstDayInThisMonth = () => new Date(getCurrentYear(), getCurrentMonth(), 1);
export const lastDayInThisMonth = () => new Date(getCurrentYear(), getCurrentMonth() + 1, 0);
export const firstDayInThisYear = () => new Date(getCurrentYear(), 0, 1);
export const lastDayInThisYear = () => new Date(getCurrentYear(), 11, 31);
/**
 * Convert Date object into {day, month, year} structure in order to be used with Datepicker component.
 * Note: Months in this structure are counted from 1.
 *
 * @param date  Date object to be converted.
 */
export const convertDateObjToDateStruct = (date) => ({
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    day: date.getDate(),
});
/**
 * Convert the object of type NgbDateStruct into a Date object
 *
 * @param dateObj of type NgbDateStruct
 * @returns Date object
 */
export const convertDateStructToDateObj = (dateStruct) => new Date(dateStruct.year, dateStruct.month - 1, dateStruct.day);
/**
 * Gives the number of months between two dates
 *
 * @param firstDate
 * @param secondDate
 * @returns number of months between firstDate and secondDate
 * @example getMonthDiff(new Date(2020, 1, 1), new Date(2020, 5, 1)); // 4
 */
export const getMonthDiff = (firstDate, secondDate) => {
    const months = (secondDate.getFullYear() - firstDate.getFullYear()) * 12 - firstDate.getMonth() + secondDate.getMonth();
    return months <= 0 ? 0 : months;
};
//# sourceMappingURL=data:application/json;base64,