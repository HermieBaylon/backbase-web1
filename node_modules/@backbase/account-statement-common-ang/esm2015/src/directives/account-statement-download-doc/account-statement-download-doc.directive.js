import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { isQueryStringExist } from '../../helpers/utils';
import * as i0 from "@angular/core";
import * as i1 from "../../services/account-statement-dom-service";
// @dynamic to suppress error with resolving Window type during compilation
export class AccountStatementDownloadDocDirective {
    constructor(domService, renderer) {
        this.domService = domService;
        this.renderer = renderer;
        /**
         * document item which is available for downloading
         */
        this.doc = {};
        /**
         * custom filename for document
         */
        this.filename = '';
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.downloadFailure = new EventEmitter();
    }
    onClick() {
        this.downloadDoc(this.doc);
    }
    downloadDoc(doc) {
        if (doc.url) {
            const url = isQueryStringExist(doc.url) ? `${doc.url}&inline=false` : `${doc.url}?inline=false`;
            this.domService.simulateLinkClick({
                href: url,
            }, this.renderer);
        }
    }
}
AccountStatementDownloadDocDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadDocDirective, deps: [{ token: i1.AccountStatementDomService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
AccountStatementDownloadDocDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementDownloadDocDirective, selector: "[bbAccountStatementDownloadDoc]", inputs: { doc: ["bbAccountStatementDownloadDoc", "doc"], filename: ["bbAccountStatementDownloadDocFilename", "filename"] }, outputs: { downloadFailure: "bbAccountStatementDownloadDocFailure" }, host: { listeners: { "click": "onClick()", "keydown.enter": "onClick()", "keydown.space": "onClick()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementDownloadDocDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementDownloadDoc]',
                }]
        }], ctorParameters: function () { return [{ type: i1.AccountStatementDomService }, { type: i0.Renderer2 }]; }, propDecorators: { doc: [{
                type: Input,
                args: ['bbAccountStatementDownloadDoc']
            }], filename: [{
                type: Input,
                args: ['bbAccountStatementDownloadDocFilename']
            }], downloadFailure: [{
                type: Output,
                args: ['bbAccountStatementDownloadDocFailure']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['keydown.enter']
            }, {
                type: HostListener,
                args: ['keydown.space']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1zdGF0ZW1lbnQtZG93bmxvYWQtZG9jLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWNjb3VudC1zdGF0ZW1lbnQtY29tbW9uLWFuZy9zcmMvZGlyZWN0aXZlcy9hY2NvdW50LXN0YXRlbWVudC1kb3dubG9hZC1kb2MvYWNjb3VudC1zdGF0ZW1lbnQtZG93bmxvYWQtZG9jLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUloRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRXpELDJFQUEyRTtBQUkzRSxNQUFNLE9BQU8sb0NBQW9DO0lBYy9DLFlBQTZCLFVBQXNDLEVBQW1CLFFBQW1CO1FBQTVFLGVBQVUsR0FBVixVQUFVLENBQTRCO1FBQW1CLGFBQVEsR0FBUixRQUFRLENBQVc7UUFiekc7O1dBRUc7UUFDcUMsUUFBRyxHQUE2QixFQUFFLENBQUM7UUFFM0U7O1dBRUc7UUFDNkMsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUU5RCw0REFBNEQ7UUFDWixvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFTLENBQUM7SUFFZ0IsQ0FBQztJQUs3RyxPQUFPO1FBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVPLFdBQVcsQ0FBQyxHQUE2QjtRQUMvQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDWCxNQUFNLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLGVBQWUsQ0FBQztZQUNoRyxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUMvQjtnQkFDRSxJQUFJLEVBQUUsR0FBRzthQUNWLEVBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO1NBQ0g7SUFDSCxDQUFDOztrSUFqQ1Usb0NBQW9DO3NIQUFwQyxvQ0FBb0M7NEZBQXBDLG9DQUFvQztrQkFIaEQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUNBQWlDO2lCQUM1Qzt5SUFLeUMsR0FBRztzQkFBMUMsS0FBSzt1QkFBQywrQkFBK0I7Z0JBS1UsUUFBUTtzQkFBdkQsS0FBSzt1QkFBQyx1Q0FBdUM7Z0JBR0UsZUFBZTtzQkFBOUQsTUFBTTt1QkFBQyxzQ0FBc0M7Z0JBTzlDLE9BQU87c0JBSE4sWUFBWTt1QkFBQyxPQUFPOztzQkFDcEIsWUFBWTt1QkFBQyxlQUFlOztzQkFDNUIsWUFBWTt1QkFBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY2NvdW50U3RhdGVtZW50RG9jdW1lbnQgfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYWNjb3VudC1zdGF0ZW1lbnRzJztcblxuaW1wb3J0IHsgQWNjb3VudFN0YXRlbWVudERvbVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hY2NvdW50LXN0YXRlbWVudC1kb20tc2VydmljZSc7XG5pbXBvcnQgeyBpc1F1ZXJ5U3RyaW5nRXhpc3QgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3V0aWxzJztcblxuLy8gQGR5bmFtaWMgdG8gc3VwcHJlc3MgZXJyb3Igd2l0aCByZXNvbHZpbmcgV2luZG93IHR5cGUgZHVyaW5nIGNvbXBpbGF0aW9uXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJBY2NvdW50U3RhdGVtZW50RG93bmxvYWREb2NdJyxcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3VudFN0YXRlbWVudERvd25sb2FkRG9jRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIGRvY3VtZW50IGl0ZW0gd2hpY2ggaXMgYXZhaWxhYmxlIGZvciBkb3dubG9hZGluZ1xuICAgKi9cbiAgQElucHV0KCdiYkFjY291bnRTdGF0ZW1lbnREb3dubG9hZERvYycpIGRvYzogQWNjb3VudFN0YXRlbWVudERvY3VtZW50ID0ge307XG5cbiAgLyoqXG4gICAqIGN1c3RvbSBmaWxlbmFtZSBmb3IgZG9jdW1lbnRcbiAgICovXG4gIEBJbnB1dCgnYmJBY2NvdW50U3RhdGVtZW50RG93bmxvYWREb2NGaWxlbmFtZScpIGZpbGVuYW1lID0gJyc7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtcmVuYW1lXG4gIEBPdXRwdXQoJ2JiQWNjb3VudFN0YXRlbWVudERvd25sb2FkRG9jRmFpbHVyZScpIGRvd25sb2FkRmFpbHVyZSA9IG5ldyBFdmVudEVtaXR0ZXI8RXJyb3I+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkb21TZXJ2aWNlOiBBY2NvdW50U3RhdGVtZW50RG9tU2VydmljZSwgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5lbnRlcicpXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uc3BhY2UnKVxuICBvbkNsaWNrKCkge1xuICAgIHRoaXMuZG93bmxvYWREb2ModGhpcy5kb2MpO1xuICB9XG5cbiAgcHJpdmF0ZSBkb3dubG9hZERvYyhkb2M6IEFjY291bnRTdGF0ZW1lbnREb2N1bWVudCkge1xuICAgIGlmIChkb2MudXJsKSB7XG4gICAgICBjb25zdCB1cmwgPSBpc1F1ZXJ5U3RyaW5nRXhpc3QoZG9jLnVybCkgPyBgJHtkb2MudXJsfSZpbmxpbmU9ZmFsc2VgIDogYCR7ZG9jLnVybH0/aW5saW5lPWZhbHNlYDtcbiAgICAgIHRoaXMuZG9tU2VydmljZS5zaW11bGF0ZUxpbmtDbGljayhcbiAgICAgICAge1xuICAgICAgICAgIGhyZWY6IHVybCxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5yZW5kZXJlcixcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=