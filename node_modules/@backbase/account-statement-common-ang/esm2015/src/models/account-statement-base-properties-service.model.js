import { __decorate, __param } from "tslib";
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { AccountStatementsPostRequest } from '@backbase/data-ang/account-statements';
import { secondsToMilliseconds } from '../helpers/mappers';
import { modelItemToBoolean, toInteger } from '../helpers/utils';
import { Optional } from '@angular/core';
export const DEFAULT_NOTIFICATION_DISMISS_TIME = 5;
export const DEFAULT_PAGE_SIZE = 24;
export const widgetPropertyNames = {
    /* eslint-disable @typescript-eslint/naming-convention */
    PAGE_SIZE: 'bb.accountStatement.pageSize',
    SORTING_ORDER: 'bb.accountStatement.sortingOrder',
    SORTING_DIRECTION: 'bb.accountStatement.sortingDirection',
    RELATIVE_DATE_LIMIT: 'bb.accountStatement.relativeDateLimit',
    ABSOLUTE_DATE_LIMIT: 'bb.accountStatement.absoluteDateLimit',
    NOTIFICATION_DISMISS_TIME: 'notificationDismissTime',
    SHOW_CATEGORY: 'bb.accountStatement.showCategory',
    /* eslint-enable @typescript-eslint/naming-convention */
};
let AccountStatementBasePropertiesService = class AccountStatementBasePropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
        /* eslint-disable @typescript-eslint/member-ordering */
        this.pageSize$$ = new BehaviorSubject(undefined);
        this.sortingOrder$$ = new BehaviorSubject(undefined);
        this.sortingDirection$$ = new BehaviorSubject(undefined);
        this.relativeDateLimit$$ = new BehaviorSubject(undefined);
        this.absoluteDateLimit$$ = new BehaviorSubject(undefined);
        this.paginationType$$ = new BehaviorSubject(undefined);
        this.notificationDismissTime$$ = new BehaviorSubject(undefined);
        this.showCategory$$ = new BehaviorSubject(undefined);
        this.pageSize$ = this.getWidgetProperty$(this.pageSize$$, this.pageSizeIM$);
        this.sortingOrder$ = this.getWidgetProperty$(this.sortingOrder$$, this.sortingOrderIM$);
        this.sortingDirection$ = this.getWidgetProperty$(this.sortingDirection$$, this.sortingDirectionIM$);
        this.relativeDateLimit$ = this.getWidgetProperty$(this.relativeDateLimit$$, this.relativeDateLimitIM$);
        this.absoluteDateLimit$ = this.getWidgetProperty$(this.absoluteDateLimit$$, this.absoluteDateLimitIM$);
        this.paginationType$ = this.getWidgetProperty$(this.paginationType$$, this.getPaginationTypeIM$());
        this.notificationDismissTime$ = this.getWidgetProperty$(this.notificationDismissTime$$, this.notificationDismissTimePropertyIM$).pipe(map(secondsToMilliseconds));
        this.showCategory$ = this.getWidgetProperty$(this.showCategory$$, this.showCategoryIM$);
    }
    /* eslint-enable @typescript-eslint/member-ordering */
    setPaginationType(value) {
        this.paginationType$$.next(value);
    }
    setPageSize(value) {
        this.pageSize$$.next(value);
    }
    setSortingOrder(value) {
        this.sortingOrder$$.next(value);
    }
    setSortingDirection(value) {
        this.sortingDirection$$.next(value);
    }
    setNotificationDismissTime(value) {
        this.notificationDismissTime$$.next(value);
    }
    setRelativeDateLimit(value) {
        this.relativeDateLimit$$.next(value);
    }
    setAbsoluteDateLimit(value) {
        this.absoluteDateLimit$$.next(value);
    }
    setShowCategory(value) {
        this.showCategory$$.next(value);
    }
    getWidgetProperty$(property$, propertyIM$) {
        return combineLatest([property$, propertyIM$]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    get pageSizeIM$() {
        var _a;
        const defaultValue = DEFAULT_PAGE_SIZE;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.PAGE_SIZE, defaultValue).pipe(map(toInteger))) || of(defaultValue));
    }
    get sortingOrderIM$() {
        var _a;
        const defaultValue = 'date';
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.SORTING_ORDER, defaultValue)) || of(defaultValue);
    }
    get sortingDirectionIM$() {
        var _a;
        const defaultValue = AccountStatementsPostRequest.DirectionEnum.DESC;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.SORTING_DIRECTION, defaultValue)) || of(defaultValue);
    }
    get relativeDateLimitIM$() {
        var _a;
        const defaultValue = 0;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.RELATIVE_DATE_LIMIT, defaultValue).pipe(map(toInteger))) ||
            of(defaultValue));
    }
    get absoluteDateLimitIM$() {
        var _a;
        const defaultValue = '';
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.ABSOLUTE_DATE_LIMIT, defaultValue)) || of(defaultValue);
    }
    get notificationDismissTimePropertyIM$() {
        var _a;
        const defaultValue = DEFAULT_NOTIFICATION_DISMISS_TIME;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.NOTIFICATION_DISMISS_TIME, defaultValue).pipe(map(Number), map(num => (isNaN(num) ? DEFAULT_NOTIFICATION_DISMISS_TIME : num)))) || of(defaultValue));
    }
    get showCategoryIM$() {
        var _a;
        const defaultValue = true;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(widgetPropertyNames.SHOW_CATEGORY, defaultValue).pipe(map(modelItemToBoolean))) ||
            of(defaultValue));
    }
};
AccountStatementBasePropertiesService = __decorate([
    __param(0, Optional())
], AccountStatementBasePropertiesService);
export { AccountStatementBasePropertiesService };
//# sourceMappingURL=data:application/json;base64,