(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@angular/common'), require('@angular/core'), require('@backbase/foundation-ang/core'), require('rxjs'), require('rxjs/operators'), require('@backbase/contact-common-ang'), require('@backbase/data-ang/contact-manager'), require('@angular/router'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/iban-pipe'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/input-email'), require('@backbase/ui-ang/pagination'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/search-box'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/common-error-state'), require('@backbase/ui-ang/avatar'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/ellipsis')) :
    typeof define === 'function' && define.amd ? define('@backbase/contact-manager-widget-ang', ['exports', '@angular/forms', '@angular/common', '@angular/core', '@backbase/foundation-ang/core', 'rxjs', 'rxjs/operators', '@backbase/contact-common-ang', '@backbase/data-ang/contact-manager', '@angular/router', '@backbase/ui-ang/notification', '@backbase/ui-ang/header', '@backbase/ui-ang/icon', '@backbase/ui-ang/button', '@backbase/ui-ang/iban-pipe', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/input-email', '@backbase/ui-ang/pagination', '@backbase/ui-ang/load-button', '@backbase/ui-ang/search-box', '@ng-bootstrap/ng-bootstrap', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/common-error-state', '@backbase/ui-ang/avatar', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/ellipsis'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["contact-manager-widget-ang"] = {}), global.ng.forms, global.ng.common, global.ng.core, global.i1, global.rxjs, global.rxjs.operators, global.i8, global.i1$1, global.ng.router, global.i4, global.i2, global.i3, global.i6, global.i8$1, global.i7, global.i4$1, global.i5, global.i6$1, global.i6$2, global.i7$1, global.i9, global.i10, global.i12, global.i13, global.avatar, global.dropdownMenu, global.ellipsis));
})(this, (function (exports, i1$2, i2$1, i0, i1, rxjs, operators, i8, i1$1, i2$2, i4, i2, i3, i6, i8$1, i7, i4$1, i5, i6$1, i6$2, i7$1, i9, i10, i12, i13, avatar, dropdownMenu, ellipsis) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.AccountCreateType = void 0;
    (function (AccountCreateType) {
        AccountCreateType["IBAN"] = "IBAN";
        AccountCreateType["EMAIL"] = "email";
        AccountCreateType["PHONE"] = "phoneNumber";
        AccountCreateType["ACCOUNT"] = "accountNumber";
    })(exports.AccountCreateType || (exports.AccountCreateType = {}));
    var AccountTypeModelKey;
    (function (AccountTypeModelKey) {
        AccountTypeModelKey["IBAN"] = "IBAN";
        AccountTypeModelKey["BBAN"] = "accountNumber";
    })(AccountTypeModelKey || (AccountTypeModelKey = {}));

    var View;
    (function (View) {
        View["List"] = "LIST";
        View["Detail"] = "DETAIL";
        View["Edit"] = "EDIT";
        View["Select"] = "SELECT";
    })(View || (View = {}));
    /**
     *
     * This service manages the routes of the widget.
     *
     * @see ContactManagerWidgetModule
     * @usageNotes
     *
     * ### Ensure the ContactManagerWidgetModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ContactManagerWidgetModule,
     *   ],
     * })
     * export class ContactManagerWidgetModule {}
     * ```
     *
     * ### Inject this service into your provider
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ContactsNavigationService]
     * })
     *  export class ContactManagerWidgetModule {
     * ```
     */
    var ContactsNavigationService = /** @class */ (function () {
        /**
         * @param {RouterService} routerService router service
         */
        function ContactsNavigationService(routerService) {
            this.routerService = routerService;
            this._currentView = View.List;
        }
        Object.defineProperty(ContactsNavigationService.prototype, "currentView", {
            get: function () {
                return this._currentView;
            },
            set: function (view) {
                this._currentView = view;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Routes to list view
         *
         * @param {?number} page current Page number.
         * @param {?string} query Searched query text
         * @param {'merge' | 'preserve' | ''} queryParamsHandling query hash handling. default value is merge
         * @returns {Promise<boolean>} returns a observable of boolean.
         */
        ContactsNavigationService.prototype.list = function (page, query, queryParamsHandling) {
            if (queryParamsHandling === void 0) { queryParamsHandling = 'merge'; }
            var queryParam = {
                page: page !== undefined && page > -1 ? page : undefined,
            };
            if (query || query === '')
                queryParam.query = query;
            return this.routerService.navigate(['./'], {
                queryParams: Object.assign({}, queryParam),
                queryParamsHandling: queryParamsHandling,
            });
        };
        /**
         * Routes to select view for contact types.
         *
         * @param {string} id - contact ID
         * @returns {Promise<boolean>} Boolean promise.
         */
        ContactsNavigationService.prototype.select = function (id) {
            this.currentView = View.Detail;
            return this.routerService.navigate([id], { queryParamsHandling: 'merge' });
        };
        /**
         * Routes to edit screen of selected contact.
         *
         * @param {string} id - Contact ID, for selected conatct for edit.
         * @param {string} type - selected type of the contact
         * @returns {Promise<boolean>} Boolean promise.
         */
        ContactsNavigationService.prototype.edit = function (id, type) {
            if (type === void 0) { type = exports.AccountCreateType.IBAN; }
            this.currentView = View.Edit;
            return this.routerService.navigate(['edit', id, type], { queryParamsHandling: 'merge' });
        };
        /**
         * Routes to new contact view.
         *
         * @returns {Promise<boolean>} Boolean promise.
         */
        ContactsNavigationService.prototype.newContact = function () {
            this.currentView = View.Select;
            return this.routerService.navigate(['select'], { queryParamsHandling: 'merge' });
        };
        /**
         * Route to new contact edit form when new contact is selected.
         *
         * @param {AccountCreateType} type whether the new contact is of IBAN/Phone/Email/Account type
         * @returns {Promise<boolean>} resolves to true when form is ready
         */
        ContactsNavigationService.prototype.newContactForm = function (type) {
            this.currentView = View.Edit;
            return this.routerService.navigate(['edit', 0, type], { queryParamsHandling: 'merge' });
        };
        return ContactsNavigationService;
    }());
    /** @nocollapse */ ContactsNavigationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsNavigationService, deps: [{ token: i1__namespace.RouterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactsNavigationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsNavigationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsNavigationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.RouterService }]; } });

    var ModalOptions;
    (function (ModalOptions) {
        ModalOptions[ModalOptions["Cancel"] = 0] = "Cancel";
        ModalOptions[ModalOptions["Success"] = 1] = "Success";
    })(ModalOptions || (ModalOptions = {}));
    var defaultListParams = {
        pagination: {
            from: 0,
            size: 4,
            query: '',
        },
        paginationType: i8.LoadMoreMethod.PAGINATION,
    };
    /**
     *
     * This service calls the api calls from data-ang
     *
     * @see ContactManagerWidgetModule
     * @usageNotes
     *
     * ### Ensure the ContactManagerWidgetModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ContactManagerWidgetModule,
     *   ],
     * })
     * export class ContactManagerWidgetModule {}
     * ```
     *
     * ### Inject this service into your provider
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ContactsService]
     * })
     *  export class ContactManagerWidgetModule {
     * ```
     */
    var ContactsService = /** @class */ (function () {
        function ContactsService(dataService) {
            var _this = this;
            this.dataService = dataService;
            // "Events" - Subjects that are used to trigger actions
            this.saveComplete = new rxjs.Subject();
            this.listParams = new rxjs.BehaviorSubject(defaultListParams);
            this.selectedItemId = new rxjs.ReplaySubject(1);
            this.lastSelectedItemId = new rxjs.BehaviorSubject(undefined);
            this.actions$ = rxjs.merge(this.listParams.pipe(operators.map(function (_d) {
                var pagination = _d.pagination, paginationType = _d.paginationType, method = _d.method;
                return ({
                    action: i8.ContactActions.Load,
                    params: pagination,
                    paginationType: paginationType,
                    method: method,
                });
            })), this.saveComplete.pipe(operators.mapTo({ action: i8.ContactActions.Refresh })));
            // The params to use for a list request
            this.items = this.actions$.pipe(operators.scan(function (state, action) { return (Object.assign(Object.assign({}, state), action)); }), operators.map(function (_d) {
                var action = _d.action, params = _d.params, paginationType = _d.paginationType, method = _d.method;
                var isLoadMoreRefresh = action === i8.ContactActions.Refresh && paginationType === i8.LoadMoreMethod.LOAD_MORE;
                return {
                    action: action,
                    paginationType: paginationType,
                    params: Object.assign(Object.assign({}, params), (isLoadMoreRefresh ? { from: 0, size: (params.from + 1) * params.size } : {})),
                    method: method,
                };
            }), operators.switchMap(function (_a) {
                var params = _a.params, method = _a.method, state = __rest(_a, ["params", "method"]);
                return _this.dataService.getContacts(_this.toHttpParams(params), 'response').pipe(operators.map(listFromData), operators.map(function (response) { return (Object.assign(Object.assign(Object.assign(Object.assign({}, response), { params: params }), state), { method: method })); }));
            }), operators.scan(function (acc, curr) {
                var count = curr.count, action = curr.action, paginationType = curr.paginationType, method = curr.method;
                var contacts;
                if (curr.params.from > 0 &&
                    acc.params.query === curr.params.query &&
                    action !== i8.ContactActions.Refresh &&
                    paginationType === i8.LoadMoreMethod.LOAD_MORE &&
                    method !== 'search') {
                    contacts = __spreadArray(__spreadArray([], __read(acc.contacts)), __read(curr.contacts));
                }
                else {
                    contacts = __spreadArray([], __read(curr.contacts));
                }
                return {
                    count: count,
                    contacts: contacts,
                    params: curr.params,
                };
            }), operators.shareReplay());
            this.currentlySelectedItemId = rxjs.combineLatest([
                this.selectedItemId,
                this.lastSelectedItemId,
                this.items,
            ]).pipe(operators.map(function (_d) {
                var _e = __read(_d, 3), id = _e[0], lastItemId = _e[1], items = _e[2];
                var _a, _b, _c;
                return (_c = (_a = id !== null && id !== void 0 ? id : lastItemId) !== null && _a !== void 0 ? _a : (_b = items.contacts[0]) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : null;
            }));
            this.item = rxjs.combineLatest([
                this.currentlySelectedItemId.pipe(operators.distinctUntilChanged()),
                this.items,
            ]).pipe(operators.switchMap(function (_d) {
                var _e = __read(_d, 2), id = _e[0], items = _e[1];
                var _a;
                if (id === '0') {
                    return rxjs.of(undefined);
                }
                var contact = _this.getContactsItem((_a = id !== null && id !== void 0 ? id : _this.lastSelectedItemId.value) !== null && _a !== void 0 ? _a : undefined, items);
                var firstContact = _this.getContactsItem(_this.firstContact(items.contacts), items);
                if (!contact && _this.lastSelectedItemId.value) {
                    var contactId = _this.lastSelectedItemId.value;
                    return _this.dataService.getContact({ contactId: contactId }).pipe(operators.catchError(function () { return rxjs.of(firstContact); }));
                }
                if (contact) {
                    _this.lastSelectedItemId.next(contact.id);
                }
                return rxjs.of(contact || firstContact);
            }), operators.shareReplay());
            this.deleteSuccess = new rxjs.Subject();
            this.deleteError = new rxjs.Subject();
        }
        /**
         * Updates the selected contact.
         *
         * @param {Observable<ItemId | null>} ids contact Id
         */
        ContactsService.prototype.getItemFrom = function (ids) {
            var _this = this;
            ids.subscribe(function (id) { return _this.selectedItemId.next(id); });
        };
        ContactsService.prototype.firstContact = function (contacts) {
            return contacts && contacts.length > 0 ? contacts[0].id : undefined;
        };
        /**
         * Gets the contact in the given list by id.
         *
         * @param {string | undefined} id contact ID
         * @param {ContactList} items all contacts in an array form.
         * @returns {ContactItem | undefined} contact item from list or undefined
         */
        ContactsService.prototype.getContactsItem = function (id, items) {
            if (!(items && items.contacts && items.contacts.length))
                return;
            var item;
            if (id === '0') {
                return undefined;
            }
            else {
                item = items.contacts.find(function (v) { return v.id === id; });
            }
            return item;
        };
        ContactsService.prototype.toHttpParams = function (params) {
            return {
                from: Math.floor(params.from),
                size: Math.floor(params.size),
                query: params.query || undefined,
            };
        };
        /**
         * Update the list of Parameters when changed.
         *
         * @param {?string} query search query
         * @param {?number} page current Page of contact lists
         * @param {?number} size no of records to be shown on one page
         * @param {?string} paginationType type of pagination `load-more` or `pagination`
         * @param {?string} method enumerated value
         */
        ContactsService.prototype.updateItemList = function (query, page, size, paginationType, method) {
            this.listParams.next({
                pagination: {
                    query: query || '',
                    from: page || 0,
                    size: size || 5,
                },
                paginationType: paginationType || i8.LoadMoreMethod.PAGINATION,
                method: method,
            });
        };
        /**
         * Gets the account Type for the contacts.
         *
         * @returns {Observable<string>} Observable of a string with accountType
         */
        ContactsService.prototype.getAccountType = function () {
            var _this = this;
            return this.item.pipe(operators.map(function (contactItem) { return (contactItem ? _this.checkaccountType(contactItem) : exports.AccountCreateType.IBAN); }));
        };
        /**
         * Calls the update API for contacts when updated.
         *
         * @param {ContactItem} item - Updated contact.
         * @returns {Observable<string | undefined>} the observable of updated ID of contact.
         */
        ContactsService.prototype.save = function (item) {
            var _this = this;
            if (isNew(item)) {
                var postItem = item;
                return this.dataService
                    .postContacts({ contactsPostRequestBody: postItem }, 'response')
                    .pipe(operators.map(function (res) { return _this.saveSuccess(res); }));
            }
            else {
                return this.dataService
                    .putContact({ contactId: item.id, contactPutRequestBody: item }, 'response')
                    .pipe(operators.map(function (res) { return _this.editSuccess(res, item.id); }));
            }
        };
        /**
         * Returns the contact Id when updated.
         *
         * @param {HttpResponse<Id>} res save response
         * @returns {string | undefined} contact ID.
         */
        ContactsService.prototype.saveSuccess = function (res) {
            if (res.body && res.body.id) {
                this.saveComplete.next();
                return res.body.id;
            }
            else {
                // error state
                return undefined;
            }
        };
        /**
         * Returns the ID of the contact when edit is successful
         *
         * @param {HttpResponse<ContactUpdateDeleteResponse>} res response of editing a contact.
         * @param {string} id Contact ID.
         * @returns {string | undefined} the ID of contact when edit is successful.
         */
        ContactsService.prototype.editSuccess = function (res, id) {
            if (res.body) {
                this.saveComplete.next();
                return id;
            }
            else {
                // error state
                return undefined;
            }
        };
        /**
         * Calls the deletion API.
         *
         * @param {string} contactId - Contact ID for selected contact.
         * @returns {Subscription} Subscription of deletion api.
         */
        ContactsService.prototype.delete = function (contactId) {
            var _this = this;
            return this.dataService.deleteContact({ contactId: contactId }).subscribe(function () {
                _this.deleteSuccess.next();
                _this.saveComplete.next();
            }, function (error) { return _this.deleteError.next(error); });
        };
        /**
         * Returns the account Type for the given contact
         *
         * @param {ContactItem} item contact object.
         * @returns {string} type of account for one contact.
         */
        ContactsService.prototype.checkaccountType = function (item) {
            if (item) {
                return ((Object.entries(item === null || item === void 0 ? void 0 : item.accounts[0]).find(function (_d) {
                    var _e = __read(_d, 2), key = _e[0], value = _e[1];
                    return Object.values(exports.AccountCreateType).includes(key) && value;
                }) || [])[0] || exports.AccountCreateType.IBAN);
            }
            return exports.AccountCreateType.IBAN;
        };
        return ContactsService;
    }());
    /** @nocollapse */ ContactsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsService, deps: [{ token: i1__namespace$1.ContactsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ContactsHttpService }]; } });
    /**
     * Returns if the contact is new or is being edited.
     *
     * @param {ContactItem} item contact object
     * @returns {boolean} whether the item is new or existing
     */
    function isNew(item) {
        return item.id === undefined || item.id === '';
    }
    /**
     * Returns the contact list in a format.
     *
     * @param {HttpResponse<Contacts>} response http response with data
     * @returns {ContactList} contacts list with total count.
     */
    function listFromData(response) {
        if (response.body === null) {
            throw new Error('Response body not set');
        }
        var headers = response.headers;
        var totalCount = headers.get('X-Total-Count');
        return {
            count: totalCount ? +totalCount : null,
            contacts: response.body,
        };
    }

    /**
     *
     * This service manages the widget properties.
     *
     * @see ContactManagerWidgetModule
     * @usageNotes
     *
     * ### Ensure the ContactManagerWidgetModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ContactManagerWidgetModule,
     *   ],
     * })
     * export class ContactManagerWidgetModule {}
     * ```
     *
     * ### Inject this service to the providers.
     *
     * ```ts
     * @Component({
     *   ...
     *  providers: [
     * {
     *   provide: ContactManagerPreferencesService,
     *   useClass: ContactManagerJourneyPreferencesService,
     * },
     * })
     *  export class ContactManagerWidgetModule {
     * ```
     */
    var ContactManagerPreferencesService = /** @class */ (function () {
        function ContactManagerPreferencesService(itemModel) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            this.itemModel = itemModel;
            this.newContactSubject$ = new rxjs.BehaviorSubject(undefined);
            this.pageSizeSubject$ = new rxjs.BehaviorSubject(undefined);
            this.maxNavPagesSubject$ = new rxjs.BehaviorSubject(undefined);
            this.paginationTypeSubject$ = new rxjs.BehaviorSubject(undefined);
            this.createContactEmailSubject$ = new rxjs.BehaviorSubject(undefined);
            this.createContactIBANSubject$ = new rxjs.BehaviorSubject(undefined);
            this.createContactAccountSubject$ = new rxjs.BehaviorSubject(undefined);
            this.createContactPhoneSubject$ = new rxjs.BehaviorSubject(undefined);
            this.notificationDismissTimeSubject$ = new rxjs.BehaviorSubject(undefined);
            this.newContactItemModel = (_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('newContact').pipe(operators.map(i8.toBoolean));
            this.pageSizeItemModel = (_b = this.itemModel) === null || _b === void 0 ? void 0 : _b.property('pageSize').pipe(operators.map(i8.toInteger));
            this.maxNavPagesItemModel = (_c = this.itemModel) === null || _c === void 0 ? void 0 : _c.property('maxNavPages').pipe(operators.map(i8.toInteger));
            this.paginationTypeItemModel = (_d = this.itemModel) === null || _d === void 0 ? void 0 : _d.property('paginationType');
            this.createContactEmailItemModel = (_e = this.itemModel) === null || _e === void 0 ? void 0 : _e.property('createContactEmail').pipe(operators.map(i8.toBoolean));
            this.createContactIBANItemModel = (_f = this.itemModel) === null || _f === void 0 ? void 0 : _f.property('createContactIBAN').pipe(operators.map(i8.toBoolean));
            this.createContactAccountItemModel = (_g = this.itemModel) === null || _g === void 0 ? void 0 : _g.property('createContactAccount').pipe(operators.map(i8.toBoolean));
            this.createContactPhoneItemModel = (_h = this.itemModel) === null || _h === void 0 ? void 0 : _h.property('createContactPhone').pipe(operators.map(i8.toBoolean));
            this.notificationDismissTimeItemModel = (_j = this.itemModel) === null || _j === void 0 ? void 0 : _j.property('notificationDismissTime').pipe(operators.map(i8.toInteger));
            this.newContact$ = this.getProperty(this.newContactSubject$, this.newContactItemModel);
            this.pageSize$ = this.getProperty(this.pageSizeSubject$, this.pageSizeItemModel);
            this.maxNavPages$ = this.getProperty(this.maxNavPagesSubject$, this.maxNavPagesItemModel);
            this.paginationType$ = this.getProperty(this.paginationTypeSubject$, this.paginationTypeItemModel);
            this.createContactEmail$ = this.getProperty(this.createContactEmailSubject$, this.createContactEmailItemModel);
            this.createContactIBAN$ = this.getProperty(this.createContactIBANSubject$, this.createContactIBANItemModel);
            this.createContactAccount$ = this.getProperty(this.createContactAccountSubject$, this.createContactAccountItemModel);
            this.createContactPhone$ = this.getProperty(this.createContactPhoneSubject$, this.createContactPhoneItemModel);
            this.notificationDismissTime$ = this.getProperty(this.notificationDismissTimeSubject$, this.notificationDismissTimeItemModel);
        }
        ContactManagerPreferencesService.prototype.getProperty = function (input$, itemModel) {
            return rxjs.combineLatest([input$, itemModel]).pipe(operators.map(function (_k) {
                var _l = __read(_k, 2), value = _l[0], valueIM = _l[1];
                return (value === undefined ? valueIM : value);
            }));
        };
        /**
         *  Update the new Contact value
         *
         * @param {boolean} value selected value
         */
        ContactManagerPreferencesService.prototype.setNewContact = function (value) {
            this.newContactSubject$.next(value);
        };
        /**
         *  Update the pageSize value
         *
         * @param {number} value selected value
         */
        ContactManagerPreferencesService.prototype.setPageSize = function (value) {
            this.pageSizeSubject$.next(value);
        };
        /**
         *  Update the maxNavPages value
         *
         * @param {number} value selected value
         */
        ContactManagerPreferencesService.prototype.setMaxNavPages = function (value) {
            this.maxNavPagesSubject$.next(value);
        };
        /**
         *  Update the paginationType value
         *
         * @param {string} value selected value
         */
        ContactManagerPreferencesService.prototype.setPaginationType = function (value) {
            this.paginationTypeSubject$.next(value);
        };
        /**
         *  Update the notificationDissmissTime value
         *
         * @param {number} value selected value
         */
        ContactManagerPreferencesService.prototype.setNotificationDismissTime = function (value) {
            this.notificationDismissTimeSubject$.next(value);
        };
        /**
         *  Update the createContactEmail value
         *
         * @param {boolean} value selected value
         */
        ContactManagerPreferencesService.prototype.setCreateContactEmail = function (value) {
            this.createContactEmailSubject$.next(value);
        };
        /**
         *  Update the createContactIBAN value
         *
         * @param {boolean} value selected value
         */
        ContactManagerPreferencesService.prototype.setCreateContactIBAN = function (value) {
            this.createContactIBANSubject$.next(value);
        };
        /**
         *  Update the createContactAccount value
         *
         * @param {boolean} value selected value
         */
        ContactManagerPreferencesService.prototype.setCreateContactAccount = function (value) {
            this.createContactAccountSubject$.next(value);
        };
        /**
         *  Update the createContactPhone value
         *
         * @param {boolean} value selected value
         */
        ContactManagerPreferencesService.prototype.setCreateContactPhone = function (value) {
            this.createContactPhoneSubject$.next(value);
        };
        return ContactManagerPreferencesService;
    }());
    /** @nocollapse */ ContactManagerPreferencesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerPreferencesService, deps: [{ token: i1__namespace.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactManagerPreferencesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerPreferencesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerPreferencesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    /**
     * This is an extension slot to be used for customizing delete confirmation dialog
     *
     * @example
     *
     * ```html
     * <ng-template bbContactsDeleteConfirmationCustomizable let-hostRef let-context="context">
     *   <div class="modal-header">
     *     <h4 i18n="@@contact-manager-detail.header.delete.contact" class="modal-title" data-role="delete-contact-label">
     *       Delete Contact
     *     </h4>
     *   </div>
     *   <div i18n="@@contact-manager-detail.delete.confirmation" class="modal-body" role="alert">
     *     <p class="break-word">
     *       Are you sure you want to delete {{ hostRef.item.name }} from your contacts? This action cannot be undone.
     *     </p>
     *   </div>
     *   <div class="bb-button-bar bb-button-bar--reverse modal-footer">
     *     <button
     *       i18n="@@contact-manager-detail.button.cancel"
     *       type="button"
     *       class="bb-button-bar__button"
     *       bbButton
     *       color="secondary"
     *       (click)="context.dismiss()"
     *     >
     *       Not now
     *     </button>
     *     <button
     *       i18n="@@contact-manager-detail.button.delete"
     *       type="button"
     *       class="bb-button-bar__button"
     *       bbButton
     *       color="danger"
     *       data-role="confirm-delete-button"
     *       (click)="hostRef.deleteContact()"
     *     >
     *       Delete
     *     </button>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsDeleteConfirmationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsDeleteConfirmationCustomizableDirective, _super);
        function ContactsDeleteConfirmationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsDeleteConfirmationCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsDeleteConfirmationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDeleteConfirmationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsDeleteConfirmationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDeleteConfirmationCustomizableDirective, selector: "[bbContactsDeleteConfirmationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDeleteConfirmationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsDeleteConfirmationCustomizable]',
                    }]
            }] });

    /**
     * Displays a detail of contact selected.
     *
     * The following extension slots are available in this component:
     *  - `ContactsDetailCustomizableDirective`
     *
     * @see ContactsDetailCustomizableDirective
     * @usageNotes
     *
     * ### Display a details of contacts
     *
     * ```html
     * <bb-contacts-detail
     *    [showDetail]="false"
     *    [item]="hostRef.item"
     *    [type]="hostRef.type"
     *    (deleteContactsItem)="hostRef.deleteItemEmit()"
     *    (editContactsItem)="hostRef.editContactsItem()"
     * ></bb-contacts-detail>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsDetailComponent = /** @class */ (function () {
        function ContactsDetailComponent(service) {
            this.service = service;
            this.hostRef = this;
            /**
             * Wether to show user details or not
             */
            this.showDetail = true;
            /**
             * Event emitted when contact is edited
             */
            this.editContactsItem = new i0.EventEmitter();
            /**
             * Event emitted when contact is deleted
             */
            this.deleteContactsItem = new i0.EventEmitter();
            this.isDeleteConfirmOpened = false;
        }
        /**
         * OnInit - lifecycle hook.
         */
        ContactsDetailComponent.prototype.ngOnInit = function () {
            if (this.item === undefined) {
                throw new Error('`item` input is required in `bb-contacts-detail` component');
            }
        };
        /**
         *  Will emit the event when contact is edited.
         *
         * @param {string} id the contact id that has to be edited.
         */
        ContactsDetailComponent.prototype.edit = function (id) {
            this.editContactsItem.emit({ id: id, type: this.type });
        };
        /**
         * opens modal for delete confirmation
         */
        ContactsDetailComponent.prototype.openDeleteModal = function () {
            this.isDeleteConfirmOpened = true;
        };
        /**
         * event handler for confirming delete
         */
        ContactsDetailComponent.prototype.onConfirmDelete = function () {
            this.deleteContactsItem.emit(this.item.id);
            this.isDeleteConfirmOpened = false;
        };
        /**
         * event handler for rejecting delete
         */
        ContactsDetailComponent.prototype.onCancelDelete = function () {
            this.isDeleteConfirmOpened = false;
        };
        return ContactsDetailComponent;
    }());
    /** @nocollapse */ ContactsDetailComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDetailComponent, deps: [{ token: ContactsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactsDetailComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDetailComponent, selector: "bb-contacts-detail", inputs: { type: "type", showDetail: "showDetail", item: "item" }, outputs: { editContactsItem: "editContactsItem", deleteContactsItem: "deleteContactsItem" }, ngImport: i0__namespace, template: "<ng-container bbContactsDetailCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"item\"></ng-container>\n<ng-template bbContactsDetailCustomizable let-hostRef let-item=\"item\">\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-stack bb-stack--align-bottom\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div class=\"bb-block\" data-role=\"contact-details-info-name\">\n          <span\n            class=\"d-none\"\n            data-role=\"create-contact-label\"\n            aria-hidden=\"true\"\n            i18n=\"Create contact heading | Title shown when user is in create contact@@contact-manager-detail.create.heading\"\n            #heading\n          >\n            Create contact\n          </span>\n          <bb-header-ui\n            data-role=\"create-new-contact-label\"\n            headingType=\"h3\"\n            headingClasses=\"break-word\"\n            [heading]=\"hostRef.item.name || heading.textContent\"\n          >\n          </bb-header-ui>\n        </div>\n      </div>\n      <div *ngIf=\"hostRef.item.name\" class=\"bb-stack__item bb-stack__item--push-right\">\n        <span bbTooltip=\"Edit\" triggers=\"hover focus\" i18n-bbTooltip=\"@@contact-manager-detail.button.edit.tooltip\">\n          <button\n            data-role=\"contact-edit-button\"\n            bbButton\n            circle=\"true\"\n            color=\"link\"\n            (click)=\"hostRef.edit(hostRef.item.id)\"\n            i18n=\"Edit Contact Button | Button for editing an existing contact@@contact-manager-detail.button.edit\"\n            aria-label=\"Edit Contact\"\n            i18n-aria-label=\"Edit Contact | Aria label edit contact menu@@contact-manager-detail.label.actions.edit\"\n          >\n            <bb-icon-ui name=\"edit\" color=\"dark\"></bb-icon-ui>\n          </button>\n        </span>\n        <span bbTooltip=\"Delete\" triggers=\"hover focus\" i18n-bbTooltip=\"@@contact-manager-detail.button.delete.tooltip\">\n          <button\n            bbButton\n            circle=\"true\"\n            color=\"link\"\n            (click)=\"hostRef.openDeleteModal()\"\n            i18n=\"Delete Contact Button | Button for deleting an existing contact@@contact-manager-detail.detail.button.delete\"\n            data-role=\"delete-button\"\n            aria-label=\"Delete Contact\"\n            i18n-aria-label=\"Delete Contact | Aria label delete contact menu@@contact-manager-detail.label.actions.delete\"\n          >\n            <bb-icon-ui name=\"delete\" color=\"dark\"></bb-icon-ui>\n          </button>\n        </span>\n      </div>\n    </div>\n    <hr />\n  </div>\n  <div class=\"bb-lock bb-lock bb-block--lg\" *ngIf=\"hostRef.showDetail\">\n    <span\n      class=\"d-none\"\n      aria-hidden=\"true\"\n      i18n=\"Account number | Heading for account number or IBAN or Email or Phone@@contact-manager-detail.label.account.type.heading\"\n      #heading\n    >\n      {hostRef.type, select, IBAN {IBAN} accountNumber {Account number} email { Email} phoneNumber { Phone number} other\n      {IBAN} }\n    </span>\n    <bb-header-ui headingType=\"h5\" [heading]=\"heading.textContent\" class=\"bb-block bb-block-md\"></bb-header-ui>\n    <div class=\"bb-bock bb-block-md\" data-role=\"contact-details-info\">\n      <ng-container *ngIf=\"hostRef.item?.accounts[0] as account\">\n        <ng-container *ngIf=\"hostRef.type === 'IBAN'; else notIban\">\n          {{ account[hostRef.type] | bbIban }}\n        </ng-container>\n        <ng-template #notIban>{{ account[hostRef.type] }} </ng-template>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container bbContactsDeleteConfirmationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbContactsDeleteConfirmationCustomizable let-hostRef>\n  <bb-confirm-action-dialog\n    [isOpen]=\"hostRef.isDeleteConfirmOpened\"\n    [confirmButtonColor]=\"'danger'\"\n    (confirm)=\"hostRef.onConfirmDelete()\"\n    (cancel)=\"hostRef.onCancelDelete()\"\n  >\n    <span title i18n=\"@@contact-manager-detail.header.delete.contact\" data-role=\"delete-contact-label\"\n      >Delete Contact</span\n    >\n    <span body i18n=\"@@contact-manager-detail.delete.confirmation\">\n      Are you sure you want to delete {{ hostRef.item.name }} from your contacts? This action cannot be undone.\n    </span>\n    <span cancelButtonLabel i18n=\"@@contact-manager-detail.button.cancel\">Not now</span>\n    <span confirmButtonLabel i18n=\"@@contact-manager-detail.button.delete\" data-role=\"confirm-delete-button\"\n      >Delete</span\n    >\n  </bb-confirm-action-dialog>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.ConfirmActionDialogComponent; }), selector: "bb-confirm-action-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ContactsDetailCustomizableDirective; }), selector: "[bbContactsDetailCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return ContactsDeleteConfirmationCustomizableDirective; }), selector: "[bbContactsDeleteConfirmationCustomizable]" }], pipes: { "bbIban": i0__namespace.forwardRef(function () { return i8__namespace$1.BbIbanPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDetailComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contacts-detail',
                        templateUrl: './contacts-detail.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ContactsService }]; }, propDecorators: { type: [{
                    type: i0.Input
                }], showDetail: [{
                    type: i0.Input
                }], item: [{
                    type: i0.Input
                }], editContactsItem: [{
                    type: i0.Output
                }], deleteContactsItem: [{
                    type: i0.Output
                }] } });
    /**
     * This is an extension slot to be used for customizing an item of the contact details.
     *
     * @usageNotes
     *
     * ### Display a contact details
     *
     * ```html
     * <ng-template bbContactsDetailCustomizable let-hostRef let-item="item">
     * <div class="bb-block bb-block--xl">
     *   <div class="bb-stack bb-stack--align-bottom">
     *     <div class="bb-stack__item bb-stack__item--fill">
     *       <div
     *         class="bb-block"
     *         data-role="contact-details-info-name"
     *       >
     *         <span
     *           class="d-none"
     *           data-role="create-contact-label"
     *           aria-hidden="true"
     *           i18n-heading="Create contact heading | Title shown when user is in
     *                        create contact@@contact-manager-detail.create.heading"
     *          #heading
     *         >
     *           Create contact
     *         </span>
     *         <bb-header-ui
     *           data-role="create-new-contact-label"
     *           headingType="h3"
     *           [heading]="hostRef.item.name || heading.textContent"
     *         >
     *         </bb-header-ui>
     *       </div>
     *     </div>
     *     <div
     *      *ngIf="hostRef.item.name"
     *       class="bb-stack__item bb-stack__item--push-right"
     *     >
     *       <span
     *         bbTooltip="Edit"
     *         triggers="hover focus"
     *       >
     *         <button
     *           data-role="contact-edit-button"
     *           bbButton
     *           circle="true"
     *           color="link"
     *           (click)="hostRef.edit(hostRef.item.id)"
     *           i18n="Edit Contact Button | Button for editing an existing contact@@contact-manager-detail.button.edit"
     *           aria-label="Edit Contact"
     *           i18n-aria-label="Edit Contact | Aria label edit contact menu@@contact-manager-detail.label.actions.edit"
     *         >
     *           <bb-icon-ui
     *             name="edit"
     *             color="dark"
     *           ></bb-icon-ui>
     *         </button>
     *       </span>
     *       <span
     *         bbTooltip="Delete"
     *         triggers="hover focus"
     *       >
     *         <button data-role="contact-delete-button"
     *           bbButton
     *           circle="true"
     *           color="link"
     *           (click)="hostRef.openDeleteModal(hostRef.modalContent)"
     *           i18n="Delete Contact Button | Button for deleting an existing contact@@contact-manager-detail.detail.button.delete"
     *           data-role="delete-button"
     *           aria-label="Delete Contact"
     *           i18n-aria-label="Delete Contact | Aria label delete contact menu@@contact-manager-detail.label.actions.delete"
     *         >
     *           <bb-icon-ui name="delete" color="dark"></bb-icon-ui>
     *         </button>
     *       </span>
     *     </div>
     *   </div>
     *   <hr/>
     * </div>
     * <div
     *   class="bb-lock bb-lock bb-block--lg"
     *  *ngIf="hostRef.showDetail"
     * >
     *   <span
     *     class="d-none"
     *     aria-hidden="true"
     *     i18n="Account number | Heading for account number or
     *      IBAN or Email or Phone@@contact-manager-detail.label.account.type.heading"
     *     #heading
     *   >
     *    {hostRef.type, select, IBAN {IBAN}  accountNumber {Account number} email { Email} phoneNumber { Phone number} other {IBAN} }
     *   </span>
     *   <bb-header-ui
     *     headingType="h5"
     *     [heading]="heading.textContent"
     *     class="bb-block bb-block-md"
     *   >
     *   </bb-header-ui>
     *   <div
     *     class="bb-bock bb-block-md"
     *     data-role="contact-details-info-alias"
     *   >
     *   <span *ngIf="hostRef.item?.accounts[0] as account">
     *     {{ account[hostRef.type] }}
     *   </span>
     *   </div>
     * </div>
     *</ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsDetailCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsDetailCustomizableDirective, _super);
        function ContactsDetailCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsDetailCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsDetailCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDetailCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsDetailCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDetailCustomizableDirective, selector: "[bbContactsDetailCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDetailCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsDetailCustomizable]',
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing success notification after deleting a contact
     *
     * @example
     *
     * ```html
     * <ng-template bbContactsDeleteSuccessNotificationCustomizable>
     *   <span
     *     i18n="Notification delete success message@@contact-manager-detail-container.notification.delete.success"
     *     role="alert"
     *     aria-atomic="true"
     *   >
     *     Contact was deleted succesfully
     *   </span>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsDeleteSuccessNotificationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsDeleteSuccessNotificationCustomizableDirective, _super);
        function ContactsDeleteSuccessNotificationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsDeleteSuccessNotificationCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsDeleteSuccessNotificationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDeleteSuccessNotificationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsDeleteSuccessNotificationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDeleteSuccessNotificationCustomizableDirective, selector: "[bbContactsDeleteSuccessNotificationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDeleteSuccessNotificationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsDeleteSuccessNotificationCustomizable]',
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing error notification after deleting a contact
     *
     * @example
     *
     * ```html
     * <ng-template bbContactsDeleteErrorNotificationCustomizable>
     *   <span
     *     i18n="Notification delete failed error message@@contact-manager-detail-container.notification.delete.error"
     *     role="alert"
     *     aria-atomic="true"
     *   >
     *     Error deleting contact
     *   </span>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsDeleteErrorNotificationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsDeleteErrorNotificationCustomizableDirective, _super);
        function ContactsDeleteErrorNotificationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsDeleteErrorNotificationCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsDeleteErrorNotificationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDeleteErrorNotificationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsDeleteErrorNotificationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDeleteErrorNotificationCustomizableDirective, selector: "[bbContactsDeleteErrorNotificationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDeleteErrorNotificationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsDeleteErrorNotificationCustomizable]',
                    }]
            }] });

    /**
     * Container component for showing contact details.
     *
     * @usageNotes
     *
     * ### Display details of the contact.
     *
     * ```html
     * <bb-contacts-detail-container></bb-contacts-detail-container>
     * ```
     *
     * ### Additionally use the container component in routing.
     *
     * ```typescript
     * const routes: [
     * {
     *  path: '',
     *  component: ContactsDetailContainerComponent
     * }]
     *
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsDetailContainerComponent = /** @class */ (function () {
        function ContactsDetailContainerComponent(service, route, navigation, notificationService, propertiesService) {
            this.service = service;
            this.route = route;
            this.navigation = navigation;
            this.notificationService = notificationService;
            this.propertiesService = propertiesService;
            this.hostRef = this;
            this.itemId = this.route.paramMap.pipe(operators.map(function (params) { return params.get('id'); }));
            this.item = this.service.item; //.pipe(map(item => this.fromService(item)));
            this.notificationTimeout$ = this.propertiesService.notificationDismissTime$;
            this.contactTypeId$ = this.service.getAccountType();
            this.subscriptions = new rxjs.Subscription();
            service.getItemFrom(this.itemId);
        }
        /**
         * onInit - lifecycle hook
         */
        ContactsDetailContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscriptions.add(this.itemId.subscribe(function (itemId) {
                if (!itemId) {
                    _this.navigation.currentView = View.List;
                }
                else {
                    _this.navigation.currentView = View.Detail;
                }
            }));
            this.subscriptions.add(this.service.deleteSuccess
                .pipe(operators.withLatestFrom(this.notificationTimeout$), operators.map(function (_a) {
                var _b = __read(_a, 2), response = _b[0], timeout = _b[1];
                return ({ timeout: timeout });
            }))
                .subscribe(function (_a) {
                var timeout = _a.timeout;
                return _this.notificationService.showNotification({
                    header: _this.deleteSuccessNotificationTemplate,
                    message: '',
                    modifier: 'success',
                    ttl: timeout,
                });
            }));
            this.subscriptions.add(this.service.deleteError
                .pipe(operators.withLatestFrom(this.notificationTimeout$), operators.map(function (_a) {
                var _b = __read(_a, 2), error = _b[0], timeout = _b[1];
                return ({ error: error, timeout: timeout });
            }))
                .subscribe(function (_a) {
                var error = _a.error, timeout = _a.timeout;
                return _this.notificationService.showNotification({
                    header: _this.deleteErrorNotificationTemplate,
                    message: '',
                    modifier: 'error',
                    ttl: timeout,
                });
            }));
        };
        /**
         * OnDestroy- lifecycle hook Unsubscribing the subscription.
         */
        ContactsDetailContainerComponent.prototype.ngOnDestroy = function () {
            this.subscriptions.unsubscribe();
        };
        /**
         *  Emits the output when edit is clicked.
         *
         * @param {SelectContactEvent} accountData - An object which contains id and type of contact to be edited.
         */
        ContactsDetailContainerComponent.prototype.edit = function (accountData) {
            this.navigation.edit(accountData.id, accountData.type);
        };
        /**
         * Method that calls the delete service and returns to list view.
         *
         * @param {string} id - contact ID which has to be deleted.
         */
        ContactsDetailContainerComponent.prototype.deleteContactsItem = function (id) {
            this.service.delete(id);
            this.navigation.list();
            this.navigation.currentView = View.List;
        };
        return ContactsDetailContainerComponent;
    }());
    /** @nocollapse */ ContactsDetailContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDetailContainerComponent, deps: [{ token: ContactsService }, { token: i2__namespace$2.ActivatedRoute }, { token: ContactsNavigationService }, { token: i4__namespace.NotificationService }, { token: ContactManagerPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactsDetailContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDetailContainerComponent, selector: "bb-contacts-detail-container", viewQueries: [{ propertyName: "deleteSuccessNotificationTemplate", first: true, predicate: ["deleteSuccessNotificationTemplate"], descendants: true }, { propertyName: "deleteErrorNotificationTemplate", first: true, predicate: ["deleteErrorNotificationTemplate"], descendants: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-detail\n    [item]=\"item\"\n    [type]=\"contactTypeId$ | async\"\n    (editContactsItem)=\"edit($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  >\n  </bb-contacts-detail>\n</ng-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-detail-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #deleteSuccessNotificationTemplate>\n  <ng-container bbContactsDeleteSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteSuccessNotificationCustomizable>\n    <span\n      i18n=\"Notification delete success message@@contact-manager-detail-container.notification.delete.success\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Contact was deleted succesfully\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #deleteErrorNotificationTemplate>\n  <ng-container bbContactsDeleteErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteErrorNotificationCustomizable>\n    <span\n      i18n=\"Notification delete failed error message@@contact-manager-detail-container.notification.delete.error\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error deleting contact\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: ContactsDetailComponent, selector: "bb-contacts-detail", inputs: ["type", "showDetail", "item"], outputs: ["editContactsItem", "deleteContactsItem"] }, { type: i7__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ContactsDeleteSuccessNotificationCustomizableDirective, selector: "[bbContactsDeleteSuccessNotificationCustomizable]" }, { type: ContactsDeleteErrorNotificationCustomizableDirective, selector: "[bbContactsDeleteErrorNotificationCustomizable]" }], pipes: { "async": i2__namespace$1.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsDetailContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contacts-detail-container',
                        templateUrl: './contacts-detail-container.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ContactsService }, { type: i2__namespace$2.ActivatedRoute }, { type: ContactsNavigationService }, { type: i4__namespace.NotificationService }, { type: ContactManagerPreferencesService }]; }, propDecorators: { deleteSuccessNotificationTemplate: [{
                    type: i0.ViewChild,
                    args: ['deleteSuccessNotificationTemplate']
                }], deleteErrorNotificationTemplate: [{
                    type: i0.ViewChild,
                    args: ['deleteErrorNotificationTemplate']
                }] } });

    var emptyIbanCountriesList = {};
    var BB_CONTACT_FORM_ADDITIONS_TOKEN = new i0.InjectionToken('BB_CONTACT_FORM_ADDITIONS_TOKEN');
    var ContactConfigProviders = [
        {
            provide: BB_CONTACT_FORM_ADDITIONS_TOKEN,
            useValue: { additions: undefined },
        },
        {
            provide: i8.BB_CONTACT_IBAN_COUNTRIES_LIST,
            useValue: emptyIbanCountriesList,
        },
    ];

    /**
     * Displays a contact form.
     *
     * The following extension slots are available in this component:
     *  - `ContactsFormCustomizableDirective`
     *
     * @see ContactsFormCustomizableDirective
     * @usageNotes
     *
     * ### Display a form for adding / editing the contact form.
     *
     * ```html
     *  <bb-contacts-form
     *   [item]="item"
     *   [type]="itemType$ | async"
     *   (save)="save($event)"
     *   (cancelEdit)="cancelEdit($event)"
     *   (backEvent)="back($event)"
     *   (deleteContactsItem)="deleteContactsItem($event)"
     * ></bb-contacts-form>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsFormComponent = /** @class */ (function () {
        function ContactsFormComponent(fb, vcRef, platformId, formAdditionsConfig) {
            this.fb = fb;
            this.vcRef = vcRef;
            this.platformId = platformId;
            this.formAdditionsConfig = formAdditionsConfig;
            this.hostRef = this;
            this.submitted = false;
            this.ibanMask = i8.IbanMask;
            /**
             * Controls whether form can be submitted
             */
            this.disabledSubmit = false;
            /**
             * Event emitted when contact edit is saved
             */
            this.save = new i0.EventEmitter();
            /**
             * Event emitted when contact edit is cancelled
             */
            this.cancelEdit = new i0.EventEmitter();
            /**
             * Event emitted when user clicks back
             */
            this.backEvent = new i0.EventEmitter();
            /**
             * Event emitted when contact is deleted
             */
            this.deleteContactsItem = new i0.EventEmitter();
            /**
             * Contact account Type reference.
             */
            this.createAccountTypeRef = exports.AccountCreateType;
        }
        /**
         * OnInit - lifecycle hook.
         */
        ContactsFormComponent.prototype.ngOnInit = function () {
            if (this.item === undefined) {
                throw new Error('`item` input is required in `bb-contact-form` component');
            }
        };
        /**
         * AfterViewInt- lifecycle hook.
         */
        ContactsFormComponent.prototype.ngAfterViewInit = function () {
            var _a;
            if (i2$1.isPlatformBrowser(this.platformId)) {
                (_a = this.vcRef.element.nativeElement.querySelector('input')) === null || _a === void 0 ? void 0 : _a.focus();
            }
        };
        /**
         * OnChanges - lifecycle hook.
         *
         * @param {SimpleChanges} changes angular SimpleChanges object
         */
        ContactsFormComponent.prototype.ngOnChanges = function (changes) {
            if (changes.type) {
                this.submitted = false;
                this.contactsForm = this.createFormGroupInstance();
            }
        };
        ContactsFormComponent.prototype.createFormGroupInstance = function () {
            var additions = Object.assign({}, this.formAdditionsConfig).additions;
            return this.fb.group(Object.assign({ name: [this.item.name], IBAN: [this.item.IBAN], accountNumber: [this.item.accountNumber], email: [this.item.email], phoneNumber: [this.item.phoneNumber] }, (additions ? { additions: this.fb.group(additions) } : {})));
        };
        /**
         * saveItem - method that emits the data when saved.
         */
        ContactsFormComponent.prototype.saveItem = function () {
            this.submitted = true;
            if (this.contactsForm.valid) {
                this.save.emit(Object.assign(Object.assign({}, this.item), (this.contactsForm ? this.contactsForm.value : {})));
            }
            else {
                this.contactsForm.markAllAsTouched();
            }
        };
        /**
         * emits the id of the contact that has cancelled.
         */
        ContactsFormComponent.prototype.cancel = function () {
            this.cancelEdit.emit(this.item.id);
        };
        /**
         * emits the id, when back is clicked.
         */
        ContactsFormComponent.prototype.back = function () {
            this.backEvent.emit(this.item.id);
        };
        Object.defineProperty(ContactsFormComponent.prototype, "name", {
            get: function () {
                return this.contactsForm.get('name');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactsFormComponent.prototype, "iban", {
            get: function () {
                return this.contactsForm.get('IBAN');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactsFormComponent.prototype, "accountNumber", {
            get: function () {
                return this.contactsForm.get('accountNumber');
            },
            enumerable: false,
            configurable: true
        });
        /**
         *  the id of the contact is emitted when deleted.
         */
        ContactsFormComponent.prototype.deleteItemEmit = function () {
            this.deleteContactsItem.emit(this.item.id);
        };
        return ContactsFormComponent;
    }());
    /** @nocollapse */ ContactsFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsFormComponent, deps: [{ token: i1__namespace$2.FormBuilder }, { token: i0__namespace.ViewContainerRef }, { token: i0.PLATFORM_ID }, { token: BB_CONTACT_FORM_ADDITIONS_TOKEN, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactsFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormComponent, selector: "bb-contacts-form", inputs: { item: "item", type: "type", disabledSubmit: "disabledSubmit" }, outputs: { save: "save", cancelEdit: "cancelEdit", backEvent: "backEvent", deleteContactsItem: "deleteContactsItem" }, usesOnChanges: true, ngImport: i0__namespace, template: "<ng-container bbContactsFormCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"item\"></ng-container>\n<ng-template bbContactsFormCustomizable let-hostRef>\n  <bb-contacts-detail\n    [showDetail]=\"false\"\n    [item]=\"hostRef.item\"\n    [type]=\"hostRef.type\"\n    (deleteContactsItem)=\"hostRef.deleteItemEmit()\"\n  ></bb-contacts-detail>\n  <bb-loading-indicator-ui *ngIf=\"hostRef.disabledSubmit\"></bb-loading-indicator-ui>\n  <form\n    *ngIf=\"hostRef.contactsForm\"\n    [hidden]=\"hostRef.disabledSubmit\"\n    (submit)=\"hostRef.saveItem()\"\n    [formGroup]=\"hostRef.contactsForm\"\n    class=\"bb-block bb-block--xl\"\n  >\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--xl col-12\" data-role=\"contact-account-info-account-name1\">\n        <bb-input-text-ui\n          id=\"bb-create-contact-name\"\n          data-role=\"new-contact-name\"\n          label=\"Name\"\n          i18n-label=\"Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name\"\n          [formControl]=\"hostRef.contactsForm.controls.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          class=\"position-absolute\"\n          role=\"alert\"\n          [showErrors]=\"hostRef.contactsForm.controls.name.errors?.required && hostRef.contactsForm.controls.name.touched\"\n        >\n          <span\n            i18n=\"\n                Contacts name required error text | Text for contacts detail component name required\n                error@@contact-manager-form.label.nameRequired\n              \"\n            data-role=\"missing-account-name\"\n          >\n            Name is required\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--xl col-12\">\n        <ng-container [ngSwitch]=\"hostRef.type\">\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\">\n            <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\">\n            <ng-container *ngTemplateOutlet=\"email\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\">\n            <ng-container *ngTemplateOutlet=\"phone\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\">\n            <ng-container *ngTemplateOutlet=\"bban\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <div class=\"bb-button-bar bb-button-bar--spacing-sm\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        color=\"primary\"\n        name=\"save\"\n        data-role=\"save-button\"\n        i18n=\"Save current form | Save button text for saving a contact item@@contact-manager-form.button.save\"\n        [disabled]=\"hostRef.submitted && hostRef.contactsForm.invalid || hostRef.disabledSubmit\"\n      >\n        Save\n      </button>\n      <button\n        bbButton\n        color=\"secondary\"\n        type=\"button\"\n        class=\"bb-button-bar__button\"\n        name=\"back\"\n        data-role=\"contacts-form-back-button\"\n        i18n=\"\n        Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back\n      \"\n        (click)=\"hostRef.back()\"\n      >\n        Back\n      </button>\n      <button\n        bbButton\n        color=\"link-text\"\n        type=\"button\"\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        name=\"cancel\"\n        data-role=\"contacts-form-cancel-button\"\n        i18n=\"\n          Cancel action in current form | Cancel button text for cancelling a creation of a new\n          contact@@contact-manager-form.button.cancel\n        \"\n        (click)=\"hostRef.cancel()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n\n  <ng-template #iban>\n    <bb-input-text-ui\n      id=\"bb-create-contact-iban\"\n      label=\"IBAN\"\n      i18n-label=\"@@contact-manager-form.label.bban\"\n      data-role=\"new-contact-iban\"\n      [formControl]=\"hostRef.contactsForm.controls.IBAN\"\n      [maxLength]=\"hostRef.ibanMask.length\"\n      [required]=\"true\"\n      [mask]=\"hostRef.ibanMask\"\n      [maskValidator]=\"false\"\n      bbIbanValidator\n    >\n    </bb-input-text-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.IBAN, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"hostRef.contactsForm.controls.IBAN.touched\n      && hostRef.contactsForm.controls.IBAN.errors?.invalidIban\"\n    >\n      <ng-container>\n        <span\n          i18n=\"\n            Contacts account number invalid error text | Text for contacts detail component iban invalid\n            error@@contact-manager-form.label.ibanInvalid\n          \"\n          data-role=\"invalid-account-number-error-label\"\n        >\n          Invalid IBAN\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n\n  <ng-template #bban>\n    <bb-input-text-ui\n      id=\"bb-create-contact-bban\"\n      label=\"Account number\"\n      i18n-label=\"@@contact-manager-form.label.account.number\"\n      data-role=\"new-contact-bban\"\n      [formControl]=\"hostRef.contactsForm.controls.accountNumber\"\n      [maxLength]=\"34\"\n      [required]=\"true\"\n    >\n    </bb-input-text-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.accountNumber, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template #email>\n    <label\n      #contactsEmailLabel\n      id=\"bb-create-contact-email-label\"\n      data-role=\"contact-account-create-email-label\"\n      i18n=\"@@contact-personal-data.contactEmail.label\"\n      class=\"mb-2\"\n    >\n      Email\n      <small class=\"d-block bb-text-support bb-text-default\">E.g. sarawilliams@backbase.com</small>\n    </label>\n    <bb-input-email-ui\n      [aria-labelledby]=\"contactsEmailLabel.id\"\n      [formControl]=\"hostRef.contactsForm.controls.email\"\n      [maxLength]=\"255\"\n      [required]=\"true\"\n      data-role=\"new-contact-email\"\n      bbEmailDomainValidator\n    >\n    </bb-input-email-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.email, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"hostRef.contactsForm.controls.email.touched\n      && hostRef.contactsForm.controls.email.errors?.email\"\n    >\n      <ng-container>\n        <span\n          i18n=\"\n          Contacts email id invalid error text | Text for contacts detail component email invalid\n          error@@contact-manager-form.label.email.invalid\n        \"\n          data-role=\"invalid-email-error-label\"\n        >\n          Invalid email\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n\n  <ng-template #phone>\n    <label\n      #contactsPhoneLabel\n      id=\"bb-create-contact-phone-label\"\n      data-role=\"contact-account-create-phone\"\n      i18n=\"@@contact-manager-form.label.phoneNumber\"\n      class=\"mb-2\"\n    >\n      Phone number\n      <small id=\"example-number\" class=\"d-block bb-text-support bb-text-default\">E.g. +12027953213</small>\n    </label>\n    <bb-input-text-ui\n      [formControl]=\"hostRef.contactsForm.controls.phoneNumber\"\n      [maxLength]=\"30\"\n      [required]=\"true\"\n      [aria-labelledby]=\"contactsPhoneLabel.id\"\n      aria-describedby=\"example-number\"\n      data-role=\"new-contact-phone\"\n    >\n    </bb-input-text-ui>\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.phoneNumber && hostRef.contactsForm.controls.phoneNumber, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template #err let-control=\"control\" let-errorMessageAcctType=\"errorMessageAcctType\">\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"control.errors?.required\n    && control.touched\n\"\n    >\n      <ng-container [ngSwitch]=\"errorMessageAcctType\">\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\"\n          i18n=\"\n            Contacts account number required error text | Text for contacts detail component account number required\n            error@@contact-manager-form.label.account.required\n          \"\n          data-role=\"missing-account-number-error-label\"\n        >\n          Account number is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\"\n          i18n=\"\n            Contacts IBAN required error text | Text for contacts detail component IBAN required\n            error@@contact-manager-form.label.iban.required\n          \"\n          data-role=\"missing-account-number-error-label\"\n        >\n          IBAN is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\"\n          i18n=\"\n            Contacts Phone number required error text | Text for contacts detail component Phone required\n            error@@contact-manager-form.label.phone.number.required\n          \"\n          data-role=\"missing-phone-number-error-label\"\n        >\n          Phone number is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\"\n          i18n=\"\n            Contacts EMAIL required error text | Text for contacts detail component Email required\n            error@@contact-manager-form.label.email.required\n          \"\n          data-role=\"missing-email-error-label\"\n        >\n          Email is required\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return ContactsDetailComponent; }), selector: "bb-contacts-detail", inputs: ["type", "showDetail", "item"], outputs: ["editContactsItem", "deleteContactsItem"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.InputEmailComponent; }), selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ContactsFormCustomizableDirective; }), selector: "[bbContactsFormCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.NoWhiteSpaceValidatorDirective; }), selector: "[bbNoWhiteSpace]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.IbanValidatorDirective; }), selector: "[bbIbanValidator]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.EmailDomainValidatorDirective; }), selector: "[bbEmailDomainValidator]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contacts-form',
                        templateUrl: './contacts-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$2.FormBuilder }, { type: i0__namespace.ViewContainerRef }, { type: Object, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [BB_CONTACT_FORM_ADDITIONS_TOKEN]
                        }] }];
        }, propDecorators: { item: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], disabledSubmit: [{
                    type: i0.Input
                }], save: [{
                    type: i0.Output
                }], cancelEdit: [{
                    type: i0.Output
                }], backEvent: [{
                    type: i0.Output
                }], deleteContactsItem: [{
                    type: i0.Output
                }] } });
    /**
     * This is an extension slot to be used for customizing an form of contacts editing.
     *
     * @usageNotes
     *
     * ### Display a contact form.
     *
     * ```html
     *  <bb-contacts-detail
     *   [showDetail]="false"
     *   [item]="hostRef.item"
     *   [type]="hostRef.type"
     *   (deleteContactsItem)="hostRef.deleteItemEmit()"
     * ></bb-contacts-detail>
     * <form
     *  *ngIf="hostRef.contactsForm"
     *   (submit)="hostRef.saveItem()"
     *   [formGroup]="hostRef.contactsForm"
     *   class="bb-block bb-block--xl"
     * >
     *   <fieldSet>
     *     <div class="row">
     *       <div
     *         class="bb-block bb-block--lg col-12"
     *         data-role="contact-account-info-account-name1"
     *       >
     *         <label
     *           [for]="contactsName.id"
     *           data-role="edit-contact-label"
     *           i18n="Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name"
     *         >
     *           Name
     *         </label>
     *         <bb-input-text-ui
     *           data-role="new-contact-name"
     *           [formControl]="hostRef.contactsForm.controls.name"
     *           name="contactsName"
     *           #contactsName
     *           [maxLength]="140"
     *           [required]="hostRef.submitted"
     *         >
     *         </bb-input-text-ui>
     *
     *         <bb-input-validation-message-ui
     *           role="alert"
     *           [showErrors]="
     *             hostRef.contactsForm.controls.name.invalid &&
     *             (hostRef.contactsForm.controls.name.dirty || hostRef.contactsForm.controls.name.touched)
     *           ">
     *           <ng-container
     *           *ngIf="hostRef.contactsForm.controls.name.errors?.required || hostRef.contactsForm.controls.name.errors?.minlength">
     *             <span
     *               i18n="
     *                 Contacts name required error text | Text for contacts detail component name required
     *                 error@@contact-manager-form.label.nameRequired
     *               "
     *               data-role="missing-account-name">
     *               Name is required
     *             </span>
     *           </ng-container>
     *         </bb-input-validation-message-ui>
     *       </div>
     *       <div class="bb-block bb-block--lg col-12">
     *         <ng-container [ngSwitch]="hostRef.type">
     *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.IBAN">
     *             <ng-container *ngTemplateOutlet="iban"></ng-container>
     *           </ng-container>
     *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.EMAIL">
     *             <ng-container *ngTemplateOutlet="email"></ng-container>
     *           </ng-container>
     *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.PHONE">
     *             <ng-container *ngTemplateOutlet="phone"></ng-container>
     *           </ng-container>
     *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.ACCOUNT">
     *             <ng-container *ngTemplateOutlet="bban"></ng-container>
     *           </ng-container>
     *           <ng-container *ngSwitchDefault>
     *             <ng-container *ngTemplateOutlet="iban"></ng-container>
     *           </ng-container>
     *         </ng-container>
     *
     *       </div>
     *     </div>
     *   </fieldSet>
     *   <div class="bb-button-bar">
     *     <button
     *       bbButton
     *       type="submit"
     *       color="primary"
     *       type="submit"
     *       [disabled]="hostRef.contactsForm.invalid || !hostRef.contactsForm?.controls?.name?.value.trim()"
     *       class="bb-button-bar__button"
     *       name="save"
     *       data-role="save-button"
     *       i18n="Save current form | Save button text for saving a contact item@@contact-manager-form.button.save"
     *     >
     *       Save
     *     </button>
     *     <button
     *     bbButton
     *     color="secondary"
     *     (click)="hostRef.back()"
     *     type="button"
     *     class="bb-button-bar__button"
     *     name="back"
     *     data-role="contacts-form-back-button"
     *     i18n="
     *       Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back
     *     "
     *   >
     *     Back
     *   </button>
     *     <button
     *       bbButton
     *       color="link-text"
     *       (click)="hostRef.cancel()"
     *       type="button"
     *       class="bb-button-bar__button bb-button-bar__button--across"
     *       name="cancel"
     *       data-role="contacts-form-cancel-button"
     *       i18n="
     *         Cancel action in current form | Cancel button text for cancelling a creation of a new
     *         contact@@contact-manager-form.button.cancel
     *       "
     *     >
     *       Cancel
     *     </button>
     *   </div>
     * </form>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsFormCustomizableDirective, _super);
        function ContactsFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsFormCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormCustomizableDirective, selector: "[bbContactsFormCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsFormCustomizable]',
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing success notification after creating a contact
     *
     * @example
     *
     * ```html
     * <ng-template bbContactsCreateSuccessNotificationCustomizable>
     *   <span
     *     i18n="@@contact-manager-form-container.notification-create.success"
     *     data-role="successfully-saved-contact"
     *     role="alert"
     *     aria-atomic="true"
     *   >
     *     Successfully saved Contact
     *   </span>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsCreateSuccessNotificationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsCreateSuccessNotificationCustomizableDirective, _super);
        function ContactsCreateSuccessNotificationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsCreateSuccessNotificationCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsCreateSuccessNotificationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsCreateSuccessNotificationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsCreateSuccessNotificationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsCreateSuccessNotificationCustomizableDirective, selector: "[bbContactsCreateSuccessNotificationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsCreateSuccessNotificationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsCreateSuccessNotificationCustomizable]',
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing error notification after creating a contact
     *
     * @example
     *
     * ```html
     * <ng-template bbContactsCreateErrorNotificationCustomizable>
     *   <span
     *     i18n="@@contact-manager-form-container.notification-create.error"
     *     data-role="failed-to-save-contact"
     *     role="alert"
     *     aria-atomic="true"
     *   >
     *     Error saving Contact
     *   </span>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsCreateErrorNotificationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsCreateErrorNotificationCustomizableDirective, _super);
        function ContactsCreateErrorNotificationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsCreateErrorNotificationCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsCreateErrorNotificationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsCreateErrorNotificationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsCreateErrorNotificationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsCreateErrorNotificationCustomizableDirective, selector: "[bbContactsCreateErrorNotificationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsCreateErrorNotificationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsCreateErrorNotificationCustomizable]',
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing success notification after editing a contact
     *
     * @example
     *
     * ```html
     * <ng-template bbContactsEditSuccessNotificationCustomizable>
     *   <span
     *     i18n="@@contact-manager-form-container.notification-edit.success"
     *     data-role="successfully-saved-contact"
     *     role="alert"
     *     aria-atomic="true"
     *   >
     *     Successfully saved Contact
     *   </span>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsEditSuccessNotificationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsEditSuccessNotificationCustomizableDirective, _super);
        function ContactsEditSuccessNotificationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsEditSuccessNotificationCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsEditSuccessNotificationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEditSuccessNotificationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsEditSuccessNotificationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEditSuccessNotificationCustomizableDirective, selector: "[bbContactsEditSuccessNotificationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEditSuccessNotificationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsEditSuccessNotificationCustomizable]',
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing error notification after editing a contact
     *
     * @example
     *
     * ```html
     * <ng-template bbContactsEditErrorNotificationCustomizable>
     *   <span
     *     i18n="@@contact-manager-form-container.notification-edit.error"
     *     data-role="failed-to-save-contact"
     *     role="alert"
     *     aria-atomic="true"
     *   >
     *     Error saving Contact
     *   </span>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsEditErrorNotificationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsEditErrorNotificationCustomizableDirective, _super);
        function ContactsEditErrorNotificationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsEditErrorNotificationCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsEditErrorNotificationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEditErrorNotificationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsEditErrorNotificationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEditErrorNotificationCustomizableDirective, selector: "[bbContactsEditErrorNotificationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEditErrorNotificationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsEditErrorNotificationCustomizable]',
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing confirmation dialog of discarding changes
     *
     * @example
     *
     * ```html
     * <ng-template bbContactsEditDiscardConfirmationCustomizable let-hostRef let-context="context">
     *   <div class="modal-header">
     *     <h4 i18n="@contact-manager-form-container.header.discardChanges" class="modal-title">Discard Changes</h4>
     *   </div>
     *   <div class="modal-body" role="alert">
     *     <p i18n="@@contact-manager-form-container.discardChangesConfirmation">
     *       Are you sure you want to discard your changes? This action cannot be undone.
     *     </p>
     *   </div>
     *   <div class="modal-footer">
     *     <div class="d-flex flex-row-reverse">
     *       <button
     *         class="ml-3"
     *         bbButton
     *         color="danger"
     *         i18n="@@contact-manager-form-container.button.discard"
     *         type="button"
     *         (click)="hostRef.discardChanges()"
     *       >
     *         Discard
     *       </button>
     *       <button
     *         i18n="@@contact-manager-form-container.button.cancel"
     *         type="button"
     *         bbButton
     *         color="secondary"
     *         (click)="context.dismiss()"
     *       >
     *         Not now
     *       </button>
     *     </div>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsEditDiscardConfirmationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsEditDiscardConfirmationCustomizableDirective, _super);
        function ContactsEditDiscardConfirmationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsEditDiscardConfirmationCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsEditDiscardConfirmationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEditDiscardConfirmationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsEditDiscardConfirmationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEditDiscardConfirmationCustomizableDirective, selector: "[bbContactsEditDiscardConfirmationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEditDiscardConfirmationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsEditDiscardConfirmationCustomizable]',
                    }]
            }] });

    /**
     * Container component for showing contact details.
     *
     * @usageNotes
     *
     * ### Display create/ edit form for contacts
     *
     * ```html
     * <bb-contacts-form-container></bb-contacts-form-container>
     * ```
     *
     * ### Additionally use the container component in routing.
     *
     * ```typescript
     * const routes: [
     *   {
     *   path: 'edit/:id/:type',
     *   canDeactivate: [CanDeactivateGuard],
     *   component: ContactsFormContainerComponent,
     * }]
     *
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsFormContainerComponent = /** @class */ (function () {
        function ContactsFormContainerComponent(service, route, navigation, notificationService, propertiesService, cdr) {
            var _this = this;
            this.service = service;
            this.route = route;
            this.navigation = navigation;
            this.notificationService = notificationService;
            this.propertiesService = propertiesService;
            this.cdr = cdr;
            this.hostRef = this;
            this.itemId = this.route.paramMap.pipe(operators.map(function (params) { return params.get('id'); }));
            this.itemType$ = this.route.paramMap.pipe(operators.map(function (params) { return params.get('type'); }));
            this.item = this.service.item.pipe(operators.map(function (item) { return _this.fromService(item); }));
            this.notificationTimeout$ = this.propertiesService.notificationDismissTime$;
            this.isDiscardConfirmOpened = false;
            this.discard$ = new rxjs.Subject();
            this.isPendingRequest = false;
            service.getItemFrom(this.itemId);
        }
        /**
         * onInit - lifecycle hook for setting current view.
         */
        ContactsFormContainerComponent.prototype.ngOnInit = function () {
            this.navigation.currentView = View.Edit;
            this.isPendingRequest = false;
        };
        /**
         * Calling the save api and showing the notification.
         *
         * @param {ContactsFormItem} item - Contact Object while save
         */
        ContactsFormContainerComponent.prototype.save = function (item) {
            var _this = this;
            this.isPendingRequest = true;
            this.itemId
                .pipe(operators.mergeMap(function () { return _this.service.save(_this.toService(item)); }), operators.catchError(function () { return rxjs.of(undefined); }), operators.withLatestFrom(this.notificationTimeout$), operators.map(function (_c) {
                var _d = __read(_c, 2), id = _d[0], timeout = _d[1];
                return ({ id: id, timeout: timeout });
            }), operators.take(1))
                .subscribe(function (_c) {
                var id = _c.id, timeout = _c.timeout;
                _this.isPendingRequest = false;
                _this.formComponent.contactsForm.markAsPristine();
                if (id) {
                    _this.navigation.select(id);
                    _this.notificationService.showNotification({
                        header: (item.id
                            ? _this.notificationEditSuccessTemplate
                            : _this.notificationCreateSuccessTemplate),
                        message: '',
                        modifier: 'success',
                        ttl: timeout,
                    });
                }
                else {
                    _this.notificationService.showNotification({
                        header: (item.id
                            ? _this.notificationEditErrorTemplate
                            : _this.notificationCreateErrorTemplate),
                        message: '',
                        modifier: 'error',
                        ttl: timeout,
                    });
                }
                _this.navigation.currentView = View.List;
                _this.navigation.list();
            });
        };
        /**
         * showing the confirmation modal, when moving away from route.
         *
         * @returns {Promise<boolean> | boolean} whether route can be deactivated
         */
        ContactsFormContainerComponent.prototype.canDeactivate = function () {
            var _a, _b;
            if ((_b = (_a = this.formComponent) === null || _a === void 0 ? void 0 : _a.contactsForm) === null || _b === void 0 ? void 0 : _b.dirty) {
                this.isDiscardConfirmOpened = true;
                this.discard$.complete();
                this.discard$ = new rxjs.Subject();
                this.cdr.markForCheck();
                return this.discard$;
            }
            return true;
        };
        /**
         *  When the Edit is cancelled. It determines if it should show the selected contact or list
         *
         * @param {string} id - Contact Id.
         */
        ContactsFormContainerComponent.prototype.cancelEdit = function (id) {
            if (id) {
                this.navigation.select(id);
                this.navigation.currentView = View.Detail;
            }
            else {
                this.navigation.list();
                this.navigation.currentView = View.List;
            }
        };
        /**
         * Method to go to previous screen based on id
         *
         * @param {string | undefined} id - Contact Id
         */
        ContactsFormContainerComponent.prototype.back = function (id) {
            if (id) {
                this.navigation.list();
                this.navigation.currentView = View.List;
            }
            else {
                this.navigation.newContact();
                this.navigation.currentView = View.Select;
            }
        };
        /**
         *
         * @param {ContactItem | undefined} item Contact object.
         * @returns {ContactsFormItem} The transformed contact Object when returned from API.
         */
        // eslint-disable-next-line complexity
        ContactsFormContainerComponent.prototype.fromService = function (item) {
            if (item) {
                return {
                    id: item.id,
                    name: item.name,
                    IBAN: item.accounts && item.accounts[0] && item.accounts[0].IBAN ? item.accounts[0].IBAN : undefined,
                    accountNumber: item.accounts && item.accounts[0] && item.accounts[0].accountNumber
                        ? item.accounts[0].accountNumber
                        : undefined,
                    email: item.accounts && item.accounts[0] && item.accounts[0].email ? item.accounts[0].email : undefined,
                    phoneNumber: item.accounts && item.accounts[0] && item.accounts[0].phoneNumber ? item.accounts[0].phoneNumber : undefined,
                    accounts: item.accounts || [],
                    additions: item.additions || {},
                };
            }
            else {
                return { id: '', name: '', surname: '', initials: '', accounts: [], additions: {} };
            }
        };
        /**
         *
         * @param {ContactsFormItem} item Contact Object
         * @returns {ContactItem} The trandformed contact object when submitting to API.
         */
        ContactsFormContainerComponent.prototype.toService = function (item) {
            return Object.assign({ id: item.id, name: item.name, accounts: [
                    Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (item.accounts && item.accounts[0] ? item.accounts[0] : {})), (item.IBAN ? { IBAN: item.IBAN } : {})), (item.accountNumber ? { accountNumber: item.accountNumber } : {})), (item.phoneNumber ? { phoneNumber: item.phoneNumber } : {})), (item.email ? { email: item.email } : {})),
                ] }, (item.additions ? { additions: item.additions } : {}));
        };
        /**
         * Method that calls the delete api and returns to the list.
         *
         * @param {string} id Contact Id to be deleted
         */
        ContactsFormContainerComponent.prototype.deleteContactsItem = function (id) {
            this.service.delete(id);
            this.navigation.list();
            this.navigation.currentView = View.List;
        };
        /**
         * event handler for confirming discard
         */
        ContactsFormContainerComponent.prototype.onConfirmDiscard = function () {
            this.discard$.next(true);
            this.discard$.complete();
            this.isDiscardConfirmOpened = false;
        };
        /**
         * event handler for canceling discard
         */
        ContactsFormContainerComponent.prototype.onCancelDiscard = function () {
            this.discard$.next(false);
            this.discard$.complete();
            this.isDiscardConfirmOpened = false;
        };
        return ContactsFormContainerComponent;
    }());
    /** @nocollapse */ ContactsFormContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsFormContainerComponent, deps: [{ token: ContactsService }, { token: i2__namespace$2.ActivatedRoute }, { token: ContactsNavigationService }, { token: i4__namespace.NotificationService }, { token: ContactManagerPreferencesService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactsFormContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormContainerComponent, selector: "bb-contacts-form-container", viewQueries: [{ propertyName: "formComponent", first: true, predicate: ContactsFormComponent, descendants: true }, { propertyName: "notificationCreateSuccessTemplate", first: true, predicate: ["notificationCreateSuccess"], descendants: true }, { propertyName: "notificationCreateErrorTemplate", first: true, predicate: ["notificationCreateError"], descendants: true }, { propertyName: "notificationEditSuccessTemplate", first: true, predicate: ["notificationEditSuccess"], descendants: true }, { propertyName: "notificationEditErrorTemplate", first: true, predicate: ["notificationEditError"], descendants: true }, { propertyName: "discardChangesModalContent", first: true, predicate: ["discardChangesModalContent"], descendants: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-form\n    [item]=\"item\"\n    [type]=\"itemType$ | async\"\n    [disabledSubmit]=\"isPendingRequest\"\n    (save)=\"save($event)\"\n    (cancelEdit)=\"cancelEdit($event)\"\n    (backEvent)=\"back($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  ></bb-contacts-form>\n</ng-container>\n\n<ng-template #notificationCreateSuccess>\n  <ng-container bbContactsCreateSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsCreateSuccessNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-create.success\"\n      data-role=\"successfully-saved-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Successfully saved Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationCreateError>\n  <ng-container bbContactsCreateErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsCreateErrorNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-create.error\"\n      data-role=\"failed-to-save-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error saving Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationEditSuccess>\n  <ng-container bbContactsEditSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsEditSuccessNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-edit.success\"\n      data-role=\"successfully-saved-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Successfully saved Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationEditError>\n  <ng-container bbContactsEditErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsEditErrorNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-edit.error\"\n      data-role=\"failed-to-save-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error saving Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-form-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-container bbContactsEditDiscardConfirmationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbContactsEditDiscardConfirmationCustomizable let-hostRef>\n  <bb-confirm-action-dialog\n    [isOpen]=\"hostRef.isDiscardConfirmOpened\"\n    [confirmButtonColor]=\"'danger'\"\n    (confirm)=\"hostRef.onConfirmDiscard()\"\n    (cancel)=\"hostRef.onCancelDiscard()\"\n  >\n    <span title i18n=\"@contact-manager-form-container.header.discardChanges\">Discard Changes</span>\n    <span body i18n=\"@@contact-manager-form-container.discardChangesConfirmation\">\n      Are you sure you want to discard your changes? This action cannot be undone.\n    </span>\n    <span cancelButtonLabel i18n=\"@@contact-manager-form-container.button.cancel\">Not now</span>\n    <span confirmButtonLabel i18n=\"@@contact-manager-form-container.button.discard\">Discard</span>\n  </bb-confirm-action-dialog>\n</ng-template>\n", components: [{ type: ContactsFormComponent, selector: "bb-contacts-form", inputs: ["item", "type", "disabledSubmit"], outputs: ["save", "cancelEdit", "backEvent", "deleteContactsItem"] }, { type: i7__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i8__namespace.ConfirmActionDialogComponent, selector: "bb-confirm-action-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ContactsCreateSuccessNotificationCustomizableDirective, selector: "[bbContactsCreateSuccessNotificationCustomizable]" }, { type: ContactsCreateErrorNotificationCustomizableDirective, selector: "[bbContactsCreateErrorNotificationCustomizable]" }, { type: ContactsEditSuccessNotificationCustomizableDirective, selector: "[bbContactsEditSuccessNotificationCustomizable]" }, { type: ContactsEditErrorNotificationCustomizableDirective, selector: "[bbContactsEditErrorNotificationCustomizable]" }, { type: ContactsEditDiscardConfirmationCustomizableDirective, selector: "[bbContactsEditDiscardConfirmationCustomizable]" }], pipes: { "async": i2__namespace$1.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsFormContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contacts-form-container',
                        templateUrl: './contacts-form-container.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ContactsService }, { type: i2__namespace$2.ActivatedRoute }, { type: ContactsNavigationService }, { type: i4__namespace.NotificationService }, { type: ContactManagerPreferencesService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { formComponent: [{
                    type: i0.ViewChild,
                    args: [ContactsFormComponent]
                }], notificationCreateSuccessTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationCreateSuccess']
                }], notificationCreateErrorTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationCreateError']
                }], notificationEditSuccessTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationEditSuccess']
                }], notificationEditErrorTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationEditError']
                }], discardChangesModalContent: [{
                    type: i0.ViewChild,
                    args: ['discardChangesModalContent']
                }] } });

    /**
     *
     * This guard is called while deactivating the route to check if the form is dirty.
     *
     * @see ContactManagerWidgetModule
     * @usageNotes
     *
     * ### Ensure the ContactManagerWidgetModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ContactManagerWidgetModule,
     *   ],
     * })
     * export class ContactManagerWidgetModule {}
     * ```
     *
     * ### Inject this guard into your route
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [{
     *   path: 'edit/:id/:type',
     *   canDeactivate: [CanDeactivateGuard],
     *   component: ContactsFormContainerComponent,
     * },]
     * })
     *  export class ContactManagerWidgetModule {
     * ```
     */
    var CanDeactivateGuard = /** @class */ (function () {
        function CanDeactivateGuard() {
        }
        CanDeactivateGuard.prototype.canDeactivate = function (component) {
            return component.canDeactivate ? component.canDeactivate() : true;
        };
        return CanDeactivateGuard;
    }());
    /** @nocollapse */ CanDeactivateGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CanDeactivateGuard, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ CanDeactivateGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CanDeactivateGuard });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CanDeactivateGuard, decorators: [{
                type: i0.Injectable
            }] });

    /**
     * Displays a list of all contact types, allowing one to be selected.
     *
     * @usageNotes
     *
     * ### Display a list of types of contact that can be created
     *
     * ```html
     * <bb-contact-account-select-type
     *   [listOfAccountTypes]="createContactList$ | async"
     *   [noOfItemsinList]="noOfItemsinList
     * ></bb-contact-account-select-type>
     * ```
     *
     * ### Additionally set the selected contact type
     *
     * ```html
     * <bb-contact-account-select-type
     *   [listOfAccountTypes]="createContactList$ | async"
     *   [noOfItemsinList]="noOfItemsinList
     *   (selectedAccountType)="selectedAccountType()"
     * ></bb-contact-account-select-type>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactSelectAccountTypeComponent = /** @class */ (function () {
        function ContactSelectAccountTypeComponent(navigation) {
            this.navigation = navigation;
            /**
             * event when account is selected.
             */
            this.selectedAccountType = new i0.EventEmitter();
            this.createAccountTypeRef = exports.AccountCreateType;
        }
        /**
         * OnInit lifecycle hook.
         */
        ContactSelectAccountTypeComponent.prototype.ngOnInit = function () {
            var _a;
            this.navigation.currentView = View.Edit;
            if (this.noOfItemsinList === 0 || this.noOfItemsinList === 1) {
                this.navigation.newContactForm(((_a = this.listOfAccountTypes.find(function (list) { return list.enableItem; })) === null || _a === void 0 ? void 0 : _a.listItem) || this.createAccountTypeRef.IBAN);
            }
        };
        /**
         * Update the selected account type for contact creation.
         *
         * @param {CreateListType} $event -The selected contact Type details.
         */
        ContactSelectAccountTypeComponent.prototype.updateCreateContactType = function ($event) {
            this.navigation.currentView = View.Edit;
            this.navigation.newContactForm($event.listItem);
        };
        return ContactSelectAccountTypeComponent;
    }());
    /** @nocollapse */ ContactSelectAccountTypeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactSelectAccountTypeComponent, deps: [{ token: ContactsNavigationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactSelectAccountTypeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactSelectAccountTypeComponent, selector: "bb-contact-account-select-type", inputs: { listOfAccountTypes: "listOfAccountTypes", noOfItemsinList: "noOfItemsinList" }, outputs: { selectedAccountType: "selectedAccountType" }, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--xl\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div class=\"bb-block\" data-role=\"contact-details-info-name\">\n        <span\n          class=\"d-none\"\n          data-role=\"create-contact-label\"\n          aria-hidden=\"true\"\n          i18n=\"Create new contact heading | Title shown when user is in select contact type@@contact-manager-detail.create.select.heading\"\n          #heading\n        >\n          Create new contact\n        </span>\n        <bb-header-ui data-role=\"create-new-contact-label\" headingType=\"h3\" [heading]=\"heading.textContent\">\n        </bb-header-ui>\n      </div>\n    </div>\n  </div>\n</div>\n<hr />\n<div class=\"bb-lock bb-text-support\">\n  <div\n    class=\"bb-bock\"\n    data-role=\"create-contact-select-new-account-info\"\n    i18n=\"@@create-contact-type-list.select.info.text\"\n  >\n    Select which information you want to use to create a contact. You can move money with an account number, a phone\n    number or an email\n  </div>\n</div>\n<div class=\"bb-select-payment-option\">\n  <div *ngFor=\"let listItem of listOfAccountTypes\">\n    <div *ngIf=\"listItem.enableItem\">\n      <ng-container *ngTemplateOutlet=\"listButton; context: { listItem: listItem}\"></ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #listButton let-listItem=\"listItem\">\n  <div class=\"bb-button-bar m-3\">\n    <button\n      class=\"bb-button-bar__button bb-button-bar__button--across bb-inline-stack col-12 bb-select-payment-option__label\"\n      bbButton\n      color=\"unstyled\"\n      (click)=\"updateCreateContactType(listItem)\"\n    >\n      <ng-container [ngSwitch]=\"listItem.listItem\">\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.IBAN\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"person-outline\"></bb-icon-ui>\n          <div data-role=\"iban-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.iban\">With an IBAN </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.ACCOUNT\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"person-outline\"></bb-icon-ui>\n          <div data-role=\"account-number-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.account\"\n              >With an account number\n            </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.EMAIL\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"inbox\"></bb-icon-ui>\n          <div data-role=\"email-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.email\">With an email </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.PHONE\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"phone\"></bb-icon-ui>\n          <div data-role=\"phone-number-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.phone\">With a phone number </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n      </ng-container>\n    </button>\n  </div>\n</ng-template>\n", components: [{ type: i2__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactSelectAccountTypeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-account-select-type',
                        templateUrl: './contact-select-account-type.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ContactsNavigationService }]; }, propDecorators: { listOfAccountTypes: [{
                    type: i0.Input
                }], noOfItemsinList: [{
                    type: i0.Input
                }], selectedAccountType: [{
                    type: i0.Output
                }] } });

    /**
     *
     * Container component for showing contact list.
     *
     * @usageNotes
     *
     * ### Display list of all the types of contacts to select before creation.
     *
     * ```html
     * <bb-contacts-type-list-container></bb-contacts-type-list-container>
     * ```
     * ### Additionally use the container component in routing.
     *
     * ```typescript
     * const routes: [
     * {
     *  path: 'select',
     *  component: ContactsTypeListContainerComponent
     * }]
     *
     *
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsTypeListContainerComponent = /** @class */ (function () {
        function ContactsTypeListContainerComponent(contactService, propertiesService) {
            var _this = this;
            this.contactService = contactService;
            this.propertiesService = propertiesService;
            /**
             * property from user if the contact creation through email is allowed
             */
            this.allowEmail$ = this.propertiesService.createContactEmail$;
            /**
             * property from user if the contact creation through IBAN is allowed
             */
            this.allowIBAN$ = this.propertiesService.createContactIBAN$;
            /**
             * property from user if the contact creation through Account Number is allowed
             */
            this.allowAccount$ = this.propertiesService.createContactAccount$;
            /**
             * property from user if the contact creation through Phone Number is allowed
             */
            this.allowPhone$ = this.propertiesService.createContactPhone$;
            /**
             * check which properties are allowed and showing them on screen.
             */
            this.createContactList$ = rxjs.combineLatest([
                this.allowAccount$,
                this.allowIBAN$,
                this.allowPhone$,
                this.allowEmail$,
            ]).pipe(operators.tap(function (contactListItem) { return (_this.noOfItemsinList = contactListItem.filter(function (listItem) { return listItem && typeof listItem === 'boolean'; }).length); }), operators.map(function (_a) {
                var _b = __read(_a, 4), Account = _b[0], IBAN = _b[1], Phone = _b[2], Email = _b[3];
                return [
                    {
                        listItem: exports.AccountCreateType.ACCOUNT,
                        enableItem: Account === null || Account === void 0 ? void 0 : Account.valueOf(),
                    },
                    {
                        listItem: exports.AccountCreateType.IBAN,
                        enableItem: IBAN === null || IBAN === void 0 ? void 0 : IBAN.valueOf(),
                    },
                    { listItem: exports.AccountCreateType.PHONE, enableItem: Phone === null || Phone === void 0 ? void 0 : Phone.valueOf() },
                    { listItem: exports.AccountCreateType.EMAIL, enableItem: Email === null || Email === void 0 ? void 0 : Email.valueOf() },
                ];
            }));
        }
        return ContactsTypeListContainerComponent;
    }());
    /** @nocollapse */ ContactsTypeListContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsTypeListContainerComponent, deps: [{ token: ContactsService }, { token: ContactManagerPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactsTypeListContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsTypeListContainerComponent, selector: "bb-contacts-type-list-container", ngImport: i0__namespace, template: "<bb-contact-account-select-type [listOfAccountTypes]=\"createContactList$ | async\" [noOfItemsinList]=\"noOfItemsinList\">\n</bb-contact-account-select-type>\n", components: [{ type: ContactSelectAccountTypeComponent, selector: "bb-contact-account-select-type", inputs: ["listOfAccountTypes", "noOfItemsinList"], outputs: ["selectedAccountType"] }], pipes: { "async": i2__namespace$1.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsTypeListContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contacts-type-list-container',
                        templateUrl: './contacts-type-list-container.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ContactsService }, { type: ContactManagerPreferencesService }]; } });

    /**
     * Displays an item in the  list of all contacts
     *
     * @usageNotes
     *
     * ### Display a single item in the list of types of contact.
     *
     * ```html
     * <bb-contact-list-item
     *     [contactItem]="item"
     *     [showAccountNumber]="true"
     *     [showAlias]="showAlias"
     *  ></bb-contact-list-item>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsListItemComponent = /** @class */ (function () {
        function ContactsListItemComponent(service) {
            this.service = service;
            /**
             * Wether to show contact account number.
             * Default is false.
             */
            this.showAccountNumber = false;
            /**
             * Wether to show contact alias.
             * Default is false.
             */
            this.showAlias = false;
            this.accountTypeKeyRef = AccountTypeModelKey;
            this.createAccountType = exports.AccountCreateType;
        }
        /**
         * OnInit - lifecycle hook.
         */
        ContactsListItemComponent.prototype.ngOnInit = function () {
            if (this.contactItem === undefined) {
                throw new Error('`item` input is required in `bb-todo-list-item` component');
            }
            else {
                this.selectedAccountType = this.service.checkaccountType(this.contactItem);
            }
        };
        return ContactsListItemComponent;
    }());
    /** @nocollapse */ ContactsListItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsListItemComponent, deps: [{ token: ContactsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactsListItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListItemComponent, selector: "bb-contact-list-item", inputs: { contactItem: "contactItem", showAccountNumber: "showAccountNumber", showAlias: "showAlias" }, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--sm\">\n  <div class=\"bb-block bb-block--xs break-word\">\n    <span class=\"sr-only\">\n      <span i18n=\"name@@bb-contact-list-item.label.name\" data-role=\"name-header\"> Name </span>\n      :&nbsp;\n    </span>\n    <span class=\"bb-text-bold break-word\" data-role=\"list-name\"> {{ contactItem.name }} </span>\n  </div>\n  <div *ngIf=\"showAccountNumber\" class=\"bb-block bb-block--xs break-word\">\n    <ng-container [ngSwitch]=\"selectedAccountType\">\n      <ng-container *ngSwitchCase=\"createAccountType.IBAN\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.iban\" data-role=\"account-header\"> IBAN </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"accountdetails\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.EMAIL\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.email\" data-role=\"email-header\"> Email </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"details\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.PHONE\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.phone.number\" data-role=\"phone-header\">\n            Phone number\n          </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"details\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.ACCOUNT\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.account.number\" data-role=\"account-header\">\n            Account number\n          </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"accountdetails\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n  <div *ngIf=\"showAlias && contactItem.alias\" class=\"bb-block bb-block--xs break-word\">\n    <span class=\"sr-only\" data-role=\"alias-header\" i18n=\"name@@bb-contact-list-item.label.alias\">Alias</span>\n    <span class=\"sr-only\">:&nbsp;</span>\n    <span class=\"bb-text-support break-word\" data-role=\"list-alias\"> {{ contactItem.alias }} </span>\n  </div>\n\n  <ng-template #accountdetails>\n    <span class=\"bb-text-support\" data-role=\"list-account-number\" *ngIf=\"contactItem?.accounts[0] as account\">\n      {{ account[selectedAccountType] | bbIban}}\n    </span>\n  </ng-template>\n  <ng-template #details>\n    <span class=\"bb-text-support\" data-role=\"list-account-number\" *ngIf=\"contactItem?.accounts[0] as account\">\n      {{ account[selectedAccountType]}}\n    </span>\n  </ng-template>\n</div>\n", directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "bbIban": i8__namespace$1.BbIbanPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsListItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-list-item',
                        templateUrl: './contact-list-item.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ContactsService }]; }, propDecorators: { contactItem: [{
                    type: i0.Input
                }], showAccountNumber: [{
                    type: i0.Input
                }], showAlias: [{
                    type: i0.Input
                }] } });

    /**
     * Displays a list of all contacts
     *
     * @usageNotes
     *
     * ### Display a list of types of contact that can be created
     *
     * ```html
     * <bb-contacts-list-widget
     *       [items]="items.contacts"
     *       [showAlias]="false"
     *     >
     *  </bb-contacts-list-widget>
     * ```
     *
     * ### Additionally update the list
     *
     * ```html
     *  <bb-contacts-list-widget
     *       [items]="items.contacts"
     *       (selectedChange)="hostRef.select($event)"
     *       (formItemChange)="hostRef.edit($event)"
     *       [showAlias]="false"
     *     >
     *   </bb-contacts-list-widget>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsListWidgetComponent = /** @class */ (function () {
        function ContactsListWidgetComponent() {
            /**
             * Event that is emitted when selected item changes
             */
            this.selectedChange = new i0.EventEmitter();
            this.focused = 0;
            this.contactItemArray = [];
            this.accountTypeSelected = exports.AccountCreateType.IBAN;
            this.gc$ = new rxjs.Subject();
            this.createAccountTypeRef = exports.AccountCreateType;
        }
        /**
         * AfterViewInit- lifecycle hook.
         */
        ContactsListWidgetComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.contactItem.changes
                .pipe(operators.startWith(this.contactItem))
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(function (data) {
                _this.contactItemArray = data.toArray();
            });
        };
        /**
         * onDestroy - lifecycle hook.
         */
        ContactsListWidgetComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
        };
        /**
         * getTabIndex defines if item can be reached by Tab,
         * which only the focused item can
         *
         * @param {number} i index of an element
         * @returns {number} [tabindex] parameter value
         */
        ContactsListWidgetComponent.prototype.getTabIndex = function (i) {
            return i === this.focused ? '0' : '-1';
        };
        /**
         * Prevents focus from going beyond the limits of the list
         *
         * @param {number} desiredFocus index of an element
         * @returns {number} index of an element within bounds
         */
        ContactsListWidgetComponent.prototype.clampDesiredFocus = function (desiredFocus) {
            return Math.max(0, Math.min(desiredFocus, this.items.length - 1));
        };
        /**
         * Implements keyboard controls for the contact list.
         * Call on key down events to move the focus to the appropriate element.
         *
         * @param {Event} event HTMLEvent object
         * @param {number} desiredFocus index of an element
         */
        ContactsListWidgetComponent.prototype.onChangeFocusItemTo = function (event, desiredFocus) {
            var _this = this;
            var _a, _b;
            event.preventDefault();
            var realisticFocus = this.clampDesiredFocus(desiredFocus);
            if (this.focused === realisticFocus)
                return;
            this.focused = realisticFocus;
            (_b = (_a = this.contactItem.find(function (_, i) { return i === _this.focused; })) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.focus();
        };
        /**
         *
         * @param {string} id - Id of the selcted contact
         * @param {number} index - index of the selected contact
         */
        ContactsListWidgetComponent.prototype.onContactSelect = function (id, index) {
            this.focused = index;
            this.accountTypeSelected = '';
            this.selectedChange.emit(id);
        };
        /**
         * isListHeading defines if grouping heading
         * should be added before list item
         *
         * @param {ContactItem} item ContactItem object
         * @param {number} index index of an element
         * @returns {boolean} whether item a list heading
         */
        ContactsListWidgetComponent.prototype.isListHeading = function (item, index) {
            var char = this.getGroupHeadingChar(item.name.trim());
            if (this.latestSeparator !== char || !index) {
                this.latestSeparator = char;
                return true;
            }
            return false;
        };
        /**
         * hasNoSeparatorClass tells if the list item
         * should have bb-grouped-list__item--no-separator class.
         *
         * @param {number} index index of an element
         * @returns {boolean} whether element should have separator class
         */
        ContactsListWidgetComponent.prototype.hasNoSeparatorClass = function (index) {
            var nextItem = this.items[index + 1];
            if (!nextItem) {
                return false;
            }
            else {
                var nextChar = this.getGroupHeadingChar(nextItem.name.trim());
                if (this.latestSeparator !== nextChar) {
                    return true;
                }
            }
            return false;
        };
        ContactsListWidgetComponent.prototype.getGroupHeadingChar = function (name) {
            return String.fromCodePoint(name.codePointAt(0)).toUpperCase();
        };
        return ContactsListWidgetComponent;
    }());
    /** @nocollapse */ ContactsListWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsListWidgetComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactsListWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListWidgetComponent, selector: "bb-contacts-list-widget", inputs: { items: "items", selectedItemId: "selectedItemId", showAlias: "showAlias" }, outputs: { selectedChange: "selectedChange" }, viewQueries: [{ propertyName: "contactItem", predicate: ["contactItem"], descendants: true }], ngImport: i0__namespace, template: "<div *ngIf=\"items && items.length\">\n  <ul class=\"bb-grouped-list\" data-role=\"existing-contact\" role=\"list\">\n    <ng-container *ngFor=\"let item of items; let i = index\">\n      <li\n        *ngIf=\"isListHeading(item, i)\"\n        class=\"bb-grouped-list__group bb-text-support bb-text-bold\"\n        data-role=\"header-row\"\n      >\n        {{ latestSeparator }}\n      </li>\n      <li\n        class=\"bb-grouped-list__item\"\n        role=\"button\"\n        data-role=\"contact-manager-list-item\"\n        [tabindex]=\"getTabIndex(i)\"\n        [attr.aria-pressed]=\"selectedItemId === item.id\"\n        [ngClass]=\"{\n          'bb-grouped-list__item--is-active': selectedItemId === item.id,\n          'bb-grouped-list__item--no-separator': hasNoSeparatorClass(i)\n        }\"\n        (keydown.Home)=\"onChangeFocusItemTo($event, 0)\"\n        (keydown.ArrowUp)=\"onChangeFocusItemTo($event, i-1)\"\n        (keydown.ArrowDown)=\"onChangeFocusItemTo($event, i+1)\"\n        (keydown.End)=\"onChangeFocusItemTo($event, items.length)\"\n        (click)=\"onContactSelect(item.id, i)\"\n        (keyup.Space)=\"onContactSelect(item.id, i)\"\n        (keyup.Enter)=\"onContactSelect(item.id, i)\"\n        #contactItem\n      >\n        <bb-contact-list-item\n          [contactItem]=\"item\"\n          [showAccountNumber]=\"true\"\n          [showAlias]=\"showAlias\"\n        ></bb-contact-list-item>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n", components: [{ type: ContactsListItemComponent, selector: "bb-contact-list-item", inputs: ["contactItem", "showAccountNumber", "showAlias"] }], directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsListWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contacts-list-widget',
                        templateUrl: './contact-list.component.html',
                    }]
            }], propDecorators: { items: [{
                    type: i0.Input
                }], selectedChange: [{
                    type: i0.Output
                }], selectedItemId: [{
                    type: i0.Input
                }], contactItem: [{
                    type: i0.ViewChildren,
                    args: ['contactItem']
                }], showAlias: [{
                    type: i0.Input
                }] } });

    /**
     * This is an extension slot to be used for customizing contact manager widget..
     *
     * @usageNotes
     *
     * ### Display a single contact detail
     *
     * ```html
     *  <ng-template bbContactsListContainerCustomizable let-hostRef let-items="context">
     *   <div
     *     class="col"
     *     [ngClass]="{
     *       'd-block': hostRef.isListView | async,
     *       'd-lg-block d-none': !(hostRef.isListView | async)
     *     }"
     *   >
     *     <bb-contacts-list-widget
     *       [items]="items.contacts"
     *       (selectedChange)="hostRef.select($event)"
     *       (formItemChange)="hostRef.edit($event)"
     *       [showAlias]="false"
     *     >
     *     </bb-contacts-list-widget>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsListContainerCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsListContainerCustomizableDirective, _super);
        function ContactsListContainerCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsListContainerCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsListContainerCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsListContainerCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsListContainerCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListContainerCustomizableDirective, selector: "[bbContactsListContainerCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsListContainerCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsListContainerCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing contact manager header section
     *
     * @usageNotes
     *
     * ### Display a header section with search box
     *
     * ```html
     *  <ng-template bbContactsTopSectionCustomizable let-hostRef let-item="context">
     *   <div class="col bb-stack">
     *     <div class="bb-stack__item bb-stack__item--fill">
     *       <bb-search-box-ui
     *         class="bb-toolbar__item"
     *         data-role="search-contact-textbox"
     *         placeholder="Search"
     *         i18n-placeholder="Search box placeholder | Placeholder for search box@@contact-manager.placeholder.search"
     *         [showSearch]="true"
     *         [showClear]="true"
     *         (submit)="hostRef.searchBoxItemSelected()"
     *         (clear)="hostRef.searchBoxItemSelected(true)"
     *         [formControl]="hostRef.searchTerm"
     *         (keyUp.enter)="hostRef.searchBoxItemSelected()"
     *       ></bb-search-box-ui>
     *     </div>
     *     <div class="bb-stack__item">
     *       <button
     *         bbButton
     *         i18n="New Contact Button | Button for creating a new contact@@contact-manager.button.newContact"
     *         data-role="new-contact-button"
     *         class="d-none d-lg-block bb-button-bar__button"
     *         [disabled]="!(hostRef.newContactAllowed | async)"
     *         (click)="hostRef.newContact(item.contacts.length)"
     *         type="button"
     *       >
     *         New Contact
     *       </button>
     *       <button
     *         bbButton
     *         i18n="New Contact Button | Button for creating a new contact@@contact-manager.button.newContact"
     *         data-role="new-contact-button"
     *         class="d-block d-lg-none bb-button-bar__button"
     *         [disabled]="!hostRef.newContactAllowed"
     *         (click)="hostRef.newContact(item.contacts.length)"
     *         type="button"
     *       >
     *         New Contact
     *       </button>
     *     </div>
     *   </div>
     *   <ng-template #rt let-result="result" let-term="term">
     *     <div class="text-truncate" [title]="result">
     *       <ngb-highlight [result]="result" [term]="term"></ngb-highlight>
     *     </div>
     *   </ng-template>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsTopSectionCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsTopSectionCustomizableDirective, _super);
        function ContactsTopSectionCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsTopSectionCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsTopSectionCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsTopSectionCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsTopSectionCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsTopSectionCustomizableDirective, selector: "[bbContactsTopSectionCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsTopSectionCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsTopSectionCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing contact manager pagination
     *
     * @usageNotes
     *
     * ### Display the pagination
     *
     * ```html
     *   <ng-template bbContactsLoadMoreCustomizable let-hostRef let-items="context">
     *   <bb-pagination-ui
     *     *ngIf="(hostRef.paginationType | async) !== 'load-more'"
     *     class="bb-pagination"
     *     [page]="(hostRef.pagination | async)?.from"
     *     [boundaryLinks]="false"
     *     [directionLinks]="true"
     *     [totalItems]="items?.count"
     *     [itemsPerPage]="hostRef.pageSize | async"
     *     [maxNavPages]="hostRef.maxNavPages | async"
     *     (pageChange)="hostRef.onPageChange($event)"
     *   ></bb-pagination-ui>
     *   <div class="p-5 text-center" *ngIf="(hostRef.paginationType | async) === 'load-more'">
     *     <button
     *       class="border text-dark btn btn-secondary"
     *       (click)="hostRef.loadMore()"
     *       [disabled]="items.count && items.count <= items.contacts.length"
     *     >
     *       <ng-container
     *          i18n="Load more button label | Load more button shown down bellow contact list@@contact-manager.load-more.label">
     *         Load more
     *       </ng-container>
     *     </button>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsLoadMoreCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsLoadMoreCustomizableDirective, _super);
        function ContactsLoadMoreCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsLoadMoreCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsLoadMoreCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsLoadMoreCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsLoadMoreCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsLoadMoreCustomizableDirective, selector: "[bbContactsLoadMoreCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsLoadMoreCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsLoadMoreCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing contact manager widget loading view
     *
     * @usageNotes
     *
     * ### Display loading icon
     *
     * ```html
     *    <ng-template bbContactsLoadingCustomizable let-hostRef>
     *   <div class="bb-state-container">
     *     <bb-loading-indicator-ui
     *       i18n-text="@@contact-manager.loading.label"
     *       text="Loading contacts..."
     *     ></bb-loading-indicator-ui>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsLoadingCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsLoadingCustomizableDirective, _super);
        function ContactsLoadingCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsLoadingCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsLoadingCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsLoadingCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsLoadingCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsLoadingCustomizableDirective, selector: "[bbContactsLoadingCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsLoadingCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsLoadingCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing contact manager widget empty view
     *
     * @usageNotes
     *
     * ### Display empty message
     *
     * ```html
     *  <ng-template bbContactsEmptyStateCustomizable let-hostRef>
     *   <div class="bb-state-container">
     *     <bb-empty-state-ui
     *       i18n-title="@@contact-manager.state.noContactsLoaded.title"
     *       title="No contacts"
     *       i18n-subtitle="@@contact-manager.state.noContactsLoaded.subtitle"
     *       subtitle="You don't have any contacts to display yet.<br>Try adding a new contact using the 'New Contact' button"
     *       iconClasses="d-flex justify-content-center mb-3"
     *       iconModifier="contacts"
     *       iconColor="primary"
     *       iconSize="xxl"
     *     ></bb-empty-state-ui>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsEmptyStateCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsEmptyStateCustomizableDirective, _super);
        function ContactsEmptyStateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsEmptyStateCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsEmptyStateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEmptyStateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsEmptyStateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEmptyStateCustomizableDirective, selector: "[bbContactsEmptyStateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEmptyStateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsEmptyStateCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing contact manager Empty view on search
     *
     * @usageNotes
     *
     * ### Display no search result found message.
     *
     * ```html
     *  <ng-template bbContactsEmptySearchStateCustomizable let-hostRef let-term="context">
     *   <div class="bb-state-container">
     *     <bb-empty-state-ui
     *       i18n-title="@@contact-manager.state.empty-search.title"
     *       title="No results found"
     *       i18n-subtitle="@@contact-manager.state.empty-search.subtitle"
     *       subtitle="We can't find what you're looking for. Please try a different criteria."
     *       iconClasses="d-flex justify-content-center mb-3"
     *       iconModifier="search"
     *       iconColor="primary"
     *       iconSize="xxl"
     *     ></bb-empty-state-ui>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsEmptySearchStateCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsEmptySearchStateCustomizableDirective, _super);
        function ContactsEmptySearchStateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsEmptySearchStateCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsEmptySearchStateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEmptySearchStateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsEmptySearchStateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEmptySearchStateCustomizableDirective, selector: "[bbContactsEmptySearchStateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsEmptySearchStateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsEmptySearchStateCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing contact Error state
     *
     * @usageNotes
     *
     * ### Display error view
     *
     * ```html
     *  <ng-template bbContactsErrorStateCustomizable let-hostRef let-error="context">
     *   <div class="bb-state-container">
     *     <bb-common-error-state-ui [error]="error"></bb-common-error-state-ui>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsErrorStateCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactsErrorStateCustomizableDirective, _super);
        function ContactsErrorStateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactsErrorStateCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ ContactsErrorStateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsErrorStateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactsErrorStateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsErrorStateCustomizableDirective, selector: "[bbContactsErrorStateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsErrorStateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactsErrorStateCustomizable]',
                    }]
            }] });

    /**
     * The following extension slots are available in this component:
     *  - `ContactsListContainerCustomizableDirective`
     *  - `ContactsTopSectionCustomizableDirective`
     *  - `ContactsLoadMoreCustomizableDirective`
     *  - `ContactsLoadingCustomizableDirective`
     *  - `ContactsEmptyStateCustomizableDirective`
     *  - `ContactsEmptySearchStateCustomizableDirective`
     *  - `ContactsErrorStateCustomizableDirective`
     *
     * @see ContactsListContainerCustomizableDirective
     * @see ContactsTopSectionCustomizableDirective
     * @see ContactsLoadMoreCustomizableDirective
     * @see ContactsLoadingCustomizableDirective
     * @see ContactsEmptyStateCustomizableDirective
     * @see ContactsEmptySearchStateCustomizableDirective
     * @see ContactsErrorStateCustomizableDirective
     * Container component for showing contact list.
     * @usageNotes
     *
     * ### Display list of all the contacts with details / edit form.
     *
     * ```html
     * <bb-contacts-list-container>
     *  <router-outlet></router-outlet>
     * </bb-contacts-list-container>
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    var ContactsListContainerComponent = /** @class */ (function () {
        function ContactsListContainerComponent(service, navigation, router, route, propertiesService) {
            var _this = this;
            this.service = service;
            this.navigation = navigation;
            this.router = router;
            this.route = route;
            this.propertiesService = propertiesService;
            this.firstContactEdit = false;
            this.isSearchBoxVisible = true;
            this.searchTerm = new i1$2.FormControl();
            this.containerlistParams = new rxjs.BehaviorSubject('');
            this.debounceSearch$ = new rxjs.Subject();
            this.hostRef = this;
            this.newContactAllowed = this.propertiesService.newContact$;
            this.pageSize = this.propertiesService.pageSize$;
            this.maxNavPages = this.propertiesService.maxNavPages$;
            this.paginationType = this.propertiesService.paginationType$;
            this.isListView = this.router.events.pipe(operators.filter(function (e) { return e instanceof i2$2.NavigationEnd; }), operators.map(function (e) { return e.url; }), operators.startWith(this.router.url), operators.map(function () {
                var isList = _this.navigation.currentView === View.List;
                if (isList) {
                    _this.firstContactEdit = false;
                }
                return isList;
            }), operators.shareReplay());
            this.pagination = rxjs.combineLatest([this.route.queryParamMap, this.pageSize]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), params = _c[0], pageSize = _c[1];
                return _this.pageParamsFromRoute(params, pageSize);
            }));
            this.items = this.service.items.pipe(operators.tap(function (results) {
                _this.isSearchBoxVisible = !!_this.searchTerm.value ? true : results.contacts.length > 0;
                results.contacts.sort(function (a, b) { return a.name.toLocaleUpperCase().trim() > b.name.toLocaleUpperCase().trim() ? 1 : -1; });
            }), operators.catchError(function (error) {
                _this.error = error;
                return rxjs.of(undefined);
            }));
            /**
             * Observable of currently selected item id
             */
            this.selectedItemId = this.service.currentlySelectedItemId;
            this.listParams = rxjs.combineLatest([
                this.containerlistParams,
                this.pagination,
                this.pageSize,
                this.paginationType,
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 4), method = _c[0], paginationParams = _c[1], pageSize = _c[2], paginationType = _c[3];
                if (method === i8.LoadMoreMethod.LOAD_MORE && paginationType === i8.LoadMoreMethod.LOAD_MORE) {
                    paginationParams.from++;
                    paginationParams.size = pageSize;
                }
                return {
                    paginationParams: paginationParams,
                    paginationType: paginationType,
                    method: method,
                };
            }), operators.map(function (_b) {
                var paginationParams = _b.paginationParams, paginationType = _b.paginationType, method = _b.method;
                return ({
                    pagination: {
                        from: paginationParams.from,
                        size: paginationParams.size,
                        query: paginationParams.query,
                    },
                    paginationType: paginationType,
                    method: method,
                });
            }));
        }
        ContactsListContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.listParams.subscribe(function (params) {
                return _this.service.updateItemList(params.pagination.query, params.pagination.from, params.pagination.size, params.paginationType, params.method);
            });
            this.subscription.add(this.debounceSearch$
                .pipe(operators.debounceTime(300), operators.distinctUntilChanged())
                .subscribe(function (term) { return _this.searchContacts(term); }));
        };
        /**
         * Event handler for search box value change
         *
         * @param {string} phrase text to search for
         */
        ContactsListContainerComponent.prototype.onSearchTermChange = function (phrase) {
            this.debounceSearch$.next(phrase);
        };
        /**
         * Event handler for search box clear
         */
        ContactsListContainerComponent.prototype.clearSearch = function () {
            this.debounceSearch$.next('');
        };
        /**
         * Queries contacts with given phrase
         *
         * @param {string} phrase text to search for
         */
        ContactsListContainerComponent.prototype.searchContacts = function (phrase) {
            this.containerlistParams.next('search');
            this.navigation.list(0, phrase); // TODO: Remove query params when migrating widget
        };
        /**
         * Navigates to list page.
         *
         * @param {number} page Current page number.
         */
        ContactsListContainerComponent.prototype.onPageChange = function (page) {
            this.navigation.list(page);
        };
        /**
         * Updat the list parameter as load more.
         */
        ContactsListContainerComponent.prototype.loadMore = function () {
            this.containerlistParams.next('load-more');
        };
        /**
         * Routes to selected contact details.
         *
         * @param {string} id  Contact ID
         */
        ContactsListContainerComponent.prototype.select = function (id) {
            this.navigation.select(id);
        };
        /**
         * Routes to new contact.
         *
         * @param {number} totalContacts - total number of contacts.
         */
        ContactsListContainerComponent.prototype.newContact = function (totalContacts) {
            this.firstContactEdit = !totalContacts;
            this.navigation.newContact();
            this.navigation.currentView = View.Select;
        };
        /**
         * method to return back to list view.
         */
        ContactsListContainerComponent.prototype.backToList = function () {
            this.navigation.currentView = View.List;
            this.navigation.list();
        };
        ContactsListContainerComponent.prototype.pageParamsFromRoute = function (query, pageSize) {
            var from = query.get('page');
            this.searchTerm.setValue(query.get('query') || '');
            return {
                from: (from && Number.parseInt(from, 10)) || 0,
                size: pageSize ? Number(pageSize) : 5,
                query: this.searchTerm.value || '',
            };
        };
        ContactsListContainerComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        return ContactsListContainerComponent;
    }());
    /** @nocollapse */ ContactsListContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsListContainerComponent, deps: [{ token: ContactsService }, { token: ContactsNavigationService }, { token: i2__namespace$2.Router }, { token: i2__namespace$2.ActivatedRoute }, { token: ContactManagerPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactsListContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListContainerComponent, selector: "bb-contacts-list-container", ngImport: i0__namespace, template: "<div class=\"card card-body\" data-role=\"loading-label\">\n  <ng-container *ngIf=\"items | async as items; else loadingTemplate\">\n    <div\n      class=\"bb-block bb-block--md\"\n      [ngClass]=\"{\n        'd-none d-lg-block': !(isListView | async)\n      }\"\n    >\n      <div class=\"row\">\n        <ng-container bbContactsTopSectionCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"items\"></ng-container>\n      </div>\n    </div>\n    <div *ngIf=\"!(isListView | async)\" class=\"row d-block d-lg-none\">\n      <button bbButton color=\"unstyled\" (click)=\"backToList()\" class=\"bb-text-bold text-primary\">\n        <bb-icon-ui name=\"angle-left\"></bb-icon-ui>\n        <span i18n=\"Back to list view|Span for going back to list view@@contact-manager.span.backToList\">\n          Back to list\n        </span>\n      </button>\n    </div>\n    <div\n      class=\"row bb-block bb-block--md\"\n      *ngIf=\"(items && items.contacts.length > 0) || hostRef.firstContactEdit; else emptyTemplate\"\n    >\n      <ng-container\n        bbContactsListContainerCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"items\"\n      ></ng-container>\n      <div\n        class=\"col col-lg-6\"\n        [ngClass]=\"{\n          'd-none d-lg-block': isListView | async\n        }\"\n      >\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <div\n      class=\"row\"\n      [ngClass]=\"{\n        'd-none d-lg-block': !(isListView | async)\n      }\"\n    >\n      <div class=\"col-lg-6\">\n        <ng-container bbContactsLoadMoreCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"items\"></ng-container>\n        <ng-template bbContactsLoadMoreCustomizable let-hostRef let-items=\"context\">\n          <bb-pagination-ui\n            *ngIf=\"(hostRef.paginationType | async) !== 'load-more'\"\n            class=\"bb-pagination\"\n            [page]=\"(hostRef.pagination | async)?.from\"\n            [boundaryLinks]=\"false\"\n            [directionLinks]=\"true\"\n            [totalItems]=\"items?.count\"\n            [itemsPerPage]=\"hostRef.pageSize | async\"\n            [maxNavPages]=\"hostRef.maxNavPages | async\"\n            (pageChange)=\"hostRef.onPageChange($event)\"\n          ></bb-pagination-ui>\n          <div\n            class=\"p-5 text-center\"\n            *ngIf=\"(hostRef.paginationType | async) === 'load-more' && items.contacts.length > 0\"\n          >\n            <bb-load-button-ui\n              class=\"bb-block bb-block--md\"\n              color=\"secondary\"\n              data-role=\"contact-load-more\"\n              *ngIf=\"items.count && items.count > items.contacts.length\"\n              (click)=\"hostRef.loadMore()\"\n            >\n              <ng-container\n                i18n=\"Load more button label | Load more button shown down bellow contact list@@contact-manager.load-more.label\"\n              >\n                Load more\n              </ng-container>\n            </bb-load-button-ui>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template bbContactsListContainerCustomizable let-hostRef let-items=\"context\">\n    <div\n      class=\"col\"\n      [ngClass]=\"{\n        'd-block': hostRef.isListView | async,\n        'd-lg-block d-none': !(hostRef.isListView | async)\n      }\"\n    >\n      <bb-contacts-list-widget\n        [items]=\"items.contacts\"\n        [selectedItemId]=\"hostRef.selectedItemId | async\"\n        [showAlias]=\"false\"\n        (selectedChange)=\"hostRef.select($event)\"\n      >\n      </bb-contacts-list-widget>\n    </div>\n  </ng-template>\n\n  <ng-template bbContactsTopSectionCustomizable let-hostRef let-items=\"context\">\n    <div class=\"col bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <bb-search-box-ui\n          *ngIf=\"hostRef.isSearchBoxVisible\"\n          class=\"bb-toolbar__item\"\n          data-role=\"contact-manager-search\"\n          placeholder=\"Search\"\n          i18n-placeholder=\"Search box placeholder | Placeholder for search box@@contact-manager.placeholder.search\"\n          aria-label=\"Search\"\n          i18n-aria-label=\"@@contact-manager.placeholder.search\"\n          [showSearch]=\"true\"\n          [showClear]=\"true\"\n          [formControl]=\"hostRef.searchTerm\"\n          (valueChange)=\"hostRef.onSearchTermChange($event)\"\n          (submit)=\"hostRef.searchContacts(hostRef.searchTerm.value)\"\n          (keyup.enter)=\"hostRef.searchContacts(hostRef.searchTerm.value)\"\n          (clear)=\"hostRef.clearSearch()\"\n        ></bb-search-box-ui>\n        <div class=\"sr-only\" aria-live=\"assertive\">\n          <p i18n=\"@@contact-manager.list.results-found\">\n            {items.count || 0, plural, =1 {1 result found} other {{{items.count}} results found}}\n          </p>\n        </div>\n      </div>\n      <div class=\"bb-stack__item align-self-start\">\n        <button\n          bbButton\n          i18n=\"New Contact Button | Button for creating a new contact@@contact-manager.button.newContact\"\n          data-role=\"new-contact-button\"\n          class=\"d-block bb-button-bar__button\"\n          [disabled]=\"!(hostRef.newContactAllowed | async)\"\n          (click)=\"hostRef.newContact(items.contacts.length)\"\n          type=\"button\"\n        >\n          New Contact\n        </button>\n      </div>\n    </div>\n    <ng-template #rt let-result=\"result\" let-term=\"term\">\n      <div class=\"text-truncate\" [title]=\"result\">\n        <ngb-highlight [result]=\"result\" [term]=\"term\"></ngb-highlight>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <ng-template bbContactsLoadingCustomizable let-hostRef>\n    <div class=\"bb-state-container\">\n      <bb-loading-indicator-ui\n        i18n-text=\"@@contact-manager.loading.label\"\n        text=\"Loading contacts...\"\n        data-role=\"contact-manager-loading\"\n      ></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #loadingTemplate>\n    <ng-container *ngIf=\"!error; else errorTemplate\" bbContactsLoadingCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsEmptyStateCustomizable let-hostRef>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"@@contact-manager.state.noContactsLoaded.title\"\n        title=\"No contacts\"\n        i18n-subtitle=\"@@contact-manager.state.noContactsLoaded.subtitle\"\n        subtitle=\"You don't have any contacts to display yet.<br>Try adding a new contact using the 'New Contact' button\"\n        iconClasses=\"d-flex justify-content-center mb-3\"\n        iconModifier=\"contacts\"\n        iconSize=\"xxl\"\n        data-role=\"contact-manager-empty\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <ng-container\n      *ngIf=\"!hostRef.searchTerm.value; else emptySearchTemplate\"\n      bbContactsEmptyStateCustomizable\n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsEmptySearchStateCustomizable let-hostRef let-term=\"context\">\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"@@contact-manager.state.empty-search.title\"\n        title=\"No results found\"\n        i18n-subtitle=\"@@contact-manager.state.empty-search.subtitle\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        iconClasses=\"d-flex justify-content-center mb-3\"\n        iconModifier=\"search\"\n        iconColor=\"primary\"\n        iconSize=\"xxl\"\n        data-role=\"contact-manager-list-search-empty\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptySearchTemplate>\n    <ng-container\n      bbContactsEmptySearchStateCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"searchTerm\"\n    ></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsErrorStateCustomizable let-hostRef let-error=\"context\">\n    <div class=\"bb-state-container\">\n      <bb-common-error-state-ui [attr.data-role]=\"'contact-manager-error'\" [error]=\"error\"></bb-common-error-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <ng-container bbContactsErrorStateCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"error\"></ng-container>\n  </ng-template>\n</div>\n", components: [{ type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6__namespace$2.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i7__namespace$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: ContactsListWidgetComponent, selector: "bb-contacts-list-widget", inputs: ["items", "selectedItemId", "showAlias"], outputs: ["selectedChange"] }, { type: i9__namespace.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i10__namespace.NgbHighlight, selector: "ngb-highlight", inputs: ["highlightClass", "accentSensitive", "result", "term"] }, { type: i7__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i12__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i13__namespace.ErrorCommonStateComponent, selector: "bb-common-error-state-ui", inputs: ["error"] }], directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: ContactsTopSectionCustomizableDirective, selector: "[bbContactsTopSectionCustomizable]" }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: ContactsListContainerCustomizableDirective, selector: "[bbContactsListContainerCustomizable]" }, { type: ContactsLoadMoreCustomizableDirective, selector: "[bbContactsLoadMoreCustomizable]" }, { type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: ContactsLoadingCustomizableDirective, selector: "[bbContactsLoadingCustomizable]" }, { type: ContactsEmptyStateCustomizableDirective, selector: "[bbContactsEmptyStateCustomizable]" }, { type: ContactsEmptySearchStateCustomizableDirective, selector: "[bbContactsEmptySearchStateCustomizable]" }, { type: ContactsErrorStateCustomizableDirective, selector: "[bbContactsErrorStateCustomizable]" }], pipes: { "async": i2__namespace$1.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactsListContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contacts-list-container',
                        templateUrl: 'contacts-list-container.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ContactsService }, { type: ContactsNavigationService }, { type: i2__namespace$2.Router }, { type: i2__namespace$2.ActivatedRoute }, { type: ContactManagerPreferencesService }]; } });

    /**
     * Returns the new instance of contactnavigationservice.
     *
     * @param {RouterService} service router service
     * @returns {ContactsNavigationService} new service instance
     */
    function makeNavigationService(service) {
        return new ContactsNavigationService(service);
    }
    var contactsRoutes = [
        {
            path: '',
            component: ContactsDetailContainerComponent,
        },
        {
            path: 'select',
            component: ContactsTypeListContainerComponent,
        },
        {
            path: ':id',
            component: ContactsDetailContainerComponent,
        },
        {
            path: 'edit/:id/:type',
            canDeactivate: [CanDeactivateGuard],
            component: ContactsFormContainerComponent,
        },
    ];
    exports.ContactManagerWidgetComponent = /** @class */ (function () {
        function ContactManagerWidgetComponent(preferencesService) {
            this.preferencesService = preferencesService;
        }
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "newContact", {
            /**
             * property to enable the creation of new contacts
             */
            set: function (value) {
                this.preferencesService.setNewContact(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "pageSize", {
            /**
             * Number of contacts per page
             */
            set: function (value) {
                this.preferencesService.setPageSize(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "maxNavPages", {
            /**
             * Max. number of navigation pages
             */
            set: function (value) {
                this.preferencesService.setMaxNavPages(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "paginationType", {
            /**
             * Pagination type (pagination, load-more)
             */
            set: function (value) {
                this.preferencesService.setPaginationType(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "notificationDismissTime", {
            /**
             * Milliseconds to dismiss any notification message
             */
            set: function (value) {
                this.preferencesService.setNotificationDismissTime(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "createContactEmail", {
            /**
             * property from user if the contact creation through email is allowed
             */
            set: function (value) {
                this.preferencesService.setCreateContactEmail(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "createContactIBAN", {
            /**
             * property from user if the contact creation through IBAN is allowed
             */
            set: function (value) {
                this.preferencesService.setCreateContactIBAN(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "createContactAccount", {
            /**
             * property from user if the contact creation through Account Number is allowed
             */
            set: function (value) {
                this.preferencesService.setCreateContactAccount(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerWidgetComponent.prototype, "createContactPhone", {
            /**
             * property from user if the contact creation through Phone Number is allowed
             */
            set: function (value) {
                this.preferencesService.setCreateContactPhone(value);
            },
            enumerable: false,
            configurable: true
        });
        return ContactManagerWidgetComponent;
    }());
    /** @nocollapse */ exports.ContactManagerWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: exports.ContactManagerWidgetComponent, deps: [{ token: ContactManagerPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ exports.ContactManagerWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: exports.ContactManagerWidgetComponent, selector: "bb-contacts, bb-contact-manager-widget", inputs: { newContact: "newContact", pageSize: "pageSize", maxNavPages: "maxNavPages", paginationType: "paginationType", notificationDismissTime: "notificationDismissTime", createContactEmail: "createContactEmail", createContactIBAN: "createContactIBAN", createContactAccount: "createContactAccount", createContactPhone: "createContactPhone" }, providers: [
            i1.RouterService,
            {
                provide: ContactsNavigationService,
                useFactory: makeNavigationService,
                deps: [i1.RouterService],
            },
            ContactsService,
            ContactManagerPreferencesService,
        ], ngImport: i0__namespace, template: "\n    <bb-contacts-list-container>\n      <bb-router-outlet></bb-router-outlet>\n    </bb-contacts-list-container>\n  ", isInline: true, components: [{ type: ContactsListContainerComponent, selector: "bb-contacts-list-container" }], directives: [{ type: i1__namespace.RouterOutletDirective, selector: "bb-router-outlet", outputs: ["activate", "deactivate"], exportAs: ["bbOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    exports.ContactManagerWidgetComponent = __decorate([
        i1.RoutableWidget({
            routes: contactsRoutes,
        })
        /**
         * A widget for managing contacts.
         *
         * @usageNotes
         *
         * ### Include this widget in your `AppModule`:
         *
         * ```typescript
         * @NgModule({
         *   imports: [
         *     ContactManagerWidgetModule,
         *   ],
         *  providers:[{
         *     provide: ContactsNavigationService,
         *     useFactory: makeNavigationService,
         *     deps: [RouterService],
         *   }],
         *   ...
         * })
         * export class AppModule {}
         * ```
         *
         * ### Include this widget (standalone model)
         *
         * ```typescript
         * export const environment: Environment = {
         *   ...
         *   bootstrap: {
         *     pageModel: {
         *       name: 'root',
         *       properties: {},
         *       children: [
         *         {
         *           name: 'bb-contact-manager-ang',
         *           properties: {
         *             classId: 'ContactManagerWidgetModule',
         *             "notificationDismissTime": 0,
         *             "createContactIBAN": true,
         *             "createContactPhone": true,
         *             "createContactAccount": true,
         *             "createContactEmail": true
         *           },
         *         },
         *       ],
         *     },
         *   },
         * };
         * ```
         *
         * ### Routable Widget
         *
         * Using the `@CopyRoutes` for component
         *
         * ```typescript
         * @CopyRoutes(ContactManagerWidgetComponent)
         * export class ExtendedContactManagerWidgetComponent
         * ```
         * @ngModule ContactManagerWidgetModule
         */
        ,
        __metadata("design:paramtypes", [ContactManagerPreferencesService])
    ], exports.ContactManagerWidgetComponent);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: exports.ContactManagerWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contacts, bb-contact-manager-widget',
                        template: "\n    <bb-contacts-list-container>\n      <bb-router-outlet></bb-router-outlet>\n    </bb-contacts-list-container>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            i1.RouterService,
                            {
                                provide: ContactsNavigationService,
                                useFactory: makeNavigationService,
                                deps: [i1.RouterService],
                            },
                            ContactsService,
                            ContactManagerPreferencesService,
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ContactManagerPreferencesService }]; }, propDecorators: { newContact: [{
                    type: i0.Input,
                    args: ['newContact']
                }], pageSize: [{
                    type: i0.Input,
                    args: ['pageSize']
                }], maxNavPages: [{
                    type: i0.Input,
                    args: ['maxNavPages']
                }], paginationType: [{
                    type: i0.Input,
                    args: ['paginationType']
                }], notificationDismissTime: [{
                    type: i0.Input,
                    args: ['notificationDismissTime']
                }], createContactEmail: [{
                    type: i0.Input,
                    args: ['createContactEmail']
                }], createContactIBAN: [{
                    type: i0.Input,
                    args: ['createContactIBAN']
                }], createContactAccount: [{
                    type: i0.Input,
                    args: ['createContactAccount']
                }], createContactPhone: [{
                    type: i0.Input,
                    args: ['createContactPhone']
                }] } });

    var uiModules = [
        i6.ButtonModule,
        i3.IconModule,
        i4.NotificationModule,
        i1$2.FormsModule,
        i4$1.InputTextModule,
        i5.InputValidationMessageModule,
        i2.HeaderModule,
        i12.EmptyStateModule,
        avatar.AvatarModule,
        i6$2.PaginatorModule,
        dropdownMenu.DropdownMenuModule,
        ellipsis.EllipsisModule,
        i7.LoadingIndicatorModule,
        i13.ErrorCommonStateModule,
        i10.NgbDropdownModule,
        i10.NgbTypeaheadModule,
        i1$2.ReactiveFormsModule,
        i8$1.BbIbanPipeModule,
        i9.SearchBoxModule,
        i6$1.InputEmailModule,
        i7$1.LoadButtonModule,
    ];
    var dependentModules = [i8.IbanValidatorModule, i8.NoWhiteSpaceModule, i8.ConfirmActionDialogModule, i8.EmailDomainModule];
    var components = [
        exports.ContactManagerWidgetComponent,
        ContactsListWidgetComponent,
        ContactsListItemComponent,
        ContactsListContainerComponent,
        ContactsDetailComponent,
        ContactsDetailContainerComponent,
        ContactsFormComponent,
        ContactsFormContainerComponent,
        ContactSelectAccountTypeComponent,
        ContactsTypeListContainerComponent,
    ];
    var customizationDirectives = [
        ContactsListContainerCustomizableDirective,
        ContactsTopSectionCustomizableDirective,
        ContactsDetailCustomizableDirective,
        ContactsFormCustomizableDirective,
        ContactsLoadMoreCustomizableDirective,
        ContactsLoadingCustomizableDirective,
        ContactsEmptyStateCustomizableDirective,
        ContactsEmptySearchStateCustomizableDirective,
        ContactsErrorStateCustomizableDirective,
        ContactsCreateErrorNotificationCustomizableDirective,
        ContactsCreateSuccessNotificationCustomizableDirective,
        ContactsDeleteConfirmationCustomizableDirective,
        ContactsDeleteErrorNotificationCustomizableDirective,
        ContactsDeleteSuccessNotificationCustomizableDirective,
        ContactsEditDiscardConfirmationCustomizableDirective,
        ContactsEditErrorNotificationCustomizableDirective,
        ContactsEditSuccessNotificationCustomizableDirective,
    ];
    /**
     * Exports the Widgets and UI components for managing contacts.
     *
     * The following widgets are included in this module:
     *  - `ContactManagerWidgetComponent`
     *
     * @see ContactManagerWidgetComponent
     * @usageNotes
     *
     * ### Include the exported widgets in your `AppModule`:
     *
     * ```typescript
     * @NgModule({
     *   imports: [
     *     ContactManagerWidgetModule,
     *   ],
     *  providers:[{
     *   provide: CONTACT_MANAGER_BASE_PATH,
     *   useFactory: getBasePath('contact-manager'),
     *   deps: [PAGE_CONFIG], },
     * {
     *   provide: ACCESS_CONTROL_BASE_PATH,
     *   useFactory: getBasePath('access-control'),
     *   deps: [PAGE_CONFIG], }]
     *   ...
     * })
     * export class AppModule {}
     * ```
     */
    var ContactManagerWidgetModule = /** @class */ (function () {
        function ContactManagerWidgetModule() {
        }
        return ContactManagerWidgetModule;
    }());
    /** @nocollapse */ ContactManagerWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ContactManagerWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerWidgetModule, declarations: [exports.ContactManagerWidgetComponent,
            ContactsListWidgetComponent,
            ContactsListItemComponent,
            ContactsListContainerComponent,
            ContactsDetailComponent,
            ContactsDetailContainerComponent,
            ContactsFormComponent,
            ContactsFormContainerComponent,
            ContactSelectAccountTypeComponent,
            ContactsTypeListContainerComponent, ContactsListContainerCustomizableDirective,
            ContactsTopSectionCustomizableDirective,
            ContactsDetailCustomizableDirective,
            ContactsFormCustomizableDirective,
            ContactsLoadMoreCustomizableDirective,
            ContactsLoadingCustomizableDirective,
            ContactsEmptyStateCustomizableDirective,
            ContactsEmptySearchStateCustomizableDirective,
            ContactsErrorStateCustomizableDirective,
            ContactsCreateErrorNotificationCustomizableDirective,
            ContactsCreateSuccessNotificationCustomizableDirective,
            ContactsDeleteConfirmationCustomizableDirective,
            ContactsDeleteErrorNotificationCustomizableDirective,
            ContactsDeleteSuccessNotificationCustomizableDirective,
            ContactsEditDiscardConfirmationCustomizableDirective,
            ContactsEditErrorNotificationCustomizableDirective,
            ContactsEditSuccessNotificationCustomizableDirective], imports: [i2$1.CommonModule,
            i2$2.RouterModule, i8.IbanValidatorModule, i8.NoWhiteSpaceModule, i8.ConfirmActionDialogModule, i8.EmailDomainModule, i6.ButtonModule,
            i3.IconModule,
            i4.NotificationModule,
            i1$2.FormsModule,
            i4$1.InputTextModule,
            i5.InputValidationMessageModule,
            i2.HeaderModule,
            i12.EmptyStateModule,
            avatar.AvatarModule,
            i6$2.PaginatorModule,
            dropdownMenu.DropdownMenuModule,
            ellipsis.EllipsisModule,
            i7.LoadingIndicatorModule,
            i13.ErrorCommonStateModule,
            i10.NgbDropdownModule,
            i10.NgbTypeaheadModule,
            i1$2.ReactiveFormsModule,
            i8$1.BbIbanPipeModule,
            i9.SearchBoxModule,
            i6$1.InputEmailModule,
            i7$1.LoadButtonModule, i1__namespace.BackbaseCoreModule], exports: [exports.ContactManagerWidgetComponent,
            ContactsListWidgetComponent,
            ContactsListItemComponent,
            ContactsListContainerComponent,
            ContactsDetailComponent,
            ContactsDetailContainerComponent,
            ContactsFormComponent,
            ContactsFormContainerComponent,
            ContactSelectAccountTypeComponent,
            ContactsTypeListContainerComponent, ContactsListContainerCustomizableDirective,
            ContactsTopSectionCustomizableDirective,
            ContactsDetailCustomizableDirective,
            ContactsFormCustomizableDirective,
            ContactsLoadMoreCustomizableDirective,
            ContactsLoadingCustomizableDirective,
            ContactsEmptyStateCustomizableDirective,
            ContactsEmptySearchStateCustomizableDirective,
            ContactsErrorStateCustomizableDirective,
            ContactsCreateErrorNotificationCustomizableDirective,
            ContactsCreateSuccessNotificationCustomizableDirective,
            ContactsDeleteConfirmationCustomizableDirective,
            ContactsDeleteErrorNotificationCustomizableDirective,
            ContactsDeleteSuccessNotificationCustomizableDirective,
            ContactsEditDiscardConfirmationCustomizableDirective,
            ContactsEditErrorNotificationCustomizableDirective,
            ContactsEditSuccessNotificationCustomizableDirective, i8.IbanValidatorModule, i8.NoWhiteSpaceModule, i8.ConfirmActionDialogModule, i8.EmailDomainModule] });
    /** @nocollapse */ ContactManagerWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerWidgetModule, providers: __spreadArray([CanDeactivateGuard, ContactsService], __read(ContactConfigProviders)), imports: [__spreadArray(__spreadArray(__spreadArray([
                i2$1.CommonModule,
                i2$2.RouterModule
            ], __read(dependentModules)), __read(uiModules)), [
                i1.BackbaseCoreModule.withConfig({
                    classMap: { ContactManagerWidgetComponent: exports.ContactManagerWidgetComponent },
                }),
            ]), i8.IbanValidatorModule, i8.NoWhiteSpaceModule, i8.ConfirmActionDialogModule, i8.EmailDomainModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray(__spreadArray([
                            i2$1.CommonModule,
                            i2$2.RouterModule
                        ], __read(dependentModules)), __read(uiModules)), [
                            i1.BackbaseCoreModule.withConfig({
                                classMap: { ContactManagerWidgetComponent: exports.ContactManagerWidgetComponent },
                            }),
                        ]),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(customizationDirectives)),
                        providers: __spreadArray([CanDeactivateGuard, ContactsService], __read(ContactConfigProviders)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(customizationDirectives)), __read(dependentModules)),
                        entryComponents: [
                            ContactsDetailContainerComponent,
                            ContactsListContainerComponent,
                            ContactsFormContainerComponent,
                            ContactsTypeListContainerComponent,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BB_CONTACT_FORM_ADDITIONS_TOKEN = BB_CONTACT_FORM_ADDITIONS_TOKEN;
    exports.CanDeactivateGuard = CanDeactivateGuard;
    exports.ContactManagerPreferencesService = ContactManagerPreferencesService;
    exports.ContactManagerWidgetModule = ContactManagerWidgetModule;
    exports.ContactSelectAccountTypeComponent = ContactSelectAccountTypeComponent;
    exports.ContactsCreateErrorNotificationCustomizableDirective = ContactsCreateErrorNotificationCustomizableDirective;
    exports.ContactsCreateSuccessNotificationCustomizableDirective = ContactsCreateSuccessNotificationCustomizableDirective;
    exports.ContactsDeleteConfirmationCustomizableDirective = ContactsDeleteConfirmationCustomizableDirective;
    exports.ContactsDeleteErrorNotificationCustomizableDirective = ContactsDeleteErrorNotificationCustomizableDirective;
    exports.ContactsDeleteSuccessNotificationCustomizableDirective = ContactsDeleteSuccessNotificationCustomizableDirective;
    exports.ContactsDetailComponent = ContactsDetailComponent;
    exports.ContactsDetailContainerComponent = ContactsDetailContainerComponent;
    exports.ContactsDetailCustomizableDirective = ContactsDetailCustomizableDirective;
    exports.ContactsEditDiscardConfirmationCustomizableDirective = ContactsEditDiscardConfirmationCustomizableDirective;
    exports.ContactsEditErrorNotificationCustomizableDirective = ContactsEditErrorNotificationCustomizableDirective;
    exports.ContactsEditSuccessNotificationCustomizableDirective = ContactsEditSuccessNotificationCustomizableDirective;
    exports.ContactsEmptySearchStateCustomizableDirective = ContactsEmptySearchStateCustomizableDirective;
    exports.ContactsEmptyStateCustomizableDirective = ContactsEmptyStateCustomizableDirective;
    exports.ContactsErrorStateCustomizableDirective = ContactsErrorStateCustomizableDirective;
    exports.ContactsFormComponent = ContactsFormComponent;
    exports.ContactsFormContainerComponent = ContactsFormContainerComponent;
    exports.ContactsFormCustomizableDirective = ContactsFormCustomizableDirective;
    exports.ContactsListContainerComponent = ContactsListContainerComponent;
    exports.ContactsListContainerCustomizableDirective = ContactsListContainerCustomizableDirective;
    exports.ContactsListItemComponent = ContactsListItemComponent;
    exports.ContactsListWidgetComponent = ContactsListWidgetComponent;
    exports.ContactsLoadMoreCustomizableDirective = ContactsLoadMoreCustomizableDirective;
    exports.ContactsLoadingCustomizableDirective = ContactsLoadingCustomizableDirective;
    exports.ContactsNavigationService = ContactsNavigationService;
    exports.ContactsTopSectionCustomizableDirective = ContactsTopSectionCustomizableDirective;
    exports.ContactsTypeListContainerComponent = ContactsTypeListContainerComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-contact-manager-widget-ang.umd.js.map
