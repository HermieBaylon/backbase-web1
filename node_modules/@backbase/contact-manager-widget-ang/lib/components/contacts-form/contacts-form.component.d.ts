import { AfterViewInit, EventEmitter, OnChanges, OnInit, SimpleChanges, ViewContainerRef } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { ContactFormAdditions } from '../../config.providers';
import { AccountCreateType, ContactsFormItem } from '../../models/types';
import * as i0 from "@angular/core";
/**
 * Displays a contact form.
 *
 * The following extension slots are available in this component:
 *  - `ContactsFormCustomizableDirective`
 *
 * @see ContactsFormCustomizableDirective
 * @usageNotes
 *
 * ### Display a form for adding / editing the contact form.
 *
 * ```html
 *  <bb-contacts-form
 *   [item]="item"
 *   [type]="itemType$ | async"
 *   (save)="save($event)"
 *   (cancelEdit)="cancelEdit($event)"
 *   (backEvent)="back($event)"
 *   (deleteContactsItem)="deleteContactsItem($event)"
 * ></bb-contacts-form>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export declare class ContactsFormComponent implements OnInit, OnChanges, AfterViewInit {
    private readonly fb;
    private readonly vcRef;
    private readonly platformId;
    private readonly formAdditionsConfig;
    readonly hostRef: ContactsFormComponent;
    submitted: boolean;
    ibanMask: string;
    /**
     * The contact item that is editted
     */
    item: ContactsFormItem;
    /**
     * The contact item type
     */
    type: AccountCreateType;
    /**
     * Controls whether form can be submitted
     */
    disabledSubmit: boolean;
    /**
     * Event emitted when contact edit is saved
     */
    save: EventEmitter<ContactsFormItem>;
    /**
     * Event emitted when contact edit is cancelled
     */
    cancelEdit: EventEmitter<string>;
    /**
     * Event emitted when user clicks back
     */
    backEvent: EventEmitter<string>;
    /**
     * Event emitted when contact is deleted
     */
    deleteContactsItem: EventEmitter<string>;
    /**
     * contactForm group.
     */
    contactsForm: FormGroup;
    /**
     * Contact account Type reference.
     */
    readonly createAccountTypeRef: typeof AccountCreateType;
    constructor(fb: FormBuilder, vcRef: ViewContainerRef, platformId: Object, formAdditionsConfig: ContactFormAdditions);
    /**
     * OnInit - lifecycle hook.
     */
    ngOnInit(): void;
    /**
     * AfterViewInt- lifecycle hook.
     */
    ngAfterViewInit(): void;
    /**
     * OnChanges - lifecycle hook.
     *
     * @param {SimpleChanges} changes angular SimpleChanges object
     */
    ngOnChanges(changes: SimpleChanges): void;
    private createFormGroupInstance;
    /**
     * saveItem - method that emits the data when saved.
     */
    saveItem(): void;
    /**
     * emits the id of the contact that has cancelled.
     */
    cancel(): void;
    /**
     * emits the id, when back is clicked.
     */
    back(): void;
    get name(): AbstractControl | null;
    get iban(): AbstractControl | null;
    get accountNumber(): AbstractControl | null;
    /**
     *  the id of the contact is emitted when deleted.
     */
    deleteItemEmit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactsFormComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContactsFormComponent, "bb-contacts-form", never, { "item": "item"; "type": "type"; "disabledSubmit": "disabledSubmit"; }, { "save": "save"; "cancelEdit": "cancelEdit"; "backEvent": "backEvent"; "deleteContactsItem": "deleteContactsItem"; }, never, never>;
}
/**
 * This is an extension slot to be used for customizing an form of contacts editing.
 *
 * @usageNotes
 *
 * ### Display a contact form.
 *
 * ```html
 *  <bb-contacts-detail
 *   [showDetail]="false"
 *   [item]="hostRef.item"
 *   [type]="hostRef.type"
 *   (deleteContactsItem)="hostRef.deleteItemEmit()"
 * ></bb-contacts-detail>
 * <form
 *  *ngIf="hostRef.contactsForm"
 *   (submit)="hostRef.saveItem()"
 *   [formGroup]="hostRef.contactsForm"
 *   class="bb-block bb-block--xl"
 * >
 *   <fieldSet>
 *     <div class="row">
 *       <div
 *         class="bb-block bb-block--lg col-12"
 *         data-role="contact-account-info-account-name1"
 *       >
 *         <label
 *           [for]="contactsName.id"
 *           data-role="edit-contact-label"
 *           i18n="Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name"
 *         >
 *           Name
 *         </label>
 *         <bb-input-text-ui
 *           data-role="new-contact-name"
 *           [formControl]="hostRef.contactsForm.controls.name"
 *           name="contactsName"
 *           #contactsName
 *           [maxLength]="140"
 *           [required]="hostRef.submitted"
 *         >
 *         </bb-input-text-ui>
 *
 *         <bb-input-validation-message-ui
 *           role="alert"
 *           [showErrors]="
 *             hostRef.contactsForm.controls.name.invalid &&
 *             (hostRef.contactsForm.controls.name.dirty || hostRef.contactsForm.controls.name.touched)
 *           ">
 *           <ng-container
 *           *ngIf="hostRef.contactsForm.controls.name.errors?.required || hostRef.contactsForm.controls.name.errors?.minlength">
 *             <span
 *               i18n="
 *                 Contacts name required error text | Text for contacts detail component name required
 *                 error@@contact-manager-form.label.nameRequired
 *               "
 *               data-role="missing-account-name">
 *               Name is required
 *             </span>
 *           </ng-container>
 *         </bb-input-validation-message-ui>
 *       </div>
 *       <div class="bb-block bb-block--lg col-12">
 *         <ng-container [ngSwitch]="hostRef.type">
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.IBAN">
 *             <ng-container *ngTemplateOutlet="iban"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.EMAIL">
 *             <ng-container *ngTemplateOutlet="email"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.PHONE">
 *             <ng-container *ngTemplateOutlet="phone"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.ACCOUNT">
 *             <ng-container *ngTemplateOutlet="bban"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchDefault>
 *             <ng-container *ngTemplateOutlet="iban"></ng-container>
 *           </ng-container>
 *         </ng-container>
 *
 *       </div>
 *     </div>
 *   </fieldSet>
 *   <div class="bb-button-bar">
 *     <button
 *       bbButton
 *       type="submit"
 *       color="primary"
 *       type="submit"
 *       [disabled]="hostRef.contactsForm.invalid || !hostRef.contactsForm?.controls?.name?.value.trim()"
 *       class="bb-button-bar__button"
 *       name="save"
 *       data-role="save-button"
 *       i18n="Save current form | Save button text for saving a contact item@@contact-manager-form.button.save"
 *     >
 *       Save
 *     </button>
 *     <button
 *     bbButton
 *     color="secondary"
 *     (click)="hostRef.back()"
 *     type="button"
 *     class="bb-button-bar__button"
 *     name="back"
 *     data-role="contacts-form-back-button"
 *     i18n="
 *       Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back
 *     "
 *   >
 *     Back
 *   </button>
 *     <button
 *       bbButton
 *       color="link-text"
 *       (click)="hostRef.cancel()"
 *       type="button"
 *       class="bb-button-bar__button bb-button-bar__button--across"
 *       name="cancel"
 *       data-role="contacts-form-cancel-button"
 *       i18n="
 *         Cancel action in current form | Cancel button text for cancelling a creation of a new
 *         contact@@contact-manager-form.button.cancel
 *       "
 *     >
 *       Cancel
 *     </button>
 *   </div>
 * </form>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export declare class ContactsFormCustomizableDirective extends BbTemplate<ContactsFormComponent, ContactsFormItem> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactsFormCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ContactsFormCustomizableDirective, "[bbContactsFormCustomizable]", never, {}, {}, never>;
}
