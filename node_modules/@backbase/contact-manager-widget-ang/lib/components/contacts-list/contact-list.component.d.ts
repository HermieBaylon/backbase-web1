import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { Subject } from 'rxjs';
import { ContactItem } from '@backbase/contact-common-ang';
import { AccountCreateType } from '../../models/types';
import * as i0 from "@angular/core";
/**
 * Displays a list of all contacts
 *
 * @usageNotes
 *
 * ### Display a list of types of contact that can be created
 *
 * ```html
 * <bb-contacts-list-widget
 *       [items]="items.contacts"
 *       [showAlias]="false"
 *     >
 *  </bb-contacts-list-widget>
 * ```
 *
 * ### Additionally update the list
 *
 * ```html
 *  <bb-contacts-list-widget
 *       [items]="items.contacts"
 *       (selectedChange)="hostRef.select($event)"
 *       (formItemChange)="hostRef.edit($event)"
 *       [showAlias]="false"
 *     >
 *   </bb-contacts-list-widget>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export declare class ContactsListWidgetComponent implements AfterViewInit, OnDestroy {
    /**
     * Array of contacts
     */
    items: Array<ContactItem>;
    /**
     * Event that is emitted when selected item changes
     */
    selectedChange: EventEmitter<string>;
    /**
     * The id of current selected contact item
     */
    selectedItemId: string;
    contactItem: QueryList<ElementRef<HTMLLIElement>>;
    /**
     * to show Alias in the contact list. default is false
     */
    showAlias: boolean;
    private focused;
    contactItemArray: ElementRef[];
    accountTypeSelected: string;
    gc$: Subject<unknown>;
    latestSeparator: string;
    readonly createAccountTypeRef: typeof AccountCreateType;
    /**
     * AfterViewInit- lifecycle hook.
     */
    ngAfterViewInit(): void;
    /**
     * onDestroy - lifecycle hook.
     */
    ngOnDestroy(): void;
    /**
     * getTabIndex defines if item can be reached by Tab,
     * which only the focused item can
     *
     * @param {number} i index of an element
     * @returns {number} [tabindex] parameter value
     */
    getTabIndex(i: number): '0' | '-1';
    /**
     * Prevents focus from going beyond the limits of the list
     *
     * @param {number} desiredFocus index of an element
     * @returns {number} index of an element within bounds
     */
    private clampDesiredFocus;
    /**
     * Implements keyboard controls for the contact list.
     * Call on key down events to move the focus to the appropriate element.
     *
     * @param {Event} event HTMLEvent object
     * @param {number} desiredFocus index of an element
     */
    onChangeFocusItemTo(event: Event, desiredFocus: number): void;
    /**
     *
     * @param {string} id - Id of the selcted contact
     * @param {number} index - index of the selected contact
     */
    onContactSelect(id: string, index: number): void;
    /**
     * isListHeading defines if grouping heading
     * should be added before list item
     *
     * @param {ContactItem} item ContactItem object
     * @param {number} index index of an element
     * @returns {boolean} whether item a list heading
     */
    isListHeading(item: ContactItem, index: number): boolean;
    /**
     * hasNoSeparatorClass tells if the list item
     * should have bb-grouped-list__item--no-separator class.
     *
     * @param {number} index index of an element
     * @returns {boolean} whether element should have separator class
     */
    hasNoSeparatorClass(index: number): boolean;
    private getGroupHeadingChar;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactsListWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContactsListWidgetComponent, "bb-contacts-list-widget", never, { "items": "items"; "selectedItemId": "selectedItemId"; "showAlias": "showAlias"; }, { "selectedChange": "selectedChange"; }, never, never>;
}
