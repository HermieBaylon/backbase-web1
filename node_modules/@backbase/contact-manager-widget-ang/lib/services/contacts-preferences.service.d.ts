import { ItemModel } from '@backbase/foundation-ang/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 *
 * This service manages the widget properties.
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this service to the providers.
 *
 * ```ts
 * @Component({
 *   ...
 *  providers: [
 * {
 *   provide: ContactManagerPreferencesService,
 *   useClass: ContactManagerJourneyPreferencesService,
 * },
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
export declare class ContactManagerPreferencesService {
    private readonly itemModel;
    private readonly newContactSubject$;
    private readonly pageSizeSubject$;
    private readonly maxNavPagesSubject$;
    private readonly paginationTypeSubject$;
    private readonly createContactEmailSubject$;
    private readonly createContactIBANSubject$;
    private readonly createContactAccountSubject$;
    private readonly createContactPhoneSubject$;
    private readonly notificationDismissTimeSubject$;
    private readonly newContactItemModel;
    private readonly pageSizeItemModel;
    private readonly maxNavPagesItemModel;
    private readonly paginationTypeItemModel;
    private readonly createContactEmailItemModel;
    private readonly createContactIBANItemModel;
    private readonly createContactAccountItemModel;
    private readonly createContactPhoneItemModel;
    private readonly notificationDismissTimeItemModel;
    readonly newContact$: Observable<boolean>;
    readonly pageSize$: Observable<number>;
    readonly maxNavPages$: Observable<number>;
    readonly paginationType$: Observable<string>;
    readonly createContactEmail$: Observable<boolean>;
    readonly createContactIBAN$: Observable<boolean>;
    readonly createContactAccount$: Observable<boolean>;
    readonly createContactPhone$: Observable<boolean>;
    readonly notificationDismissTime$: Observable<number>;
    private getProperty;
    /**
     *  Update the new Contact value
     *
     * @param {boolean} value selected value
     */
    setNewContact(value: boolean): void;
    /**
     *  Update the pageSize value
     *
     * @param {number} value selected value
     */
    setPageSize(value: number): void;
    /**
     *  Update the maxNavPages value
     *
     * @param {number} value selected value
     */
    setMaxNavPages(value: number): void;
    /**
     *  Update the paginationType value
     *
     * @param {string} value selected value
     */
    setPaginationType(value: string): void;
    /**
     *  Update the notificationDissmissTime value
     *
     * @param {number} value selected value
     */
    setNotificationDismissTime(value: number): void;
    /**
     *  Update the createContactEmail value
     *
     * @param {boolean} value selected value
     */
    setCreateContactEmail(value: boolean): void;
    /**
     *  Update the createContactIBAN value
     *
     * @param {boolean} value selected value
     */
    setCreateContactIBAN(value: boolean): void;
    /**
     *  Update the createContactAccount value
     *
     * @param {boolean} value selected value
     */
    setCreateContactAccount(value: boolean): void;
    /**
     *  Update the createContactPhone value
     *
     * @param {boolean} value selected value
     */
    setCreateContactPhone(value: boolean): void;
    constructor(itemModel: ItemModel);
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactManagerPreferencesService, [{ optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ContactManagerPreferencesService>;
}
