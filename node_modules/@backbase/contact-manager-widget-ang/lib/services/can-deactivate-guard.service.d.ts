import { CanDeactivate } from '@angular/router';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export interface CanComponentDeactivate {
    canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;
}
/**
 *
 * This guard is called while deactivating the route to check if the form is dirty.
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this guard into your route
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [{
 *   path: 'edit/:id/:type',
 *   canDeactivate: [CanDeactivateGuard],
 *   component: ContactsFormContainerComponent,
 * },]
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
export declare class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {
    canDeactivate(component: CanComponentDeactivate): boolean | Promise<boolean> | Observable<boolean>;
    static ɵfac: i0.ɵɵFactoryDeclaration<CanDeactivateGuard, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CanDeactivateGuard>;
}
