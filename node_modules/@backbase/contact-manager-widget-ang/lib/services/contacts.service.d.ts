import { HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { ContactsHttpService } from '@backbase/data-ang/contact-manager';
import { Observable, ReplaySubject, Subject, Subscription } from 'rxjs';
import { ContactItem, Contacts, ContactUpdateDeleteResponse, Id } from '@backbase/contact-common-ang';
import * as i0 from "@angular/core";
export interface PageParams {
    from: number;
    size: number;
    query: string;
}
export interface ListParams {
    pagination: PageParams;
    paginationType?: string;
    method?: string;
}
export interface ContactList {
    count: number | null;
    contacts: Contacts;
}
export interface GetContactsParams {
    saId?: string;
    leId?: string;
    cursor?: string;
    from?: number;
    size?: number;
    query?: string;
}
export declare enum ModalOptions {
    Cancel = 0,
    Success = 1
}
export declare type ItemId = string;
/**
 *
 * This service calls the api calls from data-ang
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this service into your provider
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactsService]
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
export declare class ContactsService {
    dataService: ContactsHttpService;
    constructor(dataService: ContactsHttpService);
    private readonly saveComplete;
    private readonly listParams;
    readonly selectedItemId: ReplaySubject<string>;
    private lastSelectedItemId;
    private readonly actions$;
    readonly items: Observable<ContactList>;
    readonly currentlySelectedItemId: Observable<ItemId | null>;
    readonly item: Observable<ContactItem | undefined>;
    readonly deleteSuccess: Subject<unknown>;
    readonly deleteError: Subject<HttpErrorResponse>;
    /**
     * Updates the selected contact.
     *
     * @param {Observable<ItemId | null>} ids contact Id
     */
    getItemFrom(ids: Observable<ItemId | null>): void;
    private firstContact;
    /**
     * Gets the contact in the given list by id.
     *
     * @param {string | undefined} id contact ID
     * @param {ContactList} items all contacts in an array form.
     * @returns {ContactItem | undefined} contact item from list or undefined
     */
    getContactsItem(id: string | undefined, items: ContactList): ContactItem | undefined;
    private toHttpParams;
    /**
     * Update the list of Parameters when changed.
     *
     * @param {?string} query search query
     * @param {?number} page current Page of contact lists
     * @param {?number} size no of records to be shown on one page
     * @param {?string} paginationType type of pagination `load-more` or `pagination`
     * @param {?string} method enumerated value
     */
    updateItemList(query?: string, page?: number, size?: number, paginationType?: string, method?: string): void;
    /**
     * Gets the account Type for the contacts.
     *
     * @returns {Observable<string>} Observable of a string with accountType
     */
    getAccountType(): Observable<string>;
    /**
     * Calls the update API for contacts when updated.
     *
     * @param {ContactItem} item - Updated contact.
     * @returns {Observable<string | undefined>} the observable of updated ID of contact.
     */
    save(item: ContactItem): Observable<string | undefined>;
    /**
     * Returns the contact Id when updated.
     *
     * @param {HttpResponse<Id>} res save response
     * @returns {string | undefined} contact ID.
     */
    saveSuccess(res: HttpResponse<Id>): string | undefined;
    /**
     * Returns the ID of the contact when edit is successful
     *
     * @param {HttpResponse<ContactUpdateDeleteResponse>} res response of editing a contact.
     * @param {string} id Contact ID.
     * @returns {string | undefined} the ID of contact when edit is successful.
     */
    editSuccess(res: HttpResponse<ContactUpdateDeleteResponse>, id: string): string | undefined;
    /**
     * Calls the deletion API.
     *
     * @param {string} contactId - Contact ID for selected contact.
     * @returns {Subscription} Subscription of deletion api.
     */
    delete(contactId: string): Subscription;
    /**
     * Returns the account Type for the given contact
     *
     * @param {ContactItem} item contact object.
     * @returns {string} type of account for one contact.
     */
    checkaccountType(item: ContactItem): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ContactsService>;
}
