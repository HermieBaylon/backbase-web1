import { RouterService } from '@backbase/foundation-ang/core';
import { AccountCreateType } from '../models/types';
import * as i0 from "@angular/core";
export interface NavigationParams {
    /**
     * page number for fetching the contact
     */
    page?: number;
    /**
     * query text added while searching.
     */
    query?: string;
}
export declare enum View {
    List = "LIST",
    Detail = "DETAIL",
    Edit = "EDIT",
    Select = "SELECT"
}
/**
 *
 * This service manages the routes of the widget.
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this service into your provider
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactsNavigationService]
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
export declare class ContactsNavigationService {
    private readonly routerService;
    private _currentView;
    get currentView(): View;
    set currentView(view: View);
    /**
     * @param {RouterService} routerService router service
     */
    constructor(routerService: RouterService);
    /**
     * Routes to list view
     *
     * @param {?number} page current Page number.
     * @param {?string} query Searched query text
     * @param {'merge' | 'preserve' | ''} queryParamsHandling query hash handling. default value is merge
     * @returns {Promise<boolean>} returns a observable of boolean.
     */
    list(page?: number, query?: string, queryParamsHandling?: 'merge' | 'preserve' | ''): Promise<boolean>;
    /**
     * Routes to select view for contact types.
     *
     * @param {string} id - contact ID
     * @returns {Promise<boolean>} Boolean promise.
     */
    select(id: string): Promise<boolean>;
    /**
     * Routes to edit screen of selected contact.
     *
     * @param {string} id - Contact ID, for selected conatct for edit.
     * @param {string} type - selected type of the contact
     * @returns {Promise<boolean>} Boolean promise.
     */
    edit(id: string, type?: string): Promise<boolean>;
    /**
     * Routes to new contact view.
     *
     * @returns {Promise<boolean>} Boolean promise.
     */
    newContact(): Promise<boolean>;
    /**
     * Route to new contact edit form when new contact is selected.
     *
     * @param {AccountCreateType} type whether the new contact is of IBAN/Phone/Email/Account type
     * @returns {Promise<boolean>} resolves to true when form is ready
     */
    newContactForm(type: AccountCreateType): Promise<boolean>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactsNavigationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ContactsNavigationService>;
}
