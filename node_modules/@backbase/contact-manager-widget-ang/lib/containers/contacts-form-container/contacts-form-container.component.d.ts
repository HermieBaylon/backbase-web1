import { ChangeDetectorRef, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable, Subject } from 'rxjs';
import { ContactsService } from '../../services/contacts.service';
import { ContactItem } from '@backbase/contact-common-ang';
import { ContactsFormComponent } from '../../components/contacts-form/contacts-form.component';
import { ContactsNavigationService } from '../../services/contacts-navigation.service';
import { ContactsFormItem } from '../../models/types';
import { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
/**
 * Container component for showing contact details.
 *
 * @usageNotes
 *
 * ### Display create/ edit form for contacts
 *
 * ```html
 * <bb-contacts-form-container></bb-contacts-form-container>
 * ```
 *
 * ### Additionally use the container component in routing.
 *
 * ```typescript
 * const routes: [
 *   {
 *   path: 'edit/:id/:type',
 *   canDeactivate: [CanDeactivateGuard],
 *   component: ContactsFormContainerComponent,
 * }]
 *
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export declare class ContactsFormContainerComponent implements OnInit {
    private readonly service;
    private readonly route;
    private readonly navigation;
    private readonly notificationService;
    private readonly propertiesService;
    private readonly cdr;
    readonly hostRef: this;
    readonly itemId: Observable<string>;
    readonly itemType$: Observable<string>;
    readonly item: Observable<ContactsFormItem | undefined>;
    readonly notificationTimeout$: Observable<number>;
    formComponent: ContactsFormComponent;
    notificationCreateSuccessTemplate?: TemplateRef<any>;
    notificationCreateErrorTemplate?: TemplateRef<any>;
    notificationEditSuccessTemplate?: TemplateRef<any>;
    notificationEditErrorTemplate?: TemplateRef<any>;
    discardChangesModalContent: ViewContainerRef;
    isDiscardConfirmOpened: boolean;
    discard$: Subject<boolean>;
    isPendingRequest: boolean;
    constructor(service: ContactsService, route: ActivatedRoute, navigation: ContactsNavigationService, notificationService: NotificationService, propertiesService: ContactManagerPreferencesService, cdr: ChangeDetectorRef);
    /**
     * onInit - lifecycle hook for setting current view.
     */
    ngOnInit(): void;
    /**
     * Calling the save api and showing the notification.
     *
     * @param {ContactsFormItem} item - Contact Object while save
     */
    save(item: ContactsFormItem): void;
    /**
     * showing the confirmation modal, when moving away from route.
     *
     * @returns {Promise<boolean> | boolean} whether route can be deactivated
     */
    canDeactivate(): Observable<boolean> | boolean;
    /**
     *  When the Edit is cancelled. It determines if it should show the selected contact or list
     *
     * @param {string} id - Contact Id.
     */
    cancelEdit(id: string): void;
    /**
     * Method to go to previous screen based on id
     *
     * @param {string | undefined} id - Contact Id
     */
    back(id: string | undefined): void;
    /**
     *
     * @param {ContactItem | undefined} item Contact object.
     * @returns {ContactsFormItem} The transformed contact Object when returned from API.
     */
    fromService(item: ContactItem | undefined): ContactsFormItem;
    /**
     *
     * @param {ContactsFormItem} item Contact Object
     * @returns {ContactItem} The trandformed contact object when submitting to API.
     */
    toService(item: ContactsFormItem): ContactItem;
    /**
     * Method that calls the delete api and returns to the list.
     *
     * @param {string} id Contact Id to be deleted
     */
    deleteContactsItem(id: string): void;
    /**
     * event handler for confirming discard
     */
    onConfirmDiscard(): void;
    /**
     * event handler for canceling discard
     */
    onCancelDiscard(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactsFormContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContactsFormContainerComponent, "bb-contacts-form-container", never, {}, {}, never, never>;
}
