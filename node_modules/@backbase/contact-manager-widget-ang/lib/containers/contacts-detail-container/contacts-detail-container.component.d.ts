import { OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { ContactsService } from '../../services/contacts.service';
import { ContactItem } from '@backbase/contact-common-ang';
import { ContactsNavigationService } from '../../services/contacts-navigation.service';
import { SelectContactEvent } from '../../models/types';
import { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
/**
 * Container component for showing contact details.
 *
 * @usageNotes
 *
 * ### Display details of the contact.
 *
 * ```html
 * <bb-contacts-detail-container></bb-contacts-detail-container>
 * ```
 *
 * ### Additionally use the container component in routing.
 *
 * ```typescript
 * const routes: [
 * {
 *  path: '',
 *  component: ContactsDetailContainerComponent
 * }]
 *
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export declare class ContactsDetailContainerComponent implements OnInit, OnDestroy {
    private readonly service;
    private readonly route;
    private readonly navigation;
    private readonly notificationService;
    private readonly propertiesService;
    readonly hostRef: this;
    readonly itemId: Observable<string | null>;
    readonly item: Observable<ContactItem | undefined>;
    readonly notificationTimeout$: Observable<number>;
    readonly contactTypeId$: Observable<string>;
    deleteSuccessNotificationTemplate: TemplateRef<any> | undefined;
    deleteErrorNotificationTemplate: TemplateRef<any> | undefined;
    constructor(service: ContactsService, route: ActivatedRoute, navigation: ContactsNavigationService, notificationService: NotificationService, propertiesService: ContactManagerPreferencesService);
    private readonly subscriptions;
    /**
     * onInit - lifecycle hook
     */
    ngOnInit(): void;
    /**
     * OnDestroy- lifecycle hook Unsubscribing the subscription.
     */
    ngOnDestroy(): void;
    /**
     *  Emits the output when edit is clicked.
     *
     * @param {SelectContactEvent} accountData - An object which contains id and type of contact to be edited.
     */
    edit(accountData: SelectContactEvent): void;
    /**
     * Method that calls the delete service and returns to list view.
     *
     * @param {string} id - contact ID which has to be deleted.
     */
    deleteContactsItem(id: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactsDetailContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContactsDetailContainerComponent, "bb-contacts-detail-container", never, {}, {}, never, never>;
}
