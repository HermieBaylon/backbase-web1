import * as i1$2 from '@angular/forms';
import { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i2$1 from '@angular/common';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Optional, Directive, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, InjectionToken, PLATFORM_ID, Inject, ViewChildren, NgModule } from '@angular/core';
import { __rest, __decorate, __metadata } from 'tslib';
import * as i1 from '@backbase/foundation-ang/core';
import { BbTemplate, RouterService, RoutableWidget, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i2$2 from '@angular/router';
import { NavigationEnd, RouterModule } from '@angular/router';
import { Subject, BehaviorSubject, ReplaySubject, merge, combineLatest, of, Subscription } from 'rxjs';
import { map, mapTo, scan, switchMap, shareReplay, distinctUntilChanged, catchError, withLatestFrom, mergeMap, take, tap, startWith, takeUntil, filter, debounceTime } from 'rxjs/operators';
import * as i1$1 from '@backbase/data-ang/contact-manager';
import * as i8 from '@backbase/contact-common-ang';
import { LoadMoreMethod, ContactActions, toBoolean, toInteger, BB_CONTACT_IBAN_COUNTRIES_LIST, IbanMask, IbanValidatorModule, NoWhiteSpaceModule, ConfirmActionDialogModule, EmailDomainModule } from '@backbase/contact-common-ang';
import * as i4 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i2 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i6 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i8$1 from '@backbase/ui-ang/iban-pipe';
import { BbIbanPipeModule } from '@backbase/ui-ang/iban-pipe';
import * as i7 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i4$1 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i5 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i6$1 from '@backbase/ui-ang/input-email';
import { InputEmailModule } from '@backbase/ui-ang/input-email';
import * as i6$2 from '@backbase/ui-ang/pagination';
import { PaginatorModule } from '@backbase/ui-ang/pagination';
import * as i7$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i9 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i10 from '@ng-bootstrap/ng-bootstrap';
import { NgbDropdownModule, NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';
import * as i12 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i13 from '@backbase/ui-ang/common-error-state';
import { ErrorCommonStateModule } from '@backbase/ui-ang/common-error-state';
import { AvatarModule } from '@backbase/ui-ang/avatar';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';

var AccountCreateType;
(function (AccountCreateType) {
    AccountCreateType["IBAN"] = "IBAN";
    AccountCreateType["EMAIL"] = "email";
    AccountCreateType["PHONE"] = "phoneNumber";
    AccountCreateType["ACCOUNT"] = "accountNumber";
})(AccountCreateType || (AccountCreateType = {}));
var AccountTypeModelKey;
(function (AccountTypeModelKey) {
    AccountTypeModelKey["IBAN"] = "IBAN";
    AccountTypeModelKey["BBAN"] = "accountNumber";
})(AccountTypeModelKey || (AccountTypeModelKey = {}));

var View;
(function (View) {
    View["List"] = "LIST";
    View["Detail"] = "DETAIL";
    View["Edit"] = "EDIT";
    View["Select"] = "SELECT";
})(View || (View = {}));
/**
 *
 * This service manages the routes of the widget.
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this service into your provider
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactsNavigationService]
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
class ContactsNavigationService {
    /**
     * @param {RouterService} routerService router service
     */
    constructor(routerService) {
        this.routerService = routerService;
        this._currentView = View.List;
    }
    get currentView() {
        return this._currentView;
    }
    set currentView(view) {
        this._currentView = view;
    }
    /**
     * Routes to list view
     *
     * @param {?number} page current Page number.
     * @param {?string} query Searched query text
     * @param {'merge' | 'preserve' | ''} queryParamsHandling query hash handling. default value is merge
     * @returns {Promise<boolean>} returns a observable of boolean.
     */
    list(page, query, queryParamsHandling = 'merge') {
        const queryParam = {
            page: page !== undefined && page > -1 ? page : undefined,
        };
        if (query || query === '')
            queryParam.query = query;
        return this.routerService.navigate(['./'], {
            queryParams: Object.assign({}, queryParam),
            queryParamsHandling: queryParamsHandling,
        });
    }
    /**
     * Routes to select view for contact types.
     *
     * @param {string} id - contact ID
     * @returns {Promise<boolean>} Boolean promise.
     */
    select(id) {
        this.currentView = View.Detail;
        return this.routerService.navigate([id], { queryParamsHandling: 'merge' });
    }
    /**
     * Routes to edit screen of selected contact.
     *
     * @param {string} id - Contact ID, for selected conatct for edit.
     * @param {string} type - selected type of the contact
     * @returns {Promise<boolean>} Boolean promise.
     */
    edit(id, type = AccountCreateType.IBAN) {
        this.currentView = View.Edit;
        return this.routerService.navigate(['edit', id, type], { queryParamsHandling: 'merge' });
    }
    /**
     * Routes to new contact view.
     *
     * @returns {Promise<boolean>} Boolean promise.
     */
    newContact() {
        this.currentView = View.Select;
        return this.routerService.navigate(['select'], { queryParamsHandling: 'merge' });
    }
    /**
     * Route to new contact edit form when new contact is selected.
     *
     * @param {AccountCreateType} type whether the new contact is of IBAN/Phone/Email/Account type
     * @returns {Promise<boolean>} resolves to true when form is ready
     */
    newContactForm(type) {
        this.currentView = View.Edit;
        return this.routerService.navigate(['edit', 0, type], { queryParamsHandling: 'merge' });
    }
}
/** @nocollapse */ ContactsNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsNavigationService, deps: [{ token: i1.RouterService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactsNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.RouterService }]; } });

var ModalOptions;
(function (ModalOptions) {
    ModalOptions[ModalOptions["Cancel"] = 0] = "Cancel";
    ModalOptions[ModalOptions["Success"] = 1] = "Success";
})(ModalOptions || (ModalOptions = {}));
const defaultListParams = {
    pagination: {
        from: 0,
        size: 4,
        query: '',
    },
    paginationType: LoadMoreMethod.PAGINATION,
};
/**
 *
 * This service calls the api calls from data-ang
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this service into your provider
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactsService]
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
class ContactsService {
    constructor(dataService) {
        this.dataService = dataService;
        // "Events" - Subjects that are used to trigger actions
        this.saveComplete = new Subject();
        this.listParams = new BehaviorSubject(defaultListParams);
        this.selectedItemId = new ReplaySubject(1);
        this.lastSelectedItemId = new BehaviorSubject(undefined);
        this.actions$ = merge(this.listParams.pipe(map(({ pagination, paginationType, method }) => ({
            action: ContactActions.Load,
            params: pagination,
            paginationType,
            method: method,
        }))), this.saveComplete.pipe(mapTo({ action: ContactActions.Refresh })));
        // The params to use for a list request
        this.items = this.actions$.pipe(scan((state, action) => (Object.assign(Object.assign({}, state), action))), map(({ action, params, paginationType, method }) => {
            const isLoadMoreRefresh = action === ContactActions.Refresh && paginationType === LoadMoreMethod.LOAD_MORE;
            return {
                action,
                paginationType,
                params: Object.assign(Object.assign({}, params), (isLoadMoreRefresh ? { from: 0, size: (params.from + 1) * params.size } : {})),
                method,
            };
        }), switchMap((_a) => {
            var { params, method } = _a, state = __rest(_a, ["params", "method"]);
            return this.dataService.getContacts(this.toHttpParams(params), 'response').pipe(map(listFromData), map((response) => (Object.assign(Object.assign(Object.assign(Object.assign({}, response), { params }), state), { method }))));
        }), scan((acc, curr) => {
            const { count, action, paginationType, method } = curr;
            let contacts;
            if (curr.params.from > 0 &&
                acc.params.query === curr.params.query &&
                action !== ContactActions.Refresh &&
                paginationType === LoadMoreMethod.LOAD_MORE &&
                method !== 'search') {
                contacts = [...acc.contacts, ...curr.contacts];
            }
            else {
                contacts = [...curr.contacts];
            }
            return {
                count,
                contacts,
                params: curr.params,
            };
        }), shareReplay());
        this.currentlySelectedItemId = combineLatest([
            this.selectedItemId,
            this.lastSelectedItemId,
            this.items,
        ]).pipe(map(([id, lastItemId, items]) => {
            var _a, _b, _c;
            return (_c = (_a = id !== null && id !== void 0 ? id : lastItemId) !== null && _a !== void 0 ? _a : (_b = items.contacts[0]) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : null;
        }));
        this.item = combineLatest([
            this.currentlySelectedItemId.pipe(distinctUntilChanged()),
            this.items,
        ]).pipe(switchMap(([id, items]) => {
            var _a;
            if (id === '0') {
                return of(undefined);
            }
            let contact = this.getContactsItem((_a = id !== null && id !== void 0 ? id : this.lastSelectedItemId.value) !== null && _a !== void 0 ? _a : undefined, items);
            const firstContact = this.getContactsItem(this.firstContact(items.contacts), items);
            if (!contact && this.lastSelectedItemId.value) {
                const contactId = this.lastSelectedItemId.value;
                return this.dataService.getContact({ contactId }).pipe(catchError(() => of(firstContact)));
            }
            if (contact) {
                this.lastSelectedItemId.next(contact.id);
            }
            return of(contact || firstContact);
        }), shareReplay());
        this.deleteSuccess = new Subject();
        this.deleteError = new Subject();
    }
    /**
     * Updates the selected contact.
     *
     * @param {Observable<ItemId | null>} ids contact Id
     */
    getItemFrom(ids) {
        ids.subscribe((id) => this.selectedItemId.next(id));
    }
    firstContact(contacts) {
        return contacts && contacts.length > 0 ? contacts[0].id : undefined;
    }
    /**
     * Gets the contact in the given list by id.
     *
     * @param {string | undefined} id contact ID
     * @param {ContactList} items all contacts in an array form.
     * @returns {ContactItem | undefined} contact item from list or undefined
     */
    getContactsItem(id, items) {
        if (!(items && items.contacts && items.contacts.length))
            return;
        let item;
        if (id === '0') {
            return undefined;
        }
        else {
            item = items.contacts.find((v) => v.id === id);
        }
        return item;
    }
    toHttpParams(params) {
        return {
            from: Math.floor(params.from),
            size: Math.floor(params.size),
            query: params.query || undefined,
        };
    }
    /**
     * Update the list of Parameters when changed.
     *
     * @param {?string} query search query
     * @param {?number} page current Page of contact lists
     * @param {?number} size no of records to be shown on one page
     * @param {?string} paginationType type of pagination `load-more` or `pagination`
     * @param {?string} method enumerated value
     */
    updateItemList(query, page, size, paginationType, method) {
        this.listParams.next({
            pagination: {
                query: query || '',
                from: page || 0,
                size: size || 5,
            },
            paginationType: paginationType || LoadMoreMethod.PAGINATION,
            method,
        });
    }
    /**
     * Gets the account Type for the contacts.
     *
     * @returns {Observable<string>} Observable of a string with accountType
     */
    getAccountType() {
        return this.item.pipe(map((contactItem) => (contactItem ? this.checkaccountType(contactItem) : AccountCreateType.IBAN)));
    }
    /**
     * Calls the update API for contacts when updated.
     *
     * @param {ContactItem} item - Updated contact.
     * @returns {Observable<string | undefined>} the observable of updated ID of contact.
     */
    save(item) {
        if (isNew(item)) {
            const postItem = item;
            return this.dataService
                .postContacts({ contactsPostRequestBody: postItem }, 'response')
                .pipe(map((res) => this.saveSuccess(res)));
        }
        else {
            return this.dataService
                .putContact({ contactId: item.id, contactPutRequestBody: item }, 'response')
                .pipe(map((res) => this.editSuccess(res, item.id)));
        }
    }
    /**
     * Returns the contact Id when updated.
     *
     * @param {HttpResponse<Id>} res save response
     * @returns {string | undefined} contact ID.
     */
    saveSuccess(res) {
        if (res.body && res.body.id) {
            this.saveComplete.next();
            return res.body.id;
        }
        else {
            // error state
            return undefined;
        }
    }
    /**
     * Returns the ID of the contact when edit is successful
     *
     * @param {HttpResponse<ContactUpdateDeleteResponse>} res response of editing a contact.
     * @param {string} id Contact ID.
     * @returns {string | undefined} the ID of contact when edit is successful.
     */
    editSuccess(res, id) {
        if (res.body) {
            this.saveComplete.next();
            return id;
        }
        else {
            // error state
            return undefined;
        }
    }
    /**
     * Calls the deletion API.
     *
     * @param {string} contactId - Contact ID for selected contact.
     * @returns {Subscription} Subscription of deletion api.
     */
    delete(contactId) {
        return this.dataService.deleteContact({ contactId }).subscribe(() => {
            this.deleteSuccess.next();
            this.saveComplete.next();
        }, (error) => this.deleteError.next(error));
    }
    /**
     * Returns the account Type for the given contact
     *
     * @param {ContactItem} item contact object.
     * @returns {string} type of account for one contact.
     */
    checkaccountType(item) {
        if (item) {
            return ((Object.entries(item === null || item === void 0 ? void 0 : item.accounts[0]).find(([key, value]) => Object.values(AccountCreateType).includes(key) && value) || [])[0] || AccountCreateType.IBAN);
        }
        return AccountCreateType.IBAN;
    }
}
/** @nocollapse */ ContactsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsService, deps: [{ token: i1$1.ContactsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.ContactsHttpService }]; } });
/**
 * Returns if the contact is new or is being edited.
 *
 * @param {ContactItem} item contact object
 * @returns {boolean} whether the item is new or existing
 */
function isNew(item) {
    return item.id === undefined || item.id === '';
}
/**
 * Returns the contact list in a format.
 *
 * @param {HttpResponse<Contacts>} response http response with data
 * @returns {ContactList} contacts list with total count.
 */
function listFromData(response) {
    if (response.body === null) {
        throw new Error('Response body not set');
    }
    const headers = response.headers;
    const totalCount = headers.get('X-Total-Count');
    return {
        count: totalCount ? +totalCount : null,
        contacts: response.body,
    };
}

/**
 *
 * This service manages the widget properties.
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this service to the providers.
 *
 * ```ts
 * @Component({
 *   ...
 *  providers: [
 * {
 *   provide: ContactManagerPreferencesService,
 *   useClass: ContactManagerJourneyPreferencesService,
 * },
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
class ContactManagerPreferencesService {
    constructor(itemModel) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        this.itemModel = itemModel;
        this.newContactSubject$ = new BehaviorSubject(undefined);
        this.pageSizeSubject$ = new BehaviorSubject(undefined);
        this.maxNavPagesSubject$ = new BehaviorSubject(undefined);
        this.paginationTypeSubject$ = new BehaviorSubject(undefined);
        this.createContactEmailSubject$ = new BehaviorSubject(undefined);
        this.createContactIBANSubject$ = new BehaviorSubject(undefined);
        this.createContactAccountSubject$ = new BehaviorSubject(undefined);
        this.createContactPhoneSubject$ = new BehaviorSubject(undefined);
        this.notificationDismissTimeSubject$ = new BehaviorSubject(undefined);
        this.newContactItemModel = (_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('newContact').pipe(map(toBoolean));
        this.pageSizeItemModel = (_b = this.itemModel) === null || _b === void 0 ? void 0 : _b.property('pageSize').pipe(map(toInteger));
        this.maxNavPagesItemModel = (_c = this.itemModel) === null || _c === void 0 ? void 0 : _c.property('maxNavPages').pipe(map(toInteger));
        this.paginationTypeItemModel = (_d = this.itemModel) === null || _d === void 0 ? void 0 : _d.property('paginationType');
        this.createContactEmailItemModel = (_e = this.itemModel) === null || _e === void 0 ? void 0 : _e.property('createContactEmail').pipe(map(toBoolean));
        this.createContactIBANItemModel = (_f = this.itemModel) === null || _f === void 0 ? void 0 : _f.property('createContactIBAN').pipe(map(toBoolean));
        this.createContactAccountItemModel = (_g = this.itemModel) === null || _g === void 0 ? void 0 : _g.property('createContactAccount').pipe(map(toBoolean));
        this.createContactPhoneItemModel = (_h = this.itemModel) === null || _h === void 0 ? void 0 : _h.property('createContactPhone').pipe(map(toBoolean));
        this.notificationDismissTimeItemModel = (_j = this.itemModel) === null || _j === void 0 ? void 0 : _j.property('notificationDismissTime').pipe(map(toInteger));
        this.newContact$ = this.getProperty(this.newContactSubject$, this.newContactItemModel);
        this.pageSize$ = this.getProperty(this.pageSizeSubject$, this.pageSizeItemModel);
        this.maxNavPages$ = this.getProperty(this.maxNavPagesSubject$, this.maxNavPagesItemModel);
        this.paginationType$ = this.getProperty(this.paginationTypeSubject$, this.paginationTypeItemModel);
        this.createContactEmail$ = this.getProperty(this.createContactEmailSubject$, this.createContactEmailItemModel);
        this.createContactIBAN$ = this.getProperty(this.createContactIBANSubject$, this.createContactIBANItemModel);
        this.createContactAccount$ = this.getProperty(this.createContactAccountSubject$, this.createContactAccountItemModel);
        this.createContactPhone$ = this.getProperty(this.createContactPhoneSubject$, this.createContactPhoneItemModel);
        this.notificationDismissTime$ = this.getProperty(this.notificationDismissTimeSubject$, this.notificationDismissTimeItemModel);
    }
    getProperty(input$, itemModel) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    /**
     *  Update the new Contact value
     *
     * @param {boolean} value selected value
     */
    setNewContact(value) {
        this.newContactSubject$.next(value);
    }
    /**
     *  Update the pageSize value
     *
     * @param {number} value selected value
     */
    setPageSize(value) {
        this.pageSizeSubject$.next(value);
    }
    /**
     *  Update the maxNavPages value
     *
     * @param {number} value selected value
     */
    setMaxNavPages(value) {
        this.maxNavPagesSubject$.next(value);
    }
    /**
     *  Update the paginationType value
     *
     * @param {string} value selected value
     */
    setPaginationType(value) {
        this.paginationTypeSubject$.next(value);
    }
    /**
     *  Update the notificationDissmissTime value
     *
     * @param {number} value selected value
     */
    setNotificationDismissTime(value) {
        this.notificationDismissTimeSubject$.next(value);
    }
    /**
     *  Update the createContactEmail value
     *
     * @param {boolean} value selected value
     */
    setCreateContactEmail(value) {
        this.createContactEmailSubject$.next(value);
    }
    /**
     *  Update the createContactIBAN value
     *
     * @param {boolean} value selected value
     */
    setCreateContactIBAN(value) {
        this.createContactIBANSubject$.next(value);
    }
    /**
     *  Update the createContactAccount value
     *
     * @param {boolean} value selected value
     */
    setCreateContactAccount(value) {
        this.createContactAccountSubject$.next(value);
    }
    /**
     *  Update the createContactPhone value
     *
     * @param {boolean} value selected value
     */
    setCreateContactPhone(value) {
        this.createContactPhoneSubject$.next(value);
    }
}
/** @nocollapse */ ContactManagerPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerPreferencesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactManagerPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerPreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerPreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

/**
 * This is an extension slot to be used for customizing delete confirmation dialog
 *
 * @example
 *
 * ```html
 * <ng-template bbContactsDeleteConfirmationCustomizable let-hostRef let-context="context">
 *   <div class="modal-header">
 *     <h4 i18n="@@contact-manager-detail.header.delete.contact" class="modal-title" data-role="delete-contact-label">
 *       Delete Contact
 *     </h4>
 *   </div>
 *   <div i18n="@@contact-manager-detail.delete.confirmation" class="modal-body" role="alert">
 *     <p class="break-word">
 *       Are you sure you want to delete {{ hostRef.item.name }} from your contacts? This action cannot be undone.
 *     </p>
 *   </div>
 *   <div class="bb-button-bar bb-button-bar--reverse modal-footer">
 *     <button
 *       i18n="@@contact-manager-detail.button.cancel"
 *       type="button"
 *       class="bb-button-bar__button"
 *       bbButton
 *       color="secondary"
 *       (click)="context.dismiss()"
 *     >
 *       Not now
 *     </button>
 *     <button
 *       i18n="@@contact-manager-detail.button.delete"
 *       type="button"
 *       class="bb-button-bar__button"
 *       bbButton
 *       color="danger"
 *       data-role="confirm-delete-button"
 *       (click)="hostRef.deleteContact()"
 *     >
 *       Delete
 *     </button>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsDeleteConfirmationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsDeleteConfirmationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDeleteConfirmationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsDeleteConfirmationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDeleteConfirmationCustomizableDirective, selector: "[bbContactsDeleteConfirmationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDeleteConfirmationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsDeleteConfirmationCustomizable]',
                }]
        }] });

/**
 * Displays a detail of contact selected.
 *
 * The following extension slots are available in this component:
 *  - `ContactsDetailCustomizableDirective`
 *
 * @see ContactsDetailCustomizableDirective
 * @usageNotes
 *
 * ### Display a details of contacts
 *
 * ```html
 * <bb-contacts-detail
 *    [showDetail]="false"
 *    [item]="hostRef.item"
 *    [type]="hostRef.type"
 *    (deleteContactsItem)="hostRef.deleteItemEmit()"
 *    (editContactsItem)="hostRef.editContactsItem()"
 * ></bb-contacts-detail>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsDetailComponent {
    constructor(service) {
        this.service = service;
        this.hostRef = this;
        /**
         * Wether to show user details or not
         */
        this.showDetail = true;
        /**
         * Event emitted when contact is edited
         */
        this.editContactsItem = new EventEmitter();
        /**
         * Event emitted when contact is deleted
         */
        this.deleteContactsItem = new EventEmitter();
        this.isDeleteConfirmOpened = false;
    }
    /**
     * OnInit - lifecycle hook.
     */
    ngOnInit() {
        if (this.item === undefined) {
            throw new Error('`item` input is required in `bb-contacts-detail` component');
        }
    }
    /**
     *  Will emit the event when contact is edited.
     *
     * @param {string} id the contact id that has to be edited.
     */
    edit(id) {
        this.editContactsItem.emit({ id: id, type: this.type });
    }
    /**
     * opens modal for delete confirmation
     */
    openDeleteModal() {
        this.isDeleteConfirmOpened = true;
    }
    /**
     * event handler for confirming delete
     */
    onConfirmDelete() {
        this.deleteContactsItem.emit(this.item.id);
        this.isDeleteConfirmOpened = false;
    }
    /**
     * event handler for rejecting delete
     */
    onCancelDelete() {
        this.isDeleteConfirmOpened = false;
    }
}
/** @nocollapse */ ContactsDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDetailComponent, deps: [{ token: ContactsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDetailComponent, selector: "bb-contacts-detail", inputs: { type: "type", showDetail: "showDetail", item: "item" }, outputs: { editContactsItem: "editContactsItem", deleteContactsItem: "deleteContactsItem" }, ngImport: i0, template: "<ng-container bbContactsDetailCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"item\"></ng-container>\n<ng-template bbContactsDetailCustomizable let-hostRef let-item=\"item\">\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-stack bb-stack--align-bottom\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div class=\"bb-block\" data-role=\"contact-details-info-name\">\n          <span\n            class=\"d-none\"\n            data-role=\"create-contact-label\"\n            aria-hidden=\"true\"\n            i18n=\"Create contact heading | Title shown when user is in create contact@@contact-manager-detail.create.heading\"\n            #heading\n          >\n            Create contact\n          </span>\n          <bb-header-ui\n            data-role=\"create-new-contact-label\"\n            headingType=\"h3\"\n            headingClasses=\"break-word\"\n            [heading]=\"hostRef.item.name || heading.textContent\"\n          >\n          </bb-header-ui>\n        </div>\n      </div>\n      <div *ngIf=\"hostRef.item.name\" class=\"bb-stack__item bb-stack__item--push-right\">\n        <span bbTooltip=\"Edit\" triggers=\"hover focus\" i18n-bbTooltip=\"@@contact-manager-detail.button.edit.tooltip\">\n          <button\n            data-role=\"contact-edit-button\"\n            bbButton\n            circle=\"true\"\n            color=\"link\"\n            (click)=\"hostRef.edit(hostRef.item.id)\"\n            i18n=\"Edit Contact Button | Button for editing an existing contact@@contact-manager-detail.button.edit\"\n            aria-label=\"Edit Contact\"\n            i18n-aria-label=\"Edit Contact | Aria label edit contact menu@@contact-manager-detail.label.actions.edit\"\n          >\n            <bb-icon-ui name=\"edit\" color=\"dark\"></bb-icon-ui>\n          </button>\n        </span>\n        <span bbTooltip=\"Delete\" triggers=\"hover focus\" i18n-bbTooltip=\"@@contact-manager-detail.button.delete.tooltip\">\n          <button\n            bbButton\n            circle=\"true\"\n            color=\"link\"\n            (click)=\"hostRef.openDeleteModal()\"\n            i18n=\"Delete Contact Button | Button for deleting an existing contact@@contact-manager-detail.detail.button.delete\"\n            data-role=\"delete-button\"\n            aria-label=\"Delete Contact\"\n            i18n-aria-label=\"Delete Contact | Aria label delete contact menu@@contact-manager-detail.label.actions.delete\"\n          >\n            <bb-icon-ui name=\"delete\" color=\"dark\"></bb-icon-ui>\n          </button>\n        </span>\n      </div>\n    </div>\n    <hr />\n  </div>\n  <div class=\"bb-lock bb-lock bb-block--lg\" *ngIf=\"hostRef.showDetail\">\n    <span\n      class=\"d-none\"\n      aria-hidden=\"true\"\n      i18n=\"Account number | Heading for account number or IBAN or Email or Phone@@contact-manager-detail.label.account.type.heading\"\n      #heading\n    >\n      {hostRef.type, select, IBAN {IBAN} accountNumber {Account number} email { Email} phoneNumber { Phone number} other\n      {IBAN} }\n    </span>\n    <bb-header-ui headingType=\"h5\" [heading]=\"heading.textContent\" class=\"bb-block bb-block-md\"></bb-header-ui>\n    <div class=\"bb-bock bb-block-md\" data-role=\"contact-details-info\">\n      <ng-container *ngIf=\"hostRef.item?.accounts[0] as account\">\n        <ng-container *ngIf=\"hostRef.type === 'IBAN'; else notIban\">\n          {{ account[hostRef.type] | bbIban }}\n        </ng-container>\n        <ng-template #notIban>{{ account[hostRef.type] }} </ng-template>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container bbContactsDeleteConfirmationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbContactsDeleteConfirmationCustomizable let-hostRef>\n  <bb-confirm-action-dialog\n    [isOpen]=\"hostRef.isDeleteConfirmOpened\"\n    [confirmButtonColor]=\"'danger'\"\n    (confirm)=\"hostRef.onConfirmDelete()\"\n    (cancel)=\"hostRef.onCancelDelete()\"\n  >\n    <span title i18n=\"@@contact-manager-detail.header.delete.contact\" data-role=\"delete-contact-label\"\n      >Delete Contact</span\n    >\n    <span body i18n=\"@@contact-manager-detail.delete.confirmation\">\n      Are you sure you want to delete {{ hostRef.item.name }} from your contacts? This action cannot be undone.\n    </span>\n    <span cancelButtonLabel i18n=\"@@contact-manager-detail.button.cancel\">Not now</span>\n    <span confirmButtonLabel i18n=\"@@contact-manager-detail.button.delete\" data-role=\"confirm-delete-button\"\n      >Delete</span\n    >\n  </bb-confirm-action-dialog>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i3.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i8.ConfirmActionDialogComponent; }), selector: "bb-confirm-action-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return ContactsDetailCustomizableDirective; }), selector: "[bbContactsDetailCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return ContactsDeleteConfirmationCustomizableDirective; }), selector: "[bbContactsDeleteConfirmationCustomizable]" }], pipes: { "bbIban": i0.forwardRef(function () { return i8$1.BbIbanPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDetailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-detail',
                    templateUrl: './contacts-detail.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: ContactsService }]; }, propDecorators: { type: [{
                type: Input
            }], showDetail: [{
                type: Input
            }], item: [{
                type: Input
            }], editContactsItem: [{
                type: Output
            }], deleteContactsItem: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing an item of the contact details.
 *
 * @usageNotes
 *
 * ### Display a contact details
 *
 * ```html
 * <ng-template bbContactsDetailCustomizable let-hostRef let-item="item">
 * <div class="bb-block bb-block--xl">
 *   <div class="bb-stack bb-stack--align-bottom">
 *     <div class="bb-stack__item bb-stack__item--fill">
 *       <div
 *         class="bb-block"
 *         data-role="contact-details-info-name"
 *       >
 *         <span
 *           class="d-none"
 *           data-role="create-contact-label"
 *           aria-hidden="true"
 *           i18n-heading="Create contact heading | Title shown when user is in
 *                        create contact@@contact-manager-detail.create.heading"
 *          #heading
 *         >
 *           Create contact
 *         </span>
 *         <bb-header-ui
 *           data-role="create-new-contact-label"
 *           headingType="h3"
 *           [heading]="hostRef.item.name || heading.textContent"
 *         >
 *         </bb-header-ui>
 *       </div>
 *     </div>
 *     <div
 *      *ngIf="hostRef.item.name"
 *       class="bb-stack__item bb-stack__item--push-right"
 *     >
 *       <span
 *         bbTooltip="Edit"
 *         triggers="hover focus"
 *       >
 *         <button
 *           data-role="contact-edit-button"
 *           bbButton
 *           circle="true"
 *           color="link"
 *           (click)="hostRef.edit(hostRef.item.id)"
 *           i18n="Edit Contact Button | Button for editing an existing contact@@contact-manager-detail.button.edit"
 *           aria-label="Edit Contact"
 *           i18n-aria-label="Edit Contact | Aria label edit contact menu@@contact-manager-detail.label.actions.edit"
 *         >
 *           <bb-icon-ui
 *             name="edit"
 *             color="dark"
 *           ></bb-icon-ui>
 *         </button>
 *       </span>
 *       <span
 *         bbTooltip="Delete"
 *         triggers="hover focus"
 *       >
 *         <button data-role="contact-delete-button"
 *           bbButton
 *           circle="true"
 *           color="link"
 *           (click)="hostRef.openDeleteModal(hostRef.modalContent)"
 *           i18n="Delete Contact Button | Button for deleting an existing contact@@contact-manager-detail.detail.button.delete"
 *           data-role="delete-button"
 *           aria-label="Delete Contact"
 *           i18n-aria-label="Delete Contact | Aria label delete contact menu@@contact-manager-detail.label.actions.delete"
 *         >
 *           <bb-icon-ui name="delete" color="dark"></bb-icon-ui>
 *         </button>
 *       </span>
 *     </div>
 *   </div>
 *   <hr/>
 * </div>
 * <div
 *   class="bb-lock bb-lock bb-block--lg"
 *  *ngIf="hostRef.showDetail"
 * >
 *   <span
 *     class="d-none"
 *     aria-hidden="true"
 *     i18n="Account number | Heading for account number or
 *      IBAN or Email or Phone@@contact-manager-detail.label.account.type.heading"
 *     #heading
 *   >
 *    {hostRef.type, select, IBAN {IBAN}  accountNumber {Account number} email { Email} phoneNumber { Phone number} other {IBAN} }
 *   </span>
 *   <bb-header-ui
 *     headingType="h5"
 *     [heading]="heading.textContent"
 *     class="bb-block bb-block-md"
 *   >
 *   </bb-header-ui>
 *   <div
 *     class="bb-bock bb-block-md"
 *     data-role="contact-details-info-alias"
 *   >
 *   <span *ngIf="hostRef.item?.accounts[0] as account">
 *     {{ account[hostRef.type] }}
 *   </span>
 *   </div>
 * </div>
 *</ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsDetailCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsDetailCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDetailCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsDetailCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDetailCustomizableDirective, selector: "[bbContactsDetailCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDetailCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsDetailCustomizable]',
                }]
        }] });

/**
 * This is an extension slot to be used for customizing success notification after deleting a contact
 *
 * @example
 *
 * ```html
 * <ng-template bbContactsDeleteSuccessNotificationCustomizable>
 *   <span
 *     i18n="Notification delete success message@@contact-manager-detail-container.notification.delete.success"
 *     role="alert"
 *     aria-atomic="true"
 *   >
 *     Contact was deleted succesfully
 *   </span>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsDeleteSuccessNotificationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsDeleteSuccessNotificationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDeleteSuccessNotificationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsDeleteSuccessNotificationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDeleteSuccessNotificationCustomizableDirective, selector: "[bbContactsDeleteSuccessNotificationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDeleteSuccessNotificationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsDeleteSuccessNotificationCustomizable]',
                }]
        }] });

/**
 * This is an extension slot to be used for customizing error notification after deleting a contact
 *
 * @example
 *
 * ```html
 * <ng-template bbContactsDeleteErrorNotificationCustomizable>
 *   <span
 *     i18n="Notification delete failed error message@@contact-manager-detail-container.notification.delete.error"
 *     role="alert"
 *     aria-atomic="true"
 *   >
 *     Error deleting contact
 *   </span>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsDeleteErrorNotificationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsDeleteErrorNotificationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDeleteErrorNotificationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsDeleteErrorNotificationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDeleteErrorNotificationCustomizableDirective, selector: "[bbContactsDeleteErrorNotificationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDeleteErrorNotificationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsDeleteErrorNotificationCustomizable]',
                }]
        }] });

/**
 * Container component for showing contact details.
 *
 * @usageNotes
 *
 * ### Display details of the contact.
 *
 * ```html
 * <bb-contacts-detail-container></bb-contacts-detail-container>
 * ```
 *
 * ### Additionally use the container component in routing.
 *
 * ```typescript
 * const routes: [
 * {
 *  path: '',
 *  component: ContactsDetailContainerComponent
 * }]
 *
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsDetailContainerComponent {
    constructor(service, route, navigation, notificationService, propertiesService) {
        this.service = service;
        this.route = route;
        this.navigation = navigation;
        this.notificationService = notificationService;
        this.propertiesService = propertiesService;
        this.hostRef = this;
        this.itemId = this.route.paramMap.pipe(map((params) => params.get('id')));
        this.item = this.service.item; //.pipe(map(item => this.fromService(item)));
        this.notificationTimeout$ = this.propertiesService.notificationDismissTime$;
        this.contactTypeId$ = this.service.getAccountType();
        this.subscriptions = new Subscription();
        service.getItemFrom(this.itemId);
    }
    /**
     * onInit - lifecycle hook
     */
    ngOnInit() {
        this.subscriptions.add(this.itemId.subscribe((itemId) => {
            if (!itemId) {
                this.navigation.currentView = View.List;
            }
            else {
                this.navigation.currentView = View.Detail;
            }
        }));
        this.subscriptions.add(this.service.deleteSuccess
            .pipe(withLatestFrom(this.notificationTimeout$), map(([response, timeout]) => ({ timeout })))
            .subscribe(({ timeout }) => this.notificationService.showNotification({
            header: this.deleteSuccessNotificationTemplate,
            message: '',
            modifier: 'success',
            ttl: timeout,
        })));
        this.subscriptions.add(this.service.deleteError
            .pipe(withLatestFrom(this.notificationTimeout$), map(([error, timeout]) => ({ error, timeout })))
            .subscribe(({ error, timeout }) => this.notificationService.showNotification({
            header: this.deleteErrorNotificationTemplate,
            message: '',
            modifier: 'error',
            ttl: timeout,
        })));
    }
    /**
     * OnDestroy- lifecycle hook Unsubscribing the subscription.
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     *  Emits the output when edit is clicked.
     *
     * @param {SelectContactEvent} accountData - An object which contains id and type of contact to be edited.
     */
    edit(accountData) {
        this.navigation.edit(accountData.id, accountData.type);
    }
    /**
     * Method that calls the delete service and returns to list view.
     *
     * @param {string} id - contact ID which has to be deleted.
     */
    deleteContactsItem(id) {
        this.service.delete(id);
        this.navigation.list();
        this.navigation.currentView = View.List;
    }
}
/** @nocollapse */ ContactsDetailContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDetailContainerComponent, deps: [{ token: ContactsService }, { token: i2$2.ActivatedRoute }, { token: ContactsNavigationService }, { token: i4.NotificationService }, { token: ContactManagerPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsDetailContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDetailContainerComponent, selector: "bb-contacts-detail-container", viewQueries: [{ propertyName: "deleteSuccessNotificationTemplate", first: true, predicate: ["deleteSuccessNotificationTemplate"], descendants: true }, { propertyName: "deleteErrorNotificationTemplate", first: true, predicate: ["deleteErrorNotificationTemplate"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-detail\n    [item]=\"item\"\n    [type]=\"contactTypeId$ | async\"\n    (editContactsItem)=\"edit($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  >\n  </bb-contacts-detail>\n</ng-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-detail-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #deleteSuccessNotificationTemplate>\n  <ng-container bbContactsDeleteSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteSuccessNotificationCustomizable>\n    <span\n      i18n=\"Notification delete success message@@contact-manager-detail-container.notification.delete.success\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Contact was deleted succesfully\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #deleteErrorNotificationTemplate>\n  <ng-container bbContactsDeleteErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteErrorNotificationCustomizable>\n    <span\n      i18n=\"Notification delete failed error message@@contact-manager-detail-container.notification.delete.error\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error deleting contact\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: ContactsDetailComponent, selector: "bb-contacts-detail", inputs: ["type", "showDetail", "item"], outputs: ["editContactsItem", "deleteContactsItem"] }, { type: i7.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ContactsDeleteSuccessNotificationCustomizableDirective, selector: "[bbContactsDeleteSuccessNotificationCustomizable]" }, { type: ContactsDeleteErrorNotificationCustomizableDirective, selector: "[bbContactsDeleteErrorNotificationCustomizable]" }], pipes: { "async": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDetailContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-detail-container',
                    templateUrl: './contacts-detail-container.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: ContactsService }, { type: i2$2.ActivatedRoute }, { type: ContactsNavigationService }, { type: i4.NotificationService }, { type: ContactManagerPreferencesService }]; }, propDecorators: { deleteSuccessNotificationTemplate: [{
                type: ViewChild,
                args: ['deleteSuccessNotificationTemplate']
            }], deleteErrorNotificationTemplate: [{
                type: ViewChild,
                args: ['deleteErrorNotificationTemplate']
            }] } });

const emptyIbanCountriesList = {};
const BB_CONTACT_FORM_ADDITIONS_TOKEN = new InjectionToken('BB_CONTACT_FORM_ADDITIONS_TOKEN');
const ContactConfigProviders = [
    {
        provide: BB_CONTACT_FORM_ADDITIONS_TOKEN,
        useValue: { additions: undefined },
    },
    {
        provide: BB_CONTACT_IBAN_COUNTRIES_LIST,
        useValue: emptyIbanCountriesList,
    },
];

/**
 * Displays a contact form.
 *
 * The following extension slots are available in this component:
 *  - `ContactsFormCustomizableDirective`
 *
 * @see ContactsFormCustomizableDirective
 * @usageNotes
 *
 * ### Display a form for adding / editing the contact form.
 *
 * ```html
 *  <bb-contacts-form
 *   [item]="item"
 *   [type]="itemType$ | async"
 *   (save)="save($event)"
 *   (cancelEdit)="cancelEdit($event)"
 *   (backEvent)="back($event)"
 *   (deleteContactsItem)="deleteContactsItem($event)"
 * ></bb-contacts-form>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsFormComponent {
    constructor(fb, vcRef, platformId, formAdditionsConfig) {
        this.fb = fb;
        this.vcRef = vcRef;
        this.platformId = platformId;
        this.formAdditionsConfig = formAdditionsConfig;
        this.hostRef = this;
        this.submitted = false;
        this.ibanMask = IbanMask;
        /**
         * Controls whether form can be submitted
         */
        this.disabledSubmit = false;
        /**
         * Event emitted when contact edit is saved
         */
        this.save = new EventEmitter();
        /**
         * Event emitted when contact edit is cancelled
         */
        this.cancelEdit = new EventEmitter();
        /**
         * Event emitted when user clicks back
         */
        this.backEvent = new EventEmitter();
        /**
         * Event emitted when contact is deleted
         */
        this.deleteContactsItem = new EventEmitter();
        /**
         * Contact account Type reference.
         */
        this.createAccountTypeRef = AccountCreateType;
    }
    /**
     * OnInit - lifecycle hook.
     */
    ngOnInit() {
        if (this.item === undefined) {
            throw new Error('`item` input is required in `bb-contact-form` component');
        }
    }
    /**
     * AfterViewInt- lifecycle hook.
     */
    ngAfterViewInit() {
        var _a;
        if (isPlatformBrowser(this.platformId)) {
            (_a = this.vcRef.element.nativeElement.querySelector('input')) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }
    /**
     * OnChanges - lifecycle hook.
     *
     * @param {SimpleChanges} changes angular SimpleChanges object
     */
    ngOnChanges(changes) {
        if (changes.type) {
            this.submitted = false;
            this.contactsForm = this.createFormGroupInstance();
        }
    }
    createFormGroupInstance() {
        const { additions } = Object.assign({}, this.formAdditionsConfig);
        return this.fb.group(Object.assign({ name: [this.item.name], IBAN: [this.item.IBAN], accountNumber: [this.item.accountNumber], email: [this.item.email], phoneNumber: [this.item.phoneNumber] }, (additions ? { additions: this.fb.group(additions) } : {})));
    }
    /**
     * saveItem - method that emits the data when saved.
     */
    saveItem() {
        this.submitted = true;
        if (this.contactsForm.valid) {
            this.save.emit(Object.assign(Object.assign({}, this.item), (this.contactsForm ? this.contactsForm.value : {})));
        }
        else {
            this.contactsForm.markAllAsTouched();
        }
    }
    /**
     * emits the id of the contact that has cancelled.
     */
    cancel() {
        this.cancelEdit.emit(this.item.id);
    }
    /**
     * emits the id, when back is clicked.
     */
    back() {
        this.backEvent.emit(this.item.id);
    }
    get name() {
        return this.contactsForm.get('name');
    }
    get iban() {
        return this.contactsForm.get('IBAN');
    }
    get accountNumber() {
        return this.contactsForm.get('accountNumber');
    }
    /**
     *  the id of the contact is emitted when deleted.
     */
    deleteItemEmit() {
        this.deleteContactsItem.emit(this.item.id);
    }
}
/** @nocollapse */ ContactsFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormComponent, deps: [{ token: i1$2.FormBuilder }, { token: i0.ViewContainerRef }, { token: PLATFORM_ID }, { token: BB_CONTACT_FORM_ADDITIONS_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormComponent, selector: "bb-contacts-form", inputs: { item: "item", type: "type", disabledSubmit: "disabledSubmit" }, outputs: { save: "save", cancelEdit: "cancelEdit", backEvent: "backEvent", deleteContactsItem: "deleteContactsItem" }, usesOnChanges: true, ngImport: i0, template: "<ng-container bbContactsFormCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"item\"></ng-container>\n<ng-template bbContactsFormCustomizable let-hostRef>\n  <bb-contacts-detail\n    [showDetail]=\"false\"\n    [item]=\"hostRef.item\"\n    [type]=\"hostRef.type\"\n    (deleteContactsItem)=\"hostRef.deleteItemEmit()\"\n  ></bb-contacts-detail>\n  <bb-loading-indicator-ui *ngIf=\"hostRef.disabledSubmit\"></bb-loading-indicator-ui>\n  <form\n    *ngIf=\"hostRef.contactsForm\"\n    [hidden]=\"hostRef.disabledSubmit\"\n    (submit)=\"hostRef.saveItem()\"\n    [formGroup]=\"hostRef.contactsForm\"\n    class=\"bb-block bb-block--xl\"\n  >\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--xl col-12\" data-role=\"contact-account-info-account-name1\">\n        <bb-input-text-ui\n          id=\"bb-create-contact-name\"\n          data-role=\"new-contact-name\"\n          label=\"Name\"\n          i18n-label=\"Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name\"\n          [formControl]=\"hostRef.contactsForm.controls.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          class=\"position-absolute\"\n          role=\"alert\"\n          [showErrors]=\"hostRef.contactsForm.controls.name.errors?.required && hostRef.contactsForm.controls.name.touched\"\n        >\n          <span\n            i18n=\"\n                Contacts name required error text | Text for contacts detail component name required\n                error@@contact-manager-form.label.nameRequired\n              \"\n            data-role=\"missing-account-name\"\n          >\n            Name is required\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--xl col-12\">\n        <ng-container [ngSwitch]=\"hostRef.type\">\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\">\n            <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\">\n            <ng-container *ngTemplateOutlet=\"email\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\">\n            <ng-container *ngTemplateOutlet=\"phone\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\">\n            <ng-container *ngTemplateOutlet=\"bban\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <div class=\"bb-button-bar bb-button-bar--spacing-sm\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        color=\"primary\"\n        name=\"save\"\n        data-role=\"save-button\"\n        i18n=\"Save current form | Save button text for saving a contact item@@contact-manager-form.button.save\"\n        [disabled]=\"hostRef.submitted && hostRef.contactsForm.invalid || hostRef.disabledSubmit\"\n      >\n        Save\n      </button>\n      <button\n        bbButton\n        color=\"secondary\"\n        type=\"button\"\n        class=\"bb-button-bar__button\"\n        name=\"back\"\n        data-role=\"contacts-form-back-button\"\n        i18n=\"\n        Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back\n      \"\n        (click)=\"hostRef.back()\"\n      >\n        Back\n      </button>\n      <button\n        bbButton\n        color=\"link-text\"\n        type=\"button\"\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        name=\"cancel\"\n        data-role=\"contacts-form-cancel-button\"\n        i18n=\"\n          Cancel action in current form | Cancel button text for cancelling a creation of a new\n          contact@@contact-manager-form.button.cancel\n        \"\n        (click)=\"hostRef.cancel()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n\n  <ng-template #iban>\n    <bb-input-text-ui\n      id=\"bb-create-contact-iban\"\n      label=\"IBAN\"\n      i18n-label=\"@@contact-manager-form.label.bban\"\n      data-role=\"new-contact-iban\"\n      [formControl]=\"hostRef.contactsForm.controls.IBAN\"\n      [maxLength]=\"hostRef.ibanMask.length\"\n      [required]=\"true\"\n      [mask]=\"hostRef.ibanMask\"\n      [maskValidator]=\"false\"\n      bbIbanValidator\n    >\n    </bb-input-text-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.IBAN, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"hostRef.contactsForm.controls.IBAN.touched\n      && hostRef.contactsForm.controls.IBAN.errors?.invalidIban\"\n    >\n      <ng-container>\n        <span\n          i18n=\"\n            Contacts account number invalid error text | Text for contacts detail component iban invalid\n            error@@contact-manager-form.label.ibanInvalid\n          \"\n          data-role=\"invalid-account-number-error-label\"\n        >\n          Invalid IBAN\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n\n  <ng-template #bban>\n    <bb-input-text-ui\n      id=\"bb-create-contact-bban\"\n      label=\"Account number\"\n      i18n-label=\"@@contact-manager-form.label.account.number\"\n      data-role=\"new-contact-bban\"\n      [formControl]=\"hostRef.contactsForm.controls.accountNumber\"\n      [maxLength]=\"34\"\n      [required]=\"true\"\n    >\n    </bb-input-text-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.accountNumber, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template #email>\n    <label\n      #contactsEmailLabel\n      id=\"bb-create-contact-email-label\"\n      data-role=\"contact-account-create-email-label\"\n      i18n=\"@@contact-personal-data.contactEmail.label\"\n      class=\"mb-2\"\n    >\n      Email\n      <small class=\"d-block bb-text-support bb-text-default\">E.g. sarawilliams@backbase.com</small>\n    </label>\n    <bb-input-email-ui\n      [aria-labelledby]=\"contactsEmailLabel.id\"\n      [formControl]=\"hostRef.contactsForm.controls.email\"\n      [maxLength]=\"255\"\n      [required]=\"true\"\n      data-role=\"new-contact-email\"\n      bbEmailDomainValidator\n    >\n    </bb-input-email-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.email, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"hostRef.contactsForm.controls.email.touched\n      && hostRef.contactsForm.controls.email.errors?.email\"\n    >\n      <ng-container>\n        <span\n          i18n=\"\n          Contacts email id invalid error text | Text for contacts detail component email invalid\n          error@@contact-manager-form.label.email.invalid\n        \"\n          data-role=\"invalid-email-error-label\"\n        >\n          Invalid email\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n\n  <ng-template #phone>\n    <label\n      #contactsPhoneLabel\n      id=\"bb-create-contact-phone-label\"\n      data-role=\"contact-account-create-phone\"\n      i18n=\"@@contact-manager-form.label.phoneNumber\"\n      class=\"mb-2\"\n    >\n      Phone number\n      <small id=\"example-number\" class=\"d-block bb-text-support bb-text-default\">E.g. +12027953213</small>\n    </label>\n    <bb-input-text-ui\n      [formControl]=\"hostRef.contactsForm.controls.phoneNumber\"\n      [maxLength]=\"30\"\n      [required]=\"true\"\n      [aria-labelledby]=\"contactsPhoneLabel.id\"\n      aria-describedby=\"example-number\"\n      data-role=\"new-contact-phone\"\n    >\n    </bb-input-text-ui>\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.phoneNumber && hostRef.contactsForm.controls.phoneNumber, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template #err let-control=\"control\" let-errorMessageAcctType=\"errorMessageAcctType\">\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"control.errors?.required\n    && control.touched\n\"\n    >\n      <ng-container [ngSwitch]=\"errorMessageAcctType\">\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\"\n          i18n=\"\n            Contacts account number required error text | Text for contacts detail component account number required\n            error@@contact-manager-form.label.account.required\n          \"\n          data-role=\"missing-account-number-error-label\"\n        >\n          Account number is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\"\n          i18n=\"\n            Contacts IBAN required error text | Text for contacts detail component IBAN required\n            error@@contact-manager-form.label.iban.required\n          \"\n          data-role=\"missing-account-number-error-label\"\n        >\n          IBAN is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\"\n          i18n=\"\n            Contacts Phone number required error text | Text for contacts detail component Phone required\n            error@@contact-manager-form.label.phone.number.required\n          \"\n          data-role=\"missing-phone-number-error-label\"\n        >\n          Phone number is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\"\n          i18n=\"\n            Contacts EMAIL required error text | Text for contacts detail component Email required\n            error@@contact-manager-form.label.email.required\n          \"\n          data-role=\"missing-email-error-label\"\n        >\n          Email is required\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ContactsDetailComponent; }), selector: "bb-contacts-detail", inputs: ["type", "showDetail", "item"], outputs: ["editContactsItem", "deleteContactsItem"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i4$1.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i5.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i6$1.InputEmailComponent; }), selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }], directives: [{ type: i0.forwardRef(function () { return ContactsFormCustomizableDirective; }), selector: "[bbContactsFormCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1$2.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1$2.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1$2.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i8.NoWhiteSpaceValidatorDirective; }), selector: "[bbNoWhiteSpace]" }, { type: i0.forwardRef(function () { return i1$2.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$2.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1$2.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i2$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i6.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8.IbanValidatorDirective; }), selector: "[bbIbanValidator]" }, { type: i0.forwardRef(function () { return i8.EmailDomainValidatorDirective; }), selector: "[bbEmailDomainValidator]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-form',
                    templateUrl: './contacts-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }, { type: i0.ViewContainerRef }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_CONTACT_FORM_ADDITIONS_TOKEN]
                }] }]; }, propDecorators: { item: [{
                type: Input
            }], type: [{
                type: Input
            }], disabledSubmit: [{
                type: Input
            }], save: [{
                type: Output
            }], cancelEdit: [{
                type: Output
            }], backEvent: [{
                type: Output
            }], deleteContactsItem: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing an form of contacts editing.
 *
 * @usageNotes
 *
 * ### Display a contact form.
 *
 * ```html
 *  <bb-contacts-detail
 *   [showDetail]="false"
 *   [item]="hostRef.item"
 *   [type]="hostRef.type"
 *   (deleteContactsItem)="hostRef.deleteItemEmit()"
 * ></bb-contacts-detail>
 * <form
 *  *ngIf="hostRef.contactsForm"
 *   (submit)="hostRef.saveItem()"
 *   [formGroup]="hostRef.contactsForm"
 *   class="bb-block bb-block--xl"
 * >
 *   <fieldSet>
 *     <div class="row">
 *       <div
 *         class="bb-block bb-block--lg col-12"
 *         data-role="contact-account-info-account-name1"
 *       >
 *         <label
 *           [for]="contactsName.id"
 *           data-role="edit-contact-label"
 *           i18n="Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name"
 *         >
 *           Name
 *         </label>
 *         <bb-input-text-ui
 *           data-role="new-contact-name"
 *           [formControl]="hostRef.contactsForm.controls.name"
 *           name="contactsName"
 *           #contactsName
 *           [maxLength]="140"
 *           [required]="hostRef.submitted"
 *         >
 *         </bb-input-text-ui>
 *
 *         <bb-input-validation-message-ui
 *           role="alert"
 *           [showErrors]="
 *             hostRef.contactsForm.controls.name.invalid &&
 *             (hostRef.contactsForm.controls.name.dirty || hostRef.contactsForm.controls.name.touched)
 *           ">
 *           <ng-container
 *           *ngIf="hostRef.contactsForm.controls.name.errors?.required || hostRef.contactsForm.controls.name.errors?.minlength">
 *             <span
 *               i18n="
 *                 Contacts name required error text | Text for contacts detail component name required
 *                 error@@contact-manager-form.label.nameRequired
 *               "
 *               data-role="missing-account-name">
 *               Name is required
 *             </span>
 *           </ng-container>
 *         </bb-input-validation-message-ui>
 *       </div>
 *       <div class="bb-block bb-block--lg col-12">
 *         <ng-container [ngSwitch]="hostRef.type">
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.IBAN">
 *             <ng-container *ngTemplateOutlet="iban"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.EMAIL">
 *             <ng-container *ngTemplateOutlet="email"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.PHONE">
 *             <ng-container *ngTemplateOutlet="phone"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.ACCOUNT">
 *             <ng-container *ngTemplateOutlet="bban"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchDefault>
 *             <ng-container *ngTemplateOutlet="iban"></ng-container>
 *           </ng-container>
 *         </ng-container>
 *
 *       </div>
 *     </div>
 *   </fieldSet>
 *   <div class="bb-button-bar">
 *     <button
 *       bbButton
 *       type="submit"
 *       color="primary"
 *       type="submit"
 *       [disabled]="hostRef.contactsForm.invalid || !hostRef.contactsForm?.controls?.name?.value.trim()"
 *       class="bb-button-bar__button"
 *       name="save"
 *       data-role="save-button"
 *       i18n="Save current form | Save button text for saving a contact item@@contact-manager-form.button.save"
 *     >
 *       Save
 *     </button>
 *     <button
 *     bbButton
 *     color="secondary"
 *     (click)="hostRef.back()"
 *     type="button"
 *     class="bb-button-bar__button"
 *     name="back"
 *     data-role="contacts-form-back-button"
 *     i18n="
 *       Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back
 *     "
 *   >
 *     Back
 *   </button>
 *     <button
 *       bbButton
 *       color="link-text"
 *       (click)="hostRef.cancel()"
 *       type="button"
 *       class="bb-button-bar__button bb-button-bar__button--across"
 *       name="cancel"
 *       data-role="contacts-form-cancel-button"
 *       i18n="
 *         Cancel action in current form | Cancel button text for cancelling a creation of a new
 *         contact@@contact-manager-form.button.cancel
 *       "
 *     >
 *       Cancel
 *     </button>
 *   </div>
 * </form>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsFormCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormCustomizableDirective, selector: "[bbContactsFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsFormCustomizable]',
                }]
        }] });

/**
 * This is an extension slot to be used for customizing success notification after creating a contact
 *
 * @example
 *
 * ```html
 * <ng-template bbContactsCreateSuccessNotificationCustomizable>
 *   <span
 *     i18n="@@contact-manager-form-container.notification-create.success"
 *     data-role="successfully-saved-contact"
 *     role="alert"
 *     aria-atomic="true"
 *   >
 *     Successfully saved Contact
 *   </span>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsCreateSuccessNotificationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsCreateSuccessNotificationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsCreateSuccessNotificationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsCreateSuccessNotificationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsCreateSuccessNotificationCustomizableDirective, selector: "[bbContactsCreateSuccessNotificationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsCreateSuccessNotificationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsCreateSuccessNotificationCustomizable]',
                }]
        }] });

/**
 * This is an extension slot to be used for customizing error notification after creating a contact
 *
 * @example
 *
 * ```html
 * <ng-template bbContactsCreateErrorNotificationCustomizable>
 *   <span
 *     i18n="@@contact-manager-form-container.notification-create.error"
 *     data-role="failed-to-save-contact"
 *     role="alert"
 *     aria-atomic="true"
 *   >
 *     Error saving Contact
 *   </span>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsCreateErrorNotificationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsCreateErrorNotificationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsCreateErrorNotificationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsCreateErrorNotificationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsCreateErrorNotificationCustomizableDirective, selector: "[bbContactsCreateErrorNotificationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsCreateErrorNotificationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsCreateErrorNotificationCustomizable]',
                }]
        }] });

/**
 * This is an extension slot to be used for customizing success notification after editing a contact
 *
 * @example
 *
 * ```html
 * <ng-template bbContactsEditSuccessNotificationCustomizable>
 *   <span
 *     i18n="@@contact-manager-form-container.notification-edit.success"
 *     data-role="successfully-saved-contact"
 *     role="alert"
 *     aria-atomic="true"
 *   >
 *     Successfully saved Contact
 *   </span>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsEditSuccessNotificationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsEditSuccessNotificationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEditSuccessNotificationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsEditSuccessNotificationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEditSuccessNotificationCustomizableDirective, selector: "[bbContactsEditSuccessNotificationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEditSuccessNotificationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsEditSuccessNotificationCustomizable]',
                }]
        }] });

/**
 * This is an extension slot to be used for customizing error notification after editing a contact
 *
 * @example
 *
 * ```html
 * <ng-template bbContactsEditErrorNotificationCustomizable>
 *   <span
 *     i18n="@@contact-manager-form-container.notification-edit.error"
 *     data-role="failed-to-save-contact"
 *     role="alert"
 *     aria-atomic="true"
 *   >
 *     Error saving Contact
 *   </span>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsEditErrorNotificationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsEditErrorNotificationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEditErrorNotificationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsEditErrorNotificationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEditErrorNotificationCustomizableDirective, selector: "[bbContactsEditErrorNotificationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEditErrorNotificationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsEditErrorNotificationCustomizable]',
                }]
        }] });

/**
 * This is an extension slot to be used for customizing confirmation dialog of discarding changes
 *
 * @example
 *
 * ```html
 * <ng-template bbContactsEditDiscardConfirmationCustomizable let-hostRef let-context="context">
 *   <div class="modal-header">
 *     <h4 i18n="@contact-manager-form-container.header.discardChanges" class="modal-title">Discard Changes</h4>
 *   </div>
 *   <div class="modal-body" role="alert">
 *     <p i18n="@@contact-manager-form-container.discardChangesConfirmation">
 *       Are you sure you want to discard your changes? This action cannot be undone.
 *     </p>
 *   </div>
 *   <div class="modal-footer">
 *     <div class="d-flex flex-row-reverse">
 *       <button
 *         class="ml-3"
 *         bbButton
 *         color="danger"
 *         i18n="@@contact-manager-form-container.button.discard"
 *         type="button"
 *         (click)="hostRef.discardChanges()"
 *       >
 *         Discard
 *       </button>
 *       <button
 *         i18n="@@contact-manager-form-container.button.cancel"
 *         type="button"
 *         bbButton
 *         color="secondary"
 *         (click)="context.dismiss()"
 *       >
 *         Not now
 *       </button>
 *     </div>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsEditDiscardConfirmationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsEditDiscardConfirmationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEditDiscardConfirmationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsEditDiscardConfirmationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEditDiscardConfirmationCustomizableDirective, selector: "[bbContactsEditDiscardConfirmationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEditDiscardConfirmationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsEditDiscardConfirmationCustomizable]',
                }]
        }] });

/**
 * Container component for showing contact details.
 *
 * @usageNotes
 *
 * ### Display create/ edit form for contacts
 *
 * ```html
 * <bb-contacts-form-container></bb-contacts-form-container>
 * ```
 *
 * ### Additionally use the container component in routing.
 *
 * ```typescript
 * const routes: [
 *   {
 *   path: 'edit/:id/:type',
 *   canDeactivate: [CanDeactivateGuard],
 *   component: ContactsFormContainerComponent,
 * }]
 *
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsFormContainerComponent {
    constructor(service, route, navigation, notificationService, propertiesService, cdr) {
        this.service = service;
        this.route = route;
        this.navigation = navigation;
        this.notificationService = notificationService;
        this.propertiesService = propertiesService;
        this.cdr = cdr;
        this.hostRef = this;
        this.itemId = this.route.paramMap.pipe(map((params) => params.get('id')));
        this.itemType$ = this.route.paramMap.pipe(map((params) => params.get('type')));
        this.item = this.service.item.pipe(map((item) => this.fromService(item)));
        this.notificationTimeout$ = this.propertiesService.notificationDismissTime$;
        this.isDiscardConfirmOpened = false;
        this.discard$ = new Subject();
        this.isPendingRequest = false;
        service.getItemFrom(this.itemId);
    }
    /**
     * onInit - lifecycle hook for setting current view.
     */
    ngOnInit() {
        this.navigation.currentView = View.Edit;
        this.isPendingRequest = false;
    }
    /**
     * Calling the save api and showing the notification.
     *
     * @param {ContactsFormItem} item - Contact Object while save
     */
    save(item) {
        this.isPendingRequest = true;
        this.itemId
            .pipe(mergeMap(() => this.service.save(this.toService(item))), catchError(() => of(undefined)), withLatestFrom(this.notificationTimeout$), map(([id, timeout]) => ({ id, timeout })), take(1))
            .subscribe(({ id, timeout }) => {
            this.isPendingRequest = false;
            this.formComponent.contactsForm.markAsPristine();
            if (id) {
                this.navigation.select(id);
                this.notificationService.showNotification({
                    header: (item.id
                        ? this.notificationEditSuccessTemplate
                        : this.notificationCreateSuccessTemplate),
                    message: '',
                    modifier: 'success',
                    ttl: timeout,
                });
            }
            else {
                this.notificationService.showNotification({
                    header: (item.id
                        ? this.notificationEditErrorTemplate
                        : this.notificationCreateErrorTemplate),
                    message: '',
                    modifier: 'error',
                    ttl: timeout,
                });
            }
            this.navigation.currentView = View.List;
            this.navigation.list();
        });
    }
    /**
     * showing the confirmation modal, when moving away from route.
     *
     * @returns {Promise<boolean> | boolean} whether route can be deactivated
     */
    canDeactivate() {
        var _a, _b;
        if ((_b = (_a = this.formComponent) === null || _a === void 0 ? void 0 : _a.contactsForm) === null || _b === void 0 ? void 0 : _b.dirty) {
            this.isDiscardConfirmOpened = true;
            this.discard$.complete();
            this.discard$ = new Subject();
            this.cdr.markForCheck();
            return this.discard$;
        }
        return true;
    }
    /**
     *  When the Edit is cancelled. It determines if it should show the selected contact or list
     *
     * @param {string} id - Contact Id.
     */
    cancelEdit(id) {
        if (id) {
            this.navigation.select(id);
            this.navigation.currentView = View.Detail;
        }
        else {
            this.navigation.list();
            this.navigation.currentView = View.List;
        }
    }
    /**
     * Method to go to previous screen based on id
     *
     * @param {string | undefined} id - Contact Id
     */
    back(id) {
        if (id) {
            this.navigation.list();
            this.navigation.currentView = View.List;
        }
        else {
            this.navigation.newContact();
            this.navigation.currentView = View.Select;
        }
    }
    /**
     *
     * @param {ContactItem | undefined} item Contact object.
     * @returns {ContactsFormItem} The transformed contact Object when returned from API.
     */
    // eslint-disable-next-line complexity
    fromService(item) {
        if (item) {
            return {
                id: item.id,
                name: item.name,
                IBAN: item.accounts && item.accounts[0] && item.accounts[0].IBAN ? item.accounts[0].IBAN : undefined,
                accountNumber: item.accounts && item.accounts[0] && item.accounts[0].accountNumber
                    ? item.accounts[0].accountNumber
                    : undefined,
                email: item.accounts && item.accounts[0] && item.accounts[0].email ? item.accounts[0].email : undefined,
                phoneNumber: item.accounts && item.accounts[0] && item.accounts[0].phoneNumber ? item.accounts[0].phoneNumber : undefined,
                accounts: item.accounts || [],
                additions: item.additions || {},
            };
        }
        else {
            return { id: '', name: '', surname: '', initials: '', accounts: [], additions: {} };
        }
    }
    /**
     *
     * @param {ContactsFormItem} item Contact Object
     * @returns {ContactItem} The trandformed contact object when submitting to API.
     */
    toService(item) {
        return Object.assign({ id: item.id, name: item.name, accounts: [
                Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (item.accounts && item.accounts[0] ? item.accounts[0] : {})), (item.IBAN ? { IBAN: item.IBAN } : {})), (item.accountNumber ? { accountNumber: item.accountNumber } : {})), (item.phoneNumber ? { phoneNumber: item.phoneNumber } : {})), (item.email ? { email: item.email } : {})),
            ] }, (item.additions ? { additions: item.additions } : {}));
    }
    /**
     * Method that calls the delete api and returns to the list.
     *
     * @param {string} id Contact Id to be deleted
     */
    deleteContactsItem(id) {
        this.service.delete(id);
        this.navigation.list();
        this.navigation.currentView = View.List;
    }
    /**
     * event handler for confirming discard
     */
    onConfirmDiscard() {
        this.discard$.next(true);
        this.discard$.complete();
        this.isDiscardConfirmOpened = false;
    }
    /**
     * event handler for canceling discard
     */
    onCancelDiscard() {
        this.discard$.next(false);
        this.discard$.complete();
        this.isDiscardConfirmOpened = false;
    }
}
/** @nocollapse */ ContactsFormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormContainerComponent, deps: [{ token: ContactsService }, { token: i2$2.ActivatedRoute }, { token: ContactsNavigationService }, { token: i4.NotificationService }, { token: ContactManagerPreferencesService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsFormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormContainerComponent, selector: "bb-contacts-form-container", viewQueries: [{ propertyName: "formComponent", first: true, predicate: ContactsFormComponent, descendants: true }, { propertyName: "notificationCreateSuccessTemplate", first: true, predicate: ["notificationCreateSuccess"], descendants: true }, { propertyName: "notificationCreateErrorTemplate", first: true, predicate: ["notificationCreateError"], descendants: true }, { propertyName: "notificationEditSuccessTemplate", first: true, predicate: ["notificationEditSuccess"], descendants: true }, { propertyName: "notificationEditErrorTemplate", first: true, predicate: ["notificationEditError"], descendants: true }, { propertyName: "discardChangesModalContent", first: true, predicate: ["discardChangesModalContent"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-form\n    [item]=\"item\"\n    [type]=\"itemType$ | async\"\n    [disabledSubmit]=\"isPendingRequest\"\n    (save)=\"save($event)\"\n    (cancelEdit)=\"cancelEdit($event)\"\n    (backEvent)=\"back($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  ></bb-contacts-form>\n</ng-container>\n\n<ng-template #notificationCreateSuccess>\n  <ng-container bbContactsCreateSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsCreateSuccessNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-create.success\"\n      data-role=\"successfully-saved-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Successfully saved Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationCreateError>\n  <ng-container bbContactsCreateErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsCreateErrorNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-create.error\"\n      data-role=\"failed-to-save-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error saving Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationEditSuccess>\n  <ng-container bbContactsEditSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsEditSuccessNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-edit.success\"\n      data-role=\"successfully-saved-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Successfully saved Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationEditError>\n  <ng-container bbContactsEditErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsEditErrorNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-edit.error\"\n      data-role=\"failed-to-save-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error saving Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-form-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-container bbContactsEditDiscardConfirmationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbContactsEditDiscardConfirmationCustomizable let-hostRef>\n  <bb-confirm-action-dialog\n    [isOpen]=\"hostRef.isDiscardConfirmOpened\"\n    [confirmButtonColor]=\"'danger'\"\n    (confirm)=\"hostRef.onConfirmDiscard()\"\n    (cancel)=\"hostRef.onCancelDiscard()\"\n  >\n    <span title i18n=\"@contact-manager-form-container.header.discardChanges\">Discard Changes</span>\n    <span body i18n=\"@@contact-manager-form-container.discardChangesConfirmation\">\n      Are you sure you want to discard your changes? This action cannot be undone.\n    </span>\n    <span cancelButtonLabel i18n=\"@@contact-manager-form-container.button.cancel\">Not now</span>\n    <span confirmButtonLabel i18n=\"@@contact-manager-form-container.button.discard\">Discard</span>\n  </bb-confirm-action-dialog>\n</ng-template>\n", components: [{ type: ContactsFormComponent, selector: "bb-contacts-form", inputs: ["item", "type", "disabledSubmit"], outputs: ["save", "cancelEdit", "backEvent", "deleteContactsItem"] }, { type: i7.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i8.ConfirmActionDialogComponent, selector: "bb-confirm-action-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ContactsCreateSuccessNotificationCustomizableDirective, selector: "[bbContactsCreateSuccessNotificationCustomizable]" }, { type: ContactsCreateErrorNotificationCustomizableDirective, selector: "[bbContactsCreateErrorNotificationCustomizable]" }, { type: ContactsEditSuccessNotificationCustomizableDirective, selector: "[bbContactsEditSuccessNotificationCustomizable]" }, { type: ContactsEditErrorNotificationCustomizableDirective, selector: "[bbContactsEditErrorNotificationCustomizable]" }, { type: ContactsEditDiscardConfirmationCustomizableDirective, selector: "[bbContactsEditDiscardConfirmationCustomizable]" }], pipes: { "async": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-form-container',
                    templateUrl: './contacts-form-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: ContactsService }, { type: i2$2.ActivatedRoute }, { type: ContactsNavigationService }, { type: i4.NotificationService }, { type: ContactManagerPreferencesService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { formComponent: [{
                type: ViewChild,
                args: [ContactsFormComponent]
            }], notificationCreateSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationCreateSuccess']
            }], notificationCreateErrorTemplate: [{
                type: ViewChild,
                args: ['notificationCreateError']
            }], notificationEditSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationEditSuccess']
            }], notificationEditErrorTemplate: [{
                type: ViewChild,
                args: ['notificationEditError']
            }], discardChangesModalContent: [{
                type: ViewChild,
                args: ['discardChangesModalContent']
            }] } });

/**
 *
 * This guard is called while deactivating the route to check if the form is dirty.
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this guard into your route
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [{
 *   path: 'edit/:id/:type',
 *   canDeactivate: [CanDeactivateGuard],
 *   component: ContactsFormContainerComponent,
 * },]
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
class CanDeactivateGuard {
    canDeactivate(component) {
        return component.canDeactivate ? component.canDeactivate() : true;
    }
}
/** @nocollapse */ CanDeactivateGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CanDeactivateGuard, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CanDeactivateGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CanDeactivateGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CanDeactivateGuard, decorators: [{
            type: Injectable
        }] });

/**
 * Displays a list of all contact types, allowing one to be selected.
 *
 * @usageNotes
 *
 * ### Display a list of types of contact that can be created
 *
 * ```html
 * <bb-contact-account-select-type
 *   [listOfAccountTypes]="createContactList$ | async"
 *   [noOfItemsinList]="noOfItemsinList
 * ></bb-contact-account-select-type>
 * ```
 *
 * ### Additionally set the selected contact type
 *
 * ```html
 * <bb-contact-account-select-type
 *   [listOfAccountTypes]="createContactList$ | async"
 *   [noOfItemsinList]="noOfItemsinList
 *   (selectedAccountType)="selectedAccountType()"
 * ></bb-contact-account-select-type>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactSelectAccountTypeComponent {
    constructor(navigation) {
        this.navigation = navigation;
        /**
         * event when account is selected.
         */
        this.selectedAccountType = new EventEmitter();
        this.createAccountTypeRef = AccountCreateType;
    }
    /**
     * OnInit lifecycle hook.
     */
    ngOnInit() {
        var _a;
        this.navigation.currentView = View.Edit;
        if (this.noOfItemsinList === 0 || this.noOfItemsinList === 1) {
            this.navigation.newContactForm(((_a = this.listOfAccountTypes.find((list) => list.enableItem)) === null || _a === void 0 ? void 0 : _a.listItem) || this.createAccountTypeRef.IBAN);
        }
    }
    /**
     * Update the selected account type for contact creation.
     *
     * @param {CreateListType} $event -The selected contact Type details.
     */
    updateCreateContactType($event) {
        this.navigation.currentView = View.Edit;
        this.navigation.newContactForm($event.listItem);
    }
}
/** @nocollapse */ ContactSelectAccountTypeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactSelectAccountTypeComponent, deps: [{ token: ContactsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactSelectAccountTypeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactSelectAccountTypeComponent, selector: "bb-contact-account-select-type", inputs: { listOfAccountTypes: "listOfAccountTypes", noOfItemsinList: "noOfItemsinList" }, outputs: { selectedAccountType: "selectedAccountType" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div class=\"bb-block\" data-role=\"contact-details-info-name\">\n        <span\n          class=\"d-none\"\n          data-role=\"create-contact-label\"\n          aria-hidden=\"true\"\n          i18n=\"Create new contact heading | Title shown when user is in select contact type@@contact-manager-detail.create.select.heading\"\n          #heading\n        >\n          Create new contact\n        </span>\n        <bb-header-ui data-role=\"create-new-contact-label\" headingType=\"h3\" [heading]=\"heading.textContent\">\n        </bb-header-ui>\n      </div>\n    </div>\n  </div>\n</div>\n<hr />\n<div class=\"bb-lock bb-text-support\">\n  <div\n    class=\"bb-bock\"\n    data-role=\"create-contact-select-new-account-info\"\n    i18n=\"@@create-contact-type-list.select.info.text\"\n  >\n    Select which information you want to use to create a contact. You can move money with an account number, a phone\n    number or an email\n  </div>\n</div>\n<div class=\"bb-select-payment-option\">\n  <div *ngFor=\"let listItem of listOfAccountTypes\">\n    <div *ngIf=\"listItem.enableItem\">\n      <ng-container *ngTemplateOutlet=\"listButton; context: { listItem: listItem}\"></ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #listButton let-listItem=\"listItem\">\n  <div class=\"bb-button-bar m-3\">\n    <button\n      class=\"bb-button-bar__button bb-button-bar__button--across bb-inline-stack col-12 bb-select-payment-option__label\"\n      bbButton\n      color=\"unstyled\"\n      (click)=\"updateCreateContactType(listItem)\"\n    >\n      <ng-container [ngSwitch]=\"listItem.listItem\">\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.IBAN\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"person-outline\"></bb-icon-ui>\n          <div data-role=\"iban-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.iban\">With an IBAN </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.ACCOUNT\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"person-outline\"></bb-icon-ui>\n          <div data-role=\"account-number-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.account\"\n              >With an account number\n            </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.EMAIL\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"inbox\"></bb-icon-ui>\n          <div data-role=\"email-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.email\">With an email </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.PHONE\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"phone\"></bb-icon-ui>\n          <div data-role=\"phone-number-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.phone\">With a phone number </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n      </ng-container>\n    </button>\n  </div>\n</ng-template>\n", components: [{ type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactSelectAccountTypeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-account-select-type',
                    templateUrl: './contact-select-account-type.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ContactsNavigationService }]; }, propDecorators: { listOfAccountTypes: [{
                type: Input
            }], noOfItemsinList: [{
                type: Input
            }], selectedAccountType: [{
                type: Output
            }] } });

/**
 *
 * Container component for showing contact list.
 *
 * @usageNotes
 *
 * ### Display list of all the types of contacts to select before creation.
 *
 * ```html
 * <bb-contacts-type-list-container></bb-contacts-type-list-container>
 * ```
 * ### Additionally use the container component in routing.
 *
 * ```typescript
 * const routes: [
 * {
 *  path: 'select',
 *  component: ContactsTypeListContainerComponent
 * }]
 *
 *
 * @ngModule ContactManagerWidgetModule
 */
class ContactsTypeListContainerComponent {
    constructor(contactService, propertiesService) {
        this.contactService = contactService;
        this.propertiesService = propertiesService;
        /**
         * property from user if the contact creation through email is allowed
         */
        this.allowEmail$ = this.propertiesService.createContactEmail$;
        /**
         * property from user if the contact creation through IBAN is allowed
         */
        this.allowIBAN$ = this.propertiesService.createContactIBAN$;
        /**
         * property from user if the contact creation through Account Number is allowed
         */
        this.allowAccount$ = this.propertiesService.createContactAccount$;
        /**
         * property from user if the contact creation through Phone Number is allowed
         */
        this.allowPhone$ = this.propertiesService.createContactPhone$;
        /**
         * check which properties are allowed and showing them on screen.
         */
        this.createContactList$ = combineLatest([
            this.allowAccount$,
            this.allowIBAN$,
            this.allowPhone$,
            this.allowEmail$,
        ]).pipe(tap((contactListItem) => (this.noOfItemsinList = contactListItem.filter((listItem) => listItem && typeof listItem === 'boolean').length)), map(([Account, IBAN, Phone, Email]) => [
            {
                listItem: AccountCreateType.ACCOUNT,
                enableItem: Account === null || Account === void 0 ? void 0 : Account.valueOf(),
            },
            {
                listItem: AccountCreateType.IBAN,
                enableItem: IBAN === null || IBAN === void 0 ? void 0 : IBAN.valueOf(),
            },
            { listItem: AccountCreateType.PHONE, enableItem: Phone === null || Phone === void 0 ? void 0 : Phone.valueOf() },
            { listItem: AccountCreateType.EMAIL, enableItem: Email === null || Email === void 0 ? void 0 : Email.valueOf() },
        ]));
    }
}
/** @nocollapse */ ContactsTypeListContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsTypeListContainerComponent, deps: [{ token: ContactsService }, { token: ContactManagerPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsTypeListContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsTypeListContainerComponent, selector: "bb-contacts-type-list-container", ngImport: i0, template: "<bb-contact-account-select-type [listOfAccountTypes]=\"createContactList$ | async\" [noOfItemsinList]=\"noOfItemsinList\">\n</bb-contact-account-select-type>\n", components: [{ type: ContactSelectAccountTypeComponent, selector: "bb-contact-account-select-type", inputs: ["listOfAccountTypes", "noOfItemsinList"], outputs: ["selectedAccountType"] }], pipes: { "async": i2$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsTypeListContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-type-list-container',
                    templateUrl: './contacts-type-list-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ContactsService }, { type: ContactManagerPreferencesService }]; } });

/**
 * Displays an item in the  list of all contacts
 *
 * @usageNotes
 *
 * ### Display a single item in the list of types of contact.
 *
 * ```html
 * <bb-contact-list-item
 *     [contactItem]="item"
 *     [showAccountNumber]="true"
 *     [showAlias]="showAlias"
 *  ></bb-contact-list-item>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsListItemComponent {
    constructor(service) {
        this.service = service;
        /**
         * Wether to show contact account number.
         * Default is false.
         */
        this.showAccountNumber = false;
        /**
         * Wether to show contact alias.
         * Default is false.
         */
        this.showAlias = false;
        this.accountTypeKeyRef = AccountTypeModelKey;
        this.createAccountType = AccountCreateType;
    }
    /**
     * OnInit - lifecycle hook.
     */
    ngOnInit() {
        if (this.contactItem === undefined) {
            throw new Error('`item` input is required in `bb-todo-list-item` component');
        }
        else {
            this.selectedAccountType = this.service.checkaccountType(this.contactItem);
        }
    }
}
/** @nocollapse */ ContactsListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListItemComponent, deps: [{ token: ContactsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListItemComponent, selector: "bb-contact-list-item", inputs: { contactItem: "contactItem", showAccountNumber: "showAccountNumber", showAlias: "showAlias" }, ngImport: i0, template: "<div class=\"bb-block bb-block--sm\">\n  <div class=\"bb-block bb-block--xs break-word\">\n    <span class=\"sr-only\">\n      <span i18n=\"name@@bb-contact-list-item.label.name\" data-role=\"name-header\"> Name </span>\n      :&nbsp;\n    </span>\n    <span class=\"bb-text-bold break-word\" data-role=\"list-name\"> {{ contactItem.name }} </span>\n  </div>\n  <div *ngIf=\"showAccountNumber\" class=\"bb-block bb-block--xs break-word\">\n    <ng-container [ngSwitch]=\"selectedAccountType\">\n      <ng-container *ngSwitchCase=\"createAccountType.IBAN\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.iban\" data-role=\"account-header\"> IBAN </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"accountdetails\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.EMAIL\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.email\" data-role=\"email-header\"> Email </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"details\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.PHONE\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.phone.number\" data-role=\"phone-header\">\n            Phone number\n          </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"details\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.ACCOUNT\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.account.number\" data-role=\"account-header\">\n            Account number\n          </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"accountdetails\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n  <div *ngIf=\"showAlias && contactItem.alias\" class=\"bb-block bb-block--xs break-word\">\n    <span class=\"sr-only\" data-role=\"alias-header\" i18n=\"name@@bb-contact-list-item.label.alias\">Alias</span>\n    <span class=\"sr-only\">:&nbsp;</span>\n    <span class=\"bb-text-support break-word\" data-role=\"list-alias\"> {{ contactItem.alias }} </span>\n  </div>\n\n  <ng-template #accountdetails>\n    <span class=\"bb-text-support\" data-role=\"list-account-number\" *ngIf=\"contactItem?.accounts[0] as account\">\n      {{ account[selectedAccountType] | bbIban}}\n    </span>\n  </ng-template>\n  <ng-template #details>\n    <span class=\"bb-text-support\" data-role=\"list-account-number\" *ngIf=\"contactItem?.accounts[0] as account\">\n      {{ account[selectedAccountType]}}\n    </span>\n  </ng-template>\n</div>\n", directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "bbIban": i8$1.BbIbanPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-list-item',
                    templateUrl: './contact-list-item.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: ContactsService }]; }, propDecorators: { contactItem: [{
                type: Input
            }], showAccountNumber: [{
                type: Input
            }], showAlias: [{
                type: Input
            }] } });

/**
 * Displays a list of all contacts
 *
 * @usageNotes
 *
 * ### Display a list of types of contact that can be created
 *
 * ```html
 * <bb-contacts-list-widget
 *       [items]="items.contacts"
 *       [showAlias]="false"
 *     >
 *  </bb-contacts-list-widget>
 * ```
 *
 * ### Additionally update the list
 *
 * ```html
 *  <bb-contacts-list-widget
 *       [items]="items.contacts"
 *       (selectedChange)="hostRef.select($event)"
 *       (formItemChange)="hostRef.edit($event)"
 *       [showAlias]="false"
 *     >
 *   </bb-contacts-list-widget>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsListWidgetComponent {
    constructor() {
        /**
         * Event that is emitted when selected item changes
         */
        this.selectedChange = new EventEmitter();
        this.focused = 0;
        this.contactItemArray = [];
        this.accountTypeSelected = AccountCreateType.IBAN;
        this.gc$ = new Subject();
        this.createAccountTypeRef = AccountCreateType;
    }
    /**
     * AfterViewInit- lifecycle hook.
     */
    ngAfterViewInit() {
        this.contactItem.changes
            .pipe(startWith(this.contactItem))
            .pipe(takeUntil(this.gc$))
            .subscribe((data) => {
            this.contactItemArray = data.toArray();
        });
    }
    /**
     * onDestroy - lifecycle hook.
     */
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    /**
     * getTabIndex defines if item can be reached by Tab,
     * which only the focused item can
     *
     * @param {number} i index of an element
     * @returns {number} [tabindex] parameter value
     */
    getTabIndex(i) {
        return i === this.focused ? '0' : '-1';
    }
    /**
     * Prevents focus from going beyond the limits of the list
     *
     * @param {number} desiredFocus index of an element
     * @returns {number} index of an element within bounds
     */
    clampDesiredFocus(desiredFocus) {
        return Math.max(0, Math.min(desiredFocus, this.items.length - 1));
    }
    /**
     * Implements keyboard controls for the contact list.
     * Call on key down events to move the focus to the appropriate element.
     *
     * @param {Event} event HTMLEvent object
     * @param {number} desiredFocus index of an element
     */
    onChangeFocusItemTo(event, desiredFocus) {
        var _a, _b;
        event.preventDefault();
        const realisticFocus = this.clampDesiredFocus(desiredFocus);
        if (this.focused === realisticFocus)
            return;
        this.focused = realisticFocus;
        (_b = (_a = this.contactItem.find((_, i) => i === this.focused)) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.focus();
    }
    /**
     *
     * @param {string} id - Id of the selcted contact
     * @param {number} index - index of the selected contact
     */
    onContactSelect(id, index) {
        this.focused = index;
        this.accountTypeSelected = '';
        this.selectedChange.emit(id);
    }
    /**
     * isListHeading defines if grouping heading
     * should be added before list item
     *
     * @param {ContactItem} item ContactItem object
     * @param {number} index index of an element
     * @returns {boolean} whether item a list heading
     */
    isListHeading(item, index) {
        const char = this.getGroupHeadingChar(item.name.trim());
        if (this.latestSeparator !== char || !index) {
            this.latestSeparator = char;
            return true;
        }
        return false;
    }
    /**
     * hasNoSeparatorClass tells if the list item
     * should have bb-grouped-list__item--no-separator class.
     *
     * @param {number} index index of an element
     * @returns {boolean} whether element should have separator class
     */
    hasNoSeparatorClass(index) {
        const nextItem = this.items[index + 1];
        if (!nextItem) {
            return false;
        }
        else {
            const nextChar = this.getGroupHeadingChar(nextItem.name.trim());
            if (this.latestSeparator !== nextChar) {
                return true;
            }
        }
        return false;
    }
    getGroupHeadingChar(name) {
        return String.fromCodePoint(name.codePointAt(0)).toUpperCase();
    }
}
/** @nocollapse */ ContactsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListWidgetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListWidgetComponent, selector: "bb-contacts-list-widget", inputs: { items: "items", selectedItemId: "selectedItemId", showAlias: "showAlias" }, outputs: { selectedChange: "selectedChange" }, viewQueries: [{ propertyName: "contactItem", predicate: ["contactItem"], descendants: true }], ngImport: i0, template: "<div *ngIf=\"items && items.length\">\n  <ul class=\"bb-grouped-list\" data-role=\"existing-contact\" role=\"list\">\n    <ng-container *ngFor=\"let item of items; let i = index\">\n      <li\n        *ngIf=\"isListHeading(item, i)\"\n        class=\"bb-grouped-list__group bb-text-support bb-text-bold\"\n        data-role=\"header-row\"\n      >\n        {{ latestSeparator }}\n      </li>\n      <li\n        class=\"bb-grouped-list__item\"\n        role=\"button\"\n        data-role=\"contact-manager-list-item\"\n        [tabindex]=\"getTabIndex(i)\"\n        [attr.aria-pressed]=\"selectedItemId === item.id\"\n        [ngClass]=\"{\n          'bb-grouped-list__item--is-active': selectedItemId === item.id,\n          'bb-grouped-list__item--no-separator': hasNoSeparatorClass(i)\n        }\"\n        (keydown.Home)=\"onChangeFocusItemTo($event, 0)\"\n        (keydown.ArrowUp)=\"onChangeFocusItemTo($event, i-1)\"\n        (keydown.ArrowDown)=\"onChangeFocusItemTo($event, i+1)\"\n        (keydown.End)=\"onChangeFocusItemTo($event, items.length)\"\n        (click)=\"onContactSelect(item.id, i)\"\n        (keyup.Space)=\"onContactSelect(item.id, i)\"\n        (keyup.Enter)=\"onContactSelect(item.id, i)\"\n        #contactItem\n      >\n        <bb-contact-list-item\n          [contactItem]=\"item\"\n          [showAccountNumber]=\"true\"\n          [showAlias]=\"showAlias\"\n        ></bb-contact-list-item>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n", components: [{ type: ContactsListItemComponent, selector: "bb-contact-list-item", inputs: ["contactItem", "showAccountNumber", "showAlias"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-list-widget',
                    templateUrl: './contact-list.component.html',
                }]
        }], propDecorators: { items: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], selectedItemId: [{
                type: Input
            }], contactItem: [{
                type: ViewChildren,
                args: ['contactItem']
            }], showAlias: [{
                type: Input
            }] } });

/**
 * This is an extension slot to be used for customizing contact manager widget..
 *
 * @usageNotes
 *
 * ### Display a single contact detail
 *
 * ```html
 *  <ng-template bbContactsListContainerCustomizable let-hostRef let-items="context">
 *   <div
 *     class="col"
 *     [ngClass]="{
 *       'd-block': hostRef.isListView | async,
 *       'd-lg-block d-none': !(hostRef.isListView | async)
 *     }"
 *   >
 *     <bb-contacts-list-widget
 *       [items]="items.contacts"
 *       (selectedChange)="hostRef.select($event)"
 *       (formItemChange)="hostRef.edit($event)"
 *       [showAlias]="false"
 *     >
 *     </bb-contacts-list-widget>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsListContainerCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsListContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsListContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListContainerCustomizableDirective, selector: "[bbContactsListContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsListContainerCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing contact manager header section
 *
 * @usageNotes
 *
 * ### Display a header section with search box
 *
 * ```html
 *  <ng-template bbContactsTopSectionCustomizable let-hostRef let-item="context">
 *   <div class="col bb-stack">
 *     <div class="bb-stack__item bb-stack__item--fill">
 *       <bb-search-box-ui
 *         class="bb-toolbar__item"
 *         data-role="search-contact-textbox"
 *         placeholder="Search"
 *         i18n-placeholder="Search box placeholder | Placeholder for search box@@contact-manager.placeholder.search"
 *         [showSearch]="true"
 *         [showClear]="true"
 *         (submit)="hostRef.searchBoxItemSelected()"
 *         (clear)="hostRef.searchBoxItemSelected(true)"
 *         [formControl]="hostRef.searchTerm"
 *         (keyUp.enter)="hostRef.searchBoxItemSelected()"
 *       ></bb-search-box-ui>
 *     </div>
 *     <div class="bb-stack__item">
 *       <button
 *         bbButton
 *         i18n="New Contact Button | Button for creating a new contact@@contact-manager.button.newContact"
 *         data-role="new-contact-button"
 *         class="d-none d-lg-block bb-button-bar__button"
 *         [disabled]="!(hostRef.newContactAllowed | async)"
 *         (click)="hostRef.newContact(item.contacts.length)"
 *         type="button"
 *       >
 *         New Contact
 *       </button>
 *       <button
 *         bbButton
 *         i18n="New Contact Button | Button for creating a new contact@@contact-manager.button.newContact"
 *         data-role="new-contact-button"
 *         class="d-block d-lg-none bb-button-bar__button"
 *         [disabled]="!hostRef.newContactAllowed"
 *         (click)="hostRef.newContact(item.contacts.length)"
 *         type="button"
 *       >
 *         New Contact
 *       </button>
 *     </div>
 *   </div>
 *   <ng-template #rt let-result="result" let-term="term">
 *     <div class="text-truncate" [title]="result">
 *       <ngb-highlight [result]="result" [term]="term"></ngb-highlight>
 *     </div>
 *   </ng-template>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsTopSectionCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsTopSectionCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsTopSectionCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsTopSectionCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsTopSectionCustomizableDirective, selector: "[bbContactsTopSectionCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsTopSectionCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsTopSectionCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing contact manager pagination
 *
 * @usageNotes
 *
 * ### Display the pagination
 *
 * ```html
 *   <ng-template bbContactsLoadMoreCustomizable let-hostRef let-items="context">
 *   <bb-pagination-ui
 *     *ngIf="(hostRef.paginationType | async) !== 'load-more'"
 *     class="bb-pagination"
 *     [page]="(hostRef.pagination | async)?.from"
 *     [boundaryLinks]="false"
 *     [directionLinks]="true"
 *     [totalItems]="items?.count"
 *     [itemsPerPage]="hostRef.pageSize | async"
 *     [maxNavPages]="hostRef.maxNavPages | async"
 *     (pageChange)="hostRef.onPageChange($event)"
 *   ></bb-pagination-ui>
 *   <div class="p-5 text-center" *ngIf="(hostRef.paginationType | async) === 'load-more'">
 *     <button
 *       class="border text-dark btn btn-secondary"
 *       (click)="hostRef.loadMore()"
 *       [disabled]="items.count && items.count <= items.contacts.length"
 *     >
 *       <ng-container
 *          i18n="Load more button label | Load more button shown down bellow contact list@@contact-manager.load-more.label">
 *         Load more
 *       </ng-container>
 *     </button>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsLoadMoreCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsLoadMoreCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsLoadMoreCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsLoadMoreCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsLoadMoreCustomizableDirective, selector: "[bbContactsLoadMoreCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsLoadMoreCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsLoadMoreCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing contact manager widget loading view
 *
 * @usageNotes
 *
 * ### Display loading icon
 *
 * ```html
 *    <ng-template bbContactsLoadingCustomizable let-hostRef>
 *   <div class="bb-state-container">
 *     <bb-loading-indicator-ui
 *       i18n-text="@@contact-manager.loading.label"
 *       text="Loading contacts..."
 *     ></bb-loading-indicator-ui>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsLoadingCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsLoadingCustomizableDirective, selector: "[bbContactsLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsLoadingCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing contact manager widget empty view
 *
 * @usageNotes
 *
 * ### Display empty message
 *
 * ```html
 *  <ng-template bbContactsEmptyStateCustomizable let-hostRef>
 *   <div class="bb-state-container">
 *     <bb-empty-state-ui
 *       i18n-title="@@contact-manager.state.noContactsLoaded.title"
 *       title="No contacts"
 *       i18n-subtitle="@@contact-manager.state.noContactsLoaded.subtitle"
 *       subtitle="You don't have any contacts to display yet.<br>Try adding a new contact using the 'New Contact' button"
 *       iconClasses="d-flex justify-content-center mb-3"
 *       iconModifier="contacts"
 *       iconColor="primary"
 *       iconSize="xxl"
 *     ></bb-empty-state-ui>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsEmptyStateCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsEmptyStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEmptyStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsEmptyStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEmptyStateCustomizableDirective, selector: "[bbContactsEmptyStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEmptyStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsEmptyStateCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing contact manager Empty view on search
 *
 * @usageNotes
 *
 * ### Display no search result found message.
 *
 * ```html
 *  <ng-template bbContactsEmptySearchStateCustomizable let-hostRef let-term="context">
 *   <div class="bb-state-container">
 *     <bb-empty-state-ui
 *       i18n-title="@@contact-manager.state.empty-search.title"
 *       title="No results found"
 *       i18n-subtitle="@@contact-manager.state.empty-search.subtitle"
 *       subtitle="We can't find what you're looking for. Please try a different criteria."
 *       iconClasses="d-flex justify-content-center mb-3"
 *       iconModifier="search"
 *       iconColor="primary"
 *       iconSize="xxl"
 *     ></bb-empty-state-ui>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsEmptySearchStateCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsEmptySearchStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEmptySearchStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsEmptySearchStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsEmptySearchStateCustomizableDirective, selector: "[bbContactsEmptySearchStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsEmptySearchStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsEmptySearchStateCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing contact Error state
 *
 * @usageNotes
 *
 * ### Display error view
 *
 * ```html
 *  <ng-template bbContactsErrorStateCustomizable let-hostRef let-error="context">
 *   <div class="bb-state-container">
 *     <bb-common-error-state-ui [error]="error"></bb-common-error-state-ui>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsErrorStateCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsErrorStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsErrorStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsErrorStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsErrorStateCustomizableDirective, selector: "[bbContactsErrorStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsErrorStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsErrorStateCustomizable]',
                }]
        }] });

/**
 * The following extension slots are available in this component:
 *  - `ContactsListContainerCustomizableDirective`
 *  - `ContactsTopSectionCustomizableDirective`
 *  - `ContactsLoadMoreCustomizableDirective`
 *  - `ContactsLoadingCustomizableDirective`
 *  - `ContactsEmptyStateCustomizableDirective`
 *  - `ContactsEmptySearchStateCustomizableDirective`
 *  - `ContactsErrorStateCustomizableDirective`
 *
 * @see ContactsListContainerCustomizableDirective
 * @see ContactsTopSectionCustomizableDirective
 * @see ContactsLoadMoreCustomizableDirective
 * @see ContactsLoadingCustomizableDirective
 * @see ContactsEmptyStateCustomizableDirective
 * @see ContactsEmptySearchStateCustomizableDirective
 * @see ContactsErrorStateCustomizableDirective
 * Container component for showing contact list.
 * @usageNotes
 *
 * ### Display list of all the contacts with details / edit form.
 *
 * ```html
 * <bb-contacts-list-container>
 *  <router-outlet></router-outlet>
 * </bb-contacts-list-container>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
class ContactsListContainerComponent {
    constructor(service, navigation, router, route, propertiesService) {
        this.service = service;
        this.navigation = navigation;
        this.router = router;
        this.route = route;
        this.propertiesService = propertiesService;
        this.firstContactEdit = false;
        this.isSearchBoxVisible = true;
        this.searchTerm = new FormControl();
        this.containerlistParams = new BehaviorSubject('');
        this.debounceSearch$ = new Subject();
        this.hostRef = this;
        this.newContactAllowed = this.propertiesService.newContact$;
        this.pageSize = this.propertiesService.pageSize$;
        this.maxNavPages = this.propertiesService.maxNavPages$;
        this.paginationType = this.propertiesService.paginationType$;
        this.isListView = this.router.events.pipe(filter((e) => e instanceof NavigationEnd), map((e) => e.url), startWith(this.router.url), map(() => {
            const isList = this.navigation.currentView === View.List;
            if (isList) {
                this.firstContactEdit = false;
            }
            return isList;
        }), shareReplay());
        this.pagination = combineLatest([this.route.queryParamMap, this.pageSize]).pipe(map(([params, pageSize]) => this.pageParamsFromRoute(params, pageSize)));
        this.items = this.service.items.pipe(tap((results) => {
            this.isSearchBoxVisible = !!this.searchTerm.value ? true : results.contacts.length > 0;
            results.contacts.sort((a, b) => a.name.toLocaleUpperCase().trim() > b.name.toLocaleUpperCase().trim() ? 1 : -1);
        }), catchError((error) => {
            this.error = error;
            return of(undefined);
        }));
        /**
         * Observable of currently selected item id
         */
        this.selectedItemId = this.service.currentlySelectedItemId;
        this.listParams = combineLatest([
            this.containerlistParams,
            this.pagination,
            this.pageSize,
            this.paginationType,
        ]).pipe(map(([method, paginationParams, pageSize, paginationType]) => {
            if (method === LoadMoreMethod.LOAD_MORE && paginationType === LoadMoreMethod.LOAD_MORE) {
                paginationParams.from++;
                paginationParams.size = pageSize;
            }
            return {
                paginationParams,
                paginationType,
                method,
            };
        }), map(({ paginationParams, paginationType, method }) => ({
            pagination: {
                from: paginationParams.from,
                size: paginationParams.size,
                query: paginationParams.query,
            },
            paginationType,
            method,
        })));
    }
    ngOnInit() {
        this.subscription = this.listParams.subscribe((params) => {
            return this.service.updateItemList(params.pagination.query, params.pagination.from, params.pagination.size, params.paginationType, params.method);
        });
        this.subscription.add(this.debounceSearch$
            .pipe(debounceTime(300), distinctUntilChanged())
            .subscribe((term) => this.searchContacts(term)));
    }
    /**
     * Event handler for search box value change
     *
     * @param {string} phrase text to search for
     */
    onSearchTermChange(phrase) {
        this.debounceSearch$.next(phrase);
    }
    /**
     * Event handler for search box clear
     */
    clearSearch() {
        this.debounceSearch$.next('');
    }
    /**
     * Queries contacts with given phrase
     *
     * @param {string} phrase text to search for
     */
    searchContacts(phrase) {
        this.containerlistParams.next('search');
        this.navigation.list(0, phrase); // TODO: Remove query params when migrating widget
    }
    /**
     * Navigates to list page.
     *
     * @param {number} page Current page number.
     */
    onPageChange(page) {
        this.navigation.list(page);
    }
    /**
     * Updat the list parameter as load more.
     */
    loadMore() {
        this.containerlistParams.next('load-more');
    }
    /**
     * Routes to selected contact details.
     *
     * @param {string} id  Contact ID
     */
    select(id) {
        this.navigation.select(id);
    }
    /**
     * Routes to new contact.
     *
     * @param {number} totalContacts - total number of contacts.
     */
    newContact(totalContacts) {
        this.firstContactEdit = !totalContacts;
        this.navigation.newContact();
        this.navigation.currentView = View.Select;
    }
    /**
     * method to return back to list view.
     */
    backToList() {
        this.navigation.currentView = View.List;
        this.navigation.list();
    }
    pageParamsFromRoute(query, pageSize) {
        const from = query.get('page');
        this.searchTerm.setValue(query.get('query') || '');
        return {
            from: (from && Number.parseInt(from, 10)) || 0,
            size: pageSize ? Number(pageSize) : 5,
            query: this.searchTerm.value || '',
        };
    }
    ngOnDestroy() {
        var _a;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
/** @nocollapse */ ContactsListContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListContainerComponent, deps: [{ token: ContactsService }, { token: ContactsNavigationService }, { token: i2$2.Router }, { token: i2$2.ActivatedRoute }, { token: ContactManagerPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsListContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListContainerComponent, selector: "bb-contacts-list-container", ngImport: i0, template: "<div class=\"card card-body\" data-role=\"loading-label\">\n  <ng-container *ngIf=\"items | async as items; else loadingTemplate\">\n    <div\n      class=\"bb-block bb-block--md\"\n      [ngClass]=\"{\n        'd-none d-lg-block': !(isListView | async)\n      }\"\n    >\n      <div class=\"row\">\n        <ng-container bbContactsTopSectionCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"items\"></ng-container>\n      </div>\n    </div>\n    <div *ngIf=\"!(isListView | async)\" class=\"row d-block d-lg-none\">\n      <button bbButton color=\"unstyled\" (click)=\"backToList()\" class=\"bb-text-bold text-primary\">\n        <bb-icon-ui name=\"angle-left\"></bb-icon-ui>\n        <span i18n=\"Back to list view|Span for going back to list view@@contact-manager.span.backToList\">\n          Back to list\n        </span>\n      </button>\n    </div>\n    <div\n      class=\"row bb-block bb-block--md\"\n      *ngIf=\"(items && items.contacts.length > 0) || hostRef.firstContactEdit; else emptyTemplate\"\n    >\n      <ng-container\n        bbContactsListContainerCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"items\"\n      ></ng-container>\n      <div\n        class=\"col col-lg-6\"\n        [ngClass]=\"{\n          'd-none d-lg-block': isListView | async\n        }\"\n      >\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <div\n      class=\"row\"\n      [ngClass]=\"{\n        'd-none d-lg-block': !(isListView | async)\n      }\"\n    >\n      <div class=\"col-lg-6\">\n        <ng-container bbContactsLoadMoreCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"items\"></ng-container>\n        <ng-template bbContactsLoadMoreCustomizable let-hostRef let-items=\"context\">\n          <bb-pagination-ui\n            *ngIf=\"(hostRef.paginationType | async) !== 'load-more'\"\n            class=\"bb-pagination\"\n            [page]=\"(hostRef.pagination | async)?.from\"\n            [boundaryLinks]=\"false\"\n            [directionLinks]=\"true\"\n            [totalItems]=\"items?.count\"\n            [itemsPerPage]=\"hostRef.pageSize | async\"\n            [maxNavPages]=\"hostRef.maxNavPages | async\"\n            (pageChange)=\"hostRef.onPageChange($event)\"\n          ></bb-pagination-ui>\n          <div\n            class=\"p-5 text-center\"\n            *ngIf=\"(hostRef.paginationType | async) === 'load-more' && items.contacts.length > 0\"\n          >\n            <bb-load-button-ui\n              class=\"bb-block bb-block--md\"\n              color=\"secondary\"\n              data-role=\"contact-load-more\"\n              *ngIf=\"items.count && items.count > items.contacts.length\"\n              (click)=\"hostRef.loadMore()\"\n            >\n              <ng-container\n                i18n=\"Load more button label | Load more button shown down bellow contact list@@contact-manager.load-more.label\"\n              >\n                Load more\n              </ng-container>\n            </bb-load-button-ui>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template bbContactsListContainerCustomizable let-hostRef let-items=\"context\">\n    <div\n      class=\"col\"\n      [ngClass]=\"{\n        'd-block': hostRef.isListView | async,\n        'd-lg-block d-none': !(hostRef.isListView | async)\n      }\"\n    >\n      <bb-contacts-list-widget\n        [items]=\"items.contacts\"\n        [selectedItemId]=\"hostRef.selectedItemId | async\"\n        [showAlias]=\"false\"\n        (selectedChange)=\"hostRef.select($event)\"\n      >\n      </bb-contacts-list-widget>\n    </div>\n  </ng-template>\n\n  <ng-template bbContactsTopSectionCustomizable let-hostRef let-items=\"context\">\n    <div class=\"col bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <bb-search-box-ui\n          *ngIf=\"hostRef.isSearchBoxVisible\"\n          class=\"bb-toolbar__item\"\n          data-role=\"contact-manager-search\"\n          placeholder=\"Search\"\n          i18n-placeholder=\"Search box placeholder | Placeholder for search box@@contact-manager.placeholder.search\"\n          aria-label=\"Search\"\n          i18n-aria-label=\"@@contact-manager.placeholder.search\"\n          [showSearch]=\"true\"\n          [showClear]=\"true\"\n          [formControl]=\"hostRef.searchTerm\"\n          (valueChange)=\"hostRef.onSearchTermChange($event)\"\n          (submit)=\"hostRef.searchContacts(hostRef.searchTerm.value)\"\n          (keyup.enter)=\"hostRef.searchContacts(hostRef.searchTerm.value)\"\n          (clear)=\"hostRef.clearSearch()\"\n        ></bb-search-box-ui>\n        <div class=\"sr-only\" aria-live=\"assertive\">\n          <p i18n=\"@@contact-manager.list.results-found\">\n            {items.count || 0, plural, =1 {1 result found} other {{{items.count}} results found}}\n          </p>\n        </div>\n      </div>\n      <div class=\"bb-stack__item align-self-start\">\n        <button\n          bbButton\n          i18n=\"New Contact Button | Button for creating a new contact@@contact-manager.button.newContact\"\n          data-role=\"new-contact-button\"\n          class=\"d-block bb-button-bar__button\"\n          [disabled]=\"!(hostRef.newContactAllowed | async)\"\n          (click)=\"hostRef.newContact(items.contacts.length)\"\n          type=\"button\"\n        >\n          New Contact\n        </button>\n      </div>\n    </div>\n    <ng-template #rt let-result=\"result\" let-term=\"term\">\n      <div class=\"text-truncate\" [title]=\"result\">\n        <ngb-highlight [result]=\"result\" [term]=\"term\"></ngb-highlight>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <ng-template bbContactsLoadingCustomizable let-hostRef>\n    <div class=\"bb-state-container\">\n      <bb-loading-indicator-ui\n        i18n-text=\"@@contact-manager.loading.label\"\n        text=\"Loading contacts...\"\n        data-role=\"contact-manager-loading\"\n      ></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #loadingTemplate>\n    <ng-container *ngIf=\"!error; else errorTemplate\" bbContactsLoadingCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsEmptyStateCustomizable let-hostRef>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"@@contact-manager.state.noContactsLoaded.title\"\n        title=\"No contacts\"\n        i18n-subtitle=\"@@contact-manager.state.noContactsLoaded.subtitle\"\n        subtitle=\"You don't have any contacts to display yet.<br>Try adding a new contact using the 'New Contact' button\"\n        iconClasses=\"d-flex justify-content-center mb-3\"\n        iconModifier=\"contacts\"\n        iconSize=\"xxl\"\n        data-role=\"contact-manager-empty\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <ng-container\n      *ngIf=\"!hostRef.searchTerm.value; else emptySearchTemplate\"\n      bbContactsEmptyStateCustomizable\n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsEmptySearchStateCustomizable let-hostRef let-term=\"context\">\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"@@contact-manager.state.empty-search.title\"\n        title=\"No results found\"\n        i18n-subtitle=\"@@contact-manager.state.empty-search.subtitle\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        iconClasses=\"d-flex justify-content-center mb-3\"\n        iconModifier=\"search\"\n        iconColor=\"primary\"\n        iconSize=\"xxl\"\n        data-role=\"contact-manager-list-search-empty\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptySearchTemplate>\n    <ng-container\n      bbContactsEmptySearchStateCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"searchTerm\"\n    ></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsErrorStateCustomizable let-hostRef let-error=\"context\">\n    <div class=\"bb-state-container\">\n      <bb-common-error-state-ui [attr.data-role]=\"'contact-manager-error'\" [error]=\"error\"></bb-common-error-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <ng-container bbContactsErrorStateCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"error\"></ng-container>\n  </ng-template>\n</div>\n", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6$2.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i7$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: ContactsListWidgetComponent, selector: "bb-contacts-list-widget", inputs: ["items", "selectedItemId", "showAlias"], outputs: ["selectedChange"] }, { type: i9.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i10.NgbHighlight, selector: "ngb-highlight", inputs: ["highlightClass", "accentSensitive", "result", "term"] }, { type: i7.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i12.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i13.ErrorCommonStateComponent, selector: "bb-common-error-state-ui", inputs: ["error"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: ContactsTopSectionCustomizableDirective, selector: "[bbContactsTopSectionCustomizable]" }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: ContactsListContainerCustomizableDirective, selector: "[bbContactsListContainerCustomizable]" }, { type: ContactsLoadMoreCustomizableDirective, selector: "[bbContactsLoadMoreCustomizable]" }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: ContactsLoadingCustomizableDirective, selector: "[bbContactsLoadingCustomizable]" }, { type: ContactsEmptyStateCustomizableDirective, selector: "[bbContactsEmptyStateCustomizable]" }, { type: ContactsEmptySearchStateCustomizableDirective, selector: "[bbContactsEmptySearchStateCustomizable]" }, { type: ContactsErrorStateCustomizableDirective, selector: "[bbContactsErrorStateCustomizable]" }], pipes: { "async": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-list-container',
                    templateUrl: 'contacts-list-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: ContactsService }, { type: ContactsNavigationService }, { type: i2$2.Router }, { type: i2$2.ActivatedRoute }, { type: ContactManagerPreferencesService }]; } });

/**
 * Returns the new instance of contactnavigationservice.
 *
 * @param {RouterService} service router service
 * @returns {ContactsNavigationService} new service instance
 */
function makeNavigationService(service) {
    return new ContactsNavigationService(service);
}
const contactsRoutes = [
    {
        path: '',
        component: ContactsDetailContainerComponent,
    },
    {
        path: 'select',
        component: ContactsTypeListContainerComponent,
    },
    {
        path: ':id',
        component: ContactsDetailContainerComponent,
    },
    {
        path: 'edit/:id/:type',
        canDeactivate: [CanDeactivateGuard],
        component: ContactsFormContainerComponent,
    },
];
let ContactManagerWidgetComponent = class ContactManagerWidgetComponent {
    constructor(preferencesService) {
        this.preferencesService = preferencesService;
    }
    /**
     * property to enable the creation of new contacts
     */
    set newContact(value) {
        this.preferencesService.setNewContact(value);
    }
    /**
     * Number of contacts per page
     */
    set pageSize(value) {
        this.preferencesService.setPageSize(value);
    }
    /**
     * Max. number of navigation pages
     */
    set maxNavPages(value) {
        this.preferencesService.setMaxNavPages(value);
    }
    /**
     * Pagination type (pagination, load-more)
     */
    set paginationType(value) {
        this.preferencesService.setPaginationType(value);
    }
    /**
     * Milliseconds to dismiss any notification message
     */
    set notificationDismissTime(value) {
        this.preferencesService.setNotificationDismissTime(value);
    }
    /**
     * property from user if the contact creation through email is allowed
     */
    set createContactEmail(value) {
        this.preferencesService.setCreateContactEmail(value);
    }
    /**
     * property from user if the contact creation through IBAN is allowed
     */
    set createContactIBAN(value) {
        this.preferencesService.setCreateContactIBAN(value);
    }
    /**
     * property from user if the contact creation through Account Number is allowed
     */
    set createContactAccount(value) {
        this.preferencesService.setCreateContactAccount(value);
    }
    /**
     * property from user if the contact creation through Phone Number is allowed
     */
    set createContactPhone(value) {
        this.preferencesService.setCreateContactPhone(value);
    }
};
/** @nocollapse */ ContactManagerWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerWidgetComponent, deps: [{ token: ContactManagerPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactManagerWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerWidgetComponent, selector: "bb-contacts, bb-contact-manager-widget", inputs: { newContact: "newContact", pageSize: "pageSize", maxNavPages: "maxNavPages", paginationType: "paginationType", notificationDismissTime: "notificationDismissTime", createContactEmail: "createContactEmail", createContactIBAN: "createContactIBAN", createContactAccount: "createContactAccount", createContactPhone: "createContactPhone" }, providers: [
        RouterService,
        {
            provide: ContactsNavigationService,
            useFactory: makeNavigationService,
            deps: [RouterService],
        },
        ContactsService,
        ContactManagerPreferencesService,
    ], ngImport: i0, template: `
    <bb-contacts-list-container>
      <bb-router-outlet></bb-router-outlet>
    </bb-contacts-list-container>
  `, isInline: true, components: [{ type: ContactsListContainerComponent, selector: "bb-contacts-list-container" }], directives: [{ type: i1.RouterOutletDirective, selector: "bb-router-outlet", outputs: ["activate", "deactivate"], exportAs: ["bbOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
ContactManagerWidgetComponent = __decorate([
    RoutableWidget({
        routes: contactsRoutes,
    })
    /**
     * A widget for managing contacts.
     *
     * @usageNotes
     *
     * ### Include this widget in your `AppModule`:
     *
     * ```typescript
     * @NgModule({
     *   imports: [
     *     ContactManagerWidgetModule,
     *   ],
     *  providers:[{
     *     provide: ContactsNavigationService,
     *     useFactory: makeNavigationService,
     *     deps: [RouterService],
     *   }],
     *   ...
     * })
     * export class AppModule {}
     * ```
     *
     * ### Include this widget (standalone model)
     *
     * ```typescript
     * export const environment: Environment = {
     *   ...
     *   bootstrap: {
     *     pageModel: {
     *       name: 'root',
     *       properties: {},
     *       children: [
     *         {
     *           name: 'bb-contact-manager-ang',
     *           properties: {
     *             classId: 'ContactManagerWidgetModule',
     *             "notificationDismissTime": 0,
     *             "createContactIBAN": true,
     *             "createContactPhone": true,
     *             "createContactAccount": true,
     *             "createContactEmail": true
     *           },
     *         },
     *       ],
     *     },
     *   },
     * };
     * ```
     *
     * ### Routable Widget
     *
     * Using the `@CopyRoutes` for component
     *
     * ```typescript
     * @CopyRoutes(ContactManagerWidgetComponent)
     * export class ExtendedContactManagerWidgetComponent
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    ,
    __metadata("design:paramtypes", [ContactManagerPreferencesService])
], ContactManagerWidgetComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts, bb-contact-manager-widget',
                    template: `
    <bb-contacts-list-container>
      <bb-router-outlet></bb-router-outlet>
    </bb-contacts-list-container>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        RouterService,
                        {
                            provide: ContactsNavigationService,
                            useFactory: makeNavigationService,
                            deps: [RouterService],
                        },
                        ContactsService,
                        ContactManagerPreferencesService,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: ContactManagerPreferencesService }]; }, propDecorators: { newContact: [{
                type: Input,
                args: ['newContact']
            }], pageSize: [{
                type: Input,
                args: ['pageSize']
            }], maxNavPages: [{
                type: Input,
                args: ['maxNavPages']
            }], paginationType: [{
                type: Input,
                args: ['paginationType']
            }], notificationDismissTime: [{
                type: Input,
                args: ['notificationDismissTime']
            }], createContactEmail: [{
                type: Input,
                args: ['createContactEmail']
            }], createContactIBAN: [{
                type: Input,
                args: ['createContactIBAN']
            }], createContactAccount: [{
                type: Input,
                args: ['createContactAccount']
            }], createContactPhone: [{
                type: Input,
                args: ['createContactPhone']
            }] } });

const uiModules = [
    ButtonModule,
    IconModule,
    NotificationModule,
    FormsModule,
    InputTextModule,
    InputValidationMessageModule,
    HeaderModule,
    EmptyStateModule,
    AvatarModule,
    PaginatorModule,
    DropdownMenuModule,
    EllipsisModule,
    LoadingIndicatorModule,
    ErrorCommonStateModule,
    NgbDropdownModule,
    NgbTypeaheadModule,
    ReactiveFormsModule,
    BbIbanPipeModule,
    SearchBoxModule,
    InputEmailModule,
    LoadButtonModule,
];
const dependentModules = [IbanValidatorModule, NoWhiteSpaceModule, ConfirmActionDialogModule, EmailDomainModule];
const components = [
    ContactManagerWidgetComponent,
    ContactsListWidgetComponent,
    ContactsListItemComponent,
    ContactsListContainerComponent,
    ContactsDetailComponent,
    ContactsDetailContainerComponent,
    ContactsFormComponent,
    ContactsFormContainerComponent,
    ContactSelectAccountTypeComponent,
    ContactsTypeListContainerComponent,
];
const customizationDirectives = [
    ContactsListContainerCustomizableDirective,
    ContactsTopSectionCustomizableDirective,
    ContactsDetailCustomizableDirective,
    ContactsFormCustomizableDirective,
    ContactsLoadMoreCustomizableDirective,
    ContactsLoadingCustomizableDirective,
    ContactsEmptyStateCustomizableDirective,
    ContactsEmptySearchStateCustomizableDirective,
    ContactsErrorStateCustomizableDirective,
    ContactsCreateErrorNotificationCustomizableDirective,
    ContactsCreateSuccessNotificationCustomizableDirective,
    ContactsDeleteConfirmationCustomizableDirective,
    ContactsDeleteErrorNotificationCustomizableDirective,
    ContactsDeleteSuccessNotificationCustomizableDirective,
    ContactsEditDiscardConfirmationCustomizableDirective,
    ContactsEditErrorNotificationCustomizableDirective,
    ContactsEditSuccessNotificationCustomizableDirective,
];
/**
 * Exports the Widgets and UI components for managing contacts.
 *
 * The following widgets are included in this module:
 *  - `ContactManagerWidgetComponent`
 *
 * @see ContactManagerWidgetComponent
 * @usageNotes
 *
 * ### Include the exported widgets in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ContactManagerWidgetModule,
 *   ],
 *  providers:[{
 *   provide: CONTACT_MANAGER_BASE_PATH,
 *   useFactory: getBasePath('contact-manager'),
 *   deps: [PAGE_CONFIG], },
 * {
 *   provide: ACCESS_CONTROL_BASE_PATH,
 *   useFactory: getBasePath('access-control'),
 *   deps: [PAGE_CONFIG], }]
 *   ...
 * })
 * export class AppModule {}
 * ```
 */
class ContactManagerWidgetModule {
}
/** @nocollapse */ ContactManagerWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ContactManagerWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerWidgetModule, declarations: [ContactManagerWidgetComponent,
        ContactsListWidgetComponent,
        ContactsListItemComponent,
        ContactsListContainerComponent,
        ContactsDetailComponent,
        ContactsDetailContainerComponent,
        ContactsFormComponent,
        ContactsFormContainerComponent,
        ContactSelectAccountTypeComponent,
        ContactsTypeListContainerComponent, ContactsListContainerCustomizableDirective,
        ContactsTopSectionCustomizableDirective,
        ContactsDetailCustomizableDirective,
        ContactsFormCustomizableDirective,
        ContactsLoadMoreCustomizableDirective,
        ContactsLoadingCustomizableDirective,
        ContactsEmptyStateCustomizableDirective,
        ContactsEmptySearchStateCustomizableDirective,
        ContactsErrorStateCustomizableDirective,
        ContactsCreateErrorNotificationCustomizableDirective,
        ContactsCreateSuccessNotificationCustomizableDirective,
        ContactsDeleteConfirmationCustomizableDirective,
        ContactsDeleteErrorNotificationCustomizableDirective,
        ContactsDeleteSuccessNotificationCustomizableDirective,
        ContactsEditDiscardConfirmationCustomizableDirective,
        ContactsEditErrorNotificationCustomizableDirective,
        ContactsEditSuccessNotificationCustomizableDirective], imports: [CommonModule,
        RouterModule, IbanValidatorModule, NoWhiteSpaceModule, ConfirmActionDialogModule, EmailDomainModule, ButtonModule,
        IconModule,
        NotificationModule,
        FormsModule,
        InputTextModule,
        InputValidationMessageModule,
        HeaderModule,
        EmptyStateModule,
        AvatarModule,
        PaginatorModule,
        DropdownMenuModule,
        EllipsisModule,
        LoadingIndicatorModule,
        ErrorCommonStateModule,
        NgbDropdownModule,
        NgbTypeaheadModule,
        ReactiveFormsModule,
        BbIbanPipeModule,
        SearchBoxModule,
        InputEmailModule,
        LoadButtonModule, i1.BackbaseCoreModule], exports: [ContactManagerWidgetComponent,
        ContactsListWidgetComponent,
        ContactsListItemComponent,
        ContactsListContainerComponent,
        ContactsDetailComponent,
        ContactsDetailContainerComponent,
        ContactsFormComponent,
        ContactsFormContainerComponent,
        ContactSelectAccountTypeComponent,
        ContactsTypeListContainerComponent, ContactsListContainerCustomizableDirective,
        ContactsTopSectionCustomizableDirective,
        ContactsDetailCustomizableDirective,
        ContactsFormCustomizableDirective,
        ContactsLoadMoreCustomizableDirective,
        ContactsLoadingCustomizableDirective,
        ContactsEmptyStateCustomizableDirective,
        ContactsEmptySearchStateCustomizableDirective,
        ContactsErrorStateCustomizableDirective,
        ContactsCreateErrorNotificationCustomizableDirective,
        ContactsCreateSuccessNotificationCustomizableDirective,
        ContactsDeleteConfirmationCustomizableDirective,
        ContactsDeleteErrorNotificationCustomizableDirective,
        ContactsDeleteSuccessNotificationCustomizableDirective,
        ContactsEditDiscardConfirmationCustomizableDirective,
        ContactsEditErrorNotificationCustomizableDirective,
        ContactsEditSuccessNotificationCustomizableDirective, IbanValidatorModule, NoWhiteSpaceModule, ConfirmActionDialogModule, EmailDomainModule] });
/** @nocollapse */ ContactManagerWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerWidgetModule, providers: [CanDeactivateGuard, ContactsService, ...ContactConfigProviders], imports: [[
            CommonModule,
            RouterModule,
            ...dependentModules,
            ...uiModules,
            BackbaseCoreModule.withConfig({
                classMap: { ContactManagerWidgetComponent },
            }),
        ], IbanValidatorModule, NoWhiteSpaceModule, ConfirmActionDialogModule, EmailDomainModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                        ...dependentModules,
                        ...uiModules,
                        BackbaseCoreModule.withConfig({
                            classMap: { ContactManagerWidgetComponent },
                        }),
                    ],
                    declarations: [...components, ...customizationDirectives],
                    providers: [CanDeactivateGuard, ContactsService, ...ContactConfigProviders],
                    exports: [...components, ...customizationDirectives, ...dependentModules],
                    entryComponents: [
                        ContactsDetailContainerComponent,
                        ContactsListContainerComponent,
                        ContactsFormContainerComponent,
                        ContactsTypeListContainerComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccountCreateType, BB_CONTACT_FORM_ADDITIONS_TOKEN, CanDeactivateGuard, ContactManagerPreferencesService, ContactManagerWidgetComponent, ContactManagerWidgetModule, ContactSelectAccountTypeComponent, ContactsCreateErrorNotificationCustomizableDirective, ContactsCreateSuccessNotificationCustomizableDirective, ContactsDeleteConfirmationCustomizableDirective, ContactsDeleteErrorNotificationCustomizableDirective, ContactsDeleteSuccessNotificationCustomizableDirective, ContactsDetailComponent, ContactsDetailContainerComponent, ContactsDetailCustomizableDirective, ContactsEditDiscardConfirmationCustomizableDirective, ContactsEditErrorNotificationCustomizableDirective, ContactsEditSuccessNotificationCustomizableDirective, ContactsEmptySearchStateCustomizableDirective, ContactsEmptyStateCustomizableDirective, ContactsErrorStateCustomizableDirective, ContactsFormComponent, ContactsFormContainerComponent, ContactsFormCustomizableDirective, ContactsListContainerComponent, ContactsListContainerCustomizableDirective, ContactsListItemComponent, ContactsListWidgetComponent, ContactsLoadMoreCustomizableDirective, ContactsLoadingCustomizableDirective, ContactsNavigationService, ContactsTopSectionCustomizableDirective, ContactsTypeListContainerComponent };
//# sourceMappingURL=backbase-contact-manager-widget-ang.js.map
